
TP_FreeRTOS_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000064  24000000  08005140  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b9c  24000064  080051a4  00007064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004c00  080051a4  00007c00  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001855b  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000315b  00000000  00000000  0001f5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013a8  00000000  00000000  00022748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000f1d  00000000  00000000  00023af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038094  00000000  00000000  00024a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016660  00000000  00000000  0005caa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00164bc0  00000000  00000000  00073101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d7cc1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054e8  00000000  00000000  001d7d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001dd1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005098 	.word	0x08005098

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08005098 	.word	0x08005098

080002e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002e4:	4a08      	ldr	r2, [pc, #32]	@ (8000308 <MX_FREERTOS_Init+0x28>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	4808      	ldr	r0, [pc, #32]	@ (800030c <MX_FREERTOS_Init+0x2c>)
 80002ea:	f002 f88b 	bl	8002404 <osThreadNew>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <MX_FREERTOS_Init+0x30>)
 80002f2:	6013      	str	r3, [r2, #0]

  /* creation of stateLed */
  stateLedHandle = osThreadNew(StartStateLed, NULL, &stateLed_attributes);
 80002f4:	4a07      	ldr	r2, [pc, #28]	@ (8000314 <MX_FREERTOS_Init+0x34>)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4807      	ldr	r0, [pc, #28]	@ (8000318 <MX_FREERTOS_Init+0x38>)
 80002fa:	f002 f883 	bl	8002404 <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a06      	ldr	r2, [pc, #24]	@ (800031c <MX_FREERTOS_Init+0x3c>)
 8000302:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	080050e0 	.word	0x080050e0
 800030c:	08000321 	.word	0x08000321
 8000310:	24000080 	.word	0x24000080
 8000314:	08005104 	.word	0x08005104
 8000318:	08000331 	.word	0x08000331
 800031c:	24000084 	.word	0x24000084

08000320 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f002 f8fd 	bl	8002528 <osDelay>
 800032e:	e7fb      	b.n	8000328 <StartDefaultTask+0x8>

08000330 <StartStateLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateLed */
void StartStateLed(void *argument)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f002 f8f5 	bl	8002528 <osDelay>
 800033e:	e7fb      	b.n	8000338 <StartStateLed+0x8>

08000340 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <MX_GPIO_Init+0x50>)
 8000348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800034c:	4a10      	ldr	r2, [pc, #64]	@ (8000390 <MX_GPIO_Init+0x50>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <MX_GPIO_Init+0x50>)
 8000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <MX_GPIO_Init+0x50>)
 8000366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800036a:	4a09      	ldr	r2, [pc, #36]	@ (8000390 <MX_GPIO_Init+0x50>)
 800036c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <MX_GPIO_Init+0x50>)
 8000376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800037a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037e:	603b      	str	r3, [r7, #0]
 8000380:	683b      	ldr	r3, [r7, #0]

}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	58024400 	.word	0x58024400

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800039a:	f000 f923 	bl	80005e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800039e:	4b38      	ldr	r3, [pc, #224]	@ (8000480 <main+0xec>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d11b      	bne.n	80003e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003b6:	4b32      	ldr	r3, [pc, #200]	@ (8000480 <main+0xec>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003be:	f3bf 8f4f 	dsb	sy
}
 80003c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c4:	f3bf 8f6f 	isb	sy
}
 80003c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <main+0xec>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <main+0xec>)
 80003d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003d6:	f3bf 8f4f 	dsb	sy
}
 80003da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003dc:	f3bf 8f6f 	isb	sy
}
 80003e0:	e000      	b.n	80003e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003e4:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <main+0xec>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d138      	bne.n	8000462 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003f0:	4b23      	ldr	r3, [pc, #140]	@ (8000480 <main+0xec>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003f8:	f3bf 8f4f 	dsb	sy
}
 80003fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003fe:	4b20      	ldr	r3, [pc, #128]	@ (8000480 <main+0xec>)
 8000400:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000404:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	0b5b      	lsrs	r3, r3, #13
 800040a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800040e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	08db      	lsrs	r3, r3, #3
 8000414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000418:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	015a      	lsls	r2, r3, #5
 800041e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000422:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000428:	4915      	ldr	r1, [pc, #84]	@ (8000480 <main+0xec>)
 800042a:	4313      	orrs	r3, r2
 800042c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	1e5a      	subs	r2, r3, #1
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1ef      	bne.n	800041a <main+0x86>
    } while(sets-- != 0U);
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	1e5a      	subs	r2, r3, #1
 800043e:	60ba      	str	r2, [r7, #8]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1e5      	bne.n	8000410 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000444:	f3bf 8f4f 	dsb	sy
}
 8000448:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800044a:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <main+0xec>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a0c      	ldr	r2, [pc, #48]	@ (8000480 <main+0xec>)
 8000450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000454:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000456:	f3bf 8f4f 	dsb	sy
}
 800045a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800045c:	f3bf 8f6f 	isb	sy
}
 8000460:	e000      	b.n	8000464 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000462:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 fa66 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f80c 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f7ff ff68 	bl	8000340 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000470:	f001 ff7e 	bl	8002370 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000474:	f7ff ff34 	bl	80002e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000478:	f001 ff9e 	bl	80023b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <main+0xe8>
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09e      	sub	sp, #120	@ 0x78
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800048e:	224c      	movs	r2, #76	@ 0x4c
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f004 fd18 	bl	8004ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	2220      	movs	r2, #32
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f004 fd11 	bl	8004ec8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 fc04 	bl	8000cb4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ac:	2300      	movs	r3, #0
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	4b49      	ldr	r3, [pc, #292]	@ (80005d8 <SystemClock_Config+0x154>)
 80004b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004b4:	4a48      	ldr	r2, [pc, #288]	@ (80005d8 <SystemClock_Config+0x154>)
 80004b6:	f023 0301 	bic.w	r3, r3, #1
 80004ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004bc:	4b46      	ldr	r3, [pc, #280]	@ (80005d8 <SystemClock_Config+0x154>)
 80004be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	4b45      	ldr	r3, [pc, #276]	@ (80005dc <SystemClock_Config+0x158>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a44      	ldr	r2, [pc, #272]	@ (80005dc <SystemClock_Config+0x158>)
 80004cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b42      	ldr	r3, [pc, #264]	@ (80005dc <SystemClock_Config+0x158>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004de:	bf00      	nop
 80004e0:	4b3e      	ldr	r3, [pc, #248]	@ (80005dc <SystemClock_Config+0x158>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004ec:	d1f8      	bne.n	80004e0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b3c      	ldr	r3, [pc, #240]	@ (80005e0 <SystemClock_Config+0x15c>)
 80004f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80004f4:	4a3a      	ldr	r2, [pc, #232]	@ (80005e0 <SystemClock_Config+0x15c>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80004fe:	4b38      	ldr	r3, [pc, #224]	@ (80005e0 <SystemClock_Config+0x15c>)
 8000500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	4b32      	ldr	r3, [pc, #200]	@ (80005dc <SystemClock_Config+0x158>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a31      	ldr	r2, [pc, #196]	@ (80005dc <SystemClock_Config+0x158>)
 8000516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b2f      	ldr	r3, [pc, #188]	@ (80005dc <SystemClock_Config+0x158>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <SystemClock_Config+0x154>)
 8000528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052a:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <SystemClock_Config+0x154>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000532:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <SystemClock_Config+0x154>)
 8000534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800053e:	bf00      	nop
 8000540:	4b26      	ldr	r3, [pc, #152]	@ (80005dc <SystemClock_Config+0x158>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054c:	d1f8      	bne.n	8000540 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000552:	2301      	movs	r3, #1
 8000554:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2340      	movs	r3, #64	@ 0x40
 8000558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	2300      	movs	r3, #0
 8000560:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000562:	2304      	movs	r3, #4
 8000564:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000566:	233c      	movs	r3, #60	@ 0x3c
 8000568:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800056e:	2302      	movs	r3, #2
 8000570:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000572:	2302      	movs	r3, #2
 8000574:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000576:	230c      	movs	r3, #12
 8000578:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057a:	2300      	movs	r3, #0
 800057c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fbce 	bl	8000d28 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000592:	f000 f867 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	233f      	movs	r3, #63	@ 0x3f
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a2:	2308      	movs	r3, #8
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a6:	2340      	movs	r3, #64	@ 0x40
 80005a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b4:	2340      	movs	r3, #64	@ 0x40
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f80c 	bl	80015dc <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80005ca:	f000 f84b 	bl	8000664 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3778      	adds	r7, #120	@ 0x78
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	58000400 	.word	0x58000400
 80005dc:	58024800 	.word	0x58024800
 80005e0:	58024400 	.word	0x58024400

080005e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005f6:	f000 fae5 	bl	8000bc4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005fe:	2300      	movs	r3, #0
 8000600:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000602:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000606:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000608:	2312      	movs	r3, #18
 800060a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800060c:	2300      	movs	r3, #0
 800060e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000610:	2300      	movs	r3, #0
 8000612:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000614:	2303      	movs	r3, #3
 8000616:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000620:	2301      	movs	r3, #1
 8000622:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000628:	463b      	mov	r3, r7
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fb02 	bl	8000c34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000630:	2004      	movs	r0, #4
 8000632:	f000 fadf 	bl	8000bf4 <HAL_MPU_Enable>

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d101      	bne.n	8000656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000652:	f000 f9ab 	bl	80009ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40001000 	.word	0x40001000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <Error_Handler+0x8>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <HAL_MspInit+0x38>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <HAL_MspInit+0x38>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_MspInit+0x38>)
 8000688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	210f      	movs	r1, #15
 8000698:	f06f 0001 	mvn.w	r0, #1
 800069c:	f000 fa6a 	bl	8000b74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58024400 	.word	0x58024400

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b090      	sub	sp, #64	@ 0x40
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d827      	bhi.n	800070a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80006ba:	2200      	movs	r2, #0
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	2036      	movs	r0, #54	@ 0x36
 80006c0:	f000 fa58 	bl	8000b74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006c4:	2036      	movs	r0, #54	@ 0x36
 80006c6:	f000 fa6f 	bl	8000ba8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <HAL_InitTick+0xc4>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <HAL_InitTick+0xc8>)
 80006d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006d6:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <HAL_InitTick+0xc8>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <HAL_InitTick+0xc8>)
 80006e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006ee:	f107 0210 	add.w	r2, r7, #16
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fae5 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000704:	2b00      	cmp	r3, #0
 8000706:	d106      	bne.n	8000716 <HAL_InitTick+0x6a>
 8000708:	e001      	b.n	800070e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e02b      	b.n	8000766 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800070e:	f001 fac5 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8000712:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000714:	e004      	b.n	8000720 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000716:	f001 fac1 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800071a:	4603      	mov	r3, r0
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <HAL_InitTick+0xcc>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	0c9b      	lsrs	r3, r3, #18
 800072a:	3b01      	subs	r3, #1
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <HAL_InitTick+0xd0>)
 8000730:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <HAL_InitTick+0xd4>)
 8000732:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_InitTick+0xd0>)
 8000736:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800073a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800073c:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <HAL_InitTick+0xd0>)
 800073e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000740:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <HAL_InitTick+0xd0>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_InitTick+0xd0>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <HAL_InitTick+0xd0>)
 8000750:	f001 fafc 	bl	8001d4c <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800075a:	4808      	ldr	r0, [pc, #32]	@ (800077c <HAL_InitTick+0xd0>)
 800075c:	f001 fb58 	bl	8001e10 <HAL_TIM_Base_Start_IT>
 8000760:	4603      	mov	r3, r0
 8000762:	e000      	b.n	8000766 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
}
 8000766:	4618      	mov	r0, r3
 8000768:	3740      	adds	r7, #64	@ 0x40
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24000008 	.word	0x24000008
 8000774:	58024400 	.word	0x58024400
 8000778:	431bde83 	.word	0x431bde83
 800077c:	24000088 	.word	0x24000088
 8000780:	40001000 	.word	0x40001000

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <TIM6_DAC_IRQHandler+0x10>)
 80007c2:	f001 fb9d 	bl	8001f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	24000088 	.word	0x24000088

080007d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007d4:	4b37      	ldr	r3, [pc, #220]	@ (80008b4 <SystemInit+0xe4>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007da:	4a36      	ldr	r2, [pc, #216]	@ (80008b4 <SystemInit+0xe4>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007e4:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <SystemInit+0xe8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 030f 	and.w	r3, r3, #15
 80007ec:	2b06      	cmp	r3, #6
 80007ee:	d807      	bhi.n	8000800 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007f0:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <SystemInit+0xe8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f023 030f 	bic.w	r3, r3, #15
 80007f8:	4a2f      	ldr	r2, [pc, #188]	@ (80008b8 <SystemInit+0xe8>)
 80007fa:	f043 0307 	orr.w	r3, r3, #7
 80007fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <SystemInit+0xec>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a2d      	ldr	r2, [pc, #180]	@ (80008bc <SystemInit+0xec>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800080c:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <SystemInit+0xec>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SystemInit+0xec>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4929      	ldr	r1, [pc, #164]	@ (80008bc <SystemInit+0xec>)
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <SystemInit+0xf0>)
 800081a:	4013      	ands	r3, r2
 800081c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <SystemInit+0xe8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <SystemInit+0xe8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f023 030f 	bic.w	r3, r3, #15
 8000832:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <SystemInit+0xe8>)
 8000834:	f043 0307 	orr.w	r3, r3, #7
 8000838:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <SystemInit+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <SystemInit+0xec>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <SystemInit+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <SystemInit+0xec>)
 800084e:	4a1d      	ldr	r2, [pc, #116]	@ (80008c4 <SystemInit+0xf4>)
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <SystemInit+0xec>)
 8000854:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <SystemInit+0xf8>)
 8000856:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <SystemInit+0xec>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <SystemInit+0xfc>)
 800085c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <SystemInit+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <SystemInit+0xec>)
 8000866:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <SystemInit+0xfc>)
 8000868:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <SystemInit+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <SystemInit+0xec>)
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <SystemInit+0xfc>)
 8000874:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <SystemInit+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <SystemInit+0xec>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <SystemInit+0xec>)
 8000882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000886:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <SystemInit+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <SystemInit+0x100>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <SystemInit+0x104>)
 8000894:	4013      	ands	r3, r2
 8000896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800089a:	d202      	bcs.n	80008a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800089c:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <SystemInit+0x108>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <SystemInit+0x10c>)
 80008a4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80008a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00
 80008b8:	52002000 	.word	0x52002000
 80008bc:	58024400 	.word	0x58024400
 80008c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008c4:	02020200 	.word	0x02020200
 80008c8:	01ff0000 	.word	0x01ff0000
 80008cc:	01010280 	.word	0x01010280
 80008d0:	5c001000 	.word	0x5c001000
 80008d4:	ffff0000 	.word	0xffff0000
 80008d8:	51008108 	.word	0x51008108
 80008dc:	52004000 	.word	0x52004000

080008e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e4:	f7ff ff74 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f004 fb39 	bl	8004f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000912:	f7ff fd3f 	bl	8000394 <main>
  bx  lr
 8000916:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000918:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800091c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000920:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000924:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000928:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800092c:	24004c00 	.word	0x24004c00

08000930 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC3_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093a:	2003      	movs	r0, #3
 800093c:	f000 f90f 	bl	8000b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000940:	f001 f802 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8000944:	4602      	mov	r2, r0
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <HAL_Init+0x68>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	4913      	ldr	r1, [pc, #76]	@ (80009a0 <HAL_Init+0x6c>)
 8000952:	5ccb      	ldrb	r3, [r1, r3]
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	fa22 f303 	lsr.w	r3, r2, r3
 800095c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_Init+0x68>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <HAL_Init+0x6c>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	fa22 f303 	lsr.w	r3, r2, r3
 8000974:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <HAL_Init+0x70>)
 8000976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000978:	4a0b      	ldr	r2, [pc, #44]	@ (80009a8 <HAL_Init+0x74>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097e:	200f      	movs	r0, #15
 8000980:	f7ff fe94 	bl	80006ac <HAL_InitTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e002      	b.n	8000994 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800098e:	f7ff fe6f 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	58024400 	.word	0x58024400
 80009a0:	08005128 	.word	0x08005128
 80009a4:	24000004 	.word	0x24000004
 80009a8:	24000000 	.word	0x24000000

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2400000c 	.word	0x2400000c
 80009d0:	240000d4 	.word	0x240000d4

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	240000d4 	.word	0x240000d4

080009ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_GetREVID+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	0c1b      	lsrs	r3, r3, #16
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	5c001000 	.word	0x5c001000

08000a04 <__NVIC_SetPriorityGrouping>:
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	05fa0000 	.word	0x05fa0000

08000a4c <__NVIC_GetPriorityGrouping>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	@ (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	@ (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	@ (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	@ 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	@ 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff4c 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b82:	f7ff ff63 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f7ff ffb3 	bl	8000af8 <NVIC_EncodePriority>
 8000b92:	4602      	mov	r2, r0
 8000b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff82 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff56 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bc8:	f3bf 8f5f 	dmb	sy
}
 8000bcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <HAL_MPU_Disable+0x28>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd2:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_MPU_Disable+0x28>)
 8000bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_MPU_Disable+0x2c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	e000ed90 	.word	0xe000ed90

08000bf4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <HAL_MPU_Enable+0x38>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_MPU_Enable+0x3c>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <HAL_MPU_Enable+0x3c>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c10:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c12:	f3bf 8f4f 	dsb	sy
}
 8000c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c18:	f3bf 8f6f 	isb	sy
}
 8000c1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed90 	.word	0xe000ed90
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	785a      	ldrb	r2, [r3, #1]
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8000c42:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c50:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7b1b      	ldrb	r3, [r3, #12]
 8000c5c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7adb      	ldrb	r3, [r3, #11]
 8000c62:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7a9b      	ldrb	r3, [r3, #10]
 8000c6a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7b5b      	ldrb	r3, [r3, #13]
 8000c72:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b9b      	ldrb	r3, [r3, #14]
 8000c7a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7bdb      	ldrb	r3, [r3, #15]
 8000c82:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7a5b      	ldrb	r3, [r3, #9]
 8000c8a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c94:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c9e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca0:	6113      	str	r3, [r2, #16]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed90 	.word	0xe000ed90

08000cb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000cbc:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <HAL_PWREx_ConfigSupply+0x70>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d00a      	beq.n	8000cde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <HAL_PWREx_ConfigSupply+0x70>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d001      	beq.n	8000cda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e01f      	b.n	8000d1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e01d      	b.n	8000d1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_PWREx_ConfigSupply+0x70>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f023 0207 	bic.w	r2, r3, #7
 8000ce6:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <HAL_PWREx_ConfigSupply+0x70>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000cee:	f7ff fe71 	bl	80009d4 <HAL_GetTick>
 8000cf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cf4:	e009      	b.n	8000d0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000cf6:	f7ff fe6d 	bl	80009d4 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d04:	d901      	bls.n	8000d0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e007      	b.n	8000d1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_PWREx_ConfigSupply+0x70>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d16:	d1ee      	bne.n	8000cf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58024800 	.word	0x58024800

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	@ 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f000 bc48 	b.w	80015cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 8088 	beq.w	8000e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4a:	4b99      	ldr	r3, [pc, #612]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d54:	4b96      	ldr	r3, [pc, #600]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d5c:	2b10      	cmp	r3, #16
 8000d5e:	d007      	beq.n	8000d70 <HAL_RCC_OscConfig+0x48>
 8000d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d62:	2b18      	cmp	r3, #24
 8000d64:	d111      	bne.n	8000d8a <HAL_RCC_OscConfig+0x62>
 8000d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d10c      	bne.n	8000d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d06d      	beq.n	8000e58 <HAL_RCC_OscConfig+0x130>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d169      	bne.n	8000e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f000 bc21 	b.w	80015cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d92:	d106      	bne.n	8000da2 <HAL_RCC_OscConfig+0x7a>
 8000d94:	4b86      	ldr	r3, [pc, #536]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a85      	ldr	r2, [pc, #532]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e02e      	b.n	8000e00 <HAL_RCC_OscConfig+0xd8>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x9c>
 8000daa:	4b81      	ldr	r3, [pc, #516]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a80      	ldr	r2, [pc, #512]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b7e      	ldr	r3, [pc, #504]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7d      	ldr	r2, [pc, #500]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e01d      	b.n	8000e00 <HAL_RCC_OscConfig+0xd8>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0xc0>
 8000dce:	4b78      	ldr	r3, [pc, #480]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b75      	ldr	r3, [pc, #468]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a74      	ldr	r2, [pc, #464]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e00b      	b.n	8000e00 <HAL_RCC_OscConfig+0xd8>
 8000de8:	4b71      	ldr	r3, [pc, #452]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a70      	ldr	r2, [pc, #448]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b6e      	ldr	r3, [pc, #440]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a6d      	ldr	r2, [pc, #436]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e08:	f7ff fde4 	bl	80009d4 <HAL_GetTick>
 8000e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e10:	f7ff fde0 	bl	80009d4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b64      	cmp	r3, #100	@ 0x64
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e3d4      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e22:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0xe8>
 8000e2e:	e014      	b.n	8000e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e30:	f7ff fdd0 	bl	80009d4 <HAL_GetTick>
 8000e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fdcc 	bl	80009d4 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	@ 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e3c0      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e4a:	4b59      	ldr	r3, [pc, #356]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x110>
 8000e56:	e000      	b.n	8000e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80ca 	beq.w	8000ffc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e68:	4b51      	ldr	r3, [pc, #324]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e72:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <HAL_RCC_OscConfig+0x166>
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2b18      	cmp	r3, #24
 8000e82:	d156      	bne.n	8000f32 <HAL_RCC_OscConfig+0x20a>
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d151      	bne.n	8000f32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e8e:	4b48      	ldr	r3, [pc, #288]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x17e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e392      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000ea6:	4b42      	ldr	r3, [pc, #264]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f023 0219 	bic.w	r2, r3, #25
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	493f      	ldr	r1, [pc, #252]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fd8c 	bl	80009d4 <HAL_GetTick>
 8000ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fd88 	bl	80009d4 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e37c      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ed2:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ede:	f7ff fd85 	bl	80009ec <HAL_GetREVID>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d817      	bhi.n	8000f1c <HAL_RCC_OscConfig+0x1f4>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	2b40      	cmp	r3, #64	@ 0x40
 8000ef2:	d108      	bne.n	8000f06 <HAL_RCC_OscConfig+0x1de>
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000efc:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f04:	e07a      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	031b      	lsls	r3, r3, #12
 8000f14:	4926      	ldr	r1, [pc, #152]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f1a:	e06f      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	4921      	ldr	r1, [pc, #132]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	e064      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d047      	beq.n	8000fca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 0219 	bic.w	r2, r3, #25
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	491a      	ldr	r1, [pc, #104]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fd42 	bl	80009d4 <HAL_GetTick>
 8000f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f54:	f7ff fd3e 	bl	80009d4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e332      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	f7ff fd3b 	bl	80009ec <HAL_GetREVID>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d819      	bhi.n	8000fb4 <HAL_RCC_OscConfig+0x28c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	2b40      	cmp	r3, #64	@ 0x40
 8000f86:	d108      	bne.n	8000f9a <HAL_RCC_OscConfig+0x272>
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000f90:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f96:	6053      	str	r3, [r2, #4]
 8000f98:	e030      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	031b      	lsls	r3, r3, #12
 8000fa8:	4901      	ldr	r1, [pc, #4]	@ (8000fb0 <HAL_RCC_OscConfig+0x288>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	604b      	str	r3, [r1, #4]
 8000fae:	e025      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	4997      	ldr	r1, [pc, #604]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
 8000fc8:	e018      	b.n	8000ffc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fca:	4b95      	ldr	r3, [pc, #596]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a94      	ldr	r2, [pc, #592]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fcfd 	bl	80009d4 <HAL_GetTick>
 8000fda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fcf9 	bl	80009d4 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e2ed      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ff0:	4b8b      	ldr	r3, [pc, #556]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a9 	beq.w	800115c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100a:	4b85      	ldr	r3, [pc, #532]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001012:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001014:	4b82      	ldr	r3, [pc, #520]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001018:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d007      	beq.n	8001030 <HAL_RCC_OscConfig+0x308>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b18      	cmp	r3, #24
 8001024:	d13a      	bne.n	800109c <HAL_RCC_OscConfig+0x374>
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d135      	bne.n	800109c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001030:	4b7b      	ldr	r3, [pc, #492]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x320>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b80      	cmp	r3, #128	@ 0x80
 8001042:	d001      	beq.n	8001048 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e2c1      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001048:	f7ff fcd0 	bl	80009ec <HAL_GetREVID>
 800104c:	4603      	mov	r3, r0
 800104e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001052:	4293      	cmp	r3, r2
 8001054:	d817      	bhi.n	8001086 <HAL_RCC_OscConfig+0x35e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	2b20      	cmp	r3, #32
 800105c:	d108      	bne.n	8001070 <HAL_RCC_OscConfig+0x348>
 800105e:	4b70      	ldr	r3, [pc, #448]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001066:	4a6e      	ldr	r2, [pc, #440]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800106c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800106e:	e075      	b.n	800115c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001070:	4b6b      	ldr	r3, [pc, #428]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	069b      	lsls	r3, r3, #26
 800107e:	4968      	ldr	r1, [pc, #416]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001084:	e06a      	b.n	800115c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001086:	4b66      	ldr	r3, [pc, #408]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	061b      	lsls	r3, r3, #24
 8001094:	4962      	ldr	r1, [pc, #392]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800109a:	e05f      	b.n	800115c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d042      	beq.n	800112a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80010a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80010aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b0:	f7ff fc90 	bl	80009d4 <HAL_GetTick>
 80010b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc8c 	bl	80009d4 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e280      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010ca:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010d6:	f7ff fc89 	bl	80009ec <HAL_GetREVID>
 80010da:	4603      	mov	r3, r0
 80010dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d817      	bhi.n	8001114 <HAL_RCC_OscConfig+0x3ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	2b20      	cmp	r3, #32
 80010ea:	d108      	bne.n	80010fe <HAL_RCC_OscConfig+0x3d6>
 80010ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80010f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80010f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010fa:	6053      	str	r3, [r2, #4]
 80010fc:	e02e      	b.n	800115c <HAL_RCC_OscConfig+0x434>
 80010fe:	4b48      	ldr	r3, [pc, #288]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	069b      	lsls	r3, r3, #26
 800110c:	4944      	ldr	r1, [pc, #272]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e023      	b.n	800115c <HAL_RCC_OscConfig+0x434>
 8001114:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	061b      	lsls	r3, r3, #24
 8001122:	493f      	ldr	r1, [pc, #252]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001124:	4313      	orrs	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
 8001128:	e018      	b.n	800115c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800112a:	4b3d      	ldr	r3, [pc, #244]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a3c      	ldr	r2, [pc, #240]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001136:	f7ff fc4d 	bl	80009d4 <HAL_GetTick>
 800113a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800113e:	f7ff fc49 	bl	80009d4 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e23d      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001150:	4b33      	ldr	r3, [pc, #204]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f0      	bne.n	800113e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d036      	beq.n	80011d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d019      	beq.n	80011a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001170:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001174:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117c:	f7ff fc2a 	bl	80009d4 <HAL_GetTick>
 8001180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001184:	f7ff fc26 	bl	80009d4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e21a      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x45c>
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80011a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80011aa:	f023 0301 	bic.w	r3, r3, #1
 80011ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fc10 	bl	80009d4 <HAL_GetTick>
 80011b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc0c 	bl	80009d4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e200      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80011cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d039      	beq.n	8001256 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d01c      	beq.n	8001224 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fbed 	bl	80009d4 <HAL_GetTick>
 80011fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011fe:	f7ff fbe9 	bl	80009d4 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1dd      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_RCC_OscConfig+0x4f8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x4d6>
 800121c:	e01b      	b.n	8001256 <HAL_RCC_OscConfig+0x52e>
 800121e:	bf00      	nop
 8001220:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001224:	4b9b      	ldr	r3, [pc, #620]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a9a      	ldr	r2, [pc, #616]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800122a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800122e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001230:	f7ff fbd0 	bl	80009d4 <HAL_GetTick>
 8001234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001238:	f7ff fbcc 	bl	80009d4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1c0      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800124a:	4b92      	ldr	r3, [pc, #584]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8081 	beq.w	8001366 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001264:	4b8c      	ldr	r3, [pc, #560]	@ (8001498 <HAL_RCC_OscConfig+0x770>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a8b      	ldr	r2, [pc, #556]	@ (8001498 <HAL_RCC_OscConfig+0x770>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001270:	f7ff fbb0 	bl	80009d4 <HAL_GetTick>
 8001274:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff fbac 	bl	80009d4 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	@ 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1a0      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800128a:	4b83      	ldr	r3, [pc, #524]	@ (8001498 <HAL_RCC_OscConfig+0x770>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x584>
 800129e:	4b7d      	ldr	r3, [pc, #500]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80012aa:	e02d      	b.n	8001308 <HAL_RCC_OscConfig+0x5e0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <HAL_RCC_OscConfig+0x5a6>
 80012b4:	4b77      	ldr	r3, [pc, #476]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b8:	4a76      	ldr	r2, [pc, #472]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c0:	4b74      	ldr	r3, [pc, #464]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	4a73      	ldr	r2, [pc, #460]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012c6:	f023 0304 	bic.w	r3, r3, #4
 80012ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x5e0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x5c8>
 80012d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	4a6e      	ldr	r2, [pc, #440]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0x5e0>
 80012f0:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a67      	ldr	r2, [pc, #412]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80012fc:	4b65      	ldr	r3, [pc, #404]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001300:	4a64      	ldr	r2, [pc, #400]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001302:	f023 0304 	bic.w	r3, r3, #4
 8001306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fb60 	bl	80009d4 <HAL_GetTick>
 8001314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001318:	f7ff fb5c 	bl	80009d4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e14e      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800132e:	4b59      	ldr	r3, [pc, #356]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ee      	beq.n	8001318 <HAL_RCC_OscConfig+0x5f0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133c:	f7ff fb4a 	bl	80009d4 <HAL_GetTick>
 8001340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff fb46 	bl	80009d4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e138      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800135a:	4b4e      	ldr	r3, [pc, #312]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ee      	bne.n	8001344 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 812d 	beq.w	80015ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001370:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001378:	2b18      	cmp	r3, #24
 800137a:	f000 80bd 	beq.w	80014f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	2b02      	cmp	r3, #2
 8001384:	f040 809e 	bne.w	80014c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001388:	4b42      	ldr	r3, [pc, #264]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a41      	ldr	r2, [pc, #260]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800138e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fb1e 	bl	80009d4 <HAL_GetTick>
 8001398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fb1a 	bl	80009d4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e10e      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ae:	4b39      	ldr	r3, [pc, #228]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80013bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013be:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_RCC_OscConfig+0x774>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	430a      	orrs	r2, r1
 80013ce:	4931      	ldr	r1, [pc, #196]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	3b01      	subs	r3, #1
 80013da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e2:	3b01      	subs	r3, #1
 80013e4:	025b      	lsls	r3, r3, #9
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ee:	3b01      	subs	r3, #1
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fc:	3b01      	subs	r3, #1
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001404:	4923      	ldr	r1, [pc, #140]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800140a:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_RCC_OscConfig+0x778>)
 800141c:	4013      	ands	r3, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001422:	00d2      	lsls	r2, r2, #3
 8001424:	491b      	ldr	r1, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	f023 020c 	bic.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4917      	ldr	r1, [pc, #92]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001440:	f023 0202 	bic.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001448:	4912      	ldr	r1, [pc, #72]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800144a:	4313      	orrs	r3, r2
 800144c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001452:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800145c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001476:	4a07      	ldr	r2, [pc, #28]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_RCC_OscConfig+0x76c>)
 8001484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff faa3 	bl	80009d4 <HAL_GetTick>
 800148e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001490:	e011      	b.n	80014b6 <HAL_RCC_OscConfig+0x78e>
 8001492:	bf00      	nop
 8001494:	58024400 	.word	0x58024400
 8001498:	58024800 	.word	0x58024800
 800149c:	fffffc0c 	.word	0xfffffc0c
 80014a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fa96 	bl	80009d4 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e08a      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x77c>
 80014c2:	e082      	b.n	80015ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a42      	ldr	r2, [pc, #264]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80014ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa80 	bl	80009d4 <HAL_GetTick>
 80014d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fa7c 	bl	80009d4 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e070      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ea:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x7b0>
 80014f6:	e068      	b.n	80015ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80014f8:	4b36      	ldr	r3, [pc, #216]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	2b01      	cmp	r3, #1
 800150a:	d031      	beq.n	8001570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d12a      	bne.n	8001570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d122      	bne.n	8001570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d11a      	bne.n	8001570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0a5b      	lsrs	r3, r3, #9
 800153e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001546:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d111      	bne.n	8001570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001558:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	0e1b      	lsrs	r3, r3, #24
 8001562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e02b      	b.n	80015cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 8001576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800157e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	429a      	cmp	r2, r3
 8001588:	d01f      	beq.n	80015ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001596:	f7ff fa1d 	bl	80009d4 <HAL_GetTick>
 800159a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800159c:	bf00      	nop
 800159e:	f7ff fa19 	bl	80009d4 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d0f9      	beq.n	800159e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80015ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_RCC_OscConfig+0x8b0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	4906      	ldr	r1, [pc, #24]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_RCC_OscConfig+0x8ac>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3730      	adds	r7, #48	@ 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024400 	.word	0x58024400
 80015d8:	ffff0007 	.word	0xffff0007

080015dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e19c      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b8a      	ldr	r3, [pc, #552]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d910      	bls.n	8001620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b87      	ldr	r3, [pc, #540]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 020f 	bic.w	r2, r3, #15
 8001606:	4985      	ldr	r1, [pc, #532]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b83      	ldr	r3, [pc, #524]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e184      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	4b7b      	ldr	r3, [pc, #492]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001638:	429a      	cmp	r2, r3
 800163a:	d908      	bls.n	800164e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800163c:	4b78      	ldr	r3, [pc, #480]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	4975      	ldr	r1, [pc, #468]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800164a:	4313      	orrs	r3, r2
 800164c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001666:	429a      	cmp	r2, r3
 8001668:	d908      	bls.n	800167c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800166a:	4b6d      	ldr	r3, [pc, #436]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	496a      	ldr	r1, [pc, #424]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001678:	4313      	orrs	r3, r2
 800167a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	d010      	beq.n	80016aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699a      	ldr	r2, [r3, #24]
 800168c:	4b64      	ldr	r3, [pc, #400]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001694:	429a      	cmp	r2, r3
 8001696:	d908      	bls.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001698:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	495e      	ldr	r1, [pc, #376]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d908      	bls.n	80016d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80016c6:	4b56      	ldr	r3, [pc, #344]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4953      	ldr	r1, [pc, #332]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d010      	beq.n	8001706 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d908      	bls.n	8001706 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f023 020f 	bic.w	r2, r3, #15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4947      	ldr	r1, [pc, #284]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001702:	4313      	orrs	r3, r2
 8001704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d055      	beq.n	80017be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001712:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4940      	ldr	r1, [pc, #256]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001720:	4313      	orrs	r3, r2
 8001722:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d107      	bne.n	800173c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800172c:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d121      	bne.n	800177c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0f6      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d115      	bne.n	800177c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0ea      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800175c:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0de      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176c:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0d6      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f023 0207 	bic.w	r2, r3, #7
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4925      	ldr	r1, [pc, #148]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 800178a:	4313      	orrs	r3, r2
 800178c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800178e:	f7ff f921 	bl	80009d4 <HAL_GetTick>
 8001792:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001794:	e00a      	b.n	80017ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7ff f91d 	bl	80009d4 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0be      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d1eb      	bne.n	8001796 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d208      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f023 020f 	bic.w	r2, r3, #15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	490e      	ldr	r1, [pc, #56]	@ (8001820 <HAL_RCC_ClockConfig+0x244>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d214      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 020f 	bic.w	r2, r3, #15
 8001802:	4906      	ldr	r1, [pc, #24]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <HAL_RCC_ClockConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e086      	b.n	800192a <HAL_RCC_ClockConfig+0x34e>
 800181c:	52002000 	.word	0x52002000
 8001820:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800183c:	429a      	cmp	r2, r3
 800183e:	d208      	bcs.n	8001852 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001840:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	4939      	ldr	r1, [pc, #228]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 800184e:	4313      	orrs	r3, r2
 8001850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800186a:	429a      	cmp	r2, r3
 800186c:	d208      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	492e      	ldr	r1, [pc, #184]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 800187c:	4313      	orrs	r3, r2
 800187e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d010      	beq.n	80018ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001898:	429a      	cmp	r2, r3
 800189a:	d208      	bcs.n	80018ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4922      	ldr	r1, [pc, #136]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d010      	beq.n	80018dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d208      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4917      	ldr	r1, [pc, #92]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018dc:	f000 f834 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	4912      	ldr	r1, [pc, #72]	@ (8001938 <HAL_RCC_ClockConfig+0x35c>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_RCC_ClockConfig+0x358>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_ClockConfig+0x35c>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_RCC_ClockConfig+0x360>)
 8001912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_RCC_ClockConfig+0x364>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_RCC_ClockConfig+0x368>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fec4 	bl	80006ac <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400
 8001938:	08005128 	.word	0x08005128
 800193c:	24000004 	.word	0x24000004
 8001940:	24000000 	.word	0x24000000
 8001944:	24000008 	.word	0x24000008

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194e:	4bb3      	ldr	r3, [pc, #716]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001956:	2b18      	cmp	r3, #24
 8001958:	f200 8155 	bhi.w	8001c06 <HAL_RCC_GetSysClockFreq+0x2be>
 800195c:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <HAL_RCC_GetSysClockFreq+0x1c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	080019c9 	.word	0x080019c9
 8001968:	08001c07 	.word	0x08001c07
 800196c:	08001c07 	.word	0x08001c07
 8001970:	08001c07 	.word	0x08001c07
 8001974:	08001c07 	.word	0x08001c07
 8001978:	08001c07 	.word	0x08001c07
 800197c:	08001c07 	.word	0x08001c07
 8001980:	08001c07 	.word	0x08001c07
 8001984:	080019ef 	.word	0x080019ef
 8001988:	08001c07 	.word	0x08001c07
 800198c:	08001c07 	.word	0x08001c07
 8001990:	08001c07 	.word	0x08001c07
 8001994:	08001c07 	.word	0x08001c07
 8001998:	08001c07 	.word	0x08001c07
 800199c:	08001c07 	.word	0x08001c07
 80019a0:	08001c07 	.word	0x08001c07
 80019a4:	080019f5 	.word	0x080019f5
 80019a8:	08001c07 	.word	0x08001c07
 80019ac:	08001c07 	.word	0x08001c07
 80019b0:	08001c07 	.word	0x08001c07
 80019b4:	08001c07 	.word	0x08001c07
 80019b8:	08001c07 	.word	0x08001c07
 80019bc:	08001c07 	.word	0x08001c07
 80019c0:	08001c07 	.word	0x08001c07
 80019c4:	080019fb 	.word	0x080019fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019c8:	4b94      	ldr	r3, [pc, #592]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80019d4:	4b91      	ldr	r3, [pc, #580]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	4a90      	ldr	r2, [pc, #576]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80019e6:	e111      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019ea:	61bb      	str	r3, [r7, #24]
      break;
 80019ec:	e10e      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80019ee:	4b8d      	ldr	r3, [pc, #564]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80019f0:	61bb      	str	r3, [r7, #24]
      break;
 80019f2:	e10b      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80019f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80019f6:	61bb      	str	r3, [r7, #24]
      break;
 80019f8:	e108      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019fa:	4b88      	ldr	r3, [pc, #544]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001a04:	4b85      	ldr	r3, [pc, #532]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a10:	4b82      	ldr	r3, [pc, #520]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001a1a:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80e1 	beq.w	8001c00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f000 8083 	beq.w	8001b4c <HAL_RCC_GetSysClockFreq+0x204>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f200 80a1 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x248>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x114>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d056      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a5a:	e099      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02d      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a68:	4b6c      	ldr	r3, [pc, #432]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	4a6b      	ldr	r2, [pc, #428]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a92:	4b62      	ldr	r3, [pc, #392]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ac2:	e087      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ace:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad6:	4b51      	ldr	r3, [pc, #324]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b06:	e065      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b1a:	4b40      	ldr	r3, [pc, #256]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b4a:	e043      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b8e:	e021      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	0a5b      	lsrs	r3, r3, #9
 8001bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf8:	ee17 3a90 	vmov	r3, s15
 8001bfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001bfe:	e005      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
      break;
 8001c04:	e002      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c08:	61bb      	str	r3, [r7, #24]
      break;
 8001c0a:	bf00      	nop
  }

  return sysclockfreq;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	03d09000 	.word	0x03d09000
 8001c24:	003d0900 	.word	0x003d0900
 8001c28:	017d7840 	.word	0x017d7840
 8001c2c:	46000000 	.word	0x46000000
 8001c30:	4c742400 	.word	0x4c742400
 8001c34:	4a742400 	.word	0x4a742400
 8001c38:	4bbebc20 	.word	0x4bbebc20

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c42:	f7ff fe81 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490f      	ldr	r1, [pc, #60]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c7a:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	08005128 	.word	0x08005128
 8001c94:	24000004 	.word	0x24000004
 8001c98:	24000000 	.word	0x24000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001ca0:	f7ff ffcc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	08005128 	.word	0x08005128

08001cc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223f      	movs	r2, #63	@ 0x3f
 8001cd6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 0207 	and.w	r2, r3, #7
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_RCC_GetClockConfig+0x7c>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_GetClockConfig+0x80>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 020f 	and.w	r2, r3, #15
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58024400 	.word	0x58024400
 8001d48:	52002000 	.word	0x52002000

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e049      	b.n	8001df2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f841 	bl	8001dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 f9e8 	bl	8002160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d001      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e054      	b.n	8001ed2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e52:	d01d      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d115      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_TIM_Base_Start_IT+0xec>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d015      	beq.n	8001ece <HAL_TIM_Base_Start_IT+0xbe>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d011      	beq.n	8001ece <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e008      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e000      	b.n	8001ed0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40010400 	.word	0x40010400
 8001ef4:	40001800 	.word	0x40001800
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	00010007 	.word	0x00010007

08001f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0202 	mvn.w	r2, #2
 8001f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8e9 	bl	8002122 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8db 	bl	800210e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f8ec 	bl	8002136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0204 	mvn.w	r2, #4
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8c3 	bl	8002122 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8b5 	bl	800210e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8c6 	bl	8002136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f89d 	bl	8002122 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f88f 	bl	800210e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8a0 	bl	8002136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f877 	bl	8002122 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f869 	bl	800210e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f87a 	bl	8002136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0201 	mvn.w	r2, #1
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe faea 	bl	8000640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f913 	bl	80022c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f90b 	bl	80022d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f834 	bl	800214a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0220 	mvn.w	r2, #32
 80020fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f8d3 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a46      	ldr	r2, [pc, #280]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217e:	d00f      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a43      	ldr	r2, [pc, #268]	@ (8002290 <TIM_Base_SetConfig+0x130>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00b      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a42      	ldr	r2, [pc, #264]	@ (8002294 <TIM_Base_SetConfig+0x134>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a41      	ldr	r2, [pc, #260]	@ (8002298 <TIM_Base_SetConfig+0x138>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a35      	ldr	r2, [pc, #212]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a32      	ldr	r2, [pc, #200]	@ (8002290 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2e      	ldr	r2, [pc, #184]	@ (80022a0 <TIM_Base_SetConfig+0x140>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2d      	ldr	r2, [pc, #180]	@ (80022a4 <TIM_Base_SetConfig+0x144>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0x9a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2c      	ldr	r2, [pc, #176]	@ (80022a8 <TIM_Base_SetConfig+0x148>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a16      	ldr	r2, [pc, #88]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00f      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a18      	ldr	r2, [pc, #96]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00b      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <TIM_Base_SetConfig+0x140>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a16      	ldr	r2, [pc, #88]	@ (80022a4 <TIM_Base_SetConfig+0x144>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a15      	ldr	r2, [pc, #84]	@ (80022a8 <TIM_Base_SetConfig+0x148>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f023 0201 	bic.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
  }
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010400 	.word	0x40010400
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <__NVIC_SetPriority>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	@ (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SysTick_Handler+0x1c>)
 8002342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002344:	f001 fd46 	bl	8003dd4 <xTaskGetSchedulerState>
 8002348:	4603      	mov	r3, r0
 800234a:	2b01      	cmp	r3, #1
 800234c:	d001      	beq.n	8002352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800234e:	f002 fb3b 	bl	80049c8 <xPortSysTickHandler>
  }
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002360:	2100      	movs	r1, #0
 8002362:	f06f 0004 	mvn.w	r0, #4
 8002366:	f7ff ffbf 	bl	80022e8 <__NVIC_SetPriority>
#endif
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002376:	f3ef 8305 	mrs	r3, IPSR
 800237a:	603b      	str	r3, [r7, #0]
  return(result);
 800237c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002382:	f06f 0305 	mvn.w	r3, #5
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e00c      	b.n	80023a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <osKernelInitialize+0x44>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002392:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <osKernelInitialize+0x44>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e002      	b.n	80023a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	240000d8 	.word	0x240000d8

080023b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023be:	f3ef 8305 	mrs	r3, IPSR
 80023c2:	603b      	str	r3, [r7, #0]
  return(result);
 80023c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80023ca:	f06f 0305 	mvn.w	r3, #5
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	e010      	b.n	80023f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <osKernelStart+0x48>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d109      	bne.n	80023ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023da:	f7ff ffbf 	bl	800235c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <osKernelStart+0x48>)
 80023e0:	2202      	movs	r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023e4:	f001 f892 	bl	800350c <vTaskStartScheduler>
      stat = osOK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e002      	b.n	80023f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	240000d8 	.word	0x240000d8

08002404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	@ 0x38
 8002408:	af04      	add	r7, sp, #16
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002414:	f3ef 8305 	mrs	r3, IPSR
 8002418:	617b      	str	r3, [r7, #20]
  return(result);
 800241a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800241c:	2b00      	cmp	r3, #0
 800241e:	d17e      	bne.n	800251e <osThreadNew+0x11a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07b      	beq.n	800251e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800242a:	2318      	movs	r3, #24
 800242c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d045      	beq.n	80024ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <osThreadNew+0x48>
        name = attr->name;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <osThreadNew+0x6e>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b38      	cmp	r3, #56	@ 0x38
 8002464:	d805      	bhi.n	8002472 <osThreadNew+0x6e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <osThreadNew+0x72>
        return (NULL);
 8002472:	2300      	movs	r3, #0
 8002474:	e054      	b.n	8002520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <osThreadNew+0xa8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2ba7      	cmp	r3, #167	@ 0xa7
 8002494:	d90a      	bls.n	80024ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <osThreadNew+0xa8>
        mem = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e010      	b.n	80024ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <osThreadNew+0xca>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d108      	bne.n	80024ce <osThreadNew+0xca>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <osThreadNew+0xca>
          mem = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e001      	b.n	80024ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d110      	bne.n	80024f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024dc:	9202      	str	r2, [sp, #8]
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6a3a      	ldr	r2, [r7, #32]
 80024e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fe1a 	bl	8003124 <xTaskCreateStatic>
 80024f0:	4603      	mov	r3, r0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	e013      	b.n	800251e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d110      	bne.n	800251e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fe68 	bl	80031e4 <xTaskCreate>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <osThreadNew+0x11a>
            hTask = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800251e:	693b      	ldr	r3, [r7, #16]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3728      	adds	r7, #40	@ 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002530:	f3ef 8305 	mrs	r3, IPSR
 8002534:	60bb      	str	r3, [r7, #8]
  return(result);
 8002536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <osDelay+0x1c>
    stat = osErrorISR;
 800253c:	f06f 0305 	mvn.w	r3, #5
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e007      	b.n	8002554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 ffa6 	bl	80034a0 <vTaskDelay>
    }
  }

  return (stat);
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a07      	ldr	r2, [pc, #28]	@ (800258c <vApplicationGetIdleTaskMemory+0x2c>)
 8002570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4a06      	ldr	r2, [pc, #24]	@ (8002590 <vApplicationGetIdleTaskMemory+0x30>)
 8002576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	240000dc 	.word	0x240000dc
 8002590:	24000184 	.word	0x24000184

08002594 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80025a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4a06      	ldr	r2, [pc, #24]	@ (80025c4 <vApplicationGetTimerTaskMemory+0x30>)
 80025aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025b2:	601a      	str	r2, [r3, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	24000384 	.word	0x24000384
 80025c4:	2400042c 	.word	0x2400042c

080025c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0208 	add.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0208 	add.w	r2, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0208 	add.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d103      	bne.n	800268a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e00c      	b.n	80026a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3308      	adds	r3, #8
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e002      	b.n	8002698 <vListInsert+0x2e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d2f6      	bcs.n	8002692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d103      	bne.n	8002710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1e5a      	subs	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800275c:	f002 f8a4 	bl	80048a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	441a      	add	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	3b01      	subs	r3, #1
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	441a      	add	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	22ff      	movs	r2, #255	@ 0xff
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d114      	bne.n	80027dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01a      	beq.n	80027f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3310      	adds	r3, #16
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f942 	bl	8003a48 <xTaskRemoveFromEventList>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <xQueueGenericReset+0xd0>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	e009      	b.n	80027f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3310      	adds	r3, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fef1 	bl	80025c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3324      	adds	r3, #36	@ 0x24
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff feec 	bl	80025c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027f0:	f002 f88c 	bl	800490c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	@ 0x38
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <xQueueGenericCreateStatic+0x56>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <xQueueGenericCreateStatic+0x5a>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <xQueueGenericCreateStatic+0x5c>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10b      	bne.n	800287c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	623b      	str	r3, [r7, #32]
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <xQueueGenericCreateStatic+0x84>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueGenericCreateStatic+0x88>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueGenericCreateStatic+0x8a>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	61fb      	str	r3, [r7, #28]
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	e7fd      	b.n	80028a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028aa:	2350      	movs	r3, #80	@ 0x50
 80028ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b50      	cmp	r3, #80	@ 0x50
 80028b2:	d00b      	beq.n	80028cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	61bb      	str	r3, [r7, #24]
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80028d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80028e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f805 	bl	80028fe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	@ 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e002      	b.n	8002920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800292c:	2101      	movs	r1, #1
 800292e:	69b8      	ldr	r0, [r7, #24]
 8002930:	f7ff fefe 	bl	8002730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	@ 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <xQueueGenericSend+0x34>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xQueueGenericSend+0x42>
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <xQueueGenericSend+0x46>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xQueueGenericSend+0x48>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <xQueueGenericSend+0x64>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d103      	bne.n	80029b6 <xQueueGenericSend+0x72>
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <xQueueGenericSend+0x76>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueueGenericSend+0x78>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <xQueueGenericSend+0x94>
	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	623b      	str	r3, [r7, #32]
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029d8:	f001 f9fc 	bl	8003dd4 <xTaskGetSchedulerState>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <xQueueGenericSend+0xa4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <xQueueGenericSend+0xa8>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <xQueueGenericSend+0xaa>
 80029ec:	2300      	movs	r3, #0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <xQueueGenericSend+0xc6>
	__asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	61fb      	str	r3, [r7, #28]
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a0a:	f001 ff4d 	bl	80048a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <xQueueGenericSend+0xdc>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d129      	bne.n	8002a74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a26:	f000 fa0f 	bl	8002e48 <prvCopyDataToQueue>
 8002a2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	3324      	adds	r3, #36	@ 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 f805 	bl	8003a48 <xTaskRemoveFromEventList>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a44:	4b3f      	ldr	r3, [pc, #252]	@ (8002b44 <xQueueGenericSend+0x200>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	e00a      	b.n	8002a6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <xQueueGenericSend+0x200>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a6c:	f001 ff4e 	bl	800490c <vPortExitCritical>
				return pdPASS;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e063      	b.n	8002b3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a7a:	f001 ff47 	bl	800490c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e05c      	b.n	8002b3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 f83f 	bl	8003b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a96:	f001 ff39 	bl	800490c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a9a:	f000 fda7 	bl	80035ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a9e:	f001 ff03 	bl	80048a8 <vPortEnterCritical>
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d103      	bne.n	8002ab8 <xQueueGenericSend+0x174>
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSend+0x18a>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ace:	f001 ff1d 	bl	800490c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ad2:	1d3a      	adds	r2, r7, #4
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 f82e 	bl	8003b3c <xTaskCheckForTimeOut>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d124      	bne.n	8002b30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ae8:	f000 faa6 	bl	8003038 <prvIsQueueFull>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	3310      	adds	r3, #16
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ff52 	bl	80039a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b02:	f000 fa31 	bl	8002f68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b06:	f000 fd7f 	bl	8003608 <xTaskResumeAll>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af7c 	bne.w	8002a0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <xQueueGenericSend+0x200>)
 8002b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	e772      	b.n	8002a0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b26:	f000 fa1f 	bl	8002f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b2a:	f000 fd6d 	bl	8003608 <xTaskResumeAll>
 8002b2e:	e76c      	b.n	8002a0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b32:	f000 fa19 	bl	8002f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b36:	f000 fd67 	bl	8003608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3738      	adds	r7, #56	@ 0x38
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b090      	sub	sp, #64	@ 0x40
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <xQueueGenericSendFromISR+0x3e>
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <xQueueGenericSendFromISR+0x42>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueGenericSendFromISR+0x44>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ba2:	bf00      	nop
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x6e>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <xQueueGenericSendFromISR+0x72>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericSendFromISR+0x74>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	623b      	str	r3, [r7, #32]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bd8:	f001 ff46 	bl	8004a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bdc:	f3ef 8211 	mrs	r2, BASEPRI
 8002be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	61fa      	str	r2, [r7, #28]
 8002bf2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <xQueueGenericSendFromISR+0xc2>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d12f      	bne.n	8002c6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c20:	f000 f912 	bl	8002e48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d112      	bne.n	8002c54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c38:	3324      	adds	r3, #36	@ 0x24
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 ff04 	bl	8003a48 <xTaskRemoveFromEventList>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e007      	b.n	8002c64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	b25a      	sxtb	r2, r3
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c64:	2301      	movs	r3, #1
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002c68:	e001      	b.n	8002c6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3740      	adds	r7, #64	@ 0x40
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	@ 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <xQueueReceive+0x32>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	623b      	str	r3, [r7, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <xQueueReceive+0x40>
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <xQueueReceive+0x44>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <xQueueReceive+0x46>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <xQueueReceive+0x62>
	__asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	61fb      	str	r3, [r7, #28]
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce6:	f001 f875 	bl	8003dd4 <xTaskGetSchedulerState>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <xQueueReceive+0x72>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <xQueueReceive+0x76>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueReceive+0x78>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <xQueueReceive+0x94>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	61bb      	str	r3, [r7, #24]
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d18:	f001 fdc6 	bl	80048a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01f      	beq.n	8002d68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d2c:	f000 f8f6 	bl	8002f1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	1e5a      	subs	r2, r3, #1
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00f      	beq.n	8002d60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	3310      	adds	r3, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fe7f 	bl	8003a48 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d50:	4b3c      	ldr	r3, [pc, #240]	@ (8002e44 <xQueueReceive+0x1c0>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d60:	f001 fdd4 	bl	800490c <vPortExitCritical>
				return pdPASS;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e069      	b.n	8002e3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d6e:	f001 fdcd 	bl	800490c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e062      	b.n	8002e3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fec5 	bl	8003b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d8a:	f001 fdbf 	bl	800490c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d8e:	f000 fc2d 	bl	80035ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d92:	f001 fd89 	bl	80048a8 <vPortEnterCritical>
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d103      	bne.n	8002dac <xQueueReceive+0x128>
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d103      	bne.n	8002dc2 <xQueueReceive+0x13e>
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dc2:	f001 fda3 	bl	800490c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc6:	1d3a      	adds	r2, r7, #4
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 feb4 	bl	8003b3c <xTaskCheckForTimeOut>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d123      	bne.n	8002e22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ddc:	f000 f916 	bl	800300c <prvIsQueueEmpty>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	3324      	adds	r3, #36	@ 0x24
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fdd8 	bl	80039a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002df6:	f000 f8b7 	bl	8002f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dfa:	f000 fc05 	bl	8003608 <xTaskResumeAll>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d189      	bne.n	8002d18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e04:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <xQueueReceive+0x1c0>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	e780      	b.n	8002d18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e18:	f000 f8a6 	bl	8002f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e1c:	f000 fbf4 	bl	8003608 <xTaskResumeAll>
 8002e20:	e77a      	b.n	8002d18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e24:	f000 f8a0 	bl	8002f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e28:	f000 fbee 	bl	8003608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e2e:	f000 f8ed 	bl	800300c <prvIsQueueEmpty>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f43f af6f 	beq.w	8002d18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	@ 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d14d      	bne.n	8002f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ffcc 	bl	8003e10 <xTaskPriorityDisinherit>
 8002e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e043      	b.n	8002f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d119      	bne.n	8002ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6858      	ldr	r0, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	461a      	mov	r2, r3
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	f002 f89c 	bl	8004fd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d32b      	bcc.n	8002f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e026      	b.n	8002f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68d8      	ldr	r0, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	f002 f882 	bl	8004fd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	425b      	negs	r3, r3
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d207      	bcs.n	8002ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	425b      	negs	r3, r3
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d105      	bne.n	8002f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002f12:	697b      	ldr	r3, [r7, #20]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d303      	bcc.n	8002f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6838      	ldr	r0, [r7, #0]
 8002f5c:	f002 f838 	bl	8004fd0 <memcpy>
	}
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f70:	f001 fc9a 	bl	80048a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f7c:	e011      	b.n	8002fa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d012      	beq.n	8002fac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3324      	adds	r3, #36	@ 0x24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fd5c 	bl	8003a48 <xTaskRemoveFromEventList>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f96:	f000 fe35 	bl	8003c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	dce9      	bgt.n	8002f7e <prvUnlockQueue+0x16>
 8002faa:	e000      	b.n	8002fae <prvUnlockQueue+0x46>
					break;
 8002fac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	22ff      	movs	r2, #255	@ 0xff
 8002fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002fb6:	f001 fca9 	bl	800490c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fba:	f001 fc75 	bl	80048a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fc6:	e011      	b.n	8002fec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3310      	adds	r3, #16
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fd37 	bl	8003a48 <xTaskRemoveFromEventList>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fe0:	f000 fe10 	bl	8003c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	dce9      	bgt.n	8002fc8 <prvUnlockQueue+0x60>
 8002ff4:	e000      	b.n	8002ff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	22ff      	movs	r2, #255	@ 0xff
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003000:	f001 fc84 	bl	800490c <vPortExitCritical>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003014:	f001 fc48 	bl	80048a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e001      	b.n	800302a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800302a:	f001 fc6f 	bl	800490c <vPortExitCritical>

	return xReturn;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003040:	f001 fc32 	bl	80048a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	429a      	cmp	r2, r3
 800304e:	d102      	bne.n	8003056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e001      	b.n	800305a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800305a:	f001 fc57 	bl	800490c <vPortExitCritical>

	return xReturn;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e014      	b.n	80030a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <vQueueAddToRegistry+0x50>)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003084:	490c      	ldr	r1, [pc, #48]	@ (80030b8 <vQueueAddToRegistry+0x50>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <vQueueAddToRegistry+0x50>)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800309a:	e006      	b.n	80030aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d9e7      	bls.n	8003078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2400082c 	.word	0x2400082c

080030bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030cc:	f001 fbec 	bl	80048a8 <vPortEnterCritical>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d103      	bne.n	80030e6 <vQueueWaitForMessageRestricted+0x2a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d103      	bne.n	80030fc <vQueueWaitForMessageRestricted+0x40>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030fc:	f001 fc06 	bl	800490c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3324      	adds	r3, #36	@ 0x24
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fc6d 	bl	80039f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff26 	bl	8002f68 <prvUnlockQueue>
	}
 800311c:	bf00      	nop
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	@ 0x38
 8003128:	af04      	add	r7, sp, #16
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	623b      	str	r3, [r7, #32]
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	61fb      	str	r3, [r7, #28]
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	e7fd      	b.n	800316a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800316e:	23a8      	movs	r3, #168	@ 0xa8
 8003170:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2ba8      	cmp	r3, #168	@ 0xa8
 8003176:	d00b      	beq.n	8003190 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	61bb      	str	r3, [r7, #24]
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003190:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01e      	beq.n	80031d6 <xTaskCreateStatic+0xb2>
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01b      	beq.n	80031d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031b0:	2300      	movs	r3, #0
 80031b2:	9303      	str	r3, [sp, #12]
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	9302      	str	r3, [sp, #8]
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f851 	bl	8003270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031d0:	f000 f8f6 	bl	80033c0 <prvAddNewTaskToReadyList>
 80031d4:	e001      	b.n	80031da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031da:	697b      	ldr	r3, [r7, #20]
	}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	@ 0x30
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fc77 	bl	8004aec <pvPortMalloc>
 80031fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003206:	20a8      	movs	r0, #168	@ 0xa8
 8003208:	f001 fc70 	bl	8004aec <pvPortMalloc>
 800320c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
 800321a:	e005      	b.n	8003228 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800321c:	6978      	ldr	r0, [r7, #20]
 800321e:	f001 fd33 	bl	8004c88 <vPortFree>
 8003222:	e001      	b.n	8003228 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d017      	beq.n	800325e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	2300      	movs	r3, #0
 800323a:	9303      	str	r3, [sp, #12]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f80f 	bl	8003270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003252:	69f8      	ldr	r0, [r7, #28]
 8003254:	f000 f8b4 	bl	80033c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003258:	2301      	movs	r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e002      	b.n	8003264 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003264:	69bb      	ldr	r3, [r7, #24]
	}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	461a      	mov	r2, r3
 8003288:	21a5      	movs	r1, #165	@ 0xa5
 800328a:	f001 fe1d 	bl	8004ec8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003298:	440b      	add	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f023 0307 	bic.w	r3, r3, #7
 80032a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	617b      	str	r3, [r7, #20]
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01f      	beq.n	8003310 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e012      	b.n	80032fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	7819      	ldrb	r1, [r3, #0]
 80032de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	3334      	adds	r3, #52	@ 0x34
 80032e6:	460a      	mov	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	4413      	add	r3, r2
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	d9e9      	bls.n	80032d6 <prvInitialiseNewTask+0x66>
 8003302:	e000      	b.n	8003306 <prvInitialiseNewTask+0x96>
			{
				break;
 8003304:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800330e:	e003      	b.n	8003318 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	2b37      	cmp	r3, #55	@ 0x37
 800331c:	d901      	bls.n	8003322 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800331e:	2337      	movs	r3, #55	@ 0x37
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003326:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800332c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	2200      	movs	r2, #0
 8003332:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f965 	bl	8002608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	3318      	adds	r3, #24
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f960 	bl	8002608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003368:	2200      	movs	r2, #0
 800336a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	3354      	adds	r3, #84	@ 0x54
 8003372:	224c      	movs	r2, #76	@ 0x4c
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f001 fda6 	bl	8004ec8 <memset>
 800337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337e:	4a0d      	ldr	r2, [pc, #52]	@ (80033b4 <prvInitialiseNewTask+0x144>)
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58
 8003382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003384:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <prvInitialiseNewTask+0x148>)
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	4a0c      	ldr	r2, [pc, #48]	@ (80033bc <prvInitialiseNewTask+0x14c>)
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	69b8      	ldr	r0, [r7, #24]
 8003394:	f001 f95a 	bl	800464c <pxPortInitialiseStack>
 8003398:	4602      	mov	r2, r0
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033aa:	bf00      	nop
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	24004ac0 	.word	0x24004ac0
 80033b8:	24004b28 	.word	0x24004b28
 80033bc:	24004b90 	.word	0x24004b90

080033c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033c8:	f001 fa6e 	bl	80048a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003484 <prvAddNewTaskToReadyList+0xc4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003484 <prvAddNewTaskToReadyList+0xc4>)
 80033d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003488 <prvAddNewTaskToReadyList+0xc8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033de:	4a2a      	ldr	r2, [pc, #168]	@ (8003488 <prvAddNewTaskToReadyList+0xc8>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033e4:	4b27      	ldr	r3, [pc, #156]	@ (8003484 <prvAddNewTaskToReadyList+0xc4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d110      	bne.n	800340e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033ec:	f000 fc2e 	bl	8003c4c <prvInitialiseTaskLists>
 80033f0:	e00d      	b.n	800340e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033f2:	4b26      	ldr	r3, [pc, #152]	@ (800348c <prvAddNewTaskToReadyList+0xcc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033fa:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <prvAddNewTaskToReadyList+0xc8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	429a      	cmp	r2, r3
 8003406:	d802      	bhi.n	800340e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003408:	4a1f      	ldr	r2, [pc, #124]	@ (8003488 <prvAddNewTaskToReadyList+0xc8>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <prvAddNewTaskToReadyList+0xd0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <prvAddNewTaskToReadyList+0xd0>)
 8003416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003418:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <prvAddNewTaskToReadyList+0xd0>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <prvAddNewTaskToReadyList+0xd4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d903      	bls.n	8003434 <prvAddNewTaskToReadyList+0x74>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	4a18      	ldr	r2, [pc, #96]	@ (8003494 <prvAddNewTaskToReadyList+0xd4>)
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4a15      	ldr	r2, [pc, #84]	@ (8003498 <prvAddNewTaskToReadyList+0xd8>)
 8003442:	441a      	add	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f7ff f8e9 	bl	8002622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003450:	f001 fa5c 	bl	800490c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003454:	4b0d      	ldr	r3, [pc, #52]	@ (800348c <prvAddNewTaskToReadyList+0xcc>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <prvAddNewTaskToReadyList+0xc8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d207      	bcs.n	800347a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800346a:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <prvAddNewTaskToReadyList+0xdc>)
 800346c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	24000d40 	.word	0x24000d40
 8003488:	2400086c 	.word	0x2400086c
 800348c:	24000d4c 	.word	0x24000d4c
 8003490:	24000d5c 	.word	0x24000d5c
 8003494:	24000d48 	.word	0x24000d48
 8003498:	24000870 	.word	0x24000870
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034b2:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <vTaskDelay+0x64>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <vTaskDelay+0x32>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	60bb      	str	r3, [r7, #8]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034d2:	f000 f88b 	bl	80035ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034d6:	2100      	movs	r1, #0
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fd09 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034de:	f000 f893 	bl	8003608 <xTaskResumeAll>
 80034e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80034ea:	4b07      	ldr	r3, [pc, #28]	@ (8003508 <vTaskDelay+0x68>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	24000d68 	.word	0x24000d68
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800351a:	463a      	mov	r2, r7
 800351c:	1d39      	adds	r1, r7, #4
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f81c 	bl	8002560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	9202      	str	r2, [sp, #8]
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2300      	movs	r3, #0
 8003538:	460a      	mov	r2, r1
 800353a:	4924      	ldr	r1, [pc, #144]	@ (80035cc <vTaskStartScheduler+0xc0>)
 800353c:	4824      	ldr	r0, [pc, #144]	@ (80035d0 <vTaskStartScheduler+0xc4>)
 800353e:	f7ff fdf1 	bl	8003124 <xTaskCreateStatic>
 8003542:	4603      	mov	r3, r0
 8003544:	4a23      	ldr	r2, [pc, #140]	@ (80035d4 <vTaskStartScheduler+0xc8>)
 8003546:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003548:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <vTaskStartScheduler+0xc8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e001      	b.n	800355a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003560:	f000 fd1a 	bl	8003f98 <xTimerCreateTimerTask>
 8003564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d11b      	bne.n	80035a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	613b      	str	r3, [r7, #16]
}
 800357e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003580:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <vTaskStartScheduler+0xcc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3354      	adds	r3, #84	@ 0x54
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <vTaskStartScheduler+0xd0>)
 8003588:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800358a:	4b15      	ldr	r3, [pc, #84]	@ (80035e0 <vTaskStartScheduler+0xd4>)
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003592:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <vTaskStartScheduler+0xd8>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003598:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <vTaskStartScheduler+0xdc>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800359e:	f001 f8df 	bl	8004760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035a2:	e00f      	b.n	80035c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d10b      	bne.n	80035c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <vTaskStartScheduler+0xb4>
}
 80035c4:	bf00      	nop
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	080050c8 	.word	0x080050c8
 80035d0:	08003c1d 	.word	0x08003c1d
 80035d4:	24000d64 	.word	0x24000d64
 80035d8:	2400086c 	.word	0x2400086c
 80035dc:	24000014 	.word	0x24000014
 80035e0:	24000d60 	.word	0x24000d60
 80035e4:	24000d4c 	.word	0x24000d4c
 80035e8:	24000d44 	.word	0x24000d44

080035ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035f0:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <vTaskSuspendAll+0x18>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a03      	ldr	r2, [pc, #12]	@ (8003604 <vTaskSuspendAll+0x18>)
 80035f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	24000d68 	.word	0x24000d68

08003608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003616:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <xTaskResumeAll+0x118>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <xTaskResumeAll+0x2e>
	__asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	603b      	str	r3, [r7, #0]
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	e7fd      	b.n	8003632 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003636:	f001 f937 	bl	80048a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <xTaskResumeAll+0x118>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a37      	ldr	r2, [pc, #220]	@ (8003720 <xTaskResumeAll+0x118>)
 8003642:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003644:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <xTaskResumeAll+0x118>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d162      	bne.n	8003712 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800364c:	4b35      	ldr	r3, [pc, #212]	@ (8003724 <xTaskResumeAll+0x11c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05e      	beq.n	8003712 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003654:	e02f      	b.n	80036b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003656:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <xTaskResumeAll+0x120>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3318      	adds	r3, #24
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f83a 	bl	80026dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f835 	bl	80026dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003676:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <xTaskResumeAll+0x124>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d903      	bls.n	8003686 <xTaskResumeAll+0x7e>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	4a2a      	ldr	r2, [pc, #168]	@ (800372c <xTaskResumeAll+0x124>)
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <xTaskResumeAll+0x128>)
 8003694:	441a      	add	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fe ffc0 	bl	8002622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a6:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <xTaskResumeAll+0x12c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d302      	bcc.n	80036b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80036b0:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <xTaskResumeAll+0x130>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003728 <xTaskResumeAll+0x120>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1cb      	bne.n	8003656 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c4:	f000 fb66 	bl	8003d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036c8:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <xTaskResumeAll+0x134>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d4:	f000 f846 	bl	8003764 <xTaskIncrementTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80036de:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <xTaskResumeAll+0x130>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f1      	bne.n	80036d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80036f0:	4b12      	ldr	r3, [pc, #72]	@ (800373c <xTaskResumeAll+0x134>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f6:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <xTaskResumeAll+0x130>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036fe:	2301      	movs	r3, #1
 8003700:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <xTaskResumeAll+0x138>)
 8003704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003712:	f001 f8fb 	bl	800490c <vPortExitCritical>

	return xAlreadyYielded;
 8003716:	68bb      	ldr	r3, [r7, #8]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	24000d68 	.word	0x24000d68
 8003724:	24000d40 	.word	0x24000d40
 8003728:	24000d00 	.word	0x24000d00
 800372c:	24000d48 	.word	0x24000d48
 8003730:	24000870 	.word	0x24000870
 8003734:	2400086c 	.word	0x2400086c
 8003738:	24000d54 	.word	0x24000d54
 800373c:	24000d50 	.word	0x24000d50
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800374a:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <xTaskGetTickCount+0x1c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003750:	687b      	ldr	r3, [r7, #4]
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	24000d44 	.word	0x24000d44

08003764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b4f      	ldr	r3, [pc, #316]	@ (80038ac <xTaskIncrementTick+0x148>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 8090 	bne.w	8003898 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003778:	4b4d      	ldr	r3, [pc, #308]	@ (80038b0 <xTaskIncrementTick+0x14c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <xTaskIncrementTick+0x14c>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d121      	bne.n	80037d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800378c:	4b49      	ldr	r3, [pc, #292]	@ (80038b4 <xTaskIncrementTick+0x150>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	603b      	str	r3, [r7, #0]
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <xTaskIncrementTick+0x46>
 80037ae:	4b41      	ldr	r3, [pc, #260]	@ (80038b4 <xTaskIncrementTick+0x150>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	4b40      	ldr	r3, [pc, #256]	@ (80038b8 <xTaskIncrementTick+0x154>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3e      	ldr	r2, [pc, #248]	@ (80038b4 <xTaskIncrementTick+0x150>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4a3e      	ldr	r2, [pc, #248]	@ (80038b8 <xTaskIncrementTick+0x154>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b3e      	ldr	r3, [pc, #248]	@ (80038bc <xTaskIncrementTick+0x158>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a3c      	ldr	r2, [pc, #240]	@ (80038bc <xTaskIncrementTick+0x158>)
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	f000 fae2 	bl	8003d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037d0:	4b3b      	ldr	r3, [pc, #236]	@ (80038c0 <xTaskIncrementTick+0x15c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d349      	bcc.n	800386e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037da:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <xTaskIncrementTick+0x150>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e4:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <xTaskIncrementTick+0x15c>)
 80037e6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ea:	601a      	str	r2, [r3, #0]
					break;
 80037ec:	e03f      	b.n	800386e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ee:	4b31      	ldr	r3, [pc, #196]	@ (80038b4 <xTaskIncrementTick+0x150>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d203      	bcs.n	800380e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003806:	4a2e      	ldr	r2, [pc, #184]	@ (80038c0 <xTaskIncrementTick+0x15c>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800380c:	e02f      	b.n	800386e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3304      	adds	r3, #4
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe ff62 	bl	80026dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	3318      	adds	r3, #24
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe ff59 	bl	80026dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <xTaskIncrementTick+0x160>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d903      	bls.n	800383e <xTaskIncrementTick+0xda>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <xTaskIncrementTick+0x160>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a1f      	ldr	r2, [pc, #124]	@ (80038c8 <xTaskIncrementTick+0x164>)
 800384c:	441a      	add	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe fee4 	bl	8002622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <xTaskIncrementTick+0x168>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d3b8      	bcc.n	80037da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800386c:	e7b5      	b.n	80037da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <xTaskIncrementTick+0x168>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4914      	ldr	r1, [pc, #80]	@ (80038c8 <xTaskIncrementTick+0x164>)
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d901      	bls.n	800388a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800388a:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <xTaskIncrementTick+0x16c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e004      	b.n	80038a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003898:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <xTaskIncrementTick+0x170>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <xTaskIncrementTick+0x170>)
 80038a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038a2:	697b      	ldr	r3, [r7, #20]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	24000d68 	.word	0x24000d68
 80038b0:	24000d44 	.word	0x24000d44
 80038b4:	24000cf8 	.word	0x24000cf8
 80038b8:	24000cfc 	.word	0x24000cfc
 80038bc:	24000d58 	.word	0x24000d58
 80038c0:	24000d60 	.word	0x24000d60
 80038c4:	24000d48 	.word	0x24000d48
 80038c8:	24000870 	.word	0x24000870
 80038cc:	2400086c 	.word	0x2400086c
 80038d0:	24000d54 	.word	0x24000d54
 80038d4:	24000d50 	.word	0x24000d50

080038d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038de:	4b2b      	ldr	r3, [pc, #172]	@ (800398c <vTaskSwitchContext+0xb4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <vTaskSwitchContext+0xb8>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038ec:	e047      	b.n	800397e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80038ee:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <vTaskSwitchContext+0xb8>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <vTaskSwitchContext+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e011      	b.n	8003920 <vTaskSwitchContext+0x48>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <vTaskSwitchContext+0x42>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	e7fd      	b.n	8003916 <vTaskSwitchContext+0x3e>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b01      	subs	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	491d      	ldr	r1, [pc, #116]	@ (8003998 <vTaskSwitchContext+0xc0>)
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0e3      	beq.n	80038fc <vTaskSwitchContext+0x24>
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4a16      	ldr	r2, [pc, #88]	@ (8003998 <vTaskSwitchContext+0xc0>)
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	3308      	adds	r3, #8
 8003956:	429a      	cmp	r2, r3
 8003958:	d104      	bne.n	8003964 <vTaskSwitchContext+0x8c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <vTaskSwitchContext+0xc4>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <vTaskSwitchContext+0xbc>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <vTaskSwitchContext+0xc4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3354      	adds	r3, #84	@ 0x54
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <vTaskSwitchContext+0xc8>)
 800397c:	6013      	str	r3, [r2, #0]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	24000d68 	.word	0x24000d68
 8003990:	24000d54 	.word	0x24000d54
 8003994:	24000d48 	.word	0x24000d48
 8003998:	24000870 	.word	0x24000870
 800399c:	2400086c 	.word	0x2400086c
 80039a0:	24000014 	.word	0x24000014

080039a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039cc:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <vTaskPlaceOnEventList+0x48>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3318      	adds	r3, #24
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fe fe48 	bl	800266a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039da:	2101      	movs	r1, #1
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f000 fa87 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2400086c 	.word	0x2400086c

080039f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	617b      	str	r3, [r7, #20]
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	e7fd      	b.n	8003a16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3318      	adds	r3, #24
 8003a20:	4619      	mov	r1, r3
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7fe fdfd 	bl	8002622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f000 fa5a 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
	}
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2400086c 	.word	0x2400086c

08003a48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60fb      	str	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3318      	adds	r3, #24
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fe2e 	bl	80026dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a80:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <xTaskRemoveFromEventList+0xb0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11d      	bne.n	8003ac4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe fe25 	bl	80026dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a96:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <xTaskRemoveFromEventList+0xb4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d903      	bls.n	8003aa6 <xTaskRemoveFromEventList+0x5e>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <xTaskRemoveFromEventList+0xb4>)
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <xTaskRemoveFromEventList+0xb8>)
 8003ab4:	441a      	add	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fdb0 	bl	8002622 <vListInsertEnd>
 8003ac2:	e005      	b.n	8003ad0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	480e      	ldr	r0, [pc, #56]	@ (8003b04 <xTaskRemoveFromEventList+0xbc>)
 8003acc:	f7fe fda9 	bl	8002622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <xTaskRemoveFromEventList+0xc0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d905      	bls.n	8003aea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <xTaskRemoveFromEventList+0xc4>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e001      	b.n	8003aee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003aee:	697b      	ldr	r3, [r7, #20]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	24000d68 	.word	0x24000d68
 8003afc:	24000d48 	.word	0x24000d48
 8003b00:	24000870 	.word	0x24000870
 8003b04:	24000d00 	.word	0x24000d00
 8003b08:	2400086c 	.word	0x2400086c
 8003b0c:	24000d54 	.word	0x24000d54

08003b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <vTaskInternalSetTimeOutState+0x24>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <vTaskInternalSetTimeOutState+0x28>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	24000d58 	.word	0x24000d58
 8003b38:	24000d44 	.word	0x24000d44

08003b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	613b      	str	r3, [r7, #16]
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	e7fd      	b.n	8003b60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60fb      	str	r3, [r7, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	e7fd      	b.n	8003b7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003b82:	f000 fe91 	bl	80048a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b86:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <xTaskCheckForTimeOut+0xc0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d102      	bne.n	8003ba6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e023      	b.n	8003bee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <xTaskCheckForTimeOut+0xc4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d007      	beq.n	8003bc2 <xTaskCheckForTimeOut+0x86>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e015      	b.n	8003bee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d20b      	bcs.n	8003be4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff99 	bl	8003b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e004      	b.n	8003bee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bee:	f000 fe8d 	bl	800490c <vPortExitCritical>

	return xReturn;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	24000d44 	.word	0x24000d44
 8003c00:	24000d58 	.word	0x24000d58

08003c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <vTaskMissedYield+0x14>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	24000d54 	.word	0x24000d54

08003c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c24:	f000 f852 	bl	8003ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <prvIdleTask+0x28>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d9f9      	bls.n	8003c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c30:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <prvIdleTask+0x2c>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c40:	e7f0      	b.n	8003c24 <prvIdleTask+0x8>
 8003c42:	bf00      	nop
 8003c44:	24000870 	.word	0x24000870
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	e00c      	b.n	8003c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a12      	ldr	r2, [pc, #72]	@ (8003cac <prvInitialiseTaskLists+0x60>)
 8003c64:	4413      	add	r3, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fcae 	bl	80025c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b37      	cmp	r3, #55	@ 0x37
 8003c76:	d9ef      	bls.n	8003c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c78:	480d      	ldr	r0, [pc, #52]	@ (8003cb0 <prvInitialiseTaskLists+0x64>)
 8003c7a:	f7fe fca5 	bl	80025c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c7e:	480d      	ldr	r0, [pc, #52]	@ (8003cb4 <prvInitialiseTaskLists+0x68>)
 8003c80:	f7fe fca2 	bl	80025c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c84:	480c      	ldr	r0, [pc, #48]	@ (8003cb8 <prvInitialiseTaskLists+0x6c>)
 8003c86:	f7fe fc9f 	bl	80025c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c8a:	480c      	ldr	r0, [pc, #48]	@ (8003cbc <prvInitialiseTaskLists+0x70>)
 8003c8c:	f7fe fc9c 	bl	80025c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c90:	480b      	ldr	r0, [pc, #44]	@ (8003cc0 <prvInitialiseTaskLists+0x74>)
 8003c92:	f7fe fc99 	bl	80025c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <prvInitialiseTaskLists+0x78>)
 8003c98:	4a05      	ldr	r2, [pc, #20]	@ (8003cb0 <prvInitialiseTaskLists+0x64>)
 8003c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc8 <prvInitialiseTaskLists+0x7c>)
 8003c9e:	4a05      	ldr	r2, [pc, #20]	@ (8003cb4 <prvInitialiseTaskLists+0x68>)
 8003ca0:	601a      	str	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	24000870 	.word	0x24000870
 8003cb0:	24000cd0 	.word	0x24000cd0
 8003cb4:	24000ce4 	.word	0x24000ce4
 8003cb8:	24000d00 	.word	0x24000d00
 8003cbc:	24000d14 	.word	0x24000d14
 8003cc0:	24000d2c 	.word	0x24000d2c
 8003cc4:	24000cf8 	.word	0x24000cf8
 8003cc8:	24000cfc 	.word	0x24000cfc

08003ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cd2:	e019      	b.n	8003d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cd4:	f000 fde8 	bl	80048a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <prvCheckTasksWaitingTermination+0x50>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fcf9 	bl	80026dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <prvCheckTasksWaitingTermination+0x54>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d20 <prvCheckTasksWaitingTermination+0x54>)
 8003cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cfe:	f000 fe05 	bl	800490c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f810 	bl	8003d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e1      	bne.n	8003cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	24000d14 	.word	0x24000d14
 8003d20:	24000d40 	.word	0x24000d40
 8003d24:	24000d28 	.word	0x24000d28

08003d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3354      	adds	r3, #84	@ 0x54
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f8cf 	bl	8004ed8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 ff9d 	bl	8004c88 <vPortFree>
				vPortFree( pxTCB );
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 ff9a 	bl	8004c88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d54:	e019      	b.n	8003d8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d103      	bne.n	8003d68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 ff91 	bl	8004c88 <vPortFree>
	}
 8003d66:	e010      	b.n	8003d8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d00b      	beq.n	8003d8a <prvDeleteTCB+0x62>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60fb      	str	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <prvDeleteTCB+0x5e>
	}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003dac:	e008      	b.n	8003dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <prvResetNextTaskUnblockTime+0x38>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	24000cf8 	.word	0x24000cf8
 8003dd0:	24000d60 	.word	0x24000d60

08003dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <xTaskGetSchedulerState+0x34>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de2:	2301      	movs	r3, #1
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	e008      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de8:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <xTaskGetSchedulerState+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df0:	2302      	movs	r3, #2
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e001      	b.n	8003dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	24000d4c 	.word	0x24000d4c
 8003e0c:	24000d68 	.word	0x24000d68

08003e10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d058      	beq.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <xTaskPriorityDisinherit+0xd4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d00b      	beq.n	8003e48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	60fb      	str	r3, [r7, #12]
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60bb      	str	r3, [r7, #8]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d02c      	beq.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d128      	bne.n	8003ed8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fc26 	bl	80026dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <xTaskPriorityDisinherit+0xd8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d903      	bls.n	8003eb8 <xTaskPriorityDisinherit+0xa8>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ee8 <xTaskPriorityDisinherit+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <xTaskPriorityDisinherit+0xdc>)
 8003ec6:	441a      	add	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7fe fba7 	bl	8002622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ed8:	697b      	ldr	r3, [r7, #20]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	2400086c 	.word	0x2400086c
 8003ee8:	24000d48 	.word	0x24000d48
 8003eec:	24000870 	.word	0x24000870

08003ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0x90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f00:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fbe8 	bl	80026dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d10a      	bne.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4819      	ldr	r0, [pc, #100]	@ (8003f88 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f24:	f7fe fb7d 	bl	8002622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f28:	e026      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d209      	bcs.n	8003f56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe fb8b 	bl	800266a <vListInsert>
}
 8003f54:	e010      	b.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f56:	4b0e      	ldr	r3, [pc, #56]	@ (8003f90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7fe fb81 	bl	800266a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d202      	bcs.n	8003f78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	24000d44 	.word	0x24000d44
 8003f84:	2400086c 	.word	0x2400086c
 8003f88:	24000d2c 	.word	0x24000d2c
 8003f8c:	24000cfc 	.word	0x24000cfc
 8003f90:	24000cf8 	.word	0x24000cf8
 8003f94:	24000d60 	.word	0x24000d60

08003f98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fa2:	f000 fb13 	bl	80045cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <xTimerCreateTimerTask+0x84>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fb6:	1d3a      	adds	r2, r7, #4
 8003fb8:	f107 0108 	add.w	r1, r7, #8
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fae7 	bl	8002594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	4911      	ldr	r1, [pc, #68]	@ (8004020 <xTimerCreateTimerTask+0x88>)
 8003fda:	4812      	ldr	r0, [pc, #72]	@ (8004024 <xTimerCreateTimerTask+0x8c>)
 8003fdc:	f7ff f8a2 	bl	8003124 <xTaskCreateStatic>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a11      	ldr	r2, [pc, #68]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <xTimerCreateTimerTask+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004010:	697b      	ldr	r3, [r7, #20]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000d9c 	.word	0x24000d9c
 8004020:	080050d0 	.word	0x080050d0
 8004024:	08004165 	.word	0x08004165
 8004028:	24000da0 	.word	0x24000da0

0800402c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xTimerGenericCommand+0x30>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800405c:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <xTimerGenericCommand+0x98>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02a      	beq.n	80040ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b05      	cmp	r3, #5
 8004074:	dc18      	bgt.n	80040a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004076:	f7ff fead 	bl	8003dd4 <xTaskGetSchedulerState>
 800407a:	4603      	mov	r3, r0
 800407c:	2b02      	cmp	r3, #2
 800407e:	d109      	bne.n	8004094 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f107 0110 	add.w	r1, r7, #16
 8004088:	2300      	movs	r3, #0
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	f7fe fc5a 	bl	8002944 <xQueueGenericSend>
 8004090:	6278      	str	r0, [r7, #36]	@ 0x24
 8004092:	e012      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <xTimerGenericCommand+0x98>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	f107 0110 	add.w	r1, r7, #16
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	f7fe fc50 	bl	8002944 <xQueueGenericSend>
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80040a6:	e008      	b.n	80040ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <xTimerGenericCommand+0x98>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	f107 0110 	add.w	r1, r7, #16
 80040b0:	2300      	movs	r3, #0
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	f7fe fd48 	bl	8002b48 <xQueueGenericSendFromISR>
 80040b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3728      	adds	r7, #40	@ 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	24000d9c 	.word	0x24000d9c

080040c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <prvProcessExpiredTimer+0x98>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fafb 	bl	80026dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	18d1      	adds	r1, r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f000 f8d5 	bl	80042b0 <prvInsertTimerInActiveList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800410c:	2300      	movs	r3, #0
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	2100      	movs	r1, #0
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff ff88 	bl	800402c <xTimerGenericCommand>
 800411c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	60fb      	str	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	4798      	blx	r3
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	24000d94 	.word	0x24000d94

08004164 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f859 	bl	8004228 <prvGetNextExpireTime>
 8004176:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4619      	mov	r1, r3
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f805 	bl	800418c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004182:	f000 f8d7 	bl	8004334 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004186:	bf00      	nop
 8004188:	e7f0      	b.n	800416c <prvTimerTask+0x8>
	...

0800418c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004196:	f7ff fa29 	bl	80035ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f866 	bl	8004270 <prvSampleTimeNow>
 80041a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d130      	bne.n	800420e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d806      	bhi.n	80041c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041ba:	f7ff fa25 	bl	8003608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff81 	bl	80040c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041c6:	e024      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <prvProcessTimerOrBlockTask+0x90>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <prvProcessTimerOrBlockTask+0x50>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <prvProcessTimerOrBlockTask+0x52>
 80041dc:	2300      	movs	r3, #0
 80041de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <prvProcessTimerOrBlockTask+0x94>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fe ff65 	bl	80030bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041f2:	f7ff fa09 	bl	8003608 <xTaskResumeAll>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041fc:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <prvProcessTimerOrBlockTask+0x98>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	f3bf 8f6f 	isb	sy
}
 800420c:	e001      	b.n	8004212 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800420e:	f7ff f9fb 	bl	8003608 <xTaskResumeAll>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	24000d98 	.word	0x24000d98
 8004220:	24000d9c 	.word	0x24000d9c
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <prvGetNextExpireTime+0x44>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <prvGetNextExpireTime+0x16>
 800423a:	2201      	movs	r2, #1
 800423c:	e000      	b.n	8004240 <prvGetNextExpireTime+0x18>
 800423e:	2200      	movs	r2, #0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <prvGetNextExpireTime+0x44>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e001      	b.n	800425c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	24000d94 	.word	0x24000d94

08004270 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004278:	f7ff fa64 	bl	8003744 <xTaskGetTickCount>
 800427c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <prvSampleTimeNow+0x3c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d205      	bcs.n	8004294 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004288:	f000 f93a 	bl	8004500 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e002      	b.n	800429a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800429a:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <prvSampleTimeNow+0x3c>)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042a0:	68fb      	ldr	r3, [r7, #12]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	24000da4 	.word	0x24000da4

080042b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d812      	bhi.n	80042fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e01b      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <prvInsertTimerInActiveList+0x7c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f7fe f9b8 	bl	800266a <vListInsert>
 80042fa:	e012      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d206      	bcs.n	8004312 <prvInsertTimerInActiveList+0x62>
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e007      	b.n	8004322 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004312:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <prvInsertTimerInActiveList+0x80>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe f9a4 	bl	800266a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004322:	697b      	ldr	r3, [r7, #20]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	24000d98 	.word	0x24000d98
 8004330:	24000d94 	.word	0x24000d94

08004334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08e      	sub	sp, #56	@ 0x38
 8004338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800433a:	e0ce      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	da19      	bge.n	8004376 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	3304      	adds	r3, #4
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	61fb      	str	r3, [r7, #28]
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436c:	6850      	ldr	r0, [r2, #4]
 800436e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	4611      	mov	r1, r2
 8004374:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f2c0 80ae 	blt.w	80044da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	3304      	adds	r3, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe f9a4 	bl	80026dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004394:	463b      	mov	r3, r7
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff6a 	bl	8004270 <prvSampleTimeNow>
 800439c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	f200 8097 	bhi.w	80044d4 <prvProcessReceivedCommands+0x1a0>
 80043a6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <prvProcessReceivedCommands+0x78>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043d5 	.word	0x080043d5
 80043b8:	0800444b 	.word	0x0800444b
 80043bc:	0800445f 	.word	0x0800445f
 80043c0:	080044ab 	.word	0x080044ab
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043d5 	.word	0x080043d5
 80043cc:	0800444b 	.word	0x0800444b
 80043d0:	0800445f 	.word	0x0800445f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f4:	f7ff ff5c 	bl	80042b0 <prvInsertTimerInActiveList>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06c      	beq.n	80044d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004404:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d061      	beq.n	80044d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	441a      	add	r2, r3
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2300      	movs	r3, #0
 8004422:	2100      	movs	r1, #0
 8004424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004426:	f7ff fe01 	bl	800402c <xTimerGenericCommand>
 800442a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d152      	bne.n	80044d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	61bb      	str	r3, [r7, #24]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800445c:	e03d      	b.n	80044da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800445e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004474:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	617b      	str	r3, [r7, #20]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	18d1      	adds	r1, r2, r3
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044a4:	f7ff ff04 	bl	80042b0 <prvInsertTimerInActiveList>
					break;
 80044a8:	e017      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80044b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044ba:	f000 fbe5 	bl	8004c88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044be:	e00c      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80044d2:	e002      	b.n	80044da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <prvProcessReceivedCommands+0x1a6>
					break;
 80044d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044da:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <prvProcessReceivedCommands+0x1c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1d39      	adds	r1, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fbce 	bl	8002c84 <xQueueReceive>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f af26 	bne.w	800433c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	24000d9c 	.word	0x24000d9c

08004500 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004506:	e049      	b.n	800459c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004508:	4b2e      	ldr	r3, [pc, #184]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004512:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe f8db 	bl	80026dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02f      	beq.n	800459c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90e      	bls.n	800456c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800455a:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fe f880 	bl	800266a <vListInsert>
 800456a:	e017      	b.n	800459c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800456c:	2300      	movs	r3, #0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2300      	movs	r3, #0
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	2100      	movs	r1, #0
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fd58 	bl	800402c <xTimerGenericCommand>
 800457c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	603b      	str	r3, [r7, #0]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800459c:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1b0      	bne.n	8004508 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <prvSwitchTimerLists+0xc8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <prvSwitchTimerLists+0xc4>)
 80045b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <prvSwitchTimerLists+0xc8>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24000d94 	.word	0x24000d94
 80045c8:	24000d98 	.word	0x24000d98

080045cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045d2:	f000 f969 	bl	80048a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d120      	bne.n	8004620 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045de:	4814      	ldr	r0, [pc, #80]	@ (8004630 <prvCheckForValidListAndQueue+0x64>)
 80045e0:	f7fd fff2 	bl	80025c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045e4:	4813      	ldr	r0, [pc, #76]	@ (8004634 <prvCheckForValidListAndQueue+0x68>)
 80045e6:	f7fd ffef 	bl	80025c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045ea:	4b13      	ldr	r3, [pc, #76]	@ (8004638 <prvCheckForValidListAndQueue+0x6c>)
 80045ec:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <prvCheckForValidListAndQueue+0x64>)
 80045ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045f0:	4b12      	ldr	r3, [pc, #72]	@ (800463c <prvCheckForValidListAndQueue+0x70>)
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <prvCheckForValidListAndQueue+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <prvCheckForValidListAndQueue+0x74>)
 80045fc:	4a11      	ldr	r2, [pc, #68]	@ (8004644 <prvCheckForValidListAndQueue+0x78>)
 80045fe:	2110      	movs	r1, #16
 8004600:	200a      	movs	r0, #10
 8004602:	f7fe f8ff 	bl	8002804 <xQueueGenericCreateStatic>
 8004606:	4603      	mov	r3, r0
 8004608:	4a08      	ldr	r2, [pc, #32]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 800460a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800460c:	4b07      	ldr	r3, [pc, #28]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <prvCheckForValidListAndQueue+0x60>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	490b      	ldr	r1, [pc, #44]	@ (8004648 <prvCheckForValidListAndQueue+0x7c>)
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fd24 	bl	8003068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004620:	f000 f974 	bl	800490c <vPortExitCritical>
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	24000d9c 	.word	0x24000d9c
 8004630:	24000d6c 	.word	0x24000d6c
 8004634:	24000d80 	.word	0x24000d80
 8004638:	24000d94 	.word	0x24000d94
 800463c:	24000d98 	.word	0x24000d98
 8004640:	24000e48 	.word	0x24000e48
 8004644:	24000da8 	.word	0x24000da8
 8004648:	080050d8 	.word	0x080050d8

0800464c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3b04      	subs	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800467c:	4a0c      	ldr	r2, [pc, #48]	@ (80046b0 <pxPortInitialiseStack+0x64>)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b14      	subs	r3, #20
 8004686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f06f 0202 	mvn.w	r2, #2
 800469a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b20      	subs	r3, #32
 80046a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	080046b5 	.word	0x080046b5

080046b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046be:	4b13      	ldr	r3, [pc, #76]	@ (800470c <prvTaskExitError+0x58>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d00b      	beq.n	80046e0 <prvTaskExitError+0x2c>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60fb      	str	r3, [r7, #12]
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <prvTaskExitError+0x28>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60bb      	str	r3, [r7, #8]
}
 80046f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046f4:	bf00      	nop
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0fc      	beq.n	80046f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	24000010 	.word	0x24000010

08004710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <pxCurrentTCBConst2>)
 8004712:	6819      	ldr	r1, [r3, #0]
 8004714:	6808      	ldr	r0, [r1, #0]
 8004716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f380 8809 	msr	PSP, r0
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8811 	msr	BASEPRI, r0
 800472a:	4770      	bx	lr
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst2>:
 8004730:	2400086c 	.word	0x2400086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004738:	4808      	ldr	r0, [pc, #32]	@ (800475c <prvPortStartFirstTask+0x24>)
 800473a:	6800      	ldr	r0, [r0, #0]
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f380 8808 	msr	MSP, r0
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8814 	msr	CONTROL, r0
 800474a:	b662      	cpsie	i
 800474c:	b661      	cpsie	f
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	df00      	svc	0
 8004758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800475a:	bf00      	nop
 800475c:	e000ed08 	.word	0xe000ed08

08004760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <xPortStartScheduler+0x124>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a47      	ldr	r2, [pc, #284]	@ (8004888 <xPortStartScheduler+0x128>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10b      	bne.n	8004788 <xPortStartScheduler+0x28>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	613b      	str	r3, [r7, #16]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004788:	4b3e      	ldr	r3, [pc, #248]	@ (8004884 <xPortStartScheduler+0x124>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3f      	ldr	r2, [pc, #252]	@ (800488c <xPortStartScheduler+0x12c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10b      	bne.n	80047aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047aa:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <xPortStartScheduler+0x130>)
 80047ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	22ff      	movs	r2, #255	@ 0xff
 80047ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <xPortStartScheduler+0x134>)
 80047d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047d2:	4b31      	ldr	r3, [pc, #196]	@ (8004898 <xPortStartScheduler+0x138>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d8:	e009      	b.n	80047ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80047da:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <xPortStartScheduler+0x138>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <xPortStartScheduler+0x138>)
 80047e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b80      	cmp	r3, #128	@ 0x80
 80047f8:	d0ef      	beq.n	80047da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047fa:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <xPortStartScheduler+0x138>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1c3 0307 	rsb	r3, r3, #7
 8004802:	2b04      	cmp	r3, #4
 8004804:	d00b      	beq.n	800481e <xPortStartScheduler+0xbe>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60bb      	str	r3, [r7, #8]
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800481e:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <xPortStartScheduler+0x138>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <xPortStartScheduler+0x138>)
 8004826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004828:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <xPortStartScheduler+0x138>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004830:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <xPortStartScheduler+0x138>)
 8004832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800483c:	4b17      	ldr	r3, [pc, #92]	@ (800489c <xPortStartScheduler+0x13c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	@ (800489c <xPortStartScheduler+0x13c>)
 8004842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004848:	4b14      	ldr	r3, [pc, #80]	@ (800489c <xPortStartScheduler+0x13c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a13      	ldr	r2, [pc, #76]	@ (800489c <xPortStartScheduler+0x13c>)
 800484e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004854:	f000 f8da 	bl	8004a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004858:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <xPortStartScheduler+0x140>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800485e:	f000 f8f9 	bl	8004a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <xPortStartScheduler+0x144>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a0f      	ldr	r2, [pc, #60]	@ (80048a4 <xPortStartScheduler+0x144>)
 8004868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800486c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800486e:	f7ff ff63 	bl	8004738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004872:	f7ff f831 	bl	80038d8 <vTaskSwitchContext>
	prvTaskExitError();
 8004876:	f7ff ff1d 	bl	80046b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	e000ed00 	.word	0xe000ed00
 8004888:	410fc271 	.word	0x410fc271
 800488c:	410fc270 	.word	0x410fc270
 8004890:	e000e400 	.word	0xe000e400
 8004894:	24000e98 	.word	0x24000e98
 8004898:	24000e9c 	.word	0x24000e9c
 800489c:	e000ed20 	.word	0xe000ed20
 80048a0:	24000010 	.word	0x24000010
 80048a4:	e000ef34 	.word	0xe000ef34

080048a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <vPortEnterCritical+0x5c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d110      	bne.n	80048f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <vPortEnterCritical+0x60>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <vPortEnterCritical+0x4a>
	}
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	24000010 	.word	0x24000010
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <vPortExitCritical+0x26>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	607b      	str	r3, [r7, #4]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <vPortExitCritical+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a08      	ldr	r2, [pc, #32]	@ (800495c <vPortExitCritical+0x50>)
 800493a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800493c:	4b07      	ldr	r3, [pc, #28]	@ (800495c <vPortExitCritical+0x50>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <vPortExitCritical+0x44>
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	24000010 	.word	0x24000010

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f01e 0f10 	tst.w	lr, #16
 8004970:	bf08      	it	eq
 8004972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497a:	6010      	str	r0, [r2, #0]
 800497c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f7fe ffa2 	bl	80038d8 <vTaskSwitchContext>
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f380 8811 	msr	BASEPRI, r0
 800499c:	bc09      	pop	{r0, r3}
 800499e:	6819      	ldr	r1, [r3, #0]
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a6:	f01e 0f10 	tst.w	lr, #16
 80049aa:	bf08      	it	eq
 80049ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049b0:	f380 8809 	msr	PSP, r0
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w

080049c0 <pxCurrentTCBConst>:
 80049c0:	2400086c 	.word	0x2400086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop

080049c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049e2:	f7fe febf 	bl	8003764 <xTaskIncrementTick>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <xPortSysTickHandler+0x40>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f383 8811 	msr	BASEPRI, r3
}
 80049fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <vPortSetupTimerInterrupt+0x38>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a48 <vPortSetupTimerInterrupt+0x3c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <vPortSetupTimerInterrupt+0x40>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <vPortSetupTimerInterrupt+0x44>)
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a2e:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <vPortSetupTimerInterrupt+0x34>)
 8004a30:	2207      	movs	r2, #7
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	e000e010 	.word	0xe000e010
 8004a44:	e000e018 	.word	0xe000e018
 8004a48:	24000000 	.word	0x24000000
 8004a4c:	10624dd3 	.word	0x10624dd3
 8004a50:	e000e014 	.word	0xe000e014

08004a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a64 <vPortEnableVFP+0x10>
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a5e:	6001      	str	r1, [r0, #0]
 8004a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a62:	bf00      	nop
 8004a64:	e000ed88 	.word	0xe000ed88

08004a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a6e:	f3ef 8305 	mrs	r3, IPSR
 8004a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d915      	bls.n	8004aa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a7a:	4a18      	ldr	r2, [pc, #96]	@ (8004adc <vPortValidateInterruptPriority+0x74>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a84:	4b16      	ldr	r3, [pc, #88]	@ (8004ae0 <vPortValidateInterruptPriority+0x78>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	7afa      	ldrb	r2, [r7, #11]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d20b      	bcs.n	8004aa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <vPortValidateInterruptPriority+0x7c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <vPortValidateInterruptPriority+0x80>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90b      	bls.n	8004ace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	603b      	str	r3, [r7, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <vPortValidateInterruptPriority+0x62>
	}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000e3f0 	.word	0xe000e3f0
 8004ae0:	24000e98 	.word	0x24000e98
 8004ae4:	e000ed0c 	.word	0xe000ed0c
 8004ae8:	24000e9c 	.word	0x24000e9c

08004aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	@ 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004af8:	f7fe fd78 	bl	80035ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004afc:	4b5c      	ldr	r3, [pc, #368]	@ (8004c70 <pvPortMalloc+0x184>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b04:	f000 f924 	bl	8004d50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b08:	4b5a      	ldr	r3, [pc, #360]	@ (8004c74 <pvPortMalloc+0x188>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 8095 	bne.w	8004c40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01e      	beq.n	8004b5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f023 0307 	bic.w	r3, r3, #7
 8004b34:	3308      	adds	r3, #8
 8004b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <pvPortMalloc+0x6e>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	617b      	str	r3, [r7, #20]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d06f      	beq.n	8004c40 <pvPortMalloc+0x154>
 8004b60:	4b45      	ldr	r3, [pc, #276]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d86a      	bhi.n	8004c40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b6a:	4b44      	ldr	r3, [pc, #272]	@ (8004c7c <pvPortMalloc+0x190>)
 8004b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <pvPortMalloc+0x190>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b74:	e004      	b.n	8004b80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <pvPortMalloc+0xa6>
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b92:	4b37      	ldr	r3, [pc, #220]	@ (8004c70 <pvPortMalloc+0x184>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d051      	beq.n	8004c40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4413      	add	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d920      	bls.n	8004c00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <pvPortMalloc+0xfc>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bfa:	69b8      	ldr	r0, [r7, #24]
 8004bfc:	f000 f90a 	bl	8004e14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <pvPortMalloc+0x194>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d203      	bcs.n	8004c22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c1a:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <pvPortMalloc+0x18c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	@ (8004c80 <pvPortMalloc+0x194>)
 8004c20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <pvPortMalloc+0x188>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c36:	4b13      	ldr	r3, [pc, #76]	@ (8004c84 <pvPortMalloc+0x198>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a11      	ldr	r2, [pc, #68]	@ (8004c84 <pvPortMalloc+0x198>)
 8004c3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c40:	f7fe fce2 	bl	8003608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <pvPortMalloc+0x17a>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <pvPortMalloc+0x176>
	return pvReturn;
 8004c66:	69fb      	ldr	r3, [r7, #28]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	24004aa8 	.word	0x24004aa8
 8004c74:	24004abc 	.word	0x24004abc
 8004c78:	24004aac 	.word	0x24004aac
 8004c7c:	24004aa0 	.word	0x24004aa0
 8004c80:	24004ab0 	.word	0x24004ab0
 8004c84:	24004ab4 	.word	0x24004ab4

08004c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04f      	beq.n	8004d3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <vPortFree+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <vPortFree+0x46>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60fb      	str	r3, [r7, #12]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <vPortFree+0x66>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	4b14      	ldr	r3, [pc, #80]	@ (8004d44 <vPortFree+0xbc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01e      	beq.n	8004d3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11a      	bne.n	8004d3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <vPortFree+0xbc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d14:	f7fe fc6a 	bl	80035ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <vPortFree+0xc0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <vPortFree+0xc0>)
 8004d24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d26:	6938      	ldr	r0, [r7, #16]
 8004d28:	f000 f874 	bl	8004e14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <vPortFree+0xc4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3301      	adds	r3, #1
 8004d32:	4a06      	ldr	r2, [pc, #24]	@ (8004d4c <vPortFree+0xc4>)
 8004d34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d36:	f7fe fc67 	bl	8003608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	24004abc 	.word	0x24004abc
 8004d48:	24004aac 	.word	0x24004aac
 8004d4c:	24004ab8 	.word	0x24004ab8

08004d50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004d5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d5c:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <prvHeapInit+0xac>)
 8004d5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <prvHeapInit+0xac>)
 8004d80:	4413      	add	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <prvHeapInit+0xb0>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e00 <prvHeapInit+0xb0>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0307 	bic.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <prvHeapInit+0xb4>)
 8004db0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db2:	4b14      	ldr	r3, [pc, #80]	@ (8004e04 <prvHeapInit+0xb4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dba:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <prvHeapInit+0xb4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	1ad2      	subs	r2, r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <prvHeapInit+0xb4>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <prvHeapInit+0xb8>)
 8004dde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a09      	ldr	r2, [pc, #36]	@ (8004e0c <prvHeapInit+0xbc>)
 8004de6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004de8:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <prvHeapInit+0xc0>)
 8004dea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004dee:	601a      	str	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	24000ea0 	.word	0x24000ea0
 8004e00:	24004aa0 	.word	0x24004aa0
 8004e04:	24004aa8 	.word	0x24004aa8
 8004e08:	24004ab0 	.word	0x24004ab0
 8004e0c:	24004aac 	.word	0x24004aac
 8004e10:	24004abc 	.word	0x24004abc

08004e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e1c:	4b28      	ldr	r3, [pc, #160]	@ (8004ec0 <prvInsertBlockIntoFreeList+0xac>)
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e002      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x14>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d8f7      	bhi.n	8004e22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d108      	bne.n	8004e56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d118      	bne.n	8004e9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d00d      	beq.n	8004e92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <prvInsertBlockIntoFreeList+0xb0>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e003      	b.n	8004ea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d002      	beq.n	8004eb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	24004aa0 	.word	0x24004aa0
 8004ec4:	24004aa8 	.word	0x24004aa8

08004ec8 <memset>:
 8004ec8:	4402      	add	r2, r0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <memset+0xa>
 8004ed0:	4770      	bx	lr
 8004ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed6:	e7f9      	b.n	8004ecc <memset+0x4>

08004ed8 <_reclaim_reent>:
 8004ed8:	4b29      	ldr	r3, [pc, #164]	@ (8004f80 <_reclaim_reent+0xa8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4283      	cmp	r3, r0
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	d04b      	beq.n	8004f7c <_reclaim_reent+0xa4>
 8004ee4:	69c3      	ldr	r3, [r0, #28]
 8004ee6:	b1ab      	cbz	r3, 8004f14 <_reclaim_reent+0x3c>
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	b16b      	cbz	r3, 8004f08 <_reclaim_reent+0x30>
 8004eec:	2500      	movs	r5, #0
 8004eee:	69e3      	ldr	r3, [r4, #28]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	5959      	ldr	r1, [r3, r5]
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	d13b      	bne.n	8004f70 <_reclaim_reent+0x98>
 8004ef8:	3504      	adds	r5, #4
 8004efa:	2d80      	cmp	r5, #128	@ 0x80
 8004efc:	d1f7      	bne.n	8004eee <_reclaim_reent+0x16>
 8004efe:	69e3      	ldr	r3, [r4, #28]
 8004f00:	4620      	mov	r0, r4
 8004f02:	68d9      	ldr	r1, [r3, #12]
 8004f04:	f000 f872 	bl	8004fec <_free_r>
 8004f08:	69e3      	ldr	r3, [r4, #28]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	b111      	cbz	r1, 8004f14 <_reclaim_reent+0x3c>
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 f86c 	bl	8004fec <_free_r>
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	b111      	cbz	r1, 8004f1e <_reclaim_reent+0x46>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 f867 	bl	8004fec <_free_r>
 8004f1e:	69e1      	ldr	r1, [r4, #28]
 8004f20:	b111      	cbz	r1, 8004f28 <_reclaim_reent+0x50>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f862 	bl	8004fec <_free_r>
 8004f28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f2a:	b111      	cbz	r1, 8004f32 <_reclaim_reent+0x5a>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 f85d 	bl	8004fec <_free_r>
 8004f32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f34:	b111      	cbz	r1, 8004f3c <_reclaim_reent+0x64>
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f858 	bl	8004fec <_free_r>
 8004f3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f3e:	b111      	cbz	r1, 8004f46 <_reclaim_reent+0x6e>
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 f853 	bl	8004fec <_free_r>
 8004f46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004f48:	b111      	cbz	r1, 8004f50 <_reclaim_reent+0x78>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f84e 	bl	8004fec <_free_r>
 8004f50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f52:	b111      	cbz	r1, 8004f5a <_reclaim_reent+0x82>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f849 	bl	8004fec <_free_r>
 8004f5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f5c:	b111      	cbz	r1, 8004f64 <_reclaim_reent+0x8c>
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 f844 	bl	8004fec <_free_r>
 8004f64:	6a23      	ldr	r3, [r4, #32]
 8004f66:	b14b      	cbz	r3, 8004f7c <_reclaim_reent+0xa4>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f6e:	4718      	bx	r3
 8004f70:	680e      	ldr	r6, [r1, #0]
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f83a 	bl	8004fec <_free_r>
 8004f78:	4631      	mov	r1, r6
 8004f7a:	e7bb      	b.n	8004ef4 <_reclaim_reent+0x1c>
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop
 8004f80:	24000014 	.word	0x24000014

08004f84 <__libc_init_array>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	4d0d      	ldr	r5, [pc, #52]	@ (8004fbc <__libc_init_array+0x38>)
 8004f88:	4c0d      	ldr	r4, [pc, #52]	@ (8004fc0 <__libc_init_array+0x3c>)
 8004f8a:	1b64      	subs	r4, r4, r5
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	2600      	movs	r6, #0
 8004f90:	42a6      	cmp	r6, r4
 8004f92:	d109      	bne.n	8004fa8 <__libc_init_array+0x24>
 8004f94:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc4 <__libc_init_array+0x40>)
 8004f96:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc8 <__libc_init_array+0x44>)
 8004f98:	f000 f87e 	bl	8005098 <_init>
 8004f9c:	1b64      	subs	r4, r4, r5
 8004f9e:	10a4      	asrs	r4, r4, #2
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	42a6      	cmp	r6, r4
 8004fa4:	d105      	bne.n	8004fb2 <__libc_init_array+0x2e>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fac:	4798      	blx	r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	e7ee      	b.n	8004f90 <__libc_init_array+0xc>
 8004fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb6:	4798      	blx	r3
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7f2      	b.n	8004fa2 <__libc_init_array+0x1e>
 8004fbc:	08005138 	.word	0x08005138
 8004fc0:	08005138 	.word	0x08005138
 8004fc4:	08005138 	.word	0x08005138
 8004fc8:	0800513c 	.word	0x0800513c

08004fcc <__retarget_lock_acquire_recursive>:
 8004fcc:	4770      	bx	lr

08004fce <__retarget_lock_release_recursive>:
 8004fce:	4770      	bx	lr

08004fd0 <memcpy>:
 8004fd0:	440a      	add	r2, r1
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd8:	d100      	bne.n	8004fdc <memcpy+0xc>
 8004fda:	4770      	bx	lr
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	d1f9      	bne.n	8004fde <memcpy+0xe>
 8004fea:	bd10      	pop	{r4, pc}

08004fec <_free_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	d041      	beq.n	8005078 <_free_r+0x8c>
 8004ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bfb8      	it	lt
 8004ffe:	18e4      	addlt	r4, r4, r3
 8005000:	f000 f83e 	bl	8005080 <__malloc_lock>
 8005004:	4a1d      	ldr	r2, [pc, #116]	@ (800507c <_free_r+0x90>)
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	b933      	cbnz	r3, 8005018 <_free_r+0x2c>
 800500a:	6063      	str	r3, [r4, #4]
 800500c:	6014      	str	r4, [r2, #0]
 800500e:	4628      	mov	r0, r5
 8005010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005014:	f000 b83a 	b.w	800508c <__malloc_unlock>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d908      	bls.n	800502e <_free_r+0x42>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	1821      	adds	r1, r4, r0
 8005020:	428b      	cmp	r3, r1
 8005022:	bf01      	itttt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	1809      	addeq	r1, r1, r0
 800502a:	6021      	streq	r1, [r4, #0]
 800502c:	e7ed      	b.n	800500a <_free_r+0x1e>
 800502e:	461a      	mov	r2, r3
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	b10b      	cbz	r3, 8005038 <_free_r+0x4c>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d9fa      	bls.n	800502e <_free_r+0x42>
 8005038:	6811      	ldr	r1, [r2, #0]
 800503a:	1850      	adds	r0, r2, r1
 800503c:	42a0      	cmp	r0, r4
 800503e:	d10b      	bne.n	8005058 <_free_r+0x6c>
 8005040:	6820      	ldr	r0, [r4, #0]
 8005042:	4401      	add	r1, r0
 8005044:	1850      	adds	r0, r2, r1
 8005046:	4283      	cmp	r3, r0
 8005048:	6011      	str	r1, [r2, #0]
 800504a:	d1e0      	bne.n	800500e <_free_r+0x22>
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	6053      	str	r3, [r2, #4]
 8005052:	4408      	add	r0, r1
 8005054:	6010      	str	r0, [r2, #0]
 8005056:	e7da      	b.n	800500e <_free_r+0x22>
 8005058:	d902      	bls.n	8005060 <_free_r+0x74>
 800505a:	230c      	movs	r3, #12
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	e7d6      	b.n	800500e <_free_r+0x22>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	1821      	adds	r1, r4, r0
 8005064:	428b      	cmp	r3, r1
 8005066:	bf04      	itt	eq
 8005068:	6819      	ldreq	r1, [r3, #0]
 800506a:	685b      	ldreq	r3, [r3, #4]
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	bf04      	itt	eq
 8005070:	1809      	addeq	r1, r1, r0
 8005072:	6021      	streq	r1, [r4, #0]
 8005074:	6054      	str	r4, [r2, #4]
 8005076:	e7ca      	b.n	800500e <_free_r+0x22>
 8005078:	bd38      	pop	{r3, r4, r5, pc}
 800507a:	bf00      	nop
 800507c:	24004bfc 	.word	0x24004bfc

08005080 <__malloc_lock>:
 8005080:	4801      	ldr	r0, [pc, #4]	@ (8005088 <__malloc_lock+0x8>)
 8005082:	f7ff bfa3 	b.w	8004fcc <__retarget_lock_acquire_recursive>
 8005086:	bf00      	nop
 8005088:	24004bf8 	.word	0x24004bf8

0800508c <__malloc_unlock>:
 800508c:	4801      	ldr	r0, [pc, #4]	@ (8005094 <__malloc_unlock+0x8>)
 800508e:	f7ff bf9e 	b.w	8004fce <__retarget_lock_release_recursive>
 8005092:	bf00      	nop
 8005094:	24004bf8 	.word	0x24004bf8

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
