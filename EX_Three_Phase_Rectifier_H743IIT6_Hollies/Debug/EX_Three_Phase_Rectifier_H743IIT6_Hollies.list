
EX_Three_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002580  08015220  08015220  00016220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080177a0  080177a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080177a8  080177a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080177ac  080177ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  080177b0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009350  240002f4  08017aa4  000192f4  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24009644  08017aa4  00019644  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a0a3  00000000  00000000  00019322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000818b  00000000  00000000  000533c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002750  00000000  00000000  0005b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d91  00000000  00000000  0005dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004155b  00000000  00000000  0005fa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003790f  00000000  00000000  000a0f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176dd9  00000000  00000000  000d889b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024f674  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b35c  00000000  00000000  0024f72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0025aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  0025aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  0025b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015204 	.word	0x08015204

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08015204 	.word	0x08015204

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 fb92 	bl	8012ce2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fe0d 	bl	80021e4 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 fed2 	bl	8001378 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fefc 	bl	80023ec <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 febd 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 ffff 	bl	8002684 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fd0a 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fd21 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  ad7606_Init();
 80006b0:	f00f ff0c 	bl	80104cc <ad7606_Init>
  pll_Init_V(&signal_V, 50, 20000);
 80006b4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006b8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800075c <MX_FREERTOS_Init+0xb0>
 80006bc:	4828      	ldr	r0, [pc, #160]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006be:	f010 fe8b 	bl	80113d8 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006c2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006c6:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 800075c <MX_FREERTOS_Init+0xb0>
 80006ca:	4826      	ldr	r0, [pc, #152]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 80006cc:	f010 ff3c 	bl	8011548 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4825      	ldr	r0, [pc, #148]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006d4:	f008 fe88 	bl	80093e8 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006d8:	2104      	movs	r1, #4
 80006da:	4823      	ldr	r0, [pc, #140]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006dc:	f008 fe84 	bl	80093e8 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006e0:	2108      	movs	r1, #8
 80006e2:	4821      	ldr	r0, [pc, #132]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006e4:	f008 fe80 	bl	80093e8 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4820      	ldr	r0, [pc, #128]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 80006ec:	f001 fd9c 	bl	8002228 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 80006f0:	2100      	movs	r1, #0
 80006f2:	481f      	ldr	r0, [pc, #124]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006f4:	f00f ff24 	bl	8010540 <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80006f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	481e      	ldr	r0, [pc, #120]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 80006fe:	f00c fc23 	bl	800cf48 <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 800070a:	2100      	movs	r1, #0
 800070c:	481d      	ldr	r0, [pc, #116]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 800070e:	f00c fc1b 	bl	800cf48 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 8000718:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 800071a:	2100      	movs	r1, #0
 800071c:	481c      	ldr	r0, [pc, #112]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800071e:	f00c fc13 	bl	800cf48 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 800072a:	2100      	movs	r1, #0
 800072c:	481b      	ldr	r0, [pc, #108]	@ (800079c <MX_FREERTOS_Init+0xf0>)
 800072e:	f00c fc0b 	bl	800cf48 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <MX_FREERTOS_Init+0xf4>)
 8000736:	6013      	str	r3, [r2, #0]

  /* creation of acVControl */
  acVControlHandle = osThreadNew(StartACVContorl, NULL, &acVControl_attributes);
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <MX_FREERTOS_Init+0xf8>)
 800073a:	2100      	movs	r1, #0
 800073c:	481a      	ldr	r0, [pc, #104]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 800073e:	f00c fc03 	bl	800cf48 <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a19      	ldr	r2, [pc, #100]	@ (80007ac <MX_FREERTOS_Init+0x100>)
 8000746:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtect */
  circuitProtectHandle = osThreadNew(StartCircuitProtect, NULL, &circuitProtect_attributes);
 8000748:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_FREERTOS_Init+0x104>)
 800074a:	2100      	movs	r1, #0
 800074c:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <MX_FREERTOS_Init+0x108>)
 800074e:	f00c fbfb 	bl	800cf48 <osThreadNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_FREERTOS_Init+0x10c>)
 8000756:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	42480000 	.word	0x42480000
 8000760:	240094ec 	.word	0x240094ec
 8000764:	240094f0 	.word	0x240094f0
 8000768:	24000510 	.word	0x24000510
 800076c:	24000310 	.word	0x24000310
 8000770:	2400055c 	.word	0x2400055c
 8000774:	08015330 	.word	0x08015330
 8000778:	080007bd 	.word	0x080007bd
 800077c:	24000324 	.word	0x24000324
 8000780:	08015354 	.word	0x08015354
 8000784:	08000855 	.word	0x08000855
 8000788:	24000328 	.word	0x24000328
 800078c:	08015378 	.word	0x08015378
 8000790:	08000871 	.word	0x08000871
 8000794:	2400032c 	.word	0x2400032c
 8000798:	0801539c 	.word	0x0801539c
 800079c:	080008c1 	.word	0x080008c1
 80007a0:	24000330 	.word	0x24000330
 80007a4:	080153c0 	.word	0x080153c0
 80007a8:	080008d9 	.word	0x080008d9
 80007ac:	24000334 	.word	0x24000334
 80007b0:	080153e4 	.word	0x080153e4
 80007b4:	080008f1 	.word	0x080008f1
 80007b8:	24000338 	.word	0x24000338

080007bc <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007c4:	f00f f968 	bl	800fa98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    switch (runState)
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <StartStateLED+0x90>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d032      	beq.n	8000838 <StartStateLED+0x7c>
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	dc38      	bgt.n	8000848 <StartStateLED+0x8c>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <StartStateLED+0x24>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d006      	beq.n	80007ec <StartStateLED+0x30>
    case FAULT: // 保护状态
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
      osDelay(100);
      break;
    default:
      break;
 80007de:	e033      	b.n	8000848 <StartStateLED+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	481a      	ldr	r0, [pc, #104]	@ (8000850 <StartStateLED+0x94>)
 80007e6:	f002 f8fd 	bl	80029e4 <HAL_GPIO_WritePin>
      break;
 80007ea:	e02e      	b.n	800084a <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007ec:	2101      	movs	r1, #1
 80007ee:	4818      	ldr	r0, [pc, #96]	@ (8000850 <StartStateLED+0x94>)
 80007f0:	f002 f911 	bl	8002a16 <HAL_GPIO_TogglePin>
      osDelay(100);
 80007f4:	2064      	movs	r0, #100	@ 0x64
 80007f6:	f00c fc39 	bl	800d06c <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007fa:	2101      	movs	r1, #1
 80007fc:	4814      	ldr	r0, [pc, #80]	@ (8000850 <StartStateLED+0x94>)
 80007fe:	f002 f90a 	bl	8002a16 <HAL_GPIO_TogglePin>
      osDelay(200);
 8000802:	20c8      	movs	r0, #200	@ 0xc8
 8000804:	f00c fc32 	bl	800d06c <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000808:	2101      	movs	r1, #1
 800080a:	4811      	ldr	r0, [pc, #68]	@ (8000850 <StartStateLED+0x94>)
 800080c:	f002 f903 	bl	8002a16 <HAL_GPIO_TogglePin>
      osDelay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f00c fc2b 	bl	800d06c <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000816:	2101      	movs	r1, #1
 8000818:	480d      	ldr	r0, [pc, #52]	@ (8000850 <StartStateLED+0x94>)
 800081a:	f002 f8fc 	bl	8002a16 <HAL_GPIO_TogglePin>
      osDelay(200);
 800081e:	20c8      	movs	r0, #200	@ 0xc8
 8000820:	f00c fc24 	bl	800d06c <osDelay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2102      	movs	r1, #2
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <StartStateLED+0x94>)
 800082a:	f002 f8db 	bl	80029e4 <HAL_GPIO_WritePin>
      osDelay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000832:	f00c fc1b 	bl	800d06c <osDelay>
      break;
 8000836:	e008      	b.n	800084a <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000838:	2101      	movs	r1, #1
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <StartStateLED+0x94>)
 800083c:	f002 f8eb 	bl	8002a16 <HAL_GPIO_TogglePin>
      osDelay(100);
 8000840:	2064      	movs	r0, #100	@ 0x64
 8000842:	f00c fc13 	bl	800d06c <osDelay>
      break;
 8000846:	e000      	b.n	800084a <StartStateLED+0x8e>
      break;
 8000848:	bf00      	nop
    switch (runState)
 800084a:	e7bd      	b.n	80007c8 <StartStateLED+0xc>
 800084c:	240094f4 	.word	0x240094f4
 8000850:	58022000 	.word	0x58022000

08000854 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  OLED_Init();
 800085c:	f010 fa74 	bl	8010d48 <OLED_Init>
  /* Infinite loop */
  for (;;)
  {
    appOLEDShow();
 8000860:	f000 f936 	bl	8000ad0 <appOLEDShow>
    osDelay(100);
 8000864:	2064      	movs	r0, #100	@ 0x64
 8000866:	f00c fc01 	bl	800d06c <osDelay>
    appOLEDShow();
 800086a:	bf00      	nop
 800086c:	e7f8      	b.n	8000860 <StartOledShow+0xc>
	...

08000870 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  INA228_config(INA228_0);
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <StartDcSamp+0x44>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f00f ff3a 	bl	80106f6 <INA228_config>
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <StartDcSamp+0x44>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f00f ffe4 	bl	8010854 <INA228_getVBUS_V>
 800088c:	eef0 7a40 	vmov.f32	s15, s0
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <StartDcSamp+0x48>)
 8000892:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <StartDcSamp+0x44>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f010 f85e 	bl	801095c <INA228_getCURRENT_A>
 80008a0:	eef0 7a40 	vmov.f32	s15, s0
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <StartDcSamp+0x4c>)
 80008a6:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f00c fbde 	bl	800d06c <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 80008b0:	bf00      	nop
 80008b2:	e7e6      	b.n	8000882 <StartDcSamp+0x12>
 80008b4:	08016c18 	.word	0x08016c18
 80008b8:	240094e4 	.word	0x240094e4
 80008bc:	240094e8 	.word	0x240094e8

080008c0 <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  for (;;)
  {
#if USER_DEBUG
    appTaskStackShow();
#else
    vTaskDelete(NULL);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f00d fb73 	bl	800dfb4 <vTaskDelete>
    // uint8_t text[32] = {0};
    // sprintf((char *)text, "x=0,a=%.3f,b=%.3f\r\n", signal_V->basic->input_a, signal_V->basic->park_d);
    // CDC_Transmit_FS(text, 32);
    // memset(text, 0, 32);
#endif
    osDelay(100);
 80008ce:	2064      	movs	r0, #100	@ 0x64
 80008d0:	f00c fbcc 	bl	800d06c <osDelay>
    vTaskDelete(NULL);
 80008d4:	bf00      	nop
 80008d6:	e7f7      	b.n	80008c8 <StartUsartDebug+0x8>

080008d8 <StartACVContorl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACVContorl */
void StartACVContorl(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartACVContorl */
  /* Infinite loop */
  for (;;)
  {
#if Rectifier_Or_Inverter
    vTaskDelete(NULL);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f00d fb67 	bl	800dfb4 <vTaskDelete>
#else
    appACVControl();
#endif
    osDelay(25);
 80008e6:	2019      	movs	r0, #25
 80008e8:	f00c fbc0 	bl	800d06c <osDelay>
    vTaskDelete(NULL);
 80008ec:	bf00      	nop
 80008ee:	e7f7      	b.n	80008e0 <StartACVContorl+0x8>

080008f0 <StartCircuitProtect>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCircuitProtect */
void StartCircuitProtect(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCircuitProtect */
  /* Infinite loop */
  for (;;)
  {
    if (U > protection_Udc || I > protection_Idc ||
 80008f8:	4b6d      	ldr	r3, [pc, #436]	@ (8000ab0 <StartCircuitProtect+0x1c0>)
 80008fa:	edd3 7a00 	vldr	s15, [r3]
 80008fe:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8000ab4 <StartCircuitProtect+0x1c4>
 8000902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090a:	dc51      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
 800090c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ab8 <StartCircuitProtect+0x1c8>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091e:	dc47      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000920:	4b66      	ldr	r3, [pc, #408]	@ (8000abc <StartCircuitProtect+0x1cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	edd3 7a03 	vldr	s15, [r3, #12]
    if (U > protection_Udc || I > protection_Idc ||
 800092a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800092e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000936:	dc3b      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000938:	4b61      	ldr	r3, [pc, #388]	@ (8000ac0 <StartCircuitProtect+0x1d0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000942:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	dc2f      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000950:	4b5a      	ldr	r3, [pc, #360]	@ (8000abc <StartCircuitProtect+0x1cc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	edd3 7a04 	vldr	s15, [r3, #16]
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 800095a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800095e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	dc23      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000968:	4b55      	ldr	r3, [pc, #340]	@ (8000ac0 <StartCircuitProtect+0x1d0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000972:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	dc17      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000980:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <StartCircuitProtect+0x1cc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	edd3 7a05 	vldr	s15, [r3, #20]
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 800098a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800098e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	dc0b      	bgt.n	80009b0 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000998:	4b49      	ldr	r3, [pc, #292]	@ (8000ac0 <StartCircuitProtect+0x1d0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	edd3 7a05 	vldr	s15, [r3, #20]
 80009a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ae:	dd0d      	ble.n	80009cc <StartCircuitProtect+0xdc>
    {
      runState = FAULT;
 80009b0:	4b44      	ldr	r3, [pc, #272]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	701a      	strb	r2, [r3, #0]
      osDelay(1000);
 80009b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ba:	f00c fb57 	bl	800d06c <osDelay>
      HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c4:	4840      	ldr	r0, [pc, #256]	@ (8000ac8 <StartCircuitProtect+0x1d8>)
 80009c6:	f002 f80d 	bl	80029e4 <HAL_GPIO_WritePin>
 80009ca:	e06c      	b.n	8000aa6 <StartCircuitProtect+0x1b6>
    }
    else if (runState == START &&
 80009cc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d167      	bne.n	8000aa6 <StartCircuitProtect+0x1b6>
             runState != FAULT &&
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
    else if (runState == START &&
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d062      	beq.n	8000aa6 <StartCircuitProtect+0x1b6>
             fabs(signal_V->basic->park_q) < 0.02f &&
 80009e0:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <StartCircuitProtect+0x1cc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80009ea:	eef0 7ae7 	vabs.f32	s15, s15
             runState != FAULT &&
 80009ee:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000acc <StartCircuitProtect+0x1dc>
 80009f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fa:	d554      	bpl.n	8000aa6 <StartCircuitProtect+0x1b6>
             signal_V->basic->rms_a > 5.f &&
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <StartCircuitProtect+0x1cc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	edd3 7a03 	vldr	s15, [r3, #12]
             fabs(signal_V->basic->park_q) < 0.02f &&
 8000a06:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a12:	dd48      	ble.n	8000aa6 <StartCircuitProtect+0x1b6>
             signal_I->basic->rms_a > 0.5f)
 8000a14:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <StartCircuitProtect+0x1d0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	edd3 7a03 	vldr	s15, [r3, #12]
             signal_V->basic->rms_a > 5.f &&
 8000a1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2a:	dd3c      	ble.n	8000aa6 <StartCircuitProtect+0x1b6>
    {
      osDelay(1000); // 延迟时间是否合适需根据具体情况调整
 8000a2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a30:	f00c fb1c 	bl	800d06c <osDelay>
      // 防止上电瞬间误判
      if (runState == START &&
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d133      	bne.n	8000aa6 <StartCircuitProtect+0x1b6>
          runState != FAULT &&
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
      if (runState == START &&
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d02e      	beq.n	8000aa6 <StartCircuitProtect+0x1b6>
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <StartCircuitProtect+0x1cc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000a52:	eef0 7ae7 	vabs.f32	s15, s15
          runState != FAULT &&
 8000a56:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000acc <StartCircuitProtect+0x1dc>
 8000a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a62:	d520      	bpl.n	8000aa6 <StartCircuitProtect+0x1b6>
          signal_V->basic->rms_a > 5.f &&
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <StartCircuitProtect+0x1cc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	edd3 7a03 	vldr	s15, [r3, #12]
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000a6e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7a:	dd14      	ble.n	8000aa6 <StartCircuitProtect+0x1b6>
          signal_I->basic->rms_a > 0.5f)
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <StartCircuitProtect+0x1d0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	edd3 7a03 	vldr	s15, [r3, #12]
          signal_V->basic->rms_a > 5.f &&
 8000a86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a92:	dd08      	ble.n	8000aa6 <StartCircuitProtect+0x1b6>
      {
        runState = RUN;
 8000a94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <StartCircuitProtect+0x1d4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <StartCircuitProtect+0x1d8>)
 8000aa2:	f001 ff9f 	bl	80029e4 <HAL_GPIO_WritePin>
      }
    }
    osDelay(10);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f00c fae0 	bl	800d06c <osDelay>
    if (U > protection_Udc || I > protection_Idc ||
 8000aac:	e724      	b.n	80008f8 <StartCircuitProtect+0x8>
 8000aae:	bf00      	nop
 8000ab0:	240094e4 	.word	0x240094e4
 8000ab4:	42b40000 	.word	0x42b40000
 8000ab8:	240094e8 	.word	0x240094e8
 8000abc:	240094ec 	.word	0x240094ec
 8000ac0:	240094f0 	.word	0x240094f0
 8000ac4:	240094f4 	.word	0x240094f4
 8000ac8:	58020000 	.word	0x58020000
 8000acc:	3ca3d70a 	.word	0x3ca3d70a

08000ad0 <appOLEDShow>:

/**
 * @brief OLED显示
 */
static void appOLEDShow()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af04      	add	r7, sp, #16
  static uint8_t text[32] = {0};
  sprintf((char *)text, "Ua: %5.2f Ub: %5.2f", signal_V->basic->rms_a, signal_V->basic->rms_b);
 8000ad6:	4b70      	ldr	r3, [pc, #448]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ae0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	edd3 7a04 	vldr	s15, [r3, #16]
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	ed8d 7b00 	vstr	d7, [sp]
 8000af6:	ec53 2b16 	vmov	r2, r3, d6
 8000afa:	4968      	ldr	r1, [pc, #416]	@ (8000c9c <appOLEDShow+0x1cc>)
 8000afc:	4868      	ldr	r0, [pc, #416]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000afe:	f012 f88d 	bl	8012c1c <siprintf>
  OLED_ShowString(0, 0, text, 12);
 8000b02:	230c      	movs	r3, #12
 8000b04:	4a66      	ldr	r2, [pc, #408]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f010 f8e9 	bl	8010ce0 <OLED_ShowString>
  sprintf((char *)text, "Uc: %5.2f Ia: %5.2f", signal_V->basic->rms_c, signal_I->basic->rms_a);
 8000b0e:	4b62      	ldr	r3, [pc, #392]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2a:	ed8d 7b00 	vstr	d7, [sp]
 8000b2e:	ec53 2b16 	vmov	r2, r3, d6
 8000b32:	495d      	ldr	r1, [pc, #372]	@ (8000ca8 <appOLEDShow+0x1d8>)
 8000b34:	485a      	ldr	r0, [pc, #360]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b36:	f012 f871 	bl	8012c1c <siprintf>
  OLED_ShowString(0, 12, text, 12);
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	4a58      	ldr	r2, [pc, #352]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b3e:	210c      	movs	r1, #12
 8000b40:	2000      	movs	r0, #0
 8000b42:	f010 f8cd 	bl	8010ce0 <OLED_ShowString>
  sprintf((char *)text, "Ib: %5.2f Ic: %5.2f", signal_I->basic->rms_b, signal_I->basic->rms_c);
 8000b46:	4b57      	ldr	r3, [pc, #348]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b50:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b54:	4b53      	ldr	r3, [pc, #332]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b62:	ed8d 7b00 	vstr	d7, [sp]
 8000b66:	ec53 2b16 	vmov	r2, r3, d6
 8000b6a:	4950      	ldr	r1, [pc, #320]	@ (8000cac <appOLEDShow+0x1dc>)
 8000b6c:	484c      	ldr	r0, [pc, #304]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b6e:	f012 f855 	bl	8012c1c <siprintf>
  OLED_ShowString(0, 24, text, 12);
 8000b72:	230c      	movs	r3, #12
 8000b74:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b76:	2118      	movs	r1, #24
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f010 f8b1 	bl	8010ce0 <OLED_ShowString>
  sprintf((char *)text, "U: %5.2f I: %5.2f", U, I);
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <appOLEDShow+0x1e0>)
 8000b80:	edd3 7a00 	vldr	s15, [r3]
 8000b84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b88:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb4 <appOLEDShow+0x1e4>)
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b92:	ed8d 7b00 	vstr	d7, [sp]
 8000b96:	ec53 2b16 	vmov	r2, r3, d6
 8000b9a:	4947      	ldr	r1, [pc, #284]	@ (8000cb8 <appOLEDShow+0x1e8>)
 8000b9c:	4840      	ldr	r0, [pc, #256]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000b9e:	f012 f83d 	bl	8012c1c <siprintf>
  OLED_ShowString(0, 36, text, 12);
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000ba6:	2124      	movs	r1, #36	@ 0x24
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f010 f899 	bl	8010ce0 <OLED_ShowString>
  float n = (signal_V->basic->rms_a * signal_I->basic->rms_a + signal_V->basic->rms_b * signal_I->basic->rms_b + signal_V->basic->rms_c * signal_I->basic->rms_c) / (U * I) * 100.f;
 8000bae:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	edd3 6a04 	vldr	s13, [r3, #16]
 8000bd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <appOLEDShow+0x1c8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	edd3 6a05 	vldr	s13, [r3, #20]
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bfa:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <appOLEDShow+0x1e0>)
 8000c00:	ed93 7a00 	vldr	s14, [r3]
 8000c04:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <appOLEDShow+0x1e4>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c12:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000cbc <appOLEDShow+0x1ec>
 8000c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1a:	edc7 7a01 	vstr	s15, [r7, #4]
  if (n > 100.f)
 8000c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c22:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000cbc <appOLEDShow+0x1ec>
 8000c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	dd02      	ble.n	8000c36 <appOLEDShow+0x166>
  {
    n = 100.f;
 8000c30:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <appOLEDShow+0x1f0>)
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	e009      	b.n	8000c4a <appOLEDShow+0x17a>
  }
  else if (n < 0.f)
 8000c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c42:	d502      	bpl.n	8000c4a <appOLEDShow+0x17a>
  {
    n = 0.f;
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
  }
  // sprintf((char *)text, "cnt: %4ld n: %5.2f%%", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1), n);
  sprintf((char *)text, "d: %5.3f q: %5.3f %d", signal_I->pid_d->out, signal_I->pid_q->out, runState);
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <appOLEDShow+0x1d4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <appOLEDShow+0x1f4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	ed8d 7b00 	vstr	d7, [sp]
 8000c72:	ec53 2b16 	vmov	r2, r3, d6
 8000c76:	4914      	ldr	r1, [pc, #80]	@ (8000cc8 <appOLEDShow+0x1f8>)
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000c7a:	f011 ffcf 	bl	8012c1c <siprintf>
  OLED_ShowString(0, 48, text, 12);
 8000c7e:	230c      	movs	r3, #12
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <appOLEDShow+0x1d0>)
 8000c82:	2130      	movs	r1, #48	@ 0x30
 8000c84:	2000      	movs	r0, #0
 8000c86:	f010 f82b 	bl	8010ce0 <OLED_ShowString>
  OLED_Refresh();
 8000c8a:	f00f feb9 	bl	8010a00 <OLED_Refresh>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	240094ec 	.word	0x240094ec
 8000c9c:	08015268 	.word	0x08015268
 8000ca0:	2400033c 	.word	0x2400033c
 8000ca4:	240094f0 	.word	0x240094f0
 8000ca8:	0801527c 	.word	0x0801527c
 8000cac:	08015290 	.word	0x08015290
 8000cb0:	240094e4 	.word	0x240094e4
 8000cb4:	240094e8 	.word	0x240094e8
 8000cb8:	080152a4 	.word	0x080152a4
 8000cbc:	42c80000 	.word	0x42c80000
 8000cc0:	42c80000 	.word	0x42c80000
 8000cc4:	240094f4 	.word	0x240094f4
 8000cc8:	080152b8 	.word	0x080152b8

08000ccc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b73      	ldr	r3, [pc, #460]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a71      	ldr	r2, [pc, #452]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d00:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a6a      	ldr	r2, [pc, #424]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b67      	ldr	r3, [pc, #412]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b64      	ldr	r3, [pc, #400]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4a62      	ldr	r2, [pc, #392]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4b60      	ldr	r3, [pc, #384]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	4a5b      	ldr	r2, [pc, #364]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4c:	4b58      	ldr	r3, [pc, #352]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5a:	4b55      	ldr	r3, [pc, #340]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a53      	ldr	r2, [pc, #332]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b51      	ldr	r3, [pc, #324]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d78:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <MX_GPIO_Init+0x1e4>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4846      	ldr	r0, [pc, #280]	@ (8000eb4 <MX_GPIO_Init+0x1e8>)
 8000d9c:	f001 fe22 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2102      	movs	r1, #2
 8000da4:	4844      	ldr	r0, [pc, #272]	@ (8000eb8 <MX_GPIO_Init+0x1ec>)
 8000da6:	f001 fe1d 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2188      	movs	r1, #136	@ 0x88
 8000dae:	4843      	ldr	r0, [pc, #268]	@ (8000ebc <MX_GPIO_Init+0x1f0>)
 8000db0:	f001 fe18 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dba:	4841      	ldr	r0, [pc, #260]	@ (8000ec0 <MX_GPIO_Init+0x1f4>)
 8000dbc:	f001 fe12 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	483f      	ldr	r0, [pc, #252]	@ (8000ec4 <MX_GPIO_Init+0x1f8>)
 8000dc6:	f001 fe0d 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	@ 0x40
 8000dce:	483d      	ldr	r0, [pc, #244]	@ (8000ec4 <MX_GPIO_Init+0x1f8>)
 8000dd0:	f001 fe08 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4832      	ldr	r0, [pc, #200]	@ (8000eb4 <MX_GPIO_Init+0x1e8>)
 8000dec:	f001 fc4a 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	482c      	ldr	r0, [pc, #176]	@ (8000eb8 <MX_GPIO_Init+0x1ec>)
 8000e08:	f001 fc3c 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000e0c:	2388      	movs	r3, #136	@ 0x88
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4826      	ldr	r0, [pc, #152]	@ (8000ebc <MX_GPIO_Init+0x1f0>)
 8000e24:	f001 fc2e 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000e28:	2340      	movs	r3, #64	@ 0x40
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481f      	ldr	r0, [pc, #124]	@ (8000ebc <MX_GPIO_Init+0x1f0>)
 8000e3e:	f001 fc21 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000e42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <MX_GPIO_Init+0x1f4>)
 8000e5c:	f001 fc12 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4813      	ldr	r0, [pc, #76]	@ (8000ec4 <MX_GPIO_Init+0x1f8>)
 8000e78:	f001 fc04 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <MX_GPIO_Init+0x1f8>)
 8000e94:	f001 fbf6 	bl	8002684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f001 f901 	bl	80020a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ea2:	2017      	movs	r0, #23
 8000ea4:	f001 f918 	bl	80020d8 <HAL_NVIC_EnableIRQ>

}
 8000ea8:	bf00      	nop
 8000eaa:	3730      	adds	r7, #48	@ 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58020800 	.word	0x58020800
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	58020000 	.word	0x58020000
 8000ec4:	58022000 	.word	0x58022000

08000ec8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f04:	f001 fdbc 	bl	8002a80 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f0e:	f000 fa33 	bl	8001378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f16:	f002 fb3f 	bl	8003598 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 fa2a 	bl	8001378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_I2C1_Init+0x74>)
 8000f28:	f002 fb81 	bl	800362e <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 fa21 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2400035c 	.word	0x2400035c
 8000f40:	40005400 	.word	0x40005400
 8000f44:	307075b1 	.word	0x307075b1

08000f48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	22c0      	movs	r2, #192	@ 0xc0
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f011 feba 	bl	8012ce2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_I2C_MspInit+0xc4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d145      	bne.n	8001004 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f78:	f04f 0208 	mov.w	r2, #8
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fe94 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f9a:	f000 f9ed 	bl	8001378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbc:	23c0      	movs	r3, #192	@ 0xc0
 8000fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HAL_I2C_MspInit+0xcc>)
 8000fe2:	f001 fb4f 	bl	8002684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	37e8      	adds	r7, #232	@ 0xe8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40005400 	.word	0x40005400
 8001010:	58024400 	.word	0x58024400
 8001014:	58020400 	.word	0x58020400

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800101e:	f000 f961 	bl	80012e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <main+0x10c>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11b      	bne.n	8001066 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800102e:	f3bf 8f4f 	dsb	sy
}
 8001032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001034:	f3bf 8f6f 	isb	sy
}
 8001038:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800103a:	4b3a      	ldr	r3, [pc, #232]	@ (8001124 <main+0x10c>)
 800103c:	2200      	movs	r2, #0
 800103e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001042:	f3bf 8f4f 	dsb	sy
}
 8001046:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
}
 800104c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800104e:	4b35      	ldr	r3, [pc, #212]	@ (8001124 <main+0x10c>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a34      	ldr	r2, [pc, #208]	@ (8001124 <main+0x10c>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001058:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800105a:	f3bf 8f4f 	dsb	sy
}
 800105e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001060:	f3bf 8f6f 	isb	sy
}
 8001064:	e000      	b.n	8001068 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001066:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001068:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <main+0x10c>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d138      	bne.n	80010e6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <main+0x10c>)
 8001076:	2200      	movs	r2, #0
 8001078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
}
 8001080:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <main+0x10c>)
 8001084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001088:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0b5b      	lsrs	r3, r3, #13
 800108e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001092:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800109c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80010a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80010ac:	491d      	ldr	r1, [pc, #116]	@ (8001124 <main+0x10c>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ef      	bne.n	800109e <main+0x86>
    } while(sets-- != 0U);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	60ba      	str	r2, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1e5      	bne.n	8001094 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80010c8:	f3bf 8f4f 	dsb	sy
}
 80010cc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <main+0x10c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <main+0x10c>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	e000      	b.n	80010e8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80010e6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f000 fe98 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f81c 	bl	8001128 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010f0:	f000 f8c8 	bl	8001284 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f7ff fdea 	bl	8000ccc <MX_GPIO_Init>
  MX_SPI2_Init();
 80010f8:	f000 f99a 	bl	8001430 <MX_SPI2_Init>
  MX_TIM2_Init();
 80010fc:	f000 fd52 	bl	8001ba4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001100:	f7ff fee2 	bl	8000ec8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001104:	f000 fc86 	bl	8001a14 <MX_TIM1_Init>
  MX_DAC1_Init();
 8001108:	f7ff fa50 	bl	80005ac <MX_DAC1_Init>
  MX_SPI1_Init();
 800110c:	f000 f93a 	bl	8001384 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001110:	f00e fcc2 	bl	800fa98 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001114:	f00b fece 	bl	800ceb4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001118:	f7ff fac8 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800111c:	f00b feee 	bl	800cefc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <main+0x108>
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09e      	sub	sp, #120	@ 0x78
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001132:	224c      	movs	r2, #76	@ 0x4c
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f011 fdd3 	bl	8012ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f011 fdcc 	bl	8012ce2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800114a:	2002      	movs	r0, #2
 800114c:	f003 fd5a 	bl	8004c04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b48      	ldr	r3, [pc, #288]	@ (8001278 <SystemClock_Config+0x150>)
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	4a47      	ldr	r2, [pc, #284]	@ (8001278 <SystemClock_Config+0x150>)
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001160:	4b45      	ldr	r3, [pc, #276]	@ (8001278 <SystemClock_Config+0x150>)
 8001162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <SystemClock_Config+0x154>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a43      	ldr	r2, [pc, #268]	@ (800127c <SystemClock_Config+0x154>)
 8001170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <SystemClock_Config+0x154>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001182:	bf00      	nop
 8001184:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <SystemClock_Config+0x154>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800118c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001190:	d1f8      	bne.n	8001184 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <SystemClock_Config+0x158>)
 8001194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001198:	4a39      	ldr	r2, [pc, #228]	@ (8001280 <SystemClock_Config+0x158>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011a2:	4b37      	ldr	r3, [pc, #220]	@ (8001280 <SystemClock_Config+0x158>)
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	4b31      	ldr	r3, [pc, #196]	@ (800127c <SystemClock_Config+0x154>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a30      	ldr	r2, [pc, #192]	@ (800127c <SystemClock_Config+0x154>)
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <SystemClock_Config+0x154>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <SystemClock_Config+0x150>)
 80011cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001278 <SystemClock_Config+0x150>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <SystemClock_Config+0x150>)
 80011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011e2:	bf00      	nop
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <SystemClock_Config+0x154>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011f0:	d1f8      	bne.n	80011e4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001200:	2302      	movs	r3, #2
 8001202:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001204:	2305      	movs	r3, #5
 8001206:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800120c:	2302      	movs	r3, #2
 800120e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001210:	2314      	movs	r3, #20
 8001212:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001218:	2308      	movs	r3, #8
 800121a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800121c:	2300      	movs	r3, #0
 800121e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fd35 	bl	8004c98 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001234:	f000 f8a0 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	233f      	movs	r3, #63	@ 0x3f
 800123a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001244:	2308      	movs	r3, #8
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001248:	2340      	movs	r3, #64	@ 0x40
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800124c:	2340      	movs	r3, #64	@ 0x40
 800124e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001256:	2340      	movs	r3, #64	@ 0x40
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2104      	movs	r1, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f973 	bl	800554c <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800126c:	f000 f884 	bl	8001378 <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3778      	adds	r7, #120	@ 0x78
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58000400 	.word	0x58000400
 800127c:	58024800 	.word	0x58024800
 8001280:	58024400 	.word	0x58024400

08001284 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0b0      	sub	sp, #192	@ 0xc0
 8001288:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	22c0      	movs	r2, #192	@ 0xc0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f011 fd26 	bl	8012ce2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 8001296:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 80012a2:	2319      	movs	r3, #25
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 80012a6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012bc:	2300      	movs	r3, #0
 80012be:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80012c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fcf5 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80012d8:	f000 f84e 	bl	8001378 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	37c0      	adds	r7, #192	@ 0xc0
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012f6:	f000 fefd 	bl	80020f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012fe:	2300      	movs	r3, #0
 8001300:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001302:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001306:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001308:	2312      	movs	r3, #18
 800130a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800130c:	2300      	movs	r3, #0
 800130e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001310:	2301      	movs	r3, #1
 8001312:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001314:	2303      	movs	r3, #3
 8001316:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001320:	2301      	movs	r3, #1
 8001322:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001328:	463b      	mov	r3, r7
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ff1a 	bl	8002164 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001330:	2301      	movs	r3, #1
 8001332:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8001334:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001338:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800133a:	2310      	movs	r3, #16
 800133c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800133e:	463b      	mov	r3, r7
 8001340:	4618      	mov	r0, r3
 8001342:	f000 ff0f 	bl	8002164 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001346:	2004      	movs	r0, #4
 8001348:	f000 feec 	bl	8002124 <HAL_MPU_Enable>

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001366:	f000 fd95 	bl	8001e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40001000 	.word	0x40001000

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <MX_SPI1_Init+0xa4>)
 800138a:	4a28      	ldr	r2, [pc, #160]	@ (800142c <MX_SPI1_Init+0xa8>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <MX_SPI1_Init+0xa4>)
 8001390:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <MX_SPI1_Init+0xa4>)
 8001398:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800139c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800139e:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_SPI1_Init+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_SPI1_Init+0xa4>)
 8001404:	2200      	movs	r2, #0
 8001406:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_SPI1_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_SPI1_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_SPI1_Init+0xa4>)
 8001416:	f005 ffbf 	bl	8007398 <HAL_SPI_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001420:	f7ff ffaa 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	240003b0 	.word	0x240003b0
 800142c:	40013000 	.word	0x40013000

08001430 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001436:	4a29      	ldr	r2, [pc, #164]	@ (80014dc <MX_SPI2_Init+0xac>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 800143c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001440:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001442:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001444:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001448:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 800144c:	220f      	movs	r2, #15
 800144e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001460:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001468:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800146c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001490:	2200      	movs	r2, #0
 8001492:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 8001496:	2200      	movs	r2, #0
 8001498:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_SPI2_Init+0xa8>)
 80014c6:	f005 ff67 	bl	8007398 <HAL_SPI_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80014d0:	f7ff ff52 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	24000438 	.word	0x24000438
 80014dc:	40003800 	.word	0x40003800

080014e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a34      	ldr	r2, [pc, #208]	@ (80015d0 <HAL_SPI_MspInit+0xf0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d12e      	bne.n	8001560 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001502:	4b34      	ldr	r3, [pc, #208]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001508:	4a32      	ldr	r2, [pc, #200]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 800150a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800150e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001512:	4b30      	ldr	r3, [pc, #192]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b2c      	ldr	r3, [pc, #176]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDIN_Pin;
 800153e:	23a0      	movs	r3, #160	@ 0xa0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800154e:	2305      	movs	r3, #5
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	481f      	ldr	r0, [pc, #124]	@ (80015d8 <HAL_SPI_MspInit+0xf8>)
 800155a:	f001 f893 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800155e:	e032      	b.n	80015c6 <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <HAL_SPI_MspInit+0xfc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12d      	bne.n	80015c6 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001576:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 800157c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158e:	4a11      	ldr	r2, [pc, #68]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_SPI_MspInit+0xf4>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015a6:	2306      	movs	r3, #6
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b6:	2305      	movs	r3, #5
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <HAL_SPI_MspInit+0x100>)
 80015c2:	f001 f85f 	bl	8002684 <HAL_GPIO_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	@ 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013000 	.word	0x40013000
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	40003800 	.word	0x40003800
 80015e0:	58022000 	.word	0x58022000

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_MspInit+0x38>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_MspInit+0x38>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_MspInit+0x38>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	210f      	movs	r1, #15
 800160c:	f06f 0001 	mvn.w	r0, #1
 8001610:	f000 fd48 	bl	80020a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400

08001620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b090      	sub	sp, #64	@ 0x40
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	d827      	bhi.n	800167e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800162e:	2200      	movs	r2, #0
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	2036      	movs	r0, #54	@ 0x36
 8001634:	f000 fd36 	bl	80020a4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001638:	2036      	movs	r0, #54	@ 0x36
 800163a:	f000 fd4d 	bl	80020d8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800163e:	4a29      	ldr	r2, [pc, #164]	@ (80016e4 <HAL_InitTick+0xc4>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_InitTick+0xc8>)
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164a:	4a27      	ldr	r2, [pc, #156]	@ (80016e8 <HAL_InitTick+0xc8>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_InitTick+0xc8>)
 8001656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001662:	f107 0210 	add.w	r2, r7, #16
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fae3 	bl	8005c38 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_InitTick+0x6a>
 800167c:	e001      	b.n	8001682 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e02b      	b.n	80016da <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001682:	f004 fac3 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 8001686:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001688:	e004      	b.n	8001694 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800168a:	f004 fabf 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 800168e:	4603      	mov	r3, r0
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <HAL_InitTick+0xcc>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3b01      	subs	r3, #1
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016a4:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <HAL_InitTick+0xd4>)
 80016a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016b0:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016c2:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016c4:	f006 fcd5 	bl	8008072 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d104      	bne.n	80016d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <HAL_InitTick+0xd0>)
 80016d0:	f006 fd26 	bl	8008120 <HAL_TIM_Base_Start_IT>
 80016d4:	4603      	mov	r3, r0
 80016d6:	e000      	b.n	80016da <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3740      	adds	r7, #64	@ 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000008 	.word	0x24000008
 80016e8:	58024400 	.word	0x58024400
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	240004c0 	.word	0x240004c0
 80016f4:	40001000 	.word	0x40001000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8001732:	2040      	movs	r0, #64	@ 0x40
 8001734:	f001 f989 	bl	8002a4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <TIM6_DAC_IRQHandler+0x20>)
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800174a:	4804      	ldr	r0, [pc, #16]	@ (800175c <TIM6_DAC_IRQHandler+0x20>)
 800174c:	f000 fdc3 	bl	80022d6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <TIM6_DAC_IRQHandler+0x24>)
 8001752:	f006 fecd 	bl	80084f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	24000310 	.word	0x24000310
 8001760:	240004c0 	.word	0x240004c0

08001764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <OTG_FS_IRQHandler+0x10>)
 800176a:	f002 f8ed 	bl	8003948 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	240063dc 	.word	0x240063dc

08001778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_kill>:

int _kill(int pid, int sig)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001792:	f011 fb09 	bl	8012da8 <__errno>
 8001796:	4603      	mov	r3, r0
 8001798:	2216      	movs	r2, #22
 800179a:	601a      	str	r2, [r3, #0]
  return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_exit>:

void _exit (int status)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe7 	bl	8001788 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <_exit+0x12>

080017be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e00a      	b.n	80017e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d0:	f3af 8000 	nop.w
 80017d4:	4601      	mov	r1, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	60ba      	str	r2, [r7, #8]
 80017dc:	b2ca      	uxtb	r2, r1
 80017de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf0      	blt.n	80017d0 <_read+0x12>
  }

  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e009      	b.n	800181e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf1      	blt.n	800180a <_write+0x12>
  }
  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_close>:

int _close(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001858:	605a      	str	r2, [r3, #4]
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f011 fa6e 	bl	8012da8 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	24080000 	.word	0x24080000
 80018f8:	00008000 	.word	0x00008000
 80018fc:	2400050c 	.word	0x2400050c
 8001900:	24009648 	.word	0x24009648

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001908:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <SystemInit+0xe4>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a36      	ldr	r2, [pc, #216]	@ (80019e8 <SystemInit+0xe4>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <SystemInit+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	2b06      	cmp	r3, #6
 8001922:	d807      	bhi.n	8001934 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <SystemInit+0xe8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 030f 	bic.w	r3, r3, #15
 800192c:	4a2f      	ldr	r2, [pc, #188]	@ (80019ec <SystemInit+0xe8>)
 800192e:	f043 0307 	orr.w	r3, r3, #7
 8001932:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <SystemInit+0xec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <SystemInit+0xec>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <SystemInit+0xec>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <SystemInit+0xec>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4929      	ldr	r1, [pc, #164]	@ (80019f0 <SystemInit+0xec>)
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <SystemInit+0xf0>)
 800194e:	4013      	ands	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <SystemInit+0xe8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800195e:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <SystemInit+0xe8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 030f 	bic.w	r3, r3, #15
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <SystemInit+0xe8>)
 8001968:	f043 0307 	orr.w	r3, r3, #7
 800196c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <SystemInit+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <SystemInit+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <SystemInit+0xec>)
 8001982:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <SystemInit+0xf4>)
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <SystemInit+0xec>)
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <SystemInit+0xf8>)
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <SystemInit+0xec>)
 800198e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <SystemInit+0xfc>)
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <SystemInit+0xec>)
 8001994:	2200      	movs	r2, #0
 8001996:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <SystemInit+0xec>)
 800199a:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <SystemInit+0xfc>)
 800199c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800199e:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <SystemInit+0xec>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <SystemInit+0xec>)
 80019a6:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <SystemInit+0xfc>)
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <SystemInit+0xec>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <SystemInit+0xec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <SystemInit+0xec>)
 80019b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <SystemInit+0xec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <SystemInit+0x100>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <SystemInit+0x104>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019ce:	d202      	bcs.n	80019d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019d0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <SystemInit+0x108>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <SystemInit+0x10c>)
 80019d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	52002000 	.word	0x52002000
 80019f0:	58024400 	.word	0x58024400
 80019f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019f8:	02020200 	.word	0x02020200
 80019fc:	01ff0000 	.word	0x01ff0000
 8001a00:	01010280 	.word	0x01010280
 8001a04:	5c001000 	.word	0x5c001000
 8001a08:	ffff0000 	.word	0xffff0000
 8001a0c:	51008108 	.word	0x51008108
 8001a10:	52004000 	.word	0x52004000

08001a14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b09a      	sub	sp, #104	@ 0x68
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	615a      	str	r2, [r3, #20]
 8001a46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	222c      	movs	r2, #44	@ 0x2c
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f011 f947 	bl	8012ce2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a54:	4b51      	ldr	r3, [pc, #324]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a56:	4a52      	ldr	r2, [pc, #328]	@ (8001ba0 <MX_TIM1_Init+0x18c>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a5a:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a60:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a62:	2220      	movs	r2, #32
 8001a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a68:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a74:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a80:	4846      	ldr	r0, [pc, #280]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a82:	f006 faf6 	bl	8008072 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a8c:	f7ff fc74 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a94:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	483f      	ldr	r0, [pc, #252]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001a9e:	f006 ff43 	bl	8008928 <HAL_TIM_ConfigClockSource>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001aa8:	f7ff fc66 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aac:	483b      	ldr	r0, [pc, #236]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001aae:	f006 fbaf 	bl	8008210 <HAL_TIM_PWM_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ab8:	f7ff fc5e 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4833      	ldr	r0, [pc, #204]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001ad0:	f007 fd4c 	bl	800956c <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ada:	f7ff fc4d 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ade:	2360      	movs	r3, #96	@ 0x60
 8001ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 8001ae2:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001af0:	2304      	movs	r3, #4
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4825      	ldr	r0, [pc, #148]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001b06:	f006 fdfb 	bl	8008700 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b10:	f7ff fc32 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481f      	ldr	r0, [pc, #124]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001b1e:	f006 fdef 	bl	8008700 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001b28:	f7ff fc26 	bl	8001378 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b34:	2208      	movs	r2, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	4818      	ldr	r0, [pc, #96]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001b3a:	f006 fde1 	bl	8008700 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001b44:	f7ff fc18 	bl	8001378 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001b7e:	f007 fd83 	bl	8009688 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001b88:	f7ff fbf6 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <MX_TIM1_Init+0x188>)
 8001b8e:	f000 f8b9 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001b92:	bf00      	nop
 8001b94:	3768      	adds	r7, #104	@ 0x68
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000510 	.word	0x24000510
 8001ba0:	40010000 	.word	0x40010000

08001ba4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	@ 0x38
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001bd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001bec:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bfe:	4824      	ldr	r0, [pc, #144]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c00:	f006 fa37 	bl	8008072 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c0a:	f7ff fbb5 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481d      	ldr	r0, [pc, #116]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c1c:	f006 fe84 	bl	8008928 <HAL_TIM_ConfigClockSource>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c26:	f7ff fba7 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c2a:	4819      	ldr	r0, [pc, #100]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c2c:	f006 faf0 	bl	8008210 <HAL_TIM_PWM_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c36:	f7ff fb9f 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c4a:	f007 fc8f 	bl	800956c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c54:	f7ff fb90 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c58:	2360      	movs	r3, #96	@ 0x60
 8001c5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001c5c:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c72:	f006 fd45 	bl	8008700 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c7c:	f7ff fb7c 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <MX_TIM2_Init+0xec>)
 8001c82:	f000 f83f 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3738      	adds	r7, #56	@ 0x38
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2400055c 	.word	0x2400055c

08001c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_TIM_Base_MspInit+0x68>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10f      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cc4:	e013      	b.n	8001cee <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cce:	d10e      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	58024400 	.word	0x58024400

08001d04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a25      	ldr	r2, [pc, #148]	@ (8001db8 <HAL_TIM_MspPostInit+0xb4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d120      	bne.n	8001d68 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b25      	ldr	r3, [pc, #148]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2c:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001d44:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4817      	ldr	r0, [pc, #92]	@ (8001dc0 <HAL_TIM_MspPostInit+0xbc>)
 8001d62:	f000 fc8f 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d66:	e023      	b.n	8001db0 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d70:	d11e      	bne.n	8001db0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d78:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_TIM_MspPostInit+0xb8>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <HAL_TIM_MspPostInit+0xc0>)
 8001dac:	f000 fc6a 	bl	8002684 <HAL_GPIO_Init>
}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	@ 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	58020400 	.word	0x58020400
 8001dc4:	58020000 	.word	0x58020000

08001dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dcc:	f7ff fd9a 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dd2:	490d      	ldr	r1, [pc, #52]	@ (8001e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f010 ffdd 	bl	8012db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfa:	f7ff f90d 	bl	8001018 <main>
  bx  lr
 8001dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e08:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001e0c:	080177b0 	.word	0x080177b0
  ldr r2, =_sbss
 8001e10:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001e14:	24009644 	.word	0x24009644

08001e18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC3_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f000 f933 	bl	800208e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e28:	f003 fd46 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_Init+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <HAL_Init+0x6c>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_Init+0x68>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <HAL_Init+0x6c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_Init+0x70>)
 8001e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_Init+0x74>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e66:	2005      	movs	r0, #5
 8001e68:	f7ff fbda 	bl	8001620 <HAL_InitTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e002      	b.n	8001e7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e76:	f7ff fbb5 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024400 	.word	0x58024400
 8001e88:	08015408 	.word	0x08015408
 8001e8c:	24000004 	.word	0x24000004
 8001e90:	24000000 	.word	0x24000000

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	2400000c 	.word	0x2400000c
 8001eb8:	240005a8 	.word	0x240005a8

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	240005a8 	.word	0x240005a8

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2400000c 	.word	0x2400000c

08001f1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <HAL_GetREVID+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0c1b      	lsrs	r3, r3, #16
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	5c001000 	.word	0x5c001000

08001f34 <__NVIC_SetPriorityGrouping>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <__NVIC_SetPriorityGrouping+0x40>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	05fa0000 	.word	0x05fa0000

08001f7c <__NVIC_GetPriorityGrouping>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	@ (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	@ (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	@ (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff4c 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b2:	f7ff ff63 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 80020b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f7ff ffb3 	bl	8002028 <NVIC_EncodePriority>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff82 	bl	8001fd4 <__NVIC_SetPriority>
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff56 	bl	8001f98 <__NVIC_EnableIRQ>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020f8:	f3bf 8f5f 	dmb	sy
}
 80020fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <HAL_MPU_Disable+0x28>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	4a06      	ldr	r2, [pc, #24]	@ (800211c <HAL_MPU_Disable+0x28>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002108:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_MPU_Disable+0x2c>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	e000ed90 	.word	0xe000ed90

08002124 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_MPU_Enable+0x38>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_MPU_Enable+0x3c>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_MPU_Enable+0x3c>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002142:	f3bf 8f4f 	dsb	sy
}
 8002146:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002148:	f3bf 8f6f 	isb	sy
}
 800214c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed90 	.word	0xe000ed90
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	785a      	ldrb	r2, [r3, #1]
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002172:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_MPU_ConfigRegion+0x7c>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002180:	4a17      	ldr	r2, [pc, #92]	@ (80021e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7adb      	ldrb	r3, [r3, #11]
 8002192:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7a9b      	ldrb	r3, [r3, #10]
 800219a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800219c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7b5b      	ldrb	r3, [r3, #13]
 80021a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7b9b      	ldrb	r3, [r3, #14]
 80021aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7bdb      	ldrb	r3, [r3, #15]
 80021b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7a5b      	ldrb	r3, [r3, #9]
 80021ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a1b      	ldrb	r3, [r3, #8]
 80021c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021d0:	6113      	str	r3, [r2, #16]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed90 	.word	0xe000ed90

080021e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e014      	b.n	8002220 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fa02 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e046      	b.n	80022ca <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	795b      	ldrb	r3, [r3, #5]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_DAC_Start+0x20>
 8002244:	2302      	movs	r3, #2
 8002246:	e040      	b.n	80022ca <HAL_DAC_Start+0xa2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2201      	movs	r2, #1
 8002262:	409a      	lsls	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800227c:	2b02      	cmp	r3, #2
 800227e:	d11d      	bne.n	80022bc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e014      	b.n	80022bc <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2102      	movs	r1, #2
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0202 	orr.w	r2, r2, #2
 80022ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ec:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01d      	beq.n	8002334 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800232c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f851 	bl	80023d6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01d      	beq.n	800237a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2204      	movs	r2, #4
 800234c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002372:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f97b 	bl	8002670 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e015      	b.n	80023ca <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	3308      	adds	r3, #8
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	e004      	b.n	80023c0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3314      	adds	r3, #20
 80023be:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	461a      	mov	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_DAC_ConfigChannel+0x1e>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e12a      	b.n	8002664 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	795b      	ldrb	r3, [r3, #5]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_DAC_ConfigChannel+0x2e>
 8002416:	2302      	movs	r3, #2
 8002418:	e124      	b.n	8002664 <HAL_DAC_ConfigChannel+0x278>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2202      	movs	r2, #2
 8002424:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b04      	cmp	r3, #4
 800242c:	d17a      	bne.n	8002524 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800242e:	f7ff fd45 	bl	8001ebc <HAL_GetTick>
 8002432:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d13d      	bne.n	80024b6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800243a:	e018      	b.n	800246e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800243c:	f7ff fd3e 	bl	8001ebc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d911      	bls.n	800246e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002450:	4b86      	ldr	r3, [pc, #536]	@ (800266c <HAL_DAC_ConfigChannel+0x280>)
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f043 0208 	orr.w	r2, r3, #8
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2203      	movs	r2, #3
 8002468:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e0fa      	b.n	8002664 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002474:	4b7d      	ldr	r3, [pc, #500]	@ (800266c <HAL_DAC_ConfigChannel+0x280>)
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1df      	bne.n	800243c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	6992      	ldr	r2, [r2, #24]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
 8002486:	e020      	b.n	80024ca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002488:	f7ff fd18 	bl	8001ebc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d90f      	bls.n	80024b6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	da0a      	bge.n	80024b6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f043 0208 	orr.w	r2, r3, #8
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2203      	movs	r2, #3
 80024b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0d6      	b.n	8002664 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	2b00      	cmp	r3, #0
 80024be:	dbe3      	blt.n	8002488 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	6992      	ldr	r2, [r2, #24]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	ea02 0103 	and.w	r1, r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	21ff      	movs	r1, #255	@ 0xff
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	ea02 0103 	and.w	r1, r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d11d      	bne.n	8002568 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2207      	movs	r2, #7
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002590:	e00f      	b.n	80025b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d102      	bne.n	80025a0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
 800259e:	e008      	b.n	80025b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	e001      	b.n	80025b2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	22c0      	movs	r2, #192	@ 0xc0
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	400a      	ands	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002664:	4618      	mov	r0, r3
 8002666:	3728      	adds	r7, #40	@ 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20008000 	.word	0x20008000

08002670 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002692:	4b89      	ldr	r3, [pc, #548]	@ (80028b8 <HAL_GPIO_Init+0x234>)
 8002694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002696:	e194      	b.n	80029c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8186 	beq.w	80029bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d005      	beq.n	80026c8 <HAL_GPIO_Init+0x44>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0201 	and.w	r2, r3, #1
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b03      	cmp	r3, #3
 8002734:	d017      	beq.n	8002766 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d123      	bne.n	80027ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	69b9      	ldr	r1, [r7, #24]
 80027b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0203 	and.w	r2, r3, #3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80e0 	beq.w	80029bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fc:	4b2f      	ldr	r3, [pc, #188]	@ (80028bc <HAL_GPIO_Init+0x238>)
 80027fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002802:	4a2e      	ldr	r2, [pc, #184]	@ (80028bc <HAL_GPIO_Init+0x238>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800280c:	4b2b      	ldr	r3, [pc, #172]	@ (80028bc <HAL_GPIO_Init+0x238>)
 800280e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281a:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_GPIO_Init+0x23c>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a20      	ldr	r2, [pc, #128]	@ (80028c4 <HAL_GPIO_Init+0x240>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d052      	beq.n	80028ec <HAL_GPIO_Init+0x268>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <HAL_GPIO_Init+0x244>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_GPIO_Init+0x22e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <HAL_GPIO_Init+0x248>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02b      	beq.n	80028ae <HAL_GPIO_Init+0x22a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1d      	ldr	r2, [pc, #116]	@ (80028d0 <HAL_GPIO_Init+0x24c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x226>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_GPIO_Init+0x250>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x222>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_GPIO_Init+0x254>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x21e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <HAL_GPIO_Init+0x258>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x21a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a19      	ldr	r2, [pc, #100]	@ (80028e0 <HAL_GPIO_Init+0x25c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x216>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a18      	ldr	r2, [pc, #96]	@ (80028e4 <HAL_GPIO_Init+0x260>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a17      	ldr	r2, [pc, #92]	@ (80028e8 <HAL_GPIO_Init+0x264>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x20e>
 800288e:	2309      	movs	r3, #9
 8002890:	e02d      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 8002892:	230a      	movs	r3, #10
 8002894:	e02b      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 8002896:	2308      	movs	r3, #8
 8002898:	e029      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 800289a:	2307      	movs	r3, #7
 800289c:	e027      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 800289e:	2306      	movs	r3, #6
 80028a0:	e025      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e023      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e021      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e01f      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e01d      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e01b      	b.n	80028ee <HAL_GPIO_Init+0x26a>
 80028b6:	bf00      	nop
 80028b8:	58000080 	.word	0x58000080
 80028bc:	58024400 	.word	0x58024400
 80028c0:	58000400 	.word	0x58000400
 80028c4:	58020000 	.word	0x58020000
 80028c8:	58020400 	.word	0x58020400
 80028cc:	58020800 	.word	0x58020800
 80028d0:	58020c00 	.word	0x58020c00
 80028d4:	58021000 	.word	0x58021000
 80028d8:	58021400 	.word	0x58021400
 80028dc:	58021800 	.word	0x58021800
 80028e0:	58021c00 	.word	0x58021c00
 80028e4:	58022000 	.word	0x58022000
 80028e8:	58022400 	.word	0x58022400
 80028ec:	2300      	movs	r3, #0
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f002 0203 	and.w	r2, r2, #3
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	4093      	lsls	r3, r2
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028fe:	4938      	ldr	r1, [pc, #224]	@ (80029e0 <HAL_GPIO_Init+0x35c>)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	3301      	adds	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae63 	bne.w	8002698 <HAL_GPIO_Init+0x14>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	@ 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	58000400 	.word	0x58000400

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a28:	887a      	ldrh	r2, [r7, #2]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	400b      	ands	r3, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00f f83b 	bl	8011aec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08b      	b.n	8002baa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fa4e 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	@ 0x24
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	e006      	b.n	8002b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d108      	bne.n	8002b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	e007      	b.n	8002b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <HAL_I2C_Init+0x134>)
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	02008000 	.word	0x02008000

08002bb8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	f040 80f9 	bne.w	8002dd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_I2C_Mem_Write+0x34>
 8002be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0ed      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Mem_Write+0x4e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0e6      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c0e:	f7ff f955 	bl	8001ebc <HAL_GetTick>
 8002c12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fac3 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0d1      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2221      	movs	r2, #33	@ 0x21
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2240      	movs	r2, #64	@ 0x40
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c58:	88f8      	ldrh	r0, [r7, #6]
 8002c5a:	893a      	ldrh	r2, [r7, #8]
 8002c5c:	8979      	ldrh	r1, [r7, #10]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4603      	mov	r3, r0
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f9d3 	bl	8003014 <I2C_RequestMemoryWrite>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0a9      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2bff      	cmp	r3, #255	@ 0xff
 8002c88:	d90e      	bls.n	8002ca8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	22ff      	movs	r2, #255	@ 0xff
 8002c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	8979      	ldrh	r1, [r7, #10]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fc47 	bl	8003534 <I2C_TransferConfig>
 8002ca6:	e00f      	b.n	8002cc8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fc36 	bl	8003534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fac6 	bl	800325e <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e07b      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d034      	beq.n	8002d80 <HAL_I2C_Mem_Write+0x1c8>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d130      	bne.n	8002d80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	@ 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fa3f 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e04d      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2bff      	cmp	r3, #255	@ 0xff
 8002d40:	d90e      	bls.n	8002d60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	@ 0xff
 8002d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fbeb 	bl	8003534 <I2C_TransferConfig>
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fbda 	bl	8003534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d19e      	bne.n	8002cc8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 faac 	bl	80032ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01a      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2220      	movs	r2, #32
 8002da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_I2C_Mem_Write+0x224>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fe00e800 	.word	0xfe00e800

08002de0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	461a      	mov	r2, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	817b      	strh	r3, [r7, #10]
 8002df2:	460b      	mov	r3, r1
 8002df4:	813b      	strh	r3, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	f040 80fd 	bne.w	8003002 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x34>
 8002e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0f1      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Mem_Read+0x4e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0ea      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e36:	f7ff f841 	bl	8001ebc <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2319      	movs	r3, #25
 8002e42:	2201      	movs	r2, #1
 8002e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f9af 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0d5      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2222      	movs	r2, #34	@ 0x22
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e80:	88f8      	ldrh	r0, [r7, #6]
 8002e82:	893a      	ldrh	r2, [r7, #8]
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	4603      	mov	r3, r0
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f913 	bl	80030bc <I2C_RequestMemoryRead>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0ad      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2bff      	cmp	r3, #255	@ 0xff
 8002eb0:	d90e      	bls.n	8002ed0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	22ff      	movs	r2, #255	@ 0xff
 8002eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	8979      	ldrh	r1, [r7, #10]
 8002ec0:	4b52      	ldr	r3, [pc, #328]	@ (800300c <HAL_I2C_Mem_Read+0x22c>)
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fb33 	bl	8003534 <I2C_TransferConfig>
 8002ece:	e00f      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	8979      	ldrh	r1, [r7, #10]
 8002ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <HAL_I2C_Mem_Read+0x22c>)
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fb22 	bl	8003534 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2104      	movs	r1, #4
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f956 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07c      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d034      	beq.n	8002fb0 <HAL_I2C_Mem_Read+0x1d0>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d130      	bne.n	8002fb0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f927 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e04d      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2bff      	cmp	r3, #255	@ 0xff
 8002f70:	d90e      	bls.n	8002f90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	22ff      	movs	r2, #255	@ 0xff
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fad3 	bl	8003534 <I2C_TransferConfig>
 8002f8e:	e00f      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fac2 	bl	8003534 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d19a      	bne.n	8002ef0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f994 	bl	80032ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e01a      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_I2C_Mem_Read+0x230>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	80002400 	.word	0x80002400
 8003010:	fe00e800 	.word	0xfe00e800

08003014 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	460b      	mov	r3, r1
 8003028:	813b      	strh	r3, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <I2C_RequestMemoryWrite+0xa4>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fa79 	bl	8003534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f909 	bl	800325e <I2C_WaitOnTXISFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e02c      	b.n	80030b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800305c:	893b      	ldrh	r3, [r7, #8]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
 8003066:	e015      	b.n	8003094 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b29b      	uxth	r3, r3
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	69b9      	ldr	r1, [r7, #24]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8ef 	bl	800325e <I2C_WaitOnTXISFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e012      	b.n	80030b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2200      	movs	r2, #0
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f884 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	80002000 	.word	0x80002000

080030bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <I2C_RequestMemoryRead+0xa4>)
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa26 	bl	8003534 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f8b6 	bl	800325e <I2C_WaitOnTXISFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e02c      	b.n	8003156 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003102:	893b      	ldrh	r3, [r7, #8]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
 800310c:	e015      	b.n	800313a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	b29b      	uxth	r3, r3
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f89c 	bl	800325e <I2C_WaitOnTXISFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e012      	b.n	8003156 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2200      	movs	r2, #0
 8003142:	2140      	movs	r1, #64	@ 0x40
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f831 	bl	80031ac <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	80002000 	.word	0x80002000

08003164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d103      	bne.n	8003182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d007      	beq.n	80031a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	619a      	str	r2, [r3, #24]
  }
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	e03b      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	6839      	ldr	r1, [r7, #0]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8d6 	bl	8003374 <I2C_IsErrorOccurred>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e041      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d02d      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7fe fe6f 	bl	8001ebc <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d122      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d113      	bne.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4013      	ands	r3, r2
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	429a      	cmp	r2, r3
 8003252:	d0b4      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800326a:	e033      	b.n	80032d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f87f 	bl	8003374 <I2C_IsErrorOccurred>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e031      	b.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d025      	beq.n	80032d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fe18 	bl	8001ebc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11a      	bne.n	80032d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d013      	beq.n	80032d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d1c4      	bne.n	800326c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032f8:	e02f      	b.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f838 	bl	8003374 <I2C_IsErrorOccurred>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e02d      	b.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe fdd5 	bl	8001ebc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b20      	cmp	r3, #32
 8003330:	d013      	beq.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0220 	orr.w	r2, r3, #32
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e007      	b.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d1c8      	bne.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d068      	beq.n	8003472 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2210      	movs	r2, #16
 80033a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033a8:	e049      	b.n	800343e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d045      	beq.n	800343e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fe fd83 	bl	8001ebc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_IsErrorOccurred+0x54>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d13a      	bne.n	800343e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ea:	d121      	bne.n	8003430 <I2C_IsErrorOccurred+0xbc>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033f2:	d01d      	beq.n	8003430 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d01a      	beq.n	8003430 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003408:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800340a:	f7fe fd57 	bl	8001ebc <HAL_GetTick>
 800340e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003410:	e00e      	b.n	8003430 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003412:	f7fe fd53 	bl	8001ebc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b19      	cmp	r3, #25
 800341e:	d907      	bls.n	8003430 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f043 0320 	orr.w	r3, r3, #32
 8003426:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800342e:	e006      	b.n	800343e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d1e9      	bne.n	8003412 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d003      	beq.n	8003454 <I2C_IsErrorOccurred+0xe0>
 800344c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0aa      	beq.n	80033aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2220      	movs	r2, #32
 8003462:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f043 0308 	orr.w	r3, r3, #8
 80034ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80034e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff fe3b 	bl	8003164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <I2C_IsErrorOccurred+0x1bc>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003526:	4618      	mov	r0, r3
 8003528:	3728      	adds	r7, #40	@ 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	fe00e800 	.word	0xfe00e800

08003534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	4613      	mov	r3, r2
 8003544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800354c:	7a7b      	ldrb	r3, [r7, #9]
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003554:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4313      	orrs	r3, r2
 800355e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003562:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	0d5b      	lsrs	r3, r3, #21
 800356e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <I2C_TransferConfig+0x60>)
 8003574:	430b      	orrs	r3, r1
 8003576:	43db      	mvns	r3, r3
 8003578:	ea02 0103 	and.w	r1, r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	03ff63ff 	.word	0x03ff63ff

08003598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d138      	bne.n	8003620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e032      	b.n	8003622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	@ 0x24
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6819      	ldr	r1, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b20      	cmp	r3, #32
 8003642:	d139      	bne.n	80036b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800364e:	2302      	movs	r3, #2
 8003650:	e033      	b.n	80036ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2224      	movs	r2, #36	@ 0x24
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0fe      	b.n	80038d6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f00c fbb5 	bl	800fe5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2203      	movs	r2, #3
 80036f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f006 f9a9 	bl	8009a56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7c1a      	ldrb	r2, [r3, #16]
 800370c:	f88d 2000 	strb.w	r2, [sp]
 8003710:	3304      	adds	r3, #4
 8003712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003714:	f006 f87a 	bl	800980c <USB_CoreInit>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0d5      	b.n	80038d6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f006 f9a1 	bl	8009a78 <USB_SetCurrentMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0c6      	b.n	80038d6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e04a      	b.n	80037e4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3315      	adds	r3, #21
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3314      	adds	r3, #20
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	b298      	uxth	r0, r3
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	332e      	adds	r3, #46	@ 0x2e
 800378a:	4602      	mov	r2, r0
 800378c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3318      	adds	r3, #24
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	331c      	adds	r3, #28
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3320      	adds	r3, #32
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3324      	adds	r3, #36	@ 0x24
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	3301      	adds	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	791b      	ldrb	r3, [r3, #4]
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3af      	bcc.n	800374e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	e044      	b.n	800387e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3301      	adds	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	791b      	ldrb	r3, [r3, #4]
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3b5      	bcc.n	80037f4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7c1a      	ldrb	r2, [r3, #16]
 8003890:	f88d 2000 	strb.w	r2, [sp]
 8003894:	3304      	adds	r3, #4
 8003896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003898:	f006 f93a 	bl	8009b10 <USB_DevInit>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e013      	b.n	80038d6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7b1b      	ldrb	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f001 f96d 	bl	8004ba4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f007 f979 	bl	800abc6 <USB_DevDisconnect>

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_Start+0x1c>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e022      	b.n	8003940 <HAL_PCD_Start+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003912:	2b01      	cmp	r3, #1
 8003914:	d105      	bne.n	8003922 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f006 f884 	bl	8009a34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f007 f927 	bl	800ab84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b08d      	sub	sp, #52	@ 0x34
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f007 f9e5 	bl	800ad2e <USB_GetMode>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 84b9 	bne.w	80042de <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f007 f949 	bl	800ac08 <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 84af 	beq.w	80042dc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f007 f936 	bl	800ac08 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d107      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 0202 	and.w	r2, r2, #2
 80039b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f007 f924 	bl	800ac08 <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d161      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0210 	bic.w	r2, r2, #16
 80039d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	0c5b      	lsrs	r3, r3, #17
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d124      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d035      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6a38      	ldr	r0, [r7, #32]
 8003a26:	f006 ff5b 	bl	800a8e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a36:	441a      	add	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a48:	441a      	add	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	615a      	str	r2, [r3, #20]
 8003a4e:	e016      	b.n	8003a7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	0c5b      	lsrs	r3, r3, #17
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d110      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a62:	2208      	movs	r2, #8
 8003a64:	4619      	mov	r1, r3
 8003a66:	6a38      	ldr	r0, [r7, #32]
 8003a68:	f006 ff3a 	bl	800a8e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a78:	441a      	add	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0210 	orr.w	r2, r2, #16
 8003a8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 f8b8 	bl	800ac08 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003aa2:	f040 80a7 	bne.w	8003bf4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f007 f8bd 	bl	800ac2e <USB_ReadDevAllOutEpInterrupt>
 8003ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003ab6:	e099      	b.n	8003bec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808e 	beq.w	8003be0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f007 f8e1 	bl	800ac96 <USB_ReadDevOutEPInterrupt>
 8003ad4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	2301      	movs	r3, #1
 8003af0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003af2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fecf 	bl	8004898 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	2308      	movs	r3, #8
 8003b14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 ffa5 	bl	8004a68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2310      	movs	r3, #16
 8003b38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d030      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4c:	2b80      	cmp	r3, #128	@ 0x80
 8003b4e:	d109      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	78db      	ldrb	r3, [r3, #3]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d108      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2200      	movs	r2, #0
 8003b86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f00c fa8a 	bl	80100a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bde:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	3301      	adds	r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f47f af62 	bne.w	8003ab8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f007 f805 	bl	800ac08 <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c08:	f040 80db 	bne.w	8003dc2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f007 f826 	bl	800ac62 <USB_ReadDevAllInEpInterrupt>
 8003c16:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c1c:	e0cd      	b.n	8003dba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80c2 	beq.w	8003dae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f007 f84c 	bl	800acd2 <USB_ReadDevInEPInterrupt>
 8003c3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d057      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69f9      	ldr	r1, [r7, #28]
 8003c62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c66:	4013      	ands	r3, r2
 8003c68:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	799b      	ldrb	r3, [r3, #6]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d132      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3320      	adds	r3, #32
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4403      	add	r3, r0
 8003ca4:	331c      	adds	r3, #28
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4419      	add	r1, r3
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4403      	add	r3, r0
 8003cb8:	3320      	adds	r3, #32
 8003cba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3324      	adds	r3, #36	@ 0x24
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	f007 f855 	bl	800ad94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f00c f954 	bl	800ff9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2308      	movs	r3, #8
 8003d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2340      	movs	r3, #64	@ 0x40
 8003d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d56:	6a38      	ldr	r0, [r7, #32]
 8003d58:	f006 f838 	bl	8009dcc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	3310      	adds	r3, #16
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	78db      	ldrb	r3, [r3, #3]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d108      	bne.n	8003d8a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00c f9a1 	bl	80100cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d96:	461a      	mov	r2, r3
 8003d98:	2302      	movs	r3, #2
 8003d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fce8 	bl	800477e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	3301      	adds	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f af2e 	bne.w	8003c1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f006 ff1e 	bl	800ac08 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd6:	d122      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fef3 	bl	8004bec <HAL_PCDEx_LPM_Callback>
 8003e06:	e002      	b.n	8003e0e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f00c f93f 	bl	801008c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fef0 	bl	800ac08 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e32:	d112      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f00c f8fb 	bl	8010040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f006 fed2 	bl	800ac08 <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6e:	d121      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003e7e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d111      	bne.n	8003eae <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fea0 	bl	8004bec <HAL_PCDEx_LPM_Callback>
 8003eac:	e002      	b.n	8003eb4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f00c f8c6 	bl	8010040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f006 fea5 	bl	800ac08 <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	f040 80b7 	bne.w	800403a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2110      	movs	r1, #16
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f005 ff70 	bl	8009dcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef0:	e046      	b.n	8003f80 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efe:	461a      	mov	r2, r3
 8003f00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f04:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f32:	461a      	mov	r2, r3
 8003f34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d3b2      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f9a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7bdb      	ldrb	r3, [r3, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d016      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb8:	f043 030b 	orr.w	r3, r3, #11
 8003fbc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fce:	f043 030b 	orr.w	r3, r3, #11
 8003fd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fd4:	e015      	b.n	8004002 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003fea:	4313      	orrs	r3, r2
 8003fec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ffc:	f043 030b 	orr.w	r3, r3, #11
 8004000:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004010:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004014:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004024:	461a      	mov	r2, r3
 8004026:	f006 feb5 	bl	800ad94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f006 fde2 	bl	800ac08 <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404e:	d123      	bne.n	8004098 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f006 fe79 	bl	800ad4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f005 ff2d 	bl	8009ebe <USB_GetDevSpeed>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681c      	ldr	r4, [r3, #0]
 8004070:	f001 fd9c 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8004074:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	4620      	mov	r0, r4
 800407e:	f005 fc37 	bl	80098f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f00b ffb3 	bl	800ffee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004096:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f006 fdb3 	bl	800ac08 <USB_ReadInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10a      	bne.n	80040c2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00b ff90 	bl	800ffd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f002 0208 	and.w	r2, r2, #8
 80040c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f006 fd9e 	bl	800ac08 <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d2:	2b80      	cmp	r3, #128	@ 0x80
 80040d4:	d123      	bne.n	800411e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040e2:	2301      	movs	r3, #1
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e6:	e014      	b.n	8004112 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fb08 	bl	800471c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	3301      	adds	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	791b      	ldrb	r3, [r3, #4]
 8004116:	461a      	mov	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	4293      	cmp	r3, r2
 800411c:	d3e4      	bcc.n	80040e8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f006 fd70 	bl	800ac08 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004132:	d13c      	bne.n	80041ae <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004134:	2301      	movs	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
 8004138:	e02b      	b.n	8004192 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3318      	adds	r3, #24
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d115      	bne.n	800418c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004160:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	da12      	bge.n	800418c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3317      	adds	r3, #23
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004182:	b2db      	uxtb	r3, r3
 8004184:	4619      	mov	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fac8 	bl	800471c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	3301      	adds	r3, #1
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	791b      	ldrb	r3, [r3, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	4293      	cmp	r3, r2
 800419c:	d3cd      	bcc.n	800413a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f006 fd28 	bl	800ac08 <USB_ReadInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041c2:	d156      	bne.n	8004272 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c4:	2301      	movs	r3, #1
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c8:	e045      	b.n	8004256 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d12e      	bne.n	8004250 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da2b      	bge.n	8004250 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004204:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004208:	429a      	cmp	r2, r3
 800420a:	d121      	bne.n	8004250 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800424c:	6053      	str	r3, [r2, #4]
            break;
 800424e:	e008      	b.n	8004262 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	3301      	adds	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	791b      	ldrb	r3, [r3, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	4293      	cmp	r3, r2
 8004260:	d3b3      	bcc.n	80041ca <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f006 fcc6 	bl	800ac08 <USB_ReadInterrupts>
 800427c:	4603      	mov	r3, r0
 800427e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d10a      	bne.n	800429e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f00b ff31 	bl	80100f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f006 fcb0 	bl	800ac08 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d115      	bne.n	80042de <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f00b ff21 	bl	801010c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e000      	b.n	80042de <HAL_PCD_IRQHandler+0x996>
      return;
 80042dc:	bf00      	nop
    }
  }
}
 80042de:	3734      	adds	r7, #52	@ 0x34
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}

080042e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_PCD_SetAddress+0x1a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e012      	b.n	8004324 <HAL_PCD_SetAddress+0x40>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f006 fc0f 	bl	800ab38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	70fb      	strb	r3, [r7, #3]
 800433e:	460b      	mov	r3, r1
 8004340:	803b      	strh	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434e:	2b00      	cmp	r3, #0
 8004350:	da0f      	bge.n	8004372 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3310      	adds	r3, #16
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	705a      	strb	r2, [r3, #1]
 8004370:	e00f      	b.n	8004392 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800439e:	883a      	ldrh	r2, [r7, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	78ba      	ldrb	r2, [r7, #2]
 80043a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043bc:	78bb      	ldrb	r3, [r7, #2]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d102      	bne.n	80043c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_PCD_EP_Open+0xaa>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e00e      	b.n	80043f4 <HAL_PCD_EP_Open+0xc8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f005 fd8f 	bl	8009f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da0f      	bge.n	8004430 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3310      	adds	r3, #16
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	705a      	strb	r2, [r3, #1]
 800442e:	e00f      	b.n	8004450 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	3304      	adds	r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_PCD_EP_Close+0x6e>
 8004466:	2302      	movs	r3, #2
 8004468:	e00e      	b.n	8004488 <HAL_PCD_EP_Close+0x8c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f005 fdcd 	bl	800a018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	460b      	mov	r3, r1
 800449e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	799b      	ldrb	r3, [r3, #6]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	799b      	ldrb	r3, [r3, #6]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6979      	ldr	r1, [r7, #20]
 80044f8:	f005 fe6a 	bl	800a1d0 <USB_EPStartXfer>

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004512:	78fb      	ldrb	r3, [r7, #3]
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004528:	681b      	ldr	r3, [r3, #0]
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	460b      	mov	r3, r1
 8004544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	3310      	adds	r3, #16
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2201      	movs	r2, #1
 8004574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	b2da      	uxtb	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	799b      	ldrb	r3, [r3, #6]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d102      	bne.n	8004590 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	799b      	ldrb	r3, [r3, #6]
 8004598:	461a      	mov	r2, r3
 800459a:	6979      	ldr	r1, [r7, #20]
 800459c:	f005 fe18 	bl	800a1d0 <USB_EPStartXfer>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	7912      	ldrb	r2, [r2, #4]
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04f      	b.n	8004668 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da0f      	bge.n	80045f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3310      	adds	r3, #16
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	3304      	adds	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	705a      	strb	r2, [r3, #1]
 80045ee:	e00d      	b.n	800460c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	3304      	adds	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_PCD_EP_SetStall+0x82>
 8004628:	2302      	movs	r3, #2
 800462a:	e01d      	b.n	8004668 <HAL_PCD_EP_SetStall+0xbe>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	4618      	mov	r0, r3
 800463c:	f006 f9a8 	bl	800a990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7999      	ldrb	r1, [r3, #6]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004658:	461a      	mov	r2, r3
 800465a:	f006 fb9b 	bl	800ad94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	7912      	ldrb	r2, [r2, #4]
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e042      	b.n	8004714 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800468e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004692:	2b00      	cmp	r3, #0
 8004694:	da0f      	bge.n	80046b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	3310      	adds	r3, #16
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	705a      	strb	r2, [r3, #1]
 80046b4:	e00f      	b.n	80046d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	3304      	adds	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_EP_ClrStall+0x86>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e00e      	b.n	8004714 <HAL_PCD_EP_ClrStall+0xa4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f006 f9b1 	bl	800aa6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da0c      	bge.n	800474a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	3310      	adds	r3, #16
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	3304      	adds	r3, #4
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68f9      	ldr	r1, [r7, #12]
 800476a:	4618      	mov	r0, r3
 800476c:	f005 ffd0 	bl	800a710 <USB_EPStopXfer>
 8004770:	4603      	mov	r3, r0
 8004772:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004774:	7afb      	ldrb	r3, [r7, #11]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b08a      	sub	sp, #40	@ 0x28
 8004782:	af02      	add	r7, sp, #8
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3310      	adds	r3, #16
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	3304      	adds	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d901      	bls.n	80047b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e06b      	b.n	800488e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3303      	adds	r3, #3
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047da:	e02a      	b.n	8004832 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d902      	bls.n	80047f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3303      	adds	r3, #3
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68d9      	ldr	r1, [r3, #12]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4603      	mov	r3, r0
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f006 f825 	bl	800a864 <USB_WritePacket>

    ep->xfer_buff  += len;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	429a      	cmp	r2, r3
 8004846:	d809      	bhi.n	800485c <PCD_WriteEmptyTxFifo+0xde>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004850:	429a      	cmp	r2, r3
 8004852:	d203      	bcs.n	800485c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1bf      	bne.n	80047dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	429a      	cmp	r2, r3
 8004866:	d811      	bhi.n	800488c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	2201      	movs	r2, #1
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	43db      	mvns	r3, r3
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004888:	4013      	ands	r3, r2
 800488a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	333c      	adds	r3, #60	@ 0x3c
 80048b0:	3304      	adds	r3, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	799b      	ldrb	r3, [r3, #6]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d17b      	bne.n	80049c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4a61      	ldr	r2, [pc, #388]	@ (8004a60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	f240 80b9 	bls.w	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80b3 	beq.w	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fa:	461a      	mov	r2, r3
 80048fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	e0a7      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2320      	movs	r3, #32
 800491e:	6093      	str	r3, [r2, #8]
 8004920:	e098      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 8093 	bne.w	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4a4b      	ldr	r2, [pc, #300]	@ (8004a60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d90f      	bls.n	8004956 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494c:	461a      	mov	r2, r3
 800494e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004952:	6093      	str	r3, [r2, #8]
 8004954:	e07e      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	0159      	lsls	r1, r3, #5
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	440b      	add	r3, r1
 8004978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d114      	bne.n	80049b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049a0:	461a      	mov	r2, r3
 80049a2:	2101      	movs	r1, #1
 80049a4:	f006 f9f6 	bl	800ad94 <USB_EP0_OutStart>
 80049a8:	e006      	b.n	80049b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f00b fad2 	bl	800ff68 <HAL_PCD_DataOutStageCallback>
 80049c4:	e046      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4a26      	ldr	r2, [pc, #152]	@ (8004a64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d124      	bne.n	8004a18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ea:	6093      	str	r3, [r2, #8]
 80049ec:	e032      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	2320      	movs	r3, #32
 8004a08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f00b faa9 	bl	800ff68 <HAL_PCD_DataOutStageCallback>
 8004a16:	e01d      	b.n	8004a54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d114      	bne.n	8004a48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a40:	461a      	mov	r2, r3
 8004a42:	2100      	movs	r1, #0
 8004a44:	f006 f9a6 	bl	800ad94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f00b fa8a 	bl	800ff68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	4f54300a 	.word	0x4f54300a
 8004a64:	4f54310a 	.word	0x4f54310a

08004a68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	333c      	adds	r3, #60	@ 0x3c
 8004a80:	3304      	adds	r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a15      	ldr	r2, [pc, #84]	@ (8004af0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d90e      	bls.n	8004abc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f00b fa41 	bl	800ff44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d90c      	bls.n	8004ae4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	799b      	ldrb	r3, [r3, #6]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d108      	bne.n	8004ae4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004adc:	461a      	mov	r2, r3
 8004ade:	2101      	movs	r1, #1
 8004ae0:	f006 f958 	bl	800ad94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	4f54300a 	.word	0x4f54300a

08004af4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
 8004b00:	4613      	mov	r3, r2
 8004b02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b12:	883b      	ldrh	r3, [r7, #0]
 8004b14:	0419      	lsls	r1, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b20:	e028      	b.n	8004b74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
 8004b34:	e00d      	b.n	8004b52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	3340      	adds	r3, #64	@ 0x40
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d3ec      	bcc.n	8004b36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b5c:	883b      	ldrh	r3, [r7, #0]
 8004b5e:	0418      	lsls	r0, r3, #16
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4302      	orrs	r2, r0
 8004b6c:	3340      	adds	r3, #64	@ 0x40
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	887a      	ldrh	r2, [r7, #2]
 8004b94:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	10000003 	.word	0x10000003

08004bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c0c:	4b19      	ldr	r3, [pc, #100]	@ (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d00a      	beq.n	8004c2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c18:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e01f      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e01d      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c2e:	4b11      	ldr	r3, [pc, #68]	@ (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 0207 	bic.w	r2, r3, #7
 8004c36:	490f      	ldr	r1, [pc, #60]	@ (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c3e:	f7fd f93d 	bl	8001ebc <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c44:	e009      	b.n	8004c5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c46:	f7fd f939 	bl	8001ebc <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c54:	d901      	bls.n	8004c5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c66:	d1ee      	bne.n	8004c46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58024800 	.word	0x58024800

08004c78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c86:	60d3      	str	r3, [r2, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	58024800 	.word	0x58024800

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	@ 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f000 bc48 	b.w	800553c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8088 	beq.w	8004dca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	4b99      	ldr	r3, [pc, #612]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc4:	4b96      	ldr	r3, [pc, #600]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x48>
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	2b18      	cmp	r3, #24
 8004cd4:	d111      	bne.n	8004cfa <HAL_RCC_OscConfig+0x62>
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d06d      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x130>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d169      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f000 bc21 	b.w	800553c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x7a>
 8004d04:	4b86      	ldr	r3, [pc, #536]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a85      	ldr	r2, [pc, #532]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e02e      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x9c>
 8004d1a:	4b81      	ldr	r3, [pc, #516]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a80      	ldr	r2, [pc, #512]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e01d      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc0>
 8004d3e:	4b78      	ldr	r3, [pc, #480]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a77      	ldr	r2, [pc, #476]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b75      	ldr	r3, [pc, #468]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a74      	ldr	r2, [pc, #464]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d58:	4b71      	ldr	r3, [pc, #452]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a70      	ldr	r2, [pc, #448]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b6e      	ldr	r3, [pc, #440]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6d      	ldr	r2, [pc, #436]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fd f8a0 	bl	8001ebc <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fd f89c 	bl	8001ebc <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e3d4      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	4b63      	ldr	r3, [pc, #396]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xe8>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd f88c 	bl	8001ebc <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fd f888 	bl	8001ebc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e3c0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	4b59      	ldr	r3, [pc, #356]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x110>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80ca 	beq.w	8004f6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd8:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004de2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_RCC_OscConfig+0x166>
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	2b18      	cmp	r3, #24
 8004df2:	d156      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x20a>
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d151      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfe:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x17e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e392      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e16:	4b42      	ldr	r3, [pc, #264]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0219 	bic.w	r2, r3, #25
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	493f      	ldr	r1, [pc, #252]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd f848 	bl	8001ebc <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fd f844 	bl	8001ebc <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e37c      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	4b37      	ldr	r3, [pc, #220]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	f7fd f865 	bl	8001f1c <HAL_GetREVID>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d817      	bhi.n	8004e8c <HAL_RCC_OscConfig+0x1f4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d108      	bne.n	8004e76 <HAL_RCC_OscConfig+0x1de>
 8004e64:	4b2e      	ldr	r3, [pc, #184]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e74:	e07a      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e76:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	031b      	lsls	r3, r3, #12
 8004e84:	4926      	ldr	r1, [pc, #152]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8a:	e06f      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8c:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	4921      	ldr	r1, [pc, #132]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea0:	e064      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d047      	beq.n	8004f3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0219 	bic.w	r2, r3, #25
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	491a      	ldr	r1, [pc, #104]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fffe 	bl	8001ebc <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fffa 	bl	8001ebc <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e332      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed6:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	f7fd f81b 	bl	8001f1c <HAL_GetREVID>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d819      	bhi.n	8004f24 <HAL_RCC_OscConfig+0x28c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d108      	bne.n	8004f0a <HAL_RCC_OscConfig+0x272>
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f00:	4a07      	ldr	r2, [pc, #28]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f06:	6053      	str	r3, [r2, #4]
 8004f08:	e030      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	4901      	ldr	r1, [pc, #4]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
 8004f1e:	e025      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
 8004f20:	58024400 	.word	0x58024400
 8004f24:	4b9a      	ldr	r3, [pc, #616]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	4997      	ldr	r1, [pc, #604]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b95      	ldr	r3, [pc, #596]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a94      	ldr	r2, [pc, #592]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fc ffb9 	bl	8001ebc <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4e:	f7fc ffb5 	bl	8001ebc <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e2ed      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f60:	4b8b      	ldr	r3, [pc, #556]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a9 	beq.w	80050cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7a:	4b85      	ldr	r3, [pc, #532]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f84:	4b82      	ldr	r3, [pc, #520]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d007      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x308>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b18      	cmp	r3, #24
 8004f94:	d13a      	bne.n	800500c <HAL_RCC_OscConfig+0x374>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d135      	bne.n	800500c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x320>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b80      	cmp	r3, #128	@ 0x80
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e2c1      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb8:	f7fc ffb0 	bl	8001f1c <HAL_GetREVID>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d817      	bhi.n	8004ff6 <HAL_RCC_OscConfig+0x35e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x348>
 8004fce:	4b70      	ldr	r3, [pc, #448]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fde:	e075      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	069b      	lsls	r3, r3, #26
 8004fee:	4968      	ldr	r1, [pc, #416]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff4:	e06a      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff6:	4b66      	ldr	r3, [pc, #408]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	4962      	ldr	r1, [pc, #392]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800500a:	e05f      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d042      	beq.n	800509a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005014:	4b5e      	ldr	r3, [pc, #376]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a5d      	ldr	r2, [pc, #372]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc ff4c 	bl	8001ebc <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005028:	f7fc ff48 	bl	8001ebc <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e280      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503a:	4b55      	ldr	r3, [pc, #340]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005046:	f7fc ff69 	bl	8001f1c <HAL_GetREVID>
 800504a:	4603      	mov	r3, r0
 800504c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005050:	4293      	cmp	r3, r2
 8005052:	d817      	bhi.n	8005084 <HAL_RCC_OscConfig+0x3ec>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	2b20      	cmp	r3, #32
 800505a:	d108      	bne.n	800506e <HAL_RCC_OscConfig+0x3d6>
 800505c:	4b4c      	ldr	r3, [pc, #304]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005064:	4a4a      	ldr	r2, [pc, #296]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005066:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800506a:	6053      	str	r3, [r2, #4]
 800506c:	e02e      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
 800506e:	4b48      	ldr	r3, [pc, #288]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	069b      	lsls	r3, r3, #26
 800507c:	4944      	ldr	r1, [pc, #272]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
 8005082:	e023      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
 8005084:	4b42      	ldr	r3, [pc, #264]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	493f      	ldr	r1, [pc, #252]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	60cb      	str	r3, [r1, #12]
 8005098:	e018      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800509a:	4b3d      	ldr	r3, [pc, #244]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3c      	ldr	r2, [pc, #240]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc ff09 	bl	8001ebc <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050ae:	f7fc ff05 	bl	8001ebc <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e23d      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050c0:	4b33      	ldr	r3, [pc, #204]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d036      	beq.n	8005146 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d019      	beq.n	8005114 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fc fee6 	bl	8001ebc <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f4:	f7fc fee2 	bl	8001ebc <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e21a      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005106:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x45c>
 8005112:	e018      	b.n	8005146 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005118:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fc fecc 	bl	8001ebc <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005128:	f7fc fec8 	bl	8001ebc <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e200      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d039      	beq.n	80051c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01c      	beq.n	8005194 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0c      	ldr	r2, [pc, #48]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005164:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005166:	f7fc fea9 	bl	8001ebc <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516e:	f7fc fea5 	bl	8001ebc <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1dd      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005180:	4b03      	ldr	r3, [pc, #12]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x4d6>
 800518c:	e01b      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005194:	4b9b      	ldr	r3, [pc, #620]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a9a      	ldr	r2, [pc, #616]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800519a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051a0:	f7fc fe8c 	bl	8001ebc <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a8:	f7fc fe88 	bl	8001ebc <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e1c0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ba:	4b92      	ldr	r3, [pc, #584]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8081 	beq.w	80052d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8b      	ldr	r2, [pc, #556]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e0:	f7fc fe6c 	bl	8001ebc <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fc fe68 	bl	8001ebc <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e1a0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fa:	4b83      	ldr	r3, [pc, #524]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x584>
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e02d      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <HAL_RCC_OscConfig+0x5a6>
 8005224:	4b77      	ldr	r3, [pc, #476]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	4a76      	ldr	r2, [pc, #472]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	4b74      	ldr	r3, [pc, #464]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a73      	ldr	r2, [pc, #460]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005236:	f023 0304 	bic.w	r3, r3, #4
 800523a:	6713      	str	r3, [r2, #112]	@ 0x70
 800523c:	e01c      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c8>
 8005246:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	4a6e      	ldr	r2, [pc, #440]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	@ 0x70
 8005252:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a6b      	ldr	r2, [pc, #428]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 8005260:	4b68      	ldr	r3, [pc, #416]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	4a67      	ldr	r2, [pc, #412]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	@ 0x70
 800526c:	4b65      	ldr	r3, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a64      	ldr	r2, [pc, #400]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fc fe1c 	bl	8001ebc <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fc fe18 	bl	8001ebc <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e14e      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529e:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ee      	beq.n	8005288 <HAL_RCC_OscConfig+0x5f0>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fc fe06 	bl	8001ebc <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fc fe02 	bl	8001ebc <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e138      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 812d 	beq.w	800553a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052e0:	4b48      	ldr	r3, [pc, #288]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e8:	2b18      	cmp	r3, #24
 80052ea:	f000 80bd 	beq.w	8005468 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	f040 809e 	bne.w	8005434 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f8:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a41      	ldr	r2, [pc, #260]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc fdda 	bl	8001ebc <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fc fdd6 	bl	8001ebc <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e10e      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531e:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800532a:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800532c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCC_OscConfig+0x774>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800533a:	0112      	lsls	r2, r2, #4
 800533c:	430a      	orrs	r2, r1
 800533e:	4931      	ldr	r1, [pc, #196]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	628b      	str	r3, [r1, #40]	@ 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	3b01      	subs	r3, #1
 800534a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	3b01      	subs	r3, #1
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	b29b      	uxth	r3, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	3b01      	subs	r3, #1
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005374:	4923      	ldr	r1, [pc, #140]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800538a:	4b21      	ldr	r3, [pc, #132]	@ (8005410 <HAL_RCC_OscConfig+0x778>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005392:	00d2      	lsls	r2, r2, #3
 8005394:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800539a:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4917      	ldr	r1, [pc, #92]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053ac:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	f023 0202 	bic.w	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b8:	4912      	ldr	r1, [pc, #72]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053be:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	4a07      	ldr	r2, [pc, #28]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ee:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a04      	ldr	r2, [pc, #16]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fc fd5f 	bl	8001ebc <HAL_GetTick>
 80053fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005400:	e011      	b.n	8005426 <HAL_RCC_OscConfig+0x78e>
 8005402:	bf00      	nop
 8005404:	58024400 	.word	0x58024400
 8005408:	58024800 	.word	0x58024800
 800540c:	fffffc0c 	.word	0xfffffc0c
 8005410:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc fd52 	bl	8001ebc <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e08a      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005426:	4b47      	ldr	r3, [pc, #284]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x77c>
 8005432:	e082      	b.n	800553a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b43      	ldr	r3, [pc, #268]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a42      	ldr	r2, [pc, #264]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc fd3c 	bl	8001ebc <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005448:	f7fc fd38 	bl	8001ebc <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e070      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545a:	4b3a      	ldr	r3, [pc, #232]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x7b0>
 8005466:	e068      	b.n	800553a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005468:	4b36      	ldr	r3, [pc, #216]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800546e:	4b35      	ldr	r3, [pc, #212]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d031      	beq.n	80054e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f003 0203 	and.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d12a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d122      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d11a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	0a5b      	lsrs	r3, r3, #9
 80054ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d111      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d108      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e02b      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d01f      	beq.n	800553a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054fa:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4a11      	ldr	r2, [pc, #68]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005506:	f7fc fcd9 	bl	8001ebc <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800550c:	bf00      	nop
 800550e:	f7fc fcd5 	bl	8001ebc <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	4293      	cmp	r3, r2
 8005518:	d0f9      	beq.n	800550e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800551c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <HAL_RCC_OscConfig+0x8b0>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005526:	00d2      	lsls	r2, r2, #3
 8005528:	4906      	ldr	r1, [pc, #24]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3730      	adds	r7, #48	@ 0x30
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	58024400 	.word	0x58024400
 8005548:	ffff0007 	.word	0xffff0007

0800554c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e19c      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b8a      	ldr	r3, [pc, #552]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d910      	bls.n	8005590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b87      	ldr	r3, [pc, #540]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	4985      	ldr	r1, [pc, #532]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b83      	ldr	r3, [pc, #524]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e184      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d908      	bls.n	80055be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055ac:	4b78      	ldr	r3, [pc, #480]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	4975      	ldr	r1, [pc, #468]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b70      	ldr	r3, [pc, #448]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d908      	bls.n	80055ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055da:	4b6d      	ldr	r3, [pc, #436]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	496a      	ldr	r1, [pc, #424]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	4b64      	ldr	r3, [pc, #400]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005604:	429a      	cmp	r2, r3
 8005606:	d908      	bls.n	800561a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005608:	4b61      	ldr	r3, [pc, #388]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	495e      	ldr	r1, [pc, #376]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005616:	4313      	orrs	r3, r2
 8005618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	4b59      	ldr	r3, [pc, #356]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005632:	429a      	cmp	r2, r3
 8005634:	d908      	bls.n	8005648 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005636:	4b56      	ldr	r3, [pc, #344]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	4953      	ldr	r1, [pc, #332]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005644:	4313      	orrs	r3, r2
 8005646:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b4d      	ldr	r3, [pc, #308]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	429a      	cmp	r2, r3
 8005662:	d908      	bls.n	8005676 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b4a      	ldr	r3, [pc, #296]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 020f 	bic.w	r2, r3, #15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4947      	ldr	r1, [pc, #284]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d055      	beq.n	800572e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005682:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4940      	ldr	r1, [pc, #256]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005690:	4313      	orrs	r3, r2
 8005692:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800569c:	4b3c      	ldr	r3, [pc, #240]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d121      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0f6      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b4:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d115      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0ea      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056cc:	4b30      	ldr	r3, [pc, #192]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0de      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0d6      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ec:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f023 0207 	bic.w	r2, r3, #7
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4925      	ldr	r1, [pc, #148]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fe:	f7fc fbdd 	bl	8001ebc <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005704:	e00a      	b.n	800571c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005706:	f7fc fbd9 	bl	8001ebc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0be      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571c:	4b1c      	ldr	r3, [pc, #112]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	429a      	cmp	r2, r3
 800572c:	d1eb      	bne.n	8005706 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	4b14      	ldr	r3, [pc, #80]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	429a      	cmp	r2, r3
 8005748:	d208      	bcs.n	800575c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574a:	4b11      	ldr	r3, [pc, #68]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f023 020f 	bic.w	r2, r3, #15
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	490e      	ldr	r1, [pc, #56]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005758:	4313      	orrs	r3, r2
 800575a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d214      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576a:	4b08      	ldr	r3, [pc, #32]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 020f 	bic.w	r2, r3, #15
 8005772:	4906      	ldr	r1, [pc, #24]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e086      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
 800578c:	52002000 	.word	0x52002000
 8005790:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	4b3f      	ldr	r3, [pc, #252]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d208      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057b0:	4b3c      	ldr	r3, [pc, #240]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	4939      	ldr	r1, [pc, #228]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	4b34      	ldr	r3, [pc, #208]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057da:	429a      	cmp	r2, r3
 80057dc:	d208      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057de:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	492e      	ldr	r1, [pc, #184]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d010      	beq.n	800581e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005808:	429a      	cmp	r2, r3
 800580a:	d208      	bcs.n	800581e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800580c:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4922      	ldr	r1, [pc, #136]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800581a:	4313      	orrs	r3, r2
 800581c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d010      	beq.n	800584c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005836:	429a      	cmp	r2, r3
 8005838:	d208      	bcs.n	800584c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800583a:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	4917      	ldr	r1, [pc, #92]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005848:	4313      	orrs	r3, r2
 800584a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800584c:	f000 f834 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	4912      	ldr	r1, [pc, #72]	@ (80058a8 <HAL_RCC_ClockConfig+0x35c>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800586a:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4a0d      	ldr	r2, [pc, #52]	@ (80058a8 <HAL_RCC_ClockConfig+0x35c>)
 8005874:	5cd3      	ldrb	r3, [r2, r3]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <HAL_RCC_ClockConfig+0x360>)
 8005882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005884:	4a0a      	ldr	r2, [pc, #40]	@ (80058b0 <HAL_RCC_ClockConfig+0x364>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800588a:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <HAL_RCC_ClockConfig+0x368>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb fec6 	bl	8001620 <HAL_InitTick>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	58024400 	.word	0x58024400
 80058a8:	08015408 	.word	0x08015408
 80058ac:	24000004 	.word	0x24000004
 80058b0:	24000000 	.word	0x24000000
 80058b4:	24000008 	.word	0x24000008

080058b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058be:	4bb3      	ldr	r3, [pc, #716]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c6:	2b18      	cmp	r3, #24
 80058c8:	f200 8155 	bhi.w	8005b76 <HAL_RCC_GetSysClockFreq+0x2be>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005939 	.word	0x08005939
 80058d8:	08005b77 	.word	0x08005b77
 80058dc:	08005b77 	.word	0x08005b77
 80058e0:	08005b77 	.word	0x08005b77
 80058e4:	08005b77 	.word	0x08005b77
 80058e8:	08005b77 	.word	0x08005b77
 80058ec:	08005b77 	.word	0x08005b77
 80058f0:	08005b77 	.word	0x08005b77
 80058f4:	0800595f 	.word	0x0800595f
 80058f8:	08005b77 	.word	0x08005b77
 80058fc:	08005b77 	.word	0x08005b77
 8005900:	08005b77 	.word	0x08005b77
 8005904:	08005b77 	.word	0x08005b77
 8005908:	08005b77 	.word	0x08005b77
 800590c:	08005b77 	.word	0x08005b77
 8005910:	08005b77 	.word	0x08005b77
 8005914:	08005965 	.word	0x08005965
 8005918:	08005b77 	.word	0x08005b77
 800591c:	08005b77 	.word	0x08005b77
 8005920:	08005b77 	.word	0x08005b77
 8005924:	08005b77 	.word	0x08005b77
 8005928:	08005b77 	.word	0x08005b77
 800592c:	08005b77 	.word	0x08005b77
 8005930:	08005b77 	.word	0x08005b77
 8005934:	0800596b 	.word	0x0800596b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005938:	4b94      	ldr	r3, [pc, #592]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005944:	4b91      	ldr	r3, [pc, #580]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	08db      	lsrs	r3, r3, #3
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	4a90      	ldr	r2, [pc, #576]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005956:	e111      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005958:	4b8d      	ldr	r3, [pc, #564]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800595a:	61bb      	str	r3, [r7, #24]
      break;
 800595c:	e10e      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800595e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005960:	61bb      	str	r3, [r7, #24]
      break;
 8005962:	e10b      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005964:	4b8c      	ldr	r3, [pc, #560]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005966:	61bb      	str	r3, [r7, #24]
      break;
 8005968:	e108      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800596a:	4b88      	ldr	r3, [pc, #544]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005974:	4b85      	ldr	r3, [pc, #532]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800597e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005980:	4b82      	ldr	r3, [pc, #520]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800598a:	4b80      	ldr	r3, [pc, #512]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80e1 	beq.w	8005b70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	f000 8083 	beq.w	8005abc <HAL_RCC_GetSysClockFreq+0x204>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	f200 80a1 	bhi.w	8005b00 <HAL_RCC_GetSysClockFreq+0x248>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x114>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d056      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059ca:	e099      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059cc:	4b6f      	ldr	r3, [pc, #444]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d02d      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d8:	4b6c      	ldr	r3, [pc, #432]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b62      	ldr	r3, [pc, #392]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a32:	e087      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ba0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b51      	ldr	r3, [pc, #324]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a76:	e065      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ba4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b40      	ldr	r3, [pc, #256]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aba:	e043      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ba8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b2f      	ldr	r3, [pc, #188]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afe:	e021      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ba4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b44:	4b11      	ldr	r3, [pc, #68]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	0a5b      	lsrs	r3, r3, #9
 8005b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4e:	3301      	adds	r3, #1
 8005b50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b68:	ee17 3a90 	vmov	r3, s15
 8005b6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
      break;
 8005b74:	e002      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b78:	61bb      	str	r3, [r7, #24]
      break;
 8005b7a:	bf00      	nop
  }

  return sysclockfreq;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	@ 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	03d09000 	.word	0x03d09000
 8005b94:	003d0900 	.word	0x003d0900
 8005b98:	017d7840 	.word	0x017d7840
 8005b9c:	46000000 	.word	0x46000000
 8005ba0:	4c742400 	.word	0x4c742400
 8005ba4:	4a742400 	.word	0x4a742400
 8005ba8:	4bbebc20 	.word	0x4bbebc20

08005bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bb2:	f7ff fe81 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490f      	ldr	r1, [pc, #60]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005be8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bea:	4a07      	ldr	r2, [pc, #28]	@ (8005c08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	08015408 	.word	0x08015408
 8005c04:	24000004 	.word	0x24000004
 8005c08:	24000000 	.word	0x24000000

08005c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c10:	f7ff ffcc 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	@ (8005c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58024400 	.word	0x58024400
 8005c34:	08015408 	.word	0x08015408

08005c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	223f      	movs	r2, #63	@ 0x3f
 8005c46:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c48:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0207 	and.w	r2, r3, #7
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005c54:	4b17      	ldr	r3, [pc, #92]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005c60:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005c6c:	4b11      	ldr	r3, [pc, #68]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005c78:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005c90:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x7c>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_RCC_GetClockConfig+0x80>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	52002000 	.word	0x52002000

08005cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b0ca      	sub	sp, #296	@ 0x128
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ce0:	2500      	movs	r5, #0
 8005ce2:	ea54 0305 	orrs.w	r3, r4, r5
 8005ce6:	d049      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cf2:	d02f      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005cf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cf8:	d828      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cfe:	d01a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d04:	d822      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0e:	d007      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d10:	e01c      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d12:	4bb8      	ldr	r3, [pc, #736]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	4ab7      	ldr	r2, [pc, #732]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d1e:	e01a      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	3308      	adds	r3, #8
 8005d26:	2102      	movs	r1, #2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f9d1 	bl	80070d0 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	3328      	adds	r3, #40	@ 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fa78 	bl	8007234 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d4a:	e004      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d52:	e000      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d5e:	4ba5      	ldr	r3, [pc, #660]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d72:	e003      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d88:	f04f 0900 	mov.w	r9, #0
 8005d8c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d90:	d047      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d82a      	bhi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db9 	.word	0x08005db9
 8005da8:	08005dc7 	.word	0x08005dc7
 8005dac:	08005ddd 	.word	0x08005ddd
 8005db0:	08005dfb 	.word	0x08005dfb
 8005db4:	08005dfb 	.word	0x08005dfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db8:	4b8e      	ldr	r3, [pc, #568]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4a8d      	ldr	r2, [pc, #564]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc4:	e01a      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	3308      	adds	r3, #8
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 f97e 	bl	80070d0 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dda:	e00f      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	3328      	adds	r3, #40	@ 0x28
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fa25 	bl	8007234 <RCCEx_PLL3_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df0:	e004      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005df8:	e000      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e04:	4b7b      	ldr	r3, [pc, #492]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e08:	f023 0107 	bic.w	r1, r3, #7
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e12:	4a78      	ldr	r2, [pc, #480]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e18:	e003      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e2e:	f04f 0b00 	mov.w	fp, #0
 8005e32:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e36:	d04c      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e42:	d030      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e48:	d829      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e4c:	d02d      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e50:	d825      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e52:	2b80      	cmp	r3, #128	@ 0x80
 8005e54:	d018      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e56:	2b80      	cmp	r3, #128	@ 0x80
 8005e58:	d821      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e5e:	2b40      	cmp	r3, #64	@ 0x40
 8005e60:	d007      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e62:	e01c      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4b63      	ldr	r3, [pc, #396]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4a62      	ldr	r2, [pc, #392]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e70:	e01c      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e76:	3308      	adds	r3, #8
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f928 	bl	80070d0 <RCCEx_PLL2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e86:	e011      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8c:	3328      	adds	r3, #40	@ 0x28
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 f9cf 	bl	8007234 <RCCEx_PLL3_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ec8:	e003      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ede:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005ee8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005eec:	460b      	mov	r3, r1
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	d053      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005efe:	d035      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f04:	d82e      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f0a:	d031      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f10:	d828      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f16:	d01a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f1c:	d822      	bhi.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f26:	d007      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f28:	e01c      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2a:	4b32      	ldr	r3, [pc, #200]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	4a31      	ldr	r2, [pc, #196]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f36:	e01c      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f8c5 	bl	80070d0 <RCCEx_PLL2_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e011      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	3328      	adds	r3, #40	@ 0x28
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f96c 	bl	8007234 <RCCEx_PLL3_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f62:	e006      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f6a:	e002      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f90:	e003      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fa6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fb0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d056      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fc6:	d038      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fcc:	d831      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fd2:	d034      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005fd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fd8:	d82b      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fde:	d01d      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fe4:	d825      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d006      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fee:	d00a      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ff0:	e01f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff8:	4ba2      	ldr	r3, [pc, #648]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	4aa1      	ldr	r2, [pc, #644]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006004:	e01c      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600a:	3308      	adds	r3, #8
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f85e 	bl	80070d0 <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800601a:	e011      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800601c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006020:	3328      	adds	r3, #40	@ 0x28
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f905 	bl	8007234 <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800603e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006048:	4b8e      	ldr	r3, [pc, #568]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800604a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006058:	4a8a      	ldr	r2, [pc, #552]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800605a:	430b      	orrs	r3, r1
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
 800605e:	e003      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006078:	2300      	movs	r3, #0
 800607a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800607e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d03a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608e:	2b30      	cmp	r3, #48	@ 0x30
 8006090:	d01f      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006092:	2b30      	cmp	r3, #48	@ 0x30
 8006094:	d819      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006096:	2b20      	cmp	r3, #32
 8006098:	d00c      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800609a:	2b20      	cmp	r3, #32
 800609c:	d815      	bhi.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d019      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d111      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a6:	4b77      	ldr	r3, [pc, #476]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	4a76      	ldr	r2, [pc, #472]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060b2:	e011      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	3308      	adds	r3, #8
 80060ba:	2102      	movs	r1, #2
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f807 	bl	80070d0 <RCCEx_PLL2_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060c8:	e006      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060e0:	4b68      	ldr	r3, [pc, #416]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ee:	4a65      	ldr	r2, [pc, #404]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060f0:	430b      	orrs	r3, r1
 80060f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060f4:	e003      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800610a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800610e:	2300      	movs	r3, #0
 8006110:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006114:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006118:	460b      	mov	r3, r1
 800611a:	4313      	orrs	r3, r2
 800611c:	d051      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006128:	d035      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800612a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800612e:	d82e      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006130:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006134:	d031      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006136:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800613a:	d828      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d01a      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006146:	d822      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006150:	d007      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006152:	e01c      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006154:	4b4b      	ldr	r3, [pc, #300]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4a4a      	ldr	r2, [pc, #296]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800615a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006160:	e01c      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	3308      	adds	r3, #8
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f000 ffb0 	bl	80070d0 <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006176:	e011      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 f857 	bl	8007234 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006194:	e002      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061a4:	4b37      	ldr	r3, [pc, #220]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b2:	4a34      	ldr	r2, [pc, #208]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061d2:	2300      	movs	r3, #0
 80061d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d056      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061ec:	d033      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80061ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061f2:	d82c      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061f8:	d02f      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80061fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061fe:	d826      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006200:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006204:	d02b      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006206:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800620a:	d820      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800620c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006210:	d012      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006216:	d81a      	bhi.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d022      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006220:	d115      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006226:	3308      	adds	r3, #8
 8006228:	2101      	movs	r1, #1
 800622a:	4618      	mov	r0, r3
 800622c:	f000 ff50 	bl	80070d0 <RCCEx_PLL2_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006236:	e015      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623c:	3328      	adds	r3, #40	@ 0x28
 800623e:	2101      	movs	r1, #1
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fff7 	bl	8007234 <RCCEx_PLL3_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800624c:	e00a      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800627a:	4a02      	ldr	r2, [pc, #8]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006280:	e006      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800629c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d055      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062bc:	d033      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062c2:	d82c      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c8:	d02f      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ce:	d826      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062d4:	d02b      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80062d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062da:	d820      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e0:	d012      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80062e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e6:	d81a      	bhi.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d022      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80062ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062f0:	d115      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f6:	3308      	adds	r3, #8
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fee8 	bl	80070d0 <RCCEx_PLL2_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006306:	e015      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	3328      	adds	r3, #40	@ 0x28
 800630e:	2101      	movs	r1, #1
 8006310:	4618      	mov	r0, r3
 8006312:	f000 ff8f 	bl	8007234 <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800631c:	e00a      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006326:	bf00      	nop
 8006328:	e004      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800632a:	bf00      	nop
 800632c:	e002      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800632e:	bf00      	nop
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800633c:	4ba3      	ldr	r3, [pc, #652]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800633e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006340:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800634c:	4a9f      	ldr	r2, [pc, #636]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6593      	str	r3, [r2, #88]	@ 0x58
 8006352:	e003      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	d037      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006386:	d00e      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800638c:	d816      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d018      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006396:	d111      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b8c      	ldr	r3, [pc, #560]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	4a8b      	ldr	r2, [pc, #556]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063a4:	e00f      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	3308      	adds	r3, #8
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fe8e 	bl	80070d0 <RCCEx_PLL2_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063ba:	e004      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063c2:	e000      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063ce:	4b7f      	ldr	r3, [pc, #508]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063dc:	4a7b      	ldr	r2, [pc, #492]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063de:	430b      	orrs	r3, r1
 80063e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063fc:	2300      	movs	r3, #0
 80063fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006402:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006406:	460b      	mov	r3, r1
 8006408:	4313      	orrs	r3, r2
 800640a:	d039      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006412:	2b03      	cmp	r3, #3
 8006414:	d81c      	bhi.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006459 	.word	0x08006459
 8006420:	0800642d 	.word	0x0800642d
 8006424:	0800643b 	.word	0x0800643b
 8006428:	08006459 	.word	0x08006459
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642c:	4b67      	ldr	r3, [pc, #412]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	4a66      	ldr	r2, [pc, #408]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006438:	e00f      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	3308      	adds	r3, #8
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fe44 	bl	80070d0 <RCCEx_PLL2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800644e:	e004      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006462:	4b5a      	ldr	r3, [pc, #360]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006466:	f023 0103 	bic.w	r1, r3, #3
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006470:	4a56      	ldr	r2, [pc, #344]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006472:	430b      	orrs	r3, r1
 8006474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006476:	e003      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800648c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006490:	2300      	movs	r3, #0
 8006492:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006496:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	f000 809f 	beq.w	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064a2:	4b4b      	ldr	r3, [pc, #300]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a4a      	ldr	r2, [pc, #296]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ae:	f7fb fd05 	bl	8001ebc <HAL_GetTick>
 80064b2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b6:	e00b      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b8:	f7fb fd00 	bl	8001ebc <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b64      	cmp	r3, #100	@ 0x64
 80064c6:	d903      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ce:	e005      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064d0:	4b3f      	ldr	r3, [pc, #252]	@ (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0ed      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80064dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d179      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064e4:	4b39      	ldr	r3, [pc, #228]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064f0:	4053      	eors	r3, r2
 80064f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d015      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064fa:	4b34      	ldr	r3, [pc, #208]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006502:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006506:	4b31      	ldr	r3, [pc, #196]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	4a30      	ldr	r2, [pc, #192]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006510:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006512:	4b2e      	ldr	r3, [pc, #184]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006516:	4a2d      	ldr	r2, [pc, #180]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800651c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800651e:	4a2b      	ldr	r2, [pc, #172]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006524:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800652e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006532:	d118      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fb fcc2 	bl	8001ebc <HAL_GetTick>
 8006538:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800653c:	e00d      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653e:	f7fb fcbd 	bl	8001ebc <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800654e:	429a      	cmp	r2, r3
 8006550:	d903      	bls.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006558:	e005      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800655a:	4b1c      	ldr	r3, [pc, #112]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0eb      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d129      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800657e:	d10e      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006580:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006590:	091a      	lsrs	r2, r3, #4
 8006592:	4b10      	ldr	r3, [pc, #64]	@ (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006594:	4013      	ands	r3, r2
 8006596:	4a0d      	ldr	r2, [pc, #52]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006598:	430b      	orrs	r3, r1
 800659a:	6113      	str	r3, [r2, #16]
 800659c:	e005      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800659e:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	4a0a      	ldr	r2, [pc, #40]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065a8:	6113      	str	r3, [r2, #16]
 80065aa:	4b08      	ldr	r3, [pc, #32]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ba:	4a04      	ldr	r2, [pc, #16]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c0:	e00e      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80065ca:	e009      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80065cc:	58024400 	.word	0x58024400
 80065d0:	58024800 	.word	0x58024800
 80065d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f002 0301 	and.w	r3, r2, #1
 80065ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f000 8089 	beq.w	8006714 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006608:	2b28      	cmp	r3, #40	@ 0x28
 800660a:	d86b      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800660c:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	080066ed 	.word	0x080066ed
 8006618:	080066e5 	.word	0x080066e5
 800661c:	080066e5 	.word	0x080066e5
 8006620:	080066e5 	.word	0x080066e5
 8006624:	080066e5 	.word	0x080066e5
 8006628:	080066e5 	.word	0x080066e5
 800662c:	080066e5 	.word	0x080066e5
 8006630:	080066e5 	.word	0x080066e5
 8006634:	080066b9 	.word	0x080066b9
 8006638:	080066e5 	.word	0x080066e5
 800663c:	080066e5 	.word	0x080066e5
 8006640:	080066e5 	.word	0x080066e5
 8006644:	080066e5 	.word	0x080066e5
 8006648:	080066e5 	.word	0x080066e5
 800664c:	080066e5 	.word	0x080066e5
 8006650:	080066e5 	.word	0x080066e5
 8006654:	080066cf 	.word	0x080066cf
 8006658:	080066e5 	.word	0x080066e5
 800665c:	080066e5 	.word	0x080066e5
 8006660:	080066e5 	.word	0x080066e5
 8006664:	080066e5 	.word	0x080066e5
 8006668:	080066e5 	.word	0x080066e5
 800666c:	080066e5 	.word	0x080066e5
 8006670:	080066e5 	.word	0x080066e5
 8006674:	080066ed 	.word	0x080066ed
 8006678:	080066e5 	.word	0x080066e5
 800667c:	080066e5 	.word	0x080066e5
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080066e5 	.word	0x080066e5
 8006688:	080066e5 	.word	0x080066e5
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066e5 	.word	0x080066e5
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066e5 	.word	0x080066e5
 800669c:	080066e5 	.word	0x080066e5
 80066a0:	080066e5 	.word	0x080066e5
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	080066e5 	.word	0x080066e5
 80066ac:	080066e5 	.word	0x080066e5
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066ed 	.word	0x080066ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066bc:	3308      	adds	r3, #8
 80066be:	2101      	movs	r1, #1
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fd05 	bl	80070d0 <RCCEx_PLL2_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066cc:	e00f      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	3328      	adds	r3, #40	@ 0x28
 80066d4:	2101      	movs	r1, #1
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fdac 	bl	8007234 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066e2:	e004      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80066ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066f6:	4bbf      	ldr	r3, [pc, #764]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006704:	4abb      	ldr	r2, [pc, #748]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006706:	430b      	orrs	r3, r1
 8006708:	6553      	str	r3, [r2, #84]	@ 0x54
 800670a:	e003      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f002 0302 	and.w	r3, r2, #2
 8006720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800672a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800672e:	460b      	mov	r3, r1
 8006730:	4313      	orrs	r3, r2
 8006732:	d041      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800673a:	2b05      	cmp	r3, #5
 800673c:	d824      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800673e:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006791 	.word	0x08006791
 8006748:	0800675d 	.word	0x0800675d
 800674c:	08006773 	.word	0x08006773
 8006750:	08006791 	.word	0x08006791
 8006754:	08006791 	.word	0x08006791
 8006758:	08006791 	.word	0x08006791
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	3308      	adds	r3, #8
 8006762:	2101      	movs	r1, #1
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fcb3 	bl	80070d0 <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006770:	e00f      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3328      	adds	r3, #40	@ 0x28
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fd5a 	bl	8007234 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800679a:	4b96      	ldr	r3, [pc, #600]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800679c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679e:	f023 0107 	bic.w	r1, r3, #7
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067a8:	4a92      	ldr	r2, [pc, #584]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f002 0304 	and.w	r3, r2, #4
 80067c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4313      	orrs	r3, r2
 80067d6:	d044      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d825      	bhi.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006839 	.word	0x08006839
 80067f0:	08006805 	.word	0x08006805
 80067f4:	0800681b 	.word	0x0800681b
 80067f8:	08006839 	.word	0x08006839
 80067fc:	08006839 	.word	0x08006839
 8006800:	08006839 	.word	0x08006839
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	3308      	adds	r3, #8
 800680a:	2101      	movs	r1, #1
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fc5f 	bl	80070d0 <RCCEx_PLL2_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006818:	e00f      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	3328      	adds	r3, #40	@ 0x28
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fd06 	bl	8007234 <RCCEx_PLL3_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800682e:	e004      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006836:	e000      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006842:	4b6c      	ldr	r3, [pc, #432]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006846:	f023 0107 	bic.w	r1, r3, #7
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006852:	4a68      	ldr	r2, [pc, #416]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006854:	430b      	orrs	r3, r1
 8006856:	6593      	str	r3, [r2, #88]	@ 0x58
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f002 0320 	and.w	r3, r2, #32
 800686e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d055      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800688e:	d033      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006894:	d82c      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689a:	d02f      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a0:	d826      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068a6:	d02b      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068ac:	d820      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b2:	d012      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b8:	d81a      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c2:	d115      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c8:	3308      	adds	r3, #8
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fbff 	bl	80070d0 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068d8:	e015      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	3328      	adds	r3, #40	@ 0x28
 80068e0:	2102      	movs	r1, #2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fca6 	bl	8007234 <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068ee:	e00a      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068f8:	bf00      	nop
 80068fa:	e004      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800690e:	4b39      	ldr	r3, [pc, #228]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691e:	4a35      	ldr	r2, [pc, #212]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006920:	430b      	orrs	r3, r1
 8006922:	6553      	str	r3, [r2, #84]	@ 0x54
 8006924:	e003      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800693a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800693e:	2300      	movs	r3, #0
 8006940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006944:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d058      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006956:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800695a:	d033      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800695c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006960:	d82c      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006966:	d02f      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800696c:	d826      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800696e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006972:	d02b      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006974:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006978:	d820      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800697a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800697e:	d012      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006984:	d81a      	bhi.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d022      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698e:	d115      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006994:	3308      	adds	r3, #8
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fb99 	bl	80070d0 <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069a4:	e015      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	3328      	adds	r3, #40	@ 0x28
 80069ac:	2102      	movs	r1, #2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fc40 	bl	8007234 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069ba:	e00a      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069c2:	e006      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069c4:	bf00      	nop
 80069c6:	e004      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069c8:	bf00      	nop
 80069ca:	e002      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069cc:	bf00      	nop
 80069ce:	e000      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10e      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069ea:	4a02      	ldr	r2, [pc, #8]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80069f2:	bf00      	nop
 80069f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d055      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a2c:	d033      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a2e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a32:	d82c      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a38:	d02f      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a3e:	d826      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a44:	d02b      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a46:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a4a:	d820      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a50:	d012      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a56:	d81a      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d022      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a60:	d115      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	3308      	adds	r3, #8
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fb30 	bl	80070d0 <RCCEx_PLL2_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a76:	e015      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	3328      	adds	r3, #40	@ 0x28
 8006a7e:	2102      	movs	r1, #2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fbd7 	bl	8007234 <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a8c:	e00a      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a94:	e006      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a96:	bf00      	nop
 8006a98:	e004      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a9a:	bf00      	nop
 8006a9c:	e002      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a9e:	bf00      	nop
 8006aa0:	e000      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006aac:	4ba1      	ldr	r3, [pc, #644]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006abc:	4a9d      	ldr	r2, [pc, #628]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac2:	e003      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f002 0308 	and.w	r3, r2, #8
 8006ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006adc:	2300      	movs	r3, #0
 8006ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ae2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d01e      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	3328      	adds	r3, #40	@ 0x28
 8006b00:	2102      	movs	r1, #2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb96 	bl	8007234 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b14:	4b87      	ldr	r3, [pc, #540]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b24:	4a83      	ldr	r2, [pc, #524]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f002 0310 	and.w	r3, r2, #16
 8006b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d01e      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b56:	d10c      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	3328      	adds	r3, #40	@ 0x28
 8006b5e:	2102      	movs	r1, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fb67 	bl	8007234 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b72:	4b70      	ldr	r3, [pc, #448]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b82:	4a6c      	ldr	r2, [pc, #432]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d03e      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb4:	d022      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bba:	d81b      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d00b      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bc6:	e015      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bcc:	3308      	adds	r3, #8
 8006bce:	2100      	movs	r1, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fa7d 	bl	80070d0 <RCCEx_PLL2_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bdc:	e00f      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be2:	3328      	adds	r3, #40	@ 0x28
 8006be4:	2102      	movs	r1, #2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fb24 	bl	8007234 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bf2:	e004      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bfa:	e000      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c06:	4b4b      	ldr	r3, [pc, #300]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c16:	4a47      	ldr	r2, [pc, #284]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c1c:	e003      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c34:	2300      	movs	r3, #0
 8006c36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d03b      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c4e:	d01f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c54:	d818      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c5a:	d003      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c62:	e011      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b33      	ldr	r3, [pc, #204]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	4a32      	ldr	r2, [pc, #200]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c70:	e00f      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	3328      	adds	r3, #40	@ 0x28
 8006c78:	2101      	movs	r1, #1
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fada 	bl	8007234 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c9a:	4b26      	ldr	r3, [pc, #152]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cc8:	2300      	movs	r3, #0
 8006cca:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ccc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d034      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ce6:	e011      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce8:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cf4:	e00e      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f9e6 	bl	80070d0 <RCCEx_PLL2_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d0a:	e003      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d2a:	4a02      	ldr	r2, [pc, #8]	@ (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d30:	e006      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d32:	bf00      	nop
 8006d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d4e:	2300      	movs	r3, #0
 8006d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d00c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	3328      	adds	r3, #40	@ 0x28
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fa65 	bl	8007234 <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d82:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d84:	2300      	movs	r3, #0
 8006d86:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d038      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d9e:	d018      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006da4:	d811      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006daa:	d014      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db0:	d80b      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dba:	d106      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dbc:	4bc3      	ldr	r3, [pc, #780]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4ac2      	ldr	r2, [pc, #776]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006dc8:	e008      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dd0:	e004      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006de4:	4bb9      	ldr	r3, [pc, #740]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006df4:	4ab5      	ldr	r2, [pc, #724]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e12:	2300      	movs	r3, #0
 8006e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	d009      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e20:	4baa      	ldr	r3, [pc, #680]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e2e:	4aa7      	ldr	r2, [pc, #668]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e42:	2300      	movs	r3, #0
 8006e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d00a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e50:	4b9e      	ldr	r3, [pc, #632]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e60:	4a9a      	ldr	r2, [pc, #616]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e62:	430b      	orrs	r3, r1
 8006e64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e74:	2300      	movs	r3, #0
 8006e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e82:	4b92      	ldr	r3, [pc, #584]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e86:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e90:	4a8e      	ldr	r2, [pc, #568]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d00e      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eb2:	4b86      	ldr	r3, [pc, #536]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	4a85      	ldr	r2, [pc, #532]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ebc:	6113      	str	r3, [r2, #16]
 8006ebe:	4b83      	ldr	r3, [pc, #524]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec0:	6919      	ldr	r1, [r3, #16]
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006eca:	4a80      	ldr	r2, [pc, #512]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006edc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006eec:	4b77      	ldr	r3, [pc, #476]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	4a74      	ldr	r2, [pc, #464]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f0e:	2300      	movs	r3, #0
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f16:	460b      	mov	r3, r1
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	d00a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f20:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f2c:	4a67      	ldr	r2, [pc, #412]	@ (80070cc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	d011      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f52:	3308      	adds	r3, #8
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f8ba 	bl	80070d0 <RCCEx_PLL2_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	6239      	str	r1, [r7, #32]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	d011      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f92:	3308      	adds	r3, #8
 8006f94:	2101      	movs	r1, #1
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f89a 	bl	80070d0 <RCCEx_PLL2_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	61b9      	str	r1, [r7, #24]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	d011      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f87a 	bl	80070d0 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	6139      	str	r1, [r7, #16]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d011      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	3328      	adds	r3, #40	@ 0x28
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f90c 	bl	8007234 <RCCEx_PLL3_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	2100      	movs	r1, #0
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007048:	460b      	mov	r3, r1
 800704a:	4313      	orrs	r3, r2
 800704c:	d011      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800704e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007052:	3328      	adds	r3, #40	@ 0x28
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f8ec 	bl	8007234 <RCCEx_PLL3_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	2100      	movs	r1, #0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007088:	460b      	mov	r3, r1
 800708a:	4313      	orrs	r3, r2
 800708c:	d011      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	3328      	adds	r3, #40	@ 0x28
 8007094:	2102      	movs	r1, #2
 8007096:	4618      	mov	r0, r3
 8007098:	f000 f8cc 	bl	8007234 <RCCEx_PLL3_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070b2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070c6:	46bd      	mov	sp, r7
 80070c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070cc:	58024400 	.word	0x58024400

080070d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070de:	4b53      	ldr	r3, [pc, #332]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d101      	bne.n	80070ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e099      	b.n	8007222 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070ee:	4b4f      	ldr	r3, [pc, #316]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4e      	ldr	r2, [pc, #312]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fa:	f7fa fedf 	bl	8001ebc <HAL_GetTick>
 80070fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007100:	e008      	b.n	8007114 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007102:	f7fa fedb 	bl	8001ebc <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e086      	b.n	8007222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007114:	4b45      	ldr	r3, [pc, #276]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f0      	bne.n	8007102 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007120:	4b42      	ldr	r3, [pc, #264]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	493f      	ldr	r1, [pc, #252]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007130:	4313      	orrs	r3, r2
 8007132:	628b      	str	r3, [r1, #40]	@ 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	3b01      	subs	r3, #1
 8007144:	025b      	lsls	r3, r3, #9
 8007146:	b29b      	uxth	r3, r3
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	3b01      	subs	r3, #1
 800715e:	061b      	lsls	r3, r3, #24
 8007160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007164:	4931      	ldr	r1, [pc, #196]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800716a:	4b30      	ldr	r3, [pc, #192]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	492d      	ldr	r1, [pc, #180]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800717c:	4b2b      	ldr	r3, [pc, #172]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	f023 0220 	bic.w	r2, r3, #32
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4928      	ldr	r1, [pc, #160]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800718e:	4b27      	ldr	r3, [pc, #156]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	4a26      	ldr	r2, [pc, #152]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007194:	f023 0310 	bic.w	r3, r3, #16
 8007198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800719a:	4b24      	ldr	r3, [pc, #144]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800719c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800719e:	4b24      	ldr	r3, [pc, #144]	@ (8007230 <RCCEx_PLL2_Config+0x160>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	69d2      	ldr	r2, [r2, #28]
 80071a6:	00d2      	lsls	r2, r2, #3
 80071a8:	4920      	ldr	r1, [pc, #128]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071ae:	4b1f      	ldr	r3, [pc, #124]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	4a1e      	ldr	r2, [pc, #120]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071b4:	f043 0310 	orr.w	r3, r3, #16
 80071b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071c0:	4b1a      	ldr	r3, [pc, #104]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a19      	ldr	r2, [pc, #100]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071cc:	e00f      	b.n	80071ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071d4:	4b15      	ldr	r3, [pc, #84]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071e0:	e005      	b.n	80071ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071e2:	4b12      	ldr	r3, [pc, #72]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a11      	ldr	r2, [pc, #68]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071ee:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0e      	ldr	r2, [pc, #56]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fa:	f7fa fe5f 	bl	8001ebc <HAL_GetTick>
 80071fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007200:	e008      	b.n	8007214 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007202:	f7fa fe5b 	bl	8001ebc <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e006      	b.n	8007222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007214:	4b05      	ldr	r3, [pc, #20]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	58024400 	.word	0x58024400
 8007230:	ffff0007 	.word	0xffff0007

08007234 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007242:	4b53      	ldr	r3, [pc, #332]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d101      	bne.n	8007252 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e099      	b.n	8007386 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007252:	4b4f      	ldr	r3, [pc, #316]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4e      	ldr	r2, [pc, #312]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800725c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725e:	f7fa fe2d 	bl	8001ebc <HAL_GetTick>
 8007262:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007264:	e008      	b.n	8007278 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007266:	f7fa fe29 	bl	8001ebc <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e086      	b.n	8007386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007278:	4b45      	ldr	r3, [pc, #276]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f0      	bne.n	8007266 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007284:	4b42      	ldr	r3, [pc, #264]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	051b      	lsls	r3, r3, #20
 8007292:	493f      	ldr	r1, [pc, #252]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007294:	4313      	orrs	r3, r2
 8007296:	628b      	str	r3, [r1, #40]	@ 0x28
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	3b01      	subs	r3, #1
 800729e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	025b      	lsls	r3, r3, #9
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	061b      	lsls	r3, r3, #24
 80072c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072c8:	4931      	ldr	r1, [pc, #196]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80072ce:	4b30      	ldr	r3, [pc, #192]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	492d      	ldr	r1, [pc, #180]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	4928      	ldr	r1, [pc, #160]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072f2:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	4a26      	ldr	r2, [pc, #152]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007302:	4b24      	ldr	r3, [pc, #144]	@ (8007394 <RCCEx_PLL3_Config+0x160>)
 8007304:	4013      	ands	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	69d2      	ldr	r2, [r2, #28]
 800730a:	00d2      	lsls	r2, r2, #3
 800730c:	4920      	ldr	r1, [pc, #128]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800730e:	4313      	orrs	r3, r2
 8007310:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007312:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a1e      	ldr	r2, [pc, #120]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007324:	4b1a      	ldr	r3, [pc, #104]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	4a19      	ldr	r2, [pc, #100]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800732a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800732e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007330:	e00f      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d106      	bne.n	8007346 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007338:	4b15      	ldr	r3, [pc, #84]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	4a14      	ldr	r2, [pc, #80]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800733e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007344:	e005      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007346:	4b12      	ldr	r3, [pc, #72]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800734c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007352:	4b0f      	ldr	r3, [pc, #60]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0e      	ldr	r2, [pc, #56]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7fa fdad 	bl	8001ebc <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007366:	f7fa fda9 	bl	8001ebc <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e006      	b.n	8007386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007378:	4b05      	ldr	r3, [pc, #20]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	ffff0007 	.word	0xffff0007

08007398 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e10f      	b.n	80075ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a87      	ldr	r2, [pc, #540]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a86      	ldr	r2, [pc, #536]	@ (80075d8 <HAL_SPI_Init+0x240>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00a      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a84      	ldr	r2, [pc, #528]	@ (80075dc <HAL_SPI_Init+0x244>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d005      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	d901      	bls.n	80073da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e0f7      	b.n	80075ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fe2e 	bl	800803c <SPI_GetPacketSize>
 80073e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a7b      	ldr	r2, [pc, #492]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00c      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a79      	ldr	r2, [pc, #484]	@ (80075d8 <HAL_SPI_Init+0x240>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a78      	ldr	r2, [pc, #480]	@ (80075dc <HAL_SPI_Init+0x244>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b08      	cmp	r3, #8
 8007404:	d811      	bhi.n	800742a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800740a:	4a72      	ldr	r2, [pc, #456]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d009      	beq.n	8007424 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a70      	ldr	r2, [pc, #448]	@ (80075d8 <HAL_SPI_Init+0x240>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d004      	beq.n	8007424 <HAL_SPI_Init+0x8c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a6f      	ldr	r2, [pc, #444]	@ (80075dc <HAL_SPI_Init+0x244>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d104      	bne.n	800742e <HAL_SPI_Init+0x96>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b10      	cmp	r3, #16
 8007428:	d901      	bls.n	800742e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e0cd      	b.n	80075ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa f84c 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800746a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007474:	d119      	bne.n	80074aa <HAL_SPI_Init+0x112>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d103      	bne.n	8007488 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10c      	bne.n	80074aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d107      	bne.n	80074aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00f      	beq.n	80074d6 <HAL_SPI_Init+0x13e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d90b      	bls.n	80074d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e007      	b.n	80074e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	431a      	orrs	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f8:	ea42 0103 	orr.w	r1, r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007546:	ea42 0103 	orr.w	r1, r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d113      	bne.n	8007586 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007570:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007584:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40013000 	.word	0x40013000
 80075d8:	40003800 	.word	0x40003800
 80075dc:	40003c00 	.word	0x40003c00

080075e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3320      	adds	r3, #32
 80075f6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075f8:	f7fa fc60 	bl	8001ebc <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b01      	cmp	r3, #1
 8007608:	d001      	beq.n	800760e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
 800760c:	e1d1      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Transmit+0x3a>
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e1c9      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_SPI_Transmit+0x4c>
 8007628:	2302      	movs	r3, #2
 800762a:	e1c2      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2203      	movs	r2, #3
 8007638:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007684:	d108      	bne.n	8007698 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e009      	b.n	80076ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80076aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4b96      	ldr	r3, [pc, #600]	@ (800790c <HAL_SPI_Transmit+0x32c>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	88f9      	ldrh	r1, [r7, #6]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	430b      	orrs	r3, r1
 80076be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d8:	d107      	bne.n	80076ea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d947      	bls.n	8007782 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076f2:	e03f      	b.n	8007774 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d114      	bne.n	800772c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800772a:	e023      	b.n	8007774 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800772c:	f7fa fbc6 	bl	8001ebc <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d803      	bhi.n	8007744 <HAL_SPI_Transmit+0x164>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d102      	bne.n	800774a <HAL_SPI_Transmit+0x16a>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d114      	bne.n	8007774 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fba8 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007756:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e11e      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1b9      	bne.n	80076f4 <HAL_SPI_Transmit+0x114>
 8007780:	e0f1      	b.n	8007966 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b07      	cmp	r3, #7
 8007788:	f240 80e6 	bls.w	8007958 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800778c:	e05d      	b.n	800784a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b02      	cmp	r3, #2
 800779a:	d132      	bne.n	8007802 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d918      	bls.n	80077da <HAL_SPI_Transmit+0x1fa>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d014      	beq.n	80077da <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b02      	subs	r3, #2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077d8:	e037      	b.n	800784a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e8:	1c9a      	adds	r2, r3, #2
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007800:	e023      	b.n	800784a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007802:	f7fa fb5b 	bl	8001ebc <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d803      	bhi.n	800781a <HAL_SPI_Transmit+0x23a>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d102      	bne.n	8007820 <HAL_SPI_Transmit+0x240>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d114      	bne.n	800784a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fb3d 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e0b3      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d19b      	bne.n	800778e <HAL_SPI_Transmit+0x1ae>
 8007856:	e086      	b.n	8007966 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d154      	bne.n	8007910 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b03      	cmp	r3, #3
 8007870:	d918      	bls.n	80078a4 <HAL_SPI_Transmit+0x2c4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007876:	2b40      	cmp	r3, #64	@ 0x40
 8007878:	d914      	bls.n	80078a4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6812      	ldr	r2, [r2, #0]
 8007884:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	1d1a      	adds	r2, r3, #4
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b04      	subs	r3, #4
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078a2:	e059      	b.n	8007958 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d917      	bls.n	80078e0 <HAL_SPI_Transmit+0x300>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c6:	1c9a      	adds	r2, r3, #2
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b02      	subs	r3, #2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078de:	e03b      	b.n	8007958 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3320      	adds	r3, #32
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800790a:	e025      	b.n	8007958 <HAL_SPI_Transmit+0x378>
 800790c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007910:	f7fa fad4 	bl	8001ebc <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	429a      	cmp	r2, r3
 800791e:	d803      	bhi.n	8007928 <HAL_SPI_Transmit+0x348>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d102      	bne.n	800792e <HAL_SPI_Transmit+0x34e>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d114      	bne.n	8007958 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 fab6 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800793a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e02c      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	f47f af79 	bne.w	8007858 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	2108      	movs	r1, #8
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fb35 	bl	8007fe0 <SPI_WaitOnFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007982:	f043 0220 	orr.w	r2, r3, #32
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fa87 	bl	8007ea0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80079b0:	2300      	movs	r3, #0
  }
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3330      	adds	r3, #48	@ 0x30
 80079de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079e0:	f7fa fa6c 	bl	8001ebc <HAL_GetTick>
 80079e4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d001      	beq.n	80079f6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80079f2:	2302      	movs	r3, #2
 80079f4:	e250      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <HAL_SPI_Receive+0x46>
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e248      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_SPI_Receive+0x58>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e241      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	88fa      	ldrh	r2, [r7, #6]
 8007a36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a6c:	d108      	bne.n	8007a80 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e009      	b.n	8007a94 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007a92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	4b95      	ldr	r3, [pc, #596]	@ (8007cf0 <HAL_SPI_Receive+0x334>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	88f9      	ldrh	r1, [r7, #6]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ac0:	d107      	bne.n	8007ad2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d96c      	bls.n	8007bb4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007ada:	e064      	b.n	8007ba6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d114      	bne.n	8007b1c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007afa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007afc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b1a:	e044      	b.n	8007ba6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8bfa      	ldrh	r2, [r7, #30]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d919      	bls.n	8007b5e <HAL_SPI_Receive+0x1a2>
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d014      	beq.n	8007b5e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b3e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b5c:	e023      	b.n	8007ba6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b5e:	f7fa f9ad 	bl	8001ebc <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d803      	bhi.n	8007b76 <HAL_SPI_Receive+0x1ba>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d102      	bne.n	8007b7c <HAL_SPI_Receive+0x1c0>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d114      	bne.n	8007ba6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f98f 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e178      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d194      	bne.n	8007adc <HAL_SPI_Receive+0x120>
 8007bb2:	e15e      	b.n	8007e72 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b07      	cmp	r3, #7
 8007bba:	f240 8153 	bls.w	8007e64 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007bbe:	e08f      	b.n	8007ce0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d114      	bne.n	8007c00 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	8812      	ldrh	r2, [r2, #0]
 8007bde:	b292      	uxth	r2, r2
 8007be0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be6:	1c9a      	adds	r2, r3, #2
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bfe:	e06f      	b.n	8007ce0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8bfa      	ldrh	r2, [r7, #30]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d924      	bls.n	8007c58 <HAL_SPI_Receive+0x29c>
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01f      	beq.n	8007c58 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	8812      	ldrh	r2, [r2, #0]
 8007c20:	b292      	uxth	r2, r2
 8007c22:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c28:	1c9a      	adds	r2, r3, #2
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	8812      	ldrh	r2, [r2, #0]
 8007c36:	b292      	uxth	r2, r2
 8007c38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b02      	subs	r3, #2
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c56:	e043      	b.n	8007ce0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d119      	bne.n	8007c98 <HAL_SPI_Receive+0x2dc>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	8812      	ldrh	r2, [r2, #0]
 8007c76:	b292      	uxth	r2, r2
 8007c78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c7e:	1c9a      	adds	r2, r3, #2
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c96:	e023      	b.n	8007ce0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c98:	f7fa f910 	bl	8001ebc <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d803      	bhi.n	8007cb0 <HAL_SPI_Receive+0x2f4>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d102      	bne.n	8007cb6 <HAL_SPI_Receive+0x2fa>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d114      	bne.n	8007ce0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f8f2 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e0db      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af69 	bne.w	8007bc0 <HAL_SPI_Receive+0x204>
 8007cee:	e0c0      	b.n	8007e72 <HAL_SPI_Receive+0x4b6>
 8007cf0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d117      	bne.n	8007d3a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d16:	7812      	ldrb	r2, [r2, #0]
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d38:	e094      	b.n	8007e64 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	8bfa      	ldrh	r2, [r7, #30]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d946      	bls.n	8007dd6 <HAL_SPI_Receive+0x41a>
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d041      	beq.n	8007dd6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007db2:	7812      	ldrb	r2, [r2, #0]
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dd4:	e046      	b.n	8007e64 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d81c      	bhi.n	8007e1c <HAL_SPI_Receive+0x460>
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d017      	beq.n	8007e1c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e1a:	e023      	b.n	8007e64 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e1c:	f7fa f84e 	bl	8001ebc <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d803      	bhi.n	8007e34 <HAL_SPI_Receive+0x478>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d102      	bne.n	8007e3a <HAL_SPI_Receive+0x47e>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d114      	bne.n	8007e64 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f830 	bl	8007ea0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e019      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f af41 	bne.w	8007cf4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f814 	bl	8007ea0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007e96:	2300      	movs	r3, #0
  }
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3720      	adds	r7, #32
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0210 	orr.w	r2, r2, #16
 8007ece:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0201 	bic.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6919      	ldr	r1, [r3, #16]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b3c      	ldr	r3, [pc, #240]	@ (8007fdc <SPI_CloseTransfer+0x13c>)
 8007eec:	400b      	ands	r3, r1
 8007eee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007efe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d014      	beq.n	8007f36 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00f      	beq.n	8007f36 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0220 	orr.w	r2, r2, #32
 8007f34:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d014      	beq.n	8007f6c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f52:	f043 0204 	orr.w	r2, r3, #4
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f6a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7c:	f043 0201 	orr.w	r2, r3, #1
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f94:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00f      	beq.n	8007fc0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fa6:	f043 0208 	orr.w	r2, r3, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fbe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	fffffc90 	.word	0xfffffc90

08007fe0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	4613      	mov	r3, r2
 8007fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ff0:	e010      	b.n	8008014 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ff2:	f7f9 ff63 	bl	8001ebc <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d803      	bhi.n	800800a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d102      	bne.n	8008010 <SPI_WaitOnFlagUntilTimeout+0x30>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e00f      	b.n	8008034 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4013      	ands	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	429a      	cmp	r2, r3
 8008030:	d0df      	beq.n	8007ff2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3307      	adds	r3, #7
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	fb02 f303 	mul.w	r3, r2, r3
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e049      	b.n	8008118 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7f9 fdfb 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3304      	adds	r3, #4
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f000 fd59 	bl	8008b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d001      	beq.n	8008138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e054      	b.n	80081e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a26      	ldr	r2, [pc, #152]	@ (80081f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008162:	d01d      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a22      	ldr	r2, [pc, #136]	@ (80081f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a21      	ldr	r2, [pc, #132]	@ (80081f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1f      	ldr	r2, [pc, #124]	@ (80081fc <HAL_TIM_Base_Start_IT+0xdc>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1e      	ldr	r2, [pc, #120]	@ (8008200 <HAL_TIM_Base_Start_IT+0xe0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1c      	ldr	r2, [pc, #112]	@ (8008204 <HAL_TIM_Base_Start_IT+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1b      	ldr	r2, [pc, #108]	@ (8008208 <HAL_TIM_Base_Start_IT+0xe8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d115      	bne.n	80081cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	4b19      	ldr	r3, [pc, #100]	@ (800820c <HAL_TIM_Base_Start_IT+0xec>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b06      	cmp	r3, #6
 80081b0:	d015      	beq.n	80081de <HAL_TIM_Base_Start_IT+0xbe>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b8:	d011      	beq.n	80081de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ca:	e008      	b.n	80081de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0201 	orr.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40010000 	.word	0x40010000
 80081f4:	40000400 	.word	0x40000400
 80081f8:	40000800 	.word	0x40000800
 80081fc:	40000c00 	.word	0x40000c00
 8008200:	40010400 	.word	0x40010400
 8008204:	40001800 	.word	0x40001800
 8008208:	40014000 	.word	0x40014000
 800820c:	00010007 	.word	0x00010007

08008210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e049      	b.n	80082b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f841 	bl	80082be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fc8a 	bl	8008b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_TIM_PWM_Start+0x24>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	bf14      	ite	ne
 80082f0:	2301      	movne	r3, #1
 80082f2:	2300      	moveq	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	e03c      	b.n	8008372 <HAL_TIM_PWM_Start+0x9e>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d109      	bne.n	8008312 <HAL_TIM_PWM_Start+0x3e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b01      	cmp	r3, #1
 8008308:	bf14      	ite	ne
 800830a:	2301      	movne	r3, #1
 800830c:	2300      	moveq	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	e02f      	b.n	8008372 <HAL_TIM_PWM_Start+0x9e>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d109      	bne.n	800832c <HAL_TIM_PWM_Start+0x58>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	e022      	b.n	8008372 <HAL_TIM_PWM_Start+0x9e>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b0c      	cmp	r3, #12
 8008330:	d109      	bne.n	8008346 <HAL_TIM_PWM_Start+0x72>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b01      	cmp	r3, #1
 800833c:	bf14      	ite	ne
 800833e:	2301      	movne	r3, #1
 8008340:	2300      	moveq	r3, #0
 8008342:	b2db      	uxtb	r3, r3
 8008344:	e015      	b.n	8008372 <HAL_TIM_PWM_Start+0x9e>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b10      	cmp	r3, #16
 800834a:	d109      	bne.n	8008360 <HAL_TIM_PWM_Start+0x8c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	bf14      	ite	ne
 8008358:	2301      	movne	r3, #1
 800835a:	2300      	moveq	r3, #0
 800835c:	b2db      	uxtb	r3, r3
 800835e:	e008      	b.n	8008372 <HAL_TIM_PWM_Start+0x9e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b01      	cmp	r3, #1
 800836a:	bf14      	ite	ne
 800836c:	2301      	movne	r3, #1
 800836e:	2300      	moveq	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0a1      	b.n	80084be <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <HAL_TIM_PWM_Start+0xb6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008388:	e023      	b.n	80083d2 <HAL_TIM_PWM_Start+0xfe>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d104      	bne.n	800839a <HAL_TIM_PWM_Start+0xc6>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008398:	e01b      	b.n	80083d2 <HAL_TIM_PWM_Start+0xfe>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d104      	bne.n	80083aa <HAL_TIM_PWM_Start+0xd6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083a8:	e013      	b.n	80083d2 <HAL_TIM_PWM_Start+0xfe>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_PWM_Start+0xe6>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083b8:	e00b      	b.n	80083d2 <HAL_TIM_PWM_Start+0xfe>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d104      	bne.n	80083ca <HAL_TIM_PWM_Start+0xf6>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083c8:	e003      	b.n	80083d2 <HAL_TIM_PWM_Start+0xfe>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2201      	movs	r2, #1
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 ffde 	bl	800939c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a38      	ldr	r2, [pc, #224]	@ (80084c8 <HAL_TIM_PWM_Start+0x1f4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <HAL_TIM_PWM_Start+0x13e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a37      	ldr	r2, [pc, #220]	@ (80084cc <HAL_TIM_PWM_Start+0x1f8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00e      	beq.n	8008412 <HAL_TIM_PWM_Start+0x13e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a35      	ldr	r2, [pc, #212]	@ (80084d0 <HAL_TIM_PWM_Start+0x1fc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d009      	beq.n	8008412 <HAL_TIM_PWM_Start+0x13e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a34      	ldr	r2, [pc, #208]	@ (80084d4 <HAL_TIM_PWM_Start+0x200>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <HAL_TIM_PWM_Start+0x13e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a32      	ldr	r2, [pc, #200]	@ (80084d8 <HAL_TIM_PWM_Start+0x204>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d101      	bne.n	8008416 <HAL_TIM_PWM_Start+0x142>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <HAL_TIM_PWM_Start+0x144>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800842a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a25      	ldr	r2, [pc, #148]	@ (80084c8 <HAL_TIM_PWM_Start+0x1f4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d022      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800843e:	d01d      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a25      	ldr	r2, [pc, #148]	@ (80084dc <HAL_TIM_PWM_Start+0x208>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a24      	ldr	r2, [pc, #144]	@ (80084e0 <HAL_TIM_PWM_Start+0x20c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a22      	ldr	r2, [pc, #136]	@ (80084e4 <HAL_TIM_PWM_Start+0x210>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a1a      	ldr	r2, [pc, #104]	@ (80084cc <HAL_TIM_PWM_Start+0x1f8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <HAL_TIM_PWM_Start+0x214>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIM_PWM_Start+0x1a8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a16      	ldr	r2, [pc, #88]	@ (80084d0 <HAL_TIM_PWM_Start+0x1fc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d115      	bne.n	80084a8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <HAL_TIM_PWM_Start+0x218>)
 8008484:	4013      	ands	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b06      	cmp	r3, #6
 800848c:	d015      	beq.n	80084ba <HAL_TIM_PWM_Start+0x1e6>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008494:	d011      	beq.n	80084ba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0201 	orr.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a6:	e008      	b.n	80084ba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e000      	b.n	80084bc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40001800 	.word	0x40001800
 80084ec:	00010007 	.word	0x00010007

080084f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0202 	mvn.w	r2, #2
 8008524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 faf6 	bl	8008b2c <HAL_TIM_IC_CaptureCallback>
 8008540:	e005      	b.n	800854e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fae8 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 faf9 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01b      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0204 	mvn.w	r2, #4
 8008570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fad0 	bl	8008b2c <HAL_TIM_IC_CaptureCallback>
 800858c:	e005      	b.n	800859a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fac2 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fad3 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01b      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0208 	mvn.w	r2, #8
 80085bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2204      	movs	r2, #4
 80085c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 faaa 	bl	8008b2c <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa9c 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 faad 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01b      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2208      	movs	r2, #8
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa84 	bl	8008b2c <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa76 	bl	8008b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fa87 	bl	8008b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0201 	mvn.w	r2, #1
 8008654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7f8 fe7c 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d104      	bne.n	8008670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00c      	beq.n	800868a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f887 	bl	8009798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 f87f 	bl	80097ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa41 	bl	8008b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f06f 0220 	mvn.w	r2, #32
 80086ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f847 	bl	8009784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800871a:	2302      	movs	r3, #2
 800871c:	e0ff      	b.n	800891e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b14      	cmp	r3, #20
 800872a:	f200 80f0 	bhi.w	800890e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800872e:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	08008789 	.word	0x08008789
 8008738:	0800890f 	.word	0x0800890f
 800873c:	0800890f 	.word	0x0800890f
 8008740:	0800890f 	.word	0x0800890f
 8008744:	080087c9 	.word	0x080087c9
 8008748:	0800890f 	.word	0x0800890f
 800874c:	0800890f 	.word	0x0800890f
 8008750:	0800890f 	.word	0x0800890f
 8008754:	0800880b 	.word	0x0800880b
 8008758:	0800890f 	.word	0x0800890f
 800875c:	0800890f 	.word	0x0800890f
 8008760:	0800890f 	.word	0x0800890f
 8008764:	0800884b 	.word	0x0800884b
 8008768:	0800890f 	.word	0x0800890f
 800876c:	0800890f 	.word	0x0800890f
 8008770:	0800890f 	.word	0x0800890f
 8008774:	0800888d 	.word	0x0800888d
 8008778:	0800890f 	.word	0x0800890f
 800877c:	0800890f 	.word	0x0800890f
 8008780:	0800890f 	.word	0x0800890f
 8008784:	080088cd 	.word	0x080088cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fa90 	bl	8008cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0208 	orr.w	r2, r2, #8
 80087a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0204 	bic.w	r2, r2, #4
 80087b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6999      	ldr	r1, [r3, #24]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	619a      	str	r2, [r3, #24]
      break;
 80087c6:	e0a5      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fb00 	bl	8008dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6999      	ldr	r1, [r3, #24]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	021a      	lsls	r2, r3, #8
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	619a      	str	r2, [r3, #24]
      break;
 8008808:	e084      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fb69 	bl	8008ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69da      	ldr	r2, [r3, #28]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0208 	orr.w	r2, r2, #8
 8008824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0204 	bic.w	r2, r2, #4
 8008834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69d9      	ldr	r1, [r3, #28]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	61da      	str	r2, [r3, #28]
      break;
 8008848:	e064      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fbd1 	bl	8008ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69d9      	ldr	r1, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	021a      	lsls	r2, r3, #8
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	61da      	str	r2, [r3, #28]
      break;
 800888a:	e043      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fc1a 	bl	80090cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0208 	orr.w	r2, r2, #8
 80088a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0204 	bic.w	r2, r2, #4
 80088b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80088ca:	e023      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68b9      	ldr	r1, [r7, #8]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fc5e 	bl	8009194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	021a      	lsls	r2, r3, #8
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800890c:	e002      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]
      break;
 8008912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop

08008928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_TIM_ConfigClockSource+0x1c>
 8008940:	2302      	movs	r3, #2
 8008942:	e0dc      	b.n	8008afe <HAL_TIM_ConfigClockSource+0x1d6>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	4b6a      	ldr	r3, [pc, #424]	@ (8008b08 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008960:	4013      	ands	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800896a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a64      	ldr	r2, [pc, #400]	@ (8008b0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	f000 80a9 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008980:	4a62      	ldr	r2, [pc, #392]	@ (8008b0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f200 80ae 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008988:	4a61      	ldr	r2, [pc, #388]	@ (8008b10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f000 80a1 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008990:	4a5f      	ldr	r2, [pc, #380]	@ (8008b10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f200 80a6 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008998:	4a5e      	ldr	r2, [pc, #376]	@ (8008b14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 8099 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089a0:	4a5c      	ldr	r2, [pc, #368]	@ (8008b14 <HAL_TIM_ConfigClockSource+0x1ec>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f200 809e 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089ac:	f000 8091 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80089b4:	f200 8096 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089bc:	f000 8089 	beq.w	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089c4:	f200 808e 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089cc:	d03e      	beq.n	8008a4c <HAL_TIM_ConfigClockSource+0x124>
 80089ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d2:	f200 8087 	bhi.w	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089da:	f000 8086 	beq.w	8008aea <HAL_TIM_ConfigClockSource+0x1c2>
 80089de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e2:	d87f      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089e4:	2b70      	cmp	r3, #112	@ 0x70
 80089e6:	d01a      	beq.n	8008a1e <HAL_TIM_ConfigClockSource+0xf6>
 80089e8:	2b70      	cmp	r3, #112	@ 0x70
 80089ea:	d87b      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089ec:	2b60      	cmp	r3, #96	@ 0x60
 80089ee:	d050      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x16a>
 80089f0:	2b60      	cmp	r3, #96	@ 0x60
 80089f2:	d877      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089f4:	2b50      	cmp	r3, #80	@ 0x50
 80089f6:	d03c      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x14a>
 80089f8:	2b50      	cmp	r3, #80	@ 0x50
 80089fa:	d873      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089fc:	2b40      	cmp	r3, #64	@ 0x40
 80089fe:	d058      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x18a>
 8008a00:	2b40      	cmp	r3, #64	@ 0x40
 8008a02:	d86f      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a04:	2b30      	cmp	r3, #48	@ 0x30
 8008a06:	d064      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a08:	2b30      	cmp	r3, #48	@ 0x30
 8008a0a:	d86b      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d060      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	d867      	bhi.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d05c      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d05a      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a1c:	e062      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a2e:	f000 fc95 	bl	800935c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	609a      	str	r2, [r3, #8]
      break;
 8008a4a:	e04f      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a5c:	f000 fc7e 	bl	800935c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a6e:	609a      	str	r2, [r3, #8]
      break;
 8008a70:	e03c      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f000 fbee 	bl	8009260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2150      	movs	r1, #80	@ 0x50
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fc48 	bl	8009320 <TIM_ITRx_SetConfig>
      break;
 8008a90:	e02c      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f000 fc0d 	bl	80092be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2160      	movs	r1, #96	@ 0x60
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fc38 	bl	8009320 <TIM_ITRx_SetConfig>
      break;
 8008ab0:	e01c      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 fbce 	bl	8009260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2140      	movs	r1, #64	@ 0x40
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fc28 	bl	8009320 <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e00c      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f000 fc1f 	bl	8009320 <TIM_ITRx_SetConfig>
      break;
 8008ae2:	e003      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae8:	e000      	b.n	8008aec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	ffceff88 	.word	0xffceff88
 8008b0c:	00100040 	.word	0x00100040
 8008b10:	00100030 	.word	0x00100030
 8008b14:	00100020 	.word	0x00100020

08008b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a46      	ldr	r2, [pc, #280]	@ (8008c94 <TIM_Base_SetConfig+0x12c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b86:	d00f      	beq.n	8008ba8 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a43      	ldr	r2, [pc, #268]	@ (8008c98 <TIM_Base_SetConfig+0x130>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00b      	beq.n	8008ba8 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a42      	ldr	r2, [pc, #264]	@ (8008c9c <TIM_Base_SetConfig+0x134>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <TIM_Base_SetConfig+0x40>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a41      	ldr	r2, [pc, #260]	@ (8008ca0 <TIM_Base_SetConfig+0x138>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_Base_SetConfig+0x40>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a40      	ldr	r2, [pc, #256]	@ (8008ca4 <TIM_Base_SetConfig+0x13c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d108      	bne.n	8008bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	@ (8008c94 <TIM_Base_SetConfig+0x12c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01f      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc8:	d01b      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a32      	ldr	r2, [pc, #200]	@ (8008c98 <TIM_Base_SetConfig+0x130>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d017      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a31      	ldr	r2, [pc, #196]	@ (8008c9c <TIM_Base_SetConfig+0x134>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a30      	ldr	r2, [pc, #192]	@ (8008ca0 <TIM_Base_SetConfig+0x138>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2f      	ldr	r2, [pc, #188]	@ (8008ca4 <TIM_Base_SetConfig+0x13c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2e      	ldr	r2, [pc, #184]	@ (8008ca8 <TIM_Base_SetConfig+0x140>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8008cac <TIM_Base_SetConfig+0x144>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_Base_SetConfig+0x9a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8008cb0 <TIM_Base_SetConfig+0x148>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d108      	bne.n	8008c14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a16      	ldr	r2, [pc, #88]	@ (8008c94 <TIM_Base_SetConfig+0x12c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00f      	beq.n	8008c60 <TIM_Base_SetConfig+0xf8>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a18      	ldr	r2, [pc, #96]	@ (8008ca4 <TIM_Base_SetConfig+0x13c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_Base_SetConfig+0xf8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a17      	ldr	r2, [pc, #92]	@ (8008ca8 <TIM_Base_SetConfig+0x140>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_Base_SetConfig+0xf8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a16      	ldr	r2, [pc, #88]	@ (8008cac <TIM_Base_SetConfig+0x144>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_Base_SetConfig+0xf8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	@ (8008cb0 <TIM_Base_SetConfig+0x148>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d103      	bne.n	8008c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d105      	bne.n	8008c86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]
  }
}
 8008c86:	bf00      	nop
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40000400 	.word	0x40000400
 8008c9c:	40000800 	.word	0x40000800
 8008ca0:	40000c00 	.word	0x40000c00
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	40014400 	.word	0x40014400
 8008cb0:	40014800 	.word	0x40014800

08008cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f023 0201 	bic.w	r2, r3, #1
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4b37      	ldr	r3, [pc, #220]	@ (8008dbc <TIM_OC1_SetConfig+0x108>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 0302 	bic.w	r3, r3, #2
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8008dc0 <TIM_OC1_SetConfig+0x10c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00f      	beq.n	8008d30 <TIM_OC1_SetConfig+0x7c>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a2c      	ldr	r2, [pc, #176]	@ (8008dc4 <TIM_OC1_SetConfig+0x110>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00b      	beq.n	8008d30 <TIM_OC1_SetConfig+0x7c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8008dc8 <TIM_OC1_SetConfig+0x114>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d007      	beq.n	8008d30 <TIM_OC1_SetConfig+0x7c>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a2a      	ldr	r2, [pc, #168]	@ (8008dcc <TIM_OC1_SetConfig+0x118>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d003      	beq.n	8008d30 <TIM_OC1_SetConfig+0x7c>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a29      	ldr	r2, [pc, #164]	@ (8008dd0 <TIM_OC1_SetConfig+0x11c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10c      	bne.n	8008d4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0308 	bic.w	r3, r3, #8
 8008d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f023 0304 	bic.w	r3, r3, #4
 8008d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc0 <TIM_OC1_SetConfig+0x10c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <TIM_OC1_SetConfig+0xbe>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc4 <TIM_OC1_SetConfig+0x110>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_OC1_SetConfig+0xbe>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc8 <TIM_OC1_SetConfig+0x114>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_OC1_SetConfig+0xbe>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a19      	ldr	r2, [pc, #100]	@ (8008dcc <TIM_OC1_SetConfig+0x118>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_OC1_SetConfig+0xbe>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a18      	ldr	r2, [pc, #96]	@ (8008dd0 <TIM_OC1_SetConfig+0x11c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d111      	bne.n	8008d96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	621a      	str	r2, [r3, #32]
}
 8008db0:	bf00      	nop
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	fffeff8f 	.word	0xfffeff8f
 8008dc0:	40010000 	.word	0x40010000
 8008dc4:	40010400 	.word	0x40010400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800

08008dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	f023 0210 	bic.w	r2, r3, #16
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4b34      	ldr	r3, [pc, #208]	@ (8008ed0 <TIM_OC2_SetConfig+0xfc>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f023 0320 	bic.w	r3, r3, #32
 8008e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a29      	ldr	r2, [pc, #164]	@ (8008ed4 <TIM_OC2_SetConfig+0x100>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d003      	beq.n	8008e3c <TIM_OC2_SetConfig+0x68>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a28      	ldr	r2, [pc, #160]	@ (8008ed8 <TIM_OC2_SetConfig+0x104>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d10d      	bne.n	8008e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <TIM_OC2_SetConfig+0x100>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00f      	beq.n	8008e80 <TIM_OC2_SetConfig+0xac>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed8 <TIM_OC2_SetConfig+0x104>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00b      	beq.n	8008e80 <TIM_OC2_SetConfig+0xac>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <TIM_OC2_SetConfig+0x108>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d007      	beq.n	8008e80 <TIM_OC2_SetConfig+0xac>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee0 <TIM_OC2_SetConfig+0x10c>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_OC2_SetConfig+0xac>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee4 <TIM_OC2_SetConfig+0x110>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d113      	bne.n	8008ea8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	feff8fff 	.word	0xfeff8fff
 8008ed4:	40010000 	.word	0x40010000
 8008ed8:	40010400 	.word	0x40010400
 8008edc:	40014000 	.word	0x40014000
 8008ee0:	40014400 	.word	0x40014400
 8008ee4:	40014800 	.word	0x40014800

08008ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	4b33      	ldr	r3, [pc, #204]	@ (8008fe0 <TIM_OC3_SetConfig+0xf8>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a28      	ldr	r2, [pc, #160]	@ (8008fe4 <TIM_OC3_SetConfig+0xfc>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_OC3_SetConfig+0x66>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a27      	ldr	r2, [pc, #156]	@ (8008fe8 <TIM_OC3_SetConfig+0x100>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d10d      	bne.n	8008f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe4 <TIM_OC3_SetConfig+0xfc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d00f      	beq.n	8008f92 <TIM_OC3_SetConfig+0xaa>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a1c      	ldr	r2, [pc, #112]	@ (8008fe8 <TIM_OC3_SetConfig+0x100>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <TIM_OC3_SetConfig+0xaa>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fec <TIM_OC3_SetConfig+0x104>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d007      	beq.n	8008f92 <TIM_OC3_SetConfig+0xaa>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff0 <TIM_OC3_SetConfig+0x108>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d003      	beq.n	8008f92 <TIM_OC3_SetConfig+0xaa>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a19      	ldr	r2, [pc, #100]	@ (8008ff4 <TIM_OC3_SetConfig+0x10c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d113      	bne.n	8008fba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	621a      	str	r2, [r3, #32]
}
 8008fd4:	bf00      	nop
 8008fd6:	371c      	adds	r7, #28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	fffeff8f 	.word	0xfffeff8f
 8008fe4:	40010000 	.word	0x40010000
 8008fe8:	40010400 	.word	0x40010400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40014400 	.word	0x40014400
 8008ff4:	40014800 	.word	0x40014800

08008ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4b24      	ldr	r3, [pc, #144]	@ (80090b4 <TIM_OC4_SetConfig+0xbc>)
 8009024:	4013      	ands	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800902e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	031b      	lsls	r3, r3, #12
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	4313      	orrs	r3, r2
 800904e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a19      	ldr	r2, [pc, #100]	@ (80090b8 <TIM_OC4_SetConfig+0xc0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00f      	beq.n	8009078 <TIM_OC4_SetConfig+0x80>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a18      	ldr	r2, [pc, #96]	@ (80090bc <TIM_OC4_SetConfig+0xc4>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00b      	beq.n	8009078 <TIM_OC4_SetConfig+0x80>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a17      	ldr	r2, [pc, #92]	@ (80090c0 <TIM_OC4_SetConfig+0xc8>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d007      	beq.n	8009078 <TIM_OC4_SetConfig+0x80>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a16      	ldr	r2, [pc, #88]	@ (80090c4 <TIM_OC4_SetConfig+0xcc>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_OC4_SetConfig+0x80>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a15      	ldr	r2, [pc, #84]	@ (80090c8 <TIM_OC4_SetConfig+0xd0>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d109      	bne.n	800908c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800907e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	019b      	lsls	r3, r3, #6
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	621a      	str	r2, [r3, #32]
}
 80090a6:	bf00      	nop
 80090a8:	371c      	adds	r7, #28
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	feff8fff 	.word	0xfeff8fff
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800

080090cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b21      	ldr	r3, [pc, #132]	@ (800917c <TIM_OC5_SetConfig+0xb0>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800910c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <TIM_OC5_SetConfig+0xb4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00f      	beq.n	8009142 <TIM_OC5_SetConfig+0x76>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a17      	ldr	r2, [pc, #92]	@ (8009184 <TIM_OC5_SetConfig+0xb8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00b      	beq.n	8009142 <TIM_OC5_SetConfig+0x76>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a16      	ldr	r2, [pc, #88]	@ (8009188 <TIM_OC5_SetConfig+0xbc>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d007      	beq.n	8009142 <TIM_OC5_SetConfig+0x76>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a15      	ldr	r2, [pc, #84]	@ (800918c <TIM_OC5_SetConfig+0xc0>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_OC5_SetConfig+0x76>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a14      	ldr	r2, [pc, #80]	@ (8009190 <TIM_OC5_SetConfig+0xc4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d109      	bne.n	8009156 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	621a      	str	r2, [r3, #32]
}
 8009170:	bf00      	nop
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	fffeff8f 	.word	0xfffeff8f
 8009180:	40010000 	.word	0x40010000
 8009184:	40010400 	.word	0x40010400
 8009188:	40014000 	.word	0x40014000
 800918c:	40014400 	.word	0x40014400
 8009190:	40014800 	.word	0x40014800

08009194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4b22      	ldr	r3, [pc, #136]	@ (8009248 <TIM_OC6_SetConfig+0xb4>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	051b      	lsls	r3, r3, #20
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a19      	ldr	r2, [pc, #100]	@ (800924c <TIM_OC6_SetConfig+0xb8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d00f      	beq.n	800920c <TIM_OC6_SetConfig+0x78>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a18      	ldr	r2, [pc, #96]	@ (8009250 <TIM_OC6_SetConfig+0xbc>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00b      	beq.n	800920c <TIM_OC6_SetConfig+0x78>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a17      	ldr	r2, [pc, #92]	@ (8009254 <TIM_OC6_SetConfig+0xc0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <TIM_OC6_SetConfig+0x78>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a16      	ldr	r2, [pc, #88]	@ (8009258 <TIM_OC6_SetConfig+0xc4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_OC6_SetConfig+0x78>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a15      	ldr	r2, [pc, #84]	@ (800925c <TIM_OC6_SetConfig+0xc8>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d109      	bne.n	8009220 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	feff8fff 	.word	0xfeff8fff
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400
 8009254:	40014000 	.word	0x40014000
 8009258:	40014400 	.word	0x40014400
 800925c:	40014800 	.word	0x40014800

08009260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f023 0201 	bic.w	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800928a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 030a 	bic.w	r3, r3, #10
 800929c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092be:	b480      	push	{r7}
 80092c0:	b087      	sub	sp, #28
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	f023 0210 	bic.w	r2, r3, #16
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	031b      	lsls	r3, r3, #12
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	621a      	str	r2, [r3, #32]
}
 8009312:	bf00      	nop
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
	...

08009320 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4b09      	ldr	r3, [pc, #36]	@ (8009358 <TIM_ITRx_SetConfig+0x38>)
 8009334:	4013      	ands	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4313      	orrs	r3, r2
 800933e:	f043 0307 	orr.w	r3, r3, #7
 8009342:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	609a      	str	r2, [r3, #8]
}
 800934a:	bf00      	nop
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	ffcfff8f 	.word	0xffcfff8f

0800935c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	021a      	lsls	r2, r3, #8
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	431a      	orrs	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	4313      	orrs	r3, r2
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	609a      	str	r2, [r3, #8]
}
 8009390:	bf00      	nop
 8009392:	371c      	adds	r7, #28
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f003 031f 	and.w	r3, r3, #31
 80093ae:	2201      	movs	r2, #1
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a1a      	ldr	r2, [r3, #32]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	43db      	mvns	r3, r3
 80093be:	401a      	ands	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a1a      	ldr	r2, [r3, #32]
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f003 031f 	and.w	r3, r3, #31
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	fa01 f303 	lsl.w	r3, r1, r3
 80093d4:	431a      	orrs	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	621a      	str	r2, [r3, #32]
}
 80093da:	bf00      	nop
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
	...

080093e8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <HAL_TIMEx_PWMN_Start+0x24>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	bf14      	ite	ne
 8009404:	2301      	movne	r3, #1
 8009406:	2300      	moveq	r3, #0
 8009408:	b2db      	uxtb	r3, r3
 800940a:	e022      	b.n	8009452 <HAL_TIMEx_PWMN_Start+0x6a>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b04      	cmp	r3, #4
 8009410:	d109      	bne.n	8009426 <HAL_TIMEx_PWMN_Start+0x3e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b01      	cmp	r3, #1
 800941c:	bf14      	ite	ne
 800941e:	2301      	movne	r3, #1
 8009420:	2300      	moveq	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	e015      	b.n	8009452 <HAL_TIMEx_PWMN_Start+0x6a>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b08      	cmp	r3, #8
 800942a:	d109      	bne.n	8009440 <HAL_TIMEx_PWMN_Start+0x58>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b01      	cmp	r3, #1
 8009436:	bf14      	ite	ne
 8009438:	2301      	movne	r3, #1
 800943a:	2300      	moveq	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	e008      	b.n	8009452 <HAL_TIMEx_PWMN_Start+0x6a>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b01      	cmp	r3, #1
 800944a:	bf14      	ite	ne
 800944c:	2301      	movne	r3, #1
 800944e:	2300      	moveq	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e073      	b.n	8009542 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_TIMEx_PWMN_Start+0x82>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009468:	e013      	b.n	8009492 <HAL_TIMEx_PWMN_Start+0xaa>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d104      	bne.n	800947a <HAL_TIMEx_PWMN_Start+0x92>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009478:	e00b      	b.n	8009492 <HAL_TIMEx_PWMN_Start+0xaa>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b08      	cmp	r3, #8
 800947e:	d104      	bne.n	800948a <HAL_TIMEx_PWMN_Start+0xa2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009488:	e003      	b.n	8009492 <HAL_TIMEx_PWMN_Start+0xaa>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2202      	movs	r2, #2
 800948e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2204      	movs	r2, #4
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f990 	bl	80097c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80094ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a25      	ldr	r2, [pc, #148]	@ (800954c <HAL_TIMEx_PWMN_Start+0x164>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d022      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c2:	d01d      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a21      	ldr	r2, [pc, #132]	@ (8009550 <HAL_TIMEx_PWMN_Start+0x168>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d018      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a20      	ldr	r2, [pc, #128]	@ (8009554 <HAL_TIMEx_PWMN_Start+0x16c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009558 <HAL_TIMEx_PWMN_Start+0x170>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00e      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a1d      	ldr	r2, [pc, #116]	@ (800955c <HAL_TIMEx_PWMN_Start+0x174>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d009      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009560 <HAL_TIMEx_PWMN_Start+0x178>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d004      	beq.n	8009500 <HAL_TIMEx_PWMN_Start+0x118>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009564 <HAL_TIMEx_PWMN_Start+0x17c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d115      	bne.n	800952c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	4b18      	ldr	r3, [pc, #96]	@ (8009568 <HAL_TIMEx_PWMN_Start+0x180>)
 8009508:	4013      	ands	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b06      	cmp	r3, #6
 8009510:	d015      	beq.n	800953e <HAL_TIMEx_PWMN_Start+0x156>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009518:	d011      	beq.n	800953e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0201 	orr.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952a:	e008      	b.n	800953e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	e000      	b.n	8009540 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40010400 	.word	0x40010400
 8009560:	40001800 	.word	0x40001800
 8009564:	40014000 	.word	0x40014000
 8009568:	00010007 	.word	0x00010007

0800956c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009580:	2302      	movs	r3, #2
 8009582:	e06d      	b.n	8009660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a30      	ldr	r2, [pc, #192]	@ (800966c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d004      	beq.n	80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a2f      	ldr	r2, [pc, #188]	@ (8009670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d108      	bne.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a20      	ldr	r2, [pc, #128]	@ (800966c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d022      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f6:	d01d      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d018      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d013      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1a      	ldr	r2, [pc, #104]	@ (800967c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00e      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a15      	ldr	r2, [pc, #84]	@ (8009670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d009      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d004      	beq.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d10c      	bne.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800963a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	4313      	orrs	r3, r2
 8009644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40010000 	.word	0x40010000
 8009670:	40010400 	.word	0x40010400
 8009674:	40000400 	.word	0x40000400
 8009678:	40000800 	.word	0x40000800
 800967c:	40000c00 	.word	0x40000c00
 8009680:	40001800 	.word	0x40001800
 8009684:	40014000 	.word	0x40014000

08009688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e065      	b.n	8009770 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a16      	ldr	r2, [pc, #88]	@ (800977c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a14      	ldr	r2, [pc, #80]	@ (8009780 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d115      	bne.n	800975e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973c:	051b      	lsls	r3, r3, #20
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40010000 	.word	0x40010000
 8009780:	40010400 	.word	0x40010400

08009784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	2204      	movs	r2, #4
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a1a      	ldr	r2, [r3, #32]
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	fa01 f303 	lsl.w	r3, r1, r3
 80097f8:	431a      	orrs	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	621a      	str	r2, [r3, #32]
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800980c:	b084      	sub	sp, #16
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	f107 001c 	add.w	r0, r7, #28
 800981a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800981e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009822:	2b01      	cmp	r3, #1
 8009824:	d121      	bne.n	800986a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	4b2c      	ldr	r3, [pc, #176]	@ (80098e8 <USB_CoreInit+0xdc>)
 8009838:	4013      	ands	r3, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800984a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800984e:	2b01      	cmp	r3, #1
 8009850:	d105      	bne.n	800985e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 faf6 	bl	800ae50 <USB_CoreReset>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]
 8009868:	e01b      	b.n	80098a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 faea 	bl	800ae50 <USB_CoreReset>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009880:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	639a      	str	r2, [r3, #56]	@ 0x38
 8009894:	e005      	b.n	80098a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098a2:	7fbb      	ldrb	r3, [r7, #30]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d116      	bne.n	80098d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098b6:	4b0d      	ldr	r3, [pc, #52]	@ (80098ec <USB_CoreInit+0xe0>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f043 0206 	orr.w	r2, r3, #6
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098e2:	b004      	add	sp, #16
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	ffbdffbf 	.word	0xffbdffbf
 80098ec:	03ee0000 	.word	0x03ee0000

080098f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d165      	bne.n	80099d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	4a41      	ldr	r2, [pc, #260]	@ (8009a0c <USB_SetTurnaroundTime+0x11c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d906      	bls.n	800991a <USB_SetTurnaroundTime+0x2a>
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4a40      	ldr	r2, [pc, #256]	@ (8009a10 <USB_SetTurnaroundTime+0x120>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d202      	bcs.n	800991a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009914:	230f      	movs	r3, #15
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	e062      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a10 <USB_SetTurnaroundTime+0x120>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d306      	bcc.n	8009930 <USB_SetTurnaroundTime+0x40>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4a3b      	ldr	r2, [pc, #236]	@ (8009a14 <USB_SetTurnaroundTime+0x124>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d202      	bcs.n	8009930 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800992a:	230e      	movs	r3, #14
 800992c:	617b      	str	r3, [r7, #20]
 800992e:	e057      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4a38      	ldr	r2, [pc, #224]	@ (8009a14 <USB_SetTurnaroundTime+0x124>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d306      	bcc.n	8009946 <USB_SetTurnaroundTime+0x56>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4a37      	ldr	r2, [pc, #220]	@ (8009a18 <USB_SetTurnaroundTime+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d202      	bcs.n	8009946 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009940:	230d      	movs	r3, #13
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	e04c      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4a33      	ldr	r2, [pc, #204]	@ (8009a18 <USB_SetTurnaroundTime+0x128>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d306      	bcc.n	800995c <USB_SetTurnaroundTime+0x6c>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4a32      	ldr	r2, [pc, #200]	@ (8009a1c <USB_SetTurnaroundTime+0x12c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d802      	bhi.n	800995c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009956:	230c      	movs	r3, #12
 8009958:	617b      	str	r3, [r7, #20]
 800995a:	e041      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a1c <USB_SetTurnaroundTime+0x12c>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d906      	bls.n	8009972 <USB_SetTurnaroundTime+0x82>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4a2e      	ldr	r2, [pc, #184]	@ (8009a20 <USB_SetTurnaroundTime+0x130>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d802      	bhi.n	8009972 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800996c:	230b      	movs	r3, #11
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e036      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4a2a      	ldr	r2, [pc, #168]	@ (8009a20 <USB_SetTurnaroundTime+0x130>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d906      	bls.n	8009988 <USB_SetTurnaroundTime+0x98>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4a29      	ldr	r2, [pc, #164]	@ (8009a24 <USB_SetTurnaroundTime+0x134>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d802      	bhi.n	8009988 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009982:	230a      	movs	r3, #10
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	e02b      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4a26      	ldr	r2, [pc, #152]	@ (8009a24 <USB_SetTurnaroundTime+0x134>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d906      	bls.n	800999e <USB_SetTurnaroundTime+0xae>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4a25      	ldr	r2, [pc, #148]	@ (8009a28 <USB_SetTurnaroundTime+0x138>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d202      	bcs.n	800999e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009998:	2309      	movs	r3, #9
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e020      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	4a21      	ldr	r2, [pc, #132]	@ (8009a28 <USB_SetTurnaroundTime+0x138>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d306      	bcc.n	80099b4 <USB_SetTurnaroundTime+0xc4>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4a20      	ldr	r2, [pc, #128]	@ (8009a2c <USB_SetTurnaroundTime+0x13c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d802      	bhi.n	80099b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099ae:	2308      	movs	r3, #8
 80099b0:	617b      	str	r3, [r7, #20]
 80099b2:	e015      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4a1d      	ldr	r2, [pc, #116]	@ (8009a2c <USB_SetTurnaroundTime+0x13c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d906      	bls.n	80099ca <USB_SetTurnaroundTime+0xda>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a1c      	ldr	r2, [pc, #112]	@ (8009a30 <USB_SetTurnaroundTime+0x140>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d202      	bcs.n	80099ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099c4:	2307      	movs	r3, #7
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	e00a      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099ca:	2306      	movs	r3, #6
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	e007      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099d6:	2309      	movs	r3, #9
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	e001      	b.n	80099e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099dc:	2309      	movs	r3, #9
 80099de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	029b      	lsls	r3, r3, #10
 80099f4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099f8:	431a      	orrs	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	00d8acbf 	.word	0x00d8acbf
 8009a10:	00e4e1c0 	.word	0x00e4e1c0
 8009a14:	00f42400 	.word	0x00f42400
 8009a18:	01067380 	.word	0x01067380
 8009a1c:	011a499f 	.word	0x011a499f
 8009a20:	01312cff 	.word	0x01312cff
 8009a24:	014ca43f 	.word	0x014ca43f
 8009a28:	016e3600 	.word	0x016e3600
 8009a2c:	01a6ab1f 	.word	0x01a6ab1f
 8009a30:	01e84800 	.word	0x01e84800

08009a34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f043 0201 	orr.w	r2, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f023 0201 	bic.w	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d115      	bne.n	8009ac6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009aa6:	200a      	movs	r0, #10
 8009aa8:	f7f8 fa14 	bl	8001ed4 <HAL_Delay>
      ms += 10U;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	330a      	adds	r3, #10
 8009ab0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 f93b 	bl	800ad2e <USB_GetMode>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d01e      	beq.n	8009afc <USB_SetCurrentMode+0x84>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ac2:	d9f0      	bls.n	8009aa6 <USB_SetCurrentMode+0x2e>
 8009ac4:	e01a      	b.n	8009afc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d115      	bne.n	8009af8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ad8:	200a      	movs	r0, #10
 8009ada:	f7f8 f9fb 	bl	8001ed4 <HAL_Delay>
      ms += 10U;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	330a      	adds	r3, #10
 8009ae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f922 	bl	800ad2e <USB_GetMode>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <USB_SetCurrentMode+0x84>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2bc7      	cmp	r3, #199	@ 0xc7
 8009af4:	d9f0      	bls.n	8009ad8 <USB_SetCurrentMode+0x60>
 8009af6:	e001      	b.n	8009afc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e005      	b.n	8009b08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b00:	d101      	bne.n	8009b06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b10:	b084      	sub	sp, #16
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	e009      	b.n	8009b44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3340      	adds	r3, #64	@ 0x40
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3301      	adds	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b0e      	cmp	r3, #14
 8009b48:	d9f2      	bls.n	8009b30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d11c      	bne.n	8009b8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	e005      	b.n	8009b98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ba4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10d      	bne.n	8009bc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f968 	bl	8009e8c <USB_SetDevSpeed>
 8009bbc:	e008      	b.n	8009bd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f963 	bl	8009e8c <USB_SetDevSpeed>
 8009bc6:	e003      	b.n	8009bd0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bc8:	2103      	movs	r1, #3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f95e 	bl	8009e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bd0:	2110      	movs	r1, #16
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f8fa 	bl	8009dcc <USB_FlushTxFifo>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f924 	bl	8009e30 <USB_FlushRxFifo>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c04:	461a      	mov	r2, r3
 8009c06:	2300      	movs	r3, #0
 8009c08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c10:	461a      	mov	r2, r3
 8009c12:	2300      	movs	r3, #0
 8009c14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c16:	2300      	movs	r3, #0
 8009c18:	613b      	str	r3, [r7, #16]
 8009c1a:	e043      	b.n	8009ca4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c32:	d118      	bne.n	8009c66 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c46:	461a      	mov	r2, r3
 8009c48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	e013      	b.n	8009c78 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	e008      	b.n	8009c78 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c72:	461a      	mov	r2, r3
 8009c74:	2300      	movs	r3, #0
 8009c76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	461a      	mov	r2, r3
 8009c86:	2300      	movs	r3, #0
 8009c88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c96:	461a      	mov	r2, r3
 8009c98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	613b      	str	r3, [r7, #16]
 8009ca4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ca8:	461a      	mov	r2, r3
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d3b5      	bcc.n	8009c1c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	e043      	b.n	8009d3e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ccc:	d118      	bne.n	8009d00 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	e013      	b.n	8009d12 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	e008      	b.n	8009d12 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1e:	461a      	mov	r2, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d30:	461a      	mov	r2, r3
 8009d32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d42:	461a      	mov	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d3b5      	bcc.n	8009cb6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d105      	bne.n	8009d80 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f043 0210 	orr.w	r2, r3, #16
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699a      	ldr	r2, [r3, #24]
 8009d84:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc4 <USB_DevInit+0x2b4>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	f043 0208 	orr.w	r2, r3, #8
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009da0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d105      	bne.n	8009db4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	4b06      	ldr	r3, [pc, #24]	@ (8009dc8 <USB_DevInit+0x2b8>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dc0:	b004      	add	sp, #16
 8009dc2:	4770      	bx	lr
 8009dc4:	803c3800 	.word	0x803c3800
 8009dc8:	40000004 	.word	0x40000004

08009dcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009de6:	d901      	bls.n	8009dec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e01b      	b.n	8009e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	daf2      	bge.n	8009dda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	019b      	lsls	r3, r3, #6
 8009dfc:	f043 0220 	orr.w	r2, r3, #32
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e10:	d901      	bls.n	8009e16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e006      	b.n	8009e24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d0f0      	beq.n	8009e04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e48:	d901      	bls.n	8009e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e018      	b.n	8009e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	daf2      	bge.n	8009e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2210      	movs	r2, #16
 8009e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3301      	adds	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e6c:	d901      	bls.n	8009e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e006      	b.n	8009e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d0f0      	beq.n	8009e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eac:	4313      	orrs	r3, r2
 8009eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f003 0306 	and.w	r3, r3, #6
 8009ed6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d102      	bne.n	8009ee4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]
 8009ee2:	e00a      	b.n	8009efa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d002      	beq.n	8009ef0 <USB_GetDevSpeed+0x32>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b06      	cmp	r3, #6
 8009eee:	d102      	bne.n	8009ef6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	75fb      	strb	r3, [r7, #23]
 8009ef4:	e001      	b.n	8009efa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ef6:	230f      	movs	r3, #15
 8009ef8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	371c      	adds	r7, #28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d139      	bne.n	8009f98 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f2a:	69da      	ldr	r2, [r3, #28]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 030f 	and.w	r3, r3, #15
 8009f34:	2101      	movs	r1, #1
 8009f36:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	68f9      	ldr	r1, [r7, #12]
 8009f3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f42:	4313      	orrs	r3, r2
 8009f44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d153      	bne.n	800a004 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	791b      	ldrb	r3, [r3, #4]
 8009f76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	059b      	lsls	r3, r3, #22
 8009f7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f80:	431a      	orrs	r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	0159      	lsls	r1, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	440b      	add	r3, r1
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4b20      	ldr	r3, [pc, #128]	@ (800a014 <USB_ActivateEndpoint+0x10c>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	600b      	str	r3, [r1, #0]
 8009f96:	e035      	b.n	800a004 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9e:	69da      	ldr	r2, [r3, #28]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f003 030f 	and.w	r3, r3, #15
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f303 	lsl.w	r3, r1, r3
 8009fae:	041b      	lsls	r3, r3, #16
 8009fb0:	68f9      	ldr	r1, [r7, #12]
 8009fb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d119      	bne.n	800a004 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	791b      	ldrb	r3, [r3, #4]
 8009fea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fec:	430b      	orrs	r3, r1
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	0159      	lsls	r1, r3, #5
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4b05      	ldr	r3, [pc, #20]	@ (800a014 <USB_ActivateEndpoint+0x10c>)
 800a000:	4313      	orrs	r3, r2
 800a002:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	10008000 	.word	0x10008000

0800a018 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	785b      	ldrb	r3, [r3, #1]
 800a030:	2b01      	cmp	r3, #1
 800a032:	d161      	bne.n	800a0f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a04a:	d11f      	bne.n	800a08c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	0151      	lsls	r1, r2, #5
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	440a      	add	r2, r1
 800a062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a066:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a06a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	440a      	add	r2, r1
 800a082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a08a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	2101      	movs	r1, #1
 800a09e:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	43db      	mvns	r3, r3
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 030f 	and.w	r3, r3, #15
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	43db      	mvns	r3, r3
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	0159      	lsls	r1, r3, #5
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	440b      	add	r3, r1
 800a0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4b35      	ldr	r3, [pc, #212]	@ (800a1c8 <USB_DeactivateEndpoint+0x1b0>)
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	600b      	str	r3, [r1, #0]
 800a0f6:	e060      	b.n	800a1ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a10a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a10e:	d11f      	bne.n	800a150 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	440a      	add	r2, r1
 800a126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a12a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a12e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a14a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a14e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a156:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	2101      	movs	r1, #1
 800a162:	fa01 f303 	lsl.w	r3, r1, r3
 800a166:	041b      	lsls	r3, r3, #16
 800a168:	43db      	mvns	r3, r3
 800a16a:	68f9      	ldr	r1, [r7, #12]
 800a16c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a170:	4013      	ands	r3, r2
 800a172:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 030f 	and.w	r3, r3, #15
 800a184:	2101      	movs	r1, #1
 800a186:	fa01 f303 	lsl.w	r3, r1, r3
 800a18a:	041b      	lsls	r3, r3, #16
 800a18c:	43db      	mvns	r3, r3
 800a18e:	68f9      	ldr	r1, [r7, #12]
 800a190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a194:	4013      	ands	r3, r2
 800a196:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	0159      	lsls	r1, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	440b      	add	r3, r1
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <USB_DeactivateEndpoint+0x1b4>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	ec337800 	.word	0xec337800
 800a1cc:	eff37800 	.word	0xeff37800

0800a1d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08a      	sub	sp, #40	@ 0x28
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	f040 8181 	bne.w	800a4f4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d132      	bne.n	800a260 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a206:	691a      	ldr	r2, [r3, #16]
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	0159      	lsls	r1, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	440b      	add	r3, r1
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	4619      	mov	r1, r3
 800a216:	4ba5      	ldr	r3, [pc, #660]	@ (800a4ac <USB_EPStartXfer+0x2dc>)
 800a218:	4013      	ands	r3, r2
 800a21a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	0151      	lsls	r1, r2, #5
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	440a      	add	r2, r1
 800a232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a236:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a23a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	0159      	lsls	r1, r3, #5
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	440b      	add	r3, r1
 800a252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a256:	4619      	mov	r1, r3
 800a258:	4b95      	ldr	r3, [pc, #596]	@ (800a4b0 <USB_EPStartXfer+0x2e0>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	610b      	str	r3, [r1, #16]
 800a25e:	e092      	b.n	800a386 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a26c:	691a      	ldr	r2, [r3, #16]
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	0159      	lsls	r1, r3, #5
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	440b      	add	r3, r1
 800a276:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a27a:	4619      	mov	r1, r3
 800a27c:	4b8c      	ldr	r3, [pc, #560]	@ (800a4b0 <USB_EPStartXfer+0x2e0>)
 800a27e:	4013      	ands	r3, r2
 800a280:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	0159      	lsls	r1, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	440b      	add	r3, r1
 800a298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29c:	4619      	mov	r1, r3
 800a29e:	4b83      	ldr	r3, [pc, #524]	@ (800a4ac <USB_EPStartXfer+0x2dc>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d11a      	bne.n	800a2e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	691a      	ldr	r2, [r3, #16]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d903      	bls.n	800a2be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	0151      	lsls	r1, r2, #5
 800a2d0:	69fa      	ldr	r2, [r7, #28]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2dc:	6113      	str	r3, [r2, #16]
 800a2de:	e01b      	b.n	800a318 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6919      	ldr	r1, [r3, #16]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	440b      	add	r3, r1
 800a2f8:	1e59      	subs	r1, r3, #1
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800a302:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a304:	4b6b      	ldr	r3, [pc, #428]	@ (800a4b4 <USB_EPStartXfer+0x2e4>)
 800a306:	400b      	ands	r3, r1
 800a308:	69b9      	ldr	r1, [r7, #24]
 800a30a:	0148      	lsls	r0, r1, #5
 800a30c:	69f9      	ldr	r1, [r7, #28]
 800a30e:	4401      	add	r1, r0
 800a310:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a314:	4313      	orrs	r3, r2
 800a316:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	691a      	ldr	r2, [r3, #16]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a32e:	69b9      	ldr	r1, [r7, #24]
 800a330:	0148      	lsls	r0, r1, #5
 800a332:	69f9      	ldr	r1, [r7, #28]
 800a334:	4401      	add	r1, r0
 800a336:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a33a:	4313      	orrs	r3, r2
 800a33c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d11f      	bne.n	800a386 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a360:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a364:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	69fa      	ldr	r2, [r7, #28]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a384:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d14b      	bne.n	800a424 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	791b      	ldrb	r3, [r3, #4]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d128      	bne.n	800a402 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d110      	bne.n	800a3e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e00f      	b.n	800a402 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a400:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	440a      	add	r2, r1
 800a418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a41c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	e16a      	b.n	800a6fa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a43e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a442:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d015      	beq.n	800a478 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8152 	beq.w	800a6fa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a45c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	2101      	movs	r1, #1
 800a468:	fa01 f303 	lsl.w	r3, r1, r3
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a472:	4313      	orrs	r3, r2
 800a474:	634b      	str	r3, [r1, #52]	@ 0x34
 800a476:	e140      	b.n	800a6fa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a484:	2b00      	cmp	r3, #0
 800a486:	d117      	bne.n	800a4b8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69ba      	ldr	r2, [r7, #24]
 800a498:	0151      	lsls	r1, r2, #5
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	440a      	add	r2, r1
 800a49e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	e016      	b.n	800a4d8 <USB_EPStartXfer+0x308>
 800a4aa:	bf00      	nop
 800a4ac:	e007ffff 	.word	0xe007ffff
 800a4b0:	fff80000 	.word	0xfff80000
 800a4b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	68d9      	ldr	r1, [r3, #12]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	b298      	uxth	r0, r3
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f9b9 	bl	800a864 <USB_WritePacket>
 800a4f2:	e102      	b.n	800a6fa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	0159      	lsls	r1, r3, #5
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	440b      	add	r3, r1
 800a50a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50e:	4619      	mov	r1, r3
 800a510:	4b7c      	ldr	r3, [pc, #496]	@ (800a704 <USB_EPStartXfer+0x534>)
 800a512:	4013      	ands	r3, r2
 800a514:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	015a      	lsls	r2, r3, #5
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	4413      	add	r3, r2
 800a51e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a522:	691a      	ldr	r2, [r3, #16]
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	0159      	lsls	r1, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	440b      	add	r3, r1
 800a52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a530:	4619      	mov	r1, r3
 800a532:	4b75      	ldr	r3, [pc, #468]	@ (800a708 <USB_EPStartXfer+0x538>)
 800a534:	4013      	ands	r3, r2
 800a536:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d12f      	bne.n	800a59e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a56c:	69b9      	ldr	r1, [r7, #24]
 800a56e:	0148      	lsls	r0, r1, #5
 800a570:	69f9      	ldr	r1, [r7, #28]
 800a572:	4401      	add	r1, r0
 800a574:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a578:	4313      	orrs	r3, r2
 800a57a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a59a:	6113      	str	r3, [r2, #16]
 800a59c:	e05f      	b.n	800a65e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d123      	bne.n	800a5ee <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5bc:	69b9      	ldr	r1, [r7, #24]
 800a5be:	0148      	lsls	r0, r1, #5
 800a5c0:	69f9      	ldr	r1, [r7, #28]
 800a5c2:	4401      	add	r1, r0
 800a5c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	0151      	lsls	r1, r2, #5
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	440a      	add	r2, r1
 800a5e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ea:	6113      	str	r3, [r2, #16]
 800a5ec:	e037      	b.n	800a65e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	691a      	ldr	r2, [r3, #16]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a602:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	8afa      	ldrh	r2, [r7, #22]
 800a60a:	fb03 f202 	mul.w	r2, r3, r2
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	8afb      	ldrh	r3, [r7, #22]
 800a622:	04d9      	lsls	r1, r3, #19
 800a624:	4b39      	ldr	r3, [pc, #228]	@ (800a70c <USB_EPStartXfer+0x53c>)
 800a626:	400b      	ands	r3, r1
 800a628:	69b9      	ldr	r1, [r7, #24]
 800a62a:	0148      	lsls	r0, r1, #5
 800a62c:	69f9      	ldr	r1, [r7, #28]
 800a62e:	4401      	add	r1, r0
 800a630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a634:	4313      	orrs	r3, r2
 800a636:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64e:	69b9      	ldr	r1, [r7, #24]
 800a650:	0148      	lsls	r0, r1, #5
 800a652:	69f9      	ldr	r1, [r7, #28]
 800a654:	4401      	add	r1, r0
 800a656:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a65a:	4313      	orrs	r3, r2
 800a65c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d10d      	bne.n	800a680 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d009      	beq.n	800a680 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	68d9      	ldr	r1, [r3, #12]
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67c:	460a      	mov	r2, r1
 800a67e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	791b      	ldrb	r3, [r3, #4]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d128      	bne.n	800a6da <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a694:	2b00      	cmp	r3, #0
 800a696:	d110      	bne.n	800a6ba <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	0151      	lsls	r1, r2, #5
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	440a      	add	r2, r1
 800a6ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	e00f      	b.n	800a6da <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	0151      	lsls	r1, r2, #5
 800a6cc:	69fa      	ldr	r2, [r7, #28]
 800a6ce:	440a      	add	r2, r1
 800a6d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	69fa      	ldr	r2, [r7, #28]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	fff80000 	.word	0xfff80000
 800a708:	e007ffff 	.word	0xe007ffff
 800a70c:	1ff80000 	.word	0x1ff80000

0800a710 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d14a      	bne.n	800a7c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a746:	f040 8086 	bne.w	800a856 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	0151      	lsls	r1, r2, #5
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	440a      	add	r2, r1
 800a764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a768:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a76c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	0151      	lsls	r1, r2, #5
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	440a      	add	r2, r1
 800a788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a78c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a790:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3301      	adds	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d902      	bls.n	800a7a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7a6:	e056      	b.n	800a856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7c0:	d0e7      	beq.n	800a792 <USB_EPStopXfer+0x82>
 800a7c2:	e048      	b.n	800a856 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7dc:	d13b      	bne.n	800a856 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	7812      	ldrb	r2, [r2, #0]
 800a7f2:	0151      	lsls	r1, r2, #5
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	440a      	add	r2, r1
 800a7f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a800:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	7812      	ldrb	r2, [r2, #0]
 800a816:	0151      	lsls	r1, r2, #5
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	440a      	add	r2, r1
 800a81c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a820:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a824:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a832:	4293      	cmp	r3, r2
 800a834:	d902      	bls.n	800a83c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
          break;
 800a83a:	e00c      	b.n	800a856 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a854:	d0e7      	beq.n	800a826 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a864:	b480      	push	{r7}
 800a866:	b089      	sub	sp, #36	@ 0x24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	4611      	mov	r1, r2
 800a870:	461a      	mov	r2, r3
 800a872:	460b      	mov	r3, r1
 800a874:	71fb      	strb	r3, [r7, #7]
 800a876:	4613      	mov	r3, r2
 800a878:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a882:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a886:	2b00      	cmp	r3, #0
 800a888:	d123      	bne.n	800a8d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a88a:	88bb      	ldrh	r3, [r7, #4]
 800a88c:	3303      	adds	r3, #3
 800a88e:	089b      	lsrs	r3, r3, #2
 800a890:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
 800a896:	e018      	b.n	800a8ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	031a      	lsls	r2, r3, #12
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	61bb      	str	r3, [r7, #24]
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3e2      	bcc.n	800a898 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3724      	adds	r7, #36	@ 0x24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b08b      	sub	sp, #44	@ 0x2c
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	089b      	lsrs	r3, r3, #2
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8fe:	88fb      	ldrh	r3, [r7, #6]
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a906:	2300      	movs	r3, #0
 800a908:	623b      	str	r3, [r7, #32]
 800a90a:	e014      	b.n	800a936 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	601a      	str	r2, [r3, #0]
    pDest++;
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	3301      	adds	r3, #1
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	3301      	adds	r3, #1
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	3301      	adds	r3, #1
 800a928:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	3301      	adds	r3, #1
 800a92e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	3301      	adds	r3, #1
 800a934:	623b      	str	r3, [r7, #32]
 800a936:	6a3a      	ldr	r2, [r7, #32]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d3e6      	bcc.n	800a90c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a93e:	8bfb      	ldrh	r3, [r7, #30]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01e      	beq.n	800a982 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a94e:	461a      	mov	r2, r3
 800a950:	f107 0310 	add.w	r3, r7, #16
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	fa22 f303 	lsr.w	r3, r2, r3
 800a964:	b2da      	uxtb	r2, r3
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	701a      	strb	r2, [r3, #0]
      i++;
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	3301      	adds	r3, #1
 800a96e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	3301      	adds	r3, #1
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a976:	8bfb      	ldrh	r3, [r7, #30]
 800a978:	3b01      	subs	r3, #1
 800a97a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a97c:	8bfb      	ldrh	r3, [r7, #30]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1ea      	bne.n	800a958 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a984:	4618      	mov	r0, r3
 800a986:	372c      	adds	r7, #44	@ 0x2c
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	785b      	ldrb	r3, [r3, #1]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d12c      	bne.n	800aa06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	db12      	blt.n	800a9e4 <USB_EPSetStall+0x54>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00f      	beq.n	800a9e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	e02b      	b.n	800aa5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	db12      	blt.n	800aa3e <USB_EPSetStall+0xae>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00f      	beq.n	800aa3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	785b      	ldrb	r3, [r3, #1]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d128      	bne.n	800aada <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	791b      	ldrb	r3, [r3, #4]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d003      	beq.n	800aab8 <USB_EPClearStall+0x4c>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	791b      	ldrb	r3, [r3, #4]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d138      	bne.n	800ab2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e027      	b.n	800ab2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	0151      	lsls	r1, r2, #5
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	440a      	add	r2, r1
 800aaf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	791b      	ldrb	r3, [r3, #4]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d003      	beq.n	800ab0a <USB_EPClearStall+0x9e>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	791b      	ldrb	r3, [r3, #4]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d10f      	bne.n	800ab2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	0151      	lsls	r1, r2, #5
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	440a      	add	r2, r1
 800ab20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab56:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ab5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ab6c:	68f9      	ldr	r1, [r7, #12]
 800ab6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab72:	4313      	orrs	r3, r2
 800ab74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab9e:	f023 0303 	bic.w	r3, r3, #3
 800aba2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abb2:	f023 0302 	bic.w	r3, r3, #2
 800abb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac20:	68fb      	ldr	r3, [r7, #12]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b085      	sub	sp, #20
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	0c1b      	lsrs	r3, r3, #16
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b085      	sub	sp, #20
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	4013      	ands	r3, r2
 800ac84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	b29b      	uxth	r3, r3
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	4013      	ands	r3, r2
 800acc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acc4:	68bb      	ldr	r3, [r7, #8]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b087      	sub	sp, #28
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ad02:	01db      	lsls	r3, r3, #7
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad20:	68bb      	ldr	r3, [r7, #8]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad66:	4619      	mov	r1, r3
 800ad68:	4b09      	ldr	r3, [pc, #36]	@ (800ad90 <USB_ActivateSetup+0x44>)
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	fffff800 	.word	0xfffff800

0800ad94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	607a      	str	r2, [r7, #4]
 800ada0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	333c      	adds	r3, #60	@ 0x3c
 800adaa:	3304      	adds	r3, #4
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	4a26      	ldr	r2, [pc, #152]	@ (800ae4c <USB_EP0_OutStart+0xb8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d90a      	bls.n	800adce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc8:	d101      	bne.n	800adce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	e037      	b.n	800ae3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add4:	461a      	mov	r2, r3
 800add6:	2300      	movs	r3, #0
 800add8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ade8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfc:	f043 0318 	orr.w	r3, r3, #24
 800ae00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ae14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d10f      	bne.n	800ae3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ae3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	4f54300a 	.word	0x4f54300a

0800ae50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae68:	d901      	bls.n	800ae6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e01b      	b.n	800aea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	daf2      	bge.n	800ae5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f043 0201 	orr.w	r2, r3, #1
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae92:	d901      	bls.n	800ae98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e006      	b.n	800aea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d0f0      	beq.n	800ae86 <USB_CoreReset+0x36>

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aec0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aec4:	f005 fabe 	bl	8010444 <USBD_static_malloc>
 800aec8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d109      	bne.n	800aee4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32b0      	adds	r2, #176	@ 0xb0
 800aeda:	2100      	movs	r1, #0
 800aedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aee0:	2302      	movs	r3, #2
 800aee2:	e0d4      	b.n	800b08e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aee4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aee8:	2100      	movs	r1, #0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f007 fef9 	bl	8012ce2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32b0      	adds	r2, #176	@ 0xb0
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	32b0      	adds	r2, #176	@ 0xb0
 800af0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7c1b      	ldrb	r3, [r3, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d138      	bne.n	800af8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af1c:	4b5e      	ldr	r3, [pc, #376]	@ (800b098 <USBD_CDC_Init+0x1e4>)
 800af1e:	7819      	ldrb	r1, [r3, #0]
 800af20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af24:	2202      	movs	r2, #2
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f005 f969 	bl	80101fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af2c:	4b5a      	ldr	r3, [pc, #360]	@ (800b098 <USBD_CDC_Init+0x1e4>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 020f 	and.w	r2, r3, #15
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	440b      	add	r3, r1
 800af40:	3324      	adds	r3, #36	@ 0x24
 800af42:	2201      	movs	r2, #1
 800af44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af46:	4b55      	ldr	r3, [pc, #340]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800af48:	7819      	ldrb	r1, [r3, #0]
 800af4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af4e:	2202      	movs	r2, #2
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f005 f954 	bl	80101fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af56:	4b51      	ldr	r3, [pc, #324]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	f003 020f 	and.w	r2, r3, #15
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	440b      	add	r3, r1
 800af6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af6e:	2201      	movs	r2, #1
 800af70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af72:	4b4b      	ldr	r3, [pc, #300]	@ (800b0a0 <USBD_CDC_Init+0x1ec>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 020f 	and.w	r2, r3, #15
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	3326      	adds	r3, #38	@ 0x26
 800af88:	2210      	movs	r2, #16
 800af8a:	801a      	strh	r2, [r3, #0]
 800af8c:	e035      	b.n	800affa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af8e:	4b42      	ldr	r3, [pc, #264]	@ (800b098 <USBD_CDC_Init+0x1e4>)
 800af90:	7819      	ldrb	r1, [r3, #0]
 800af92:	2340      	movs	r3, #64	@ 0x40
 800af94:	2202      	movs	r2, #2
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f005 f931 	bl	80101fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af9c:	4b3e      	ldr	r3, [pc, #248]	@ (800b098 <USBD_CDC_Init+0x1e4>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	f003 020f 	and.w	r2, r3, #15
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	440b      	add	r3, r1
 800afb0:	3324      	adds	r3, #36	@ 0x24
 800afb2:	2201      	movs	r2, #1
 800afb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afb6:	4b39      	ldr	r3, [pc, #228]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800afb8:	7819      	ldrb	r1, [r3, #0]
 800afba:	2340      	movs	r3, #64	@ 0x40
 800afbc:	2202      	movs	r2, #2
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f005 f91d 	bl	80101fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afc4:	4b35      	ldr	r3, [pc, #212]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f003 020f 	and.w	r2, r3, #15
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	440b      	add	r3, r1
 800afd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afdc:	2201      	movs	r2, #1
 800afde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800afe0:	4b2f      	ldr	r3, [pc, #188]	@ (800b0a0 <USBD_CDC_Init+0x1ec>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 020f 	and.w	r2, r3, #15
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	440b      	add	r3, r1
 800aff4:	3326      	adds	r3, #38	@ 0x26
 800aff6:	2210      	movs	r2, #16
 800aff8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800affa:	4b29      	ldr	r3, [pc, #164]	@ (800b0a0 <USBD_CDC_Init+0x1ec>)
 800affc:	7819      	ldrb	r1, [r3, #0]
 800affe:	2308      	movs	r3, #8
 800b000:	2203      	movs	r2, #3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f005 f8fb 	bl	80101fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b008:	4b25      	ldr	r3, [pc, #148]	@ (800b0a0 <USBD_CDC_Init+0x1ec>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	f003 020f 	and.w	r2, r3, #15
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	3324      	adds	r3, #36	@ 0x24
 800b01e:	2201      	movs	r2, #1
 800b020:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	33b0      	adds	r3, #176	@ 0xb0
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b058:	2302      	movs	r3, #2
 800b05a:	e018      	b.n	800b08e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7c1b      	ldrb	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b064:	4b0d      	ldr	r3, [pc, #52]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800b066:	7819      	ldrb	r1, [r3, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b06e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f005 f9b2 	bl	80103dc <USBD_LL_PrepareReceive>
 800b078:	e008      	b.n	800b08c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b07a:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <USBD_CDC_Init+0x1e8>)
 800b07c:	7819      	ldrb	r1, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b084:	2340      	movs	r3, #64	@ 0x40
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f005 f9a8 	bl	80103dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	24000097 	.word	0x24000097
 800b09c:	24000098 	.word	0x24000098
 800b0a0:	24000099 	.word	0x24000099

0800b0a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b0b0:	4b3a      	ldr	r3, [pc, #232]	@ (800b19c <USBD_CDC_DeInit+0xf8>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f005 f8c7 	bl	801024a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b0bc:	4b37      	ldr	r3, [pc, #220]	@ (800b19c <USBD_CDC_DeInit+0xf8>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	f003 020f 	and.w	r2, r3, #15
 800b0c4:	6879      	ldr	r1, [r7, #4]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	3324      	adds	r3, #36	@ 0x24
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b0d6:	4b32      	ldr	r3, [pc, #200]	@ (800b1a0 <USBD_CDC_DeInit+0xfc>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f005 f8b4 	bl	801024a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b0e2:	4b2f      	ldr	r3, [pc, #188]	@ (800b1a0 <USBD_CDC_DeInit+0xfc>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 020f 	and.w	r2, r3, #15
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b0fe:	4b29      	ldr	r3, [pc, #164]	@ (800b1a4 <USBD_CDC_DeInit+0x100>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f005 f8a0 	bl	801024a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b10a:	4b26      	ldr	r3, [pc, #152]	@ (800b1a4 <USBD_CDC_DeInit+0x100>)
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f003 020f 	and.w	r2, r3, #15
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	440b      	add	r3, r1
 800b11e:	3324      	adds	r3, #36	@ 0x24
 800b120:	2200      	movs	r2, #0
 800b122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b124:	4b1f      	ldr	r3, [pc, #124]	@ (800b1a4 <USBD_CDC_DeInit+0x100>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	f003 020f 	and.w	r2, r3, #15
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	3326      	adds	r3, #38	@ 0x26
 800b13a:	2200      	movs	r2, #0
 800b13c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	32b0      	adds	r2, #176	@ 0xb0
 800b148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01f      	beq.n	800b190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	33b0      	adds	r3, #176	@ 0xb0
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32b0      	adds	r2, #176	@ 0xb0
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	4618      	mov	r0, r3
 800b174:	f005 f974 	bl	8010460 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	32b0      	adds	r2, #176	@ 0xb0
 800b182:	2100      	movs	r1, #0
 800b184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	24000097 	.word	0x24000097
 800b1a0:	24000098 	.word	0x24000098
 800b1a4:	24000099 	.word	0x24000099

0800b1a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	32b0      	adds	r2, #176	@ 0xb0
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e0bf      	b.n	800b358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d050      	beq.n	800b286 <USBD_CDC_Setup+0xde>
 800b1e4:	2b20      	cmp	r3, #32
 800b1e6:	f040 80af 	bne.w	800b348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	88db      	ldrh	r3, [r3, #6]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d03a      	beq.n	800b268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b25b      	sxtb	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	da1b      	bge.n	800b234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	33b0      	adds	r3, #176	@ 0xb0
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	88d2      	ldrh	r2, [r2, #6]
 800b218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	88db      	ldrh	r3, [r3, #6]
 800b21e:	2b07      	cmp	r3, #7
 800b220:	bf28      	it	cs
 800b222:	2307      	movcs	r3, #7
 800b224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	89fa      	ldrh	r2, [r7, #14]
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fd7d 	bl	800cd2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b232:	e090      	b.n	800b356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	785a      	ldrb	r2, [r3, #1]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	88db      	ldrh	r3, [r3, #6]
 800b242:	2b3f      	cmp	r3, #63	@ 0x3f
 800b244:	d803      	bhi.n	800b24e <USBD_CDC_Setup+0xa6>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	88db      	ldrh	r3, [r3, #6]
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	e000      	b.n	800b250 <USBD_CDC_Setup+0xa8>
 800b24e:	2240      	movs	r2, #64	@ 0x40
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b256:	6939      	ldr	r1, [r7, #16]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b25e:	461a      	mov	r2, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 fd8f 	bl	800cd84 <USBD_CtlPrepareRx>
      break;
 800b266:	e076      	b.n	800b356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	33b0      	adds	r3, #176	@ 0xb0
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	7850      	ldrb	r0, [r2, #1]
 800b27e:	2200      	movs	r2, #0
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	4798      	blx	r3
      break;
 800b284:	e067      	b.n	800b356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	785b      	ldrb	r3, [r3, #1]
 800b28a:	2b0b      	cmp	r3, #11
 800b28c:	d851      	bhi.n	800b332 <USBD_CDC_Setup+0x18a>
 800b28e:	a201      	add	r2, pc, #4	@ (adr r2, 800b294 <USBD_CDC_Setup+0xec>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b2c5 	.word	0x0800b2c5
 800b298:	0800b341 	.word	0x0800b341
 800b29c:	0800b333 	.word	0x0800b333
 800b2a0:	0800b333 	.word	0x0800b333
 800b2a4:	0800b333 	.word	0x0800b333
 800b2a8:	0800b333 	.word	0x0800b333
 800b2ac:	0800b333 	.word	0x0800b333
 800b2b0:	0800b333 	.word	0x0800b333
 800b2b4:	0800b333 	.word	0x0800b333
 800b2b8:	0800b333 	.word	0x0800b333
 800b2bc:	0800b2ef 	.word	0x0800b2ef
 800b2c0:	0800b319 	.word	0x0800b319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d107      	bne.n	800b2e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b2d0:	f107 030a 	add.w	r3, r7, #10
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f001 fd27 	bl	800cd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2de:	e032      	b.n	800b346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fca5 	bl	800cc32 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ec:	e02b      	b.n	800b346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d107      	bne.n	800b30a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2fa:	f107 030d 	add.w	r3, r7, #13
 800b2fe:	2201      	movs	r2, #1
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fd12 	bl	800cd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b308:	e01d      	b.n	800b346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 fc90 	bl	800cc32 <USBD_CtlError>
            ret = USBD_FAIL;
 800b312:	2303      	movs	r3, #3
 800b314:	75fb      	strb	r3, [r7, #23]
          break;
 800b316:	e016      	b.n	800b346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b03      	cmp	r3, #3
 800b322:	d00f      	beq.n	800b344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b324:	6839      	ldr	r1, [r7, #0]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f001 fc83 	bl	800cc32 <USBD_CtlError>
            ret = USBD_FAIL;
 800b32c:	2303      	movs	r3, #3
 800b32e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b330:	e008      	b.n	800b344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fc7c 	bl	800cc32 <USBD_CtlError>
          ret = USBD_FAIL;
 800b33a:	2303      	movs	r3, #3
 800b33c:	75fb      	strb	r3, [r7, #23]
          break;
 800b33e:	e002      	b.n	800b346 <USBD_CDC_Setup+0x19e>
          break;
 800b340:	bf00      	nop
 800b342:	e008      	b.n	800b356 <USBD_CDC_Setup+0x1ae>
          break;
 800b344:	bf00      	nop
      }
      break;
 800b346:	e006      	b.n	800b356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fc71 	bl	800cc32 <USBD_CtlError>
      ret = USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	75fb      	strb	r3, [r7, #23]
      break;
 800b354:	bf00      	nop
  }

  return (uint8_t)ret;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	32b0      	adds	r2, #176	@ 0xb0
 800b37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	e065      	b.n	800b456 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	32b0      	adds	r2, #176	@ 0xb0
 800b394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	f003 020f 	and.w	r2, r3, #15
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	440b      	add	r3, r1
 800b3ac:	3318      	adds	r3, #24
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d02f      	beq.n	800b414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b3b4:	78fb      	ldrb	r3, [r7, #3]
 800b3b6:	f003 020f 	and.w	r2, r3, #15
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	3318      	adds	r3, #24
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	78fb      	ldrb	r3, [r7, #3]
 800b3cc:	f003 010f 	and.w	r1, r3, #15
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4403      	add	r3, r0
 800b3dc:	331c      	adds	r3, #28
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3e4:	fb01 f303 	mul.w	r3, r1, r3
 800b3e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d112      	bne.n	800b414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b3ee:	78fb      	ldrb	r3, [r7, #3]
 800b3f0:	f003 020f 	and.w	r2, r3, #15
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	3318      	adds	r3, #24
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b406:	78f9      	ldrb	r1, [r7, #3]
 800b408:	2300      	movs	r3, #0
 800b40a:	2200      	movs	r2, #0
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f004 ffc4 	bl	801039a <USBD_LL_Transmit>
 800b412:	e01f      	b.n	800b454 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	33b0      	adds	r3, #176	@ 0xb0
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d010      	beq.n	800b454 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	33b0      	adds	r3, #176	@ 0xb0
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b450:	78fa      	ldrb	r2, [r7, #3]
 800b452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	32b0      	adds	r2, #176	@ 0xb0
 800b474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	32b0      	adds	r2, #176	@ 0xb0
 800b484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e01a      	b.n	800b4c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f004 ffc2 	bl	801041e <USBD_LL_GetRxDataSize>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	33b0      	adds	r3, #176	@ 0xb0
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	32b0      	adds	r2, #176	@ 0xb0
 800b4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e024      	b.n	800b53a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	33b0      	adds	r3, #176	@ 0xb0
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d019      	beq.n	800b538 <USBD_CDC_EP0_RxReady+0x6a>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b50a:	2bff      	cmp	r3, #255	@ 0xff
 800b50c:	d014      	beq.n	800b538 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	33b0      	adds	r3, #176	@ 0xb0
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b526:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b52e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	22ff      	movs	r2, #255	@ 0xff
 800b534:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b54c:	2182      	movs	r1, #130	@ 0x82
 800b54e:	4818      	ldr	r0, [pc, #96]	@ (800b5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b550:	f000 fd0f 	bl	800bf72 <USBD_GetEpDesc>
 800b554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b556:	2101      	movs	r1, #1
 800b558:	4815      	ldr	r0, [pc, #84]	@ (800b5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b55a:	f000 fd0a 	bl	800bf72 <USBD_GetEpDesc>
 800b55e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b560:	2181      	movs	r1, #129	@ 0x81
 800b562:	4813      	ldr	r0, [pc, #76]	@ (800b5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b564:	f000 fd05 	bl	800bf72 <USBD_GetEpDesc>
 800b568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2210      	movs	r2, #16
 800b574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d006      	beq.n	800b58a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2200      	movs	r2, #0
 800b580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b584:	711a      	strb	r2, [r3, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d006      	beq.n	800b59e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b598:	711a      	strb	r2, [r3, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2243      	movs	r2, #67	@ 0x43
 800b5a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5a4:	4b02      	ldr	r3, [pc, #8]	@ (800b5b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	24000054 	.word	0x24000054

0800b5b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5bc:	2182      	movs	r1, #130	@ 0x82
 800b5be:	4818      	ldr	r0, [pc, #96]	@ (800b620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5c0:	f000 fcd7 	bl	800bf72 <USBD_GetEpDesc>
 800b5c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	4815      	ldr	r0, [pc, #84]	@ (800b620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5ca:	f000 fcd2 	bl	800bf72 <USBD_GetEpDesc>
 800b5ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5d0:	2181      	movs	r1, #129	@ 0x81
 800b5d2:	4813      	ldr	r0, [pc, #76]	@ (800b620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5d4:	f000 fccd 	bl	800bf72 <USBD_GetEpDesc>
 800b5d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2210      	movs	r2, #16
 800b5e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	711a      	strb	r2, [r3, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f042 0202 	orr.w	r2, r2, #2
 800b5f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	711a      	strb	r2, [r3, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f042 0202 	orr.w	r2, r2, #2
 800b60c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2243      	movs	r2, #67	@ 0x43
 800b612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b614:	4b02      	ldr	r3, [pc, #8]	@ (800b620 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	24000054 	.word	0x24000054

0800b624 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b62c:	2182      	movs	r1, #130	@ 0x82
 800b62e:	4818      	ldr	r0, [pc, #96]	@ (800b690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b630:	f000 fc9f 	bl	800bf72 <USBD_GetEpDesc>
 800b634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b636:	2101      	movs	r1, #1
 800b638:	4815      	ldr	r0, [pc, #84]	@ (800b690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b63a:	f000 fc9a 	bl	800bf72 <USBD_GetEpDesc>
 800b63e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b640:	2181      	movs	r1, #129	@ 0x81
 800b642:	4813      	ldr	r0, [pc, #76]	@ (800b690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b644:	f000 fc95 	bl	800bf72 <USBD_GetEpDesc>
 800b648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2210      	movs	r2, #16
 800b654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d006      	beq.n	800b66a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	2200      	movs	r2, #0
 800b660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b664:	711a      	strb	r2, [r3, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d006      	beq.n	800b67e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b678:	711a      	strb	r2, [r3, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2243      	movs	r2, #67	@ 0x43
 800b682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b684:	4b02      	ldr	r3, [pc, #8]	@ (800b690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	24000054 	.word	0x24000054

0800b694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	220a      	movs	r2, #10
 800b6a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6a2:	4b03      	ldr	r3, [pc, #12]	@ (800b6b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	24000010 	.word	0x24000010

0800b6b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e009      	b.n	800b6dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	33b0      	adds	r3, #176	@ 0xb0
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	32b0      	adds	r2, #176	@ 0xb0
 800b6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b702:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e008      	b.n	800b720 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	371c      	adds	r7, #28
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	32b0      	adds	r2, #176	@ 0xb0
 800b740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e004      	b.n	800b75a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	32b0      	adds	r2, #176	@ 0xb0
 800b77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	32b0      	adds	r2, #176	@ 0xb0
 800b78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b792:	2303      	movs	r3, #3
 800b794:	e018      	b.n	800b7c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	7c1b      	ldrb	r3, [r3, #16]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b79e:	4b0c      	ldr	r3, [pc, #48]	@ (800b7d0 <USBD_CDC_ReceivePacket+0x68>)
 800b7a0:	7819      	ldrb	r1, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f004 fe15 	bl	80103dc <USBD_LL_PrepareReceive>
 800b7b2:	e008      	b.n	800b7c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7b4:	4b06      	ldr	r3, [pc, #24]	@ (800b7d0 <USBD_CDC_ReceivePacket+0x68>)
 800b7b6:	7819      	ldrb	r1, [r3, #0]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7be:	2340      	movs	r3, #64	@ 0x40
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f004 fe0b 	bl	80103dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	24000098 	.word	0x24000098

0800b7d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e01f      	b.n	800b82c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d003      	beq.n	800b812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	79fa      	ldrb	r2, [r7, #7]
 800b81e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f004 fc81 	bl	8010128 <USBD_LL_Init>
 800b826:	4603      	mov	r3, r0
 800b828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	e025      	b.n	800b898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	32ae      	adds	r2, #174	@ 0xae
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00f      	beq.n	800b888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	32ae      	adds	r2, #174	@ 0xae
 800b872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b878:	f107 020e 	add.w	r2, r7, #14
 800b87c:	4610      	mov	r0, r2
 800b87e:	4798      	blx	r3
 800b880:	4602      	mov	r2, r0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f004 fc8d 	bl	80101c8 <USBD_LL_Start>
 800b8ae:	4603      	mov	r3, r0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	78fa      	ldrb	r2, [r7, #3]
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	460b      	mov	r3, r1
 800b910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	4611      	mov	r1, r2
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b92c:	2303      	movs	r3, #3
 800b92e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f001 f936 	bl	800cbbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b960:	461a      	mov	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b96e:	f003 031f 	and.w	r3, r3, #31
 800b972:	2b02      	cmp	r3, #2
 800b974:	d01a      	beq.n	800b9ac <USBD_LL_SetupStage+0x72>
 800b976:	2b02      	cmp	r3, #2
 800b978:	d822      	bhi.n	800b9c0 <USBD_LL_SetupStage+0x86>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <USBD_LL_SetupStage+0x4a>
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d00a      	beq.n	800b998 <USBD_LL_SetupStage+0x5e>
 800b982:	e01d      	b.n	800b9c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fb63 	bl	800c058 <USBD_StdDevReq>
 800b992:	4603      	mov	r3, r0
 800b994:	73fb      	strb	r3, [r7, #15]
      break;
 800b996:	e020      	b.n	800b9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fbcb 	bl	800c13c <USBD_StdItfReq>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9aa:	e016      	b.n	800b9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fc2d 	bl	800c214 <USBD_StdEPReq>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b9be:	e00c      	b.n	800b9da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f004 fc5a 	bl	8010288 <USBD_LL_StallEP>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d8:	bf00      	nop
  }

  return ret;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b9f6:	7afb      	ldrb	r3, [r7, #11]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d16e      	bne.n	800bada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	f040 8098 	bne.w	800bb40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	689a      	ldr	r2, [r3, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d913      	bls.n	800ba44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	1ad2      	subs	r2, r2, r3
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	4293      	cmp	r3, r2
 800ba34:	bf28      	it	cs
 800ba36:	4613      	movcs	r3, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f001 f9be 	bl	800cdbe <USBD_CtlContinueRx>
 800ba42:	e07d      	b.n	800bb40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba4a:	f003 031f 	and.w	r3, r3, #31
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d014      	beq.n	800ba7c <USBD_LL_DataOutStage+0x98>
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d81d      	bhi.n	800ba92 <USBD_LL_DataOutStage+0xae>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <USBD_LL_DataOutStage+0x7c>
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d003      	beq.n	800ba66 <USBD_LL_DataOutStage+0x82>
 800ba5e:	e018      	b.n	800ba92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75bb      	strb	r3, [r7, #22]
            break;
 800ba64:	e018      	b.n	800ba98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fa64 	bl	800bf3e <USBD_CoreFindIF>
 800ba76:	4603      	mov	r3, r0
 800ba78:	75bb      	strb	r3, [r7, #22]
            break;
 800ba7a:	e00d      	b.n	800ba98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	4619      	mov	r1, r3
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fa66 	bl	800bf58 <USBD_CoreFindEP>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75bb      	strb	r3, [r7, #22]
            break;
 800ba90:	e002      	b.n	800ba98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]
            break;
 800ba96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ba98:	7dbb      	ldrb	r3, [r7, #22]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d119      	bne.n	800bad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d113      	bne.n	800bad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800baaa:	7dba      	ldrb	r2, [r7, #22]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	32ae      	adds	r2, #174	@ 0xae
 800bab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800baba:	7dba      	ldrb	r2, [r7, #22]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bac2:	7dba      	ldrb	r2, [r7, #22]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	32ae      	adds	r2, #174	@ 0xae
 800bac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f001 f984 	bl	800cde0 <USBD_CtlSendStatus>
 800bad8:	e032      	b.n	800bb40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	4619      	mov	r1, r3
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 fa37 	bl	800bf58 <USBD_CoreFindEP>
 800baea:	4603      	mov	r3, r0
 800baec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baee:	7dbb      	ldrb	r3, [r7, #22]
 800baf0:	2bff      	cmp	r3, #255	@ 0xff
 800baf2:	d025      	beq.n	800bb40 <USBD_LL_DataOutStage+0x15c>
 800baf4:	7dbb      	ldrb	r3, [r7, #22]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d122      	bne.n	800bb40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d117      	bne.n	800bb36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb06:	7dba      	ldrb	r2, [r7, #22]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	32ae      	adds	r2, #174	@ 0xae
 800bb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00f      	beq.n	800bb36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb16:	7dba      	ldrb	r2, [r7, #22]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb1e:	7dba      	ldrb	r2, [r7, #22]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	32ae      	adds	r2, #174	@ 0xae
 800bb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	7afa      	ldrb	r2, [r7, #11]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	4798      	blx	r3
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	e000      	b.n	800bb42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}

0800bb4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b086      	sub	sp, #24
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	460b      	mov	r3, r1
 800bb54:	607a      	str	r2, [r7, #4]
 800bb56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb58:	7afb      	ldrb	r3, [r7, #11]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d16f      	bne.n	800bc3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3314      	adds	r3, #20
 800bb62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d15a      	bne.n	800bc24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d914      	bls.n	800bba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	689a      	ldr	r2, [r3, #8]
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f001 f8e6 	bl	800cd62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f004 fc1d 	bl	80103dc <USBD_LL_PrepareReceive>
 800bba2:	e03f      	b.n	800bc24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	68da      	ldr	r2, [r3, #12]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d11c      	bne.n	800bbea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d316      	bcc.n	800bbea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d20f      	bcs.n	800bbea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f001 f8c7 	bl	800cd62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbdc:	2300      	movs	r3, #0
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f004 fbfa 	bl	80103dc <USBD_LL_PrepareReceive>
 800bbe8:	e01c      	b.n	800bc24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d10f      	bne.n	800bc16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d009      	beq.n	800bc16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc16:	2180      	movs	r1, #128	@ 0x80
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f004 fb35 	bl	8010288 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f001 f8f1 	bl	800ce06 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d03a      	beq.n	800bca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fe42 	bl	800b8b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc3c:	e032      	b.n	800bca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	4619      	mov	r1, r3
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f985 	bl	800bf58 <USBD_CoreFindEP>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	2bff      	cmp	r3, #255	@ 0xff
 800bc56:	d025      	beq.n	800bca4 <USBD_LL_DataInStage+0x15a>
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d122      	bne.n	800bca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d11c      	bne.n	800bca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bc6a:	7dfa      	ldrb	r2, [r7, #23]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	32ae      	adds	r2, #174	@ 0xae
 800bc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d014      	beq.n	800bca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bc7a:	7dfa      	ldrb	r2, [r7, #23]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bc82:	7dfa      	ldrb	r2, [r7, #23]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	32ae      	adds	r2, #174	@ 0xae
 800bc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	7afa      	ldrb	r2, [r7, #11]
 800bc90:	4611      	mov	r1, r2
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	4798      	blx	r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bc9a:	7dbb      	ldrb	r3, [r7, #22]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bca0:	7dbb      	ldrb	r3, [r7, #22]
 800bca2:	e000      	b.n	800bca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d014      	beq.n	800bd14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00e      	beq.n	800bd14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6852      	ldr	r2, [r2, #4]
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	4611      	mov	r1, r2
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	4798      	blx	r3
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd10:	2303      	movs	r3, #3
 800bd12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd14:	2340      	movs	r3, #64	@ 0x40
 800bd16:	2200      	movs	r2, #0
 800bd18:	2100      	movs	r1, #0
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f004 fa6f 	bl	80101fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2240      	movs	r2, #64	@ 0x40
 800bd2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd30:	2340      	movs	r3, #64	@ 0x40
 800bd32:	2200      	movs	r2, #0
 800bd34:	2180      	movs	r1, #128	@ 0x80
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f004 fa61 	bl	80101fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2240      	movs	r2, #64	@ 0x40
 800bd46:	621a      	str	r2, [r3, #32]

  return ret;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	78fa      	ldrb	r2, [r7, #3]
 800bd62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b04      	cmp	r3, #4
 800bd84:	d006      	beq.n	800bd94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2204      	movs	r2, #4
 800bd98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b04      	cmp	r3, #4
 800bdbc:	d106      	bne.n	800bdcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d110      	bne.n	800be10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00b      	beq.n	800be10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be0a:	69db      	ldr	r3, [r3, #28]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	32ae      	adds	r2, #174	@ 0xae
 800be30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be38:	2303      	movs	r3, #3
 800be3a:	e01c      	b.n	800be76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b03      	cmp	r3, #3
 800be46:	d115      	bne.n	800be74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	32ae      	adds	r2, #174	@ 0xae
 800be52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00b      	beq.n	800be74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	32ae      	adds	r2, #174	@ 0xae
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	78fa      	ldrb	r2, [r7, #3]
 800be6e:	4611      	mov	r1, r2
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	32ae      	adds	r2, #174	@ 0xae
 800be94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e01c      	b.n	800beda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d115      	bne.n	800bed8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32ae      	adds	r2, #174	@ 0xae
 800beb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	@ 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	4611      	mov	r1, r2
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b083      	sub	sp, #12
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00e      	beq.n	800bf34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	6852      	ldr	r2, [r2, #4]
 800bf22:	b2d2      	uxtb	r2, r2
 800bf24:	4611      	mov	r1, r2
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	4798      	blx	r3
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf30:	2303      	movs	r3, #3
 800bf32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	885b      	ldrh	r3, [r3, #2]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	7812      	ldrb	r2, [r2, #0]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d91f      	bls.n	800bfd8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bf9e:	e013      	b.n	800bfc8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfa0:	f107 030a 	add.w	r3, r7, #10
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6978      	ldr	r0, [r7, #20]
 800bfa8:	f000 f81b 	bl	800bfe2 <USBD_GetNextDesc>
 800bfac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d108      	bne.n	800bfc8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	789b      	ldrb	r3, [r3, #2]
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d008      	beq.n	800bfd6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	885b      	ldrh	r3, [r3, #2]
 800bfcc:	b29a      	uxth	r2, r3
 800bfce:	897b      	ldrh	r3, [r7, #10]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d8e5      	bhi.n	800bfa0 <USBD_GetEpDesc+0x2e>
 800bfd4:	e000      	b.n	800bfd8 <USBD_GetEpDesc+0x66>
          break;
 800bfd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bfd8:	693b      	ldr	r3, [r7, #16]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	7812      	ldrb	r2, [r2, #0]
 800bff8:	4413      	add	r3, r2
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	461a      	mov	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4413      	add	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b087      	sub	sp, #28
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	3301      	adds	r3, #1
 800c030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c038:	8a3b      	ldrh	r3, [r7, #16]
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	b21a      	sxth	r2, r3
 800c03e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c042:	4313      	orrs	r3, r2
 800c044:	b21b      	sxth	r3, r3
 800c046:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c048:	89fb      	ldrh	r3, [r7, #14]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
	...

0800c058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c06e:	2b40      	cmp	r3, #64	@ 0x40
 800c070:	d005      	beq.n	800c07e <USBD_StdDevReq+0x26>
 800c072:	2b40      	cmp	r3, #64	@ 0x40
 800c074:	d857      	bhi.n	800c126 <USBD_StdDevReq+0xce>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00f      	beq.n	800c09a <USBD_StdDevReq+0x42>
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d153      	bne.n	800c126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	32ae      	adds	r2, #174	@ 0xae
 800c088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	4798      	blx	r3
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
      break;
 800c098:	e04a      	b.n	800c130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	d83b      	bhi.n	800c11a <USBD_StdDevReq+0xc2>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <USBD_StdDevReq+0x50>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c0fd 	.word	0x0800c0fd
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c11b 	.word	0x0800c11b
 800c0b4:	0800c107 	.word	0x0800c107
 800c0b8:	0800c11b 	.word	0x0800c11b
 800c0bc:	0800c0db 	.word	0x0800c0db
 800c0c0:	0800c0d1 	.word	0x0800c0d1
 800c0c4:	0800c11b 	.word	0x0800c11b
 800c0c8:	0800c0f3 	.word	0x0800c0f3
 800c0cc:	0800c0e5 	.word	0x0800c0e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa3c 	bl	800c550 <USBD_GetDescriptor>
          break;
 800c0d8:	e024      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fbcb 	bl	800c878 <USBD_SetAddress>
          break;
 800c0e2:	e01f      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fc0a 	bl	800c900 <USBD_SetConfig>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
          break;
 800c0f0:	e018      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fcad 	bl	800ca54 <USBD_GetConfig>
          break;
 800c0fa:	e013      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fcde 	bl	800cac0 <USBD_GetStatus>
          break;
 800c104:	e00e      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fd0d 	bl	800cb28 <USBD_SetFeature>
          break;
 800c10e:	e009      	b.n	800c124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fd31 	bl	800cb7a <USBD_ClrFeature>
          break;
 800c118:	e004      	b.n	800c124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fd88 	bl	800cc32 <USBD_CtlError>
          break;
 800c122:	bf00      	nop
      }
      break;
 800c124:	e004      	b.n	800c130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fd82 	bl	800cc32 <USBD_CtlError>
      break;
 800c12e:	bf00      	nop
  }

  return ret;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop

0800c13c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c152:	2b40      	cmp	r3, #64	@ 0x40
 800c154:	d005      	beq.n	800c162 <USBD_StdItfReq+0x26>
 800c156:	2b40      	cmp	r3, #64	@ 0x40
 800c158:	d852      	bhi.n	800c200 <USBD_StdItfReq+0xc4>
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <USBD_StdItfReq+0x26>
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d14e      	bne.n	800c200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	3b01      	subs	r3, #1
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d840      	bhi.n	800c1f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	889b      	ldrh	r3, [r3, #4]
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b01      	cmp	r3, #1
 800c178:	d836      	bhi.n	800c1e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	889b      	ldrh	r3, [r3, #4]
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fedb 	bl	800bf3e <USBD_CoreFindIF>
 800c188:	4603      	mov	r3, r0
 800c18a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	2bff      	cmp	r3, #255	@ 0xff
 800c190:	d01d      	beq.n	800c1ce <USBD_StdItfReq+0x92>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d11a      	bne.n	800c1ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c198:	7bba      	ldrb	r2, [r7, #14]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	32ae      	adds	r2, #174	@ 0xae
 800c19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00f      	beq.n	800c1c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1a8:	7bba      	ldrb	r2, [r7, #14]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1b0:	7bba      	ldrb	r2, [r7, #14]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	32ae      	adds	r2, #174	@ 0xae
 800c1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	4798      	blx	r3
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1c6:	e004      	b.n	800c1d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c1cc:	e001      	b.n	800c1d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	88db      	ldrh	r3, [r3, #6]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d110      	bne.n	800c1fc <USBD_StdItfReq+0xc0>
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10d      	bne.n	800c1fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fdfd 	bl	800cde0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c1e6:	e009      	b.n	800c1fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fd21 	bl	800cc32 <USBD_CtlError>
          break;
 800c1f0:	e004      	b.n	800c1fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 fd1c 	bl	800cc32 <USBD_CtlError>
          break;
 800c1fa:	e000      	b.n	800c1fe <USBD_StdItfReq+0xc2>
          break;
 800c1fc:	bf00      	nop
      }
      break;
 800c1fe:	e004      	b.n	800c20a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fd15 	bl	800cc32 <USBD_CtlError>
      break;
 800c208:	bf00      	nop
  }

  return ret;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c230:	2b40      	cmp	r3, #64	@ 0x40
 800c232:	d007      	beq.n	800c244 <USBD_StdEPReq+0x30>
 800c234:	2b40      	cmp	r3, #64	@ 0x40
 800c236:	f200 817f 	bhi.w	800c538 <USBD_StdEPReq+0x324>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d02a      	beq.n	800c294 <USBD_StdEPReq+0x80>
 800c23e:	2b20      	cmp	r3, #32
 800c240:	f040 817a 	bne.w	800c538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff fe85 	bl	800bf58 <USBD_CoreFindEP>
 800c24e:	4603      	mov	r3, r0
 800c250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c252:	7b7b      	ldrb	r3, [r7, #13]
 800c254:	2bff      	cmp	r3, #255	@ 0xff
 800c256:	f000 8174 	beq.w	800c542 <USBD_StdEPReq+0x32e>
 800c25a:	7b7b      	ldrb	r3, [r7, #13]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f040 8170 	bne.w	800c542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c262:	7b7a      	ldrb	r2, [r7, #13]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c26a:	7b7a      	ldrb	r2, [r7, #13]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	32ae      	adds	r2, #174	@ 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 8163 	beq.w	800c542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c27c:	7b7a      	ldrb	r2, [r7, #13]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	32ae      	adds	r2, #174	@ 0xae
 800c282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	4798      	blx	r3
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c292:	e156      	b.n	800c542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	785b      	ldrb	r3, [r3, #1]
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d008      	beq.n	800c2ae <USBD_StdEPReq+0x9a>
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	f300 8145 	bgt.w	800c52c <USBD_StdEPReq+0x318>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 809b 	beq.w	800c3de <USBD_StdEPReq+0x1ca>
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d03c      	beq.n	800c326 <USBD_StdEPReq+0x112>
 800c2ac:	e13e      	b.n	800c52c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d002      	beq.n	800c2c0 <USBD_StdEPReq+0xac>
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d016      	beq.n	800c2ec <USBD_StdEPReq+0xd8>
 800c2be:	e02c      	b.n	800c31a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00d      	beq.n	800c2e2 <USBD_StdEPReq+0xce>
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
 800c2c8:	2b80      	cmp	r3, #128	@ 0x80
 800c2ca:	d00a      	beq.n	800c2e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f003 ffd9 	bl	8010288 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2d6:	2180      	movs	r1, #128	@ 0x80
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f003 ffd5 	bl	8010288 <USBD_LL_StallEP>
 800c2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c2e0:	e020      	b.n	800c324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fca4 	bl	800cc32 <USBD_CtlError>
              break;
 800c2ea:	e01b      	b.n	800c324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	885b      	ldrh	r3, [r3, #2]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10e      	bne.n	800c312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00b      	beq.n	800c312 <USBD_StdEPReq+0xfe>
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b80      	cmp	r3, #128	@ 0x80
 800c2fe:	d008      	beq.n	800c312 <USBD_StdEPReq+0xfe>
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	88db      	ldrh	r3, [r3, #6]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d104      	bne.n	800c312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c308:	7bbb      	ldrb	r3, [r7, #14]
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f003 ffbb 	bl	8010288 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fd64 	bl	800cde0 <USBD_CtlSendStatus>

              break;
 800c318:	e004      	b.n	800c324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fc88 	bl	800cc32 <USBD_CtlError>
              break;
 800c322:	bf00      	nop
          }
          break;
 800c324:	e107      	b.n	800c536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d002      	beq.n	800c338 <USBD_StdEPReq+0x124>
 800c332:	2b03      	cmp	r3, #3
 800c334:	d016      	beq.n	800c364 <USBD_StdEPReq+0x150>
 800c336:	e04b      	b.n	800c3d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00d      	beq.n	800c35a <USBD_StdEPReq+0x146>
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b80      	cmp	r3, #128	@ 0x80
 800c342:	d00a      	beq.n	800c35a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f003 ff9d 	bl	8010288 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c34e:	2180      	movs	r1, #128	@ 0x80
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f003 ff99 	bl	8010288 <USBD_LL_StallEP>
 800c356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c358:	e040      	b.n	800c3dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fc68 	bl	800cc32 <USBD_CtlError>
              break;
 800c362:	e03b      	b.n	800c3dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	885b      	ldrh	r3, [r3, #2]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d136      	bne.n	800c3da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c372:	2b00      	cmp	r3, #0
 800c374:	d004      	beq.n	800c380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c376:	7bbb      	ldrb	r3, [r7, #14]
 800c378:	4619      	mov	r1, r3
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f003 ffa3 	bl	80102c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fd2d 	bl	800cde0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff fde4 	bl	800bf58 <USBD_CoreFindEP>
 800c390:	4603      	mov	r3, r0
 800c392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c394:	7b7b      	ldrb	r3, [r7, #13]
 800c396:	2bff      	cmp	r3, #255	@ 0xff
 800c398:	d01f      	beq.n	800c3da <USBD_StdEPReq+0x1c6>
 800c39a:	7b7b      	ldrb	r3, [r7, #13]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11c      	bne.n	800c3da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3a0:	7b7a      	ldrb	r2, [r7, #13]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3a8:	7b7a      	ldrb	r2, [r7, #13]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	32ae      	adds	r2, #174	@ 0xae
 800c3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d010      	beq.n	800c3da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3b8:	7b7a      	ldrb	r2, [r7, #13]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	32ae      	adds	r2, #174	@ 0xae
 800c3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c3ce:	e004      	b.n	800c3da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fc2d 	bl	800cc32 <USBD_CtlError>
              break;
 800c3d8:	e000      	b.n	800c3dc <USBD_StdEPReq+0x1c8>
              break;
 800c3da:	bf00      	nop
          }
          break;
 800c3dc:	e0ab      	b.n	800c536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	d002      	beq.n	800c3f0 <USBD_StdEPReq+0x1dc>
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d032      	beq.n	800c454 <USBD_StdEPReq+0x240>
 800c3ee:	e097      	b.n	800c520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <USBD_StdEPReq+0x1f2>
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
 800c3f8:	2b80      	cmp	r3, #128	@ 0x80
 800c3fa:	d004      	beq.n	800c406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fc17 	bl	800cc32 <USBD_CtlError>
                break;
 800c404:	e091      	b.n	800c52a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	da0b      	bge.n	800c426 <USBD_StdEPReq+0x212>
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c414:	4613      	mov	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	3310      	adds	r3, #16
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	4413      	add	r3, r2
 800c422:	3304      	adds	r3, #4
 800c424:	e00b      	b.n	800c43e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c426:	7bbb      	ldrb	r3, [r7, #14]
 800c428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	4413      	add	r3, r2
 800c43c:	3304      	adds	r3, #4
 800c43e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2200      	movs	r2, #0
 800c444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2202      	movs	r2, #2
 800c44a:	4619      	mov	r1, r3
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fc6d 	bl	800cd2c <USBD_CtlSendData>
              break;
 800c452:	e06a      	b.n	800c52a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	da11      	bge.n	800c480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	f003 020f 	and.w	r2, r3, #15
 800c462:	6879      	ldr	r1, [r7, #4]
 800c464:	4613      	mov	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	440b      	add	r3, r1
 800c46e:	3324      	adds	r3, #36	@ 0x24
 800c470:	881b      	ldrh	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d117      	bne.n	800c4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 fbda 	bl	800cc32 <USBD_CtlError>
                  break;
 800c47e:	e054      	b.n	800c52a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	f003 020f 	and.w	r2, r3, #15
 800c486:	6879      	ldr	r1, [r7, #4]
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d104      	bne.n	800c4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fbc7 	bl	800cc32 <USBD_CtlError>
                  break;
 800c4a4:	e041      	b.n	800c52a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	da0b      	bge.n	800c4c6 <USBD_StdEPReq+0x2b2>
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	3310      	adds	r3, #16
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	e00b      	b.n	800c4de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	4413      	add	r3, r2
 800c4dc:	3304      	adds	r3, #4
 800c4de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <USBD_StdEPReq+0x2d8>
 800c4e6:	7bbb      	ldrb	r3, [r7, #14]
 800c4e8:	2b80      	cmp	r3, #128	@ 0x80
 800c4ea:	d103      	bne.n	800c4f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	e00e      	b.n	800c512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f003 ff03 	bl	8010304 <USBD_LL_IsStallEP>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d003      	beq.n	800c50c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	2201      	movs	r2, #1
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	e002      	b.n	800c512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2202      	movs	r2, #2
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fc07 	bl	800cd2c <USBD_CtlSendData>
              break;
 800c51e:	e004      	b.n	800c52a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fb85 	bl	800cc32 <USBD_CtlError>
              break;
 800c528:	bf00      	nop
          }
          break;
 800c52a:	e004      	b.n	800c536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fb7f 	bl	800cc32 <USBD_CtlError>
          break;
 800c534:	bf00      	nop
      }
      break;
 800c536:	e005      	b.n	800c544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fb79 	bl	800cc32 <USBD_CtlError>
      break;
 800c540:	e000      	b.n	800c544 <USBD_StdEPReq+0x330>
      break;
 800c542:	bf00      	nop
  }

  return ret;
 800c544:	7bfb      	ldrb	r3, [r7, #15]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c55a:	2300      	movs	r3, #0
 800c55c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c562:	2300      	movs	r3, #0
 800c564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	885b      	ldrh	r3, [r3, #2]
 800c56a:	0a1b      	lsrs	r3, r3, #8
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b0e      	cmp	r3, #14
 800c572:	f200 8152 	bhi.w	800c81a <USBD_GetDescriptor+0x2ca>
 800c576:	a201      	add	r2, pc, #4	@ (adr r2, 800c57c <USBD_GetDescriptor+0x2c>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c5ed 	.word	0x0800c5ed
 800c580:	0800c605 	.word	0x0800c605
 800c584:	0800c645 	.word	0x0800c645
 800c588:	0800c81b 	.word	0x0800c81b
 800c58c:	0800c81b 	.word	0x0800c81b
 800c590:	0800c7bb 	.word	0x0800c7bb
 800c594:	0800c7e7 	.word	0x0800c7e7
 800c598:	0800c81b 	.word	0x0800c81b
 800c59c:	0800c81b 	.word	0x0800c81b
 800c5a0:	0800c81b 	.word	0x0800c81b
 800c5a4:	0800c81b 	.word	0x0800c81b
 800c5a8:	0800c81b 	.word	0x0800c81b
 800c5ac:	0800c81b 	.word	0x0800c81b
 800c5b0:	0800c81b 	.word	0x0800c81b
 800c5b4:	0800c5b9 	.word	0x0800c5b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00b      	beq.n	800c5dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	7c12      	ldrb	r2, [r2, #16]
 800c5d0:	f107 0108 	add.w	r1, r7, #8
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4798      	blx	r3
 800c5d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5da:	e126      	b.n	800c82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fb27 	bl	800cc32 <USBD_CtlError>
        err++;
 800c5e4:	7afb      	ldrb	r3, [r7, #11]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ea:	e11e      	b.n	800c82a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	7c12      	ldrb	r2, [r2, #16]
 800c5f8:	f107 0108 	add.w	r1, r7, #8
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4798      	blx	r3
 800c600:	60f8      	str	r0, [r7, #12]
      break;
 800c602:	e112      	b.n	800c82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7c1b      	ldrb	r3, [r3, #16]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10d      	bne.n	800c628 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c614:	f107 0208 	add.w	r2, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	2202      	movs	r2, #2
 800c624:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c626:	e100      	b.n	800c82a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c630:	f107 0208 	add.w	r2, r7, #8
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
 800c638:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3301      	adds	r3, #1
 800c63e:	2202      	movs	r2, #2
 800c640:	701a      	strb	r2, [r3, #0]
      break;
 800c642:	e0f2      	b.n	800c82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	885b      	ldrh	r3, [r3, #2]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	f200 80ac 	bhi.w	800c7a8 <USBD_GetDescriptor+0x258>
 800c650:	a201      	add	r2, pc, #4	@ (adr r2, 800c658 <USBD_GetDescriptor+0x108>)
 800c652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c656:	bf00      	nop
 800c658:	0800c671 	.word	0x0800c671
 800c65c:	0800c6a5 	.word	0x0800c6a5
 800c660:	0800c6d9 	.word	0x0800c6d9
 800c664:	0800c70d 	.word	0x0800c70d
 800c668:	0800c741 	.word	0x0800c741
 800c66c:	0800c775 	.word	0x0800c775
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	7c12      	ldrb	r2, [r2, #16]
 800c688:	f107 0108 	add.w	r1, r7, #8
 800c68c:	4610      	mov	r0, r2
 800c68e:	4798      	blx	r3
 800c690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c692:	e091      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 facb 	bl	800cc32 <USBD_CtlError>
            err++;
 800c69c:	7afb      	ldrb	r3, [r7, #11]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6a2:	e089      	b.n	800c7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	7c12      	ldrb	r2, [r2, #16]
 800c6bc:	f107 0108 	add.w	r1, r7, #8
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	4798      	blx	r3
 800c6c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6c6:	e077      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fab1 	bl	800cc32 <USBD_CtlError>
            err++;
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6d6:	e06f      	b.n	800c7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 0108 	add.w	r1, r7, #8
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6fa:	e05d      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fa97 	bl	800cc32 <USBD_CtlError>
            err++;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	3301      	adds	r3, #1
 800c708:	72fb      	strb	r3, [r7, #11]
          break;
 800c70a:	e055      	b.n	800c7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	7c12      	ldrb	r2, [r2, #16]
 800c724:	f107 0108 	add.w	r1, r7, #8
 800c728:	4610      	mov	r0, r2
 800c72a:	4798      	blx	r3
 800c72c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c72e:	e043      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fa7d 	bl	800cc32 <USBD_CtlError>
            err++;
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	3301      	adds	r3, #1
 800c73c:	72fb      	strb	r3, [r7, #11]
          break;
 800c73e:	e03b      	b.n	800c7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00b      	beq.n	800c764 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	7c12      	ldrb	r2, [r2, #16]
 800c758:	f107 0108 	add.w	r1, r7, #8
 800c75c:	4610      	mov	r0, r2
 800c75e:	4798      	blx	r3
 800c760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c762:	e029      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fa63 	bl	800cc32 <USBD_CtlError>
            err++;
 800c76c:	7afb      	ldrb	r3, [r7, #11]
 800c76e:	3301      	adds	r3, #1
 800c770:	72fb      	strb	r3, [r7, #11]
          break;
 800c772:	e021      	b.n	800c7b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00b      	beq.n	800c798 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	7c12      	ldrb	r2, [r2, #16]
 800c78c:	f107 0108 	add.w	r1, r7, #8
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
 800c794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c796:	e00f      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa49 	bl	800cc32 <USBD_CtlError>
            err++;
 800c7a0:	7afb      	ldrb	r3, [r7, #11]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7a6:	e007      	b.n	800c7b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa41 	bl	800cc32 <USBD_CtlError>
          err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7b6:	bf00      	nop
      }
      break;
 800c7b8:	e037      	b.n	800c82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7c1b      	ldrb	r3, [r3, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d109      	bne.n	800c7d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ca:	f107 0208 	add.w	r2, r7, #8
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	4798      	blx	r3
 800c7d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7d4:	e029      	b.n	800c82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fa2a 	bl	800cc32 <USBD_CtlError>
        err++;
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7e4:	e021      	b.n	800c82a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7c1b      	ldrb	r3, [r3, #16]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10d      	bne.n	800c80a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7f6:	f107 0208 	add.w	r2, r7, #8
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	4798      	blx	r3
 800c7fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3301      	adds	r3, #1
 800c804:	2207      	movs	r2, #7
 800c806:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c808:	e00f      	b.n	800c82a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fa10 	bl	800cc32 <USBD_CtlError>
        err++;
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	3301      	adds	r3, #1
 800c816:	72fb      	strb	r3, [r7, #11]
      break;
 800c818:	e007      	b.n	800c82a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fa08 	bl	800cc32 <USBD_CtlError>
      err++;
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	3301      	adds	r3, #1
 800c826:	72fb      	strb	r3, [r7, #11]
      break;
 800c828:	bf00      	nop
  }

  if (err != 0U)
 800c82a:	7afb      	ldrb	r3, [r7, #11]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d11e      	bne.n	800c86e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	88db      	ldrh	r3, [r3, #6]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d016      	beq.n	800c866 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c838:	893b      	ldrh	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00e      	beq.n	800c85c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	88da      	ldrh	r2, [r3, #6]
 800c842:	893b      	ldrh	r3, [r7, #8]
 800c844:	4293      	cmp	r3, r2
 800c846:	bf28      	it	cs
 800c848:	4613      	movcs	r3, r2
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c84e:	893b      	ldrh	r3, [r7, #8]
 800c850:	461a      	mov	r2, r3
 800c852:	68f9      	ldr	r1, [r7, #12]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fa69 	bl	800cd2c <USBD_CtlSendData>
 800c85a:	e009      	b.n	800c870 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f9e7 	bl	800cc32 <USBD_CtlError>
 800c864:	e004      	b.n	800c870 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 faba 	bl	800cde0 <USBD_CtlSendStatus>
 800c86c:	e000      	b.n	800c870 <USBD_GetDescriptor+0x320>
    return;
 800c86e:	bf00      	nop
  }
}
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop

0800c878 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	889b      	ldrh	r3, [r3, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d131      	bne.n	800c8ee <USBD_SetAddress+0x76>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	88db      	ldrh	r3, [r3, #6]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d12d      	bne.n	800c8ee <USBD_SetAddress+0x76>
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	885b      	ldrh	r3, [r3, #2]
 800c896:	2b7f      	cmp	r3, #127	@ 0x7f
 800c898:	d829      	bhi.n	800c8ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	885b      	ldrh	r3, [r3, #2]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d104      	bne.n	800c8bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f9bc 	bl	800cc32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	e01d      	b.n	800c8f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	7bfa      	ldrb	r2, [r7, #15]
 800c8c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f003 fd47 	bl	801035c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fa86 	bl	800cde0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d004      	beq.n	800c8e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e2:	e009      	b.n	800c8f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ec:	e004      	b.n	800c8f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f99e 	bl	800cc32 <USBD_CtlError>
  }
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	885b      	ldrh	r3, [r3, #2]
 800c912:	b2da      	uxtb	r2, r3
 800c914:	4b4e      	ldr	r3, [pc, #312]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c916:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c918:	4b4d      	ldr	r3, [pc, #308]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d905      	bls.n	800c92c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f985 	bl	800cc32 <USBD_CtlError>
    return USBD_FAIL;
 800c928:	2303      	movs	r3, #3
 800c92a:	e08c      	b.n	800ca46 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b02      	cmp	r3, #2
 800c936:	d002      	beq.n	800c93e <USBD_SetConfig+0x3e>
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d029      	beq.n	800c990 <USBD_SetConfig+0x90>
 800c93c:	e075      	b.n	800ca2a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c93e:	4b44      	ldr	r3, [pc, #272]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d020      	beq.n	800c988 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c946:	4b42      	ldr	r3, [pc, #264]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c950:	4b3f      	ldr	r3, [pc, #252]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7fe ffb9 	bl	800b8ce <USBD_SetClassConfig>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d008      	beq.n	800c978 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f962 	bl	800cc32 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2202      	movs	r2, #2
 800c972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c976:	e065      	b.n	800ca44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fa31 	bl	800cde0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2203      	movs	r2, #3
 800c982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c986:	e05d      	b.n	800ca44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fa29 	bl	800cde0 <USBD_CtlSendStatus>
      break;
 800c98e:	e059      	b.n	800ca44 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c990:	4b2f      	ldr	r3, [pc, #188]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d112      	bne.n	800c9be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2202      	movs	r2, #2
 800c99c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c9a0:	4b2b      	ldr	r3, [pc, #172]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9aa:	4b29      	ldr	r3, [pc, #164]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fe ffa8 	bl	800b906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fa12 	bl	800cde0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9bc:	e042      	b.n	800ca44 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9be:	4b24      	ldr	r3, [pc, #144]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d02a      	beq.n	800ca22 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7fe ff96 	bl	800b906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9da:	4b1d      	ldr	r3, [pc, #116]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800ca50 <USBD_SetConfig+0x150>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7fe ff6f 	bl	800b8ce <USBD_SetClassConfig>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00f      	beq.n	800ca1a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f918 	bl	800cc32 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7fe ff7b 	bl	800b906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca18:	e014      	b.n	800ca44 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f9e0 	bl	800cde0 <USBD_CtlSendStatus>
      break;
 800ca20:	e010      	b.n	800ca44 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f9dc 	bl	800cde0 <USBD_CtlSendStatus>
      break;
 800ca28:	e00c      	b.n	800ca44 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f900 	bl	800cc32 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca32:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <USBD_SetConfig+0x150>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7fe ff64 	bl	800b906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	73fb      	strb	r3, [r7, #15]
      break;
 800ca42:	bf00      	nop
  }

  return ret;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	240005ac 	.word	0x240005ac

0800ca54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	88db      	ldrh	r3, [r3, #6]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d004      	beq.n	800ca70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f8e2 	bl	800cc32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca6e:	e023      	b.n	800cab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	dc02      	bgt.n	800ca82 <USBD_GetConfig+0x2e>
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	dc03      	bgt.n	800ca88 <USBD_GetConfig+0x34>
 800ca80:	e015      	b.n	800caae <USBD_GetConfig+0x5a>
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d00b      	beq.n	800ca9e <USBD_GetConfig+0x4a>
 800ca86:	e012      	b.n	800caae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3308      	adds	r3, #8
 800ca92:	2201      	movs	r2, #1
 800ca94:	4619      	mov	r1, r3
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f948 	bl	800cd2c <USBD_CtlSendData>
        break;
 800ca9c:	e00c      	b.n	800cab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3304      	adds	r3, #4
 800caa2:	2201      	movs	r2, #1
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f940 	bl	800cd2c <USBD_CtlSendData>
        break;
 800caac:	e004      	b.n	800cab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f8be 	bl	800cc32 <USBD_CtlError>
        break;
 800cab6:	bf00      	nop
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	3b01      	subs	r3, #1
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d81e      	bhi.n	800cb16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	88db      	ldrh	r3, [r3, #6]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d004      	beq.n	800caea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f8a5 	bl	800cc32 <USBD_CtlError>
        break;
 800cae8:	e01a      	b.n	800cb20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2201      	movs	r2, #1
 800caee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d005      	beq.n	800cb06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f043 0202 	orr.w	r2, r3, #2
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	330c      	adds	r3, #12
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f90c 	bl	800cd2c <USBD_CtlSendData>
      break;
 800cb14:	e004      	b.n	800cb20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f88a 	bl	800cc32 <USBD_CtlError>
      break;
 800cb1e:	bf00      	nop
  }
}
 800cb20:	bf00      	nop
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	885b      	ldrh	r3, [r3, #2]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d107      	bne.n	800cb4a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f94c 	bl	800cde0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb48:	e013      	b.n	800cb72 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	885b      	ldrh	r3, [r3, #2]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d10b      	bne.n	800cb6a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	889b      	ldrh	r3, [r3, #4]
 800cb56:	0a1b      	lsrs	r3, r3, #8
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f93c 	bl	800cde0 <USBD_CtlSendStatus>
}
 800cb68:	e003      	b.n	800cb72 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f860 	bl	800cc32 <USBD_CtlError>
}
 800cb72:	bf00      	nop
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d80b      	bhi.n	800cbaa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	885b      	ldrh	r3, [r3, #2]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d10c      	bne.n	800cbb4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f91c 	bl	800cde0 <USBD_CtlSendStatus>
      }
      break;
 800cba8:	e004      	b.n	800cbb4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f840 	bl	800cc32 <USBD_CtlError>
      break;
 800cbb2:	e000      	b.n	800cbb6 <USBD_ClrFeature+0x3c>
      break;
 800cbb4:	bf00      	nop
  }
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b084      	sub	sp, #16
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	781a      	ldrb	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	781a      	ldrb	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f7ff fa16 	bl	800c01a <SWAPBYTE>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fa09 	bl	800c01a <SWAPBYTE>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3301      	adds	r3, #1
 800cc14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f7ff f9fc 	bl	800c01a <SWAPBYTE>
 800cc22:	4603      	mov	r3, r0
 800cc24:	461a      	mov	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	80da      	strh	r2, [r3, #6]
}
 800cc2a:	bf00      	nop
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc3c:	2180      	movs	r1, #128	@ 0x80
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f003 fb22 	bl	8010288 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc44:	2100      	movs	r1, #0
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f003 fb1e 	bl	8010288 <USBD_LL_StallEP>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d042      	beq.n	800ccf0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cc6e:	6938      	ldr	r0, [r7, #16]
 800cc70:	f000 f842 	bl	800ccf8 <USBD_GetLen>
 800cc74:	4603      	mov	r3, r0
 800cc76:	3301      	adds	r3, #1
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc7e:	d808      	bhi.n	800cc92 <USBD_GetString+0x3e>
 800cc80:	6938      	ldr	r0, [r7, #16]
 800cc82:	f000 f839 	bl	800ccf8 <USBD_GetLen>
 800cc86:	4603      	mov	r3, r0
 800cc88:	3301      	adds	r3, #1
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	e001      	b.n	800cc96 <USBD_GetString+0x42>
 800cc92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	4413      	add	r3, r2
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	7812      	ldrb	r2, [r2, #0]
 800cca4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ccbc:	e013      	b.n	800cce6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	7812      	ldrb	r2, [r2, #0]
 800ccc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	3301      	adds	r3, #1
 800ccce:	613b      	str	r3, [r7, #16]
    idx++;
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	4413      	add	r3, r2
 800ccdc:	2200      	movs	r2, #0
 800ccde:	701a      	strb	r2, [r3, #0]
    idx++;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	3301      	adds	r3, #1
 800cce4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1e7      	bne.n	800ccbe <USBD_GetString+0x6a>
 800ccee:	e000      	b.n	800ccf2 <USBD_GetString+0x9e>
    return;
 800ccf0:	bf00      	nop
  }
}
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd08:	e005      	b.n	800cd16 <USBD_GetLen+0x1e>
  {
    len++;
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	3301      	adds	r3, #1
 800cd14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1f5      	bne.n	800cd0a <USBD_GetLen+0x12>
  }

  return len;
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	2100      	movs	r1, #0
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f003 fb21 	bl	801039a <USBD_LL_Transmit>

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	2100      	movs	r1, #0
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f003 fb10 	bl	801039a <USBD_LL_Transmit>

  return USBD_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	2100      	movs	r1, #0
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f003 fb14 	bl	80103dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	60f8      	str	r0, [r7, #12]
 800cdc6:	60b9      	str	r1, [r7, #8]
 800cdc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f003 fb03 	bl	80103dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2204      	movs	r2, #4
 800cdec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f003 facf 	bl	801039a <USBD_LL_Transmit>

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2205      	movs	r2, #5
 800ce12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce16:	2300      	movs	r3, #0
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f003 fadd 	bl	80103dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce22:	2300      	movs	r3, #0
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <__NVIC_SetPriority>:
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	6039      	str	r1, [r7, #0]
 800ce36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ce38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	db0a      	blt.n	800ce56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	490c      	ldr	r1, [pc, #48]	@ (800ce78 <__NVIC_SetPriority+0x4c>)
 800ce46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce4a:	0112      	lsls	r2, r2, #4
 800ce4c:	b2d2      	uxtb	r2, r2
 800ce4e:	440b      	add	r3, r1
 800ce50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ce54:	e00a      	b.n	800ce6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4908      	ldr	r1, [pc, #32]	@ (800ce7c <__NVIC_SetPriority+0x50>)
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	f003 030f 	and.w	r3, r3, #15
 800ce62:	3b04      	subs	r3, #4
 800ce64:	0112      	lsls	r2, r2, #4
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	440b      	add	r3, r1
 800ce6a:	761a      	strb	r2, [r3, #24]
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	e000e100 	.word	0xe000e100
 800ce7c:	e000ed00 	.word	0xe000ed00

0800ce80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ce84:	4b05      	ldr	r3, [pc, #20]	@ (800ce9c <SysTick_Handler+0x1c>)
 800ce86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ce88:	f001 fd8c 	bl	800e9a4 <xTaskGetSchedulerState>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d001      	beq.n	800ce96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ce92:	f002 fb81 	bl	800f598 <xPortSysTickHandler>
  }
}
 800ce96:	bf00      	nop
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	e000e010 	.word	0xe000e010

0800cea0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cea4:	2100      	movs	r1, #0
 800cea6:	f06f 0004 	mvn.w	r0, #4
 800ceaa:	f7ff ffbf 	bl	800ce2c <__NVIC_SetPriority>
#endif
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
	...

0800ceb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceba:	f3ef 8305 	mrs	r3, IPSR
 800cebe:	603b      	str	r3, [r7, #0]
  return(result);
 800cec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cec6:	f06f 0305 	mvn.w	r3, #5
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	e00c      	b.n	800cee8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cece:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <osKernelInitialize+0x44>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d105      	bne.n	800cee2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ced6:	4b08      	ldr	r3, [pc, #32]	@ (800cef8 <osKernelInitialize+0x44>)
 800ced8:	2201      	movs	r2, #1
 800ceda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cedc:	2300      	movs	r3, #0
 800cede:	607b      	str	r3, [r7, #4]
 800cee0:	e002      	b.n	800cee8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cee2:	f04f 33ff 	mov.w	r3, #4294967295
 800cee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cee8:	687b      	ldr	r3, [r7, #4]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	240005b0 	.word	0x240005b0

0800cefc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf02:	f3ef 8305 	mrs	r3, IPSR
 800cf06:	603b      	str	r3, [r7, #0]
  return(result);
 800cf08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf0e:	f06f 0305 	mvn.w	r3, #5
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	e010      	b.n	800cf38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf16:	4b0b      	ldr	r3, [pc, #44]	@ (800cf44 <osKernelStart+0x48>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d109      	bne.n	800cf32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf1e:	f7ff ffbf 	bl	800cea0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf22:	4b08      	ldr	r3, [pc, #32]	@ (800cf44 <osKernelStart+0x48>)
 800cf24:	2202      	movs	r2, #2
 800cf26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf28:	f001 f8ee 	bl	800e108 <vTaskStartScheduler>
      stat = osOK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e002      	b.n	800cf38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf32:	f04f 33ff 	mov.w	r3, #4294967295
 800cf36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf38:	687b      	ldr	r3, [r7, #4]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	240005b0 	.word	0x240005b0

0800cf48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08e      	sub	sp, #56	@ 0x38
 800cf4c:	af04      	add	r7, sp, #16
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf58:	f3ef 8305 	mrs	r3, IPSR
 800cf5c:	617b      	str	r3, [r7, #20]
  return(result);
 800cf5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d17e      	bne.n	800d062 <osThreadNew+0x11a>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d07b      	beq.n	800d062 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cf6a:	2380      	movs	r3, #128	@ 0x80
 800cf6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cf6e:	2318      	movs	r3, #24
 800cf70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d045      	beq.n	800d00e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <osThreadNew+0x48>
        name = attr->name;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <osThreadNew+0x6e>
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	2b38      	cmp	r3, #56	@ 0x38
 800cfa8:	d805      	bhi.n	800cfb6 <osThreadNew+0x6e>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <osThreadNew+0x72>
        return (NULL);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e054      	b.n	800d064 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	089b      	lsrs	r3, r3, #2
 800cfc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00e      	beq.n	800cff0 <osThreadNew+0xa8>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	2b5b      	cmp	r3, #91	@ 0x5b
 800cfd8:	d90a      	bls.n	800cff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d006      	beq.n	800cff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d002      	beq.n	800cff0 <osThreadNew+0xa8>
        mem = 1;
 800cfea:	2301      	movs	r3, #1
 800cfec:	61bb      	str	r3, [r7, #24]
 800cfee:	e010      	b.n	800d012 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10c      	bne.n	800d012 <osThreadNew+0xca>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d108      	bne.n	800d012 <osThreadNew+0xca>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d104      	bne.n	800d012 <osThreadNew+0xca>
          mem = 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	61bb      	str	r3, [r7, #24]
 800d00c:	e001      	b.n	800d012 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d110      	bne.n	800d03a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d020:	9202      	str	r2, [sp, #8]
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	6a3a      	ldr	r2, [r7, #32]
 800d02c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 fe1a 	bl	800dc68 <xTaskCreateStatic>
 800d034:	4603      	mov	r3, r0
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	e013      	b.n	800d062 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d110      	bne.n	800d062 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	b29a      	uxth	r2, r3
 800d044:	f107 0310 	add.w	r3, r7, #16
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 fe68 	bl	800dd28 <xTaskCreate>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d001      	beq.n	800d062 <osThreadNew+0x11a>
            hTask = NULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d062:	693b      	ldr	r3, [r7, #16]
}
 800d064:	4618      	mov	r0, r3
 800d066:	3728      	adds	r7, #40	@ 0x28
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d074:	f3ef 8305 	mrs	r3, IPSR
 800d078:	60bb      	str	r3, [r7, #8]
  return(result);
 800d07a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d003      	beq.n	800d088 <osDelay+0x1c>
    stat = osErrorISR;
 800d080:	f06f 0305 	mvn.w	r3, #5
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	e007      	b.n	800d098 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 f802 	bl	800e09c <vTaskDelay>
    }
  }

  return (stat);
 800d098:	68fb      	ldr	r3, [r7, #12]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4a07      	ldr	r2, [pc, #28]	@ (800d0d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	4a06      	ldr	r2, [pc, #24]	@ (800d0d4 <vApplicationGetIdleTaskMemory+0x30>)
 800d0ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2280      	movs	r2, #128	@ 0x80
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	240005b4 	.word	0x240005b4
 800d0d4:	24000610 	.word	0x24000610

0800d0d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4a07      	ldr	r2, [pc, #28]	@ (800d104 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	4a06      	ldr	r2, [pc, #24]	@ (800d108 <vApplicationGetTimerTaskMemory+0x30>)
 800d0ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0f6:	601a      	str	r2, [r3, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	24000810 	.word	0x24000810
 800d108:	2400086c 	.word	0x2400086c

0800d10c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0208 	add.w	r2, r3, #8
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f04f 32ff 	mov.w	r2, #4294967295
 800d124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f103 0208 	add.w	r2, r3, #8
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f103 0208 	add.w	r2, r3, #8
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	689a      	ldr	r2, [r3, #8]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d103      	bne.n	800d1ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	e00c      	b.n	800d1e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e002      	b.n	800d1dc <vListInsert+0x2e>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d2f6      	bcs.n	800d1d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6892      	ldr	r2, [r2, #8]
 800d236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	6852      	ldr	r2, [r2, #4]
 800d240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d103      	bne.n	800d254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	1e5a      	subs	r2, r3, #1
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10b      	bne.n	800d2a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	e7fd      	b.n	800d29c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2a0:	f002 f8ea 	bl	800f478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ac:	68f9      	ldr	r1, [r7, #12]
 800d2ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2b0:	fb01 f303 	mul.w	r3, r1, r3
 800d2b4:	441a      	add	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2d6:	fb01 f303 	mul.w	r3, r1, r3
 800d2da:	441a      	add	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	22ff      	movs	r2, #255	@ 0xff
 800d2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	22ff      	movs	r2, #255	@ 0xff
 800d2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d114      	bne.n	800d320 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d01a      	beq.n	800d334 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3310      	adds	r3, #16
 800d302:	4618      	mov	r0, r3
 800d304:	f001 f98e 	bl	800e624 <xTaskRemoveFromEventList>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d012      	beq.n	800d334 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d30e:	4b0d      	ldr	r3, [pc, #52]	@ (800d344 <xQueueGenericReset+0xd0>)
 800d310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	e009      	b.n	800d334 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3310      	adds	r3, #16
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff fef1 	bl	800d10c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3324      	adds	r3, #36	@ 0x24
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff feec 	bl	800d10c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d334:	f002 f8d2 	bl	800f4dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d338:	2301      	movs	r3, #1
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	e000ed04 	.word	0xe000ed04

0800d348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08e      	sub	sp, #56	@ 0x38
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10b      	bne.n	800d374 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d36e:	bf00      	nop
 800d370:	bf00      	nop
 800d372:	e7fd      	b.n	800d370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10b      	bne.n	800d392 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d38c:	bf00      	nop
 800d38e:	bf00      	nop
 800d390:	e7fd      	b.n	800d38e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <xQueueGenericCreateStatic+0x56>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <xQueueGenericCreateStatic+0x5a>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e000      	b.n	800d3a4 <xQueueGenericCreateStatic+0x5c>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10b      	bne.n	800d3c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	623b      	str	r3, [r7, #32]
}
 800d3ba:	bf00      	nop
 800d3bc:	bf00      	nop
 800d3be:	e7fd      	b.n	800d3bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <xQueueGenericCreateStatic+0x84>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <xQueueGenericCreateStatic+0x88>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <xQueueGenericCreateStatic+0x8a>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10b      	bne.n	800d3ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	61fb      	str	r3, [r7, #28]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3ee:	2350      	movs	r3, #80	@ 0x50
 800d3f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b50      	cmp	r3, #80	@ 0x50
 800d3f6:	d00b      	beq.n	800d410 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	61bb      	str	r3, [r7, #24]
}
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
 800d40e:	e7fd      	b.n	800d40c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d410:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00d      	beq.n	800d438 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41e:	2201      	movs	r2, #1
 800d420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d424:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	4613      	mov	r3, r2
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 f805 	bl	800d442 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3730      	adds	r7, #48	@ 0x30
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
 800d44e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d103      	bne.n	800d45e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	69ba      	ldr	r2, [r7, #24]
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	e002      	b.n	800d464 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d470:	2101      	movs	r1, #1
 800d472:	69b8      	ldr	r0, [r7, #24]
 800d474:	f7ff fefe 	bl	800d274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	78fa      	ldrb	r2, [r7, #3]
 800d47c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d480:	bf00      	nop
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08e      	sub	sp, #56	@ 0x38
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d496:	2300      	movs	r3, #0
 800d498:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10b      	bne.n	800d4bc <xQueueGenericSend+0x34>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	e7fd      	b.n	800d4b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d103      	bne.n	800d4ca <xQueueGenericSend+0x42>
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <xQueueGenericSend+0x46>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e000      	b.n	800d4d0 <xQueueGenericSend+0x48>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10b      	bne.n	800d4ec <xQueueGenericSend+0x64>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4e6:	bf00      	nop
 800d4e8:	bf00      	nop
 800d4ea:	e7fd      	b.n	800d4e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d103      	bne.n	800d4fa <xQueueGenericSend+0x72>
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d101      	bne.n	800d4fe <xQueueGenericSend+0x76>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e000      	b.n	800d500 <xQueueGenericSend+0x78>
 800d4fe:	2300      	movs	r3, #0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <xQueueGenericSend+0x94>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	623b      	str	r3, [r7, #32]
}
 800d516:	bf00      	nop
 800d518:	bf00      	nop
 800d51a:	e7fd      	b.n	800d518 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d51c:	f001 fa42 	bl	800e9a4 <xTaskGetSchedulerState>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d102      	bne.n	800d52c <xQueueGenericSend+0xa4>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <xQueueGenericSend+0xa8>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <xQueueGenericSend+0xaa>
 800d530:	2300      	movs	r3, #0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <xQueueGenericSend+0xc6>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	61fb      	str	r3, [r7, #28]
}
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
 800d54c:	e7fd      	b.n	800d54a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d54e:	f001 ff93 	bl	800f478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d302      	bcc.n	800d564 <xQueueGenericSend+0xdc>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b02      	cmp	r3, #2
 800d562:	d129      	bne.n	800d5b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d56a:	f000 fa0f 	bl	800d98c <prvCopyDataToQueue>
 800d56e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d574:	2b00      	cmp	r3, #0
 800d576:	d010      	beq.n	800d59a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57a:	3324      	adds	r3, #36	@ 0x24
 800d57c:	4618      	mov	r0, r3
 800d57e:	f001 f851 	bl	800e624 <xTaskRemoveFromEventList>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d013      	beq.n	800d5b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d588:	4b3f      	ldr	r3, [pc, #252]	@ (800d688 <xQueueGenericSend+0x200>)
 800d58a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	e00a      	b.n	800d5b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5a0:	4b39      	ldr	r3, [pc, #228]	@ (800d688 <xQueueGenericSend+0x200>)
 800d5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5b0:	f001 ff94 	bl	800f4dc <vPortExitCritical>
				return pdPASS;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e063      	b.n	800d680 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5be:	f001 ff8d 	bl	800f4dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e05c      	b.n	800d680 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f001 f88b 	bl	800e6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5da:	f001 ff7f 	bl	800f4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5de:	f000 fdfb 	bl	800e1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5e2:	f001 ff49 	bl	800f478 <vPortEnterCritical>
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5ec:	b25b      	sxtb	r3, r3
 800d5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f2:	d103      	bne.n	800d5fc <xQueueGenericSend+0x174>
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d602:	b25b      	sxtb	r3, r3
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d103      	bne.n	800d612 <xQueueGenericSend+0x18a>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d612:	f001 ff63 	bl	800f4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d616:	1d3a      	adds	r2, r7, #4
 800d618:	f107 0314 	add.w	r3, r7, #20
 800d61c:	4611      	mov	r1, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	f001 f87a 	bl	800e718 <xTaskCheckForTimeOut>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d124      	bne.n	800d674 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d62a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d62c:	f000 faa6 	bl	800db7c <prvIsQueueFull>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d638:	3310      	adds	r3, #16
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 ff9e 	bl	800e580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d646:	f000 fa31 	bl	800daac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d64a:	f000 fdd3 	bl	800e1f4 <xTaskResumeAll>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	f47f af7c 	bne.w	800d54e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d656:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <xQueueGenericSend+0x200>)
 800d658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	e772      	b.n	800d54e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d66a:	f000 fa1f 	bl	800daac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d66e:	f000 fdc1 	bl	800e1f4 <xTaskResumeAll>
 800d672:	e76c      	b.n	800d54e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d676:	f000 fa19 	bl	800daac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d67a:	f000 fdbb 	bl	800e1f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d67e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d680:	4618      	mov	r0, r3
 800d682:	3738      	adds	r7, #56	@ 0x38
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b090      	sub	sp, #64	@ 0x40
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10b      	bne.n	800d6bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6b6:	bf00      	nop
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d103      	bne.n	800d6ca <xQueueGenericSendFromISR+0x3e>
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <xQueueGenericSendFromISR+0x42>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <xQueueGenericSendFromISR+0x44>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10b      	bne.n	800d6ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	e7fd      	b.n	800d6e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d103      	bne.n	800d6fa <xQueueGenericSendFromISR+0x6e>
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <xQueueGenericSendFromISR+0x72>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e000      	b.n	800d700 <xQueueGenericSendFromISR+0x74>
 800d6fe:	2300      	movs	r3, #0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10b      	bne.n	800d71c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	623b      	str	r3, [r7, #32]
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d71c:	f001 ff8c 	bl	800f638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d720:	f3ef 8211 	mrs	r2, BASEPRI
 800d724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	61fa      	str	r2, [r7, #28]
 800d736:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d738:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d73a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d744:	429a      	cmp	r2, r3
 800d746:	d302      	bcc.n	800d74e <xQueueGenericSendFromISR+0xc2>
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d12f      	bne.n	800d7ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	68b9      	ldr	r1, [r7, #8]
 800d762:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d764:	f000 f912 	bl	800d98c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d768:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d770:	d112      	bne.n	800d798 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d776:	2b00      	cmp	r3, #0
 800d778:	d016      	beq.n	800d7a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77c:	3324      	adds	r3, #36	@ 0x24
 800d77e:	4618      	mov	r0, r3
 800d780:	f000 ff50 	bl	800e624 <xTaskRemoveFromEventList>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00e      	beq.n	800d7a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00b      	beq.n	800d7a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	601a      	str	r2, [r3, #0]
 800d796:	e007      	b.n	800d7a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d798:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d79c:	3301      	adds	r3, #1
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	b25a      	sxtb	r2, r3
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d7ac:	e001      	b.n	800d7b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3740      	adds	r7, #64	@ 0x40
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08c      	sub	sp, #48	@ 0x30
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10b      	bne.n	800d7fa <xQueueReceive+0x32>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	623b      	str	r3, [r7, #32]
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
 800d7f8:	e7fd      	b.n	800d7f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <xQueueReceive+0x40>
 800d800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d804:	2b00      	cmp	r3, #0
 800d806:	d101      	bne.n	800d80c <xQueueReceive+0x44>
 800d808:	2301      	movs	r3, #1
 800d80a:	e000      	b.n	800d80e <xQueueReceive+0x46>
 800d80c:	2300      	movs	r3, #0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10b      	bne.n	800d82a <xQueueReceive+0x62>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	61fb      	str	r3, [r7, #28]
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	e7fd      	b.n	800d826 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d82a:	f001 f8bb 	bl	800e9a4 <xTaskGetSchedulerState>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d102      	bne.n	800d83a <xQueueReceive+0x72>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d101      	bne.n	800d83e <xQueueReceive+0x76>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e000      	b.n	800d840 <xQueueReceive+0x78>
 800d83e:	2300      	movs	r3, #0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10b      	bne.n	800d85c <xQueueReceive+0x94>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	61bb      	str	r3, [r7, #24]
}
 800d856:	bf00      	nop
 800d858:	bf00      	nop
 800d85a:	e7fd      	b.n	800d858 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d85c:	f001 fe0c 	bl	800f478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d864:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01f      	beq.n	800d8ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d86c:	68b9      	ldr	r1, [r7, #8]
 800d86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d870:	f000 f8f6 	bl	800da60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d876:	1e5a      	subs	r2, r3, #1
 800d878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00f      	beq.n	800d8a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d886:	3310      	adds	r3, #16
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 fecb 	bl	800e624 <xTaskRemoveFromEventList>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d007      	beq.n	800d8a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d894:	4b3c      	ldr	r3, [pc, #240]	@ (800d988 <xQueueReceive+0x1c0>)
 800d896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8a4:	f001 fe1a 	bl	800f4dc <vPortExitCritical>
				return pdPASS;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e069      	b.n	800d980 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d103      	bne.n	800d8ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8b2:	f001 fe13 	bl	800f4dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e062      	b.n	800d980 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 ff11 	bl	800e6ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8ce:	f001 fe05 	bl	800f4dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8d2:	f000 fc81 	bl	800e1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8d6:	f001 fdcf 	bl	800f478 <vPortEnterCritical>
 800d8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d8e0:	b25b      	sxtb	r3, r3
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e6:	d103      	bne.n	800d8f0 <xQueueReceive+0x128>
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8f6:	b25b      	sxtb	r3, r3
 800d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fc:	d103      	bne.n	800d906 <xQueueReceive+0x13e>
 800d8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d906:	f001 fde9 	bl	800f4dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d90a:	1d3a      	adds	r2, r7, #4
 800d90c:	f107 0310 	add.w	r3, r7, #16
 800d910:	4611      	mov	r1, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f000 ff00 	bl	800e718 <xTaskCheckForTimeOut>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d123      	bne.n	800d966 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d920:	f000 f916 	bl	800db50 <prvIsQueueEmpty>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d017      	beq.n	800d95a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92c:	3324      	adds	r3, #36	@ 0x24
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f000 fe24 	bl	800e580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d93a:	f000 f8b7 	bl	800daac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d93e:	f000 fc59 	bl	800e1f4 <xTaskResumeAll>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d189      	bne.n	800d85c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d948:	4b0f      	ldr	r3, [pc, #60]	@ (800d988 <xQueueReceive+0x1c0>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	e780      	b.n	800d85c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d95c:	f000 f8a6 	bl	800daac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d960:	f000 fc48 	bl	800e1f4 <xTaskResumeAll>
 800d964:	e77a      	b.n	800d85c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d968:	f000 f8a0 	bl	800daac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d96c:	f000 fc42 	bl	800e1f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d972:	f000 f8ed 	bl	800db50 <prvIsQueueEmpty>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f43f af6f 	beq.w	800d85c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d97e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d980:	4618      	mov	r0, r3
 800d982:	3730      	adds	r7, #48	@ 0x30
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d998:	2300      	movs	r3, #0
 800d99a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10d      	bne.n	800d9c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d14d      	bne.n	800da4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 f812 	bl	800e9e0 <xTaskPriorityDisinherit>
 800d9bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	609a      	str	r2, [r3, #8]
 800d9c4:	e043      	b.n	800da4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d119      	bne.n	800da00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6858      	ldr	r0, [r3, #4]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	68b9      	ldr	r1, [r7, #8]
 800d9d8:	f005 fa13 	bl	8012e02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	685a      	ldr	r2, [r3, #4]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9e4:	441a      	add	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d32b      	bcc.n	800da4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	605a      	str	r2, [r3, #4]
 800d9fe:	e026      	b.n	800da4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	68d8      	ldr	r0, [r3, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da08:	461a      	mov	r2, r3
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	f005 f9f9 	bl	8012e02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da18:	425b      	negs	r3, r3
 800da1a:	441a      	add	r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	68da      	ldr	r2, [r3, #12]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d207      	bcs.n	800da3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da34:	425b      	negs	r3, r3
 800da36:	441a      	add	r2, r3
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d105      	bne.n	800da4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800da56:	697b      	ldr	r3, [r7, #20]
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d018      	beq.n	800daa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da7a:	441a      	add	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68da      	ldr	r2, [r3, #12]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d303      	bcc.n	800da94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68d9      	ldr	r1, [r3, #12]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9c:	461a      	mov	r2, r3
 800da9e:	6838      	ldr	r0, [r7, #0]
 800daa0:	f005 f9af 	bl	8012e02 <memcpy>
	}
}
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dab4:	f001 fce0 	bl	800f478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dabe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dac0:	e011      	b.n	800dae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d012      	beq.n	800daf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	3324      	adds	r3, #36	@ 0x24
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 fda8 	bl	800e624 <xTaskRemoveFromEventList>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dada:	f000 fe81 	bl	800e7e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daea:	2b00      	cmp	r3, #0
 800daec:	dce9      	bgt.n	800dac2 <prvUnlockQueue+0x16>
 800daee:	e000      	b.n	800daf2 <prvUnlockQueue+0x46>
					break;
 800daf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	22ff      	movs	r2, #255	@ 0xff
 800daf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dafa:	f001 fcef 	bl	800f4dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dafe:	f001 fcbb 	bl	800f478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db0a:	e011      	b.n	800db30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d012      	beq.n	800db3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3310      	adds	r3, #16
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 fd83 	bl	800e624 <xTaskRemoveFromEventList>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db24:	f000 fe5c 	bl	800e7e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db28:	7bbb      	ldrb	r3, [r7, #14]
 800db2a:	3b01      	subs	r3, #1
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db34:	2b00      	cmp	r3, #0
 800db36:	dce9      	bgt.n	800db0c <prvUnlockQueue+0x60>
 800db38:	e000      	b.n	800db3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	22ff      	movs	r2, #255	@ 0xff
 800db40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800db44:	f001 fcca 	bl	800f4dc <vPortExitCritical>
}
 800db48:	bf00      	nop
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db58:	f001 fc8e 	bl	800f478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db64:	2301      	movs	r3, #1
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	e001      	b.n	800db6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db6a:	2300      	movs	r3, #0
 800db6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db6e:	f001 fcb5 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800db72:	68fb      	ldr	r3, [r7, #12]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db84:	f001 fc78 	bl	800f478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db90:	429a      	cmp	r2, r3
 800db92:	d102      	bne.n	800db9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	60fb      	str	r3, [r7, #12]
 800db98:	e001      	b.n	800db9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db9e:	f001 fc9d 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800dba2:	68fb      	ldr	r3, [r7, #12]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
 800dbba:	e014      	b.n	800dbe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbbc:	4a0f      	ldr	r2, [pc, #60]	@ (800dbfc <vQueueAddToRegistry+0x50>)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10b      	bne.n	800dbe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbc8:	490c      	ldr	r1, [pc, #48]	@ (800dbfc <vQueueAddToRegistry+0x50>)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	683a      	ldr	r2, [r7, #0]
 800dbce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbd2:	4a0a      	ldr	r2, [pc, #40]	@ (800dbfc <vQueueAddToRegistry+0x50>)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	4413      	add	r3, r2
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dbde:	e006      	b.n	800dbee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	60fb      	str	r3, [r7, #12]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b07      	cmp	r3, #7
 800dbea:	d9e7      	bls.n	800dbbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	24000c6c 	.word	0x24000c6c

0800dc00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc10:	f001 fc32 	bl	800f478 <vPortEnterCritical>
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc1a:	b25b      	sxtb	r3, r3
 800dc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc20:	d103      	bne.n	800dc2a <vQueueWaitForMessageRestricted+0x2a>
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc30:	b25b      	sxtb	r3, r3
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d103      	bne.n	800dc40 <vQueueWaitForMessageRestricted+0x40>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc40:	f001 fc4c 	bl	800f4dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d106      	bne.n	800dc5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	3324      	adds	r3, #36	@ 0x24
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fcb9 	bl	800e5cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc5a:	6978      	ldr	r0, [r7, #20]
 800dc5c:	f7ff ff26 	bl	800daac <prvUnlockQueue>
	}
 800dc60:	bf00      	nop
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08e      	sub	sp, #56	@ 0x38
 800dc6c:	af04      	add	r7, sp, #16
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
 800dc74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10b      	bne.n	800dc94 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	623b      	str	r3, [r7, #32]
}
 800dc8e:	bf00      	nop
 800dc90:	bf00      	nop
 800dc92:	e7fd      	b.n	800dc90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10b      	bne.n	800dcb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	61fb      	str	r3, [r7, #28]
}
 800dcac:	bf00      	nop
 800dcae:	bf00      	nop
 800dcb0:	e7fd      	b.n	800dcae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcb2:	235c      	movs	r3, #92	@ 0x5c
 800dcb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	2b5c      	cmp	r3, #92	@ 0x5c
 800dcba:	d00b      	beq.n	800dcd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	61bb      	str	r3, [r7, #24]
}
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
 800dcd2:	e7fd      	b.n	800dcd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d01e      	beq.n	800dd1a <xTaskCreateStatic+0xb2>
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d01b      	beq.n	800dd1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcee:	2202      	movs	r2, #2
 800dcf0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	9303      	str	r3, [sp, #12]
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfa:	9302      	str	r3, [sp, #8]
 800dcfc:	f107 0314 	add.w	r3, r7, #20
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	68b9      	ldr	r1, [r7, #8]
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 f850 	bl	800ddb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd14:	f000 f8de 	bl	800ded4 <prvAddNewTaskToReadyList>
 800dd18:	e001      	b.n	800dd1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd1e:	697b      	ldr	r3, [r7, #20]
	}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3728      	adds	r7, #40	@ 0x28
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08c      	sub	sp, #48	@ 0x30
 800dd2c:	af04      	add	r7, sp, #16
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	4613      	mov	r3, r2
 800dd36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd38:	88fb      	ldrh	r3, [r7, #6]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f001 fcbd 	bl	800f6bc <pvPortMalloc>
 800dd42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00e      	beq.n	800dd68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd4a:	205c      	movs	r0, #92	@ 0x5c
 800dd4c:	f001 fcb6 	bl	800f6bc <pvPortMalloc>
 800dd50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d003      	beq.n	800dd60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800dd5e:	e005      	b.n	800dd6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd60:	6978      	ldr	r0, [r7, #20]
 800dd62:	f001 fd79 	bl	800f858 <vPortFree>
 800dd66:	e001      	b.n	800dd6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d017      	beq.n	800dda2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd7a:	88fa      	ldrh	r2, [r7, #6]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	68b9      	ldr	r1, [r7, #8]
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f000 f80e 	bl	800ddb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd96:	69f8      	ldr	r0, [r7, #28]
 800dd98:	f000 f89c 	bl	800ded4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	61bb      	str	r3, [r7, #24]
 800dda0:	e002      	b.n	800dda8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dda2:	f04f 33ff 	mov.w	r3, #4294967295
 800dda6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dda8:	69bb      	ldr	r3, [r7, #24]
	}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3720      	adds	r7, #32
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b088      	sub	sp, #32
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	60b9      	str	r1, [r7, #8]
 800ddbc:	607a      	str	r2, [r7, #4]
 800ddbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	461a      	mov	r2, r3
 800ddca:	21a5      	movs	r1, #165	@ 0xa5
 800ddcc:	f004 ff89 	bl	8012ce2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddd4:	6879      	ldr	r1, [r7, #4]
 800ddd6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ddda:	440b      	add	r3, r1
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	4413      	add	r3, r2
 800dde0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	f023 0307 	bic.w	r3, r3, #7
 800dde8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	f003 0307 	and.w	r3, r3, #7
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	617b      	str	r3, [r7, #20]
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	e7fd      	b.n	800de08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d01f      	beq.n	800de52 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de12:	2300      	movs	r3, #0
 800de14:	61fb      	str	r3, [r7, #28]
 800de16:	e012      	b.n	800de3e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	4413      	add	r3, r2
 800de1e:	7819      	ldrb	r1, [r3, #0]
 800de20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	4413      	add	r3, r2
 800de26:	3334      	adds	r3, #52	@ 0x34
 800de28:	460a      	mov	r2, r1
 800de2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	4413      	add	r3, r2
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d006      	beq.n	800de46 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	3301      	adds	r3, #1
 800de3c:	61fb      	str	r3, [r7, #28]
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	2b0f      	cmp	r3, #15
 800de42:	d9e9      	bls.n	800de18 <prvInitialiseNewTask+0x66>
 800de44:	e000      	b.n	800de48 <prvInitialiseNewTask+0x96>
			{
				break;
 800de46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	2200      	movs	r2, #0
 800de4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800de50:	e003      	b.n	800de5a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de54:	2200      	movs	r2, #0
 800de56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5c:	2b37      	cmp	r3, #55	@ 0x37
 800de5e:	d901      	bls.n	800de64 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de60:	2337      	movs	r3, #55	@ 0x37
 800de62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de72:	2200      	movs	r2, #0
 800de74:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de78:	3304      	adds	r3, #4
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff f966 	bl	800d14c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de82:	3318      	adds	r3, #24
 800de84:	4618      	mov	r0, r3
 800de86:	f7ff f961 	bl	800d14c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea2:	2200      	movs	r2, #0
 800dea4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea8:	2200      	movs	r2, #0
 800deaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	68f9      	ldr	r1, [r7, #12]
 800deb2:	69b8      	ldr	r0, [r7, #24]
 800deb4:	f001 f9b2 	bl	800f21c <pxPortInitialiseStack>
 800deb8:	4602      	mov	r2, r0
 800deba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800debe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800deca:	bf00      	nop
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dedc:	f001 facc 	bl	800f478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dee0:	4b2d      	ldr	r3, [pc, #180]	@ (800df98 <prvAddNewTaskToReadyList+0xc4>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	4a2c      	ldr	r2, [pc, #176]	@ (800df98 <prvAddNewTaskToReadyList+0xc4>)
 800dee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800deea:	4b2c      	ldr	r3, [pc, #176]	@ (800df9c <prvAddNewTaskToReadyList+0xc8>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d109      	bne.n	800df06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800def2:	4a2a      	ldr	r2, [pc, #168]	@ (800df9c <prvAddNewTaskToReadyList+0xc8>)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800def8:	4b27      	ldr	r3, [pc, #156]	@ (800df98 <prvAddNewTaskToReadyList+0xc4>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d110      	bne.n	800df22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df00:	f000 fc92 	bl	800e828 <prvInitialiseTaskLists>
 800df04:	e00d      	b.n	800df22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df06:	4b26      	ldr	r3, [pc, #152]	@ (800dfa0 <prvAddNewTaskToReadyList+0xcc>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d109      	bne.n	800df22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df0e:	4b23      	ldr	r3, [pc, #140]	@ (800df9c <prvAddNewTaskToReadyList+0xc8>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df18:	429a      	cmp	r2, r3
 800df1a:	d802      	bhi.n	800df22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df1c:	4a1f      	ldr	r2, [pc, #124]	@ (800df9c <prvAddNewTaskToReadyList+0xc8>)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df22:	4b20      	ldr	r3, [pc, #128]	@ (800dfa4 <prvAddNewTaskToReadyList+0xd0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3301      	adds	r3, #1
 800df28:	4a1e      	ldr	r2, [pc, #120]	@ (800dfa4 <prvAddNewTaskToReadyList+0xd0>)
 800df2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa4 <prvAddNewTaskToReadyList+0xd0>)
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df38:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <prvAddNewTaskToReadyList+0xd4>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d903      	bls.n	800df48 <prvAddNewTaskToReadyList+0x74>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df44:	4a18      	ldr	r2, [pc, #96]	@ (800dfa8 <prvAddNewTaskToReadyList+0xd4>)
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df4c:	4613      	mov	r3, r2
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4a15      	ldr	r2, [pc, #84]	@ (800dfac <prvAddNewTaskToReadyList+0xd8>)
 800df56:	441a      	add	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3304      	adds	r3, #4
 800df5c:	4619      	mov	r1, r3
 800df5e:	4610      	mov	r0, r2
 800df60:	f7ff f901 	bl	800d166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df64:	f001 faba 	bl	800f4dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df68:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa0 <prvAddNewTaskToReadyList+0xcc>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00e      	beq.n	800df8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df70:	4b0a      	ldr	r3, [pc, #40]	@ (800df9c <prvAddNewTaskToReadyList+0xc8>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d207      	bcs.n	800df8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df7e:	4b0c      	ldr	r3, [pc, #48]	@ (800dfb0 <prvAddNewTaskToReadyList+0xdc>)
 800df80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df84:	601a      	str	r2, [r3, #0]
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df8e:	bf00      	nop
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	24001180 	.word	0x24001180
 800df9c:	24000cac 	.word	0x24000cac
 800dfa0:	2400118c 	.word	0x2400118c
 800dfa4:	2400119c 	.word	0x2400119c
 800dfa8:	24001188 	.word	0x24001188
 800dfac:	24000cb0 	.word	0x24000cb0
 800dfb0:	e000ed04 	.word	0xe000ed04

0800dfb4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dfbc:	f001 fa5c 	bl	800f478 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d102      	bne.n	800dfcc <vTaskDelete+0x18>
 800dfc6:	4b2d      	ldr	r3, [pc, #180]	@ (800e07c <vTaskDelete+0xc8>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	e000      	b.n	800dfce <vTaskDelete+0x1a>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff f923 	bl	800d220 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d004      	beq.n	800dfec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3318      	adds	r3, #24
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7ff f91a 	bl	800d220 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dfec:	4b24      	ldr	r3, [pc, #144]	@ (800e080 <vTaskDelete+0xcc>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	3301      	adds	r3, #1
 800dff2:	4a23      	ldr	r2, [pc, #140]	@ (800e080 <vTaskDelete+0xcc>)
 800dff4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dff6:	4b21      	ldr	r3, [pc, #132]	@ (800e07c <vTaskDelete+0xc8>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d10b      	bne.n	800e018 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	3304      	adds	r3, #4
 800e004:	4619      	mov	r1, r3
 800e006:	481f      	ldr	r0, [pc, #124]	@ (800e084 <vTaskDelete+0xd0>)
 800e008:	f7ff f8ad 	bl	800d166 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e00c:	4b1e      	ldr	r3, [pc, #120]	@ (800e088 <vTaskDelete+0xd4>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3301      	adds	r3, #1
 800e012:	4a1d      	ldr	r2, [pc, #116]	@ (800e088 <vTaskDelete+0xd4>)
 800e014:	6013      	str	r3, [r2, #0]
 800e016:	e009      	b.n	800e02c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e018:	4b1c      	ldr	r3, [pc, #112]	@ (800e08c <vTaskDelete+0xd8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	4a1b      	ldr	r2, [pc, #108]	@ (800e08c <vTaskDelete+0xd8>)
 800e020:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f000 fc6e 	bl	800e904 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e028:	f000 fc9c 	bl	800e964 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e02c:	f001 fa56 	bl	800f4dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e030:	4b17      	ldr	r3, [pc, #92]	@ (800e090 <vTaskDelete+0xdc>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d01c      	beq.n	800e072 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e038:	4b10      	ldr	r3, [pc, #64]	@ (800e07c <vTaskDelete+0xc8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d117      	bne.n	800e072 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e042:	4b14      	ldr	r3, [pc, #80]	@ (800e094 <vTaskDelete+0xe0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d00b      	beq.n	800e062 <vTaskDelete+0xae>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	60bb      	str	r3, [r7, #8]
}
 800e05c:	bf00      	nop
 800e05e:	bf00      	nop
 800e060:	e7fd      	b.n	800e05e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e062:	4b0d      	ldr	r3, [pc, #52]	@ (800e098 <vTaskDelete+0xe4>)
 800e064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e072:	bf00      	nop
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	24000cac 	.word	0x24000cac
 800e080:	2400119c 	.word	0x2400119c
 800e084:	24001154 	.word	0x24001154
 800e088:	24001168 	.word	0x24001168
 800e08c:	24001180 	.word	0x24001180
 800e090:	2400118c 	.word	0x2400118c
 800e094:	240011a8 	.word	0x240011a8
 800e098:	e000ed04 	.word	0xe000ed04

0800e09c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d018      	beq.n	800e0e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e0ae:	4b14      	ldr	r3, [pc, #80]	@ (800e100 <vTaskDelay+0x64>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00b      	beq.n	800e0ce <vTaskDelay+0x32>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60bb      	str	r3, [r7, #8]
}
 800e0c8:	bf00      	nop
 800e0ca:	bf00      	nop
 800e0cc:	e7fd      	b.n	800e0ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e0ce:	f000 f883 	bl	800e1d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fcf3 	bl	800eac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e0da:	f000 f88b 	bl	800e1f4 <xTaskResumeAll>
 800e0de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d107      	bne.n	800e0f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e0e6:	4b07      	ldr	r3, [pc, #28]	@ (800e104 <vTaskDelay+0x68>)
 800e0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0f6:	bf00      	nop
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	240011a8 	.word	0x240011a8
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	@ 0x28
 800e10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e112:	2300      	movs	r3, #0
 800e114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e116:	463a      	mov	r2, r7
 800e118:	1d39      	adds	r1, r7, #4
 800e11a:	f107 0308 	add.w	r3, r7, #8
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fe ffc0 	bl	800d0a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	9202      	str	r2, [sp, #8]
 800e12c:	9301      	str	r3, [sp, #4]
 800e12e:	2300      	movs	r3, #0
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	2300      	movs	r3, #0
 800e134:	460a      	mov	r2, r1
 800e136:	4922      	ldr	r1, [pc, #136]	@ (800e1c0 <vTaskStartScheduler+0xb8>)
 800e138:	4822      	ldr	r0, [pc, #136]	@ (800e1c4 <vTaskStartScheduler+0xbc>)
 800e13a:	f7ff fd95 	bl	800dc68 <xTaskCreateStatic>
 800e13e:	4603      	mov	r3, r0
 800e140:	4a21      	ldr	r2, [pc, #132]	@ (800e1c8 <vTaskStartScheduler+0xc0>)
 800e142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e144:	4b20      	ldr	r3, [pc, #128]	@ (800e1c8 <vTaskStartScheduler+0xc0>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e14c:	2301      	movs	r3, #1
 800e14e:	617b      	str	r3, [r7, #20]
 800e150:	e001      	b.n	800e156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e152:	2300      	movs	r3, #0
 800e154:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d102      	bne.n	800e162 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e15c:	f000 fd04 	bl	800eb68 <xTimerCreateTimerTask>
 800e160:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d116      	bne.n	800e196 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	613b      	str	r3, [r7, #16]
}
 800e17a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e17c:	4b13      	ldr	r3, [pc, #76]	@ (800e1cc <vTaskStartScheduler+0xc4>)
 800e17e:	f04f 32ff 	mov.w	r2, #4294967295
 800e182:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e184:	4b12      	ldr	r3, [pc, #72]	@ (800e1d0 <vTaskStartScheduler+0xc8>)
 800e186:	2201      	movs	r2, #1
 800e188:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e18a:	4b12      	ldr	r3, [pc, #72]	@ (800e1d4 <vTaskStartScheduler+0xcc>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e190:	f001 f8ce 	bl	800f330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e194:	e00f      	b.n	800e1b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19c:	d10b      	bne.n	800e1b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800e19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	60fb      	str	r3, [r7, #12]
}
 800e1b0:	bf00      	nop
 800e1b2:	bf00      	nop
 800e1b4:	e7fd      	b.n	800e1b2 <vTaskStartScheduler+0xaa>
}
 800e1b6:	bf00      	nop
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	080152d0 	.word	0x080152d0
 800e1c4:	0800e7f9 	.word	0x0800e7f9
 800e1c8:	240011a4 	.word	0x240011a4
 800e1cc:	240011a0 	.word	0x240011a0
 800e1d0:	2400118c 	.word	0x2400118c
 800e1d4:	24001184 	.word	0x24001184

0800e1d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e1d8:	b480      	push	{r7}
 800e1da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e1dc:	4b04      	ldr	r3, [pc, #16]	@ (800e1f0 <vTaskSuspendAll+0x18>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	4a03      	ldr	r2, [pc, #12]	@ (800e1f0 <vTaskSuspendAll+0x18>)
 800e1e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e1e6:	bf00      	nop
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	240011a8 	.word	0x240011a8

0800e1f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e202:	4b42      	ldr	r3, [pc, #264]	@ (800e30c <xTaskResumeAll+0x118>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10b      	bne.n	800e222 <xTaskResumeAll+0x2e>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	603b      	str	r3, [r7, #0]
}
 800e21c:	bf00      	nop
 800e21e:	bf00      	nop
 800e220:	e7fd      	b.n	800e21e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e222:	f001 f929 	bl	800f478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e226:	4b39      	ldr	r3, [pc, #228]	@ (800e30c <xTaskResumeAll+0x118>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	4a37      	ldr	r2, [pc, #220]	@ (800e30c <xTaskResumeAll+0x118>)
 800e22e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e230:	4b36      	ldr	r3, [pc, #216]	@ (800e30c <xTaskResumeAll+0x118>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d162      	bne.n	800e2fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e238:	4b35      	ldr	r3, [pc, #212]	@ (800e310 <xTaskResumeAll+0x11c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d05e      	beq.n	800e2fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e240:	e02f      	b.n	800e2a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e242:	4b34      	ldr	r3, [pc, #208]	@ (800e314 <xTaskResumeAll+0x120>)
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3318      	adds	r3, #24
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe ffe6 	bl	800d220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3304      	adds	r3, #4
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe ffe1 	bl	800d220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e262:	4b2d      	ldr	r3, [pc, #180]	@ (800e318 <xTaskResumeAll+0x124>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	429a      	cmp	r2, r3
 800e268:	d903      	bls.n	800e272 <xTaskResumeAll+0x7e>
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26e:	4a2a      	ldr	r2, [pc, #168]	@ (800e318 <xTaskResumeAll+0x124>)
 800e270:	6013      	str	r3, [r2, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e276:	4613      	mov	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4413      	add	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4a27      	ldr	r2, [pc, #156]	@ (800e31c <xTaskResumeAll+0x128>)
 800e280:	441a      	add	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3304      	adds	r3, #4
 800e286:	4619      	mov	r1, r3
 800e288:	4610      	mov	r0, r2
 800e28a:	f7fe ff6c 	bl	800d166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e292:	4b23      	ldr	r3, [pc, #140]	@ (800e320 <xTaskResumeAll+0x12c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e298:	429a      	cmp	r2, r3
 800e29a:	d302      	bcc.n	800e2a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e29c:	4b21      	ldr	r3, [pc, #132]	@ (800e324 <xTaskResumeAll+0x130>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	@ (800e314 <xTaskResumeAll+0x120>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1cb      	bne.n	800e242 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2b0:	f000 fb58 	bl	800e964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800e328 <xTaskResumeAll+0x134>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d010      	beq.n	800e2e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e2c0:	f000 f846 	bl	800e350 <xTaskIncrementTick>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d002      	beq.n	800e2d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e2ca:	4b16      	ldr	r3, [pc, #88]	@ (800e324 <xTaskResumeAll+0x130>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1f1      	bne.n	800e2c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e2dc:	4b12      	ldr	r3, [pc, #72]	@ (800e328 <xTaskResumeAll+0x134>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e2e2:	4b10      	ldr	r3, [pc, #64]	@ (800e324 <xTaskResumeAll+0x130>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d009      	beq.n	800e2fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e32c <xTaskResumeAll+0x138>)
 800e2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2fe:	f001 f8ed 	bl	800f4dc <vPortExitCritical>

	return xAlreadyYielded;
 800e302:	68bb      	ldr	r3, [r7, #8]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	240011a8 	.word	0x240011a8
 800e310:	24001180 	.word	0x24001180
 800e314:	24001140 	.word	0x24001140
 800e318:	24001188 	.word	0x24001188
 800e31c:	24000cb0 	.word	0x24000cb0
 800e320:	24000cac 	.word	0x24000cac
 800e324:	24001194 	.word	0x24001194
 800e328:	24001190 	.word	0x24001190
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e336:	4b05      	ldr	r3, [pc, #20]	@ (800e34c <xTaskGetTickCount+0x1c>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e33c:	687b      	ldr	r3, [r7, #4]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	24001184 	.word	0x24001184

0800e350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e35a:	4b4f      	ldr	r3, [pc, #316]	@ (800e498 <xTaskIncrementTick+0x148>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f040 8090 	bne.w	800e484 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e364:	4b4d      	ldr	r3, [pc, #308]	@ (800e49c <xTaskIncrementTick+0x14c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3301      	adds	r3, #1
 800e36a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e36c:	4a4b      	ldr	r2, [pc, #300]	@ (800e49c <xTaskIncrementTick+0x14c>)
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d121      	bne.n	800e3bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e378:	4b49      	ldr	r3, [pc, #292]	@ (800e4a0 <xTaskIncrementTick+0x150>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00b      	beq.n	800e39a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	603b      	str	r3, [r7, #0]
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop
 800e398:	e7fd      	b.n	800e396 <xTaskIncrementTick+0x46>
 800e39a:	4b41      	ldr	r3, [pc, #260]	@ (800e4a0 <xTaskIncrementTick+0x150>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	4b40      	ldr	r3, [pc, #256]	@ (800e4a4 <xTaskIncrementTick+0x154>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a3e      	ldr	r2, [pc, #248]	@ (800e4a0 <xTaskIncrementTick+0x150>)
 800e3a6:	6013      	str	r3, [r2, #0]
 800e3a8:	4a3e      	ldr	r2, [pc, #248]	@ (800e4a4 <xTaskIncrementTick+0x154>)
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6013      	str	r3, [r2, #0]
 800e3ae:	4b3e      	ldr	r3, [pc, #248]	@ (800e4a8 <xTaskIncrementTick+0x158>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	4a3c      	ldr	r2, [pc, #240]	@ (800e4a8 <xTaskIncrementTick+0x158>)
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	f000 fad4 	bl	800e964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3bc:	4b3b      	ldr	r3, [pc, #236]	@ (800e4ac <xTaskIncrementTick+0x15c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d349      	bcc.n	800e45a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3c6:	4b36      	ldr	r3, [pc, #216]	@ (800e4a0 <xTaskIncrementTick+0x150>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d0:	4b36      	ldr	r3, [pc, #216]	@ (800e4ac <xTaskIncrementTick+0x15c>)
 800e3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d6:	601a      	str	r2, [r3, #0]
					break;
 800e3d8:	e03f      	b.n	800e45a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3da:	4b31      	ldr	r3, [pc, #196]	@ (800e4a0 <xTaskIncrementTick+0x150>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d203      	bcs.n	800e3fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3f2:	4a2e      	ldr	r2, [pc, #184]	@ (800e4ac <xTaskIncrementTick+0x15c>)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3f8:	e02f      	b.n	800e45a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe ff0e 	bl	800d220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d004      	beq.n	800e416 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	3318      	adds	r3, #24
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe ff05 	bl	800d220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41a:	4b25      	ldr	r3, [pc, #148]	@ (800e4b0 <xTaskIncrementTick+0x160>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d903      	bls.n	800e42a <xTaskIncrementTick+0xda>
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e426:	4a22      	ldr	r2, [pc, #136]	@ (800e4b0 <xTaskIncrementTick+0x160>)
 800e428:	6013      	str	r3, [r2, #0]
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e42e:	4613      	mov	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4a1f      	ldr	r2, [pc, #124]	@ (800e4b4 <xTaskIncrementTick+0x164>)
 800e438:	441a      	add	r2, r3
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f7fe fe90 	bl	800d166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e44a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4b8 <xTaskIncrementTick+0x168>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e450:	429a      	cmp	r2, r3
 800e452:	d3b8      	bcc.n	800e3c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e454:	2301      	movs	r3, #1
 800e456:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e458:	e7b5      	b.n	800e3c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e45a:	4b17      	ldr	r3, [pc, #92]	@ (800e4b8 <xTaskIncrementTick+0x168>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e460:	4914      	ldr	r1, [pc, #80]	@ (800e4b4 <xTaskIncrementTick+0x164>)
 800e462:	4613      	mov	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	440b      	add	r3, r1
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d901      	bls.n	800e476 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e472:	2301      	movs	r3, #1
 800e474:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e476:	4b11      	ldr	r3, [pc, #68]	@ (800e4bc <xTaskIncrementTick+0x16c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d007      	beq.n	800e48e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e47e:	2301      	movs	r3, #1
 800e480:	617b      	str	r3, [r7, #20]
 800e482:	e004      	b.n	800e48e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e484:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c0 <xTaskIncrementTick+0x170>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	3301      	adds	r3, #1
 800e48a:	4a0d      	ldr	r2, [pc, #52]	@ (800e4c0 <xTaskIncrementTick+0x170>)
 800e48c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e48e:	697b      	ldr	r3, [r7, #20]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	240011a8 	.word	0x240011a8
 800e49c:	24001184 	.word	0x24001184
 800e4a0:	24001138 	.word	0x24001138
 800e4a4:	2400113c 	.word	0x2400113c
 800e4a8:	24001198 	.word	0x24001198
 800e4ac:	240011a0 	.word	0x240011a0
 800e4b0:	24001188 	.word	0x24001188
 800e4b4:	24000cb0 	.word	0x24000cb0
 800e4b8:	24000cac 	.word	0x24000cac
 800e4bc:	24001194 	.word	0x24001194
 800e4c0:	24001190 	.word	0x24001190

0800e4c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4ca:	4b28      	ldr	r3, [pc, #160]	@ (800e56c <vTaskSwitchContext+0xa8>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4d2:	4b27      	ldr	r3, [pc, #156]	@ (800e570 <vTaskSwitchContext+0xac>)
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4d8:	e042      	b.n	800e560 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e4da:	4b25      	ldr	r3, [pc, #148]	@ (800e570 <vTaskSwitchContext+0xac>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e0:	4b24      	ldr	r3, [pc, #144]	@ (800e574 <vTaskSwitchContext+0xb0>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	60fb      	str	r3, [r7, #12]
 800e4e6:	e011      	b.n	800e50c <vTaskSwitchContext+0x48>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10b      	bne.n	800e506 <vTaskSwitchContext+0x42>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	e7fd      	b.n	800e502 <vTaskSwitchContext+0x3e>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3b01      	subs	r3, #1
 800e50a:	60fb      	str	r3, [r7, #12]
 800e50c:	491a      	ldr	r1, [pc, #104]	@ (800e578 <vTaskSwitchContext+0xb4>)
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4613      	mov	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	440b      	add	r3, r1
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d0e3      	beq.n	800e4e8 <vTaskSwitchContext+0x24>
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4a13      	ldr	r2, [pc, #76]	@ (800e578 <vTaskSwitchContext+0xb4>)
 800e52c:	4413      	add	r3, r2
 800e52e:	60bb      	str	r3, [r7, #8]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	605a      	str	r2, [r3, #4]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	3308      	adds	r3, #8
 800e542:	429a      	cmp	r2, r3
 800e544:	d104      	bne.n	800e550 <vTaskSwitchContext+0x8c>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	605a      	str	r2, [r3, #4]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	4a09      	ldr	r2, [pc, #36]	@ (800e57c <vTaskSwitchContext+0xb8>)
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	4a06      	ldr	r2, [pc, #24]	@ (800e574 <vTaskSwitchContext+0xb0>)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6013      	str	r3, [r2, #0]
}
 800e560:	bf00      	nop
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	240011a8 	.word	0x240011a8
 800e570:	24001194 	.word	0x24001194
 800e574:	24001188 	.word	0x24001188
 800e578:	24000cb0 	.word	0x24000cb0
 800e57c:	24000cac 	.word	0x24000cac

0800e580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10b      	bne.n	800e5a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	60fb      	str	r3, [r7, #12]
}
 800e5a2:	bf00      	nop
 800e5a4:	bf00      	nop
 800e5a6:	e7fd      	b.n	800e5a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5a8:	4b07      	ldr	r3, [pc, #28]	@ (800e5c8 <vTaskPlaceOnEventList+0x48>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3318      	adds	r3, #24
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7fe fdfc 	bl	800d1ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	6838      	ldr	r0, [r7, #0]
 800e5ba:	f000 fa81 	bl	800eac0 <prvAddCurrentTaskToDelayedList>
}
 800e5be:	bf00      	nop
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	24000cac 	.word	0x24000cac

0800e5cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10b      	bne.n	800e5f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	617b      	str	r3, [r7, #20]
}
 800e5f0:	bf00      	nop
 800e5f2:	bf00      	nop
 800e5f4:	e7fd      	b.n	800e5f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e620 <vTaskPlaceOnEventListRestricted+0x54>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3318      	adds	r3, #24
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7fe fdb1 	bl	800d166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e60a:	f04f 33ff 	mov.w	r3, #4294967295
 800e60e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e610:	6879      	ldr	r1, [r7, #4]
 800e612:	68b8      	ldr	r0, [r7, #8]
 800e614:	f000 fa54 	bl	800eac0 <prvAddCurrentTaskToDelayedList>
	}
 800e618:	bf00      	nop
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	24000cac 	.word	0x24000cac

0800e624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b086      	sub	sp, #24
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10b      	bne.n	800e652 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	60fb      	str	r3, [r7, #12]
}
 800e64c:	bf00      	nop
 800e64e:	bf00      	nop
 800e650:	e7fd      	b.n	800e64e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	3318      	adds	r3, #24
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fde2 	bl	800d220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e65c:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d4 <xTaskRemoveFromEventList+0xb0>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d11d      	bne.n	800e6a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	3304      	adds	r3, #4
 800e668:	4618      	mov	r0, r3
 800e66a:	f7fe fdd9 	bl	800d220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e672:	4b19      	ldr	r3, [pc, #100]	@ (800e6d8 <xTaskRemoveFromEventList+0xb4>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	429a      	cmp	r2, r3
 800e678:	d903      	bls.n	800e682 <xTaskRemoveFromEventList+0x5e>
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e67e:	4a16      	ldr	r2, [pc, #88]	@ (800e6d8 <xTaskRemoveFromEventList+0xb4>)
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4a13      	ldr	r2, [pc, #76]	@ (800e6dc <xTaskRemoveFromEventList+0xb8>)
 800e690:	441a      	add	r2, r3
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	3304      	adds	r3, #4
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fe fd64 	bl	800d166 <vListInsertEnd>
 800e69e:	e005      	b.n	800e6ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	3318      	adds	r3, #24
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	480e      	ldr	r0, [pc, #56]	@ (800e6e0 <xTaskRemoveFromEventList+0xbc>)
 800e6a8:	f7fe fd5d 	bl	800d166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e4 <xTaskRemoveFromEventList+0xc0>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d905      	bls.n	800e6c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6be:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e8 <xTaskRemoveFromEventList+0xc4>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	e001      	b.n	800e6ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6ca:	697b      	ldr	r3, [r7, #20]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3718      	adds	r7, #24
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	240011a8 	.word	0x240011a8
 800e6d8:	24001188 	.word	0x24001188
 800e6dc:	24000cb0 	.word	0x24000cb0
 800e6e0:	24001140 	.word	0x24001140
 800e6e4:	24000cac 	.word	0x24000cac
 800e6e8:	24001194 	.word	0x24001194

0800e6ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e6f4:	4b06      	ldr	r3, [pc, #24]	@ (800e710 <vTaskInternalSetTimeOutState+0x24>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e6fc:	4b05      	ldr	r3, [pc, #20]	@ (800e714 <vTaskInternalSetTimeOutState+0x28>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	605a      	str	r2, [r3, #4]
}
 800e704:	bf00      	nop
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	24001198 	.word	0x24001198
 800e714:	24001184 	.word	0x24001184

0800e718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10b      	bne.n	800e740 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	613b      	str	r3, [r7, #16]
}
 800e73a:	bf00      	nop
 800e73c:	bf00      	nop
 800e73e:	e7fd      	b.n	800e73c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d10b      	bne.n	800e75e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	60fb      	str	r3, [r7, #12]
}
 800e758:	bf00      	nop
 800e75a:	bf00      	nop
 800e75c:	e7fd      	b.n	800e75a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e75e:	f000 fe8b 	bl	800f478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e762:	4b1d      	ldr	r3, [pc, #116]	@ (800e7d8 <xTaskCheckForTimeOut+0xc0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	1ad3      	subs	r3, r2, r3
 800e770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d102      	bne.n	800e782 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e77c:	2300      	movs	r3, #0
 800e77e:	61fb      	str	r3, [r7, #28]
 800e780:	e023      	b.n	800e7ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	4b15      	ldr	r3, [pc, #84]	@ (800e7dc <xTaskCheckForTimeOut+0xc4>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d007      	beq.n	800e79e <xTaskCheckForTimeOut+0x86>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	69ba      	ldr	r2, [r7, #24]
 800e794:	429a      	cmp	r2, r3
 800e796:	d302      	bcc.n	800e79e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e798:	2301      	movs	r3, #1
 800e79a:	61fb      	str	r3, [r7, #28]
 800e79c:	e015      	b.n	800e7ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d20b      	bcs.n	800e7c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	1ad2      	subs	r2, r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff ff99 	bl	800e6ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	61fb      	str	r3, [r7, #28]
 800e7be:	e004      	b.n	800e7ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7ca:	f000 fe87 	bl	800f4dc <vPortExitCritical>

	return xReturn;
 800e7ce:	69fb      	ldr	r3, [r7, #28]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3720      	adds	r7, #32
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	24001184 	.word	0x24001184
 800e7dc:	24001198 	.word	0x24001198

0800e7e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e7e4:	4b03      	ldr	r3, [pc, #12]	@ (800e7f4 <vTaskMissedYield+0x14>)
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	601a      	str	r2, [r3, #0]
}
 800e7ea:	bf00      	nop
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	24001194 	.word	0x24001194

0800e7f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e800:	f000 f852 	bl	800e8a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e804:	4b06      	ldr	r3, [pc, #24]	@ (800e820 <prvIdleTask+0x28>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d9f9      	bls.n	800e800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e80c:	4b05      	ldr	r3, [pc, #20]	@ (800e824 <prvIdleTask+0x2c>)
 800e80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e81c:	e7f0      	b.n	800e800 <prvIdleTask+0x8>
 800e81e:	bf00      	nop
 800e820:	24000cb0 	.word	0x24000cb0
 800e824:	e000ed04 	.word	0xe000ed04

0800e828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e82e:	2300      	movs	r3, #0
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	e00c      	b.n	800e84e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4a12      	ldr	r2, [pc, #72]	@ (800e888 <prvInitialiseTaskLists+0x60>)
 800e840:	4413      	add	r3, r2
 800e842:	4618      	mov	r0, r3
 800e844:	f7fe fc62 	bl	800d10c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	3301      	adds	r3, #1
 800e84c:	607b      	str	r3, [r7, #4]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b37      	cmp	r3, #55	@ 0x37
 800e852:	d9ef      	bls.n	800e834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e854:	480d      	ldr	r0, [pc, #52]	@ (800e88c <prvInitialiseTaskLists+0x64>)
 800e856:	f7fe fc59 	bl	800d10c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e85a:	480d      	ldr	r0, [pc, #52]	@ (800e890 <prvInitialiseTaskLists+0x68>)
 800e85c:	f7fe fc56 	bl	800d10c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e860:	480c      	ldr	r0, [pc, #48]	@ (800e894 <prvInitialiseTaskLists+0x6c>)
 800e862:	f7fe fc53 	bl	800d10c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e866:	480c      	ldr	r0, [pc, #48]	@ (800e898 <prvInitialiseTaskLists+0x70>)
 800e868:	f7fe fc50 	bl	800d10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e86c:	480b      	ldr	r0, [pc, #44]	@ (800e89c <prvInitialiseTaskLists+0x74>)
 800e86e:	f7fe fc4d 	bl	800d10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e872:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a0 <prvInitialiseTaskLists+0x78>)
 800e874:	4a05      	ldr	r2, [pc, #20]	@ (800e88c <prvInitialiseTaskLists+0x64>)
 800e876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e878:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a4 <prvInitialiseTaskLists+0x7c>)
 800e87a:	4a05      	ldr	r2, [pc, #20]	@ (800e890 <prvInitialiseTaskLists+0x68>)
 800e87c:	601a      	str	r2, [r3, #0]
}
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	24000cb0 	.word	0x24000cb0
 800e88c:	24001110 	.word	0x24001110
 800e890:	24001124 	.word	0x24001124
 800e894:	24001140 	.word	0x24001140
 800e898:	24001154 	.word	0x24001154
 800e89c:	2400116c 	.word	0x2400116c
 800e8a0:	24001138 	.word	0x24001138
 800e8a4:	2400113c 	.word	0x2400113c

0800e8a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8ae:	e019      	b.n	800e8e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8b0:	f000 fde2 	bl	800f478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8b4:	4b10      	ldr	r3, [pc, #64]	@ (800e8f8 <prvCheckTasksWaitingTermination+0x50>)
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fe fcad 	bl	800d220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e8fc <prvCheckTasksWaitingTermination+0x54>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e8fc <prvCheckTasksWaitingTermination+0x54>)
 800e8ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e900 <prvCheckTasksWaitingTermination+0x58>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	4a0a      	ldr	r2, [pc, #40]	@ (800e900 <prvCheckTasksWaitingTermination+0x58>)
 800e8d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e8da:	f000 fdff 	bl	800f4dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f810 	bl	800e904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8e4:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <prvCheckTasksWaitingTermination+0x58>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1e1      	bne.n	800e8b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e8ec:	bf00      	nop
 800e8ee:	bf00      	nop
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	24001154 	.word	0x24001154
 800e8fc:	24001180 	.word	0x24001180
 800e900:	24001168 	.word	0x24001168

0800e904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e912:	2b00      	cmp	r3, #0
 800e914:	d108      	bne.n	800e928 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 ff9c 	bl	800f858 <vPortFree>
				vPortFree( pxTCB );
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 ff99 	bl	800f858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e926:	e019      	b.n	800e95c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d103      	bne.n	800e93a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 ff90 	bl	800f858 <vPortFree>
	}
 800e938:	e010      	b.n	800e95c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e940:	2b02      	cmp	r3, #2
 800e942:	d00b      	beq.n	800e95c <prvDeleteTCB+0x58>
	__asm volatile
 800e944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	60fb      	str	r3, [r7, #12]
}
 800e956:	bf00      	nop
 800e958:	bf00      	nop
 800e95a:	e7fd      	b.n	800e958 <prvDeleteTCB+0x54>
	}
 800e95c:	bf00      	nop
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e96a:	4b0c      	ldr	r3, [pc, #48]	@ (800e99c <prvResetNextTaskUnblockTime+0x38>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d104      	bne.n	800e97e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e974:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e976:	f04f 32ff 	mov.w	r2, #4294967295
 800e97a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e97c:	e008      	b.n	800e990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97e:	4b07      	ldr	r3, [pc, #28]	@ (800e99c <prvResetNextTaskUnblockTime+0x38>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	4a04      	ldr	r2, [pc, #16]	@ (800e9a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e98e:	6013      	str	r3, [r2, #0]
}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr
 800e99c:	24001138 	.word	0x24001138
 800e9a0:	240011a0 	.word	0x240011a0

0800e9a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d8 <xTaskGetSchedulerState+0x34>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	607b      	str	r3, [r7, #4]
 800e9b6:	e008      	b.n	800e9ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9b8:	4b08      	ldr	r3, [pc, #32]	@ (800e9dc <xTaskGetSchedulerState+0x38>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9c0:	2302      	movs	r3, #2
 800e9c2:	607b      	str	r3, [r7, #4]
 800e9c4:	e001      	b.n	800e9ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e9ca:	687b      	ldr	r3, [r7, #4]
	}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	2400118c 	.word	0x2400118c
 800e9dc:	240011a8 	.word	0x240011a8

0800e9e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b086      	sub	sp, #24
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d058      	beq.n	800eaa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9f6:	4b2f      	ldr	r3, [pc, #188]	@ (800eab4 <xTaskPriorityDisinherit+0xd4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	693a      	ldr	r2, [r7, #16]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d00b      	beq.n	800ea18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ea00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	60fb      	str	r3, [r7, #12]
}
 800ea12:	bf00      	nop
 800ea14:	bf00      	nop
 800ea16:	e7fd      	b.n	800ea14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10b      	bne.n	800ea38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	60bb      	str	r3, [r7, #8]
}
 800ea32:	bf00      	nop
 800ea34:	bf00      	nop
 800ea36:	e7fd      	b.n	800ea34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea3c:	1e5a      	subs	r2, r3, #1
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d02c      	beq.n	800eaa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d128      	bne.n	800eaa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe fbe0 	bl	800d220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea78:	4b0f      	ldr	r3, [pc, #60]	@ (800eab8 <xTaskPriorityDisinherit+0xd8>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d903      	bls.n	800ea88 <xTaskPriorityDisinherit+0xa8>
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea84:	4a0c      	ldr	r2, [pc, #48]	@ (800eab8 <xTaskPriorityDisinherit+0xd8>)
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4a09      	ldr	r2, [pc, #36]	@ (800eabc <xTaskPriorityDisinherit+0xdc>)
 800ea96:	441a      	add	r2, r3
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fe fb61 	bl	800d166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eaa8:	697b      	ldr	r3, [r7, #20]
	}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	24000cac 	.word	0x24000cac
 800eab8:	24001188 	.word	0x24001188
 800eabc:	24000cb0 	.word	0x24000cb0

0800eac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eaca:	4b21      	ldr	r3, [pc, #132]	@ (800eb50 <prvAddCurrentTaskToDelayedList+0x90>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ead0:	4b20      	ldr	r3, [pc, #128]	@ (800eb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3304      	adds	r3, #4
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fe fba2 	bl	800d220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae2:	d10a      	bne.n	800eafa <prvAddCurrentTaskToDelayedList+0x3a>
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d007      	beq.n	800eafa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaea:	4b1a      	ldr	r3, [pc, #104]	@ (800eb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4819      	ldr	r0, [pc, #100]	@ (800eb58 <prvAddCurrentTaskToDelayedList+0x98>)
 800eaf4:	f7fe fb37 	bl	800d166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eaf8:	e026      	b.n	800eb48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4413      	add	r3, r2
 800eb00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb02:	4b14      	ldr	r3, [pc, #80]	@ (800eb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d209      	bcs.n	800eb26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb12:	4b12      	ldr	r3, [pc, #72]	@ (800eb5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	4b0f      	ldr	r3, [pc, #60]	@ (800eb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	f7fe fb45 	bl	800d1ae <vListInsert>
}
 800eb24:	e010      	b.n	800eb48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb26:	4b0e      	ldr	r3, [pc, #56]	@ (800eb60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb54 <prvAddCurrentTaskToDelayedList+0x94>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	3304      	adds	r3, #4
 800eb30:	4619      	mov	r1, r3
 800eb32:	4610      	mov	r0, r2
 800eb34:	f7fe fb3b 	bl	800d1ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb38:	4b0a      	ldr	r3, [pc, #40]	@ (800eb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68ba      	ldr	r2, [r7, #8]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d202      	bcs.n	800eb48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eb42:	4a08      	ldr	r2, [pc, #32]	@ (800eb64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	6013      	str	r3, [r2, #0]
}
 800eb48:	bf00      	nop
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	24001184 	.word	0x24001184
 800eb54:	24000cac 	.word	0x24000cac
 800eb58:	2400116c 	.word	0x2400116c
 800eb5c:	2400113c 	.word	0x2400113c
 800eb60:	24001138 	.word	0x24001138
 800eb64:	240011a0 	.word	0x240011a0

0800eb68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08a      	sub	sp, #40	@ 0x28
 800eb6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb72:	f000 fb13 	bl	800f19c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb76:	4b1d      	ldr	r3, [pc, #116]	@ (800ebec <xTimerCreateTimerTask+0x84>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d021      	beq.n	800ebc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb86:	1d3a      	adds	r2, r7, #4
 800eb88:	f107 0108 	add.w	r1, r7, #8
 800eb8c:	f107 030c 	add.w	r3, r7, #12
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe faa1 	bl	800d0d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb96:	6879      	ldr	r1, [r7, #4]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	9202      	str	r2, [sp, #8]
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	2302      	movs	r3, #2
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	2300      	movs	r3, #0
 800eba6:	460a      	mov	r2, r1
 800eba8:	4911      	ldr	r1, [pc, #68]	@ (800ebf0 <xTimerCreateTimerTask+0x88>)
 800ebaa:	4812      	ldr	r0, [pc, #72]	@ (800ebf4 <xTimerCreateTimerTask+0x8c>)
 800ebac:	f7ff f85c 	bl	800dc68 <xTaskCreateStatic>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	4a11      	ldr	r2, [pc, #68]	@ (800ebf8 <xTimerCreateTimerTask+0x90>)
 800ebb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ebb6:	4b10      	ldr	r3, [pc, #64]	@ (800ebf8 <xTimerCreateTimerTask+0x90>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10b      	bne.n	800ebe0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	613b      	str	r3, [r7, #16]
}
 800ebda:	bf00      	nop
 800ebdc:	bf00      	nop
 800ebde:	e7fd      	b.n	800ebdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ebe0:	697b      	ldr	r3, [r7, #20]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	240011dc 	.word	0x240011dc
 800ebf0:	080152d8 	.word	0x080152d8
 800ebf4:	0800ed35 	.word	0x0800ed35
 800ebf8:	240011e0 	.word	0x240011e0

0800ebfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b08a      	sub	sp, #40	@ 0x28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	607a      	str	r2, [r7, #4]
 800ec08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10b      	bne.n	800ec2c <xTimerGenericCommand+0x30>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	623b      	str	r3, [r7, #32]
}
 800ec26:	bf00      	nop
 800ec28:	bf00      	nop
 800ec2a:	e7fd      	b.n	800ec28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ec2c:	4b19      	ldr	r3, [pc, #100]	@ (800ec94 <xTimerGenericCommand+0x98>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d02a      	beq.n	800ec8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	dc18      	bgt.n	800ec78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ec46:	f7ff fead 	bl	800e9a4 <xTaskGetSchedulerState>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d109      	bne.n	800ec64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ec50:	4b10      	ldr	r3, [pc, #64]	@ (800ec94 <xTimerGenericCommand+0x98>)
 800ec52:	6818      	ldr	r0, [r3, #0]
 800ec54:	f107 0110 	add.w	r1, r7, #16
 800ec58:	2300      	movs	r3, #0
 800ec5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec5c:	f7fe fc14 	bl	800d488 <xQueueGenericSend>
 800ec60:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec62:	e012      	b.n	800ec8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ec64:	4b0b      	ldr	r3, [pc, #44]	@ (800ec94 <xTimerGenericCommand+0x98>)
 800ec66:	6818      	ldr	r0, [r3, #0]
 800ec68:	f107 0110 	add.w	r1, r7, #16
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f7fe fc0a 	bl	800d488 <xQueueGenericSend>
 800ec74:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec76:	e008      	b.n	800ec8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec78:	4b06      	ldr	r3, [pc, #24]	@ (800ec94 <xTimerGenericCommand+0x98>)
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	f107 0110 	add.w	r1, r7, #16
 800ec80:	2300      	movs	r3, #0
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	f7fe fd02 	bl	800d68c <xQueueGenericSendFromISR>
 800ec88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3728      	adds	r7, #40	@ 0x28
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	240011dc 	.word	0x240011dc

0800ec98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b088      	sub	sp, #32
 800ec9c:	af02      	add	r7, sp, #8
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eca2:	4b23      	ldr	r3, [pc, #140]	@ (800ed30 <prvProcessExpiredTimer+0x98>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	3304      	adds	r3, #4
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fe fab5 	bl	800d220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecbc:	f003 0304 	and.w	r3, r3, #4
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d023      	beq.n	800ed0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	699a      	ldr	r2, [r3, #24]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	18d1      	adds	r1, r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	6978      	ldr	r0, [r7, #20]
 800ecd2:	f000 f8d5 	bl	800ee80 <prvInsertTimerInActiveList>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d020      	beq.n	800ed1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	2300      	movs	r3, #0
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	2100      	movs	r1, #0
 800ece6:	6978      	ldr	r0, [r7, #20]
 800ece8:	f7ff ff88 	bl	800ebfc <xTimerGenericCommand>
 800ecec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d114      	bne.n	800ed1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	60fb      	str	r3, [r7, #12]
}
 800ed06:	bf00      	nop
 800ed08:	bf00      	nop
 800ed0a:	e7fd      	b.n	800ed08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed12:	f023 0301 	bic.w	r3, r3, #1
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	6978      	ldr	r0, [r7, #20]
 800ed24:	4798      	blx	r3
}
 800ed26:	bf00      	nop
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	240011d4 	.word	0x240011d4

0800ed34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed3c:	f107 0308 	add.w	r3, r7, #8
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 f859 	bl	800edf8 <prvGetNextExpireTime>
 800ed46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f000 f805 	bl	800ed5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ed52:	f000 f8d7 	bl	800ef04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed56:	bf00      	nop
 800ed58:	e7f0      	b.n	800ed3c <prvTimerTask+0x8>
	...

0800ed5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ed66:	f7ff fa37 	bl	800e1d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed6a:	f107 0308 	add.w	r3, r7, #8
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f866 	bl	800ee40 <prvSampleTimeNow>
 800ed74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d130      	bne.n	800edde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10a      	bne.n	800ed98 <prvProcessTimerOrBlockTask+0x3c>
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d806      	bhi.n	800ed98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ed8a:	f7ff fa33 	bl	800e1f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ed8e:	68f9      	ldr	r1, [r7, #12]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff ff81 	bl	800ec98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ed96:	e024      	b.n	800ede2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d008      	beq.n	800edb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ed9e:	4b13      	ldr	r3, [pc, #76]	@ (800edec <prvProcessTimerOrBlockTask+0x90>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <prvProcessTimerOrBlockTask+0x50>
 800eda8:	2301      	movs	r3, #1
 800edaa:	e000      	b.n	800edae <prvProcessTimerOrBlockTask+0x52>
 800edac:	2300      	movs	r3, #0
 800edae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800edb0:	4b0f      	ldr	r3, [pc, #60]	@ (800edf0 <prvProcessTimerOrBlockTask+0x94>)
 800edb2:	6818      	ldr	r0, [r3, #0]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	4619      	mov	r1, r3
 800edbe:	f7fe ff1f 	bl	800dc00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800edc2:	f7ff fa17 	bl	800e1f4 <xTaskResumeAll>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10a      	bne.n	800ede2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800edcc:	4b09      	ldr	r3, [pc, #36]	@ (800edf4 <prvProcessTimerOrBlockTask+0x98>)
 800edce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edd2:	601a      	str	r2, [r3, #0]
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	f3bf 8f6f 	isb	sy
}
 800eddc:	e001      	b.n	800ede2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800edde:	f7ff fa09 	bl	800e1f4 <xTaskResumeAll>
}
 800ede2:	bf00      	nop
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	240011d8 	.word	0x240011d8
 800edf0:	240011dc 	.word	0x240011dc
 800edf4:	e000ed04 	.word	0xe000ed04

0800edf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee00:	4b0e      	ldr	r3, [pc, #56]	@ (800ee3c <prvGetNextExpireTime+0x44>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d101      	bne.n	800ee0e <prvGetNextExpireTime+0x16>
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	e000      	b.n	800ee10 <prvGetNextExpireTime+0x18>
 800ee0e:	2200      	movs	r2, #0
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d105      	bne.n	800ee28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee1c:	4b07      	ldr	r3, [pc, #28]	@ (800ee3c <prvGetNextExpireTime+0x44>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	60fb      	str	r3, [r7, #12]
 800ee26:	e001      	b.n	800ee2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	240011d4 	.word	0x240011d4

0800ee40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ee48:	f7ff fa72 	bl	800e330 <xTaskGetTickCount>
 800ee4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ee4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee7c <prvSampleTimeNow+0x3c>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d205      	bcs.n	800ee64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ee58:	f000 f93a 	bl	800f0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	e002      	b.n	800ee6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ee6a:	4a04      	ldr	r2, [pc, #16]	@ (800ee7c <prvSampleTimeNow+0x3c>)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ee70:	68fb      	ldr	r3, [r7, #12]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	240011e4 	.word	0x240011e4

0800ee80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d812      	bhi.n	800eecc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	1ad2      	subs	r2, r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d302      	bcc.n	800eeba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	617b      	str	r3, [r7, #20]
 800eeb8:	e01b      	b.n	800eef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eeba:	4b10      	ldr	r3, [pc, #64]	@ (800eefc <prvInsertTimerInActiveList+0x7c>)
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3304      	adds	r3, #4
 800eec2:	4619      	mov	r1, r3
 800eec4:	4610      	mov	r0, r2
 800eec6:	f7fe f972 	bl	800d1ae <vListInsert>
 800eeca:	e012      	b.n	800eef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d206      	bcs.n	800eee2 <prvInsertTimerInActiveList+0x62>
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d302      	bcc.n	800eee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eedc:	2301      	movs	r3, #1
 800eede:	617b      	str	r3, [r7, #20]
 800eee0:	e007      	b.n	800eef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eee2:	4b07      	ldr	r3, [pc, #28]	@ (800ef00 <prvInsertTimerInActiveList+0x80>)
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3304      	adds	r3, #4
 800eeea:	4619      	mov	r1, r3
 800eeec:	4610      	mov	r0, r2
 800eeee:	f7fe f95e 	bl	800d1ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eef2:	697b      	ldr	r3, [r7, #20]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	240011d8 	.word	0x240011d8
 800ef00:	240011d4 	.word	0x240011d4

0800ef04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08e      	sub	sp, #56	@ 0x38
 800ef08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef0a:	e0ce      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	da19      	bge.n	800ef46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ef12:	1d3b      	adds	r3, r7, #4
 800ef14:	3304      	adds	r3, #4
 800ef16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ef18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10b      	bne.n	800ef36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	61fb      	str	r3, [r7, #28]
}
 800ef30:	bf00      	nop
 800ef32:	bf00      	nop
 800ef34:	e7fd      	b.n	800ef32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ef36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef3c:	6850      	ldr	r0, [r2, #4]
 800ef3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef40:	6892      	ldr	r2, [r2, #8]
 800ef42:	4611      	mov	r1, r2
 800ef44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f2c0 80ae 	blt.w	800f0aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ef52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef54:	695b      	ldr	r3, [r3, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d004      	beq.n	800ef64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	3304      	adds	r3, #4
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe f95e 	bl	800d220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef64:	463b      	mov	r3, r7
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff ff6a 	bl	800ee40 <prvSampleTimeNow>
 800ef6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2b09      	cmp	r3, #9
 800ef72:	f200 8097 	bhi.w	800f0a4 <prvProcessReceivedCommands+0x1a0>
 800ef76:	a201      	add	r2, pc, #4	@ (adr r2, 800ef7c <prvProcessReceivedCommands+0x78>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800efa5 	.word	0x0800efa5
 800ef80:	0800efa5 	.word	0x0800efa5
 800ef84:	0800efa5 	.word	0x0800efa5
 800ef88:	0800f01b 	.word	0x0800f01b
 800ef8c:	0800f02f 	.word	0x0800f02f
 800ef90:	0800f07b 	.word	0x0800f07b
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efa5 	.word	0x0800efa5
 800ef9c:	0800f01b 	.word	0x0800f01b
 800efa0:	0800f02f 	.word	0x0800f02f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800efa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efaa:	f043 0301 	orr.w	r3, r3, #1
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	18d1      	adds	r1, r2, r3
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efc4:	f7ff ff5c 	bl	800ee80 <prvInsertTimerInActiveList>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d06c      	beq.n	800f0a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d061      	beq.n	800f0a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe8:	699b      	ldr	r3, [r3, #24]
 800efea:	441a      	add	r2, r3
 800efec:	2300      	movs	r3, #0
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	2300      	movs	r3, #0
 800eff2:	2100      	movs	r1, #0
 800eff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eff6:	f7ff fe01 	bl	800ebfc <xTimerGenericCommand>
 800effa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800effc:	6a3b      	ldr	r3, [r7, #32]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d152      	bne.n	800f0a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	61bb      	str	r3, [r7, #24]
}
 800f014:	bf00      	nop
 800f016:	bf00      	nop
 800f018:	e7fd      	b.n	800f016 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f020:	f023 0301 	bic.w	r3, r3, #1
 800f024:	b2da      	uxtb	r2, r3
 800f026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f028:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f02c:	e03d      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f034:	f043 0301 	orr.w	r3, r3, #1
 800f038:	b2da      	uxtb	r2, r3
 800f03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f044:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10b      	bne.n	800f066 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	617b      	str	r3, [r7, #20]
}
 800f060:	bf00      	nop
 800f062:	bf00      	nop
 800f064:	e7fd      	b.n	800f062 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f068:	699a      	ldr	r2, [r3, #24]
 800f06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06c:	18d1      	adds	r1, r2, r3
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f074:	f7ff ff04 	bl	800ee80 <prvInsertTimerInActiveList>
					break;
 800f078:	e017      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f07c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f080:	f003 0302 	and.w	r3, r3, #2
 800f084:	2b00      	cmp	r3, #0
 800f086:	d103      	bne.n	800f090 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f08a:	f000 fbe5 	bl	800f858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f08e:	e00c      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f096:	f023 0301 	bic.w	r3, r3, #1
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f0a2:	e002      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f0a4:	bf00      	nop
 800f0a6:	e000      	b.n	800f0aa <prvProcessReceivedCommands+0x1a6>
					break;
 800f0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f0aa:	4b08      	ldr	r3, [pc, #32]	@ (800f0cc <prvProcessReceivedCommands+0x1c8>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	1d39      	adds	r1, r7, #4
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fb88 	bl	800d7c8 <xQueueReceive>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f47f af26 	bne.w	800ef0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f0c0:	bf00      	nop
 800f0c2:	bf00      	nop
 800f0c4:	3730      	adds	r7, #48	@ 0x30
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	240011dc 	.word	0x240011dc

0800f0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0d6:	e049      	b.n	800f16c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe f895 	bl	800d220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f104:	f003 0304 	and.w	r3, r3, #4
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d02f      	beq.n	800f16c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	4413      	add	r3, r2
 800f114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d90e      	bls.n	800f13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f12a:	4b1a      	ldr	r3, [pc, #104]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3304      	adds	r3, #4
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fe f83a 	bl	800d1ae <vListInsert>
 800f13a:	e017      	b.n	800f16c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f13c:	2300      	movs	r3, #0
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	2300      	movs	r3, #0
 800f142:	693a      	ldr	r2, [r7, #16]
 800f144:	2100      	movs	r1, #0
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f7ff fd58 	bl	800ebfc <xTimerGenericCommand>
 800f14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10b      	bne.n	800f16c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	603b      	str	r3, [r7, #0]
}
 800f166:	bf00      	nop
 800f168:	bf00      	nop
 800f16a:	e7fd      	b.n	800f168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f16c:	4b09      	ldr	r3, [pc, #36]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1b0      	bne.n	800f0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f176:	4b07      	ldr	r3, [pc, #28]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f17c:	4b06      	ldr	r3, [pc, #24]	@ (800f198 <prvSwitchTimerLists+0xc8>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a04      	ldr	r2, [pc, #16]	@ (800f194 <prvSwitchTimerLists+0xc4>)
 800f182:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f184:	4a04      	ldr	r2, [pc, #16]	@ (800f198 <prvSwitchTimerLists+0xc8>)
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	240011d4 	.word	0x240011d4
 800f198:	240011d8 	.word	0x240011d8

0800f19c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f1a2:	f000 f969 	bl	800f478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f1a6:	4b15      	ldr	r3, [pc, #84]	@ (800f1fc <prvCheckForValidListAndQueue+0x60>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d120      	bne.n	800f1f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f1ae:	4814      	ldr	r0, [pc, #80]	@ (800f200 <prvCheckForValidListAndQueue+0x64>)
 800f1b0:	f7fd ffac 	bl	800d10c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f1b4:	4813      	ldr	r0, [pc, #76]	@ (800f204 <prvCheckForValidListAndQueue+0x68>)
 800f1b6:	f7fd ffa9 	bl	800d10c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f1ba:	4b13      	ldr	r3, [pc, #76]	@ (800f208 <prvCheckForValidListAndQueue+0x6c>)
 800f1bc:	4a10      	ldr	r2, [pc, #64]	@ (800f200 <prvCheckForValidListAndQueue+0x64>)
 800f1be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f1c0:	4b12      	ldr	r3, [pc, #72]	@ (800f20c <prvCheckForValidListAndQueue+0x70>)
 800f1c2:	4a10      	ldr	r2, [pc, #64]	@ (800f204 <prvCheckForValidListAndQueue+0x68>)
 800f1c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	4b11      	ldr	r3, [pc, #68]	@ (800f210 <prvCheckForValidListAndQueue+0x74>)
 800f1cc:	4a11      	ldr	r2, [pc, #68]	@ (800f214 <prvCheckForValidListAndQueue+0x78>)
 800f1ce:	2110      	movs	r1, #16
 800f1d0:	200a      	movs	r0, #10
 800f1d2:	f7fe f8b9 	bl	800d348 <xQueueGenericCreateStatic>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	4a08      	ldr	r2, [pc, #32]	@ (800f1fc <prvCheckForValidListAndQueue+0x60>)
 800f1da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f1dc:	4b07      	ldr	r3, [pc, #28]	@ (800f1fc <prvCheckForValidListAndQueue+0x60>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d005      	beq.n	800f1f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f1e4:	4b05      	ldr	r3, [pc, #20]	@ (800f1fc <prvCheckForValidListAndQueue+0x60>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	490b      	ldr	r1, [pc, #44]	@ (800f218 <prvCheckForValidListAndQueue+0x7c>)
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe fcde 	bl	800dbac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f1f0:	f000 f974 	bl	800f4dc <vPortExitCritical>
}
 800f1f4:	bf00      	nop
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	240011dc 	.word	0x240011dc
 800f200:	240011ac 	.word	0x240011ac
 800f204:	240011c0 	.word	0x240011c0
 800f208:	240011d4 	.word	0x240011d4
 800f20c:	240011d8 	.word	0x240011d8
 800f210:	24001288 	.word	0x24001288
 800f214:	240011e8 	.word	0x240011e8
 800f218:	080152e0 	.word	0x080152e0

0800f21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	3b04      	subs	r3, #4
 800f22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3b04      	subs	r3, #4
 800f23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f023 0201 	bic.w	r2, r3, #1
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3b04      	subs	r3, #4
 800f24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f24c:	4a0c      	ldr	r2, [pc, #48]	@ (800f280 <pxPortInitialiseStack+0x64>)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3b14      	subs	r3, #20
 800f256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	3b04      	subs	r3, #4
 800f262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f06f 0202 	mvn.w	r2, #2
 800f26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	3b20      	subs	r3, #32
 800f270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f272:	68fb      	ldr	r3, [r7, #12]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	0800f285 	.word	0x0800f285

0800f284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f28e:	4b13      	ldr	r3, [pc, #76]	@ (800f2dc <prvTaskExitError+0x58>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f296:	d00b      	beq.n	800f2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800f298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f29c:	f383 8811 	msr	BASEPRI, r3
 800f2a0:	f3bf 8f6f 	isb	sy
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	60fb      	str	r3, [r7, #12]
}
 800f2aa:	bf00      	nop
 800f2ac:	bf00      	nop
 800f2ae:	e7fd      	b.n	800f2ac <prvTaskExitError+0x28>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	60bb      	str	r3, [r7, #8]
}
 800f2c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f2c4:	bf00      	nop
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0fc      	beq.n	800f2c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	2400009c 	.word	0x2400009c

0800f2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f2e0:	4b07      	ldr	r3, [pc, #28]	@ (800f300 <pxCurrentTCBConst2>)
 800f2e2:	6819      	ldr	r1, [r3, #0]
 800f2e4:	6808      	ldr	r0, [r1, #0]
 800f2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ea:	f380 8809 	msr	PSP, r0
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f04f 0000 	mov.w	r0, #0
 800f2f6:	f380 8811 	msr	BASEPRI, r0
 800f2fa:	4770      	bx	lr
 800f2fc:	f3af 8000 	nop.w

0800f300 <pxCurrentTCBConst2>:
 800f300:	24000cac 	.word	0x24000cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f304:	bf00      	nop
 800f306:	bf00      	nop

0800f308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f308:	4808      	ldr	r0, [pc, #32]	@ (800f32c <prvPortStartFirstTask+0x24>)
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	6800      	ldr	r0, [r0, #0]
 800f30e:	f380 8808 	msr	MSP, r0
 800f312:	f04f 0000 	mov.w	r0, #0
 800f316:	f380 8814 	msr	CONTROL, r0
 800f31a:	b662      	cpsie	i
 800f31c:	b661      	cpsie	f
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	df00      	svc	0
 800f328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f32a:	bf00      	nop
 800f32c:	e000ed08 	.word	0xe000ed08

0800f330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f336:	4b47      	ldr	r3, [pc, #284]	@ (800f454 <xPortStartScheduler+0x124>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4a47      	ldr	r2, [pc, #284]	@ (800f458 <xPortStartScheduler+0x128>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d10b      	bne.n	800f358 <xPortStartScheduler+0x28>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	613b      	str	r3, [r7, #16]
}
 800f352:	bf00      	nop
 800f354:	bf00      	nop
 800f356:	e7fd      	b.n	800f354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f358:	4b3e      	ldr	r3, [pc, #248]	@ (800f454 <xPortStartScheduler+0x124>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a3f      	ldr	r2, [pc, #252]	@ (800f45c <xPortStartScheduler+0x12c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d10b      	bne.n	800f37a <xPortStartScheduler+0x4a>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	60fb      	str	r3, [r7, #12]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f37a:	4b39      	ldr	r3, [pc, #228]	@ (800f460 <xPortStartScheduler+0x130>)
 800f37c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	b2db      	uxtb	r3, r3
 800f384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	22ff      	movs	r2, #255	@ 0xff
 800f38a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	b2db      	uxtb	r3, r3
 800f392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f394:	78fb      	ldrb	r3, [r7, #3]
 800f396:	b2db      	uxtb	r3, r3
 800f398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	4b31      	ldr	r3, [pc, #196]	@ (800f464 <xPortStartScheduler+0x134>)
 800f3a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f3a2:	4b31      	ldr	r3, [pc, #196]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3a4:	2207      	movs	r2, #7
 800f3a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3a8:	e009      	b.n	800f3be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f3aa:	4b2f      	ldr	r3, [pc, #188]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3b4:	78fb      	ldrb	r3, [r7, #3]
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3be:	78fb      	ldrb	r3, [r7, #3]
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3c6:	2b80      	cmp	r3, #128	@ 0x80
 800f3c8:	d0ef      	beq.n	800f3aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3ca:	4b27      	ldr	r3, [pc, #156]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f1c3 0307 	rsb	r3, r3, #7
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d00b      	beq.n	800f3ee <xPortStartScheduler+0xbe>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	60bb      	str	r3, [r7, #8]
}
 800f3e8:	bf00      	nop
 800f3ea:	bf00      	nop
 800f3ec:	e7fd      	b.n	800f3ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f3ee:	4b1e      	ldr	r3, [pc, #120]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f3f8:	4b1b      	ldr	r3, [pc, #108]	@ (800f468 <xPortStartScheduler+0x138>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f400:	4a19      	ldr	r2, [pc, #100]	@ (800f468 <xPortStartScheduler+0x138>)
 800f402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	b2da      	uxtb	r2, r3
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f40c:	4b17      	ldr	r3, [pc, #92]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a16      	ldr	r2, [pc, #88]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f418:	4b14      	ldr	r3, [pc, #80]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a13      	ldr	r2, [pc, #76]	@ (800f46c <xPortStartScheduler+0x13c>)
 800f41e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f424:	f000 f8da 	bl	800f5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f428:	4b11      	ldr	r3, [pc, #68]	@ (800f470 <xPortStartScheduler+0x140>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f42e:	f000 f8f9 	bl	800f624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f432:	4b10      	ldr	r3, [pc, #64]	@ (800f474 <xPortStartScheduler+0x144>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a0f      	ldr	r2, [pc, #60]	@ (800f474 <xPortStartScheduler+0x144>)
 800f438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f43c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f43e:	f7ff ff63 	bl	800f308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f442:	f7ff f83f 	bl	800e4c4 <vTaskSwitchContext>
	prvTaskExitError();
 800f446:	f7ff ff1d 	bl	800f284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f44a:	2300      	movs	r3, #0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	e000ed00 	.word	0xe000ed00
 800f458:	410fc271 	.word	0x410fc271
 800f45c:	410fc270 	.word	0x410fc270
 800f460:	e000e400 	.word	0xe000e400
 800f464:	240012d8 	.word	0x240012d8
 800f468:	240012dc 	.word	0x240012dc
 800f46c:	e000ed20 	.word	0xe000ed20
 800f470:	2400009c 	.word	0x2400009c
 800f474:	e000ef34 	.word	0xe000ef34

0800f478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	607b      	str	r3, [r7, #4]
}
 800f490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f492:	4b10      	ldr	r3, [pc, #64]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3301      	adds	r3, #1
 800f498:	4a0e      	ldr	r2, [pc, #56]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f49a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f49c:	4b0d      	ldr	r3, [pc, #52]	@ (800f4d4 <vPortEnterCritical+0x5c>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d110      	bne.n	800f4c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d8 <vPortEnterCritical+0x60>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00b      	beq.n	800f4c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	603b      	str	r3, [r7, #0]
}
 800f4c0:	bf00      	nop
 800f4c2:	bf00      	nop
 800f4c4:	e7fd      	b.n	800f4c2 <vPortEnterCritical+0x4a>
	}
}
 800f4c6:	bf00      	nop
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	2400009c 	.word	0x2400009c
 800f4d8:	e000ed04 	.word	0xe000ed04

0800f4dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f4e2:	4b12      	ldr	r3, [pc, #72]	@ (800f52c <vPortExitCritical+0x50>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10b      	bne.n	800f502 <vPortExitCritical+0x26>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ee:	f383 8811 	msr	BASEPRI, r3
 800f4f2:	f3bf 8f6f 	isb	sy
 800f4f6:	f3bf 8f4f 	dsb	sy
 800f4fa:	607b      	str	r3, [r7, #4]
}
 800f4fc:	bf00      	nop
 800f4fe:	bf00      	nop
 800f500:	e7fd      	b.n	800f4fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f502:	4b0a      	ldr	r3, [pc, #40]	@ (800f52c <vPortExitCritical+0x50>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3b01      	subs	r3, #1
 800f508:	4a08      	ldr	r2, [pc, #32]	@ (800f52c <vPortExitCritical+0x50>)
 800f50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f50c:	4b07      	ldr	r3, [pc, #28]	@ (800f52c <vPortExitCritical+0x50>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <vPortExitCritical+0x44>
 800f514:	2300      	movs	r3, #0
 800f516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f383 8811 	msr	BASEPRI, r3
}
 800f51e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	2400009c 	.word	0x2400009c

0800f530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f530:	f3ef 8009 	mrs	r0, PSP
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	4b15      	ldr	r3, [pc, #84]	@ (800f590 <pxCurrentTCBConst>)
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	f01e 0f10 	tst.w	lr, #16
 800f540:	bf08      	it	eq
 800f542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54a:	6010      	str	r0, [r2, #0]
 800f54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f554:	f380 8811 	msr	BASEPRI, r0
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f7fe ffb0 	bl	800e4c4 <vTaskSwitchContext>
 800f564:	f04f 0000 	mov.w	r0, #0
 800f568:	f380 8811 	msr	BASEPRI, r0
 800f56c:	bc09      	pop	{r0, r3}
 800f56e:	6819      	ldr	r1, [r3, #0]
 800f570:	6808      	ldr	r0, [r1, #0]
 800f572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f576:	f01e 0f10 	tst.w	lr, #16
 800f57a:	bf08      	it	eq
 800f57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f580:	f380 8809 	msr	PSP, r0
 800f584:	f3bf 8f6f 	isb	sy
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	f3af 8000 	nop.w

0800f590 <pxCurrentTCBConst>:
 800f590:	24000cac 	.word	0x24000cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop

0800f598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	607b      	str	r3, [r7, #4]
}
 800f5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5b2:	f7fe fecd 	bl	800e350 <xTaskIncrementTick>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d003      	beq.n	800f5c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5bc:	4b06      	ldr	r3, [pc, #24]	@ (800f5d8 <xPortSysTickHandler+0x40>)
 800f5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	f383 8811 	msr	BASEPRI, r3
}
 800f5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	e000ed04 	.word	0xe000ed04

0800f5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5dc:	b480      	push	{r7}
 800f5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <vPortSetupTimerInterrupt+0x34>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f614 <vPortSetupTimerInterrupt+0x38>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f618 <vPortSetupTimerInterrupt+0x3c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f61c <vPortSetupTimerInterrupt+0x40>)
 800f5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f6:	099b      	lsrs	r3, r3, #6
 800f5f8:	4a09      	ldr	r2, [pc, #36]	@ (800f620 <vPortSetupTimerInterrupt+0x44>)
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f5fe:	4b04      	ldr	r3, [pc, #16]	@ (800f610 <vPortSetupTimerInterrupt+0x34>)
 800f600:	2207      	movs	r2, #7
 800f602:	601a      	str	r2, [r3, #0]
}
 800f604:	bf00      	nop
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop
 800f610:	e000e010 	.word	0xe000e010
 800f614:	e000e018 	.word	0xe000e018
 800f618:	24000000 	.word	0x24000000
 800f61c:	10624dd3 	.word	0x10624dd3
 800f620:	e000e014 	.word	0xe000e014

0800f624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f634 <vPortEnableVFP+0x10>
 800f628:	6801      	ldr	r1, [r0, #0]
 800f62a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f62e:	6001      	str	r1, [r0, #0]
 800f630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f632:	bf00      	nop
 800f634:	e000ed88 	.word	0xe000ed88

0800f638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f63e:	f3ef 8305 	mrs	r3, IPSR
 800f642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b0f      	cmp	r3, #15
 800f648:	d915      	bls.n	800f676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f64a:	4a18      	ldr	r2, [pc, #96]	@ (800f6ac <vPortValidateInterruptPriority+0x74>)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4413      	add	r3, r2
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f654:	4b16      	ldr	r3, [pc, #88]	@ (800f6b0 <vPortValidateInterruptPriority+0x78>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	7afa      	ldrb	r2, [r7, #11]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d20b      	bcs.n	800f676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	607b      	str	r3, [r7, #4]
}
 800f670:	bf00      	nop
 800f672:	bf00      	nop
 800f674:	e7fd      	b.n	800f672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f676:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b4 <vPortValidateInterruptPriority+0x7c>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f67e:	4b0e      	ldr	r3, [pc, #56]	@ (800f6b8 <vPortValidateInterruptPriority+0x80>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d90b      	bls.n	800f69e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	603b      	str	r3, [r7, #0]
}
 800f698:	bf00      	nop
 800f69a:	bf00      	nop
 800f69c:	e7fd      	b.n	800f69a <vPortValidateInterruptPriority+0x62>
	}
 800f69e:	bf00      	nop
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	e000e3f0 	.word	0xe000e3f0
 800f6b0:	240012d8 	.word	0x240012d8
 800f6b4:	e000ed0c 	.word	0xe000ed0c
 800f6b8:	240012dc 	.word	0x240012dc

0800f6bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08a      	sub	sp, #40	@ 0x28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f6c8:	f7fe fd86 	bl	800e1d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800f840 <pvPortMalloc+0x184>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d101      	bne.n	800f6d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f6d4:	f000 f924 	bl	800f920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800f844 <pvPortMalloc+0x188>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4013      	ands	r3, r2
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	f040 8095 	bne.w	800f810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01e      	beq.n	800f72a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f6ec:	2208      	movs	r2, #8
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d015      	beq.n	800f72a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f023 0307 	bic.w	r3, r3, #7
 800f704:	3308      	adds	r3, #8
 800f706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f003 0307 	and.w	r3, r3, #7
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00b      	beq.n	800f72a <pvPortMalloc+0x6e>
	__asm volatile
 800f712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	617b      	str	r3, [r7, #20]
}
 800f724:	bf00      	nop
 800f726:	bf00      	nop
 800f728:	e7fd      	b.n	800f726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d06f      	beq.n	800f810 <pvPortMalloc+0x154>
 800f730:	4b45      	ldr	r3, [pc, #276]	@ (800f848 <pvPortMalloc+0x18c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	429a      	cmp	r2, r3
 800f738:	d86a      	bhi.n	800f810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f73a:	4b44      	ldr	r3, [pc, #272]	@ (800f84c <pvPortMalloc+0x190>)
 800f73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f73e:	4b43      	ldr	r3, [pc, #268]	@ (800f84c <pvPortMalloc+0x190>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f744:	e004      	b.n	800f750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	429a      	cmp	r2, r3
 800f758:	d903      	bls.n	800f762 <pvPortMalloc+0xa6>
 800f75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1f1      	bne.n	800f746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f762:	4b37      	ldr	r3, [pc, #220]	@ (800f840 <pvPortMalloc+0x184>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f768:	429a      	cmp	r2, r3
 800f76a:	d051      	beq.n	800f810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f76c:	6a3b      	ldr	r3, [r7, #32]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2208      	movs	r2, #8
 800f772:	4413      	add	r3, r2
 800f774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f780:	685a      	ldr	r2, [r3, #4]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	1ad2      	subs	r2, r2, r3
 800f786:	2308      	movs	r3, #8
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d920      	bls.n	800f7d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4413      	add	r3, r2
 800f794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	f003 0307 	and.w	r3, r3, #7
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <pvPortMalloc+0xfc>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	613b      	str	r3, [r7, #16]
}
 800f7b2:	bf00      	nop
 800f7b4:	bf00      	nop
 800f7b6:	e7fd      	b.n	800f7b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	1ad2      	subs	r2, r2, r3
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f7ca:	69b8      	ldr	r0, [r7, #24]
 800f7cc:	f000 f90a 	bl	800f9e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	4a1b      	ldr	r2, [pc, #108]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f7de:	4b1a      	ldr	r3, [pc, #104]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f850 <pvPortMalloc+0x194>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d203      	bcs.n	800f7f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f7ea:	4b17      	ldr	r3, [pc, #92]	@ (800f848 <pvPortMalloc+0x18c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a18      	ldr	r2, [pc, #96]	@ (800f850 <pvPortMalloc+0x194>)
 800f7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	4b13      	ldr	r3, [pc, #76]	@ (800f844 <pvPortMalloc+0x188>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	431a      	orrs	r2, r3
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f806:	4b13      	ldr	r3, [pc, #76]	@ (800f854 <pvPortMalloc+0x198>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	4a11      	ldr	r2, [pc, #68]	@ (800f854 <pvPortMalloc+0x198>)
 800f80e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f810:	f7fe fcf0 	bl	800e1f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00b      	beq.n	800f836 <pvPortMalloc+0x17a>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f822:	f383 8811 	msr	BASEPRI, r3
 800f826:	f3bf 8f6f 	isb	sy
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	60fb      	str	r3, [r7, #12]
}
 800f830:	bf00      	nop
 800f832:	bf00      	nop
 800f834:	e7fd      	b.n	800f832 <pvPortMalloc+0x176>
	return pvReturn;
 800f836:	69fb      	ldr	r3, [r7, #28]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3728      	adds	r7, #40	@ 0x28
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	24004ee8 	.word	0x24004ee8
 800f844:	24004efc 	.word	0x24004efc
 800f848:	24004eec 	.word	0x24004eec
 800f84c:	24004ee0 	.word	0x24004ee0
 800f850:	24004ef0 	.word	0x24004ef0
 800f854:	24004ef4 	.word	0x24004ef4

0800f858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d04f      	beq.n	800f90a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f86a:	2308      	movs	r3, #8
 800f86c:	425b      	negs	r3, r3
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	4413      	add	r3, r2
 800f872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	4b25      	ldr	r3, [pc, #148]	@ (800f914 <vPortFree+0xbc>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4013      	ands	r3, r2
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10b      	bne.n	800f89e <vPortFree+0x46>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	60fb      	str	r3, [r7, #12]
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	e7fd      	b.n	800f89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00b      	beq.n	800f8be <vPortFree+0x66>
	__asm volatile
 800f8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	60bb      	str	r3, [r7, #8]
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	e7fd      	b.n	800f8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	4b14      	ldr	r3, [pc, #80]	@ (800f914 <vPortFree+0xbc>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d01e      	beq.n	800f90a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d11a      	bne.n	800f90a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	685a      	ldr	r2, [r3, #4]
 800f8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f914 <vPortFree+0xbc>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	43db      	mvns	r3, r3
 800f8de:	401a      	ands	r2, r3
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f8e4:	f7fe fc78 	bl	800e1d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f918 <vPortFree+0xc0>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	4a09      	ldr	r2, [pc, #36]	@ (800f918 <vPortFree+0xc0>)
 800f8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f8f6:	6938      	ldr	r0, [r7, #16]
 800f8f8:	f000 f874 	bl	800f9e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f8fc:	4b07      	ldr	r3, [pc, #28]	@ (800f91c <vPortFree+0xc4>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3301      	adds	r3, #1
 800f902:	4a06      	ldr	r2, [pc, #24]	@ (800f91c <vPortFree+0xc4>)
 800f904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f906:	f7fe fc75 	bl	800e1f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f90a:	bf00      	nop
 800f90c:	3718      	adds	r7, #24
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	24004efc 	.word	0x24004efc
 800f918:	24004eec 	.word	0x24004eec
 800f91c:	24004ef8 	.word	0x24004ef8

0800f920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f920:	b480      	push	{r7}
 800f922:	b085      	sub	sp, #20
 800f924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f92a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f92c:	4b27      	ldr	r3, [pc, #156]	@ (800f9cc <prvHeapInit+0xac>)
 800f92e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f003 0307 	and.w	r3, r3, #7
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00c      	beq.n	800f954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3307      	adds	r3, #7
 800f93e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f023 0307 	bic.w	r3, r3, #7
 800f946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	4a1f      	ldr	r2, [pc, #124]	@ (800f9cc <prvHeapInit+0xac>)
 800f950:	4413      	add	r3, r2
 800f952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f958:	4a1d      	ldr	r2, [pc, #116]	@ (800f9d0 <prvHeapInit+0xb0>)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f95e:	4b1c      	ldr	r3, [pc, #112]	@ (800f9d0 <prvHeapInit+0xb0>)
 800f960:	2200      	movs	r2, #0
 800f962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	4413      	add	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f96c:	2208      	movs	r2, #8
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	1a9b      	subs	r3, r3, r2
 800f972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f023 0307 	bic.w	r3, r3, #7
 800f97a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4a15      	ldr	r2, [pc, #84]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f982:	4b14      	ldr	r3, [pc, #80]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2200      	movs	r2, #0
 800f988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f98a:	4b12      	ldr	r3, [pc, #72]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2200      	movs	r2, #0
 800f990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	1ad2      	subs	r2, r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d4 <prvHeapInit+0xb4>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800f9d8 <prvHeapInit+0xb8>)
 800f9ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4a09      	ldr	r2, [pc, #36]	@ (800f9dc <prvHeapInit+0xbc>)
 800f9b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f9b8:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <prvHeapInit+0xc0>)
 800f9ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f9be:	601a      	str	r2, [r3, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	240012e0 	.word	0x240012e0
 800f9d0:	24004ee0 	.word	0x24004ee0
 800f9d4:	24004ee8 	.word	0x24004ee8
 800f9d8:	24004ef0 	.word	0x24004ef0
 800f9dc:	24004eec 	.word	0x24004eec
 800f9e0:	24004efc 	.word	0x24004efc

0800f9e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9ec:	4b28      	ldr	r3, [pc, #160]	@ (800fa90 <prvInsertBlockIntoFreeList+0xac>)
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	e002      	b.n	800f9f8 <prvInsertBlockIntoFreeList+0x14>
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d8f7      	bhi.n	800f9f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d108      	bne.n	800fa26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	441a      	add	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	68ba      	ldr	r2, [r7, #8]
 800fa30:	441a      	add	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d118      	bne.n	800fa6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	4b15      	ldr	r3, [pc, #84]	@ (800fa94 <prvInsertBlockIntoFreeList+0xb0>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d00d      	beq.n	800fa62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	441a      	add	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	e008      	b.n	800fa74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa62:	4b0c      	ldr	r3, [pc, #48]	@ (800fa94 <prvInsertBlockIntoFreeList+0xb0>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	601a      	str	r2, [r3, #0]
 800fa6a:	e003      	b.n	800fa74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d002      	beq.n	800fa82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa82:	bf00      	nop
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	24004ee0 	.word	0x24004ee0
 800fa94:	24004ee8 	.word	0x24004ee8

0800fa98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	4913      	ldr	r1, [pc, #76]	@ (800faec <MX_USB_DEVICE_Init+0x54>)
 800faa0:	4813      	ldr	r0, [pc, #76]	@ (800faf0 <MX_USB_DEVICE_Init+0x58>)
 800faa2:	f7fb fe97 	bl	800b7d4 <USBD_Init>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800faac:	f7f1 fc64 	bl	8001378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fab0:	4910      	ldr	r1, [pc, #64]	@ (800faf4 <MX_USB_DEVICE_Init+0x5c>)
 800fab2:	480f      	ldr	r0, [pc, #60]	@ (800faf0 <MX_USB_DEVICE_Init+0x58>)
 800fab4:	f7fb febe 	bl	800b834 <USBD_RegisterClass>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fabe:	f7f1 fc5b 	bl	8001378 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fac2:	490d      	ldr	r1, [pc, #52]	@ (800faf8 <MX_USB_DEVICE_Init+0x60>)
 800fac4:	480a      	ldr	r0, [pc, #40]	@ (800faf0 <MX_USB_DEVICE_Init+0x58>)
 800fac6:	f7fb fdf5 	bl	800b6b4 <USBD_CDC_RegisterInterface>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fad0:	f7f1 fc52 	bl	8001378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fad4:	4806      	ldr	r0, [pc, #24]	@ (800faf0 <MX_USB_DEVICE_Init+0x58>)
 800fad6:	f7fb fee3 	bl	800b8a0 <USBD_Start>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d001      	beq.n	800fae4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fae0:	f7f1 fc4a 	bl	8001378 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fae4:	f7f5 f8c8 	bl	8004c78 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fae8:	bf00      	nop
 800faea:	bd80      	pop	{r7, pc}
 800faec:	240000b4 	.word	0x240000b4
 800faf0:	24004f00 	.word	0x24004f00
 800faf4:	2400001c 	.word	0x2400001c
 800faf8:	240000a0 	.word	0x240000a0

0800fafc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb00:	2200      	movs	r2, #0
 800fb02:	4905      	ldr	r1, [pc, #20]	@ (800fb18 <CDC_Init_FS+0x1c>)
 800fb04:	4805      	ldr	r0, [pc, #20]	@ (800fb1c <CDC_Init_FS+0x20>)
 800fb06:	f7fb fdef 	bl	800b6e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fb0a:	4905      	ldr	r1, [pc, #20]	@ (800fb20 <CDC_Init_FS+0x24>)
 800fb0c:	4803      	ldr	r0, [pc, #12]	@ (800fb1c <CDC_Init_FS+0x20>)
 800fb0e:	f7fb fe0d 	bl	800b72c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fb12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	240059dc 	.word	0x240059dc
 800fb1c:	24004f00 	.word	0x24004f00
 800fb20:	240051dc 	.word	0x240051dc

0800fb24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fb24:	b480      	push	{r7}
 800fb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fb28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	6039      	str	r1, [r7, #0]
 800fb3e:	71fb      	strb	r3, [r7, #7]
 800fb40:	4613      	mov	r3, r2
 800fb42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fb44:	79fb      	ldrb	r3, [r7, #7]
 800fb46:	2b23      	cmp	r3, #35	@ 0x23
 800fb48:	d84a      	bhi.n	800fbe0 <CDC_Control_FS+0xac>
 800fb4a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb50 <CDC_Control_FS+0x1c>)
 800fb4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb50:	0800fbe1 	.word	0x0800fbe1
 800fb54:	0800fbe1 	.word	0x0800fbe1
 800fb58:	0800fbe1 	.word	0x0800fbe1
 800fb5c:	0800fbe1 	.word	0x0800fbe1
 800fb60:	0800fbe1 	.word	0x0800fbe1
 800fb64:	0800fbe1 	.word	0x0800fbe1
 800fb68:	0800fbe1 	.word	0x0800fbe1
 800fb6c:	0800fbe1 	.word	0x0800fbe1
 800fb70:	0800fbe1 	.word	0x0800fbe1
 800fb74:	0800fbe1 	.word	0x0800fbe1
 800fb78:	0800fbe1 	.word	0x0800fbe1
 800fb7c:	0800fbe1 	.word	0x0800fbe1
 800fb80:	0800fbe1 	.word	0x0800fbe1
 800fb84:	0800fbe1 	.word	0x0800fbe1
 800fb88:	0800fbe1 	.word	0x0800fbe1
 800fb8c:	0800fbe1 	.word	0x0800fbe1
 800fb90:	0800fbe1 	.word	0x0800fbe1
 800fb94:	0800fbe1 	.word	0x0800fbe1
 800fb98:	0800fbe1 	.word	0x0800fbe1
 800fb9c:	0800fbe1 	.word	0x0800fbe1
 800fba0:	0800fbe1 	.word	0x0800fbe1
 800fba4:	0800fbe1 	.word	0x0800fbe1
 800fba8:	0800fbe1 	.word	0x0800fbe1
 800fbac:	0800fbe1 	.word	0x0800fbe1
 800fbb0:	0800fbe1 	.word	0x0800fbe1
 800fbb4:	0800fbe1 	.word	0x0800fbe1
 800fbb8:	0800fbe1 	.word	0x0800fbe1
 800fbbc:	0800fbe1 	.word	0x0800fbe1
 800fbc0:	0800fbe1 	.word	0x0800fbe1
 800fbc4:	0800fbe1 	.word	0x0800fbe1
 800fbc8:	0800fbe1 	.word	0x0800fbe1
 800fbcc:	0800fbe1 	.word	0x0800fbe1
 800fbd0:	0800fbe1 	.word	0x0800fbe1
 800fbd4:	0800fbe1 	.word	0x0800fbe1
 800fbd8:	0800fbe1 	.word	0x0800fbe1
 800fbdc:	0800fbe1 	.word	0x0800fbe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fbe0:	bf00      	nop
  }

  return (USBD_OK);
 800fbe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fbfa:	6879      	ldr	r1, [r7, #4]
 800fbfc:	4805      	ldr	r0, [pc, #20]	@ (800fc14 <CDC_Receive_FS+0x24>)
 800fbfe:	f7fb fd95 	bl	800b72c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc02:	4804      	ldr	r0, [pc, #16]	@ (800fc14 <CDC_Receive_FS+0x24>)
 800fc04:	f7fb fdb0 	bl	800b768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fc08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3708      	adds	r7, #8
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	24004f00 	.word	0x24004f00

0800fc18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	4613      	mov	r3, r2
 800fc24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fc26:	2300      	movs	r3, #0
 800fc28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fc2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	371c      	adds	r7, #28
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
	...

0800fc3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	4603      	mov	r3, r0
 800fc44:	6039      	str	r1, [r7, #0]
 800fc46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2212      	movs	r2, #18
 800fc4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fc4e:	4b03      	ldr	r3, [pc, #12]	@ (800fc5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	240000d4 	.word	0x240000d4

0800fc60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	6039      	str	r1, [r7, #0]
 800fc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2204      	movs	r2, #4
 800fc70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fc72:	4b03      	ldr	r3, [pc, #12]	@ (800fc80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr
 800fc80:	240000e8 	.word	0x240000e8

0800fc84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	6039      	str	r1, [r7, #0]
 800fc8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d105      	bne.n	800fca2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	4907      	ldr	r1, [pc, #28]	@ (800fcb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc9a:	4808      	ldr	r0, [pc, #32]	@ (800fcbc <USBD_FS_ProductStrDescriptor+0x38>)
 800fc9c:	f7fc ffda 	bl	800cc54 <USBD_GetString>
 800fca0:	e004      	b.n	800fcac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fca2:	683a      	ldr	r2, [r7, #0]
 800fca4:	4904      	ldr	r1, [pc, #16]	@ (800fcb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fca6:	4805      	ldr	r0, [pc, #20]	@ (800fcbc <USBD_FS_ProductStrDescriptor+0x38>)
 800fca8:	f7fc ffd4 	bl	800cc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcac:	4b02      	ldr	r3, [pc, #8]	@ (800fcb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	240061dc 	.word	0x240061dc
 800fcbc:	080152e8 	.word	0x080152e8

0800fcc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	6039      	str	r1, [r7, #0]
 800fcca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fccc:	683a      	ldr	r2, [r7, #0]
 800fcce:	4904      	ldr	r1, [pc, #16]	@ (800fce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fcd0:	4804      	ldr	r0, [pc, #16]	@ (800fce4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fcd2:	f7fc ffbf 	bl	800cc54 <USBD_GetString>
  return USBD_StrDesc;
 800fcd6:	4b02      	ldr	r3, [pc, #8]	@ (800fce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	240061dc 	.word	0x240061dc
 800fce4:	08015300 	.word	0x08015300

0800fce8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	6039      	str	r1, [r7, #0]
 800fcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	221a      	movs	r2, #26
 800fcf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fcfa:	f000 f843 	bl	800fd84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fcfe:	4b02      	ldr	r3, [pc, #8]	@ (800fd08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	240000ec 	.word	0x240000ec

0800fd0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	4603      	mov	r3, r0
 800fd14:	6039      	str	r1, [r7, #0]
 800fd16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d105      	bne.n	800fd2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fd1e:	683a      	ldr	r2, [r7, #0]
 800fd20:	4907      	ldr	r1, [pc, #28]	@ (800fd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fd22:	4808      	ldr	r0, [pc, #32]	@ (800fd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fd24:	f7fc ff96 	bl	800cc54 <USBD_GetString>
 800fd28:	e004      	b.n	800fd34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	4904      	ldr	r1, [pc, #16]	@ (800fd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fd2e:	4805      	ldr	r0, [pc, #20]	@ (800fd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fd30:	f7fc ff90 	bl	800cc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd34:	4b02      	ldr	r3, [pc, #8]	@ (800fd40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	240061dc 	.word	0x240061dc
 800fd44:	08015314 	.word	0x08015314

0800fd48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	6039      	str	r1, [r7, #0]
 800fd52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd54:	79fb      	ldrb	r3, [r7, #7]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d105      	bne.n	800fd66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	4907      	ldr	r1, [pc, #28]	@ (800fd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd5e:	4808      	ldr	r0, [pc, #32]	@ (800fd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd60:	f7fc ff78 	bl	800cc54 <USBD_GetString>
 800fd64:	e004      	b.n	800fd70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	4904      	ldr	r1, [pc, #16]	@ (800fd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd6a:	4805      	ldr	r0, [pc, #20]	@ (800fd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd6c:	f7fc ff72 	bl	800cc54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd70:	4b02      	ldr	r3, [pc, #8]	@ (800fd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	240061dc 	.word	0x240061dc
 800fd80:	08015320 	.word	0x08015320

0800fd84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc8 <Get_SerialNum+0x44>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd90:	4b0e      	ldr	r3, [pc, #56]	@ (800fdcc <Get_SerialNum+0x48>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd96:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd0 <Get_SerialNum+0x4c>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4413      	add	r3, r2
 800fda2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d009      	beq.n	800fdbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fdaa:	2208      	movs	r2, #8
 800fdac:	4909      	ldr	r1, [pc, #36]	@ (800fdd4 <Get_SerialNum+0x50>)
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f000 f814 	bl	800fddc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fdb4:	2204      	movs	r2, #4
 800fdb6:	4908      	ldr	r1, [pc, #32]	@ (800fdd8 <Get_SerialNum+0x54>)
 800fdb8:	68b8      	ldr	r0, [r7, #8]
 800fdba:	f000 f80f 	bl	800fddc <IntToUnicode>
  }
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	1ff1e800 	.word	0x1ff1e800
 800fdcc:	1ff1e804 	.word	0x1ff1e804
 800fdd0:	1ff1e808 	.word	0x1ff1e808
 800fdd4:	240000ee 	.word	0x240000ee
 800fdd8:	240000fe 	.word	0x240000fe

0800fddc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	4613      	mov	r3, r2
 800fde8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fdee:	2300      	movs	r3, #0
 800fdf0:	75fb      	strb	r3, [r7, #23]
 800fdf2:	e027      	b.n	800fe44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	0f1b      	lsrs	r3, r3, #28
 800fdf8:	2b09      	cmp	r3, #9
 800fdfa:	d80b      	bhi.n	800fe14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	0f1b      	lsrs	r3, r3, #28
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	7dfb      	ldrb	r3, [r7, #23]
 800fe04:	005b      	lsls	r3, r3, #1
 800fe06:	4619      	mov	r1, r3
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	440b      	add	r3, r1
 800fe0c:	3230      	adds	r2, #48	@ 0x30
 800fe0e:	b2d2      	uxtb	r2, r2
 800fe10:	701a      	strb	r2, [r3, #0]
 800fe12:	e00a      	b.n	800fe2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	0f1b      	lsrs	r3, r3, #28
 800fe18:	b2da      	uxtb	r2, r3
 800fe1a:	7dfb      	ldrb	r3, [r7, #23]
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	4619      	mov	r1, r3
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	440b      	add	r3, r1
 800fe24:	3237      	adds	r2, #55	@ 0x37
 800fe26:	b2d2      	uxtb	r2, r2
 800fe28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	011b      	lsls	r3, r3, #4
 800fe2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	3301      	adds	r3, #1
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	4413      	add	r3, r2
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fe3e:	7dfb      	ldrb	r3, [r7, #23]
 800fe40:	3301      	adds	r3, #1
 800fe42:	75fb      	strb	r3, [r7, #23]
 800fe44:	7dfa      	ldrb	r2, [r7, #23]
 800fe46:	79fb      	ldrb	r3, [r7, #7]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d3d3      	bcc.n	800fdf4 <IntToUnicode+0x18>
  }
}
 800fe4c:	bf00      	nop
 800fe4e:	bf00      	nop
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
	...

0800fe5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b0ba      	sub	sp, #232	@ 0xe8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	605a      	str	r2, [r3, #4]
 800fe6e:	609a      	str	r2, [r3, #8]
 800fe70:	60da      	str	r2, [r3, #12]
 800fe72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fe74:	f107 0310 	add.w	r3, r7, #16
 800fe78:	22c0      	movs	r2, #192	@ 0xc0
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f002 ff30 	bl	8012ce2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a2c      	ldr	r2, [pc, #176]	@ (800ff38 <HAL_PCD_MspInit+0xdc>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d151      	bne.n	800ff30 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fe8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fe90:	f04f 0300 	mov.w	r3, #0
 800fe94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fe98:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fe9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fea0:	f107 0310 	add.w	r3, r7, #16
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7f5 ff09 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800feb0:	f7f1 fa62 	bl	8001378 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800feb4:	f7f4 fee0 	bl	8004c78 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800feb8:	4b20      	ldr	r3, [pc, #128]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800feba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800febe:	4a1f      	ldr	r2, [pc, #124]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800fec0:	f043 0301 	orr.w	r3, r3, #1
 800fec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fec8:	4b1c      	ldr	r3, [pc, #112]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800feca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fece:	f003 0301 	and.w	r3, r3, #1
 800fed2:	60fb      	str	r3, [r7, #12]
 800fed4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fed6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800feda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fede:	2302      	movs	r3, #2
 800fee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800feea:	2300      	movs	r3, #0
 800feec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fef0:	230a      	movs	r3, #10
 800fef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fef6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fefa:	4619      	mov	r1, r3
 800fefc:	4810      	ldr	r0, [pc, #64]	@ (800ff40 <HAL_PCD_MspInit+0xe4>)
 800fefe:	f7f2 fbc1 	bl	8002684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ff02:	4b0e      	ldr	r3, [pc, #56]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800ff04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff08:	4a0c      	ldr	r2, [pc, #48]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800ff0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ff0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ff12:	4b0a      	ldr	r3, [pc, #40]	@ (800ff3c <HAL_PCD_MspInit+0xe0>)
 800ff14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff1c:	60bb      	str	r3, [r7, #8]
 800ff1e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ff20:	2200      	movs	r2, #0
 800ff22:	2105      	movs	r1, #5
 800ff24:	2065      	movs	r0, #101	@ 0x65
 800ff26:	f7f2 f8bd 	bl	80020a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ff2a:	2065      	movs	r0, #101	@ 0x65
 800ff2c:	f7f2 f8d4 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ff30:	bf00      	nop
 800ff32:	37e8      	adds	r7, #232	@ 0xe8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	40080000 	.word	0x40080000
 800ff3c:	58024400 	.word	0x58024400
 800ff40:	58020000 	.word	0x58020000

0800ff44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ff58:	4619      	mov	r1, r3
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	f7fb fced 	bl	800b93a <USBD_LL_SetupStage>
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	460b      	mov	r3, r1
 800ff72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ff7a:	78fa      	ldrb	r2, [r7, #3]
 800ff7c:	6879      	ldr	r1, [r7, #4]
 800ff7e:	4613      	mov	r3, r2
 800ff80:	00db      	lsls	r3, r3, #3
 800ff82:	4413      	add	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	440b      	add	r3, r1
 800ff88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	78fb      	ldrb	r3, [r7, #3]
 800ff90:	4619      	mov	r1, r3
 800ff92:	f7fb fd27 	bl	800b9e4 <USBD_LL_DataOutStage>
}
 800ff96:	bf00      	nop
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ffb0:	78fa      	ldrb	r2, [r7, #3]
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	00db      	lsls	r3, r3, #3
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	3320      	adds	r3, #32
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	78fb      	ldrb	r3, [r7, #3]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	f7fb fdc0 	bl	800bb4a <USBD_LL_DataInStage>
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b082      	sub	sp, #8
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fb fefa 	bl	800bdda <USBD_LL_SOF>
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b084      	sub	sp, #16
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fff6:	2301      	movs	r3, #1
 800fff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	79db      	ldrb	r3, [r3, #7]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d102      	bne.n	8010008 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010002:	2300      	movs	r3, #0
 8010004:	73fb      	strb	r3, [r7, #15]
 8010006:	e008      	b.n	801001a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	79db      	ldrb	r3, [r3, #7]
 801000c:	2b02      	cmp	r3, #2
 801000e:	d102      	bne.n	8010016 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010010:	2301      	movs	r3, #1
 8010012:	73fb      	strb	r3, [r7, #15]
 8010014:	e001      	b.n	801001a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010016:	f7f1 f9af 	bl	8001378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010020:	7bfa      	ldrb	r2, [r7, #15]
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f7fb fe94 	bl	800bd52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010030:	4618      	mov	r0, r3
 8010032:	f7fb fe3c 	bl	800bcae <USBD_LL_Reset>
}
 8010036:	bf00      	nop
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
	...

08010040 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801004e:	4618      	mov	r0, r3
 8010050:	f7fb fe8f 	bl	800bd72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	6812      	ldr	r2, [r2, #0]
 8010062:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010066:	f043 0301 	orr.w	r3, r3, #1
 801006a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	7adb      	ldrb	r3, [r3, #11]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010074:	4b04      	ldr	r3, [pc, #16]	@ (8010088 <HAL_PCD_SuspendCallback+0x48>)
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	4a03      	ldr	r2, [pc, #12]	@ (8010088 <HAL_PCD_SuspendCallback+0x48>)
 801007a:	f043 0306 	orr.w	r3, r3, #6
 801007e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010080:	bf00      	nop
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	e000ed00 	.word	0xe000ed00

0801008c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801009a:	4618      	mov	r0, r3
 801009c:	f7fb fe85 	bl	800bdaa <USBD_LL_Resume>
}
 80100a0:	bf00      	nop
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	460b      	mov	r3, r1
 80100b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100ba:	78fa      	ldrb	r2, [r7, #3]
 80100bc:	4611      	mov	r1, r2
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fb fedd 	bl	800be7e <USBD_LL_IsoOUTIncomplete>
}
 80100c4:	bf00      	nop
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	460b      	mov	r3, r1
 80100d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100de:	78fa      	ldrb	r2, [r7, #3]
 80100e0:	4611      	mov	r1, r2
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fb fe99 	bl	800be1a <USBD_LL_IsoINIncomplete>
}
 80100e8:	bf00      	nop
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fb feef 	bl	800bee2 <USBD_LL_DevConnected>
}
 8010104:	bf00      	nop
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801011a:	4618      	mov	r0, r3
 801011c:	f7fb feec 	bl	800bef8 <USBD_LL_DevDisconnected>
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d13e      	bne.n	80101b6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010138:	4a21      	ldr	r2, [pc, #132]	@ (80101c0 <USBD_LL_Init+0x98>)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4a1f      	ldr	r2, [pc, #124]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010144:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010148:	4b1d      	ldr	r3, [pc, #116]	@ (80101c0 <USBD_LL_Init+0x98>)
 801014a:	4a1e      	ldr	r2, [pc, #120]	@ (80101c4 <USBD_LL_Init+0x9c>)
 801014c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801014e:	4b1c      	ldr	r3, [pc, #112]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010150:	2209      	movs	r2, #9
 8010152:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010154:	4b1a      	ldr	r3, [pc, #104]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010156:	2202      	movs	r2, #2
 8010158:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801015a:	4b19      	ldr	r3, [pc, #100]	@ (80101c0 <USBD_LL_Init+0x98>)
 801015c:	2200      	movs	r2, #0
 801015e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010160:	4b17      	ldr	r3, [pc, #92]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010162:	2202      	movs	r2, #2
 8010164:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010166:	4b16      	ldr	r3, [pc, #88]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010168:	2200      	movs	r2, #0
 801016a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801016c:	4b14      	ldr	r3, [pc, #80]	@ (80101c0 <USBD_LL_Init+0x98>)
 801016e:	2200      	movs	r2, #0
 8010170:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010172:	4b13      	ldr	r3, [pc, #76]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010174:	2200      	movs	r2, #0
 8010176:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010178:	4b11      	ldr	r3, [pc, #68]	@ (80101c0 <USBD_LL_Init+0x98>)
 801017a:	2200      	movs	r2, #0
 801017c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801017e:	4b10      	ldr	r3, [pc, #64]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010180:	2200      	movs	r2, #0
 8010182:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010184:	4b0e      	ldr	r3, [pc, #56]	@ (80101c0 <USBD_LL_Init+0x98>)
 8010186:	2200      	movs	r2, #0
 8010188:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801018a:	480d      	ldr	r0, [pc, #52]	@ (80101c0 <USBD_LL_Init+0x98>)
 801018c:	f7f3 fa9b 	bl	80036c6 <HAL_PCD_Init>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010196:	f7f1 f8ef 	bl	8001378 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801019a:	2180      	movs	r1, #128	@ 0x80
 801019c:	4808      	ldr	r0, [pc, #32]	@ (80101c0 <USBD_LL_Init+0x98>)
 801019e:	f7f4 fcf0 	bl	8004b82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80101a2:	2240      	movs	r2, #64	@ 0x40
 80101a4:	2100      	movs	r1, #0
 80101a6:	4806      	ldr	r0, [pc, #24]	@ (80101c0 <USBD_LL_Init+0x98>)
 80101a8:	f7f4 fca4 	bl	8004af4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80101ac:	2280      	movs	r2, #128	@ 0x80
 80101ae:	2101      	movs	r1, #1
 80101b0:	4803      	ldr	r0, [pc, #12]	@ (80101c0 <USBD_LL_Init+0x98>)
 80101b2:	f7f4 fc9f 	bl	8004af4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	240063dc 	.word	0x240063dc
 80101c4:	40080000 	.word	0x40080000

080101c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101de:	4618      	mov	r0, r3
 80101e0:	f7f3 fb7d 	bl	80038de <HAL_PCD_Start>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101e8:	7bfb      	ldrb	r3, [r7, #15]
 80101ea:	4618      	mov	r0, r3
 80101ec:	f000 f942 	bl	8010474 <USBD_Get_USB_Status>
 80101f0:	4603      	mov	r3, r0
 80101f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b084      	sub	sp, #16
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	4608      	mov	r0, r1
 8010208:	4611      	mov	r1, r2
 801020a:	461a      	mov	r2, r3
 801020c:	4603      	mov	r3, r0
 801020e:	70fb      	strb	r3, [r7, #3]
 8010210:	460b      	mov	r3, r1
 8010212:	70bb      	strb	r3, [r7, #2]
 8010214:	4613      	mov	r3, r2
 8010216:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010218:	2300      	movs	r3, #0
 801021a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801021c:	2300      	movs	r3, #0
 801021e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010226:	78bb      	ldrb	r3, [r7, #2]
 8010228:	883a      	ldrh	r2, [r7, #0]
 801022a:	78f9      	ldrb	r1, [r7, #3]
 801022c:	f7f4 f87e 	bl	800432c <HAL_PCD_EP_Open>
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010234:	7bfb      	ldrb	r3, [r7, #15]
 8010236:	4618      	mov	r0, r3
 8010238:	f000 f91c 	bl	8010474 <USBD_Get_USB_Status>
 801023c:	4603      	mov	r3, r0
 801023e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010240:	7bbb      	ldrb	r3, [r7, #14]
}
 8010242:	4618      	mov	r0, r3
 8010244:	3710      	adds	r7, #16
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b084      	sub	sp, #16
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
 8010252:	460b      	mov	r3, r1
 8010254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010256:	2300      	movs	r3, #0
 8010258:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801025a:	2300      	movs	r3, #0
 801025c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010264:	78fa      	ldrb	r2, [r7, #3]
 8010266:	4611      	mov	r1, r2
 8010268:	4618      	mov	r0, r3
 801026a:	f7f4 f8c7 	bl	80043fc <HAL_PCD_EP_Close>
 801026e:	4603      	mov	r3, r0
 8010270:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010272:	7bfb      	ldrb	r3, [r7, #15]
 8010274:	4618      	mov	r0, r3
 8010276:	f000 f8fd 	bl	8010474 <USBD_Get_USB_Status>
 801027a:	4603      	mov	r3, r0
 801027c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801027e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	460b      	mov	r3, r1
 8010292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102a2:	78fa      	ldrb	r2, [r7, #3]
 80102a4:	4611      	mov	r1, r2
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f4 f97f 	bl	80045aa <HAL_PCD_EP_SetStall>
 80102ac:	4603      	mov	r3, r0
 80102ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f000 f8de 	bl	8010474 <USBD_Get_USB_Status>
 80102b8:	4603      	mov	r3, r0
 80102ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b084      	sub	sp, #16
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	460b      	mov	r3, r1
 80102d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d6:	2300      	movs	r3, #0
 80102d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102e0:	78fa      	ldrb	r2, [r7, #3]
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7f4 f9c3 	bl	8004670 <HAL_PCD_EP_ClrStall>
 80102ea:	4603      	mov	r3, r0
 80102ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102ee:	7bfb      	ldrb	r3, [r7, #15]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f8bf 	bl	8010474 <USBD_Get_USB_Status>
 80102f6:	4603      	mov	r3, r0
 80102f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010304:	b480      	push	{r7}
 8010306:	b085      	sub	sp, #20
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010316:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801031c:	2b00      	cmp	r3, #0
 801031e:	da0b      	bge.n	8010338 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010326:	68f9      	ldr	r1, [r7, #12]
 8010328:	4613      	mov	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	4413      	add	r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	440b      	add	r3, r1
 8010332:	3316      	adds	r3, #22
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	e00b      	b.n	8010350 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010338:	78fb      	ldrb	r3, [r7, #3]
 801033a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801033e:	68f9      	ldr	r1, [r7, #12]
 8010340:	4613      	mov	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	4413      	add	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	440b      	add	r3, r1
 801034a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801034e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010350:	4618      	mov	r0, r3
 8010352:	3714      	adds	r7, #20
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	460b      	mov	r3, r1
 8010366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010368:	2300      	movs	r3, #0
 801036a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010376:	78fa      	ldrb	r2, [r7, #3]
 8010378:	4611      	mov	r1, r2
 801037a:	4618      	mov	r0, r3
 801037c:	f7f3 ffb2 	bl	80042e4 <HAL_PCD_SetAddress>
 8010380:	4603      	mov	r3, r0
 8010382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010384:	7bfb      	ldrb	r3, [r7, #15]
 8010386:	4618      	mov	r0, r3
 8010388:	f000 f874 	bl	8010474 <USBD_Get_USB_Status>
 801038c:	4603      	mov	r3, r0
 801038e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010390:	7bbb      	ldrb	r3, [r7, #14]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}

0801039a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801039a:	b580      	push	{r7, lr}
 801039c:	b086      	sub	sp, #24
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	603b      	str	r3, [r7, #0]
 80103a6:	460b      	mov	r3, r1
 80103a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103aa:	2300      	movs	r3, #0
 80103ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103ae:	2300      	movs	r3, #0
 80103b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80103b8:	7af9      	ldrb	r1, [r7, #11]
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	f7f4 f8ba 	bl	8004536 <HAL_PCD_EP_Transmit>
 80103c2:	4603      	mov	r3, r0
 80103c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103c6:	7dfb      	ldrb	r3, [r7, #23]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f000 f853 	bl	8010474 <USBD_Get_USB_Status>
 80103ce:	4603      	mov	r3, r0
 80103d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80103d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3718      	adds	r7, #24
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	607a      	str	r2, [r7, #4]
 80103e6:	603b      	str	r3, [r7, #0]
 80103e8:	460b      	mov	r3, r1
 80103ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103ec:	2300      	movs	r3, #0
 80103ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80103fa:	7af9      	ldrb	r1, [r7, #11]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	f7f4 f846 	bl	8004490 <HAL_PCD_EP_Receive>
 8010404:	4603      	mov	r3, r0
 8010406:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010408:	7dfb      	ldrb	r3, [r7, #23]
 801040a:	4618      	mov	r0, r3
 801040c:	f000 f832 	bl	8010474 <USBD_Get_USB_Status>
 8010410:	4603      	mov	r3, r0
 8010412:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010414:	7dbb      	ldrb	r3, [r7, #22]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3718      	adds	r7, #24
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	460b      	mov	r3, r1
 8010428:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010430:	78fa      	ldrb	r2, [r7, #3]
 8010432:	4611      	mov	r1, r2
 8010434:	4618      	mov	r0, r3
 8010436:	f7f4 f866 	bl	8004506 <HAL_PCD_EP_GetRxCount>
 801043a:	4603      	mov	r3, r0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801044c:	4b03      	ldr	r3, [pc, #12]	@ (801045c <USBD_static_malloc+0x18>)
}
 801044e:	4618      	mov	r0, r3
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	240068c0 	.word	0x240068c0

08010460 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	4603      	mov	r3, r0
 801047c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801047e:	2300      	movs	r3, #0
 8010480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	2b03      	cmp	r3, #3
 8010486:	d817      	bhi.n	80104b8 <USBD_Get_USB_Status+0x44>
 8010488:	a201      	add	r2, pc, #4	@ (adr r2, 8010490 <USBD_Get_USB_Status+0x1c>)
 801048a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048e:	bf00      	nop
 8010490:	080104a1 	.word	0x080104a1
 8010494:	080104a7 	.word	0x080104a7
 8010498:	080104ad 	.word	0x080104ad
 801049c:	080104b3 	.word	0x080104b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80104a0:	2300      	movs	r3, #0
 80104a2:	73fb      	strb	r3, [r7, #15]
    break;
 80104a4:	e00b      	b.n	80104be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104a6:	2303      	movs	r3, #3
 80104a8:	73fb      	strb	r3, [r7, #15]
    break;
 80104aa:	e008      	b.n	80104be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104ac:	2301      	movs	r3, #1
 80104ae:	73fb      	strb	r3, [r7, #15]
    break;
 80104b0:	e005      	b.n	80104be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80104b2:	2303      	movs	r3, #3
 80104b4:	73fb      	strb	r3, [r7, #15]
    break;
 80104b6:	e002      	b.n	80104be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80104b8:	2303      	movs	r3, #3
 80104ba:	73fb      	strb	r3, [r7, #15]
    break;
 80104bc:	bf00      	nop
  }
  return usb_status;
 80104be:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3714      	adds	r7, #20
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 80104d0:	2200      	movs	r2, #0
 80104d2:	2108      	movs	r1, #8
 80104d4:	480a      	ldr	r0, [pc, #40]	@ (8010500 <ad7606_Init+0x34>)
 80104d6:	f7f2 fa85 	bl	80029e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80104da:	2001      	movs	r0, #1
 80104dc:	f7f1 fcfa 	bl	8001ed4 <HAL_Delay>
    AD7606_RST_SET();
 80104e0:	2201      	movs	r2, #1
 80104e2:	2108      	movs	r1, #8
 80104e4:	4806      	ldr	r0, [pc, #24]	@ (8010500 <ad7606_Init+0x34>)
 80104e6:	f7f2 fa7d 	bl	80029e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80104ea:	2001      	movs	r0, #1
 80104ec:	f7f1 fcf2 	bl	8001ed4 <HAL_Delay>
    AD7606_RST_RESET();
 80104f0:	2200      	movs	r2, #0
 80104f2:	2108      	movs	r1, #8
 80104f4:	4802      	ldr	r0, [pc, #8]	@ (8010500 <ad7606_Init+0x34>)
 80104f6:	f7f2 fa75 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80104fa:	bf00      	nop
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	58021800 	.word	0x58021800

08010504 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	4613      	mov	r3, r2
 8010510:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 8010512:	2200      	movs	r2, #0
 8010514:	2180      	movs	r1, #128	@ 0x80
 8010516:	4809      	ldr	r0, [pc, #36]	@ (801053c <ad7606_Read+0x38>)
 8010518:	f7f2 fa64 	bl	80029e4 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 801051c:	88fa      	ldrh	r2, [r7, #6]
 801051e:	2364      	movs	r3, #100	@ 0x64
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f7f7 fa4a 	bl	80079bc <HAL_SPI_Receive>
    AD7606_CS_SET();
 8010528:	2201      	movs	r2, #1
 801052a:	2180      	movs	r1, #128	@ 0x80
 801052c:	4803      	ldr	r0, [pc, #12]	@ (801053c <ad7606_Read+0x38>)
 801052e:	f7f2 fa59 	bl	80029e4 <HAL_GPIO_WritePin>
}
 8010532:	bf00      	nop
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	58021800 	.word	0x58021800

08010540 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7f7 fec1 	bl	80082d4 <HAL_TIM_PWM_Start>
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	460b      	mov	r3, r1
 8010566:	607a      	str	r2, [r7, #4]
 8010568:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 801056a:	2300      	movs	r3, #0
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e03d      	b.n	80105ec <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	68fa      	ldr	r2, [r7, #12]
 8010576:	4413      	add	r3, r2
 8010578:	f9b3 3000 	ldrsh.w	r3, [r3]
 801057c:	2b00      	cmp	r3, #0
 801057e:	da0f      	bge.n	80105a0 <ad7606_Convert+0x44>
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	005b      	lsls	r3, r3, #1
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	4413      	add	r3, r2
 8010588:	f9b3 3000 	ldrsh.w	r3, [r3]
 801058c:	b29b      	uxth	r3, r3
 801058e:	425b      	negs	r3, r3
 8010590:	b29b      	uxth	r3, r3
 8010592:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010596:	b29b      	uxth	r3, r3
 8010598:	425b      	negs	r3, r3
 801059a:	b29b      	uxth	r3, r3
 801059c:	b21b      	sxth	r3, r3
 801059e:	e005      	b.n	80105ac <ad7606_Convert+0x50>
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	4413      	add	r3, r2
 80105a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105ac:	697a      	ldr	r2, [r7, #20]
 80105ae:	0052      	lsls	r2, r2, #1
 80105b0:	68f9      	ldr	r1, [r7, #12]
 80105b2:	440a      	add	r2, r1
 80105b4:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105c2:	ee07 3a90 	vmov	s15, r3
 80105c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105ca:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80105ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	4413      	add	r3, r2
 80105da:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8010604 <ad7606_Convert+0xa8>
 80105de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80105e2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	3301      	adds	r3, #1
 80105ea:	617b      	str	r3, [r7, #20]
 80105ec:	897b      	ldrh	r3, [r7, #10]
 80105ee:	697a      	ldr	r2, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	dbbd      	blt.n	8010570 <ad7606_Convert+0x14>
    }
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop
 80105f8:	371c      	adds	r7, #28
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	47000000 	.word	0x47000000

08010608 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8010608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801060c:	b087      	sub	sp, #28
 801060e:	af00      	add	r7, sp, #0
 8010610:	60f8      	str	r0, [r7, #12]
 8010612:	460b      	mov	r3, r1
 8010614:	607a      	str	r2, [r7, #4]
 8010616:	817b      	strh	r3, [r7, #10]
 8010618:	466b      	mov	r3, sp
 801061a:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 801061c:	8979      	ldrh	r1, [r7, #10]
 801061e:	460b      	mov	r3, r1
 8010620:	3b01      	subs	r3, #1
 8010622:	617b      	str	r3, [r7, #20]
 8010624:	b28b      	uxth	r3, r1
 8010626:	2200      	movs	r2, #0
 8010628:	4698      	mov	r8, r3
 801062a:	4691      	mov	r9, r2
 801062c:	f04f 0200 	mov.w	r2, #0
 8010630:	f04f 0300 	mov.w	r3, #0
 8010634:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8010638:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 801063c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8010640:	b28b      	uxth	r3, r1
 8010642:	2200      	movs	r2, #0
 8010644:	461c      	mov	r4, r3
 8010646:	4615      	mov	r5, r2
 8010648:	f04f 0200 	mov.w	r2, #0
 801064c:	f04f 0300 	mov.w	r3, #0
 8010650:	012b      	lsls	r3, r5, #4
 8010652:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010656:	0122      	lsls	r2, r4, #4
 8010658:	460b      	mov	r3, r1
 801065a:	005b      	lsls	r3, r3, #1
 801065c:	3307      	adds	r3, #7
 801065e:	08db      	lsrs	r3, r3, #3
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	ebad 0d03 	sub.w	sp, sp, r3
 8010666:	466b      	mov	r3, sp
 8010668:	3301      	adds	r3, #1
 801066a:	085b      	lsrs	r3, r3, #1
 801066c:	005b      	lsls	r3, r3, #1
 801066e:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 8010670:	897b      	ldrh	r3, [r7, #10]
 8010672:	461a      	mov	r2, r3
 8010674:	6939      	ldr	r1, [r7, #16]
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f7ff ff44 	bl	8010504 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 801067c:	897b      	ldrh	r3, [r7, #10]
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	4619      	mov	r1, r3
 8010682:	6938      	ldr	r0, [r7, #16]
 8010684:	f7ff ff6a 	bl	801055c <ad7606_Convert>
 8010688:	46b5      	mov	sp, r6
}
 801068a:	bf00      	nop
 801068c:	371c      	adds	r7, #28
 801068e:	46bd      	mov	sp, r7
 8010690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010694 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b088      	sub	sp, #32
 8010698:	af04      	add	r7, sp, #16
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	70fb      	strb	r3, [r7, #3]
 80106a0:	4613      	mov	r3, r2
 80106a2:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 80106a4:	2300      	movs	r3, #0
 80106a6:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 80106a8:	883b      	ldrh	r3, [r7, #0]
 80106aa:	0a1b      	lsrs	r3, r3, #8
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 80106b2:	883b      	ldrh	r3, [r7, #0]
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	69d8      	ldr	r0, [r3, #28]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106c2:	4619      	mov	r1, r3
 80106c4:	78fb      	ldrb	r3, [r7, #3]
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	2364      	movs	r3, #100	@ 0x64
 80106ca:	9302      	str	r3, [sp, #8]
 80106cc:	2302      	movs	r3, #2
 80106ce:	9301      	str	r3, [sp, #4]
 80106d0:	f107 030c 	add.w	r3, r7, #12
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	2301      	movs	r3, #1
 80106d8:	f7f2 fa6e 	bl	8002bb8 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 80106dc:	78fb      	ldrb	r3, [r7, #3]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d105      	bne.n	80106ee <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 80106e2:	883b      	ldrh	r3, [r7, #0]
 80106e4:	f003 0310 	and.w	r3, r3, #16
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	82da      	strh	r2, [r3, #22]
	}
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	881b      	ldrh	r3, [r3, #0]
 8010702:	461a      	mov	r2, r3
 8010704:	2100      	movs	r1, #0
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff ffc4 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	885b      	ldrh	r3, [r3, #2]
 8010710:	461a      	mov	r2, r3
 8010712:	2101      	movs	r1, #1
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ffbd 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	889b      	ldrh	r3, [r3, #4]
 801071e:	461a      	mov	r2, r3
 8010720:	2102      	movs	r1, #2
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7ff ffb6 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	88db      	ldrh	r3, [r3, #6]
 801072c:	461a      	mov	r2, r3
 801072e:	2103      	movs	r1, #3
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff ffaf 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	891b      	ldrh	r3, [r3, #8]
 801073a:	461a      	mov	r2, r3
 801073c:	210b      	movs	r1, #11
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7ff ffa8 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	895b      	ldrh	r3, [r3, #10]
 8010748:	461a      	mov	r2, r3
 801074a:	210c      	movs	r1, #12
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff ffa1 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	899b      	ldrh	r3, [r3, #12]
 8010756:	461a      	mov	r2, r3
 8010758:	210d      	movs	r1, #13
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f7ff ff9a 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	89db      	ldrh	r3, [r3, #14]
 8010764:	461a      	mov	r2, r3
 8010766:	210e      	movs	r1, #14
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7ff ff93 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8a1b      	ldrh	r3, [r3, #16]
 8010772:	461a      	mov	r2, r3
 8010774:	210f      	movs	r1, #15
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7ff ff8c 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	8a5b      	ldrh	r3, [r3, #18]
 8010780:	461a      	mov	r2, r3
 8010782:	2110      	movs	r1, #16
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff ff85 	bl	8010694 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8a9b      	ldrh	r3, [r3, #20]
 801078e:	461a      	mov	r2, r3
 8010790:	2111      	movs	r1, #17
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7ff ff7e 	bl	8010694 <INA228_writeReg>
}
 8010798:	bf00      	nop
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 80107a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107a4:	b08c      	sub	sp, #48	@ 0x30
 80107a6:	af04      	add	r7, sp, #16
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	460b      	mov	r3, r1
 80107ac:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 80107ae:	2300      	movs	r3, #0
 80107b0:	60fb      	str	r3, [r7, #12]
 80107b2:	2300      	movs	r3, #0
 80107b4:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107bc:	4618      	mov	r0, r3
 80107be:	78fb      	ldrb	r3, [r7, #3]
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	78fb      	ldrb	r3, [r7, #3]
 80107c4:	4921      	ldr	r1, [pc, #132]	@ (801084c <INA228_readReg+0xac>)
 80107c6:	5ccb      	ldrb	r3, [r1, r3]
 80107c8:	4619      	mov	r1, r3
 80107ca:	2364      	movs	r3, #100	@ 0x64
 80107cc:	9302      	str	r3, [sp, #8]
 80107ce:	9101      	str	r1, [sp, #4]
 80107d0:	f107 030c 	add.w	r3, r7, #12
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	2301      	movs	r3, #1
 80107d8:	4601      	mov	r1, r0
 80107da:	481d      	ldr	r0, [pc, #116]	@ (8010850 <INA228_readReg+0xb0>)
 80107dc:	f7f2 fb00 	bl	8002de0 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 80107e0:	7b3b      	ldrb	r3, [r7, #12]
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	2200      	movs	r2, #0
 80107e6:	469a      	mov	sl, r3
 80107e8:	4693      	mov	fp, r2
 80107ea:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80107ee:	2301      	movs	r3, #1
 80107f0:	617b      	str	r3, [r7, #20]
 80107f2:	e01b      	b.n	801082c <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 80107f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80107f8:	f04f 0200 	mov.w	r2, #0
 80107fc:	f04f 0300 	mov.w	r3, #0
 8010800:	020b      	lsls	r3, r1, #8
 8010802:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010806:	0202      	lsls	r2, r0, #8
 8010808:	f107 000c 	add.w	r0, r7, #12
 801080c:	6979      	ldr	r1, [r7, #20]
 801080e:	4401      	add	r1, r0
 8010810:	7809      	ldrb	r1, [r1, #0]
 8010812:	b2c9      	uxtb	r1, r1
 8010814:	2000      	movs	r0, #0
 8010816:	460c      	mov	r4, r1
 8010818:	4605      	mov	r5, r0
 801081a:	ea42 0804 	orr.w	r8, r2, r4
 801081e:	ea43 0905 	orr.w	r9, r3, r5
 8010822:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	3301      	adds	r3, #1
 801082a:	617b      	str	r3, [r7, #20]
 801082c:	78fb      	ldrb	r3, [r7, #3]
 801082e:	4a07      	ldr	r2, [pc, #28]	@ (801084c <INA228_readReg+0xac>)
 8010830:	5cd3      	ldrb	r3, [r2, r3]
 8010832:	461a      	mov	r2, r3
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	4293      	cmp	r3, r2
 8010838:	dbdc      	blt.n	80107f4 <INA228_readReg+0x54>
	}

	return value;
 801083a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 801083e:	4610      	mov	r0, r2
 8010840:	4619      	mov	r1, r3
 8010842:	3720      	adds	r7, #32
 8010844:	46bd      	mov	sp, r7
 8010846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801084a:	bf00      	nop
 801084c:	08015418 	.word	0x08015418
 8010850:	2400035c 	.word	0x2400035c

08010854 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b086      	sub	sp, #24
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 801085c:	2105      	movs	r1, #5
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ff9e 	bl	80107a0 <INA228_readReg>
 8010864:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801086c:	f04f 0200 	mov.w	r2, #0
 8010870:	f04f 0300 	mov.w	r3, #0
 8010874:	0902      	lsrs	r2, r0, #4
 8010876:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801087a:	090b      	lsrs	r3, r1, #4
 801087c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 8010880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010884:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010888:	f173 0300 	sbcs.w	r3, r3, #0
 801088c:	d30c      	bcc.n	80108a8 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 801088e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010892:	f7ef fe45 	bl	8000520 <__aeabi_ul2f>
 8010896:	ee07 0a10 	vmov	s14, r0
 801089a:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80108dc <INA228_getVBUS_V+0x88>
 801089e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108a2:	edc7 7a05 	vstr	s15, [r7, #20]
 80108a6:	e005      	b.n	80108b4 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 80108a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108ac:	f7ef fe38 	bl	8000520 <__aeabi_ul2f>
 80108b0:	4603      	mov	r3, r0
 80108b2:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 80108b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80108b8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80108e0 <INA228_getVBUS_V+0x8c>
 80108bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80108c0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80108e4 <INA228_getVBUS_V+0x90>
 80108c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80108c8:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	ee07 3a90 	vmov	s15, r3
}
 80108d2:	eeb0 0a67 	vmov.f32	s0, s15
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	49800000 	.word	0x49800000
 80108e0:	43435000 	.word	0x43435000
 80108e4:	49742400 	.word	0x49742400

080108e8 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 80108f0:	2107      	movs	r1, #7
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7ff ff54 	bl	80107a0 <INA228_readReg>
 80108f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80108fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010900:	f04f 0200 	mov.w	r2, #0
 8010904:	f04f 0300 	mov.w	r3, #0
 8010908:	0902      	lsrs	r2, r0, #4
 801090a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801090e:	090b      	lsrs	r3, r1, #4
 8010910:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 8010914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010918:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 801091c:	f173 0300 	sbcs.w	r3, r3, #0
 8010920:	d30c      	bcc.n	801093c <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 8010922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010926:	f7ef fdfb 	bl	8000520 <__aeabi_ul2f>
 801092a:	ee07 0a10 	vmov	s14, r0
 801092e:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010958 <INA228_getCURRENT_signedLSB+0x70>
 8010932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010936:	edc7 7a05 	vstr	s15, [r7, #20]
 801093a:	e005      	b.n	8010948 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 801093c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010940:	f7ef fdee 	bl	8000520 <__aeabi_ul2f>
 8010944:	4603      	mov	r3, r0
 8010946:	617b      	str	r3, [r7, #20]
	}

	return data;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	ee07 3a90 	vmov	s15, r3
}
 801094e:	eeb0 0a67 	vmov.f32	s0, s15
 8010952:	3718      	adds	r7, #24
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	49800000 	.word	0x49800000

0801095c <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7ff ffbf 	bl	80108e8 <INA228_getCURRENT_signedLSB>
 801096a:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	edd3 7a06 	vldr	s15, [r3, #24]
 8010974:	ed97 7a03 	vldr	s14, [r7, #12]
 8010978:	ee67 7a27 	vmul.f32	s15, s14, s15
 801097c:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	ee07 3a90 	vmov	s15, r3
}
 8010986:	eeb0 0a67 	vmov.f32	s0, s15
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	4603      	mov	r3, r0
 8010998:	460a      	mov	r2, r1
 801099a:	71fb      	strb	r3, [r7, #7]
 801099c:	4613      	mov	r3, r2
 801099e:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 80109a0:	1dfb      	adds	r3, r7, #7
 80109a2:	60fb      	str	r3, [r7, #12]
	if (cmd)
 80109a4:	79bb      	ldrb	r3, [r7, #6]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d005      	beq.n	80109b6 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 80109aa:	2201      	movs	r2, #1
 80109ac:	2140      	movs	r1, #64	@ 0x40
 80109ae:	4811      	ldr	r0, [pc, #68]	@ (80109f4 <OLED_WR_Byte+0x64>)
 80109b0:	f7f2 f818 	bl	80029e4 <HAL_GPIO_WritePin>
 80109b4:	e004      	b.n	80109c0 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 80109b6:	2200      	movs	r2, #0
 80109b8:	2140      	movs	r1, #64	@ 0x40
 80109ba:	480e      	ldr	r0, [pc, #56]	@ (80109f4 <OLED_WR_Byte+0x64>)
 80109bc:	f7f2 f812 	bl	80029e4 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 80109c0:	2200      	movs	r2, #0
 80109c2:	2102      	movs	r1, #2
 80109c4:	480c      	ldr	r0, [pc, #48]	@ (80109f8 <OLED_WR_Byte+0x68>)
 80109c6:	f7f2 f80d 	bl	80029e4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 80109ca:	23c8      	movs	r3, #200	@ 0xc8
 80109cc:	2201      	movs	r2, #1
 80109ce:	68f9      	ldr	r1, [r7, #12]
 80109d0:	480a      	ldr	r0, [pc, #40]	@ (80109fc <OLED_WR_Byte+0x6c>)
 80109d2:	f7f6 fe05 	bl	80075e0 <HAL_SPI_Transmit>

	OLED_CS_Set();
 80109d6:	2201      	movs	r2, #1
 80109d8:	2102      	movs	r1, #2
 80109da:	4807      	ldr	r0, [pc, #28]	@ (80109f8 <OLED_WR_Byte+0x68>)
 80109dc:	f7f2 f802 	bl	80029e4 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 80109e0:	2201      	movs	r2, #1
 80109e2:	2140      	movs	r1, #64	@ 0x40
 80109e4:	4803      	ldr	r0, [pc, #12]	@ (80109f4 <OLED_WR_Byte+0x64>)
 80109e6:	f7f1 fffd 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80109ea:	bf00      	nop
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	58022000 	.word	0x58022000
 80109f8:	58020400 	.word	0x58020400
 80109fc:	240003b0 	.word	0x240003b0

08010a00 <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010a06:	2300      	movs	r3, #0
 8010a08:	71fb      	strb	r3, [r7, #7]
 8010a0a:	e026      	b.n	8010a5a <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	3b50      	subs	r3, #80	@ 0x50
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	2100      	movs	r1, #0
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff ffbb 	bl	8010990 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f7ff ffb7 	bl	8010990 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 8010a22:	2100      	movs	r1, #0
 8010a24:	2010      	movs	r0, #16
 8010a26:	f7ff ffb3 	bl	8010990 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	71bb      	strb	r3, [r7, #6]
 8010a2e:	e00d      	b.n	8010a4c <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8010a30:	79ba      	ldrb	r2, [r7, #6]
 8010a32:	79fb      	ldrb	r3, [r7, #7]
 8010a34:	490d      	ldr	r1, [pc, #52]	@ (8010a6c <OLED_Refresh+0x6c>)
 8010a36:	00d2      	lsls	r2, r2, #3
 8010a38:	440a      	add	r2, r1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	2101      	movs	r1, #1
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff ffa5 	bl	8010990 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010a46:	79bb      	ldrb	r3, [r7, #6]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	71bb      	strb	r3, [r7, #6]
 8010a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	daed      	bge.n	8010a30 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	3301      	adds	r3, #1
 8010a58:	71fb      	strb	r3, [r7, #7]
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	2b07      	cmp	r3, #7
 8010a5e:	d9d5      	bls.n	8010a0c <OLED_Refresh+0xc>
	}
}
 8010a60:	bf00      	nop
 8010a62:	bf00      	nop
 8010a64:	3708      	adds	r7, #8
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	24006ae0 	.word	0x24006ae0

08010a70 <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	71fb      	strb	r3, [r7, #7]
 8010a7a:	e014      	b.n	8010aa6 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	71bb      	strb	r3, [r7, #6]
 8010a80:	e00a      	b.n	8010a98 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 8010a82:	79ba      	ldrb	r2, [r7, #6]
 8010a84:	79fb      	ldrb	r3, [r7, #7]
 8010a86:	490c      	ldr	r1, [pc, #48]	@ (8010ab8 <OLED_Clear+0x48>)
 8010a88:	00d2      	lsls	r2, r2, #3
 8010a8a:	440a      	add	r2, r1
 8010a8c:	4413      	add	r3, r2
 8010a8e:	2200      	movs	r2, #0
 8010a90:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8010a92:	79bb      	ldrb	r3, [r7, #6]
 8010a94:	3301      	adds	r3, #1
 8010a96:	71bb      	strb	r3, [r7, #6]
 8010a98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	daf0      	bge.n	8010a82 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	71fb      	strb	r3, [r7, #7]
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	2b07      	cmp	r3, #7
 8010aaa:	d9e7      	bls.n	8010a7c <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010aac:	f7ff ffa8 	bl	8010a00 <OLED_Refresh>
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	24006ae0 	.word	0x24006ae0

08010abc <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b085      	sub	sp, #20
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	460a      	mov	r2, r1
 8010ac6:	71fb      	strb	r3, [r7, #7]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010acc:	79bb      	ldrb	r3, [r7, #6]
 8010ace:	08db      	lsrs	r3, r3, #3
 8010ad0:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010ad2:	79bb      	ldrb	r3, [r7, #6]
 8010ad4:	f003 0307 	and.w	r3, r3, #7
 8010ad8:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010ada:	7bbb      	ldrb	r3, [r7, #14]
 8010adc:	2201      	movs	r2, #1
 8010ade:	fa02 f303 	lsl.w	r3, r2, r3
 8010ae2:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010ae4:	79fa      	ldrb	r2, [r7, #7]
 8010ae6:	7bfb      	ldrb	r3, [r7, #15]
 8010ae8:	490a      	ldr	r1, [pc, #40]	@ (8010b14 <OLED_DrawPoint+0x58>)
 8010aea:	00d2      	lsls	r2, r2, #3
 8010aec:	440a      	add	r2, r1
 8010aee:	4413      	add	r3, r2
 8010af0:	7818      	ldrb	r0, [r3, #0]
 8010af2:	79fa      	ldrb	r2, [r7, #7]
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	7b79      	ldrb	r1, [r7, #13]
 8010af8:	4301      	orrs	r1, r0
 8010afa:	b2c8      	uxtb	r0, r1
 8010afc:	4905      	ldr	r1, [pc, #20]	@ (8010b14 <OLED_DrawPoint+0x58>)
 8010afe:	00d2      	lsls	r2, r2, #3
 8010b00:	440a      	add	r2, r1
 8010b02:	4413      	add	r3, r2
 8010b04:	4602      	mov	r2, r0
 8010b06:	701a      	strb	r2, [r3, #0]
}
 8010b08:	bf00      	nop
 8010b0a:	3714      	adds	r7, #20
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	24006ae0 	.word	0x24006ae0

08010b18 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	4603      	mov	r3, r0
 8010b20:	460a      	mov	r2, r1
 8010b22:	71fb      	strb	r3, [r7, #7]
 8010b24:	4613      	mov	r3, r2
 8010b26:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010b28:	79bb      	ldrb	r3, [r7, #6]
 8010b2a:	08db      	lsrs	r3, r3, #3
 8010b2c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010b2e:	79bb      	ldrb	r3, [r7, #6]
 8010b30:	f003 0307 	and.w	r3, r3, #7
 8010b34:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010b36:	7bbb      	ldrb	r3, [r7, #14]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8010b3e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010b40:	79fa      	ldrb	r2, [r7, #7]
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
 8010b44:	491b      	ldr	r1, [pc, #108]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b46:	00d2      	lsls	r2, r2, #3
 8010b48:	440a      	add	r2, r1
 8010b4a:	4413      	add	r3, r2
 8010b4c:	7819      	ldrb	r1, [r3, #0]
 8010b4e:	79fa      	ldrb	r2, [r7, #7]
 8010b50:	7bfb      	ldrb	r3, [r7, #15]
 8010b52:	43c9      	mvns	r1, r1
 8010b54:	b2c8      	uxtb	r0, r1
 8010b56:	4917      	ldr	r1, [pc, #92]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b58:	00d2      	lsls	r2, r2, #3
 8010b5a:	440a      	add	r2, r1
 8010b5c:	4413      	add	r3, r2
 8010b5e:	4602      	mov	r2, r0
 8010b60:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 8010b62:	79fa      	ldrb	r2, [r7, #7]
 8010b64:	7bfb      	ldrb	r3, [r7, #15]
 8010b66:	4913      	ldr	r1, [pc, #76]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b68:	00d2      	lsls	r2, r2, #3
 8010b6a:	440a      	add	r2, r1
 8010b6c:	4413      	add	r3, r2
 8010b6e:	7818      	ldrb	r0, [r3, #0]
 8010b70:	79fa      	ldrb	r2, [r7, #7]
 8010b72:	7bfb      	ldrb	r3, [r7, #15]
 8010b74:	7b79      	ldrb	r1, [r7, #13]
 8010b76:	4301      	orrs	r1, r0
 8010b78:	b2c8      	uxtb	r0, r1
 8010b7a:	490e      	ldr	r1, [pc, #56]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b7c:	00d2      	lsls	r2, r2, #3
 8010b7e:	440a      	add	r2, r1
 8010b80:	4413      	add	r3, r2
 8010b82:	4602      	mov	r2, r0
 8010b84:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010b86:	79fa      	ldrb	r2, [r7, #7]
 8010b88:	7bfb      	ldrb	r3, [r7, #15]
 8010b8a:	490a      	ldr	r1, [pc, #40]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b8c:	00d2      	lsls	r2, r2, #3
 8010b8e:	440a      	add	r2, r1
 8010b90:	4413      	add	r3, r2
 8010b92:	7819      	ldrb	r1, [r3, #0]
 8010b94:	79fa      	ldrb	r2, [r7, #7]
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	43c9      	mvns	r1, r1
 8010b9a:	b2c8      	uxtb	r0, r1
 8010b9c:	4905      	ldr	r1, [pc, #20]	@ (8010bb4 <OLED_ClearPoint+0x9c>)
 8010b9e:	00d2      	lsls	r2, r2, #3
 8010ba0:	440a      	add	r2, r1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	701a      	strb	r2, [r3, #0]
}
 8010ba8:	bf00      	nop
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	24006ae0 	.word	0x24006ae0

08010bb8 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	4608      	mov	r0, r1
 8010bc2:	4611      	mov	r1, r2
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	4623      	mov	r3, r4
 8010bc8:	71fb      	strb	r3, [r7, #7]
 8010bca:	4603      	mov	r3, r0
 8010bcc:	71bb      	strb	r3, [r7, #6]
 8010bce:	460b      	mov	r3, r1
 8010bd0:	717b      	strb	r3, [r7, #5]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010bd6:	79bb      	ldrb	r3, [r7, #6]
 8010bd8:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010bda:	793b      	ldrb	r3, [r7, #4]
 8010bdc:	08db      	lsrs	r3, r3, #3
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	461a      	mov	r2, r3
 8010be2:	793b      	ldrb	r3, [r7, #4]
 8010be4:	f003 0307 	and.w	r3, r3, #7
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bf14      	ite	ne
 8010bee:	2301      	movne	r3, #1
 8010bf0:	2300      	moveq	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	4413      	add	r3, r2
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	793b      	ldrb	r3, [r7, #4]
 8010bfa:	085b      	lsrs	r3, r3, #1
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	fb12 f303 	smulbb	r3, r2, r3
 8010c02:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010c04:	797b      	ldrb	r3, [r7, #5]
 8010c06:	3b20      	subs	r3, #32
 8010c08:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	73fb      	strb	r3, [r7, #15]
 8010c0e:	e057      	b.n	8010cc0 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 8010c10:	793b      	ldrb	r3, [r7, #4]
 8010c12:	2b0c      	cmp	r3, #12
 8010c14:	d10b      	bne.n	8010c2e <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010c16:	7aba      	ldrb	r2, [r7, #10]
 8010c18:	7bf9      	ldrb	r1, [r7, #15]
 8010c1a:	482e      	ldr	r0, [pc, #184]	@ (8010cd4 <OLED_ShowChar+0x11c>)
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4403      	add	r3, r0
 8010c26:	440b      	add	r3, r1
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	737b      	strb	r3, [r7, #13]
 8010c2c:	e019      	b.n	8010c62 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 8010c2e:	793b      	ldrb	r3, [r7, #4]
 8010c30:	2b10      	cmp	r3, #16
 8010c32:	d108      	bne.n	8010c46 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010c34:	7aba      	ldrb	r2, [r7, #10]
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
 8010c38:	4927      	ldr	r1, [pc, #156]	@ (8010cd8 <OLED_ShowChar+0x120>)
 8010c3a:	0112      	lsls	r2, r2, #4
 8010c3c:	440a      	add	r2, r1
 8010c3e:	4413      	add	r3, r2
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	737b      	strb	r3, [r7, #13]
 8010c44:	e00d      	b.n	8010c62 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010c46:	793b      	ldrb	r3, [r7, #4]
 8010c48:	2b18      	cmp	r3, #24
 8010c4a:	d13e      	bne.n	8010cca <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010c4c:	7aba      	ldrb	r2, [r7, #10]
 8010c4e:	7bf9      	ldrb	r1, [r7, #15]
 8010c50:	4822      	ldr	r0, [pc, #136]	@ (8010cdc <OLED_ShowChar+0x124>)
 8010c52:	4613      	mov	r3, r2
 8010c54:	00db      	lsls	r3, r3, #3
 8010c56:	4413      	add	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4403      	add	r3, r0
 8010c5c:	440b      	add	r3, r1
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010c62:	2300      	movs	r3, #0
 8010c64:	73bb      	strb	r3, [r7, #14]
 8010c66:	e025      	b.n	8010cb4 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010c68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	da06      	bge.n	8010c7e <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010c70:	79ba      	ldrb	r2, [r7, #6]
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	4611      	mov	r1, r2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff ff20 	bl	8010abc <OLED_DrawPoint>
 8010c7c:	e005      	b.n	8010c8a <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010c7e:	79ba      	ldrb	r2, [r7, #6]
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	4611      	mov	r1, r2
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff ff47 	bl	8010b18 <OLED_ClearPoint>
			temp <<= 1;
 8010c8a:	7b7b      	ldrb	r3, [r7, #13]
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	737b      	strb	r3, [r7, #13]
			y++;
 8010c90:	79bb      	ldrb	r3, [r7, #6]
 8010c92:	3301      	adds	r3, #1
 8010c94:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010c96:	79ba      	ldrb	r2, [r7, #6]
 8010c98:	7b3b      	ldrb	r3, [r7, #12]
 8010c9a:	1ad2      	subs	r2, r2, r3
 8010c9c:	793b      	ldrb	r3, [r7, #4]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d105      	bne.n	8010cae <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010ca2:	7b3b      	ldrb	r3, [r7, #12]
 8010ca4:	71bb      	strb	r3, [r7, #6]
				x++;
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	71fb      	strb	r3, [r7, #7]
				break;
 8010cac:	e005      	b.n	8010cba <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	73bb      	strb	r3, [r7, #14]
 8010cb4:	7bbb      	ldrb	r3, [r7, #14]
 8010cb6:	2b07      	cmp	r3, #7
 8010cb8:	d9d6      	bls.n	8010c68 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	73fb      	strb	r3, [r7, #15]
 8010cc0:	7bfa      	ldrb	r2, [r7, #15]
 8010cc2:	7afb      	ldrb	r3, [r7, #11]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d3a3      	bcc.n	8010c10 <OLED_ShowChar+0x58>
 8010cc8:	e000      	b.n	8010ccc <OLED_ShowChar+0x114>
			return;
 8010cca:	bf00      	nop
			}
		}
	}
}
 8010ccc:	3714      	adds	r7, #20
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd90      	pop	{r4, r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	08015458 	.word	0x08015458
 8010cd8:	080158cc 	.word	0x080158cc
 8010cdc:	08015ebc 	.word	0x08015ebc

08010ce0 <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	603a      	str	r2, [r7, #0]
 8010ce8:	461a      	mov	r2, r3
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
 8010cee:	460b      	mov	r3, r1
 8010cf0:	71bb      	strb	r3, [r7, #6]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010cf6:	e01b      	b.n	8010d30 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	781a      	ldrb	r2, [r3, #0]
 8010cfc:	797b      	ldrb	r3, [r7, #5]
 8010cfe:	79b9      	ldrb	r1, [r7, #6]
 8010d00:	79f8      	ldrb	r0, [r7, #7]
 8010d02:	f7ff ff59 	bl	8010bb8 <OLED_ShowChar>
		x += size1 / 2;
 8010d06:	797b      	ldrb	r3, [r7, #5]
 8010d08:	085b      	lsrs	r3, r3, #1
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	79fb      	ldrb	r3, [r7, #7]
 8010d0e:	4413      	add	r3, r2
 8010d10:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010d12:	79fa      	ldrb	r2, [r7, #7]
 8010d14:	797b      	ldrb	r3, [r7, #5]
 8010d16:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	dd05      	ble.n	8010d2a <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010d1e:	2302      	movs	r3, #2
 8010d20:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010d22:	79ba      	ldrb	r2, [r7, #6]
 8010d24:	797b      	ldrb	r3, [r7, #5]
 8010d26:	4413      	add	r3, r2
 8010d28:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	2b1f      	cmp	r3, #31
 8010d36:	d903      	bls.n	8010d40 <OLED_ShowString+0x60>
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2b7e      	cmp	r3, #126	@ 0x7e
 8010d3e:	d9db      	bls.n	8010cf8 <OLED_ShowString+0x18>
	}
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2120      	movs	r1, #32
 8010d50:	483f      	ldr	r0, [pc, #252]	@ (8010e50 <OLED_Init+0x108>)
 8010d52:	f7f1 fe47 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010d56:	20c8      	movs	r0, #200	@ 0xc8
 8010d58:	f7f1 f8bc 	bl	8001ed4 <HAL_Delay>
	OLED_RES_Set();
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	2120      	movs	r1, #32
 8010d60:	483b      	ldr	r0, [pc, #236]	@ (8010e50 <OLED_Init+0x108>)
 8010d62:	f7f1 fe3f 	bl	80029e4 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010d66:	2100      	movs	r1, #0
 8010d68:	20ae      	movs	r0, #174	@ 0xae
 8010d6a:	f7ff fe11 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010d6e:	2100      	movs	r1, #0
 8010d70:	2000      	movs	r0, #0
 8010d72:	f7ff fe0d 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010d76:	2100      	movs	r1, #0
 8010d78:	2010      	movs	r0, #16
 8010d7a:	f7ff fe09 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010d7e:	2100      	movs	r1, #0
 8010d80:	2040      	movs	r0, #64	@ 0x40
 8010d82:	f7ff fe05 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010d86:	2100      	movs	r1, #0
 8010d88:	2081      	movs	r0, #129	@ 0x81
 8010d8a:	f7ff fe01 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010d8e:	2100      	movs	r1, #0
 8010d90:	20cf      	movs	r0, #207	@ 0xcf
 8010d92:	f7ff fdfd 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010d96:	2100      	movs	r1, #0
 8010d98:	20a1      	movs	r0, #161	@ 0xa1
 8010d9a:	f7ff fdf9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010d9e:	2100      	movs	r1, #0
 8010da0:	20c8      	movs	r0, #200	@ 0xc8
 8010da2:	f7ff fdf5 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010da6:	2100      	movs	r1, #0
 8010da8:	20a6      	movs	r0, #166	@ 0xa6
 8010daa:	f7ff fdf1 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010dae:	2100      	movs	r1, #0
 8010db0:	20a8      	movs	r0, #168	@ 0xa8
 8010db2:	f7ff fded 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010db6:	2100      	movs	r1, #0
 8010db8:	203f      	movs	r0, #63	@ 0x3f
 8010dba:	f7ff fde9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	20d3      	movs	r0, #211	@ 0xd3
 8010dc2:	f7ff fde5 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f7ff fde1 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010dce:	2100      	movs	r1, #0
 8010dd0:	20d5      	movs	r0, #213	@ 0xd5
 8010dd2:	f7ff fddd 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	2080      	movs	r0, #128	@ 0x80
 8010dda:	f7ff fdd9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010dde:	2100      	movs	r1, #0
 8010de0:	20d9      	movs	r0, #217	@ 0xd9
 8010de2:	f7ff fdd5 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010de6:	2100      	movs	r1, #0
 8010de8:	20f1      	movs	r0, #241	@ 0xf1
 8010dea:	f7ff fdd1 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010dee:	2100      	movs	r1, #0
 8010df0:	20da      	movs	r0, #218	@ 0xda
 8010df2:	f7ff fdcd 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010df6:	2100      	movs	r1, #0
 8010df8:	2012      	movs	r0, #18
 8010dfa:	f7ff fdc9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010dfe:	2100      	movs	r1, #0
 8010e00:	20db      	movs	r0, #219	@ 0xdb
 8010e02:	f7ff fdc5 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010e06:	2100      	movs	r1, #0
 8010e08:	2040      	movs	r0, #64	@ 0x40
 8010e0a:	f7ff fdc1 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010e0e:	2100      	movs	r1, #0
 8010e10:	2020      	movs	r0, #32
 8010e12:	f7ff fdbd 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010e16:	2100      	movs	r1, #0
 8010e18:	2002      	movs	r0, #2
 8010e1a:	f7ff fdb9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010e1e:	2100      	movs	r1, #0
 8010e20:	208d      	movs	r0, #141	@ 0x8d
 8010e22:	f7ff fdb5 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010e26:	2100      	movs	r1, #0
 8010e28:	2014      	movs	r0, #20
 8010e2a:	f7ff fdb1 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010e2e:	2100      	movs	r1, #0
 8010e30:	20a4      	movs	r0, #164	@ 0xa4
 8010e32:	f7ff fdad 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010e36:	2100      	movs	r1, #0
 8010e38:	20a6      	movs	r0, #166	@ 0xa6
 8010e3a:	f7ff fda9 	bl	8010990 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010e3e:	2100      	movs	r1, #0
 8010e40:	20af      	movs	r0, #175	@ 0xaf
 8010e42:	f7ff fda5 	bl	8010990 <OLED_WR_Byte>
	OLED_Clear();
 8010e46:	f7ff fe13 	bl	8010a70 <OLED_Clear>
}
 8010e4a:	bf00      	nop
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	58020800 	.word	0x58020800

08010e54 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010e54:	b480      	push	{r7}
 8010e56:	b087      	sub	sp, #28
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6178      	str	r0, [r7, #20]
 8010e5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8010e60:	edc7 0a03 	vstr	s1, [r7, #12]
 8010e64:	ed87 1a02 	vstr	s2, [r7, #8]
 8010e68:	edc7 1a01 	vstr	s3, [r7, #4]
 8010e6c:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	693a      	ldr	r2, [r7, #16]
 8010e74:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	68fa      	ldr	r2, [r7, #12]
 8010e7a:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	68ba      	ldr	r2, [r7, #8]
 8010e80:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	f04f 0200 	mov.w	r2, #0
 8010e94:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f04f 0200 	mov.w	r2, #0
 8010e9c:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	f04f 0200 	mov.w	r2, #0
 8010ea4:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f04f 0200 	mov.w	r2, #0
 8010eac:	619a      	str	r2, [r3, #24]
}
 8010eae:	bf00      	nop
 8010eb0:	371c      	adds	r7, #28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	60f8      	str	r0, [r7, #12]
 8010ec2:	ed87 0a02 	vstr	s0, [r7, #8]
 8010ec6:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010eca:	ed97 7a02 	vldr	s14, [r7, #8]
 8010ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	ed93 7a06 	vldr	s14, [r3, #24]
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	edd3 6a00 	vldr	s13, [r3]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	ed93 6a03 	vldr	s12, [r3, #12]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ef4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010ef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	ed93 6a01 	vldr	s12, [r3, #4]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010f0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	ed93 6a02 	vldr	s12, [r3, #8]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	edd3 5a03 	vldr	s11, [r3, #12]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8010f22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010f26:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8010f30:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010f34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	691a      	ldr	r2, [r3, #16]
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	68da      	ldr	r2, [r3, #12]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	dd04      	ble.n	8010f76 <pid+0xbc>
		pid->out = pid->Max;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	69da      	ldr	r2, [r3, #28]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010f74:	e00f      	b.n	8010f96 <pid+0xdc>
	else if (pid->out < pid->Min)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8a:	d400      	bmi.n	8010f8e <pid+0xd4>
}
 8010f8c:	e003      	b.n	8010f96 <pid+0xdc>
		pid->out = pid->Min;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	6a1a      	ldr	r2, [r3, #32]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	619a      	str	r2, [r3, #24]
}
 8010f96:	bf00      	nop
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
	...

08010fa4 <svpwm_Control>:
#if Rectifier_Or_Inverter
void svpwm_Control(pll_Signal_I *signal)
#else
void svpwm_Control(pll_Signal_V *signal)
#endif
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b08e      	sub	sp, #56	@ 0x38
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
    // 计算中间变量
    float Ts = signal->basic->Ts;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
#if Rectifier_Or_Inverter
    float Ualpha = signal->park_inv_alpha;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    float Ubeta = signal->park_inv_beta;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	623b      	str	r3, [r7, #32]
#else
    float Ualpha = M * signal->basic->clarke_alpha;
    float Ubeta = M * signal->basic->clarke_beta;
#endif

    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010fc0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010fc4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8011258 <svpwm_Control+0x2b4>
 8010fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fcc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fd4:	edc7 7a07 	vstr	s15, [r7, #28]
    float Ubeta_ = Ubeta * Ts;
 8010fd8:	ed97 7a08 	vldr	s14, [r7, #32]
 8010fdc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe4:	edc7 7a06 	vstr	s15, [r7, #24]

    // 计算XYZ
    float X = Ubeta_;
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	617b      	str	r3, [r7, #20]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ff0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010ff8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ffc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011008:	edc7 7a04 	vstr	s15, [r7, #16]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 801100c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011010:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011018:	edd7 7a07 	vldr	s15, [r7, #28]
 801101c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011020:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011028:	edc7 7a03 	vstr	s15, [r7, #12]

    // 通过XYZ做扇区判断
    uint8_t sector = Sector_Detection(X, Y, Z);
 801102c:	ed97 1a03 	vldr	s2, [r7, #12]
 8011030:	edd7 0a04 	vldr	s1, [r7, #16]
 8011034:	ed97 0a05 	vldr	s0, [r7, #20]
 8011038:	f000 f910 	bl	801125c <Sector_Detection>
 801103c:	4603      	mov	r3, r0
 801103e:	72fb      	strb	r3, [r7, #11]

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8011040:	f04f 0300 	mov.w	r3, #0
 8011044:	637b      	str	r3, [r7, #52]	@ 0x34
 8011046:	f04f 0300 	mov.w	r3, #0
 801104a:	633b      	str	r3, [r7, #48]	@ 0x30
 801104c:	f04f 0300 	mov.w	r3, #0
 8011050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    switch (sector)
 8011052:	7afb      	ldrb	r3, [r7, #11]
 8011054:	3b01      	subs	r3, #1
 8011056:	2b05      	cmp	r3, #5
 8011058:	f200 80f0 	bhi.w	801123c <svpwm_Control+0x298>
 801105c:	a201      	add	r2, pc, #4	@ (adr r2, 8011064 <svpwm_Control+0xc0>)
 801105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011062:	bf00      	nop
 8011064:	0801107d 	.word	0x0801107d
 8011068:	080110c7 	.word	0x080110c7
 801106c:	08011111 	.word	0x08011111
 8011070:	0801115b 	.word	0x0801115b
 8011074:	080111a5 	.word	0x080111a5
 8011078:	080111f3 	.word	0x080111f3
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 801107c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011080:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011084:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011088:	edd7 6a05 	vldr	s13, [r7, #20]
 801108c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011090:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011094:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011098:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 80110a4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80110a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80110ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 80110b4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80110b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80110bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110c0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 80110c4:	e0ba      	b.n	801123c <svpwm_Control+0x298>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 80110c6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80110ca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80110ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80110d2:	edd7 6a03 	vldr	s13, [r7, #12]
 80110d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80110da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80110de:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80110e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80110e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110ea:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 80110ee:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80110f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80110f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110fa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 80110fe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011102:	edd7 7a04 	vldr	s15, [r7, #16]
 8011106:	ee77 7a67 	vsub.f32	s15, s14, s15
 801110a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 801110e:	e095      	b.n	801123c <svpwm_Control+0x298>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8011110:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011114:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011118:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801111c:	edd7 6a05 	vldr	s13, [r7, #20]
 8011120:	edd7 7a04 	vldr	s15, [r7, #16]
 8011124:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011128:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801112c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011134:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 8011138:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801113c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 8011148:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801114c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011154:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 8011158:	e070      	b.n	801123c <svpwm_Control+0x298>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 801115a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801115e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011162:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011166:	edd7 6a03 	vldr	s13, [r7, #12]
 801116a:	edd7 7a05 	vldr	s15, [r7, #20]
 801116e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011172:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011176:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801117e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 8011182:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011186:	edd7 7a05 	vldr	s15, [r7, #20]
 801118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801118e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 8011192:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011196:	edd7 7a03 	vldr	s15, [r7, #12]
 801119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801119e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 80111a2:	e04b      	b.n	801123c <svpwm_Control+0x298>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 80111a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80111b4:	eef1 6a67 	vneg.f32	s13, s15
 80111b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80111bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111c0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80111c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80111c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111cc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 80111d0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80111d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80111d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111dc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 80111e0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80111e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80111e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111ec:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 80111f0:	e024      	b.n	801123c <svpwm_Control+0x298>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 80111f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111f6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8011202:	edd7 7a05 	vldr	s15, [r7, #20]
 8011206:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801120a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801120e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011216:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 801121a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801121e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011226:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 801122a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801122e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011236:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 801123a:	bf00      	nop
    }

    Duty_Calculation(Ta, Tb, Tc, Ts);
 801123c:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8011240:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 8011244:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8011248:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 801124c:	f000 f84a 	bl	80112e4 <Duty_Calculation>
}
 8011250:	bf00      	nop
 8011252:	3738      	adds	r7, #56	@ 0x38
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	3fddb3d7 	.word	0x3fddb3d7

0801125c <Sector_Detection>:

/**
 * @brief  扇区判断
 */
static uint8_t Sector_Detection(float X, float Y, float Z)
{
 801125c:	b480      	push	{r7}
 801125e:	b087      	sub	sp, #28
 8011260:	af00      	add	r7, sp, #0
 8011262:	ed87 0a03 	vstr	s0, [r7, #12]
 8011266:	edc7 0a02 	vstr	s1, [r7, #8]
 801126a:	ed87 1a01 	vstr	s2, [r7, #4]
    uint8_t sector = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	75fb      	strb	r3, [r7, #23]
    if (Y < 0)
 8011272:	edd7 7a02 	vldr	s15, [r7, #8]
 8011276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127e:	d515      	bpl.n	80112ac <Sector_Detection+0x50>
    {
        if (Z < 0)
 8011280:	edd7 7a01 	vldr	s15, [r7, #4]
 8011284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128c:	d502      	bpl.n	8011294 <Sector_Detection+0x38>
            sector = 5;
 801128e:	2305      	movs	r3, #5
 8011290:	75fb      	strb	r3, [r7, #23]
 8011292:	e020      	b.n	80112d6 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 4 : 3;
 8011294:	edd7 7a03 	vldr	s15, [r7, #12]
 8011298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a0:	d501      	bpl.n	80112a6 <Sector_Detection+0x4a>
 80112a2:	2304      	movs	r3, #4
 80112a4:	e000      	b.n	80112a8 <Sector_Detection+0x4c>
 80112a6:	2303      	movs	r3, #3
 80112a8:	75fb      	strb	r3, [r7, #23]
 80112aa:	e014      	b.n	80112d6 <Sector_Detection+0x7a>
    }
    else
    {
        if (Z > 0)
 80112ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80112b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b8:	dd02      	ble.n	80112c0 <Sector_Detection+0x64>
            sector = 2;
 80112ba:	2302      	movs	r3, #2
 80112bc:	75fb      	strb	r3, [r7, #23]
 80112be:	e00a      	b.n	80112d6 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 6 : 1;
 80112c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80112c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112cc:	d501      	bpl.n	80112d2 <Sector_Detection+0x76>
 80112ce:	2306      	movs	r3, #6
 80112d0:	e000      	b.n	80112d4 <Sector_Detection+0x78>
 80112d2:	2301      	movs	r3, #1
 80112d4:	75fb      	strb	r3, [r7, #23]
    }
    return sector;
 80112d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	371c      	adds	r7, #28
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <Duty_Calculation>:

/**
 * @brief  计算并输出占空比
 */
static void Duty_Calculation(float Ta, float Tb, float Tc, float Ts)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b088      	sub	sp, #32
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80112ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80112f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80112f6:	edc7 1a00 	vstr	s3, [r7]
    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 80112fa:	edd7 6a03 	vldr	s13, [r7, #12]
 80112fe:	ed97 7a00 	vldr	s14, [r7]
 8011302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011306:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80113c8 <Duty_Calculation+0xe4>
 801130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011312:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011316:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 8011318:	edd7 6a02 	vldr	s13, [r7, #8]
 801131c:	ed97 7a00 	vldr	s14, [r7]
 8011320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011324:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80113c8 <Duty_Calculation+0xe4>
 8011328:	ee67 7a87 	vmul.f32	s15, s15, s14
 801132c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011330:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011334:	617b      	str	r3, [r7, #20]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 8011336:	edd7 6a01 	vldr	s13, [r7, #4]
 801133a:	ed97 7a00 	vldr	s14, [r7]
 801133e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011342:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80113c8 <Duty_Calculation+0xe4>
 8011346:	ee67 7a87 	vmul.f32	s15, s15, s14
 801134a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801134e:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011352:	61bb      	str	r3, [r7, #24]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 8011354:	2300      	movs	r3, #0
 8011356:	61fb      	str	r3, [r7, #28]
 8011358:	e026      	b.n	80113a8 <Duty_Calculation+0xc4>
    {
        ccr[i] = fminf(TIM_PERIOD, fmaxf(0, ccr[i]));
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	3320      	adds	r3, #32
 8011360:	443b      	add	r3, r7
 8011362:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8011366:	ee07 3a90 	vmov	s15, r3
 801136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801136e:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80113cc <Duty_Calculation+0xe8>
 8011372:	eeb0 0a67 	vmov.f32	s0, s15
 8011376:	f003 fcf7 	bl	8014d68 <fmaxf>
 801137a:	eef0 7a40 	vmov.f32	s15, s0
 801137e:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80113c8 <Duty_Calculation+0xe4>
 8011382:	eeb0 0a67 	vmov.f32	s0, s15
 8011386:	f003 fd0c 	bl	8014da2 <fminf>
 801138a:	eef0 7a40 	vmov.f32	s15, s0
 801138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011392:	ee17 2a90 	vmov	r2, s15
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	3320      	adds	r3, #32
 801139c:	443b      	add	r3, r7
 801139e:	f843 2c10 	str.w	r2, [r3, #-16]
    for (int i = 0; i < 3; ++i)
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	3301      	adds	r3, #1
 80113a6:	61fb      	str	r3, [r7, #28]
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	ddd5      	ble.n	801135a <Duty_Calculation+0x76>
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 80113ae:	4a08      	ldr	r2, [pc, #32]	@ (80113d0 <Duty_Calculation+0xec>)
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 80113b4:	4a06      	ldr	r2, [pc, #24]	@ (80113d0 <Duty_Calculation+0xec>)
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 80113ba:	4a05      	ldr	r2, [pc, #20]	@ (80113d0 <Duty_Calculation+0xec>)
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80113c0:	bf00      	nop
 80113c2:	3720      	adds	r7, #32
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	45bb7800 	.word	0x45bb7800
 80113cc:	00000000 	.word	0x00000000
 80113d0:	40010000 	.word	0x40010000
 80113d4:	00000000 	.word	0x00000000

080113d8 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 80113d8:	b590      	push	{r4, r7, lr}
 80113da:	b087      	sub	sp, #28
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80113e4:	460b      	mov	r3, r1
 80113e6:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 80113e8:	200c      	movs	r0, #12
 80113ea:	f000 fe69 	bl	80120c0 <malloc>
 80113ee:	4603      	mov	r3, r0
 80113f0:	461a      	mov	r2, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681c      	ldr	r4, [r3, #0]
 80113fa:	2030      	movs	r0, #48	@ 0x30
 80113fc:	f000 fe60 	bl	80120c0 <malloc>
 8011400:	4603      	mov	r3, r0
 8011402:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681c      	ldr	r4, [r3, #0]
 8011408:	2024      	movs	r0, #36	@ 0x24
 801140a:	f000 fe59 	bl	80120c0 <malloc>
 801140e:	4603      	mov	r3, r0
 8011410:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f04f 0200 	mov.w	r2, #0
 801141c:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f04f 0200 	mov.w	r2, #0
 8011428:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f04f 0200 	mov.w	r2, #0
 8011434:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f04f 0200 	mov.w	r2, #0
 8011440:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f04f 0200 	mov.w	r2, #0
 801144c:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f04f 0200 	mov.w	r2, #0
 8011458:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f04f 0200 	mov.w	r2, #0
 8011464:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f04f 0200 	mov.w	r2, #0
 8011470:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f04f 0200 	mov.w	r2, #0
 801147c:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f04f 0200 	mov.w	r2, #0
 8011488:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->theta = 0.f;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f04f 0200 	mov.w	r2, #0
 8011492:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	edd7 7a02 	vldr	s15, [r7, #8]
 801149e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011538 <pll_Init_V+0x160>
 80114a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114a6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 80114aa:	88fb      	ldrh	r3, [r7, #6]
 80114ac:	ee07 3a90 	vmov	s15, r3
 80114b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80114da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114de:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 80114e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80114e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80114ea:	eeb0 0b47 	vmov.f64	d0, d7
 80114ee:	f003 fbc3 	bl	8014c78 <sqrt>
 80114f2:	eeb0 7b40 	vmov.f64	d7, d0
 80114f6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011530 <pll_Init_V+0x158>
 80114fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011502:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	689b      	ldr	r3, [r3, #8]
 801150c:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 801153c <pll_Init_V+0x164>
 8011510:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011540 <pll_Init_V+0x168>
 8011514:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8011544 <pll_Init_V+0x16c>
 8011518:	edd7 0a05 	vldr	s1, [r7, #20]
 801151c:	ed97 0a04 	vldr	s0, [r7, #16]
 8011520:	4618      	mov	r0, r3
 8011522:	f7ff fc97 	bl	8010e54 <pid_Init>
}
 8011526:	bf00      	nop
 8011528:	371c      	adds	r7, #28
 801152a:	46bd      	mov	sp, r7
 801152c:	bd90      	pop	{r4, r7, pc}
 801152e:	bf00      	nop
 8011530:	667f3bcd 	.word	0x667f3bcd
 8011534:	3ff6a09e 	.word	0x3ff6a09e
 8011538:	40c90fdb 	.word	0x40c90fdb
 801153c:	c27b53d2 	.word	0xc27b53d2
 8011540:	431d1463 	.word	0x431d1463
 8011544:	00000000 	.word	0x00000000

08011548 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	ed87 0a02 	vstr	s0, [r7, #8]
 8011554:	460b      	mov	r3, r1
 8011556:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011558:	201c      	movs	r0, #28
 801155a:	f000 fdb1 	bl	80120c0 <malloc>
 801155e:	4603      	mov	r3, r0
 8011560:	461a      	mov	r2, r3
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681c      	ldr	r4, [r3, #0]
 801156a:	2030      	movs	r0, #48	@ 0x30
 801156c:	f000 fda8 	bl	80120c0 <malloc>
 8011570:	4603      	mov	r3, r0
 8011572:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681c      	ldr	r4, [r3, #0]
 8011578:	2024      	movs	r0, #36	@ 0x24
 801157a:	f000 fda1 	bl	80120c0 <malloc>
 801157e:	4603      	mov	r3, r0
 8011580:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681c      	ldr	r4, [r3, #0]
 8011586:	2024      	movs	r0, #36	@ 0x24
 8011588:	f000 fd9a 	bl	80120c0 <malloc>
 801158c:	4603      	mov	r3, r0
 801158e:	61a3      	str	r3, [r4, #24]
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f04f 0200 	mov.w	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f04f 0200 	mov.w	r2, #0
 80115a6:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f04f 0200 	mov.w	r2, #0
 80115b2:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f04f 0200 	mov.w	r2, #0
 80115be:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f04f 0200 	mov.w	r2, #0
 80115ca:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f04f 0200 	mov.w	r2, #0
 80115d6:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f04f 0200 	mov.w	r2, #0
 80115e2:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f04f 0200 	mov.w	r2, #0
 80115ee:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f04f 0200 	mov.w	r2, #0
 80115fa:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f04f 0200 	mov.w	r2, #0
 8011606:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->park_inv_alpha = 0.f;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f04f 0200 	mov.w	r2, #0
 8011610:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	f04f 0200 	mov.w	r2, #0
 801161a:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	edd7 7a02 	vldr	s15, [r7, #8]
 8011626:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80116a8 <pll_Init_I+0x160>
 801162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801162e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 8011632:	88fb      	ldrh	r3, [r7, #6]
 8011634:	ee07 3a90 	vmov	s15, r3
 8011638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801164a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    (*signal)->CorL = 0;   // 0:感性 1:容性
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2200      	movs	r2, #0
 8011654:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; // 1mH
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4a14      	ldr	r2, [pc, #80]	@ (80116ac <pll_Init_I+0x164>)
 801165c:	611a      	str	r2, [r3, #16]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 1.8f, 0.01f, 0, 0.2f, -0.4f);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	695b      	ldr	r3, [r3, #20]
 8011664:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 80116b0 <pll_Init_I+0x168>
 8011668:	eddf 1a12 	vldr	s3, [pc, #72]	@ 80116b4 <pll_Init_I+0x16c>
 801166c:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80116b8 <pll_Init_I+0x170>
 8011670:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80116bc <pll_Init_I+0x174>
 8011674:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80116c0 <pll_Init_I+0x178>
 8011678:	4618      	mov	r0, r3
 801167a:	f7ff fbeb 	bl	8010e54 <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.01f, 0, 0.2f, -0.2f);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	699b      	ldr	r3, [r3, #24]
 8011684:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 80116c4 <pll_Init_I+0x17c>
 8011688:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 80116b4 <pll_Init_I+0x16c>
 801168c:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80116b8 <pll_Init_I+0x170>
 8011690:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80116bc <pll_Init_I+0x174>
 8011694:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80116c0 <pll_Init_I+0x178>
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff fbdb 	bl	8010e54 <pid_Init>
}
 801169e:	bf00      	nop
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd90      	pop	{r4, r7, pc}
 80116a6:	bf00      	nop
 80116a8:	40c90fdb 	.word	0x40c90fdb
 80116ac:	3a83126f 	.word	0x3a83126f
 80116b0:	becccccd 	.word	0xbecccccd
 80116b4:	3e4ccccd 	.word	0x3e4ccccd
 80116b8:	00000000 	.word	0x00000000
 80116bc:	3c23d70a 	.word	0x3c23d70a
 80116c0:	3fe66666 	.word	0x3fe66666
 80116c4:	be4ccccd 	.word	0xbe4ccccd

080116c8 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 80116c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116cc:	ed2d 8b02 	vpush	{d8}
 80116d0:	b088      	sub	sp, #32
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    pll_Clarke(signal_V->basic);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 f9d4 	bl	8011a88 <pll_Clarke>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	69de      	ldr	r6, [r3, #28]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f103 0520 	add.w	r5, r3, #32
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	edd3 7a01 	vldr	s15, [r3, #4]
 8011704:	eeb0 0a67 	vmov.f32	s0, s15
 8011708:	f000 fc4a 	bl	8011fa0 <arm_sin_f32>
 801170c:	eeb0 8a40 	vmov.f32	s16, s0
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	edd3 7a01 	vldr	s15, [r3, #4]
 8011716:	eeb0 0a67 	vmov.f32	s0, s15
 801171a:	f000 fc87 	bl	801202c <arm_cos_f32>
 801171e:	eef0 7a40 	vmov.f32	s15, s0
 8011722:	f8c7 801c 	str.w	r8, [r7, #28]
 8011726:	61be      	str	r6, [r7, #24]
 8011728:	617d      	str	r5, [r7, #20]
 801172a:	613c      	str	r4, [r7, #16]
 801172c:	ed87 8a03 	vstr	s16, [r7, #12]
 8011730:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011734:	ed97 7a07 	vldr	s14, [r7, #28]
 8011738:	edd7 7a02 	vldr	s15, [r7, #8]
 801173c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011740:	edd7 6a06 	vldr	s13, [r7, #24]
 8011744:	edd7 7a03 	vldr	s15, [r7, #12]
 8011748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011756:	edd7 7a07 	vldr	s15, [r7, #28]
 801175a:	eeb1 7a67 	vneg.f32	s14, s15
 801175e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011766:	edd7 6a06 	vldr	s13, [r7, #24]
 801176a:	edd7 7a02 	vldr	s15, [r7, #8]
 801176e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	edc3 7a00 	vstr	s15, [r3]
  }
 801177c:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	689a      	ldr	r2, [r3, #8]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801178a:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8011808 <pll_Control_V+0x140>
 801178e:	eeb0 0a67 	vmov.f32	s0, s15
 8011792:	4610      	mov	r0, r2
 8011794:	f7ff fb91 	bl	8010eba <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	ed93 7a01 	vldr	s14, [r3, #4]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80117ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80117ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80117ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80117d2:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 8011800 <pll_Control_V+0x138>
 80117d6:	eeb0 0b47 	vmov.f64	d0, d7
 80117da:	f003 fa29 	bl	8014c30 <fmod>
 80117de:	eeb0 7b40 	vmov.f64	d7, d0
 80117e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80117ec:	bf00      	nop
 80117ee:	3720      	adds	r7, #32
 80117f0:	46bd      	mov	sp, r7
 80117f2:	ecbd 8b02 	vpop	{d8}
 80117f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117fa:	bf00      	nop
 80117fc:	f3af 8000 	nop.w
 8011800:	60000000 	.word	0x60000000
 8011804:	401921fb 	.word	0x401921fb
 8011808:	00000000 	.word	0x00000000

0801180c <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 801180c:	b590      	push	{r4, r7, lr}
 801180e:	b099      	sub	sp, #100	@ 0x64
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	ed87 0a01 	vstr	s0, [r7, #4]
 801181a:	edc7 0a00 	vstr	s1, [r7]
    // 先对信号进行clarke变换
    pll_Clarke(signal_I->basic);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4618      	mov	r0, r3
 8011824:	f000 f930 	bl	8011a88 <pll_Clarke>
    // 在电压的系上得出电流的dq值
    float sinTheta = arm_sin_f32(signal_V->theta);
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	edd3 7a01 	vldr	s15, [r3, #4]
 801182e:	eeb0 0a67 	vmov.f32	s0, s15
 8011832:	f000 fbb5 	bl	8011fa0 <arm_sin_f32>
 8011836:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011840:	eeb0 0a67 	vmov.f32	s0, s15
 8011844:	f000 fbf2 	bl	801202c <arm_cos_f32>
 8011848:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	6998      	ldr	r0, [r3, #24]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69d9      	ldr	r1, [r3, #28]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	f103 0220 	add.w	r2, r3, #32
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3324      	adds	r3, #36	@ 0x24
 8011866:	6438      	str	r0, [r7, #64]	@ 0x40
 8011868:	63f9      	str	r1, [r7, #60]	@ 0x3c
 801186a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801186c:	637b      	str	r3, [r7, #52]	@ 0x34
 801186e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011870:	633b      	str	r3, [r7, #48]	@ 0x30
 8011872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011876:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 801187a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801187e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011882:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011886:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011894:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011898:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801189c:	eeb1 7a67 	vneg.f32	s14, s15
 80118a0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80118a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118a8:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80118ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80118b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ba:	edc3 7a00 	vstr	s15, [r3]
  }
 80118be:	bf00      	nop
    // PI控制
    float PFTheta = asinf(PF);
 80118c0:	ed97 0a00 	vldr	s0, [r7]
 80118c4:	f003 f9f8 	bl	8014cb8 <asinf>
 80118c8:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 80118cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80118d0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8011a78 <pll_Control_I+0x26c>
 80118d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118d8:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8011a7c <pll_Control_I+0x270>
 80118dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	695c      	ldr	r4, [r3, #20]
 80118e8:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80118ec:	f000 fb58 	bl	8011fa0 <arm_sin_f32>
 80118f0:	eeb0 7a40 	vmov.f32	s14, s0
 80118f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80118f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	ed93 7a08 	vldr	s14, [r3, #32]
 8011904:	eef0 0a47 	vmov.f32	s1, s14
 8011908:	eeb0 0a67 	vmov.f32	s0, s15
 801190c:	4620      	mov	r0, r4
 801190e:	f7ff fad4 	bl	8010eba <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 8011912:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011916:	f000 fb89 	bl	801202c <arm_cos_f32>
 801191a:	eeb0 7a40 	vmov.f32	s14, s0
 801191e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8011922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	7b1b      	ldrb	r3, [r3, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d002      	beq.n	8011934 <pll_Control_I+0x128>
 801192e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011932:	e001      	b.n	8011938 <pll_Control_I+0x12c>
 8011934:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011938:	ee67 7a27 	vmul.f32	s15, s14, s15
 801193c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); // 电流相位
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	699a      	ldr	r2, [r3, #24]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801194c:	eef0 0a67 	vmov.f32	s1, s15
 8011950:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8011954:	4610      	mov	r0, r2
 8011956:	f7ff fab0 	bl	8010eba <pid>
    // 解耦调制
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	ed93 7a08 	vldr	s14, [r3, #32]
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	695b      	ldr	r3, [r3, #20]
 8011966:	edd3 7a06 	vldr	s15, [r3, #24]
 801196a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801197e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	edd3 7a04 	vldr	s15, [r3, #16]
 8011988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801198c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011990:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	699b      	ldr	r3, [r3, #24]
 80119a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80119a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	edd3 6a08 	vldr	s13, [r3, #32]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80119b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	edd3 7a04 	vldr	s15, [r3, #16]
 80119c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119ca:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // 限幅
    Uabd = fmaxf(-0.95f, fminf(0.95f, Uabd));
 80119ce:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8011a80 <pll_Control_I+0x274>
 80119d2:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80119d6:	f003 f9e4 	bl	8014da2 <fminf>
 80119da:	eef0 7a40 	vmov.f32	s15, s0
 80119de:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8011a84 <pll_Control_I+0x278>
 80119e2:	eeb0 0a67 	vmov.f32	s0, s15
 80119e6:	f003 f9bf 	bl	8014d68 <fmaxf>
 80119ea:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    Uabq = fmaxf(-0.95f, fminf(0.95f, Uabq));
 80119ee:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8011a80 <pll_Control_I+0x274>
 80119f2:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80119f6:	f003 f9d4 	bl	8014da2 <fminf>
 80119fa:	eef0 7a40 	vmov.f32	s15, s0
 80119fe:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8011a84 <pll_Control_I+0x278>
 8011a02:	eeb0 0a67 	vmov.f32	s0, s15
 8011a06:	f003 f9af 	bl	8014d68 <fmaxf>
 8011a0a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	1d1a      	adds	r2, r3, #4
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3308      	adds	r3, #8
 8011a16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011a18:	62b9      	str	r1, [r7, #40]	@ 0x28
 8011a1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011a1c:	6279      	str	r1, [r7, #36]	@ 0x24
 8011a1e:	623a      	str	r2, [r7, #32]
 8011a20:	61fb      	str	r3, [r7, #28]
 8011a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a24:	61bb      	str	r3, [r7, #24]
 8011a26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a28:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011a2a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8011a4c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8011a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a58:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	edc3 7a00 	vstr	s15, [r3]
  }
 8011a6e:	bf00      	nop
}
 8011a70:	bf00      	nop
 8011a72:	3764      	adds	r7, #100	@ 0x64
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd90      	pop	{r4, r7, pc}
 8011a78:	3fb4fdf4 	.word	0x3fb4fdf4
 8011a7c:	4107be77 	.word	0x4107be77
 8011a80:	3f733333 	.word	0x3f733333
 8011a84:	bf733333 	.word	0xbf733333

08011a88 <pll_Clarke>:
/**
 * @brief clarke变换
 * @param basic 信号基本变量指针
 */
static void pll_Clarke(pll_Signal_Basic *basic)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
    basic->clarke_alpha = (2.f * basic->input_a - basic->input_b - basic->input_c) / 3.f;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	edd3 7a00 	vldr	s15, [r3]
 8011a96:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011aa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8011aaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011aae:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	edc3 7a06 	vstr	s15, [r3, #24]
    basic->clarke_beta = 0.57735026f * (basic->input_b - basic->input_c);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	edd3 7a02 	vldr	s15, [r3, #8]
 8011ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011acc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8011ae8 <pll_Clarke+0x60>
 8011ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8011ada:	bf00      	nop
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	3f13cd3a 	.word	0x3f13cd3a

08011aec <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011af6:	88fb      	ldrh	r3, [r7, #6]
 8011af8:	2b40      	cmp	r3, #64	@ 0x40
 8011afa:	d138      	bne.n	8011b6e <HAL_GPIO_EXTI_Callback+0x82>
    {
        getVoltageCurrent();     // 获取电压电流
 8011afc:	f000 f956 	bl	8011dac <getVoltageCurrent>
        calcEffectiveValue();    // 计算有效值
 8011b00:	f000 f848 	bl	8011b94 <calcEffectiveValue>
        normalize();             // 标幺化
 8011b04:	f000 f8ee 	bl	8011ce4 <normalize>
        pll_Control_V(signal_V); // 锁相控制
 8011b08:	4b1b      	ldr	r3, [pc, #108]	@ (8011b78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7ff fddb 	bl	80116c8 <pll_Control_V>

#if Rectifier_Or_Inverter
        // 电流内环控制
        if (runState == RUN)
 8011b12:	4b1a      	ldr	r3, [pc, #104]	@ (8011b7c <HAL_GPIO_EXTI_Callback+0x90>)
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d10b      	bne.n	8011b34 <HAL_GPIO_EXTI_Callback+0x48>
            pll_Control_I(signal_I, signal_V, 1.2f, 1.f);
 8011b1c:	4b18      	ldr	r3, [pc, #96]	@ (8011b80 <HAL_GPIO_EXTI_Callback+0x94>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a15      	ldr	r2, [pc, #84]	@ (8011b78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011b28:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8011b84 <HAL_GPIO_EXTI_Callback+0x98>
 8011b2c:	4611      	mov	r1, r2
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7ff fe6c 	bl	801180c <pll_Control_I>
#endif

        svpwm_Control(signal_I); // svpwm调制
 8011b34:	4b12      	ldr	r3, [pc, #72]	@ (8011b80 <HAL_GPIO_EXTI_Callback+0x94>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff fa33 	bl	8010fa4 <svpwm_Control>

        // DAC输出
        // uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f);
        uint32_t dacValue = (uint32_t)(signal_V->basic->input_a * 2000.f + 2048.f);
 8011b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8011b78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	edd3 7a00 	vldr	s15, [r3]
 8011b48:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011b88 <HAL_GPIO_EXTI_Callback+0x9c>
 8011b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b50:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011b8c <HAL_GPIO_EXTI_Callback+0xa0>
 8011b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b5c:	ee17 3a90 	vmov	r3, s15
 8011b60:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2200      	movs	r2, #0
 8011b66:	2100      	movs	r1, #0
 8011b68:	4809      	ldr	r0, [pc, #36]	@ (8011b90 <HAL_GPIO_EXTI_Callback+0xa4>)
 8011b6a:	f7f0 fc0a 	bl	8002382 <HAL_DAC_SetValue>
    }
}
 8011b6e:	bf00      	nop
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	240094ec 	.word	0x240094ec
 8011b7c:	240094f4 	.word	0x240094f4
 8011b80:	240094f0 	.word	0x240094f0
 8011b84:	3f99999a 	.word	0x3f99999a
 8011b88:	44fa0000 	.word	0x44fa0000
 8011b8c:	45000000 	.word	0x45000000
 8011b90:	24000310 	.word	0x24000310

08011b94 <calcEffectiveValue>:

/**
 * @brief  计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	af00      	add	r7, sp, #0
    static float V_rms_c[400] = {0};
    static float I_rms_a[400] = {0};
    static float I_rms_b[400] = {0};
    static float I_rms_c[400] = {0};

    V_rms_a[cnt] = signal_V->basic->input_a;
 8011b98:	4b49      	ldr	r3, [pc, #292]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	4a49      	ldr	r2, [pc, #292]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011ba0:	8812      	ldrh	r2, [r2, #0]
 8011ba2:	b292      	uxth	r2, r2
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	4947      	ldr	r1, [pc, #284]	@ (8011cc8 <calcEffectiveValue+0x134>)
 8011baa:	0083      	lsls	r3, r0, #2
 8011bac:	440b      	add	r3, r1
 8011bae:	601a      	str	r2, [r3, #0]
    V_rms_b[cnt] = signal_V->basic->input_b;
 8011bb0:	4b43      	ldr	r3, [pc, #268]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4a43      	ldr	r2, [pc, #268]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011bb8:	8812      	ldrh	r2, [r2, #0]
 8011bba:	b292      	uxth	r2, r2
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	685a      	ldr	r2, [r3, #4]
 8011bc0:	4942      	ldr	r1, [pc, #264]	@ (8011ccc <calcEffectiveValue+0x138>)
 8011bc2:	0083      	lsls	r3, r0, #2
 8011bc4:	440b      	add	r3, r1
 8011bc6:	601a      	str	r2, [r3, #0]
    V_rms_c[cnt] = signal_V->basic->input_c;
 8011bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	4a3d      	ldr	r2, [pc, #244]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011bd0:	8812      	ldrh	r2, [r2, #0]
 8011bd2:	b292      	uxth	r2, r2
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	689a      	ldr	r2, [r3, #8]
 8011bd8:	493d      	ldr	r1, [pc, #244]	@ (8011cd0 <calcEffectiveValue+0x13c>)
 8011bda:	0083      	lsls	r3, r0, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	601a      	str	r2, [r3, #0]
    I_rms_a[cnt] = signal_I->basic->input_a;
 8011be0:	4b3c      	ldr	r3, [pc, #240]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a37      	ldr	r2, [pc, #220]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011be8:	8812      	ldrh	r2, [r2, #0]
 8011bea:	b292      	uxth	r2, r2
 8011bec:	4610      	mov	r0, r2
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	4939      	ldr	r1, [pc, #228]	@ (8011cd8 <calcEffectiveValue+0x144>)
 8011bf2:	0083      	lsls	r3, r0, #2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	601a      	str	r2, [r3, #0]
    I_rms_b[cnt] = signal_I->basic->input_b;
 8011bf8:	4b36      	ldr	r3, [pc, #216]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	4a31      	ldr	r2, [pc, #196]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011c00:	8812      	ldrh	r2, [r2, #0]
 8011c02:	b292      	uxth	r2, r2
 8011c04:	4610      	mov	r0, r2
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	4934      	ldr	r1, [pc, #208]	@ (8011cdc <calcEffectiveValue+0x148>)
 8011c0a:	0083      	lsls	r3, r0, #2
 8011c0c:	440b      	add	r3, r1
 8011c0e:	601a      	str	r2, [r3, #0]
    I_rms_c[cnt] = signal_I->basic->input_c;
 8011c10:	4b30      	ldr	r3, [pc, #192]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4a2b      	ldr	r2, [pc, #172]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011c18:	8812      	ldrh	r2, [r2, #0]
 8011c1a:	b292      	uxth	r2, r2
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	689a      	ldr	r2, [r3, #8]
 8011c20:	492f      	ldr	r1, [pc, #188]	@ (8011ce0 <calcEffectiveValue+0x14c>)
 8011c22:	0083      	lsls	r3, r0, #2
 8011c24:	440b      	add	r3, r1
 8011c26:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 8011c28:	4b26      	ldr	r3, [pc, #152]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	3301      	adds	r3, #1
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	4a24      	ldr	r2, [pc, #144]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011c34:	4619      	mov	r1, r3
 8011c36:	8011      	strh	r1, [r2, #0]
 8011c38:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8011c3c:	d13e      	bne.n	8011cbc <calcEffectiveValue+0x128>
    {
        cnt = 0;
 8011c3e:	4b21      	ldr	r3, [pc, #132]	@ (8011cc4 <calcEffectiveValue+0x130>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(V_rms_a, 400, &signal_V->basic->rms_a);
 8011c44:	4b1e      	ldr	r3, [pc, #120]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	330c      	adds	r3, #12
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011c52:	481d      	ldr	r0, [pc, #116]	@ (8011cc8 <calcEffectiveValue+0x134>)
 8011c54:	f000 f93c 	bl	8011ed0 <arm_rms_f32>
        arm_rms_f32(V_rms_b, 400, &signal_V->basic->rms_b);
 8011c58:	4b19      	ldr	r3, [pc, #100]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	3310      	adds	r3, #16
 8011c60:	461a      	mov	r2, r3
 8011c62:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011c66:	4819      	ldr	r0, [pc, #100]	@ (8011ccc <calcEffectiveValue+0x138>)
 8011c68:	f000 f932 	bl	8011ed0 <arm_rms_f32>
        arm_rms_f32(V_rms_c, 400, &signal_V->basic->rms_c);
 8011c6c:	4b14      	ldr	r3, [pc, #80]	@ (8011cc0 <calcEffectiveValue+0x12c>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3314      	adds	r3, #20
 8011c74:	461a      	mov	r2, r3
 8011c76:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011c7a:	4815      	ldr	r0, [pc, #84]	@ (8011cd0 <calcEffectiveValue+0x13c>)
 8011c7c:	f000 f928 	bl	8011ed0 <arm_rms_f32>
        arm_rms_f32(I_rms_a, 400, &signal_I->basic->rms_a);
 8011c80:	4b14      	ldr	r3, [pc, #80]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	330c      	adds	r3, #12
 8011c88:	461a      	mov	r2, r3
 8011c8a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011c8e:	4812      	ldr	r0, [pc, #72]	@ (8011cd8 <calcEffectiveValue+0x144>)
 8011c90:	f000 f91e 	bl	8011ed0 <arm_rms_f32>
        arm_rms_f32(I_rms_b, 400, &signal_I->basic->rms_b);
 8011c94:	4b0f      	ldr	r3, [pc, #60]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	3310      	adds	r3, #16
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011ca2:	480e      	ldr	r0, [pc, #56]	@ (8011cdc <calcEffectiveValue+0x148>)
 8011ca4:	f000 f914 	bl	8011ed0 <arm_rms_f32>
        arm_rms_f32(I_rms_c, 400, &signal_I->basic->rms_c);
 8011ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8011cd4 <calcEffectiveValue+0x140>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3314      	adds	r3, #20
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011cb6:	480a      	ldr	r0, [pc, #40]	@ (8011ce0 <calcEffectiveValue+0x14c>)
 8011cb8:	f000 f90a 	bl	8011ed0 <arm_rms_f32>
    }
}
 8011cbc:	bf00      	nop
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	240094ec 	.word	0x240094ec
 8011cc4:	24006f60 	.word	0x24006f60
 8011cc8:	24006f64 	.word	0x24006f64
 8011ccc:	240075a4 	.word	0x240075a4
 8011cd0:	24007be4 	.word	0x24007be4
 8011cd4:	240094f0 	.word	0x240094f0
 8011cd8:	24008224 	.word	0x24008224
 8011cdc:	24008864 	.word	0x24008864
 8011ce0:	24008ea4 	.word	0x24008ea4

08011ce4 <normalize>:

/**
 * @brief  标幺化
 */
static void normalize(void)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	af00      	add	r7, sp, #0
    signal_V->basic->input_a /= Ubase;
 8011ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8011d9c <normalize+0xb8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	ed93 7a00 	vldr	s14, [r3]
 8011cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8011d9c <normalize+0xb8>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011da0 <normalize+0xbc>
 8011cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d00:	edc3 7a00 	vstr	s15, [r3]
    signal_V->basic->input_b /= Ubase;
 8011d04:	4b25      	ldr	r3, [pc, #148]	@ (8011d9c <normalize+0xb8>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d0e:	4b23      	ldr	r3, [pc, #140]	@ (8011d9c <normalize+0xb8>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8011da0 <normalize+0xbc>
 8011d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d1c:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->basic->input_c /= Ubase;
 8011d20:	4b1e      	ldr	r3, [pc, #120]	@ (8011d9c <normalize+0xb8>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8011d9c <normalize+0xb8>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8011da0 <normalize+0xbc>
 8011d34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d38:	edc3 7a02 	vstr	s15, [r3, #8]
    signal_I->basic->input_a /= Ibase;
 8011d3c:	4b19      	ldr	r3, [pc, #100]	@ (8011da4 <normalize+0xc0>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	ed93 7a00 	vldr	s14, [r3]
 8011d46:	4b17      	ldr	r3, [pc, #92]	@ (8011da4 <normalize+0xc0>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8011da8 <normalize+0xc4>
 8011d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d54:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input_b /= Ibase;
 8011d58:	4b12      	ldr	r3, [pc, #72]	@ (8011da4 <normalize+0xc0>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d62:	4b10      	ldr	r3, [pc, #64]	@ (8011da4 <normalize+0xc0>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8011da8 <normalize+0xc4>
 8011d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d70:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->basic->input_c /= Ibase;
 8011d74:	4b0b      	ldr	r3, [pc, #44]	@ (8011da4 <normalize+0xc0>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8011d7e:	4b09      	ldr	r3, [pc, #36]	@ (8011da4 <normalize+0xc0>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8011da8 <normalize+0xc4>
 8011d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d8c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011d90:	bf00      	nop
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr
 8011d9a:	bf00      	nop
 8011d9c:	240094ec 	.word	0x240094ec
 8011da0:	41a9ae15 	.word	0x41a9ae15
 8011da4:	240094f0 	.word	0x240094f0
 8011da8:	4107be77 	.word	0x4107be77

08011dac <getVoltageCurrent>:

/**
 * @brief  获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b092      	sub	sp, #72	@ 0x48
 8011db0:	af00      	add	r7, sp, #0
    // 读取AD7606数据
    float adcValue[8] = {0};
 8011db2:	1d3b      	adds	r3, r7, #4
 8011db4:	2220      	movs	r2, #32
 8011db6:	2100      	movs	r1, #0
 8011db8:	4618      	mov	r0, r3
 8011dba:	f000 ff92 	bl	8012ce2 <memset>
    ad7606_GetValue(&hspi2, 7, adcValue);
 8011dbe:	1d3b      	adds	r3, r7, #4
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	2107      	movs	r1, #7
 8011dc4:	4839      	ldr	r0, [pc, #228]	@ (8011eac <getVoltageCurrent+0x100>)
 8011dc6:	f7fe fc1f 	bl	8010608 <ad7606_GetValue>

    // 处理电压数据，将线电压转为相电压
    float Uab = adcValue[2];
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	647b      	str	r3, [r7, #68]	@ 0x44
    float Ubc = adcValue[4];
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	643b      	str	r3, [r7, #64]	@ 0x40
    float Uca = adcValue[6];
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float samp_Va = 38.334749f * (Uab - Uca) / 3.f;
 8011dd6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8011dda:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8011dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011de2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011eb0 <getVoltageCurrent+0x104>
 8011de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011dea:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011df2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float samp_Vb = 38.527397f * (Ubc - Uab) / 3.f;
 8011df6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011dfa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8011dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e02:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8011eb4 <getVoltageCurrent+0x108>
 8011e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e0a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float samp_Vc = 38.525180f * (Uca - Ubc) / 3.f;
 8011e16:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011e1a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8011e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e22:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8011eb8 <getVoltageCurrent+0x10c>
 8011e26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e2a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e32:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // 处理电流数据
    float samp_Ia = adcValue[1] * 2.178571f;
 8011e36:	edd7 7a02 	vldr	s15, [r7, #8]
 8011e3a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011ebc <getVoltageCurrent+0x110>
 8011e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e42:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float samp_Ib = adcValue[3] * 2.250774f;
 8011e46:	edd7 7a04 	vldr	s15, [r7, #16]
 8011e4a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8011ec0 <getVoltageCurrent+0x114>
 8011e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e52:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float samp_Ic = adcValue[5] * 2.172956f;
 8011e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8011e5a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8011ec4 <getVoltageCurrent+0x118>
 8011e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    signal_V->basic->input_a = samp_Va;
 8011e66:	4b18      	ldr	r3, [pc, #96]	@ (8011ec8 <getVoltageCurrent+0x11c>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e6e:	601a      	str	r2, [r3, #0]
    signal_V->basic->input_b = samp_Vb;
 8011e70:	4b15      	ldr	r3, [pc, #84]	@ (8011ec8 <getVoltageCurrent+0x11c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e78:	605a      	str	r2, [r3, #4]
    signal_V->basic->input_c = samp_Vc;
 8011e7a:	4b13      	ldr	r3, [pc, #76]	@ (8011ec8 <getVoltageCurrent+0x11c>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e82:	609a      	str	r2, [r3, #8]
    signal_I->basic->input_a = samp_Ia;
 8011e84:	4b11      	ldr	r3, [pc, #68]	@ (8011ecc <getVoltageCurrent+0x120>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e8c:	601a      	str	r2, [r3, #0]
    signal_I->basic->input_b = samp_Ib;
 8011e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8011ecc <getVoltageCurrent+0x120>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e96:	605a      	str	r2, [r3, #4]
    signal_I->basic->input_c = samp_Ic;
 8011e98:	4b0c      	ldr	r3, [pc, #48]	@ (8011ecc <getVoltageCurrent+0x120>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ea0:	609a      	str	r2, [r3, #8]
}
 8011ea2:	bf00      	nop
 8011ea4:	3748      	adds	r7, #72	@ 0x48
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	24000438 	.word	0x24000438
 8011eb0:	421956c8 	.word	0x421956c8
 8011eb4:	421a1c0e 	.word	0x421a1c0e
 8011eb8:	421a19c9 	.word	0x421a19c9
 8011ebc:	400b6db5 	.word	0x400b6db5
 8011ec0:	40100cae 	.word	0x40100cae
 8011ec4:	400b11b6 	.word	0x400b11b6
 8011ec8:	240094ec 	.word	0x240094ec
 8011ecc:	240094f0 	.word	0x240094f0

08011ed0 <arm_rms_f32>:
 8011ed0:	b530      	push	{r4, r5, lr}
 8011ed2:	088d      	lsrs	r5, r1, #2
 8011ed4:	ed2d 8b02 	vpush	{d8}
 8011ed8:	b083      	sub	sp, #12
 8011eda:	d054      	beq.n	8011f86 <arm_rms_f32+0xb6>
 8011edc:	f100 0310 	add.w	r3, r0, #16
 8011ee0:	462c      	mov	r4, r5
 8011ee2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011f9c <arm_rms_f32+0xcc>
 8011ee6:	ed53 6a04 	vldr	s13, [r3, #-16]
 8011eea:	3c01      	subs	r4, #1
 8011eec:	ed13 7a03 	vldr	s14, [r3, #-12]
 8011ef0:	f103 0310 	add.w	r3, r3, #16
 8011ef4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011ef8:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8011efc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011f00:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8011f04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f08:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011f0c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011f10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f18:	ee76 5a27 	vadd.f32	s11, s12, s15
 8011f1c:	d1e3      	bne.n	8011ee6 <arm_rms_f32+0x16>
 8011f1e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8011f22:	f011 0303 	ands.w	r3, r1, #3
 8011f26:	d015      	beq.n	8011f54 <arm_rms_f32+0x84>
 8011f28:	edd0 7a00 	vldr	s15, [r0]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011f36:	d00d      	beq.n	8011f54 <arm_rms_f32+0x84>
 8011f38:	edd0 7a01 	vldr	s15, [r0, #4]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f42:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011f46:	d005      	beq.n	8011f54 <arm_rms_f32+0x84>
 8011f48:	edd0 7a02 	vldr	s15, [r0, #8]
 8011f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f50:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011f54:	ee07 1a90 	vmov	s15, r1
 8011f58:	2300      	movs	r3, #0
 8011f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f5e:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 8011f62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f6a:	db0f      	blt.n	8011f8c <arm_rms_f32+0xbc>
 8011f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011f70:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f78:	d40a      	bmi.n	8011f90 <arm_rms_f32+0xc0>
 8011f7a:	ed82 8a00 	vstr	s16, [r2]
 8011f7e:	b003      	add	sp, #12
 8011f80:	ecbd 8b02 	vpop	{d8}
 8011f84:	bd30      	pop	{r4, r5, pc}
 8011f86:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8011f9c <arm_rms_f32+0xcc>
 8011f8a:	e7ca      	b.n	8011f22 <arm_rms_f32+0x52>
 8011f8c:	6013      	str	r3, [r2, #0]
 8011f8e:	e7f6      	b.n	8011f7e <arm_rms_f32+0xae>
 8011f90:	9201      	str	r2, [sp, #4]
 8011f92:	f002 febd 	bl	8014d10 <sqrtf>
 8011f96:	9a01      	ldr	r2, [sp, #4]
 8011f98:	e7ef      	b.n	8011f7a <arm_rms_f32+0xaa>
 8011f9a:	bf00      	nop
 8011f9c:	00000000 	.word	0x00000000

08011fa0 <arm_sin_f32>:
 8011fa0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012020 <arm_sin_f32+0x80>
 8011fa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011fa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011fac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb4:	d504      	bpl.n	8011fc0 <arm_sin_f32+0x20>
 8011fb6:	ee17 3a90 	vmov	r3, s15
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	ee07 3a90 	vmov	s15, r3
 8011fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fc4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012024 <arm_sin_f32+0x84>
 8011fc8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011fcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011fd0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011fd4:	ee17 3a10 	vmov	r3, s14
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fde:	d21a      	bcs.n	8012016 <arm_sin_f32+0x76>
 8011fe0:	ee07 3a10 	vmov	s14, r3
 8011fe4:	1c59      	adds	r1, r3, #1
 8011fe6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011fea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011fee:	4a0e      	ldr	r2, [pc, #56]	@ (8012028 <arm_sin_f32+0x88>)
 8011ff0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ff8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011ffc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012000:	edd3 6a00 	vldr	s13, [r3]
 8012004:	ed92 7a00 	vldr	s14, [r2]
 8012008:	ee20 0a26 	vmul.f32	s0, s0, s13
 801200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012010:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012014:	4770      	bx	lr
 8012016:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801201a:	2101      	movs	r1, #1
 801201c:	2300      	movs	r3, #0
 801201e:	e7e6      	b.n	8011fee <arm_sin_f32+0x4e>
 8012020:	3e22f983 	.word	0x3e22f983
 8012024:	44000000 	.word	0x44000000
 8012028:	08016c1c 	.word	0x08016c1c

0801202c <arm_cos_f32>:
 801202c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80120b4 <arm_cos_f32+0x88>
 8012030:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012034:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012038:	ee30 0a07 	vadd.f32	s0, s0, s14
 801203c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012040:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012048:	d504      	bpl.n	8012054 <arm_cos_f32+0x28>
 801204a:	ee17 3a90 	vmov	r3, s15
 801204e:	3b01      	subs	r3, #1
 8012050:	ee07 3a90 	vmov	s15, r3
 8012054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012058:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80120b8 <arm_cos_f32+0x8c>
 801205c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012060:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012064:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012068:	ee17 3a10 	vmov	r3, s14
 801206c:	b29b      	uxth	r3, r3
 801206e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012072:	d21a      	bcs.n	80120aa <arm_cos_f32+0x7e>
 8012074:	ee07 3a10 	vmov	s14, r3
 8012078:	1c59      	adds	r1, r3, #1
 801207a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801207e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012082:	4a0e      	ldr	r2, [pc, #56]	@ (80120bc <arm_cos_f32+0x90>)
 8012084:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801208c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012090:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012094:	edd3 6a00 	vldr	s13, [r3]
 8012098:	ed92 7a00 	vldr	s14, [r2]
 801209c:	ee20 0a26 	vmul.f32	s0, s0, s13
 80120a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80120a8:	4770      	bx	lr
 80120aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80120ae:	2101      	movs	r1, #1
 80120b0:	2300      	movs	r3, #0
 80120b2:	e7e6      	b.n	8012082 <arm_cos_f32+0x56>
 80120b4:	3e22f983 	.word	0x3e22f983
 80120b8:	44000000 	.word	0x44000000
 80120bc:	08016c1c 	.word	0x08016c1c

080120c0 <malloc>:
 80120c0:	4b02      	ldr	r3, [pc, #8]	@ (80120cc <malloc+0xc>)
 80120c2:	4601      	mov	r1, r0
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	f000 b825 	b.w	8012114 <_malloc_r>
 80120ca:	bf00      	nop
 80120cc:	24000138 	.word	0x24000138

080120d0 <sbrk_aligned>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	4e0f      	ldr	r6, [pc, #60]	@ (8012110 <sbrk_aligned+0x40>)
 80120d4:	460c      	mov	r4, r1
 80120d6:	6831      	ldr	r1, [r6, #0]
 80120d8:	4605      	mov	r5, r0
 80120da:	b911      	cbnz	r1, 80120e2 <sbrk_aligned+0x12>
 80120dc:	f000 fe42 	bl	8012d64 <_sbrk_r>
 80120e0:	6030      	str	r0, [r6, #0]
 80120e2:	4621      	mov	r1, r4
 80120e4:	4628      	mov	r0, r5
 80120e6:	f000 fe3d 	bl	8012d64 <_sbrk_r>
 80120ea:	1c43      	adds	r3, r0, #1
 80120ec:	d103      	bne.n	80120f6 <sbrk_aligned+0x26>
 80120ee:	f04f 34ff 	mov.w	r4, #4294967295
 80120f2:	4620      	mov	r0, r4
 80120f4:	bd70      	pop	{r4, r5, r6, pc}
 80120f6:	1cc4      	adds	r4, r0, #3
 80120f8:	f024 0403 	bic.w	r4, r4, #3
 80120fc:	42a0      	cmp	r0, r4
 80120fe:	d0f8      	beq.n	80120f2 <sbrk_aligned+0x22>
 8012100:	1a21      	subs	r1, r4, r0
 8012102:	4628      	mov	r0, r5
 8012104:	f000 fe2e 	bl	8012d64 <_sbrk_r>
 8012108:	3001      	adds	r0, #1
 801210a:	d1f2      	bne.n	80120f2 <sbrk_aligned+0x22>
 801210c:	e7ef      	b.n	80120ee <sbrk_aligned+0x1e>
 801210e:	bf00      	nop
 8012110:	240094f8 	.word	0x240094f8

08012114 <_malloc_r>:
 8012114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012118:	1ccd      	adds	r5, r1, #3
 801211a:	f025 0503 	bic.w	r5, r5, #3
 801211e:	3508      	adds	r5, #8
 8012120:	2d0c      	cmp	r5, #12
 8012122:	bf38      	it	cc
 8012124:	250c      	movcc	r5, #12
 8012126:	2d00      	cmp	r5, #0
 8012128:	4606      	mov	r6, r0
 801212a:	db01      	blt.n	8012130 <_malloc_r+0x1c>
 801212c:	42a9      	cmp	r1, r5
 801212e:	d904      	bls.n	801213a <_malloc_r+0x26>
 8012130:	230c      	movs	r3, #12
 8012132:	6033      	str	r3, [r6, #0]
 8012134:	2000      	movs	r0, #0
 8012136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801213a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012210 <_malloc_r+0xfc>
 801213e:	f000 f869 	bl	8012214 <__malloc_lock>
 8012142:	f8d8 3000 	ldr.w	r3, [r8]
 8012146:	461c      	mov	r4, r3
 8012148:	bb44      	cbnz	r4, 801219c <_malloc_r+0x88>
 801214a:	4629      	mov	r1, r5
 801214c:	4630      	mov	r0, r6
 801214e:	f7ff ffbf 	bl	80120d0 <sbrk_aligned>
 8012152:	1c43      	adds	r3, r0, #1
 8012154:	4604      	mov	r4, r0
 8012156:	d158      	bne.n	801220a <_malloc_r+0xf6>
 8012158:	f8d8 4000 	ldr.w	r4, [r8]
 801215c:	4627      	mov	r7, r4
 801215e:	2f00      	cmp	r7, #0
 8012160:	d143      	bne.n	80121ea <_malloc_r+0xd6>
 8012162:	2c00      	cmp	r4, #0
 8012164:	d04b      	beq.n	80121fe <_malloc_r+0xea>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	4639      	mov	r1, r7
 801216a:	4630      	mov	r0, r6
 801216c:	eb04 0903 	add.w	r9, r4, r3
 8012170:	f000 fdf8 	bl	8012d64 <_sbrk_r>
 8012174:	4581      	cmp	r9, r0
 8012176:	d142      	bne.n	80121fe <_malloc_r+0xea>
 8012178:	6821      	ldr	r1, [r4, #0]
 801217a:	1a6d      	subs	r5, r5, r1
 801217c:	4629      	mov	r1, r5
 801217e:	4630      	mov	r0, r6
 8012180:	f7ff ffa6 	bl	80120d0 <sbrk_aligned>
 8012184:	3001      	adds	r0, #1
 8012186:	d03a      	beq.n	80121fe <_malloc_r+0xea>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	442b      	add	r3, r5
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	f8d8 3000 	ldr.w	r3, [r8]
 8012192:	685a      	ldr	r2, [r3, #4]
 8012194:	bb62      	cbnz	r2, 80121f0 <_malloc_r+0xdc>
 8012196:	f8c8 7000 	str.w	r7, [r8]
 801219a:	e00f      	b.n	80121bc <_malloc_r+0xa8>
 801219c:	6822      	ldr	r2, [r4, #0]
 801219e:	1b52      	subs	r2, r2, r5
 80121a0:	d420      	bmi.n	80121e4 <_malloc_r+0xd0>
 80121a2:	2a0b      	cmp	r2, #11
 80121a4:	d917      	bls.n	80121d6 <_malloc_r+0xc2>
 80121a6:	1961      	adds	r1, r4, r5
 80121a8:	42a3      	cmp	r3, r4
 80121aa:	6025      	str	r5, [r4, #0]
 80121ac:	bf18      	it	ne
 80121ae:	6059      	strne	r1, [r3, #4]
 80121b0:	6863      	ldr	r3, [r4, #4]
 80121b2:	bf08      	it	eq
 80121b4:	f8c8 1000 	streq.w	r1, [r8]
 80121b8:	5162      	str	r2, [r4, r5]
 80121ba:	604b      	str	r3, [r1, #4]
 80121bc:	4630      	mov	r0, r6
 80121be:	f000 f82f 	bl	8012220 <__malloc_unlock>
 80121c2:	f104 000b 	add.w	r0, r4, #11
 80121c6:	1d23      	adds	r3, r4, #4
 80121c8:	f020 0007 	bic.w	r0, r0, #7
 80121cc:	1ac2      	subs	r2, r0, r3
 80121ce:	bf1c      	itt	ne
 80121d0:	1a1b      	subne	r3, r3, r0
 80121d2:	50a3      	strne	r3, [r4, r2]
 80121d4:	e7af      	b.n	8012136 <_malloc_r+0x22>
 80121d6:	6862      	ldr	r2, [r4, #4]
 80121d8:	42a3      	cmp	r3, r4
 80121da:	bf0c      	ite	eq
 80121dc:	f8c8 2000 	streq.w	r2, [r8]
 80121e0:	605a      	strne	r2, [r3, #4]
 80121e2:	e7eb      	b.n	80121bc <_malloc_r+0xa8>
 80121e4:	4623      	mov	r3, r4
 80121e6:	6864      	ldr	r4, [r4, #4]
 80121e8:	e7ae      	b.n	8012148 <_malloc_r+0x34>
 80121ea:	463c      	mov	r4, r7
 80121ec:	687f      	ldr	r7, [r7, #4]
 80121ee:	e7b6      	b.n	801215e <_malloc_r+0x4a>
 80121f0:	461a      	mov	r2, r3
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	42a3      	cmp	r3, r4
 80121f6:	d1fb      	bne.n	80121f0 <_malloc_r+0xdc>
 80121f8:	2300      	movs	r3, #0
 80121fa:	6053      	str	r3, [r2, #4]
 80121fc:	e7de      	b.n	80121bc <_malloc_r+0xa8>
 80121fe:	230c      	movs	r3, #12
 8012200:	6033      	str	r3, [r6, #0]
 8012202:	4630      	mov	r0, r6
 8012204:	f000 f80c 	bl	8012220 <__malloc_unlock>
 8012208:	e794      	b.n	8012134 <_malloc_r+0x20>
 801220a:	6005      	str	r5, [r0, #0]
 801220c:	e7d6      	b.n	80121bc <_malloc_r+0xa8>
 801220e:	bf00      	nop
 8012210:	240094fc 	.word	0x240094fc

08012214 <__malloc_lock>:
 8012214:	4801      	ldr	r0, [pc, #4]	@ (801221c <__malloc_lock+0x8>)
 8012216:	f000 bdf2 	b.w	8012dfe <__retarget_lock_acquire_recursive>
 801221a:	bf00      	nop
 801221c:	24009640 	.word	0x24009640

08012220 <__malloc_unlock>:
 8012220:	4801      	ldr	r0, [pc, #4]	@ (8012228 <__malloc_unlock+0x8>)
 8012222:	f000 bded 	b.w	8012e00 <__retarget_lock_release_recursive>
 8012226:	bf00      	nop
 8012228:	24009640 	.word	0x24009640

0801222c <__cvt>:
 801222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801222e:	ed2d 8b02 	vpush	{d8}
 8012232:	eeb0 8b40 	vmov.f64	d8, d0
 8012236:	b085      	sub	sp, #20
 8012238:	4617      	mov	r7, r2
 801223a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801223c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801223e:	ee18 2a90 	vmov	r2, s17
 8012242:	f025 0520 	bic.w	r5, r5, #32
 8012246:	2a00      	cmp	r2, #0
 8012248:	bfb6      	itet	lt
 801224a:	222d      	movlt	r2, #45	@ 0x2d
 801224c:	2200      	movge	r2, #0
 801224e:	eeb1 8b40 	vneglt.f64	d8, d0
 8012252:	2d46      	cmp	r5, #70	@ 0x46
 8012254:	460c      	mov	r4, r1
 8012256:	701a      	strb	r2, [r3, #0]
 8012258:	d004      	beq.n	8012264 <__cvt+0x38>
 801225a:	2d45      	cmp	r5, #69	@ 0x45
 801225c:	d100      	bne.n	8012260 <__cvt+0x34>
 801225e:	3401      	adds	r4, #1
 8012260:	2102      	movs	r1, #2
 8012262:	e000      	b.n	8012266 <__cvt+0x3a>
 8012264:	2103      	movs	r1, #3
 8012266:	ab03      	add	r3, sp, #12
 8012268:	9301      	str	r3, [sp, #4]
 801226a:	ab02      	add	r3, sp, #8
 801226c:	9300      	str	r3, [sp, #0]
 801226e:	4622      	mov	r2, r4
 8012270:	4633      	mov	r3, r6
 8012272:	eeb0 0b48 	vmov.f64	d0, d8
 8012276:	f000 fe5b 	bl	8012f30 <_dtoa_r>
 801227a:	2d47      	cmp	r5, #71	@ 0x47
 801227c:	d114      	bne.n	80122a8 <__cvt+0x7c>
 801227e:	07fb      	lsls	r3, r7, #31
 8012280:	d50a      	bpl.n	8012298 <__cvt+0x6c>
 8012282:	1902      	adds	r2, r0, r4
 8012284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228c:	bf08      	it	eq
 801228e:	9203      	streq	r2, [sp, #12]
 8012290:	2130      	movs	r1, #48	@ 0x30
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	4293      	cmp	r3, r2
 8012296:	d319      	bcc.n	80122cc <__cvt+0xa0>
 8012298:	9b03      	ldr	r3, [sp, #12]
 801229a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801229c:	1a1b      	subs	r3, r3, r0
 801229e:	6013      	str	r3, [r2, #0]
 80122a0:	b005      	add	sp, #20
 80122a2:	ecbd 8b02 	vpop	{d8}
 80122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a8:	2d46      	cmp	r5, #70	@ 0x46
 80122aa:	eb00 0204 	add.w	r2, r0, r4
 80122ae:	d1e9      	bne.n	8012284 <__cvt+0x58>
 80122b0:	7803      	ldrb	r3, [r0, #0]
 80122b2:	2b30      	cmp	r3, #48	@ 0x30
 80122b4:	d107      	bne.n	80122c6 <__cvt+0x9a>
 80122b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80122ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122be:	bf1c      	itt	ne
 80122c0:	f1c4 0401 	rsbne	r4, r4, #1
 80122c4:	6034      	strne	r4, [r6, #0]
 80122c6:	6833      	ldr	r3, [r6, #0]
 80122c8:	441a      	add	r2, r3
 80122ca:	e7db      	b.n	8012284 <__cvt+0x58>
 80122cc:	1c5c      	adds	r4, r3, #1
 80122ce:	9403      	str	r4, [sp, #12]
 80122d0:	7019      	strb	r1, [r3, #0]
 80122d2:	e7de      	b.n	8012292 <__cvt+0x66>

080122d4 <__exponent>:
 80122d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122d6:	2900      	cmp	r1, #0
 80122d8:	bfba      	itte	lt
 80122da:	4249      	neglt	r1, r1
 80122dc:	232d      	movlt	r3, #45	@ 0x2d
 80122de:	232b      	movge	r3, #43	@ 0x2b
 80122e0:	2909      	cmp	r1, #9
 80122e2:	7002      	strb	r2, [r0, #0]
 80122e4:	7043      	strb	r3, [r0, #1]
 80122e6:	dd29      	ble.n	801233c <__exponent+0x68>
 80122e8:	f10d 0307 	add.w	r3, sp, #7
 80122ec:	461d      	mov	r5, r3
 80122ee:	270a      	movs	r7, #10
 80122f0:	461a      	mov	r2, r3
 80122f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80122f6:	fb07 1416 	mls	r4, r7, r6, r1
 80122fa:	3430      	adds	r4, #48	@ 0x30
 80122fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012300:	460c      	mov	r4, r1
 8012302:	2c63      	cmp	r4, #99	@ 0x63
 8012304:	f103 33ff 	add.w	r3, r3, #4294967295
 8012308:	4631      	mov	r1, r6
 801230a:	dcf1      	bgt.n	80122f0 <__exponent+0x1c>
 801230c:	3130      	adds	r1, #48	@ 0x30
 801230e:	1e94      	subs	r4, r2, #2
 8012310:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012314:	1c41      	adds	r1, r0, #1
 8012316:	4623      	mov	r3, r4
 8012318:	42ab      	cmp	r3, r5
 801231a:	d30a      	bcc.n	8012332 <__exponent+0x5e>
 801231c:	f10d 0309 	add.w	r3, sp, #9
 8012320:	1a9b      	subs	r3, r3, r2
 8012322:	42ac      	cmp	r4, r5
 8012324:	bf88      	it	hi
 8012326:	2300      	movhi	r3, #0
 8012328:	3302      	adds	r3, #2
 801232a:	4403      	add	r3, r0
 801232c:	1a18      	subs	r0, r3, r0
 801232e:	b003      	add	sp, #12
 8012330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012332:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012336:	f801 6f01 	strb.w	r6, [r1, #1]!
 801233a:	e7ed      	b.n	8012318 <__exponent+0x44>
 801233c:	2330      	movs	r3, #48	@ 0x30
 801233e:	3130      	adds	r1, #48	@ 0x30
 8012340:	7083      	strb	r3, [r0, #2]
 8012342:	70c1      	strb	r1, [r0, #3]
 8012344:	1d03      	adds	r3, r0, #4
 8012346:	e7f1      	b.n	801232c <__exponent+0x58>

08012348 <_printf_float>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	b08d      	sub	sp, #52	@ 0x34
 801234e:	460c      	mov	r4, r1
 8012350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012354:	4616      	mov	r6, r2
 8012356:	461f      	mov	r7, r3
 8012358:	4605      	mov	r5, r0
 801235a:	f000 fccb 	bl	8012cf4 <_localeconv_r>
 801235e:	f8d0 b000 	ldr.w	fp, [r0]
 8012362:	4658      	mov	r0, fp
 8012364:	f7ee f80c 	bl	8000380 <strlen>
 8012368:	2300      	movs	r3, #0
 801236a:	930a      	str	r3, [sp, #40]	@ 0x28
 801236c:	f8d8 3000 	ldr.w	r3, [r8]
 8012370:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012374:	6822      	ldr	r2, [r4, #0]
 8012376:	9005      	str	r0, [sp, #20]
 8012378:	3307      	adds	r3, #7
 801237a:	f023 0307 	bic.w	r3, r3, #7
 801237e:	f103 0108 	add.w	r1, r3, #8
 8012382:	f8c8 1000 	str.w	r1, [r8]
 8012386:	ed93 0b00 	vldr	d0, [r3]
 801238a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80125e8 <_printf_float+0x2a0>
 801238e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012392:	eeb4 7b46 	vcmp.f64	d7, d6
 8012396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801239e:	dd24      	ble.n	80123ea <_printf_float+0xa2>
 80123a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80123a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a8:	d502      	bpl.n	80123b0 <_printf_float+0x68>
 80123aa:	232d      	movs	r3, #45	@ 0x2d
 80123ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123b0:	498f      	ldr	r1, [pc, #572]	@ (80125f0 <_printf_float+0x2a8>)
 80123b2:	4b90      	ldr	r3, [pc, #576]	@ (80125f4 <_printf_float+0x2ac>)
 80123b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80123b8:	bf94      	ite	ls
 80123ba:	4688      	movls	r8, r1
 80123bc:	4698      	movhi	r8, r3
 80123be:	f022 0204 	bic.w	r2, r2, #4
 80123c2:	2303      	movs	r3, #3
 80123c4:	6123      	str	r3, [r4, #16]
 80123c6:	6022      	str	r2, [r4, #0]
 80123c8:	f04f 0a00 	mov.w	sl, #0
 80123cc:	9700      	str	r7, [sp, #0]
 80123ce:	4633      	mov	r3, r6
 80123d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80123d2:	4621      	mov	r1, r4
 80123d4:	4628      	mov	r0, r5
 80123d6:	f000 f9d1 	bl	801277c <_printf_common>
 80123da:	3001      	adds	r0, #1
 80123dc:	f040 8089 	bne.w	80124f2 <_printf_float+0x1aa>
 80123e0:	f04f 30ff 	mov.w	r0, #4294967295
 80123e4:	b00d      	add	sp, #52	@ 0x34
 80123e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80123ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f2:	d709      	bvc.n	8012408 <_printf_float+0xc0>
 80123f4:	ee10 3a90 	vmov	r3, s1
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	bfbc      	itt	lt
 80123fc:	232d      	movlt	r3, #45	@ 0x2d
 80123fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012402:	497d      	ldr	r1, [pc, #500]	@ (80125f8 <_printf_float+0x2b0>)
 8012404:	4b7d      	ldr	r3, [pc, #500]	@ (80125fc <_printf_float+0x2b4>)
 8012406:	e7d5      	b.n	80123b4 <_printf_float+0x6c>
 8012408:	6863      	ldr	r3, [r4, #4]
 801240a:	1c59      	adds	r1, r3, #1
 801240c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012410:	d139      	bne.n	8012486 <_printf_float+0x13e>
 8012412:	2306      	movs	r3, #6
 8012414:	6063      	str	r3, [r4, #4]
 8012416:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801241a:	2300      	movs	r3, #0
 801241c:	6022      	str	r2, [r4, #0]
 801241e:	9303      	str	r3, [sp, #12]
 8012420:	ab0a      	add	r3, sp, #40	@ 0x28
 8012422:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012426:	ab09      	add	r3, sp, #36	@ 0x24
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	6861      	ldr	r1, [r4, #4]
 801242c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012430:	4628      	mov	r0, r5
 8012432:	f7ff fefb 	bl	801222c <__cvt>
 8012436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801243a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801243c:	4680      	mov	r8, r0
 801243e:	d129      	bne.n	8012494 <_printf_float+0x14c>
 8012440:	1cc8      	adds	r0, r1, #3
 8012442:	db02      	blt.n	801244a <_printf_float+0x102>
 8012444:	6863      	ldr	r3, [r4, #4]
 8012446:	4299      	cmp	r1, r3
 8012448:	dd41      	ble.n	80124ce <_printf_float+0x186>
 801244a:	f1a9 0902 	sub.w	r9, r9, #2
 801244e:	fa5f f989 	uxtb.w	r9, r9
 8012452:	3901      	subs	r1, #1
 8012454:	464a      	mov	r2, r9
 8012456:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801245a:	9109      	str	r1, [sp, #36]	@ 0x24
 801245c:	f7ff ff3a 	bl	80122d4 <__exponent>
 8012460:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012462:	1813      	adds	r3, r2, r0
 8012464:	2a01      	cmp	r2, #1
 8012466:	4682      	mov	sl, r0
 8012468:	6123      	str	r3, [r4, #16]
 801246a:	dc02      	bgt.n	8012472 <_printf_float+0x12a>
 801246c:	6822      	ldr	r2, [r4, #0]
 801246e:	07d2      	lsls	r2, r2, #31
 8012470:	d501      	bpl.n	8012476 <_printf_float+0x12e>
 8012472:	3301      	adds	r3, #1
 8012474:	6123      	str	r3, [r4, #16]
 8012476:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801247a:	2b00      	cmp	r3, #0
 801247c:	d0a6      	beq.n	80123cc <_printf_float+0x84>
 801247e:	232d      	movs	r3, #45	@ 0x2d
 8012480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012484:	e7a2      	b.n	80123cc <_printf_float+0x84>
 8012486:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801248a:	d1c4      	bne.n	8012416 <_printf_float+0xce>
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1c2      	bne.n	8012416 <_printf_float+0xce>
 8012490:	2301      	movs	r3, #1
 8012492:	e7bf      	b.n	8012414 <_printf_float+0xcc>
 8012494:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012498:	d9db      	bls.n	8012452 <_printf_float+0x10a>
 801249a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801249e:	d118      	bne.n	80124d2 <_printf_float+0x18a>
 80124a0:	2900      	cmp	r1, #0
 80124a2:	6863      	ldr	r3, [r4, #4]
 80124a4:	dd0b      	ble.n	80124be <_printf_float+0x176>
 80124a6:	6121      	str	r1, [r4, #16]
 80124a8:	b913      	cbnz	r3, 80124b0 <_printf_float+0x168>
 80124aa:	6822      	ldr	r2, [r4, #0]
 80124ac:	07d0      	lsls	r0, r2, #31
 80124ae:	d502      	bpl.n	80124b6 <_printf_float+0x16e>
 80124b0:	3301      	adds	r3, #1
 80124b2:	440b      	add	r3, r1
 80124b4:	6123      	str	r3, [r4, #16]
 80124b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80124b8:	f04f 0a00 	mov.w	sl, #0
 80124bc:	e7db      	b.n	8012476 <_printf_float+0x12e>
 80124be:	b913      	cbnz	r3, 80124c6 <_printf_float+0x17e>
 80124c0:	6822      	ldr	r2, [r4, #0]
 80124c2:	07d2      	lsls	r2, r2, #31
 80124c4:	d501      	bpl.n	80124ca <_printf_float+0x182>
 80124c6:	3302      	adds	r3, #2
 80124c8:	e7f4      	b.n	80124b4 <_printf_float+0x16c>
 80124ca:	2301      	movs	r3, #1
 80124cc:	e7f2      	b.n	80124b4 <_printf_float+0x16c>
 80124ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80124d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124d4:	4299      	cmp	r1, r3
 80124d6:	db05      	blt.n	80124e4 <_printf_float+0x19c>
 80124d8:	6823      	ldr	r3, [r4, #0]
 80124da:	6121      	str	r1, [r4, #16]
 80124dc:	07d8      	lsls	r0, r3, #31
 80124de:	d5ea      	bpl.n	80124b6 <_printf_float+0x16e>
 80124e0:	1c4b      	adds	r3, r1, #1
 80124e2:	e7e7      	b.n	80124b4 <_printf_float+0x16c>
 80124e4:	2900      	cmp	r1, #0
 80124e6:	bfd4      	ite	le
 80124e8:	f1c1 0202 	rsble	r2, r1, #2
 80124ec:	2201      	movgt	r2, #1
 80124ee:	4413      	add	r3, r2
 80124f0:	e7e0      	b.n	80124b4 <_printf_float+0x16c>
 80124f2:	6823      	ldr	r3, [r4, #0]
 80124f4:	055a      	lsls	r2, r3, #21
 80124f6:	d407      	bmi.n	8012508 <_printf_float+0x1c0>
 80124f8:	6923      	ldr	r3, [r4, #16]
 80124fa:	4642      	mov	r2, r8
 80124fc:	4631      	mov	r1, r6
 80124fe:	4628      	mov	r0, r5
 8012500:	47b8      	blx	r7
 8012502:	3001      	adds	r0, #1
 8012504:	d12a      	bne.n	801255c <_printf_float+0x214>
 8012506:	e76b      	b.n	80123e0 <_printf_float+0x98>
 8012508:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801250c:	f240 80e0 	bls.w	80126d0 <_printf_float+0x388>
 8012510:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012514:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801251c:	d133      	bne.n	8012586 <_printf_float+0x23e>
 801251e:	4a38      	ldr	r2, [pc, #224]	@ (8012600 <_printf_float+0x2b8>)
 8012520:	2301      	movs	r3, #1
 8012522:	4631      	mov	r1, r6
 8012524:	4628      	mov	r0, r5
 8012526:	47b8      	blx	r7
 8012528:	3001      	adds	r0, #1
 801252a:	f43f af59 	beq.w	80123e0 <_printf_float+0x98>
 801252e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012532:	4543      	cmp	r3, r8
 8012534:	db02      	blt.n	801253c <_printf_float+0x1f4>
 8012536:	6823      	ldr	r3, [r4, #0]
 8012538:	07d8      	lsls	r0, r3, #31
 801253a:	d50f      	bpl.n	801255c <_printf_float+0x214>
 801253c:	9b05      	ldr	r3, [sp, #20]
 801253e:	465a      	mov	r2, fp
 8012540:	4631      	mov	r1, r6
 8012542:	4628      	mov	r0, r5
 8012544:	47b8      	blx	r7
 8012546:	3001      	adds	r0, #1
 8012548:	f43f af4a 	beq.w	80123e0 <_printf_float+0x98>
 801254c:	f04f 0900 	mov.w	r9, #0
 8012550:	f108 38ff 	add.w	r8, r8, #4294967295
 8012554:	f104 0a1a 	add.w	sl, r4, #26
 8012558:	45c8      	cmp	r8, r9
 801255a:	dc09      	bgt.n	8012570 <_printf_float+0x228>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	079b      	lsls	r3, r3, #30
 8012560:	f100 8107 	bmi.w	8012772 <_printf_float+0x42a>
 8012564:	68e0      	ldr	r0, [r4, #12]
 8012566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012568:	4298      	cmp	r0, r3
 801256a:	bfb8      	it	lt
 801256c:	4618      	movlt	r0, r3
 801256e:	e739      	b.n	80123e4 <_printf_float+0x9c>
 8012570:	2301      	movs	r3, #1
 8012572:	4652      	mov	r2, sl
 8012574:	4631      	mov	r1, r6
 8012576:	4628      	mov	r0, r5
 8012578:	47b8      	blx	r7
 801257a:	3001      	adds	r0, #1
 801257c:	f43f af30 	beq.w	80123e0 <_printf_float+0x98>
 8012580:	f109 0901 	add.w	r9, r9, #1
 8012584:	e7e8      	b.n	8012558 <_printf_float+0x210>
 8012586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012588:	2b00      	cmp	r3, #0
 801258a:	dc3b      	bgt.n	8012604 <_printf_float+0x2bc>
 801258c:	4a1c      	ldr	r2, [pc, #112]	@ (8012600 <_printf_float+0x2b8>)
 801258e:	2301      	movs	r3, #1
 8012590:	4631      	mov	r1, r6
 8012592:	4628      	mov	r0, r5
 8012594:	47b8      	blx	r7
 8012596:	3001      	adds	r0, #1
 8012598:	f43f af22 	beq.w	80123e0 <_printf_float+0x98>
 801259c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80125a0:	ea59 0303 	orrs.w	r3, r9, r3
 80125a4:	d102      	bne.n	80125ac <_printf_float+0x264>
 80125a6:	6823      	ldr	r3, [r4, #0]
 80125a8:	07d9      	lsls	r1, r3, #31
 80125aa:	d5d7      	bpl.n	801255c <_printf_float+0x214>
 80125ac:	9b05      	ldr	r3, [sp, #20]
 80125ae:	465a      	mov	r2, fp
 80125b0:	4631      	mov	r1, r6
 80125b2:	4628      	mov	r0, r5
 80125b4:	47b8      	blx	r7
 80125b6:	3001      	adds	r0, #1
 80125b8:	f43f af12 	beq.w	80123e0 <_printf_float+0x98>
 80125bc:	f04f 0a00 	mov.w	sl, #0
 80125c0:	f104 0b1a 	add.w	fp, r4, #26
 80125c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125c6:	425b      	negs	r3, r3
 80125c8:	4553      	cmp	r3, sl
 80125ca:	dc01      	bgt.n	80125d0 <_printf_float+0x288>
 80125cc:	464b      	mov	r3, r9
 80125ce:	e794      	b.n	80124fa <_printf_float+0x1b2>
 80125d0:	2301      	movs	r3, #1
 80125d2:	465a      	mov	r2, fp
 80125d4:	4631      	mov	r1, r6
 80125d6:	4628      	mov	r0, r5
 80125d8:	47b8      	blx	r7
 80125da:	3001      	adds	r0, #1
 80125dc:	f43f af00 	beq.w	80123e0 <_printf_float+0x98>
 80125e0:	f10a 0a01 	add.w	sl, sl, #1
 80125e4:	e7ee      	b.n	80125c4 <_printf_float+0x27c>
 80125e6:	bf00      	nop
 80125e8:	ffffffff 	.word	0xffffffff
 80125ec:	7fefffff 	.word	0x7fefffff
 80125f0:	08017420 	.word	0x08017420
 80125f4:	08017424 	.word	0x08017424
 80125f8:	08017428 	.word	0x08017428
 80125fc:	0801742c 	.word	0x0801742c
 8012600:	08017430 	.word	0x08017430
 8012604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012606:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801260a:	4553      	cmp	r3, sl
 801260c:	bfa8      	it	ge
 801260e:	4653      	movge	r3, sl
 8012610:	2b00      	cmp	r3, #0
 8012612:	4699      	mov	r9, r3
 8012614:	dc37      	bgt.n	8012686 <_printf_float+0x33e>
 8012616:	2300      	movs	r3, #0
 8012618:	9307      	str	r3, [sp, #28]
 801261a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801261e:	f104 021a 	add.w	r2, r4, #26
 8012622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012624:	9907      	ldr	r1, [sp, #28]
 8012626:	9306      	str	r3, [sp, #24]
 8012628:	eba3 0309 	sub.w	r3, r3, r9
 801262c:	428b      	cmp	r3, r1
 801262e:	dc31      	bgt.n	8012694 <_printf_float+0x34c>
 8012630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012632:	459a      	cmp	sl, r3
 8012634:	dc3b      	bgt.n	80126ae <_printf_float+0x366>
 8012636:	6823      	ldr	r3, [r4, #0]
 8012638:	07da      	lsls	r2, r3, #31
 801263a:	d438      	bmi.n	80126ae <_printf_float+0x366>
 801263c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801263e:	ebaa 0903 	sub.w	r9, sl, r3
 8012642:	9b06      	ldr	r3, [sp, #24]
 8012644:	ebaa 0303 	sub.w	r3, sl, r3
 8012648:	4599      	cmp	r9, r3
 801264a:	bfa8      	it	ge
 801264c:	4699      	movge	r9, r3
 801264e:	f1b9 0f00 	cmp.w	r9, #0
 8012652:	dc34      	bgt.n	80126be <_printf_float+0x376>
 8012654:	f04f 0800 	mov.w	r8, #0
 8012658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801265c:	f104 0b1a 	add.w	fp, r4, #26
 8012660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012662:	ebaa 0303 	sub.w	r3, sl, r3
 8012666:	eba3 0309 	sub.w	r3, r3, r9
 801266a:	4543      	cmp	r3, r8
 801266c:	f77f af76 	ble.w	801255c <_printf_float+0x214>
 8012670:	2301      	movs	r3, #1
 8012672:	465a      	mov	r2, fp
 8012674:	4631      	mov	r1, r6
 8012676:	4628      	mov	r0, r5
 8012678:	47b8      	blx	r7
 801267a:	3001      	adds	r0, #1
 801267c:	f43f aeb0 	beq.w	80123e0 <_printf_float+0x98>
 8012680:	f108 0801 	add.w	r8, r8, #1
 8012684:	e7ec      	b.n	8012660 <_printf_float+0x318>
 8012686:	4642      	mov	r2, r8
 8012688:	4631      	mov	r1, r6
 801268a:	4628      	mov	r0, r5
 801268c:	47b8      	blx	r7
 801268e:	3001      	adds	r0, #1
 8012690:	d1c1      	bne.n	8012616 <_printf_float+0x2ce>
 8012692:	e6a5      	b.n	80123e0 <_printf_float+0x98>
 8012694:	2301      	movs	r3, #1
 8012696:	4631      	mov	r1, r6
 8012698:	4628      	mov	r0, r5
 801269a:	9206      	str	r2, [sp, #24]
 801269c:	47b8      	blx	r7
 801269e:	3001      	adds	r0, #1
 80126a0:	f43f ae9e 	beq.w	80123e0 <_printf_float+0x98>
 80126a4:	9b07      	ldr	r3, [sp, #28]
 80126a6:	9a06      	ldr	r2, [sp, #24]
 80126a8:	3301      	adds	r3, #1
 80126aa:	9307      	str	r3, [sp, #28]
 80126ac:	e7b9      	b.n	8012622 <_printf_float+0x2da>
 80126ae:	9b05      	ldr	r3, [sp, #20]
 80126b0:	465a      	mov	r2, fp
 80126b2:	4631      	mov	r1, r6
 80126b4:	4628      	mov	r0, r5
 80126b6:	47b8      	blx	r7
 80126b8:	3001      	adds	r0, #1
 80126ba:	d1bf      	bne.n	801263c <_printf_float+0x2f4>
 80126bc:	e690      	b.n	80123e0 <_printf_float+0x98>
 80126be:	9a06      	ldr	r2, [sp, #24]
 80126c0:	464b      	mov	r3, r9
 80126c2:	4442      	add	r2, r8
 80126c4:	4631      	mov	r1, r6
 80126c6:	4628      	mov	r0, r5
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	d1c2      	bne.n	8012654 <_printf_float+0x30c>
 80126ce:	e687      	b.n	80123e0 <_printf_float+0x98>
 80126d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80126d4:	f1b9 0f01 	cmp.w	r9, #1
 80126d8:	dc01      	bgt.n	80126de <_printf_float+0x396>
 80126da:	07db      	lsls	r3, r3, #31
 80126dc:	d536      	bpl.n	801274c <_printf_float+0x404>
 80126de:	2301      	movs	r3, #1
 80126e0:	4642      	mov	r2, r8
 80126e2:	4631      	mov	r1, r6
 80126e4:	4628      	mov	r0, r5
 80126e6:	47b8      	blx	r7
 80126e8:	3001      	adds	r0, #1
 80126ea:	f43f ae79 	beq.w	80123e0 <_printf_float+0x98>
 80126ee:	9b05      	ldr	r3, [sp, #20]
 80126f0:	465a      	mov	r2, fp
 80126f2:	4631      	mov	r1, r6
 80126f4:	4628      	mov	r0, r5
 80126f6:	47b8      	blx	r7
 80126f8:	3001      	adds	r0, #1
 80126fa:	f43f ae71 	beq.w	80123e0 <_printf_float+0x98>
 80126fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012702:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801270a:	f109 39ff 	add.w	r9, r9, #4294967295
 801270e:	d018      	beq.n	8012742 <_printf_float+0x3fa>
 8012710:	464b      	mov	r3, r9
 8012712:	f108 0201 	add.w	r2, r8, #1
 8012716:	4631      	mov	r1, r6
 8012718:	4628      	mov	r0, r5
 801271a:	47b8      	blx	r7
 801271c:	3001      	adds	r0, #1
 801271e:	d10c      	bne.n	801273a <_printf_float+0x3f2>
 8012720:	e65e      	b.n	80123e0 <_printf_float+0x98>
 8012722:	2301      	movs	r3, #1
 8012724:	465a      	mov	r2, fp
 8012726:	4631      	mov	r1, r6
 8012728:	4628      	mov	r0, r5
 801272a:	47b8      	blx	r7
 801272c:	3001      	adds	r0, #1
 801272e:	f43f ae57 	beq.w	80123e0 <_printf_float+0x98>
 8012732:	f108 0801 	add.w	r8, r8, #1
 8012736:	45c8      	cmp	r8, r9
 8012738:	dbf3      	blt.n	8012722 <_printf_float+0x3da>
 801273a:	4653      	mov	r3, sl
 801273c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012740:	e6dc      	b.n	80124fc <_printf_float+0x1b4>
 8012742:	f04f 0800 	mov.w	r8, #0
 8012746:	f104 0b1a 	add.w	fp, r4, #26
 801274a:	e7f4      	b.n	8012736 <_printf_float+0x3ee>
 801274c:	2301      	movs	r3, #1
 801274e:	4642      	mov	r2, r8
 8012750:	e7e1      	b.n	8012716 <_printf_float+0x3ce>
 8012752:	2301      	movs	r3, #1
 8012754:	464a      	mov	r2, r9
 8012756:	4631      	mov	r1, r6
 8012758:	4628      	mov	r0, r5
 801275a:	47b8      	blx	r7
 801275c:	3001      	adds	r0, #1
 801275e:	f43f ae3f 	beq.w	80123e0 <_printf_float+0x98>
 8012762:	f108 0801 	add.w	r8, r8, #1
 8012766:	68e3      	ldr	r3, [r4, #12]
 8012768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801276a:	1a5b      	subs	r3, r3, r1
 801276c:	4543      	cmp	r3, r8
 801276e:	dcf0      	bgt.n	8012752 <_printf_float+0x40a>
 8012770:	e6f8      	b.n	8012564 <_printf_float+0x21c>
 8012772:	f04f 0800 	mov.w	r8, #0
 8012776:	f104 0919 	add.w	r9, r4, #25
 801277a:	e7f4      	b.n	8012766 <_printf_float+0x41e>

0801277c <_printf_common>:
 801277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012780:	4616      	mov	r6, r2
 8012782:	4698      	mov	r8, r3
 8012784:	688a      	ldr	r2, [r1, #8]
 8012786:	690b      	ldr	r3, [r1, #16]
 8012788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801278c:	4293      	cmp	r3, r2
 801278e:	bfb8      	it	lt
 8012790:	4613      	movlt	r3, r2
 8012792:	6033      	str	r3, [r6, #0]
 8012794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012798:	4607      	mov	r7, r0
 801279a:	460c      	mov	r4, r1
 801279c:	b10a      	cbz	r2, 80127a2 <_printf_common+0x26>
 801279e:	3301      	adds	r3, #1
 80127a0:	6033      	str	r3, [r6, #0]
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	0699      	lsls	r1, r3, #26
 80127a6:	bf42      	ittt	mi
 80127a8:	6833      	ldrmi	r3, [r6, #0]
 80127aa:	3302      	addmi	r3, #2
 80127ac:	6033      	strmi	r3, [r6, #0]
 80127ae:	6825      	ldr	r5, [r4, #0]
 80127b0:	f015 0506 	ands.w	r5, r5, #6
 80127b4:	d106      	bne.n	80127c4 <_printf_common+0x48>
 80127b6:	f104 0a19 	add.w	sl, r4, #25
 80127ba:	68e3      	ldr	r3, [r4, #12]
 80127bc:	6832      	ldr	r2, [r6, #0]
 80127be:	1a9b      	subs	r3, r3, r2
 80127c0:	42ab      	cmp	r3, r5
 80127c2:	dc26      	bgt.n	8012812 <_printf_common+0x96>
 80127c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80127c8:	6822      	ldr	r2, [r4, #0]
 80127ca:	3b00      	subs	r3, #0
 80127cc:	bf18      	it	ne
 80127ce:	2301      	movne	r3, #1
 80127d0:	0692      	lsls	r2, r2, #26
 80127d2:	d42b      	bmi.n	801282c <_printf_common+0xb0>
 80127d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80127d8:	4641      	mov	r1, r8
 80127da:	4638      	mov	r0, r7
 80127dc:	47c8      	blx	r9
 80127de:	3001      	adds	r0, #1
 80127e0:	d01e      	beq.n	8012820 <_printf_common+0xa4>
 80127e2:	6823      	ldr	r3, [r4, #0]
 80127e4:	6922      	ldr	r2, [r4, #16]
 80127e6:	f003 0306 	and.w	r3, r3, #6
 80127ea:	2b04      	cmp	r3, #4
 80127ec:	bf02      	ittt	eq
 80127ee:	68e5      	ldreq	r5, [r4, #12]
 80127f0:	6833      	ldreq	r3, [r6, #0]
 80127f2:	1aed      	subeq	r5, r5, r3
 80127f4:	68a3      	ldr	r3, [r4, #8]
 80127f6:	bf0c      	ite	eq
 80127f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127fc:	2500      	movne	r5, #0
 80127fe:	4293      	cmp	r3, r2
 8012800:	bfc4      	itt	gt
 8012802:	1a9b      	subgt	r3, r3, r2
 8012804:	18ed      	addgt	r5, r5, r3
 8012806:	2600      	movs	r6, #0
 8012808:	341a      	adds	r4, #26
 801280a:	42b5      	cmp	r5, r6
 801280c:	d11a      	bne.n	8012844 <_printf_common+0xc8>
 801280e:	2000      	movs	r0, #0
 8012810:	e008      	b.n	8012824 <_printf_common+0xa8>
 8012812:	2301      	movs	r3, #1
 8012814:	4652      	mov	r2, sl
 8012816:	4641      	mov	r1, r8
 8012818:	4638      	mov	r0, r7
 801281a:	47c8      	blx	r9
 801281c:	3001      	adds	r0, #1
 801281e:	d103      	bne.n	8012828 <_printf_common+0xac>
 8012820:	f04f 30ff 	mov.w	r0, #4294967295
 8012824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012828:	3501      	adds	r5, #1
 801282a:	e7c6      	b.n	80127ba <_printf_common+0x3e>
 801282c:	18e1      	adds	r1, r4, r3
 801282e:	1c5a      	adds	r2, r3, #1
 8012830:	2030      	movs	r0, #48	@ 0x30
 8012832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012836:	4422      	add	r2, r4
 8012838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801283c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012840:	3302      	adds	r3, #2
 8012842:	e7c7      	b.n	80127d4 <_printf_common+0x58>
 8012844:	2301      	movs	r3, #1
 8012846:	4622      	mov	r2, r4
 8012848:	4641      	mov	r1, r8
 801284a:	4638      	mov	r0, r7
 801284c:	47c8      	blx	r9
 801284e:	3001      	adds	r0, #1
 8012850:	d0e6      	beq.n	8012820 <_printf_common+0xa4>
 8012852:	3601      	adds	r6, #1
 8012854:	e7d9      	b.n	801280a <_printf_common+0x8e>
	...

08012858 <_printf_i>:
 8012858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801285c:	7e0f      	ldrb	r7, [r1, #24]
 801285e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012860:	2f78      	cmp	r7, #120	@ 0x78
 8012862:	4691      	mov	r9, r2
 8012864:	4680      	mov	r8, r0
 8012866:	460c      	mov	r4, r1
 8012868:	469a      	mov	sl, r3
 801286a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801286e:	d807      	bhi.n	8012880 <_printf_i+0x28>
 8012870:	2f62      	cmp	r7, #98	@ 0x62
 8012872:	d80a      	bhi.n	801288a <_printf_i+0x32>
 8012874:	2f00      	cmp	r7, #0
 8012876:	f000 80d2 	beq.w	8012a1e <_printf_i+0x1c6>
 801287a:	2f58      	cmp	r7, #88	@ 0x58
 801287c:	f000 80b9 	beq.w	80129f2 <_printf_i+0x19a>
 8012880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012888:	e03a      	b.n	8012900 <_printf_i+0xa8>
 801288a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801288e:	2b15      	cmp	r3, #21
 8012890:	d8f6      	bhi.n	8012880 <_printf_i+0x28>
 8012892:	a101      	add	r1, pc, #4	@ (adr r1, 8012898 <_printf_i+0x40>)
 8012894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012898:	080128f1 	.word	0x080128f1
 801289c:	08012905 	.word	0x08012905
 80128a0:	08012881 	.word	0x08012881
 80128a4:	08012881 	.word	0x08012881
 80128a8:	08012881 	.word	0x08012881
 80128ac:	08012881 	.word	0x08012881
 80128b0:	08012905 	.word	0x08012905
 80128b4:	08012881 	.word	0x08012881
 80128b8:	08012881 	.word	0x08012881
 80128bc:	08012881 	.word	0x08012881
 80128c0:	08012881 	.word	0x08012881
 80128c4:	08012a05 	.word	0x08012a05
 80128c8:	0801292f 	.word	0x0801292f
 80128cc:	080129bf 	.word	0x080129bf
 80128d0:	08012881 	.word	0x08012881
 80128d4:	08012881 	.word	0x08012881
 80128d8:	08012a27 	.word	0x08012a27
 80128dc:	08012881 	.word	0x08012881
 80128e0:	0801292f 	.word	0x0801292f
 80128e4:	08012881 	.word	0x08012881
 80128e8:	08012881 	.word	0x08012881
 80128ec:	080129c7 	.word	0x080129c7
 80128f0:	6833      	ldr	r3, [r6, #0]
 80128f2:	1d1a      	adds	r2, r3, #4
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6032      	str	r2, [r6, #0]
 80128f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012900:	2301      	movs	r3, #1
 8012902:	e09d      	b.n	8012a40 <_printf_i+0x1e8>
 8012904:	6833      	ldr	r3, [r6, #0]
 8012906:	6820      	ldr	r0, [r4, #0]
 8012908:	1d19      	adds	r1, r3, #4
 801290a:	6031      	str	r1, [r6, #0]
 801290c:	0606      	lsls	r6, r0, #24
 801290e:	d501      	bpl.n	8012914 <_printf_i+0xbc>
 8012910:	681d      	ldr	r5, [r3, #0]
 8012912:	e003      	b.n	801291c <_printf_i+0xc4>
 8012914:	0645      	lsls	r5, r0, #25
 8012916:	d5fb      	bpl.n	8012910 <_printf_i+0xb8>
 8012918:	f9b3 5000 	ldrsh.w	r5, [r3]
 801291c:	2d00      	cmp	r5, #0
 801291e:	da03      	bge.n	8012928 <_printf_i+0xd0>
 8012920:	232d      	movs	r3, #45	@ 0x2d
 8012922:	426d      	negs	r5, r5
 8012924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012928:	4859      	ldr	r0, [pc, #356]	@ (8012a90 <_printf_i+0x238>)
 801292a:	230a      	movs	r3, #10
 801292c:	e011      	b.n	8012952 <_printf_i+0xfa>
 801292e:	6821      	ldr	r1, [r4, #0]
 8012930:	6833      	ldr	r3, [r6, #0]
 8012932:	0608      	lsls	r0, r1, #24
 8012934:	f853 5b04 	ldr.w	r5, [r3], #4
 8012938:	d402      	bmi.n	8012940 <_printf_i+0xe8>
 801293a:	0649      	lsls	r1, r1, #25
 801293c:	bf48      	it	mi
 801293e:	b2ad      	uxthmi	r5, r5
 8012940:	2f6f      	cmp	r7, #111	@ 0x6f
 8012942:	4853      	ldr	r0, [pc, #332]	@ (8012a90 <_printf_i+0x238>)
 8012944:	6033      	str	r3, [r6, #0]
 8012946:	bf14      	ite	ne
 8012948:	230a      	movne	r3, #10
 801294a:	2308      	moveq	r3, #8
 801294c:	2100      	movs	r1, #0
 801294e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012952:	6866      	ldr	r6, [r4, #4]
 8012954:	60a6      	str	r6, [r4, #8]
 8012956:	2e00      	cmp	r6, #0
 8012958:	bfa2      	ittt	ge
 801295a:	6821      	ldrge	r1, [r4, #0]
 801295c:	f021 0104 	bicge.w	r1, r1, #4
 8012960:	6021      	strge	r1, [r4, #0]
 8012962:	b90d      	cbnz	r5, 8012968 <_printf_i+0x110>
 8012964:	2e00      	cmp	r6, #0
 8012966:	d04b      	beq.n	8012a00 <_printf_i+0x1a8>
 8012968:	4616      	mov	r6, r2
 801296a:	fbb5 f1f3 	udiv	r1, r5, r3
 801296e:	fb03 5711 	mls	r7, r3, r1, r5
 8012972:	5dc7      	ldrb	r7, [r0, r7]
 8012974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012978:	462f      	mov	r7, r5
 801297a:	42bb      	cmp	r3, r7
 801297c:	460d      	mov	r5, r1
 801297e:	d9f4      	bls.n	801296a <_printf_i+0x112>
 8012980:	2b08      	cmp	r3, #8
 8012982:	d10b      	bne.n	801299c <_printf_i+0x144>
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	07df      	lsls	r7, r3, #31
 8012988:	d508      	bpl.n	801299c <_printf_i+0x144>
 801298a:	6923      	ldr	r3, [r4, #16]
 801298c:	6861      	ldr	r1, [r4, #4]
 801298e:	4299      	cmp	r1, r3
 8012990:	bfde      	ittt	le
 8012992:	2330      	movle	r3, #48	@ 0x30
 8012994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012998:	f106 36ff 	addle.w	r6, r6, #4294967295
 801299c:	1b92      	subs	r2, r2, r6
 801299e:	6122      	str	r2, [r4, #16]
 80129a0:	f8cd a000 	str.w	sl, [sp]
 80129a4:	464b      	mov	r3, r9
 80129a6:	aa03      	add	r2, sp, #12
 80129a8:	4621      	mov	r1, r4
 80129aa:	4640      	mov	r0, r8
 80129ac:	f7ff fee6 	bl	801277c <_printf_common>
 80129b0:	3001      	adds	r0, #1
 80129b2:	d14a      	bne.n	8012a4a <_printf_i+0x1f2>
 80129b4:	f04f 30ff 	mov.w	r0, #4294967295
 80129b8:	b004      	add	sp, #16
 80129ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129be:	6823      	ldr	r3, [r4, #0]
 80129c0:	f043 0320 	orr.w	r3, r3, #32
 80129c4:	6023      	str	r3, [r4, #0]
 80129c6:	4833      	ldr	r0, [pc, #204]	@ (8012a94 <_printf_i+0x23c>)
 80129c8:	2778      	movs	r7, #120	@ 0x78
 80129ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	6831      	ldr	r1, [r6, #0]
 80129d2:	061f      	lsls	r7, r3, #24
 80129d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80129d8:	d402      	bmi.n	80129e0 <_printf_i+0x188>
 80129da:	065f      	lsls	r7, r3, #25
 80129dc:	bf48      	it	mi
 80129de:	b2ad      	uxthmi	r5, r5
 80129e0:	6031      	str	r1, [r6, #0]
 80129e2:	07d9      	lsls	r1, r3, #31
 80129e4:	bf44      	itt	mi
 80129e6:	f043 0320 	orrmi.w	r3, r3, #32
 80129ea:	6023      	strmi	r3, [r4, #0]
 80129ec:	b11d      	cbz	r5, 80129f6 <_printf_i+0x19e>
 80129ee:	2310      	movs	r3, #16
 80129f0:	e7ac      	b.n	801294c <_printf_i+0xf4>
 80129f2:	4827      	ldr	r0, [pc, #156]	@ (8012a90 <_printf_i+0x238>)
 80129f4:	e7e9      	b.n	80129ca <_printf_i+0x172>
 80129f6:	6823      	ldr	r3, [r4, #0]
 80129f8:	f023 0320 	bic.w	r3, r3, #32
 80129fc:	6023      	str	r3, [r4, #0]
 80129fe:	e7f6      	b.n	80129ee <_printf_i+0x196>
 8012a00:	4616      	mov	r6, r2
 8012a02:	e7bd      	b.n	8012980 <_printf_i+0x128>
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	6825      	ldr	r5, [r4, #0]
 8012a08:	6961      	ldr	r1, [r4, #20]
 8012a0a:	1d18      	adds	r0, r3, #4
 8012a0c:	6030      	str	r0, [r6, #0]
 8012a0e:	062e      	lsls	r6, r5, #24
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	d501      	bpl.n	8012a18 <_printf_i+0x1c0>
 8012a14:	6019      	str	r1, [r3, #0]
 8012a16:	e002      	b.n	8012a1e <_printf_i+0x1c6>
 8012a18:	0668      	lsls	r0, r5, #25
 8012a1a:	d5fb      	bpl.n	8012a14 <_printf_i+0x1bc>
 8012a1c:	8019      	strh	r1, [r3, #0]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	6123      	str	r3, [r4, #16]
 8012a22:	4616      	mov	r6, r2
 8012a24:	e7bc      	b.n	80129a0 <_printf_i+0x148>
 8012a26:	6833      	ldr	r3, [r6, #0]
 8012a28:	1d1a      	adds	r2, r3, #4
 8012a2a:	6032      	str	r2, [r6, #0]
 8012a2c:	681e      	ldr	r6, [r3, #0]
 8012a2e:	6862      	ldr	r2, [r4, #4]
 8012a30:	2100      	movs	r1, #0
 8012a32:	4630      	mov	r0, r6
 8012a34:	f7ed fc54 	bl	80002e0 <memchr>
 8012a38:	b108      	cbz	r0, 8012a3e <_printf_i+0x1e6>
 8012a3a:	1b80      	subs	r0, r0, r6
 8012a3c:	6060      	str	r0, [r4, #4]
 8012a3e:	6863      	ldr	r3, [r4, #4]
 8012a40:	6123      	str	r3, [r4, #16]
 8012a42:	2300      	movs	r3, #0
 8012a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a48:	e7aa      	b.n	80129a0 <_printf_i+0x148>
 8012a4a:	6923      	ldr	r3, [r4, #16]
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	4649      	mov	r1, r9
 8012a50:	4640      	mov	r0, r8
 8012a52:	47d0      	blx	sl
 8012a54:	3001      	adds	r0, #1
 8012a56:	d0ad      	beq.n	80129b4 <_printf_i+0x15c>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	079b      	lsls	r3, r3, #30
 8012a5c:	d413      	bmi.n	8012a86 <_printf_i+0x22e>
 8012a5e:	68e0      	ldr	r0, [r4, #12]
 8012a60:	9b03      	ldr	r3, [sp, #12]
 8012a62:	4298      	cmp	r0, r3
 8012a64:	bfb8      	it	lt
 8012a66:	4618      	movlt	r0, r3
 8012a68:	e7a6      	b.n	80129b8 <_printf_i+0x160>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	4632      	mov	r2, r6
 8012a6e:	4649      	mov	r1, r9
 8012a70:	4640      	mov	r0, r8
 8012a72:	47d0      	blx	sl
 8012a74:	3001      	adds	r0, #1
 8012a76:	d09d      	beq.n	80129b4 <_printf_i+0x15c>
 8012a78:	3501      	adds	r5, #1
 8012a7a:	68e3      	ldr	r3, [r4, #12]
 8012a7c:	9903      	ldr	r1, [sp, #12]
 8012a7e:	1a5b      	subs	r3, r3, r1
 8012a80:	42ab      	cmp	r3, r5
 8012a82:	dcf2      	bgt.n	8012a6a <_printf_i+0x212>
 8012a84:	e7eb      	b.n	8012a5e <_printf_i+0x206>
 8012a86:	2500      	movs	r5, #0
 8012a88:	f104 0619 	add.w	r6, r4, #25
 8012a8c:	e7f5      	b.n	8012a7a <_printf_i+0x222>
 8012a8e:	bf00      	nop
 8012a90:	08017432 	.word	0x08017432
 8012a94:	08017443 	.word	0x08017443

08012a98 <std>:
 8012a98:	2300      	movs	r3, #0
 8012a9a:	b510      	push	{r4, lr}
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8012aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012aa6:	6083      	str	r3, [r0, #8]
 8012aa8:	8181      	strh	r1, [r0, #12]
 8012aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8012aac:	81c2      	strh	r2, [r0, #14]
 8012aae:	6183      	str	r3, [r0, #24]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	2208      	movs	r2, #8
 8012ab4:	305c      	adds	r0, #92	@ 0x5c
 8012ab6:	f000 f914 	bl	8012ce2 <memset>
 8012aba:	4b0d      	ldr	r3, [pc, #52]	@ (8012af0 <std+0x58>)
 8012abc:	6263      	str	r3, [r4, #36]	@ 0x24
 8012abe:	4b0d      	ldr	r3, [pc, #52]	@ (8012af4 <std+0x5c>)
 8012ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8012af8 <std+0x60>)
 8012ac4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8012afc <std+0x64>)
 8012ac8:	6323      	str	r3, [r4, #48]	@ 0x30
 8012aca:	4b0d      	ldr	r3, [pc, #52]	@ (8012b00 <std+0x68>)
 8012acc:	6224      	str	r4, [r4, #32]
 8012ace:	429c      	cmp	r4, r3
 8012ad0:	d006      	beq.n	8012ae0 <std+0x48>
 8012ad2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012ad6:	4294      	cmp	r4, r2
 8012ad8:	d002      	beq.n	8012ae0 <std+0x48>
 8012ada:	33d0      	adds	r3, #208	@ 0xd0
 8012adc:	429c      	cmp	r4, r3
 8012ade:	d105      	bne.n	8012aec <std+0x54>
 8012ae0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ae8:	f000 b988 	b.w	8012dfc <__retarget_lock_init_recursive>
 8012aec:	bd10      	pop	{r4, pc}
 8012aee:	bf00      	nop
 8012af0:	08012c5d 	.word	0x08012c5d
 8012af4:	08012c7f 	.word	0x08012c7f
 8012af8:	08012cb7 	.word	0x08012cb7
 8012afc:	08012cdb 	.word	0x08012cdb
 8012b00:	24009500 	.word	0x24009500

08012b04 <stdio_exit_handler>:
 8012b04:	4a02      	ldr	r2, [pc, #8]	@ (8012b10 <stdio_exit_handler+0xc>)
 8012b06:	4903      	ldr	r1, [pc, #12]	@ (8012b14 <stdio_exit_handler+0x10>)
 8012b08:	4803      	ldr	r0, [pc, #12]	@ (8012b18 <stdio_exit_handler+0x14>)
 8012b0a:	f000 b869 	b.w	8012be0 <_fwalk_sglue>
 8012b0e:	bf00      	nop
 8012b10:	2400012c 	.word	0x2400012c
 8012b14:	0801452d 	.word	0x0801452d
 8012b18:	2400013c 	.word	0x2400013c

08012b1c <cleanup_stdio>:
 8012b1c:	6841      	ldr	r1, [r0, #4]
 8012b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8012b50 <cleanup_stdio+0x34>)
 8012b20:	4299      	cmp	r1, r3
 8012b22:	b510      	push	{r4, lr}
 8012b24:	4604      	mov	r4, r0
 8012b26:	d001      	beq.n	8012b2c <cleanup_stdio+0x10>
 8012b28:	f001 fd00 	bl	801452c <_fflush_r>
 8012b2c:	68a1      	ldr	r1, [r4, #8]
 8012b2e:	4b09      	ldr	r3, [pc, #36]	@ (8012b54 <cleanup_stdio+0x38>)
 8012b30:	4299      	cmp	r1, r3
 8012b32:	d002      	beq.n	8012b3a <cleanup_stdio+0x1e>
 8012b34:	4620      	mov	r0, r4
 8012b36:	f001 fcf9 	bl	801452c <_fflush_r>
 8012b3a:	68e1      	ldr	r1, [r4, #12]
 8012b3c:	4b06      	ldr	r3, [pc, #24]	@ (8012b58 <cleanup_stdio+0x3c>)
 8012b3e:	4299      	cmp	r1, r3
 8012b40:	d004      	beq.n	8012b4c <cleanup_stdio+0x30>
 8012b42:	4620      	mov	r0, r4
 8012b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b48:	f001 bcf0 	b.w	801452c <_fflush_r>
 8012b4c:	bd10      	pop	{r4, pc}
 8012b4e:	bf00      	nop
 8012b50:	24009500 	.word	0x24009500
 8012b54:	24009568 	.word	0x24009568
 8012b58:	240095d0 	.word	0x240095d0

08012b5c <global_stdio_init.part.0>:
 8012b5c:	b510      	push	{r4, lr}
 8012b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8012b8c <global_stdio_init.part.0+0x30>)
 8012b60:	4c0b      	ldr	r4, [pc, #44]	@ (8012b90 <global_stdio_init.part.0+0x34>)
 8012b62:	4a0c      	ldr	r2, [pc, #48]	@ (8012b94 <global_stdio_init.part.0+0x38>)
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	4620      	mov	r0, r4
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2104      	movs	r1, #4
 8012b6c:	f7ff ff94 	bl	8012a98 <std>
 8012b70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012b74:	2201      	movs	r2, #1
 8012b76:	2109      	movs	r1, #9
 8012b78:	f7ff ff8e 	bl	8012a98 <std>
 8012b7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012b80:	2202      	movs	r2, #2
 8012b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b86:	2112      	movs	r1, #18
 8012b88:	f7ff bf86 	b.w	8012a98 <std>
 8012b8c:	24009638 	.word	0x24009638
 8012b90:	24009500 	.word	0x24009500
 8012b94:	08012b05 	.word	0x08012b05

08012b98 <__sfp_lock_acquire>:
 8012b98:	4801      	ldr	r0, [pc, #4]	@ (8012ba0 <__sfp_lock_acquire+0x8>)
 8012b9a:	f000 b930 	b.w	8012dfe <__retarget_lock_acquire_recursive>
 8012b9e:	bf00      	nop
 8012ba0:	24009641 	.word	0x24009641

08012ba4 <__sfp_lock_release>:
 8012ba4:	4801      	ldr	r0, [pc, #4]	@ (8012bac <__sfp_lock_release+0x8>)
 8012ba6:	f000 b92b 	b.w	8012e00 <__retarget_lock_release_recursive>
 8012baa:	bf00      	nop
 8012bac:	24009641 	.word	0x24009641

08012bb0 <__sinit>:
 8012bb0:	b510      	push	{r4, lr}
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	f7ff fff0 	bl	8012b98 <__sfp_lock_acquire>
 8012bb8:	6a23      	ldr	r3, [r4, #32]
 8012bba:	b11b      	cbz	r3, 8012bc4 <__sinit+0x14>
 8012bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bc0:	f7ff bff0 	b.w	8012ba4 <__sfp_lock_release>
 8012bc4:	4b04      	ldr	r3, [pc, #16]	@ (8012bd8 <__sinit+0x28>)
 8012bc6:	6223      	str	r3, [r4, #32]
 8012bc8:	4b04      	ldr	r3, [pc, #16]	@ (8012bdc <__sinit+0x2c>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d1f5      	bne.n	8012bbc <__sinit+0xc>
 8012bd0:	f7ff ffc4 	bl	8012b5c <global_stdio_init.part.0>
 8012bd4:	e7f2      	b.n	8012bbc <__sinit+0xc>
 8012bd6:	bf00      	nop
 8012bd8:	08012b1d 	.word	0x08012b1d
 8012bdc:	24009638 	.word	0x24009638

08012be0 <_fwalk_sglue>:
 8012be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012be4:	4607      	mov	r7, r0
 8012be6:	4688      	mov	r8, r1
 8012be8:	4614      	mov	r4, r2
 8012bea:	2600      	movs	r6, #0
 8012bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8012bf4:	d505      	bpl.n	8012c02 <_fwalk_sglue+0x22>
 8012bf6:	6824      	ldr	r4, [r4, #0]
 8012bf8:	2c00      	cmp	r4, #0
 8012bfa:	d1f7      	bne.n	8012bec <_fwalk_sglue+0xc>
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c02:	89ab      	ldrh	r3, [r5, #12]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d907      	bls.n	8012c18 <_fwalk_sglue+0x38>
 8012c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	d003      	beq.n	8012c18 <_fwalk_sglue+0x38>
 8012c10:	4629      	mov	r1, r5
 8012c12:	4638      	mov	r0, r7
 8012c14:	47c0      	blx	r8
 8012c16:	4306      	orrs	r6, r0
 8012c18:	3568      	adds	r5, #104	@ 0x68
 8012c1a:	e7e9      	b.n	8012bf0 <_fwalk_sglue+0x10>

08012c1c <siprintf>:
 8012c1c:	b40e      	push	{r1, r2, r3}
 8012c1e:	b500      	push	{lr}
 8012c20:	b09c      	sub	sp, #112	@ 0x70
 8012c22:	ab1d      	add	r3, sp, #116	@ 0x74
 8012c24:	9002      	str	r0, [sp, #8]
 8012c26:	9006      	str	r0, [sp, #24]
 8012c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c2c:	4809      	ldr	r0, [pc, #36]	@ (8012c54 <siprintf+0x38>)
 8012c2e:	9107      	str	r1, [sp, #28]
 8012c30:	9104      	str	r1, [sp, #16]
 8012c32:	4909      	ldr	r1, [pc, #36]	@ (8012c58 <siprintf+0x3c>)
 8012c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c38:	9105      	str	r1, [sp, #20]
 8012c3a:	6800      	ldr	r0, [r0, #0]
 8012c3c:	9301      	str	r3, [sp, #4]
 8012c3e:	a902      	add	r1, sp, #8
 8012c40:	f001 faf4 	bl	801422c <_svfiprintf_r>
 8012c44:	9b02      	ldr	r3, [sp, #8]
 8012c46:	2200      	movs	r2, #0
 8012c48:	701a      	strb	r2, [r3, #0]
 8012c4a:	b01c      	add	sp, #112	@ 0x70
 8012c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c50:	b003      	add	sp, #12
 8012c52:	4770      	bx	lr
 8012c54:	24000138 	.word	0x24000138
 8012c58:	ffff0208 	.word	0xffff0208

08012c5c <__sread>:
 8012c5c:	b510      	push	{r4, lr}
 8012c5e:	460c      	mov	r4, r1
 8012c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c64:	f000 f86c 	bl	8012d40 <_read_r>
 8012c68:	2800      	cmp	r0, #0
 8012c6a:	bfab      	itete	ge
 8012c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8012c70:	181b      	addge	r3, r3, r0
 8012c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012c76:	bfac      	ite	ge
 8012c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012c7a:	81a3      	strhlt	r3, [r4, #12]
 8012c7c:	bd10      	pop	{r4, pc}

08012c7e <__swrite>:
 8012c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c82:	461f      	mov	r7, r3
 8012c84:	898b      	ldrh	r3, [r1, #12]
 8012c86:	05db      	lsls	r3, r3, #23
 8012c88:	4605      	mov	r5, r0
 8012c8a:	460c      	mov	r4, r1
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	d505      	bpl.n	8012c9c <__swrite+0x1e>
 8012c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c94:	2302      	movs	r3, #2
 8012c96:	2200      	movs	r2, #0
 8012c98:	f000 f840 	bl	8012d1c <_lseek_r>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	4632      	mov	r2, r6
 8012caa:	463b      	mov	r3, r7
 8012cac:	4628      	mov	r0, r5
 8012cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb2:	f000 b867 	b.w	8012d84 <_write_r>

08012cb6 <__sseek>:
 8012cb6:	b510      	push	{r4, lr}
 8012cb8:	460c      	mov	r4, r1
 8012cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cbe:	f000 f82d 	bl	8012d1c <_lseek_r>
 8012cc2:	1c43      	adds	r3, r0, #1
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	bf15      	itete	ne
 8012cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012cd2:	81a3      	strheq	r3, [r4, #12]
 8012cd4:	bf18      	it	ne
 8012cd6:	81a3      	strhne	r3, [r4, #12]
 8012cd8:	bd10      	pop	{r4, pc}

08012cda <__sclose>:
 8012cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cde:	f000 b80d 	b.w	8012cfc <_close_r>

08012ce2 <memset>:
 8012ce2:	4402      	add	r2, r0
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	4293      	cmp	r3, r2
 8012ce8:	d100      	bne.n	8012cec <memset+0xa>
 8012cea:	4770      	bx	lr
 8012cec:	f803 1b01 	strb.w	r1, [r3], #1
 8012cf0:	e7f9      	b.n	8012ce6 <memset+0x4>
	...

08012cf4 <_localeconv_r>:
 8012cf4:	4800      	ldr	r0, [pc, #0]	@ (8012cf8 <_localeconv_r+0x4>)
 8012cf6:	4770      	bx	lr
 8012cf8:	24000278 	.word	0x24000278

08012cfc <_close_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4d06      	ldr	r5, [pc, #24]	@ (8012d18 <_close_r+0x1c>)
 8012d00:	2300      	movs	r3, #0
 8012d02:	4604      	mov	r4, r0
 8012d04:	4608      	mov	r0, r1
 8012d06:	602b      	str	r3, [r5, #0]
 8012d08:	f7ee fd92 	bl	8001830 <_close>
 8012d0c:	1c43      	adds	r3, r0, #1
 8012d0e:	d102      	bne.n	8012d16 <_close_r+0x1a>
 8012d10:	682b      	ldr	r3, [r5, #0]
 8012d12:	b103      	cbz	r3, 8012d16 <_close_r+0x1a>
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	bd38      	pop	{r3, r4, r5, pc}
 8012d18:	2400963c 	.word	0x2400963c

08012d1c <_lseek_r>:
 8012d1c:	b538      	push	{r3, r4, r5, lr}
 8012d1e:	4d07      	ldr	r5, [pc, #28]	@ (8012d3c <_lseek_r+0x20>)
 8012d20:	4604      	mov	r4, r0
 8012d22:	4608      	mov	r0, r1
 8012d24:	4611      	mov	r1, r2
 8012d26:	2200      	movs	r2, #0
 8012d28:	602a      	str	r2, [r5, #0]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	f7ee fda7 	bl	800187e <_lseek>
 8012d30:	1c43      	adds	r3, r0, #1
 8012d32:	d102      	bne.n	8012d3a <_lseek_r+0x1e>
 8012d34:	682b      	ldr	r3, [r5, #0]
 8012d36:	b103      	cbz	r3, 8012d3a <_lseek_r+0x1e>
 8012d38:	6023      	str	r3, [r4, #0]
 8012d3a:	bd38      	pop	{r3, r4, r5, pc}
 8012d3c:	2400963c 	.word	0x2400963c

08012d40 <_read_r>:
 8012d40:	b538      	push	{r3, r4, r5, lr}
 8012d42:	4d07      	ldr	r5, [pc, #28]	@ (8012d60 <_read_r+0x20>)
 8012d44:	4604      	mov	r4, r0
 8012d46:	4608      	mov	r0, r1
 8012d48:	4611      	mov	r1, r2
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	602a      	str	r2, [r5, #0]
 8012d4e:	461a      	mov	r2, r3
 8012d50:	f7ee fd35 	bl	80017be <_read>
 8012d54:	1c43      	adds	r3, r0, #1
 8012d56:	d102      	bne.n	8012d5e <_read_r+0x1e>
 8012d58:	682b      	ldr	r3, [r5, #0]
 8012d5a:	b103      	cbz	r3, 8012d5e <_read_r+0x1e>
 8012d5c:	6023      	str	r3, [r4, #0]
 8012d5e:	bd38      	pop	{r3, r4, r5, pc}
 8012d60:	2400963c 	.word	0x2400963c

08012d64 <_sbrk_r>:
 8012d64:	b538      	push	{r3, r4, r5, lr}
 8012d66:	4d06      	ldr	r5, [pc, #24]	@ (8012d80 <_sbrk_r+0x1c>)
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4604      	mov	r4, r0
 8012d6c:	4608      	mov	r0, r1
 8012d6e:	602b      	str	r3, [r5, #0]
 8012d70:	f7ee fd92 	bl	8001898 <_sbrk>
 8012d74:	1c43      	adds	r3, r0, #1
 8012d76:	d102      	bne.n	8012d7e <_sbrk_r+0x1a>
 8012d78:	682b      	ldr	r3, [r5, #0]
 8012d7a:	b103      	cbz	r3, 8012d7e <_sbrk_r+0x1a>
 8012d7c:	6023      	str	r3, [r4, #0]
 8012d7e:	bd38      	pop	{r3, r4, r5, pc}
 8012d80:	2400963c 	.word	0x2400963c

08012d84 <_write_r>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4d07      	ldr	r5, [pc, #28]	@ (8012da4 <_write_r+0x20>)
 8012d88:	4604      	mov	r4, r0
 8012d8a:	4608      	mov	r0, r1
 8012d8c:	4611      	mov	r1, r2
 8012d8e:	2200      	movs	r2, #0
 8012d90:	602a      	str	r2, [r5, #0]
 8012d92:	461a      	mov	r2, r3
 8012d94:	f7ee fd30 	bl	80017f8 <_write>
 8012d98:	1c43      	adds	r3, r0, #1
 8012d9a:	d102      	bne.n	8012da2 <_write_r+0x1e>
 8012d9c:	682b      	ldr	r3, [r5, #0]
 8012d9e:	b103      	cbz	r3, 8012da2 <_write_r+0x1e>
 8012da0:	6023      	str	r3, [r4, #0]
 8012da2:	bd38      	pop	{r3, r4, r5, pc}
 8012da4:	2400963c 	.word	0x2400963c

08012da8 <__errno>:
 8012da8:	4b01      	ldr	r3, [pc, #4]	@ (8012db0 <__errno+0x8>)
 8012daa:	6818      	ldr	r0, [r3, #0]
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop
 8012db0:	24000138 	.word	0x24000138

08012db4 <__libc_init_array>:
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	4d0d      	ldr	r5, [pc, #52]	@ (8012dec <__libc_init_array+0x38>)
 8012db8:	4c0d      	ldr	r4, [pc, #52]	@ (8012df0 <__libc_init_array+0x3c>)
 8012dba:	1b64      	subs	r4, r4, r5
 8012dbc:	10a4      	asrs	r4, r4, #2
 8012dbe:	2600      	movs	r6, #0
 8012dc0:	42a6      	cmp	r6, r4
 8012dc2:	d109      	bne.n	8012dd8 <__libc_init_array+0x24>
 8012dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8012df4 <__libc_init_array+0x40>)
 8012dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8012df8 <__libc_init_array+0x44>)
 8012dc8:	f002 fa1c 	bl	8015204 <_init>
 8012dcc:	1b64      	subs	r4, r4, r5
 8012dce:	10a4      	asrs	r4, r4, #2
 8012dd0:	2600      	movs	r6, #0
 8012dd2:	42a6      	cmp	r6, r4
 8012dd4:	d105      	bne.n	8012de2 <__libc_init_array+0x2e>
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ddc:	4798      	blx	r3
 8012dde:	3601      	adds	r6, #1
 8012de0:	e7ee      	b.n	8012dc0 <__libc_init_array+0xc>
 8012de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012de6:	4798      	blx	r3
 8012de8:	3601      	adds	r6, #1
 8012dea:	e7f2      	b.n	8012dd2 <__libc_init_array+0x1e>
 8012dec:	080177a8 	.word	0x080177a8
 8012df0:	080177a8 	.word	0x080177a8
 8012df4:	080177a8 	.word	0x080177a8
 8012df8:	080177ac 	.word	0x080177ac

08012dfc <__retarget_lock_init_recursive>:
 8012dfc:	4770      	bx	lr

08012dfe <__retarget_lock_acquire_recursive>:
 8012dfe:	4770      	bx	lr

08012e00 <__retarget_lock_release_recursive>:
 8012e00:	4770      	bx	lr

08012e02 <memcpy>:
 8012e02:	440a      	add	r2, r1
 8012e04:	4291      	cmp	r1, r2
 8012e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e0a:	d100      	bne.n	8012e0e <memcpy+0xc>
 8012e0c:	4770      	bx	lr
 8012e0e:	b510      	push	{r4, lr}
 8012e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e18:	4291      	cmp	r1, r2
 8012e1a:	d1f9      	bne.n	8012e10 <memcpy+0xe>
 8012e1c:	bd10      	pop	{r4, pc}

08012e1e <quorem>:
 8012e1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e22:	6903      	ldr	r3, [r0, #16]
 8012e24:	690c      	ldr	r4, [r1, #16]
 8012e26:	42a3      	cmp	r3, r4
 8012e28:	4607      	mov	r7, r0
 8012e2a:	db7e      	blt.n	8012f2a <quorem+0x10c>
 8012e2c:	3c01      	subs	r4, #1
 8012e2e:	f101 0814 	add.w	r8, r1, #20
 8012e32:	00a3      	lsls	r3, r4, #2
 8012e34:	f100 0514 	add.w	r5, r0, #20
 8012e38:	9300      	str	r3, [sp, #0]
 8012e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e3e:	9301      	str	r3, [sp, #4]
 8012e40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e54:	d32e      	bcc.n	8012eb4 <quorem+0x96>
 8012e56:	f04f 0a00 	mov.w	sl, #0
 8012e5a:	46c4      	mov	ip, r8
 8012e5c:	46ae      	mov	lr, r5
 8012e5e:	46d3      	mov	fp, sl
 8012e60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012e64:	b298      	uxth	r0, r3
 8012e66:	fb06 a000 	mla	r0, r6, r0, sl
 8012e6a:	0c02      	lsrs	r2, r0, #16
 8012e6c:	0c1b      	lsrs	r3, r3, #16
 8012e6e:	fb06 2303 	mla	r3, r6, r3, r2
 8012e72:	f8de 2000 	ldr.w	r2, [lr]
 8012e76:	b280      	uxth	r0, r0
 8012e78:	b292      	uxth	r2, r2
 8012e7a:	1a12      	subs	r2, r2, r0
 8012e7c:	445a      	add	r2, fp
 8012e7e:	f8de 0000 	ldr.w	r0, [lr]
 8012e82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012e8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012e90:	b292      	uxth	r2, r2
 8012e92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012e96:	45e1      	cmp	r9, ip
 8012e98:	f84e 2b04 	str.w	r2, [lr], #4
 8012e9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012ea0:	d2de      	bcs.n	8012e60 <quorem+0x42>
 8012ea2:	9b00      	ldr	r3, [sp, #0]
 8012ea4:	58eb      	ldr	r3, [r5, r3]
 8012ea6:	b92b      	cbnz	r3, 8012eb4 <quorem+0x96>
 8012ea8:	9b01      	ldr	r3, [sp, #4]
 8012eaa:	3b04      	subs	r3, #4
 8012eac:	429d      	cmp	r5, r3
 8012eae:	461a      	mov	r2, r3
 8012eb0:	d32f      	bcc.n	8012f12 <quorem+0xf4>
 8012eb2:	613c      	str	r4, [r7, #16]
 8012eb4:	4638      	mov	r0, r7
 8012eb6:	f001 f855 	bl	8013f64 <__mcmp>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	db25      	blt.n	8012f0a <quorem+0xec>
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f858 2b04 	ldr.w	r2, [r8], #4
 8012ec6:	f8d1 c000 	ldr.w	ip, [r1]
 8012eca:	fa1f fe82 	uxth.w	lr, r2
 8012ece:	fa1f f38c 	uxth.w	r3, ip
 8012ed2:	eba3 030e 	sub.w	r3, r3, lr
 8012ed6:	4403      	add	r3, r0
 8012ed8:	0c12      	lsrs	r2, r2, #16
 8012eda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012ede:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ee8:	45c1      	cmp	r9, r8
 8012eea:	f841 3b04 	str.w	r3, [r1], #4
 8012eee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012ef2:	d2e6      	bcs.n	8012ec2 <quorem+0xa4>
 8012ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ef8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012efc:	b922      	cbnz	r2, 8012f08 <quorem+0xea>
 8012efe:	3b04      	subs	r3, #4
 8012f00:	429d      	cmp	r5, r3
 8012f02:	461a      	mov	r2, r3
 8012f04:	d30b      	bcc.n	8012f1e <quorem+0x100>
 8012f06:	613c      	str	r4, [r7, #16]
 8012f08:	3601      	adds	r6, #1
 8012f0a:	4630      	mov	r0, r6
 8012f0c:	b003      	add	sp, #12
 8012f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f12:	6812      	ldr	r2, [r2, #0]
 8012f14:	3b04      	subs	r3, #4
 8012f16:	2a00      	cmp	r2, #0
 8012f18:	d1cb      	bne.n	8012eb2 <quorem+0x94>
 8012f1a:	3c01      	subs	r4, #1
 8012f1c:	e7c6      	b.n	8012eac <quorem+0x8e>
 8012f1e:	6812      	ldr	r2, [r2, #0]
 8012f20:	3b04      	subs	r3, #4
 8012f22:	2a00      	cmp	r2, #0
 8012f24:	d1ef      	bne.n	8012f06 <quorem+0xe8>
 8012f26:	3c01      	subs	r4, #1
 8012f28:	e7ea      	b.n	8012f00 <quorem+0xe2>
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	e7ee      	b.n	8012f0c <quorem+0xee>
	...

08012f30 <_dtoa_r>:
 8012f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f34:	ed2d 8b02 	vpush	{d8}
 8012f38:	69c7      	ldr	r7, [r0, #28]
 8012f3a:	b091      	sub	sp, #68	@ 0x44
 8012f3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012f40:	ec55 4b10 	vmov	r4, r5, d0
 8012f44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012f46:	9107      	str	r1, [sp, #28]
 8012f48:	4681      	mov	r9, r0
 8012f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8012f4e:	b97f      	cbnz	r7, 8012f70 <_dtoa_r+0x40>
 8012f50:	2010      	movs	r0, #16
 8012f52:	f7ff f8b5 	bl	80120c0 <malloc>
 8012f56:	4602      	mov	r2, r0
 8012f58:	f8c9 001c 	str.w	r0, [r9, #28]
 8012f5c:	b920      	cbnz	r0, 8012f68 <_dtoa_r+0x38>
 8012f5e:	4ba0      	ldr	r3, [pc, #640]	@ (80131e0 <_dtoa_r+0x2b0>)
 8012f60:	21ef      	movs	r1, #239	@ 0xef
 8012f62:	48a0      	ldr	r0, [pc, #640]	@ (80131e4 <_dtoa_r+0x2b4>)
 8012f64:	f001 fb24 	bl	80145b0 <__assert_func>
 8012f68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012f6c:	6007      	str	r7, [r0, #0]
 8012f6e:	60c7      	str	r7, [r0, #12]
 8012f70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012f74:	6819      	ldr	r1, [r3, #0]
 8012f76:	b159      	cbz	r1, 8012f90 <_dtoa_r+0x60>
 8012f78:	685a      	ldr	r2, [r3, #4]
 8012f7a:	604a      	str	r2, [r1, #4]
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	4093      	lsls	r3, r2
 8012f80:	608b      	str	r3, [r1, #8]
 8012f82:	4648      	mov	r0, r9
 8012f84:	f000 fdb4 	bl	8013af0 <_Bfree>
 8012f88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
 8012f90:	1e2b      	subs	r3, r5, #0
 8012f92:	bfbb      	ittet	lt
 8012f94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012f98:	9303      	strlt	r3, [sp, #12]
 8012f9a:	2300      	movge	r3, #0
 8012f9c:	2201      	movlt	r2, #1
 8012f9e:	bfac      	ite	ge
 8012fa0:	6033      	strge	r3, [r6, #0]
 8012fa2:	6032      	strlt	r2, [r6, #0]
 8012fa4:	4b90      	ldr	r3, [pc, #576]	@ (80131e8 <_dtoa_r+0x2b8>)
 8012fa6:	9e03      	ldr	r6, [sp, #12]
 8012fa8:	43b3      	bics	r3, r6
 8012faa:	d110      	bne.n	8012fce <_dtoa_r+0x9e>
 8012fac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012fae:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012fb2:	6013      	str	r3, [r2, #0]
 8012fb4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012fb8:	4323      	orrs	r3, r4
 8012fba:	f000 84de 	beq.w	801397a <_dtoa_r+0xa4a>
 8012fbe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012fc0:	4f8a      	ldr	r7, [pc, #552]	@ (80131ec <_dtoa_r+0x2bc>)
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f000 84e0 	beq.w	8013988 <_dtoa_r+0xa58>
 8012fc8:	1cfb      	adds	r3, r7, #3
 8012fca:	f000 bcdb 	b.w	8013984 <_dtoa_r+0xa54>
 8012fce:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012fd2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fda:	d10a      	bne.n	8012ff2 <_dtoa_r+0xc2>
 8012fdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012fde:	2301      	movs	r3, #1
 8012fe0:	6013      	str	r3, [r2, #0]
 8012fe2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012fe4:	b113      	cbz	r3, 8012fec <_dtoa_r+0xbc>
 8012fe6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012fe8:	4b81      	ldr	r3, [pc, #516]	@ (80131f0 <_dtoa_r+0x2c0>)
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	4f81      	ldr	r7, [pc, #516]	@ (80131f4 <_dtoa_r+0x2c4>)
 8012fee:	f000 bccb 	b.w	8013988 <_dtoa_r+0xa58>
 8012ff2:	aa0e      	add	r2, sp, #56	@ 0x38
 8012ff4:	a90f      	add	r1, sp, #60	@ 0x3c
 8012ff6:	4648      	mov	r0, r9
 8012ff8:	eeb0 0b48 	vmov.f64	d0, d8
 8012ffc:	f001 f862 	bl	80140c4 <__d2b>
 8013000:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013006:	9001      	str	r0, [sp, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d045      	beq.n	8013098 <_dtoa_r+0x168>
 801300c:	eeb0 7b48 	vmov.f64	d7, d8
 8013010:	ee18 1a90 	vmov	r1, s17
 8013014:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013018:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801301c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013020:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013024:	2500      	movs	r5, #0
 8013026:	ee07 1a90 	vmov	s15, r1
 801302a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801302e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80131c8 <_dtoa_r+0x298>
 8013032:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013036:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80131d0 <_dtoa_r+0x2a0>
 801303a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801303e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80131d8 <_dtoa_r+0x2a8>
 8013042:	ee07 3a90 	vmov	s15, r3
 8013046:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801304a:	eeb0 7b46 	vmov.f64	d7, d6
 801304e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013052:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013056:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305e:	ee16 8a90 	vmov	r8, s13
 8013062:	d508      	bpl.n	8013076 <_dtoa_r+0x146>
 8013064:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013068:	eeb4 6b47 	vcmp.f64	d6, d7
 801306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013070:	bf18      	it	ne
 8013072:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013076:	f1b8 0f16 	cmp.w	r8, #22
 801307a:	d82b      	bhi.n	80130d4 <_dtoa_r+0x1a4>
 801307c:	495e      	ldr	r1, [pc, #376]	@ (80131f8 <_dtoa_r+0x2c8>)
 801307e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013082:	ed91 7b00 	vldr	d7, [r1]
 8013086:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308e:	d501      	bpl.n	8013094 <_dtoa_r+0x164>
 8013090:	f108 38ff 	add.w	r8, r8, #4294967295
 8013094:	2100      	movs	r1, #0
 8013096:	e01e      	b.n	80130d6 <_dtoa_r+0x1a6>
 8013098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801309a:	4413      	add	r3, r2
 801309c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80130a0:	2920      	cmp	r1, #32
 80130a2:	bfc1      	itttt	gt
 80130a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80130a8:	408e      	lslgt	r6, r1
 80130aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80130ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 80130b2:	bfd6      	itet	le
 80130b4:	f1c1 0120 	rsble	r1, r1, #32
 80130b8:	4331      	orrgt	r1, r6
 80130ba:	fa04 f101 	lslle.w	r1, r4, r1
 80130be:	ee07 1a90 	vmov	s15, r1
 80130c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80130c6:	3b01      	subs	r3, #1
 80130c8:	ee17 1a90 	vmov	r1, s15
 80130cc:	2501      	movs	r5, #1
 80130ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80130d2:	e7a8      	b.n	8013026 <_dtoa_r+0xf6>
 80130d4:	2101      	movs	r1, #1
 80130d6:	1ad2      	subs	r2, r2, r3
 80130d8:	1e53      	subs	r3, r2, #1
 80130da:	9306      	str	r3, [sp, #24]
 80130dc:	bf45      	ittet	mi
 80130de:	f1c2 0301 	rsbmi	r3, r2, #1
 80130e2:	9305      	strmi	r3, [sp, #20]
 80130e4:	2300      	movpl	r3, #0
 80130e6:	2300      	movmi	r3, #0
 80130e8:	bf4c      	ite	mi
 80130ea:	9306      	strmi	r3, [sp, #24]
 80130ec:	9305      	strpl	r3, [sp, #20]
 80130ee:	f1b8 0f00 	cmp.w	r8, #0
 80130f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80130f4:	db18      	blt.n	8013128 <_dtoa_r+0x1f8>
 80130f6:	9b06      	ldr	r3, [sp, #24]
 80130f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80130fc:	4443      	add	r3, r8
 80130fe:	9306      	str	r3, [sp, #24]
 8013100:	2300      	movs	r3, #0
 8013102:	9a07      	ldr	r2, [sp, #28]
 8013104:	2a09      	cmp	r2, #9
 8013106:	d849      	bhi.n	801319c <_dtoa_r+0x26c>
 8013108:	2a05      	cmp	r2, #5
 801310a:	bfc4      	itt	gt
 801310c:	3a04      	subgt	r2, #4
 801310e:	9207      	strgt	r2, [sp, #28]
 8013110:	9a07      	ldr	r2, [sp, #28]
 8013112:	f1a2 0202 	sub.w	r2, r2, #2
 8013116:	bfcc      	ite	gt
 8013118:	2400      	movgt	r4, #0
 801311a:	2401      	movle	r4, #1
 801311c:	2a03      	cmp	r2, #3
 801311e:	d848      	bhi.n	80131b2 <_dtoa_r+0x282>
 8013120:	e8df f002 	tbb	[pc, r2]
 8013124:	3a2c2e0b 	.word	0x3a2c2e0b
 8013128:	9b05      	ldr	r3, [sp, #20]
 801312a:	2200      	movs	r2, #0
 801312c:	eba3 0308 	sub.w	r3, r3, r8
 8013130:	9305      	str	r3, [sp, #20]
 8013132:	920a      	str	r2, [sp, #40]	@ 0x28
 8013134:	f1c8 0300 	rsb	r3, r8, #0
 8013138:	e7e3      	b.n	8013102 <_dtoa_r+0x1d2>
 801313a:	2200      	movs	r2, #0
 801313c:	9208      	str	r2, [sp, #32]
 801313e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013140:	2a00      	cmp	r2, #0
 8013142:	dc39      	bgt.n	80131b8 <_dtoa_r+0x288>
 8013144:	f04f 0b01 	mov.w	fp, #1
 8013148:	46da      	mov	sl, fp
 801314a:	465a      	mov	r2, fp
 801314c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013150:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013154:	2100      	movs	r1, #0
 8013156:	2004      	movs	r0, #4
 8013158:	f100 0614 	add.w	r6, r0, #20
 801315c:	4296      	cmp	r6, r2
 801315e:	d930      	bls.n	80131c2 <_dtoa_r+0x292>
 8013160:	6079      	str	r1, [r7, #4]
 8013162:	4648      	mov	r0, r9
 8013164:	9304      	str	r3, [sp, #16]
 8013166:	f000 fc83 	bl	8013a70 <_Balloc>
 801316a:	9b04      	ldr	r3, [sp, #16]
 801316c:	4607      	mov	r7, r0
 801316e:	2800      	cmp	r0, #0
 8013170:	d146      	bne.n	8013200 <_dtoa_r+0x2d0>
 8013172:	4b22      	ldr	r3, [pc, #136]	@ (80131fc <_dtoa_r+0x2cc>)
 8013174:	4602      	mov	r2, r0
 8013176:	f240 11af 	movw	r1, #431	@ 0x1af
 801317a:	e6f2      	b.n	8012f62 <_dtoa_r+0x32>
 801317c:	2201      	movs	r2, #1
 801317e:	e7dd      	b.n	801313c <_dtoa_r+0x20c>
 8013180:	2200      	movs	r2, #0
 8013182:	9208      	str	r2, [sp, #32]
 8013184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013186:	eb08 0b02 	add.w	fp, r8, r2
 801318a:	f10b 0a01 	add.w	sl, fp, #1
 801318e:	4652      	mov	r2, sl
 8013190:	2a01      	cmp	r2, #1
 8013192:	bfb8      	it	lt
 8013194:	2201      	movlt	r2, #1
 8013196:	e7db      	b.n	8013150 <_dtoa_r+0x220>
 8013198:	2201      	movs	r2, #1
 801319a:	e7f2      	b.n	8013182 <_dtoa_r+0x252>
 801319c:	2401      	movs	r4, #1
 801319e:	2200      	movs	r2, #0
 80131a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80131a4:	f04f 3bff 	mov.w	fp, #4294967295
 80131a8:	2100      	movs	r1, #0
 80131aa:	46da      	mov	sl, fp
 80131ac:	2212      	movs	r2, #18
 80131ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80131b0:	e7ce      	b.n	8013150 <_dtoa_r+0x220>
 80131b2:	2201      	movs	r2, #1
 80131b4:	9208      	str	r2, [sp, #32]
 80131b6:	e7f5      	b.n	80131a4 <_dtoa_r+0x274>
 80131b8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80131bc:	46da      	mov	sl, fp
 80131be:	465a      	mov	r2, fp
 80131c0:	e7c6      	b.n	8013150 <_dtoa_r+0x220>
 80131c2:	3101      	adds	r1, #1
 80131c4:	0040      	lsls	r0, r0, #1
 80131c6:	e7c7      	b.n	8013158 <_dtoa_r+0x228>
 80131c8:	636f4361 	.word	0x636f4361
 80131cc:	3fd287a7 	.word	0x3fd287a7
 80131d0:	8b60c8b3 	.word	0x8b60c8b3
 80131d4:	3fc68a28 	.word	0x3fc68a28
 80131d8:	509f79fb 	.word	0x509f79fb
 80131dc:	3fd34413 	.word	0x3fd34413
 80131e0:	08017461 	.word	0x08017461
 80131e4:	08017478 	.word	0x08017478
 80131e8:	7ff00000 	.word	0x7ff00000
 80131ec:	0801745d 	.word	0x0801745d
 80131f0:	08017431 	.word	0x08017431
 80131f4:	08017430 	.word	0x08017430
 80131f8:	08017570 	.word	0x08017570
 80131fc:	080174d0 	.word	0x080174d0
 8013200:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013204:	f1ba 0f0e 	cmp.w	sl, #14
 8013208:	6010      	str	r0, [r2, #0]
 801320a:	d86f      	bhi.n	80132ec <_dtoa_r+0x3bc>
 801320c:	2c00      	cmp	r4, #0
 801320e:	d06d      	beq.n	80132ec <_dtoa_r+0x3bc>
 8013210:	f1b8 0f00 	cmp.w	r8, #0
 8013214:	f340 80c2 	ble.w	801339c <_dtoa_r+0x46c>
 8013218:	4aca      	ldr	r2, [pc, #808]	@ (8013544 <_dtoa_r+0x614>)
 801321a:	f008 010f 	and.w	r1, r8, #15
 801321e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013222:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013226:	ed92 7b00 	vldr	d7, [r2]
 801322a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801322e:	f000 80a9 	beq.w	8013384 <_dtoa_r+0x454>
 8013232:	4ac5      	ldr	r2, [pc, #788]	@ (8013548 <_dtoa_r+0x618>)
 8013234:	ed92 6b08 	vldr	d6, [r2, #32]
 8013238:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801323c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013240:	f001 010f 	and.w	r1, r1, #15
 8013244:	2203      	movs	r2, #3
 8013246:	48c0      	ldr	r0, [pc, #768]	@ (8013548 <_dtoa_r+0x618>)
 8013248:	2900      	cmp	r1, #0
 801324a:	f040 809d 	bne.w	8013388 <_dtoa_r+0x458>
 801324e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013252:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013256:	ed8d 7b02 	vstr	d7, [sp, #8]
 801325a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801325c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013260:	2900      	cmp	r1, #0
 8013262:	f000 80c1 	beq.w	80133e8 <_dtoa_r+0x4b8>
 8013266:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801326a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013272:	f140 80b9 	bpl.w	80133e8 <_dtoa_r+0x4b8>
 8013276:	f1ba 0f00 	cmp.w	sl, #0
 801327a:	f000 80b5 	beq.w	80133e8 <_dtoa_r+0x4b8>
 801327e:	f1bb 0f00 	cmp.w	fp, #0
 8013282:	dd31      	ble.n	80132e8 <_dtoa_r+0x3b8>
 8013284:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013288:	ee27 7b06 	vmul.f64	d7, d7, d6
 801328c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013290:	f108 31ff 	add.w	r1, r8, #4294967295
 8013294:	9104      	str	r1, [sp, #16]
 8013296:	3201      	adds	r2, #1
 8013298:	465c      	mov	r4, fp
 801329a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801329e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80132a2:	ee07 2a90 	vmov	s15, r2
 80132a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80132aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80132ae:	ee15 2a90 	vmov	r2, s11
 80132b2:	ec51 0b15 	vmov	r0, r1, d5
 80132b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80132ba:	2c00      	cmp	r4, #0
 80132bc:	f040 8098 	bne.w	80133f0 <_dtoa_r+0x4c0>
 80132c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80132c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80132c8:	ec41 0b17 	vmov	d7, r0, r1
 80132cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80132d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d4:	f300 8261 	bgt.w	801379a <_dtoa_r+0x86a>
 80132d8:	eeb1 7b47 	vneg.f64	d7, d7
 80132dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80132e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e4:	f100 80f5 	bmi.w	80134d2 <_dtoa_r+0x5a2>
 80132e8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80132ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80132ee:	2a00      	cmp	r2, #0
 80132f0:	f2c0 812c 	blt.w	801354c <_dtoa_r+0x61c>
 80132f4:	f1b8 0f0e 	cmp.w	r8, #14
 80132f8:	f300 8128 	bgt.w	801354c <_dtoa_r+0x61c>
 80132fc:	4b91      	ldr	r3, [pc, #580]	@ (8013544 <_dtoa_r+0x614>)
 80132fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013302:	ed93 6b00 	vldr	d6, [r3]
 8013306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	da03      	bge.n	8013314 <_dtoa_r+0x3e4>
 801330c:	f1ba 0f00 	cmp.w	sl, #0
 8013310:	f340 80d2 	ble.w	80134b8 <_dtoa_r+0x588>
 8013314:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013318:	ed9d 7b02 	vldr	d7, [sp, #8]
 801331c:	463e      	mov	r6, r7
 801331e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013322:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013326:	ee15 3a10 	vmov	r3, s10
 801332a:	3330      	adds	r3, #48	@ 0x30
 801332c:	f806 3b01 	strb.w	r3, [r6], #1
 8013330:	1bf3      	subs	r3, r6, r7
 8013332:	459a      	cmp	sl, r3
 8013334:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013338:	eea3 7b46 	vfms.f64	d7, d3, d6
 801333c:	f040 80f8 	bne.w	8013530 <_dtoa_r+0x600>
 8013340:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013344:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334c:	f300 80dd 	bgt.w	801350a <_dtoa_r+0x5da>
 8013350:	eeb4 7b46 	vcmp.f64	d7, d6
 8013354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013358:	d104      	bne.n	8013364 <_dtoa_r+0x434>
 801335a:	ee15 3a10 	vmov	r3, s10
 801335e:	07db      	lsls	r3, r3, #31
 8013360:	f100 80d3 	bmi.w	801350a <_dtoa_r+0x5da>
 8013364:	9901      	ldr	r1, [sp, #4]
 8013366:	4648      	mov	r0, r9
 8013368:	f000 fbc2 	bl	8013af0 <_Bfree>
 801336c:	2300      	movs	r3, #0
 801336e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013370:	7033      	strb	r3, [r6, #0]
 8013372:	f108 0301 	add.w	r3, r8, #1
 8013376:	6013      	str	r3, [r2, #0]
 8013378:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801337a:	2b00      	cmp	r3, #0
 801337c:	f000 8304 	beq.w	8013988 <_dtoa_r+0xa58>
 8013380:	601e      	str	r6, [r3, #0]
 8013382:	e301      	b.n	8013988 <_dtoa_r+0xa58>
 8013384:	2202      	movs	r2, #2
 8013386:	e75e      	b.n	8013246 <_dtoa_r+0x316>
 8013388:	07cc      	lsls	r4, r1, #31
 801338a:	d504      	bpl.n	8013396 <_dtoa_r+0x466>
 801338c:	ed90 6b00 	vldr	d6, [r0]
 8013390:	3201      	adds	r2, #1
 8013392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013396:	1049      	asrs	r1, r1, #1
 8013398:	3008      	adds	r0, #8
 801339a:	e755      	b.n	8013248 <_dtoa_r+0x318>
 801339c:	d022      	beq.n	80133e4 <_dtoa_r+0x4b4>
 801339e:	f1c8 0100 	rsb	r1, r8, #0
 80133a2:	4a68      	ldr	r2, [pc, #416]	@ (8013544 <_dtoa_r+0x614>)
 80133a4:	f001 000f 	and.w	r0, r1, #15
 80133a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80133ac:	ed92 7b00 	vldr	d7, [r2]
 80133b0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80133b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133b8:	4863      	ldr	r0, [pc, #396]	@ (8013548 <_dtoa_r+0x618>)
 80133ba:	1109      	asrs	r1, r1, #4
 80133bc:	2400      	movs	r4, #0
 80133be:	2202      	movs	r2, #2
 80133c0:	b929      	cbnz	r1, 80133ce <_dtoa_r+0x49e>
 80133c2:	2c00      	cmp	r4, #0
 80133c4:	f43f af49 	beq.w	801325a <_dtoa_r+0x32a>
 80133c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133cc:	e745      	b.n	801325a <_dtoa_r+0x32a>
 80133ce:	07ce      	lsls	r6, r1, #31
 80133d0:	d505      	bpl.n	80133de <_dtoa_r+0x4ae>
 80133d2:	ed90 6b00 	vldr	d6, [r0]
 80133d6:	3201      	adds	r2, #1
 80133d8:	2401      	movs	r4, #1
 80133da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80133de:	1049      	asrs	r1, r1, #1
 80133e0:	3008      	adds	r0, #8
 80133e2:	e7ed      	b.n	80133c0 <_dtoa_r+0x490>
 80133e4:	2202      	movs	r2, #2
 80133e6:	e738      	b.n	801325a <_dtoa_r+0x32a>
 80133e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80133ec:	4654      	mov	r4, sl
 80133ee:	e754      	b.n	801329a <_dtoa_r+0x36a>
 80133f0:	4a54      	ldr	r2, [pc, #336]	@ (8013544 <_dtoa_r+0x614>)
 80133f2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80133f6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80133fa:	9a08      	ldr	r2, [sp, #32]
 80133fc:	ec41 0b17 	vmov	d7, r0, r1
 8013400:	443c      	add	r4, r7
 8013402:	b34a      	cbz	r2, 8013458 <_dtoa_r+0x528>
 8013404:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013408:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801340c:	463e      	mov	r6, r7
 801340e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013412:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013416:	ee35 7b47 	vsub.f64	d7, d5, d7
 801341a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801341e:	ee14 2a90 	vmov	r2, s9
 8013422:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013426:	3230      	adds	r2, #48	@ 0x30
 8013428:	ee36 6b45 	vsub.f64	d6, d6, d5
 801342c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013434:	f806 2b01 	strb.w	r2, [r6], #1
 8013438:	d438      	bmi.n	80134ac <_dtoa_r+0x57c>
 801343a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801343e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013446:	d462      	bmi.n	801350e <_dtoa_r+0x5de>
 8013448:	42a6      	cmp	r6, r4
 801344a:	f43f af4d 	beq.w	80132e8 <_dtoa_r+0x3b8>
 801344e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013452:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013456:	e7e0      	b.n	801341a <_dtoa_r+0x4ea>
 8013458:	4621      	mov	r1, r4
 801345a:	463e      	mov	r6, r7
 801345c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013460:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013464:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013468:	ee14 2a90 	vmov	r2, s9
 801346c:	3230      	adds	r2, #48	@ 0x30
 801346e:	f806 2b01 	strb.w	r2, [r6], #1
 8013472:	42a6      	cmp	r6, r4
 8013474:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013478:	ee36 6b45 	vsub.f64	d6, d6, d5
 801347c:	d119      	bne.n	80134b2 <_dtoa_r+0x582>
 801347e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013482:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013486:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348e:	dc3e      	bgt.n	801350e <_dtoa_r+0x5de>
 8013490:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013494:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349c:	f57f af24 	bpl.w	80132e8 <_dtoa_r+0x3b8>
 80134a0:	460e      	mov	r6, r1
 80134a2:	3901      	subs	r1, #1
 80134a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80134a8:	2b30      	cmp	r3, #48	@ 0x30
 80134aa:	d0f9      	beq.n	80134a0 <_dtoa_r+0x570>
 80134ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80134b0:	e758      	b.n	8013364 <_dtoa_r+0x434>
 80134b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80134b6:	e7d5      	b.n	8013464 <_dtoa_r+0x534>
 80134b8:	d10b      	bne.n	80134d2 <_dtoa_r+0x5a2>
 80134ba:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80134be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80134c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80134c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ce:	f2c0 8161 	blt.w	8013794 <_dtoa_r+0x864>
 80134d2:	2400      	movs	r4, #0
 80134d4:	4625      	mov	r5, r4
 80134d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134d8:	43db      	mvns	r3, r3
 80134da:	9304      	str	r3, [sp, #16]
 80134dc:	463e      	mov	r6, r7
 80134de:	f04f 0800 	mov.w	r8, #0
 80134e2:	4621      	mov	r1, r4
 80134e4:	4648      	mov	r0, r9
 80134e6:	f000 fb03 	bl	8013af0 <_Bfree>
 80134ea:	2d00      	cmp	r5, #0
 80134ec:	d0de      	beq.n	80134ac <_dtoa_r+0x57c>
 80134ee:	f1b8 0f00 	cmp.w	r8, #0
 80134f2:	d005      	beq.n	8013500 <_dtoa_r+0x5d0>
 80134f4:	45a8      	cmp	r8, r5
 80134f6:	d003      	beq.n	8013500 <_dtoa_r+0x5d0>
 80134f8:	4641      	mov	r1, r8
 80134fa:	4648      	mov	r0, r9
 80134fc:	f000 faf8 	bl	8013af0 <_Bfree>
 8013500:	4629      	mov	r1, r5
 8013502:	4648      	mov	r0, r9
 8013504:	f000 faf4 	bl	8013af0 <_Bfree>
 8013508:	e7d0      	b.n	80134ac <_dtoa_r+0x57c>
 801350a:	f8cd 8010 	str.w	r8, [sp, #16]
 801350e:	4633      	mov	r3, r6
 8013510:	461e      	mov	r6, r3
 8013512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013516:	2a39      	cmp	r2, #57	@ 0x39
 8013518:	d106      	bne.n	8013528 <_dtoa_r+0x5f8>
 801351a:	429f      	cmp	r7, r3
 801351c:	d1f8      	bne.n	8013510 <_dtoa_r+0x5e0>
 801351e:	9a04      	ldr	r2, [sp, #16]
 8013520:	3201      	adds	r2, #1
 8013522:	9204      	str	r2, [sp, #16]
 8013524:	2230      	movs	r2, #48	@ 0x30
 8013526:	703a      	strb	r2, [r7, #0]
 8013528:	781a      	ldrb	r2, [r3, #0]
 801352a:	3201      	adds	r2, #1
 801352c:	701a      	strb	r2, [r3, #0]
 801352e:	e7bd      	b.n	80134ac <_dtoa_r+0x57c>
 8013530:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013534:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353c:	f47f aeef 	bne.w	801331e <_dtoa_r+0x3ee>
 8013540:	e710      	b.n	8013364 <_dtoa_r+0x434>
 8013542:	bf00      	nop
 8013544:	08017570 	.word	0x08017570
 8013548:	08017548 	.word	0x08017548
 801354c:	9908      	ldr	r1, [sp, #32]
 801354e:	2900      	cmp	r1, #0
 8013550:	f000 80e3 	beq.w	801371a <_dtoa_r+0x7ea>
 8013554:	9907      	ldr	r1, [sp, #28]
 8013556:	2901      	cmp	r1, #1
 8013558:	f300 80c8 	bgt.w	80136ec <_dtoa_r+0x7bc>
 801355c:	2d00      	cmp	r5, #0
 801355e:	f000 80c1 	beq.w	80136e4 <_dtoa_r+0x7b4>
 8013562:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013566:	9e05      	ldr	r6, [sp, #20]
 8013568:	461c      	mov	r4, r3
 801356a:	9304      	str	r3, [sp, #16]
 801356c:	9b05      	ldr	r3, [sp, #20]
 801356e:	4413      	add	r3, r2
 8013570:	9305      	str	r3, [sp, #20]
 8013572:	9b06      	ldr	r3, [sp, #24]
 8013574:	2101      	movs	r1, #1
 8013576:	4413      	add	r3, r2
 8013578:	4648      	mov	r0, r9
 801357a:	9306      	str	r3, [sp, #24]
 801357c:	f000 fb6c 	bl	8013c58 <__i2b>
 8013580:	9b04      	ldr	r3, [sp, #16]
 8013582:	4605      	mov	r5, r0
 8013584:	b166      	cbz	r6, 80135a0 <_dtoa_r+0x670>
 8013586:	9a06      	ldr	r2, [sp, #24]
 8013588:	2a00      	cmp	r2, #0
 801358a:	dd09      	ble.n	80135a0 <_dtoa_r+0x670>
 801358c:	42b2      	cmp	r2, r6
 801358e:	9905      	ldr	r1, [sp, #20]
 8013590:	bfa8      	it	ge
 8013592:	4632      	movge	r2, r6
 8013594:	1a89      	subs	r1, r1, r2
 8013596:	9105      	str	r1, [sp, #20]
 8013598:	9906      	ldr	r1, [sp, #24]
 801359a:	1ab6      	subs	r6, r6, r2
 801359c:	1a8a      	subs	r2, r1, r2
 801359e:	9206      	str	r2, [sp, #24]
 80135a0:	b1fb      	cbz	r3, 80135e2 <_dtoa_r+0x6b2>
 80135a2:	9a08      	ldr	r2, [sp, #32]
 80135a4:	2a00      	cmp	r2, #0
 80135a6:	f000 80bc 	beq.w	8013722 <_dtoa_r+0x7f2>
 80135aa:	b19c      	cbz	r4, 80135d4 <_dtoa_r+0x6a4>
 80135ac:	4629      	mov	r1, r5
 80135ae:	4622      	mov	r2, r4
 80135b0:	4648      	mov	r0, r9
 80135b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135b4:	f000 fc10 	bl	8013dd8 <__pow5mult>
 80135b8:	9a01      	ldr	r2, [sp, #4]
 80135ba:	4601      	mov	r1, r0
 80135bc:	4605      	mov	r5, r0
 80135be:	4648      	mov	r0, r9
 80135c0:	f000 fb60 	bl	8013c84 <__multiply>
 80135c4:	9901      	ldr	r1, [sp, #4]
 80135c6:	9004      	str	r0, [sp, #16]
 80135c8:	4648      	mov	r0, r9
 80135ca:	f000 fa91 	bl	8013af0 <_Bfree>
 80135ce:	9a04      	ldr	r2, [sp, #16]
 80135d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135d2:	9201      	str	r2, [sp, #4]
 80135d4:	1b1a      	subs	r2, r3, r4
 80135d6:	d004      	beq.n	80135e2 <_dtoa_r+0x6b2>
 80135d8:	9901      	ldr	r1, [sp, #4]
 80135da:	4648      	mov	r0, r9
 80135dc:	f000 fbfc 	bl	8013dd8 <__pow5mult>
 80135e0:	9001      	str	r0, [sp, #4]
 80135e2:	2101      	movs	r1, #1
 80135e4:	4648      	mov	r0, r9
 80135e6:	f000 fb37 	bl	8013c58 <__i2b>
 80135ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135ec:	4604      	mov	r4, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	f000 81d0 	beq.w	8013994 <_dtoa_r+0xa64>
 80135f4:	461a      	mov	r2, r3
 80135f6:	4601      	mov	r1, r0
 80135f8:	4648      	mov	r0, r9
 80135fa:	f000 fbed 	bl	8013dd8 <__pow5mult>
 80135fe:	9b07      	ldr	r3, [sp, #28]
 8013600:	2b01      	cmp	r3, #1
 8013602:	4604      	mov	r4, r0
 8013604:	f300 8095 	bgt.w	8013732 <_dtoa_r+0x802>
 8013608:	9b02      	ldr	r3, [sp, #8]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f040 808b 	bne.w	8013726 <_dtoa_r+0x7f6>
 8013610:	9b03      	ldr	r3, [sp, #12]
 8013612:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013616:	2a00      	cmp	r2, #0
 8013618:	f040 8087 	bne.w	801372a <_dtoa_r+0x7fa>
 801361c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013620:	0d12      	lsrs	r2, r2, #20
 8013622:	0512      	lsls	r2, r2, #20
 8013624:	2a00      	cmp	r2, #0
 8013626:	f000 8082 	beq.w	801372e <_dtoa_r+0x7fe>
 801362a:	9b05      	ldr	r3, [sp, #20]
 801362c:	3301      	adds	r3, #1
 801362e:	9305      	str	r3, [sp, #20]
 8013630:	9b06      	ldr	r3, [sp, #24]
 8013632:	3301      	adds	r3, #1
 8013634:	9306      	str	r3, [sp, #24]
 8013636:	2301      	movs	r3, #1
 8013638:	930b      	str	r3, [sp, #44]	@ 0x2c
 801363a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801363c:	2b00      	cmp	r3, #0
 801363e:	f000 81af 	beq.w	80139a0 <_dtoa_r+0xa70>
 8013642:	6922      	ldr	r2, [r4, #16]
 8013644:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013648:	6910      	ldr	r0, [r2, #16]
 801364a:	f000 fab9 	bl	8013bc0 <__hi0bits>
 801364e:	f1c0 0020 	rsb	r0, r0, #32
 8013652:	9b06      	ldr	r3, [sp, #24]
 8013654:	4418      	add	r0, r3
 8013656:	f010 001f 	ands.w	r0, r0, #31
 801365a:	d076      	beq.n	801374a <_dtoa_r+0x81a>
 801365c:	f1c0 0220 	rsb	r2, r0, #32
 8013660:	2a04      	cmp	r2, #4
 8013662:	dd69      	ble.n	8013738 <_dtoa_r+0x808>
 8013664:	9b05      	ldr	r3, [sp, #20]
 8013666:	f1c0 001c 	rsb	r0, r0, #28
 801366a:	4403      	add	r3, r0
 801366c:	9305      	str	r3, [sp, #20]
 801366e:	9b06      	ldr	r3, [sp, #24]
 8013670:	4406      	add	r6, r0
 8013672:	4403      	add	r3, r0
 8013674:	9306      	str	r3, [sp, #24]
 8013676:	9b05      	ldr	r3, [sp, #20]
 8013678:	2b00      	cmp	r3, #0
 801367a:	dd05      	ble.n	8013688 <_dtoa_r+0x758>
 801367c:	9901      	ldr	r1, [sp, #4]
 801367e:	461a      	mov	r2, r3
 8013680:	4648      	mov	r0, r9
 8013682:	f000 fc03 	bl	8013e8c <__lshift>
 8013686:	9001      	str	r0, [sp, #4]
 8013688:	9b06      	ldr	r3, [sp, #24]
 801368a:	2b00      	cmp	r3, #0
 801368c:	dd05      	ble.n	801369a <_dtoa_r+0x76a>
 801368e:	4621      	mov	r1, r4
 8013690:	461a      	mov	r2, r3
 8013692:	4648      	mov	r0, r9
 8013694:	f000 fbfa 	bl	8013e8c <__lshift>
 8013698:	4604      	mov	r4, r0
 801369a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801369c:	2b00      	cmp	r3, #0
 801369e:	d056      	beq.n	801374e <_dtoa_r+0x81e>
 80136a0:	9801      	ldr	r0, [sp, #4]
 80136a2:	4621      	mov	r1, r4
 80136a4:	f000 fc5e 	bl	8013f64 <__mcmp>
 80136a8:	2800      	cmp	r0, #0
 80136aa:	da50      	bge.n	801374e <_dtoa_r+0x81e>
 80136ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80136b0:	9304      	str	r3, [sp, #16]
 80136b2:	9901      	ldr	r1, [sp, #4]
 80136b4:	2300      	movs	r3, #0
 80136b6:	220a      	movs	r2, #10
 80136b8:	4648      	mov	r0, r9
 80136ba:	f000 fa3b 	bl	8013b34 <__multadd>
 80136be:	9b08      	ldr	r3, [sp, #32]
 80136c0:	9001      	str	r0, [sp, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 816e 	beq.w	80139a4 <_dtoa_r+0xa74>
 80136c8:	4629      	mov	r1, r5
 80136ca:	2300      	movs	r3, #0
 80136cc:	220a      	movs	r2, #10
 80136ce:	4648      	mov	r0, r9
 80136d0:	f000 fa30 	bl	8013b34 <__multadd>
 80136d4:	f1bb 0f00 	cmp.w	fp, #0
 80136d8:	4605      	mov	r5, r0
 80136da:	dc64      	bgt.n	80137a6 <_dtoa_r+0x876>
 80136dc:	9b07      	ldr	r3, [sp, #28]
 80136de:	2b02      	cmp	r3, #2
 80136e0:	dc3e      	bgt.n	8013760 <_dtoa_r+0x830>
 80136e2:	e060      	b.n	80137a6 <_dtoa_r+0x876>
 80136e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80136ea:	e73c      	b.n	8013566 <_dtoa_r+0x636>
 80136ec:	f10a 34ff 	add.w	r4, sl, #4294967295
 80136f0:	42a3      	cmp	r3, r4
 80136f2:	bfbf      	itttt	lt
 80136f4:	1ae2      	sublt	r2, r4, r3
 80136f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80136f8:	189b      	addlt	r3, r3, r2
 80136fa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80136fc:	bfae      	itee	ge
 80136fe:	1b1c      	subge	r4, r3, r4
 8013700:	4623      	movlt	r3, r4
 8013702:	2400      	movlt	r4, #0
 8013704:	f1ba 0f00 	cmp.w	sl, #0
 8013708:	bfb5      	itete	lt
 801370a:	9a05      	ldrlt	r2, [sp, #20]
 801370c:	9e05      	ldrge	r6, [sp, #20]
 801370e:	eba2 060a 	sublt.w	r6, r2, sl
 8013712:	4652      	movge	r2, sl
 8013714:	bfb8      	it	lt
 8013716:	2200      	movlt	r2, #0
 8013718:	e727      	b.n	801356a <_dtoa_r+0x63a>
 801371a:	9e05      	ldr	r6, [sp, #20]
 801371c:	9d08      	ldr	r5, [sp, #32]
 801371e:	461c      	mov	r4, r3
 8013720:	e730      	b.n	8013584 <_dtoa_r+0x654>
 8013722:	461a      	mov	r2, r3
 8013724:	e758      	b.n	80135d8 <_dtoa_r+0x6a8>
 8013726:	2300      	movs	r3, #0
 8013728:	e786      	b.n	8013638 <_dtoa_r+0x708>
 801372a:	9b02      	ldr	r3, [sp, #8]
 801372c:	e784      	b.n	8013638 <_dtoa_r+0x708>
 801372e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013730:	e783      	b.n	801363a <_dtoa_r+0x70a>
 8013732:	2300      	movs	r3, #0
 8013734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013736:	e784      	b.n	8013642 <_dtoa_r+0x712>
 8013738:	d09d      	beq.n	8013676 <_dtoa_r+0x746>
 801373a:	9b05      	ldr	r3, [sp, #20]
 801373c:	321c      	adds	r2, #28
 801373e:	4413      	add	r3, r2
 8013740:	9305      	str	r3, [sp, #20]
 8013742:	9b06      	ldr	r3, [sp, #24]
 8013744:	4416      	add	r6, r2
 8013746:	4413      	add	r3, r2
 8013748:	e794      	b.n	8013674 <_dtoa_r+0x744>
 801374a:	4602      	mov	r2, r0
 801374c:	e7f5      	b.n	801373a <_dtoa_r+0x80a>
 801374e:	f1ba 0f00 	cmp.w	sl, #0
 8013752:	f8cd 8010 	str.w	r8, [sp, #16]
 8013756:	46d3      	mov	fp, sl
 8013758:	dc21      	bgt.n	801379e <_dtoa_r+0x86e>
 801375a:	9b07      	ldr	r3, [sp, #28]
 801375c:	2b02      	cmp	r3, #2
 801375e:	dd1e      	ble.n	801379e <_dtoa_r+0x86e>
 8013760:	f1bb 0f00 	cmp.w	fp, #0
 8013764:	f47f aeb7 	bne.w	80134d6 <_dtoa_r+0x5a6>
 8013768:	4621      	mov	r1, r4
 801376a:	465b      	mov	r3, fp
 801376c:	2205      	movs	r2, #5
 801376e:	4648      	mov	r0, r9
 8013770:	f000 f9e0 	bl	8013b34 <__multadd>
 8013774:	4601      	mov	r1, r0
 8013776:	4604      	mov	r4, r0
 8013778:	9801      	ldr	r0, [sp, #4]
 801377a:	f000 fbf3 	bl	8013f64 <__mcmp>
 801377e:	2800      	cmp	r0, #0
 8013780:	f77f aea9 	ble.w	80134d6 <_dtoa_r+0x5a6>
 8013784:	463e      	mov	r6, r7
 8013786:	2331      	movs	r3, #49	@ 0x31
 8013788:	f806 3b01 	strb.w	r3, [r6], #1
 801378c:	9b04      	ldr	r3, [sp, #16]
 801378e:	3301      	adds	r3, #1
 8013790:	9304      	str	r3, [sp, #16]
 8013792:	e6a4      	b.n	80134de <_dtoa_r+0x5ae>
 8013794:	f8cd 8010 	str.w	r8, [sp, #16]
 8013798:	4654      	mov	r4, sl
 801379a:	4625      	mov	r5, r4
 801379c:	e7f2      	b.n	8013784 <_dtoa_r+0x854>
 801379e:	9b08      	ldr	r3, [sp, #32]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 8103 	beq.w	80139ac <_dtoa_r+0xa7c>
 80137a6:	2e00      	cmp	r6, #0
 80137a8:	dd05      	ble.n	80137b6 <_dtoa_r+0x886>
 80137aa:	4629      	mov	r1, r5
 80137ac:	4632      	mov	r2, r6
 80137ae:	4648      	mov	r0, r9
 80137b0:	f000 fb6c 	bl	8013e8c <__lshift>
 80137b4:	4605      	mov	r5, r0
 80137b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d058      	beq.n	801386e <_dtoa_r+0x93e>
 80137bc:	6869      	ldr	r1, [r5, #4]
 80137be:	4648      	mov	r0, r9
 80137c0:	f000 f956 	bl	8013a70 <_Balloc>
 80137c4:	4606      	mov	r6, r0
 80137c6:	b928      	cbnz	r0, 80137d4 <_dtoa_r+0x8a4>
 80137c8:	4b82      	ldr	r3, [pc, #520]	@ (80139d4 <_dtoa_r+0xaa4>)
 80137ca:	4602      	mov	r2, r0
 80137cc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80137d0:	f7ff bbc7 	b.w	8012f62 <_dtoa_r+0x32>
 80137d4:	692a      	ldr	r2, [r5, #16]
 80137d6:	3202      	adds	r2, #2
 80137d8:	0092      	lsls	r2, r2, #2
 80137da:	f105 010c 	add.w	r1, r5, #12
 80137de:	300c      	adds	r0, #12
 80137e0:	f7ff fb0f 	bl	8012e02 <memcpy>
 80137e4:	2201      	movs	r2, #1
 80137e6:	4631      	mov	r1, r6
 80137e8:	4648      	mov	r0, r9
 80137ea:	f000 fb4f 	bl	8013e8c <__lshift>
 80137ee:	1c7b      	adds	r3, r7, #1
 80137f0:	9305      	str	r3, [sp, #20]
 80137f2:	eb07 030b 	add.w	r3, r7, fp
 80137f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80137f8:	9b02      	ldr	r3, [sp, #8]
 80137fa:	f003 0301 	and.w	r3, r3, #1
 80137fe:	46a8      	mov	r8, r5
 8013800:	9308      	str	r3, [sp, #32]
 8013802:	4605      	mov	r5, r0
 8013804:	9b05      	ldr	r3, [sp, #20]
 8013806:	9801      	ldr	r0, [sp, #4]
 8013808:	4621      	mov	r1, r4
 801380a:	f103 3bff 	add.w	fp, r3, #4294967295
 801380e:	f7ff fb06 	bl	8012e1e <quorem>
 8013812:	4641      	mov	r1, r8
 8013814:	9002      	str	r0, [sp, #8]
 8013816:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801381a:	9801      	ldr	r0, [sp, #4]
 801381c:	f000 fba2 	bl	8013f64 <__mcmp>
 8013820:	462a      	mov	r2, r5
 8013822:	9006      	str	r0, [sp, #24]
 8013824:	4621      	mov	r1, r4
 8013826:	4648      	mov	r0, r9
 8013828:	f000 fbb8 	bl	8013f9c <__mdiff>
 801382c:	68c2      	ldr	r2, [r0, #12]
 801382e:	4606      	mov	r6, r0
 8013830:	b9fa      	cbnz	r2, 8013872 <_dtoa_r+0x942>
 8013832:	4601      	mov	r1, r0
 8013834:	9801      	ldr	r0, [sp, #4]
 8013836:	f000 fb95 	bl	8013f64 <__mcmp>
 801383a:	4602      	mov	r2, r0
 801383c:	4631      	mov	r1, r6
 801383e:	4648      	mov	r0, r9
 8013840:	920a      	str	r2, [sp, #40]	@ 0x28
 8013842:	f000 f955 	bl	8013af0 <_Bfree>
 8013846:	9b07      	ldr	r3, [sp, #28]
 8013848:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801384a:	9e05      	ldr	r6, [sp, #20]
 801384c:	ea43 0102 	orr.w	r1, r3, r2
 8013850:	9b08      	ldr	r3, [sp, #32]
 8013852:	4319      	orrs	r1, r3
 8013854:	d10f      	bne.n	8013876 <_dtoa_r+0x946>
 8013856:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801385a:	d028      	beq.n	80138ae <_dtoa_r+0x97e>
 801385c:	9b06      	ldr	r3, [sp, #24]
 801385e:	2b00      	cmp	r3, #0
 8013860:	dd02      	ble.n	8013868 <_dtoa_r+0x938>
 8013862:	9b02      	ldr	r3, [sp, #8]
 8013864:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013868:	f88b a000 	strb.w	sl, [fp]
 801386c:	e639      	b.n	80134e2 <_dtoa_r+0x5b2>
 801386e:	4628      	mov	r0, r5
 8013870:	e7bd      	b.n	80137ee <_dtoa_r+0x8be>
 8013872:	2201      	movs	r2, #1
 8013874:	e7e2      	b.n	801383c <_dtoa_r+0x90c>
 8013876:	9b06      	ldr	r3, [sp, #24]
 8013878:	2b00      	cmp	r3, #0
 801387a:	db04      	blt.n	8013886 <_dtoa_r+0x956>
 801387c:	9907      	ldr	r1, [sp, #28]
 801387e:	430b      	orrs	r3, r1
 8013880:	9908      	ldr	r1, [sp, #32]
 8013882:	430b      	orrs	r3, r1
 8013884:	d120      	bne.n	80138c8 <_dtoa_r+0x998>
 8013886:	2a00      	cmp	r2, #0
 8013888:	ddee      	ble.n	8013868 <_dtoa_r+0x938>
 801388a:	9901      	ldr	r1, [sp, #4]
 801388c:	2201      	movs	r2, #1
 801388e:	4648      	mov	r0, r9
 8013890:	f000 fafc 	bl	8013e8c <__lshift>
 8013894:	4621      	mov	r1, r4
 8013896:	9001      	str	r0, [sp, #4]
 8013898:	f000 fb64 	bl	8013f64 <__mcmp>
 801389c:	2800      	cmp	r0, #0
 801389e:	dc03      	bgt.n	80138a8 <_dtoa_r+0x978>
 80138a0:	d1e2      	bne.n	8013868 <_dtoa_r+0x938>
 80138a2:	f01a 0f01 	tst.w	sl, #1
 80138a6:	d0df      	beq.n	8013868 <_dtoa_r+0x938>
 80138a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80138ac:	d1d9      	bne.n	8013862 <_dtoa_r+0x932>
 80138ae:	2339      	movs	r3, #57	@ 0x39
 80138b0:	f88b 3000 	strb.w	r3, [fp]
 80138b4:	4633      	mov	r3, r6
 80138b6:	461e      	mov	r6, r3
 80138b8:	3b01      	subs	r3, #1
 80138ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80138be:	2a39      	cmp	r2, #57	@ 0x39
 80138c0:	d053      	beq.n	801396a <_dtoa_r+0xa3a>
 80138c2:	3201      	adds	r2, #1
 80138c4:	701a      	strb	r2, [r3, #0]
 80138c6:	e60c      	b.n	80134e2 <_dtoa_r+0x5b2>
 80138c8:	2a00      	cmp	r2, #0
 80138ca:	dd07      	ble.n	80138dc <_dtoa_r+0x9ac>
 80138cc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80138d0:	d0ed      	beq.n	80138ae <_dtoa_r+0x97e>
 80138d2:	f10a 0301 	add.w	r3, sl, #1
 80138d6:	f88b 3000 	strb.w	r3, [fp]
 80138da:	e602      	b.n	80134e2 <_dtoa_r+0x5b2>
 80138dc:	9b05      	ldr	r3, [sp, #20]
 80138de:	9a05      	ldr	r2, [sp, #20]
 80138e0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80138e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138e6:	4293      	cmp	r3, r2
 80138e8:	d029      	beq.n	801393e <_dtoa_r+0xa0e>
 80138ea:	9901      	ldr	r1, [sp, #4]
 80138ec:	2300      	movs	r3, #0
 80138ee:	220a      	movs	r2, #10
 80138f0:	4648      	mov	r0, r9
 80138f2:	f000 f91f 	bl	8013b34 <__multadd>
 80138f6:	45a8      	cmp	r8, r5
 80138f8:	9001      	str	r0, [sp, #4]
 80138fa:	f04f 0300 	mov.w	r3, #0
 80138fe:	f04f 020a 	mov.w	r2, #10
 8013902:	4641      	mov	r1, r8
 8013904:	4648      	mov	r0, r9
 8013906:	d107      	bne.n	8013918 <_dtoa_r+0x9e8>
 8013908:	f000 f914 	bl	8013b34 <__multadd>
 801390c:	4680      	mov	r8, r0
 801390e:	4605      	mov	r5, r0
 8013910:	9b05      	ldr	r3, [sp, #20]
 8013912:	3301      	adds	r3, #1
 8013914:	9305      	str	r3, [sp, #20]
 8013916:	e775      	b.n	8013804 <_dtoa_r+0x8d4>
 8013918:	f000 f90c 	bl	8013b34 <__multadd>
 801391c:	4629      	mov	r1, r5
 801391e:	4680      	mov	r8, r0
 8013920:	2300      	movs	r3, #0
 8013922:	220a      	movs	r2, #10
 8013924:	4648      	mov	r0, r9
 8013926:	f000 f905 	bl	8013b34 <__multadd>
 801392a:	4605      	mov	r5, r0
 801392c:	e7f0      	b.n	8013910 <_dtoa_r+0x9e0>
 801392e:	f1bb 0f00 	cmp.w	fp, #0
 8013932:	bfcc      	ite	gt
 8013934:	465e      	movgt	r6, fp
 8013936:	2601      	movle	r6, #1
 8013938:	443e      	add	r6, r7
 801393a:	f04f 0800 	mov.w	r8, #0
 801393e:	9901      	ldr	r1, [sp, #4]
 8013940:	2201      	movs	r2, #1
 8013942:	4648      	mov	r0, r9
 8013944:	f000 faa2 	bl	8013e8c <__lshift>
 8013948:	4621      	mov	r1, r4
 801394a:	9001      	str	r0, [sp, #4]
 801394c:	f000 fb0a 	bl	8013f64 <__mcmp>
 8013950:	2800      	cmp	r0, #0
 8013952:	dcaf      	bgt.n	80138b4 <_dtoa_r+0x984>
 8013954:	d102      	bne.n	801395c <_dtoa_r+0xa2c>
 8013956:	f01a 0f01 	tst.w	sl, #1
 801395a:	d1ab      	bne.n	80138b4 <_dtoa_r+0x984>
 801395c:	4633      	mov	r3, r6
 801395e:	461e      	mov	r6, r3
 8013960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013964:	2a30      	cmp	r2, #48	@ 0x30
 8013966:	d0fa      	beq.n	801395e <_dtoa_r+0xa2e>
 8013968:	e5bb      	b.n	80134e2 <_dtoa_r+0x5b2>
 801396a:	429f      	cmp	r7, r3
 801396c:	d1a3      	bne.n	80138b6 <_dtoa_r+0x986>
 801396e:	9b04      	ldr	r3, [sp, #16]
 8013970:	3301      	adds	r3, #1
 8013972:	9304      	str	r3, [sp, #16]
 8013974:	2331      	movs	r3, #49	@ 0x31
 8013976:	703b      	strb	r3, [r7, #0]
 8013978:	e5b3      	b.n	80134e2 <_dtoa_r+0x5b2>
 801397a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801397c:	4f16      	ldr	r7, [pc, #88]	@ (80139d8 <_dtoa_r+0xaa8>)
 801397e:	b11b      	cbz	r3, 8013988 <_dtoa_r+0xa58>
 8013980:	f107 0308 	add.w	r3, r7, #8
 8013984:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	4638      	mov	r0, r7
 801398a:	b011      	add	sp, #68	@ 0x44
 801398c:	ecbd 8b02 	vpop	{d8}
 8013990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013994:	9b07      	ldr	r3, [sp, #28]
 8013996:	2b01      	cmp	r3, #1
 8013998:	f77f ae36 	ble.w	8013608 <_dtoa_r+0x6d8>
 801399c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801399e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80139a0:	2001      	movs	r0, #1
 80139a2:	e656      	b.n	8013652 <_dtoa_r+0x722>
 80139a4:	f1bb 0f00 	cmp.w	fp, #0
 80139a8:	f77f aed7 	ble.w	801375a <_dtoa_r+0x82a>
 80139ac:	463e      	mov	r6, r7
 80139ae:	9801      	ldr	r0, [sp, #4]
 80139b0:	4621      	mov	r1, r4
 80139b2:	f7ff fa34 	bl	8012e1e <quorem>
 80139b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80139ba:	f806 ab01 	strb.w	sl, [r6], #1
 80139be:	1bf2      	subs	r2, r6, r7
 80139c0:	4593      	cmp	fp, r2
 80139c2:	ddb4      	ble.n	801392e <_dtoa_r+0x9fe>
 80139c4:	9901      	ldr	r1, [sp, #4]
 80139c6:	2300      	movs	r3, #0
 80139c8:	220a      	movs	r2, #10
 80139ca:	4648      	mov	r0, r9
 80139cc:	f000 f8b2 	bl	8013b34 <__multadd>
 80139d0:	9001      	str	r0, [sp, #4]
 80139d2:	e7ec      	b.n	80139ae <_dtoa_r+0xa7e>
 80139d4:	080174d0 	.word	0x080174d0
 80139d8:	08017454 	.word	0x08017454

080139dc <_free_r>:
 80139dc:	b538      	push	{r3, r4, r5, lr}
 80139de:	4605      	mov	r5, r0
 80139e0:	2900      	cmp	r1, #0
 80139e2:	d041      	beq.n	8013a68 <_free_r+0x8c>
 80139e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139e8:	1f0c      	subs	r4, r1, #4
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	bfb8      	it	lt
 80139ee:	18e4      	addlt	r4, r4, r3
 80139f0:	f7fe fc10 	bl	8012214 <__malloc_lock>
 80139f4:	4a1d      	ldr	r2, [pc, #116]	@ (8013a6c <_free_r+0x90>)
 80139f6:	6813      	ldr	r3, [r2, #0]
 80139f8:	b933      	cbnz	r3, 8013a08 <_free_r+0x2c>
 80139fa:	6063      	str	r3, [r4, #4]
 80139fc:	6014      	str	r4, [r2, #0]
 80139fe:	4628      	mov	r0, r5
 8013a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a04:	f7fe bc0c 	b.w	8012220 <__malloc_unlock>
 8013a08:	42a3      	cmp	r3, r4
 8013a0a:	d908      	bls.n	8013a1e <_free_r+0x42>
 8013a0c:	6820      	ldr	r0, [r4, #0]
 8013a0e:	1821      	adds	r1, r4, r0
 8013a10:	428b      	cmp	r3, r1
 8013a12:	bf01      	itttt	eq
 8013a14:	6819      	ldreq	r1, [r3, #0]
 8013a16:	685b      	ldreq	r3, [r3, #4]
 8013a18:	1809      	addeq	r1, r1, r0
 8013a1a:	6021      	streq	r1, [r4, #0]
 8013a1c:	e7ed      	b.n	80139fa <_free_r+0x1e>
 8013a1e:	461a      	mov	r2, r3
 8013a20:	685b      	ldr	r3, [r3, #4]
 8013a22:	b10b      	cbz	r3, 8013a28 <_free_r+0x4c>
 8013a24:	42a3      	cmp	r3, r4
 8013a26:	d9fa      	bls.n	8013a1e <_free_r+0x42>
 8013a28:	6811      	ldr	r1, [r2, #0]
 8013a2a:	1850      	adds	r0, r2, r1
 8013a2c:	42a0      	cmp	r0, r4
 8013a2e:	d10b      	bne.n	8013a48 <_free_r+0x6c>
 8013a30:	6820      	ldr	r0, [r4, #0]
 8013a32:	4401      	add	r1, r0
 8013a34:	1850      	adds	r0, r2, r1
 8013a36:	4283      	cmp	r3, r0
 8013a38:	6011      	str	r1, [r2, #0]
 8013a3a:	d1e0      	bne.n	80139fe <_free_r+0x22>
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	6053      	str	r3, [r2, #4]
 8013a42:	4408      	add	r0, r1
 8013a44:	6010      	str	r0, [r2, #0]
 8013a46:	e7da      	b.n	80139fe <_free_r+0x22>
 8013a48:	d902      	bls.n	8013a50 <_free_r+0x74>
 8013a4a:	230c      	movs	r3, #12
 8013a4c:	602b      	str	r3, [r5, #0]
 8013a4e:	e7d6      	b.n	80139fe <_free_r+0x22>
 8013a50:	6820      	ldr	r0, [r4, #0]
 8013a52:	1821      	adds	r1, r4, r0
 8013a54:	428b      	cmp	r3, r1
 8013a56:	bf04      	itt	eq
 8013a58:	6819      	ldreq	r1, [r3, #0]
 8013a5a:	685b      	ldreq	r3, [r3, #4]
 8013a5c:	6063      	str	r3, [r4, #4]
 8013a5e:	bf04      	itt	eq
 8013a60:	1809      	addeq	r1, r1, r0
 8013a62:	6021      	streq	r1, [r4, #0]
 8013a64:	6054      	str	r4, [r2, #4]
 8013a66:	e7ca      	b.n	80139fe <_free_r+0x22>
 8013a68:	bd38      	pop	{r3, r4, r5, pc}
 8013a6a:	bf00      	nop
 8013a6c:	240094fc 	.word	0x240094fc

08013a70 <_Balloc>:
 8013a70:	b570      	push	{r4, r5, r6, lr}
 8013a72:	69c6      	ldr	r6, [r0, #28]
 8013a74:	4604      	mov	r4, r0
 8013a76:	460d      	mov	r5, r1
 8013a78:	b976      	cbnz	r6, 8013a98 <_Balloc+0x28>
 8013a7a:	2010      	movs	r0, #16
 8013a7c:	f7fe fb20 	bl	80120c0 <malloc>
 8013a80:	4602      	mov	r2, r0
 8013a82:	61e0      	str	r0, [r4, #28]
 8013a84:	b920      	cbnz	r0, 8013a90 <_Balloc+0x20>
 8013a86:	4b18      	ldr	r3, [pc, #96]	@ (8013ae8 <_Balloc+0x78>)
 8013a88:	4818      	ldr	r0, [pc, #96]	@ (8013aec <_Balloc+0x7c>)
 8013a8a:	216b      	movs	r1, #107	@ 0x6b
 8013a8c:	f000 fd90 	bl	80145b0 <__assert_func>
 8013a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a94:	6006      	str	r6, [r0, #0]
 8013a96:	60c6      	str	r6, [r0, #12]
 8013a98:	69e6      	ldr	r6, [r4, #28]
 8013a9a:	68f3      	ldr	r3, [r6, #12]
 8013a9c:	b183      	cbz	r3, 8013ac0 <_Balloc+0x50>
 8013a9e:	69e3      	ldr	r3, [r4, #28]
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013aa6:	b9b8      	cbnz	r0, 8013ad8 <_Balloc+0x68>
 8013aa8:	2101      	movs	r1, #1
 8013aaa:	fa01 f605 	lsl.w	r6, r1, r5
 8013aae:	1d72      	adds	r2, r6, #5
 8013ab0:	0092      	lsls	r2, r2, #2
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f000 fd9a 	bl	80145ec <_calloc_r>
 8013ab8:	b160      	cbz	r0, 8013ad4 <_Balloc+0x64>
 8013aba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013abe:	e00e      	b.n	8013ade <_Balloc+0x6e>
 8013ac0:	2221      	movs	r2, #33	@ 0x21
 8013ac2:	2104      	movs	r1, #4
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f000 fd91 	bl	80145ec <_calloc_r>
 8013aca:	69e3      	ldr	r3, [r4, #28]
 8013acc:	60f0      	str	r0, [r6, #12]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1e4      	bne.n	8013a9e <_Balloc+0x2e>
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	bd70      	pop	{r4, r5, r6, pc}
 8013ad8:	6802      	ldr	r2, [r0, #0]
 8013ada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ae4:	e7f7      	b.n	8013ad6 <_Balloc+0x66>
 8013ae6:	bf00      	nop
 8013ae8:	08017461 	.word	0x08017461
 8013aec:	080174e1 	.word	0x080174e1

08013af0 <_Bfree>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	69c6      	ldr	r6, [r0, #28]
 8013af4:	4605      	mov	r5, r0
 8013af6:	460c      	mov	r4, r1
 8013af8:	b976      	cbnz	r6, 8013b18 <_Bfree+0x28>
 8013afa:	2010      	movs	r0, #16
 8013afc:	f7fe fae0 	bl	80120c0 <malloc>
 8013b00:	4602      	mov	r2, r0
 8013b02:	61e8      	str	r0, [r5, #28]
 8013b04:	b920      	cbnz	r0, 8013b10 <_Bfree+0x20>
 8013b06:	4b09      	ldr	r3, [pc, #36]	@ (8013b2c <_Bfree+0x3c>)
 8013b08:	4809      	ldr	r0, [pc, #36]	@ (8013b30 <_Bfree+0x40>)
 8013b0a:	218f      	movs	r1, #143	@ 0x8f
 8013b0c:	f000 fd50 	bl	80145b0 <__assert_func>
 8013b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b14:	6006      	str	r6, [r0, #0]
 8013b16:	60c6      	str	r6, [r0, #12]
 8013b18:	b13c      	cbz	r4, 8013b2a <_Bfree+0x3a>
 8013b1a:	69eb      	ldr	r3, [r5, #28]
 8013b1c:	6862      	ldr	r2, [r4, #4]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b24:	6021      	str	r1, [r4, #0]
 8013b26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}
 8013b2c:	08017461 	.word	0x08017461
 8013b30:	080174e1 	.word	0x080174e1

08013b34 <__multadd>:
 8013b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b38:	690d      	ldr	r5, [r1, #16]
 8013b3a:	4607      	mov	r7, r0
 8013b3c:	460c      	mov	r4, r1
 8013b3e:	461e      	mov	r6, r3
 8013b40:	f101 0c14 	add.w	ip, r1, #20
 8013b44:	2000      	movs	r0, #0
 8013b46:	f8dc 3000 	ldr.w	r3, [ip]
 8013b4a:	b299      	uxth	r1, r3
 8013b4c:	fb02 6101 	mla	r1, r2, r1, r6
 8013b50:	0c1e      	lsrs	r6, r3, #16
 8013b52:	0c0b      	lsrs	r3, r1, #16
 8013b54:	fb02 3306 	mla	r3, r2, r6, r3
 8013b58:	b289      	uxth	r1, r1
 8013b5a:	3001      	adds	r0, #1
 8013b5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b60:	4285      	cmp	r5, r0
 8013b62:	f84c 1b04 	str.w	r1, [ip], #4
 8013b66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b6a:	dcec      	bgt.n	8013b46 <__multadd+0x12>
 8013b6c:	b30e      	cbz	r6, 8013bb2 <__multadd+0x7e>
 8013b6e:	68a3      	ldr	r3, [r4, #8]
 8013b70:	42ab      	cmp	r3, r5
 8013b72:	dc19      	bgt.n	8013ba8 <__multadd+0x74>
 8013b74:	6861      	ldr	r1, [r4, #4]
 8013b76:	4638      	mov	r0, r7
 8013b78:	3101      	adds	r1, #1
 8013b7a:	f7ff ff79 	bl	8013a70 <_Balloc>
 8013b7e:	4680      	mov	r8, r0
 8013b80:	b928      	cbnz	r0, 8013b8e <__multadd+0x5a>
 8013b82:	4602      	mov	r2, r0
 8013b84:	4b0c      	ldr	r3, [pc, #48]	@ (8013bb8 <__multadd+0x84>)
 8013b86:	480d      	ldr	r0, [pc, #52]	@ (8013bbc <__multadd+0x88>)
 8013b88:	21ba      	movs	r1, #186	@ 0xba
 8013b8a:	f000 fd11 	bl	80145b0 <__assert_func>
 8013b8e:	6922      	ldr	r2, [r4, #16]
 8013b90:	3202      	adds	r2, #2
 8013b92:	f104 010c 	add.w	r1, r4, #12
 8013b96:	0092      	lsls	r2, r2, #2
 8013b98:	300c      	adds	r0, #12
 8013b9a:	f7ff f932 	bl	8012e02 <memcpy>
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	4638      	mov	r0, r7
 8013ba2:	f7ff ffa5 	bl	8013af0 <_Bfree>
 8013ba6:	4644      	mov	r4, r8
 8013ba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013bac:	3501      	adds	r5, #1
 8013bae:	615e      	str	r6, [r3, #20]
 8013bb0:	6125      	str	r5, [r4, #16]
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb8:	080174d0 	.word	0x080174d0
 8013bbc:	080174e1 	.word	0x080174e1

08013bc0 <__hi0bits>:
 8013bc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	bf36      	itet	cc
 8013bc8:	0403      	lslcc	r3, r0, #16
 8013bca:	2000      	movcs	r0, #0
 8013bcc:	2010      	movcc	r0, #16
 8013bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013bd2:	bf3c      	itt	cc
 8013bd4:	021b      	lslcc	r3, r3, #8
 8013bd6:	3008      	addcc	r0, #8
 8013bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013bdc:	bf3c      	itt	cc
 8013bde:	011b      	lslcc	r3, r3, #4
 8013be0:	3004      	addcc	r0, #4
 8013be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013be6:	bf3c      	itt	cc
 8013be8:	009b      	lslcc	r3, r3, #2
 8013bea:	3002      	addcc	r0, #2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	db05      	blt.n	8013bfc <__hi0bits+0x3c>
 8013bf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013bf4:	f100 0001 	add.w	r0, r0, #1
 8013bf8:	bf08      	it	eq
 8013bfa:	2020      	moveq	r0, #32
 8013bfc:	4770      	bx	lr

08013bfe <__lo0bits>:
 8013bfe:	6803      	ldr	r3, [r0, #0]
 8013c00:	4602      	mov	r2, r0
 8013c02:	f013 0007 	ands.w	r0, r3, #7
 8013c06:	d00b      	beq.n	8013c20 <__lo0bits+0x22>
 8013c08:	07d9      	lsls	r1, r3, #31
 8013c0a:	d421      	bmi.n	8013c50 <__lo0bits+0x52>
 8013c0c:	0798      	lsls	r0, r3, #30
 8013c0e:	bf49      	itett	mi
 8013c10:	085b      	lsrmi	r3, r3, #1
 8013c12:	089b      	lsrpl	r3, r3, #2
 8013c14:	2001      	movmi	r0, #1
 8013c16:	6013      	strmi	r3, [r2, #0]
 8013c18:	bf5c      	itt	pl
 8013c1a:	6013      	strpl	r3, [r2, #0]
 8013c1c:	2002      	movpl	r0, #2
 8013c1e:	4770      	bx	lr
 8013c20:	b299      	uxth	r1, r3
 8013c22:	b909      	cbnz	r1, 8013c28 <__lo0bits+0x2a>
 8013c24:	0c1b      	lsrs	r3, r3, #16
 8013c26:	2010      	movs	r0, #16
 8013c28:	b2d9      	uxtb	r1, r3
 8013c2a:	b909      	cbnz	r1, 8013c30 <__lo0bits+0x32>
 8013c2c:	3008      	adds	r0, #8
 8013c2e:	0a1b      	lsrs	r3, r3, #8
 8013c30:	0719      	lsls	r1, r3, #28
 8013c32:	bf04      	itt	eq
 8013c34:	091b      	lsreq	r3, r3, #4
 8013c36:	3004      	addeq	r0, #4
 8013c38:	0799      	lsls	r1, r3, #30
 8013c3a:	bf04      	itt	eq
 8013c3c:	089b      	lsreq	r3, r3, #2
 8013c3e:	3002      	addeq	r0, #2
 8013c40:	07d9      	lsls	r1, r3, #31
 8013c42:	d403      	bmi.n	8013c4c <__lo0bits+0x4e>
 8013c44:	085b      	lsrs	r3, r3, #1
 8013c46:	f100 0001 	add.w	r0, r0, #1
 8013c4a:	d003      	beq.n	8013c54 <__lo0bits+0x56>
 8013c4c:	6013      	str	r3, [r2, #0]
 8013c4e:	4770      	bx	lr
 8013c50:	2000      	movs	r0, #0
 8013c52:	4770      	bx	lr
 8013c54:	2020      	movs	r0, #32
 8013c56:	4770      	bx	lr

08013c58 <__i2b>:
 8013c58:	b510      	push	{r4, lr}
 8013c5a:	460c      	mov	r4, r1
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	f7ff ff07 	bl	8013a70 <_Balloc>
 8013c62:	4602      	mov	r2, r0
 8013c64:	b928      	cbnz	r0, 8013c72 <__i2b+0x1a>
 8013c66:	4b05      	ldr	r3, [pc, #20]	@ (8013c7c <__i2b+0x24>)
 8013c68:	4805      	ldr	r0, [pc, #20]	@ (8013c80 <__i2b+0x28>)
 8013c6a:	f240 1145 	movw	r1, #325	@ 0x145
 8013c6e:	f000 fc9f 	bl	80145b0 <__assert_func>
 8013c72:	2301      	movs	r3, #1
 8013c74:	6144      	str	r4, [r0, #20]
 8013c76:	6103      	str	r3, [r0, #16]
 8013c78:	bd10      	pop	{r4, pc}
 8013c7a:	bf00      	nop
 8013c7c:	080174d0 	.word	0x080174d0
 8013c80:	080174e1 	.word	0x080174e1

08013c84 <__multiply>:
 8013c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c88:	4614      	mov	r4, r2
 8013c8a:	690a      	ldr	r2, [r1, #16]
 8013c8c:	6923      	ldr	r3, [r4, #16]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	bfa8      	it	ge
 8013c92:	4623      	movge	r3, r4
 8013c94:	460f      	mov	r7, r1
 8013c96:	bfa4      	itt	ge
 8013c98:	460c      	movge	r4, r1
 8013c9a:	461f      	movge	r7, r3
 8013c9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013ca0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013ca4:	68a3      	ldr	r3, [r4, #8]
 8013ca6:	6861      	ldr	r1, [r4, #4]
 8013ca8:	eb0a 0609 	add.w	r6, sl, r9
 8013cac:	42b3      	cmp	r3, r6
 8013cae:	b085      	sub	sp, #20
 8013cb0:	bfb8      	it	lt
 8013cb2:	3101      	addlt	r1, #1
 8013cb4:	f7ff fedc 	bl	8013a70 <_Balloc>
 8013cb8:	b930      	cbnz	r0, 8013cc8 <__multiply+0x44>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	4b44      	ldr	r3, [pc, #272]	@ (8013dd0 <__multiply+0x14c>)
 8013cbe:	4845      	ldr	r0, [pc, #276]	@ (8013dd4 <__multiply+0x150>)
 8013cc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013cc4:	f000 fc74 	bl	80145b0 <__assert_func>
 8013cc8:	f100 0514 	add.w	r5, r0, #20
 8013ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013cd0:	462b      	mov	r3, r5
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	4543      	cmp	r3, r8
 8013cd6:	d321      	bcc.n	8013d1c <__multiply+0x98>
 8013cd8:	f107 0114 	add.w	r1, r7, #20
 8013cdc:	f104 0214 	add.w	r2, r4, #20
 8013ce0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013ce4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013ce8:	9302      	str	r3, [sp, #8]
 8013cea:	1b13      	subs	r3, r2, r4
 8013cec:	3b15      	subs	r3, #21
 8013cee:	f023 0303 	bic.w	r3, r3, #3
 8013cf2:	3304      	adds	r3, #4
 8013cf4:	f104 0715 	add.w	r7, r4, #21
 8013cf8:	42ba      	cmp	r2, r7
 8013cfa:	bf38      	it	cc
 8013cfc:	2304      	movcc	r3, #4
 8013cfe:	9301      	str	r3, [sp, #4]
 8013d00:	9b02      	ldr	r3, [sp, #8]
 8013d02:	9103      	str	r1, [sp, #12]
 8013d04:	428b      	cmp	r3, r1
 8013d06:	d80c      	bhi.n	8013d22 <__multiply+0x9e>
 8013d08:	2e00      	cmp	r6, #0
 8013d0a:	dd03      	ble.n	8013d14 <__multiply+0x90>
 8013d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d05b      	beq.n	8013dcc <__multiply+0x148>
 8013d14:	6106      	str	r6, [r0, #16]
 8013d16:	b005      	add	sp, #20
 8013d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1c:	f843 2b04 	str.w	r2, [r3], #4
 8013d20:	e7d8      	b.n	8013cd4 <__multiply+0x50>
 8013d22:	f8b1 a000 	ldrh.w	sl, [r1]
 8013d26:	f1ba 0f00 	cmp.w	sl, #0
 8013d2a:	d024      	beq.n	8013d76 <__multiply+0xf2>
 8013d2c:	f104 0e14 	add.w	lr, r4, #20
 8013d30:	46a9      	mov	r9, r5
 8013d32:	f04f 0c00 	mov.w	ip, #0
 8013d36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8013d3e:	fa1f fb87 	uxth.w	fp, r7
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	fb0a 330b 	mla	r3, sl, fp, r3
 8013d48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013d4c:	f8d9 7000 	ldr.w	r7, [r9]
 8013d50:	4463      	add	r3, ip
 8013d52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d56:	fb0a c70b 	mla	r7, sl, fp, ip
 8013d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d64:	4572      	cmp	r2, lr
 8013d66:	f849 3b04 	str.w	r3, [r9], #4
 8013d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d6e:	d8e2      	bhi.n	8013d36 <__multiply+0xb2>
 8013d70:	9b01      	ldr	r3, [sp, #4]
 8013d72:	f845 c003 	str.w	ip, [r5, r3]
 8013d76:	9b03      	ldr	r3, [sp, #12]
 8013d78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013d7c:	3104      	adds	r1, #4
 8013d7e:	f1b9 0f00 	cmp.w	r9, #0
 8013d82:	d021      	beq.n	8013dc8 <__multiply+0x144>
 8013d84:	682b      	ldr	r3, [r5, #0]
 8013d86:	f104 0c14 	add.w	ip, r4, #20
 8013d8a:	46ae      	mov	lr, r5
 8013d8c:	f04f 0a00 	mov.w	sl, #0
 8013d90:	f8bc b000 	ldrh.w	fp, [ip]
 8013d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013d98:	fb09 770b 	mla	r7, r9, fp, r7
 8013d9c:	4457      	add	r7, sl
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013da4:	f84e 3b04 	str.w	r3, [lr], #4
 8013da8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013db0:	f8be 3000 	ldrh.w	r3, [lr]
 8013db4:	fb09 330a 	mla	r3, r9, sl, r3
 8013db8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013dbc:	4562      	cmp	r2, ip
 8013dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013dc2:	d8e5      	bhi.n	8013d90 <__multiply+0x10c>
 8013dc4:	9f01      	ldr	r7, [sp, #4]
 8013dc6:	51eb      	str	r3, [r5, r7]
 8013dc8:	3504      	adds	r5, #4
 8013dca:	e799      	b.n	8013d00 <__multiply+0x7c>
 8013dcc:	3e01      	subs	r6, #1
 8013dce:	e79b      	b.n	8013d08 <__multiply+0x84>
 8013dd0:	080174d0 	.word	0x080174d0
 8013dd4:	080174e1 	.word	0x080174e1

08013dd8 <__pow5mult>:
 8013dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ddc:	4615      	mov	r5, r2
 8013dde:	f012 0203 	ands.w	r2, r2, #3
 8013de2:	4607      	mov	r7, r0
 8013de4:	460e      	mov	r6, r1
 8013de6:	d007      	beq.n	8013df8 <__pow5mult+0x20>
 8013de8:	4c25      	ldr	r4, [pc, #148]	@ (8013e80 <__pow5mult+0xa8>)
 8013dea:	3a01      	subs	r2, #1
 8013dec:	2300      	movs	r3, #0
 8013dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013df2:	f7ff fe9f 	bl	8013b34 <__multadd>
 8013df6:	4606      	mov	r6, r0
 8013df8:	10ad      	asrs	r5, r5, #2
 8013dfa:	d03d      	beq.n	8013e78 <__pow5mult+0xa0>
 8013dfc:	69fc      	ldr	r4, [r7, #28]
 8013dfe:	b97c      	cbnz	r4, 8013e20 <__pow5mult+0x48>
 8013e00:	2010      	movs	r0, #16
 8013e02:	f7fe f95d 	bl	80120c0 <malloc>
 8013e06:	4602      	mov	r2, r0
 8013e08:	61f8      	str	r0, [r7, #28]
 8013e0a:	b928      	cbnz	r0, 8013e18 <__pow5mult+0x40>
 8013e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8013e84 <__pow5mult+0xac>)
 8013e0e:	481e      	ldr	r0, [pc, #120]	@ (8013e88 <__pow5mult+0xb0>)
 8013e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e14:	f000 fbcc 	bl	80145b0 <__assert_func>
 8013e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e1c:	6004      	str	r4, [r0, #0]
 8013e1e:	60c4      	str	r4, [r0, #12]
 8013e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e28:	b94c      	cbnz	r4, 8013e3e <__pow5mult+0x66>
 8013e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8013e2e:	4638      	mov	r0, r7
 8013e30:	f7ff ff12 	bl	8013c58 <__i2b>
 8013e34:	2300      	movs	r3, #0
 8013e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	6003      	str	r3, [r0, #0]
 8013e3e:	f04f 0900 	mov.w	r9, #0
 8013e42:	07eb      	lsls	r3, r5, #31
 8013e44:	d50a      	bpl.n	8013e5c <__pow5mult+0x84>
 8013e46:	4631      	mov	r1, r6
 8013e48:	4622      	mov	r2, r4
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	f7ff ff1a 	bl	8013c84 <__multiply>
 8013e50:	4631      	mov	r1, r6
 8013e52:	4680      	mov	r8, r0
 8013e54:	4638      	mov	r0, r7
 8013e56:	f7ff fe4b 	bl	8013af0 <_Bfree>
 8013e5a:	4646      	mov	r6, r8
 8013e5c:	106d      	asrs	r5, r5, #1
 8013e5e:	d00b      	beq.n	8013e78 <__pow5mult+0xa0>
 8013e60:	6820      	ldr	r0, [r4, #0]
 8013e62:	b938      	cbnz	r0, 8013e74 <__pow5mult+0x9c>
 8013e64:	4622      	mov	r2, r4
 8013e66:	4621      	mov	r1, r4
 8013e68:	4638      	mov	r0, r7
 8013e6a:	f7ff ff0b 	bl	8013c84 <__multiply>
 8013e6e:	6020      	str	r0, [r4, #0]
 8013e70:	f8c0 9000 	str.w	r9, [r0]
 8013e74:	4604      	mov	r4, r0
 8013e76:	e7e4      	b.n	8013e42 <__pow5mult+0x6a>
 8013e78:	4630      	mov	r0, r6
 8013e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e7e:	bf00      	nop
 8013e80:	0801753c 	.word	0x0801753c
 8013e84:	08017461 	.word	0x08017461
 8013e88:	080174e1 	.word	0x080174e1

08013e8c <__lshift>:
 8013e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e90:	460c      	mov	r4, r1
 8013e92:	6849      	ldr	r1, [r1, #4]
 8013e94:	6923      	ldr	r3, [r4, #16]
 8013e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e9a:	68a3      	ldr	r3, [r4, #8]
 8013e9c:	4607      	mov	r7, r0
 8013e9e:	4691      	mov	r9, r2
 8013ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ea4:	f108 0601 	add.w	r6, r8, #1
 8013ea8:	42b3      	cmp	r3, r6
 8013eaa:	db0b      	blt.n	8013ec4 <__lshift+0x38>
 8013eac:	4638      	mov	r0, r7
 8013eae:	f7ff fddf 	bl	8013a70 <_Balloc>
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	b948      	cbnz	r0, 8013eca <__lshift+0x3e>
 8013eb6:	4602      	mov	r2, r0
 8013eb8:	4b28      	ldr	r3, [pc, #160]	@ (8013f5c <__lshift+0xd0>)
 8013eba:	4829      	ldr	r0, [pc, #164]	@ (8013f60 <__lshift+0xd4>)
 8013ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ec0:	f000 fb76 	bl	80145b0 <__assert_func>
 8013ec4:	3101      	adds	r1, #1
 8013ec6:	005b      	lsls	r3, r3, #1
 8013ec8:	e7ee      	b.n	8013ea8 <__lshift+0x1c>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	f100 0114 	add.w	r1, r0, #20
 8013ed0:	f100 0210 	add.w	r2, r0, #16
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	4553      	cmp	r3, sl
 8013ed8:	db33      	blt.n	8013f42 <__lshift+0xb6>
 8013eda:	6920      	ldr	r0, [r4, #16]
 8013edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ee0:	f104 0314 	add.w	r3, r4, #20
 8013ee4:	f019 091f 	ands.w	r9, r9, #31
 8013ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ef0:	d02b      	beq.n	8013f4a <__lshift+0xbe>
 8013ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8013ef6:	468a      	mov	sl, r1
 8013ef8:	2200      	movs	r2, #0
 8013efa:	6818      	ldr	r0, [r3, #0]
 8013efc:	fa00 f009 	lsl.w	r0, r0, r9
 8013f00:	4310      	orrs	r0, r2
 8013f02:	f84a 0b04 	str.w	r0, [sl], #4
 8013f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f0a:	459c      	cmp	ip, r3
 8013f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f10:	d8f3      	bhi.n	8013efa <__lshift+0x6e>
 8013f12:	ebac 0304 	sub.w	r3, ip, r4
 8013f16:	3b15      	subs	r3, #21
 8013f18:	f023 0303 	bic.w	r3, r3, #3
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	f104 0015 	add.w	r0, r4, #21
 8013f22:	4584      	cmp	ip, r0
 8013f24:	bf38      	it	cc
 8013f26:	2304      	movcc	r3, #4
 8013f28:	50ca      	str	r2, [r1, r3]
 8013f2a:	b10a      	cbz	r2, 8013f30 <__lshift+0xa4>
 8013f2c:	f108 0602 	add.w	r6, r8, #2
 8013f30:	3e01      	subs	r6, #1
 8013f32:	4638      	mov	r0, r7
 8013f34:	612e      	str	r6, [r5, #16]
 8013f36:	4621      	mov	r1, r4
 8013f38:	f7ff fdda 	bl	8013af0 <_Bfree>
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f46:	3301      	adds	r3, #1
 8013f48:	e7c5      	b.n	8013ed6 <__lshift+0x4a>
 8013f4a:	3904      	subs	r1, #4
 8013f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f54:	459c      	cmp	ip, r3
 8013f56:	d8f9      	bhi.n	8013f4c <__lshift+0xc0>
 8013f58:	e7ea      	b.n	8013f30 <__lshift+0xa4>
 8013f5a:	bf00      	nop
 8013f5c:	080174d0 	.word	0x080174d0
 8013f60:	080174e1 	.word	0x080174e1

08013f64 <__mcmp>:
 8013f64:	690a      	ldr	r2, [r1, #16]
 8013f66:	4603      	mov	r3, r0
 8013f68:	6900      	ldr	r0, [r0, #16]
 8013f6a:	1a80      	subs	r0, r0, r2
 8013f6c:	b530      	push	{r4, r5, lr}
 8013f6e:	d10e      	bne.n	8013f8e <__mcmp+0x2a>
 8013f70:	3314      	adds	r3, #20
 8013f72:	3114      	adds	r1, #20
 8013f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f84:	4295      	cmp	r5, r2
 8013f86:	d003      	beq.n	8013f90 <__mcmp+0x2c>
 8013f88:	d205      	bcs.n	8013f96 <__mcmp+0x32>
 8013f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8e:	bd30      	pop	{r4, r5, pc}
 8013f90:	42a3      	cmp	r3, r4
 8013f92:	d3f3      	bcc.n	8013f7c <__mcmp+0x18>
 8013f94:	e7fb      	b.n	8013f8e <__mcmp+0x2a>
 8013f96:	2001      	movs	r0, #1
 8013f98:	e7f9      	b.n	8013f8e <__mcmp+0x2a>
	...

08013f9c <__mdiff>:
 8013f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa0:	4689      	mov	r9, r1
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	4611      	mov	r1, r2
 8013fa6:	4648      	mov	r0, r9
 8013fa8:	4614      	mov	r4, r2
 8013faa:	f7ff ffdb 	bl	8013f64 <__mcmp>
 8013fae:	1e05      	subs	r5, r0, #0
 8013fb0:	d112      	bne.n	8013fd8 <__mdiff+0x3c>
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	f7ff fd5b 	bl	8013a70 <_Balloc>
 8013fba:	4602      	mov	r2, r0
 8013fbc:	b928      	cbnz	r0, 8013fca <__mdiff+0x2e>
 8013fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80140bc <__mdiff+0x120>)
 8013fc0:	f240 2137 	movw	r1, #567	@ 0x237
 8013fc4:	483e      	ldr	r0, [pc, #248]	@ (80140c0 <__mdiff+0x124>)
 8013fc6:	f000 faf3 	bl	80145b0 <__assert_func>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013fd0:	4610      	mov	r0, r2
 8013fd2:	b003      	add	sp, #12
 8013fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd8:	bfbc      	itt	lt
 8013fda:	464b      	movlt	r3, r9
 8013fdc:	46a1      	movlt	r9, r4
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013fe4:	bfba      	itte	lt
 8013fe6:	461c      	movlt	r4, r3
 8013fe8:	2501      	movlt	r5, #1
 8013fea:	2500      	movge	r5, #0
 8013fec:	f7ff fd40 	bl	8013a70 <_Balloc>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	b918      	cbnz	r0, 8013ffc <__mdiff+0x60>
 8013ff4:	4b31      	ldr	r3, [pc, #196]	@ (80140bc <__mdiff+0x120>)
 8013ff6:	f240 2145 	movw	r1, #581	@ 0x245
 8013ffa:	e7e3      	b.n	8013fc4 <__mdiff+0x28>
 8013ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014000:	6926      	ldr	r6, [r4, #16]
 8014002:	60c5      	str	r5, [r0, #12]
 8014004:	f109 0310 	add.w	r3, r9, #16
 8014008:	f109 0514 	add.w	r5, r9, #20
 801400c:	f104 0e14 	add.w	lr, r4, #20
 8014010:	f100 0b14 	add.w	fp, r0, #20
 8014014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801401c:	9301      	str	r3, [sp, #4]
 801401e:	46d9      	mov	r9, fp
 8014020:	f04f 0c00 	mov.w	ip, #0
 8014024:	9b01      	ldr	r3, [sp, #4]
 8014026:	f85e 0b04 	ldr.w	r0, [lr], #4
 801402a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801402e:	9301      	str	r3, [sp, #4]
 8014030:	fa1f f38a 	uxth.w	r3, sl
 8014034:	4619      	mov	r1, r3
 8014036:	b283      	uxth	r3, r0
 8014038:	1acb      	subs	r3, r1, r3
 801403a:	0c00      	lsrs	r0, r0, #16
 801403c:	4463      	add	r3, ip
 801403e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014046:	b29b      	uxth	r3, r3
 8014048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801404c:	4576      	cmp	r6, lr
 801404e:	f849 3b04 	str.w	r3, [r9], #4
 8014052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014056:	d8e5      	bhi.n	8014024 <__mdiff+0x88>
 8014058:	1b33      	subs	r3, r6, r4
 801405a:	3b15      	subs	r3, #21
 801405c:	f023 0303 	bic.w	r3, r3, #3
 8014060:	3415      	adds	r4, #21
 8014062:	3304      	adds	r3, #4
 8014064:	42a6      	cmp	r6, r4
 8014066:	bf38      	it	cc
 8014068:	2304      	movcc	r3, #4
 801406a:	441d      	add	r5, r3
 801406c:	445b      	add	r3, fp
 801406e:	461e      	mov	r6, r3
 8014070:	462c      	mov	r4, r5
 8014072:	4544      	cmp	r4, r8
 8014074:	d30e      	bcc.n	8014094 <__mdiff+0xf8>
 8014076:	f108 0103 	add.w	r1, r8, #3
 801407a:	1b49      	subs	r1, r1, r5
 801407c:	f021 0103 	bic.w	r1, r1, #3
 8014080:	3d03      	subs	r5, #3
 8014082:	45a8      	cmp	r8, r5
 8014084:	bf38      	it	cc
 8014086:	2100      	movcc	r1, #0
 8014088:	440b      	add	r3, r1
 801408a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801408e:	b191      	cbz	r1, 80140b6 <__mdiff+0x11a>
 8014090:	6117      	str	r7, [r2, #16]
 8014092:	e79d      	b.n	8013fd0 <__mdiff+0x34>
 8014094:	f854 1b04 	ldr.w	r1, [r4], #4
 8014098:	46e6      	mov	lr, ip
 801409a:	0c08      	lsrs	r0, r1, #16
 801409c:	fa1c fc81 	uxtah	ip, ip, r1
 80140a0:	4471      	add	r1, lr
 80140a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80140a6:	b289      	uxth	r1, r1
 80140a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80140ac:	f846 1b04 	str.w	r1, [r6], #4
 80140b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140b4:	e7dd      	b.n	8014072 <__mdiff+0xd6>
 80140b6:	3f01      	subs	r7, #1
 80140b8:	e7e7      	b.n	801408a <__mdiff+0xee>
 80140ba:	bf00      	nop
 80140bc:	080174d0 	.word	0x080174d0
 80140c0:	080174e1 	.word	0x080174e1

080140c4 <__d2b>:
 80140c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140c8:	460f      	mov	r7, r1
 80140ca:	2101      	movs	r1, #1
 80140cc:	ec59 8b10 	vmov	r8, r9, d0
 80140d0:	4616      	mov	r6, r2
 80140d2:	f7ff fccd 	bl	8013a70 <_Balloc>
 80140d6:	4604      	mov	r4, r0
 80140d8:	b930      	cbnz	r0, 80140e8 <__d2b+0x24>
 80140da:	4602      	mov	r2, r0
 80140dc:	4b23      	ldr	r3, [pc, #140]	@ (801416c <__d2b+0xa8>)
 80140de:	4824      	ldr	r0, [pc, #144]	@ (8014170 <__d2b+0xac>)
 80140e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80140e4:	f000 fa64 	bl	80145b0 <__assert_func>
 80140e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80140ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140f0:	b10d      	cbz	r5, 80140f6 <__d2b+0x32>
 80140f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80140f6:	9301      	str	r3, [sp, #4]
 80140f8:	f1b8 0300 	subs.w	r3, r8, #0
 80140fc:	d023      	beq.n	8014146 <__d2b+0x82>
 80140fe:	4668      	mov	r0, sp
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	f7ff fd7c 	bl	8013bfe <__lo0bits>
 8014106:	e9dd 1200 	ldrd	r1, r2, [sp]
 801410a:	b1d0      	cbz	r0, 8014142 <__d2b+0x7e>
 801410c:	f1c0 0320 	rsb	r3, r0, #32
 8014110:	fa02 f303 	lsl.w	r3, r2, r3
 8014114:	430b      	orrs	r3, r1
 8014116:	40c2      	lsrs	r2, r0
 8014118:	6163      	str	r3, [r4, #20]
 801411a:	9201      	str	r2, [sp, #4]
 801411c:	9b01      	ldr	r3, [sp, #4]
 801411e:	61a3      	str	r3, [r4, #24]
 8014120:	2b00      	cmp	r3, #0
 8014122:	bf0c      	ite	eq
 8014124:	2201      	moveq	r2, #1
 8014126:	2202      	movne	r2, #2
 8014128:	6122      	str	r2, [r4, #16]
 801412a:	b1a5      	cbz	r5, 8014156 <__d2b+0x92>
 801412c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014130:	4405      	add	r5, r0
 8014132:	603d      	str	r5, [r7, #0]
 8014134:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014138:	6030      	str	r0, [r6, #0]
 801413a:	4620      	mov	r0, r4
 801413c:	b003      	add	sp, #12
 801413e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014142:	6161      	str	r1, [r4, #20]
 8014144:	e7ea      	b.n	801411c <__d2b+0x58>
 8014146:	a801      	add	r0, sp, #4
 8014148:	f7ff fd59 	bl	8013bfe <__lo0bits>
 801414c:	9b01      	ldr	r3, [sp, #4]
 801414e:	6163      	str	r3, [r4, #20]
 8014150:	3020      	adds	r0, #32
 8014152:	2201      	movs	r2, #1
 8014154:	e7e8      	b.n	8014128 <__d2b+0x64>
 8014156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801415a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801415e:	6038      	str	r0, [r7, #0]
 8014160:	6918      	ldr	r0, [r3, #16]
 8014162:	f7ff fd2d 	bl	8013bc0 <__hi0bits>
 8014166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801416a:	e7e5      	b.n	8014138 <__d2b+0x74>
 801416c:	080174d0 	.word	0x080174d0
 8014170:	080174e1 	.word	0x080174e1

08014174 <__ssputs_r>:
 8014174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014178:	688e      	ldr	r6, [r1, #8]
 801417a:	461f      	mov	r7, r3
 801417c:	42be      	cmp	r6, r7
 801417e:	680b      	ldr	r3, [r1, #0]
 8014180:	4682      	mov	sl, r0
 8014182:	460c      	mov	r4, r1
 8014184:	4690      	mov	r8, r2
 8014186:	d82d      	bhi.n	80141e4 <__ssputs_r+0x70>
 8014188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801418c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014190:	d026      	beq.n	80141e0 <__ssputs_r+0x6c>
 8014192:	6965      	ldr	r5, [r4, #20]
 8014194:	6909      	ldr	r1, [r1, #16]
 8014196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801419a:	eba3 0901 	sub.w	r9, r3, r1
 801419e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141a2:	1c7b      	adds	r3, r7, #1
 80141a4:	444b      	add	r3, r9
 80141a6:	106d      	asrs	r5, r5, #1
 80141a8:	429d      	cmp	r5, r3
 80141aa:	bf38      	it	cc
 80141ac:	461d      	movcc	r5, r3
 80141ae:	0553      	lsls	r3, r2, #21
 80141b0:	d527      	bpl.n	8014202 <__ssputs_r+0x8e>
 80141b2:	4629      	mov	r1, r5
 80141b4:	f7fd ffae 	bl	8012114 <_malloc_r>
 80141b8:	4606      	mov	r6, r0
 80141ba:	b360      	cbz	r0, 8014216 <__ssputs_r+0xa2>
 80141bc:	6921      	ldr	r1, [r4, #16]
 80141be:	464a      	mov	r2, r9
 80141c0:	f7fe fe1f 	bl	8012e02 <memcpy>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80141ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141ce:	81a3      	strh	r3, [r4, #12]
 80141d0:	6126      	str	r6, [r4, #16]
 80141d2:	6165      	str	r5, [r4, #20]
 80141d4:	444e      	add	r6, r9
 80141d6:	eba5 0509 	sub.w	r5, r5, r9
 80141da:	6026      	str	r6, [r4, #0]
 80141dc:	60a5      	str	r5, [r4, #8]
 80141de:	463e      	mov	r6, r7
 80141e0:	42be      	cmp	r6, r7
 80141e2:	d900      	bls.n	80141e6 <__ssputs_r+0x72>
 80141e4:	463e      	mov	r6, r7
 80141e6:	6820      	ldr	r0, [r4, #0]
 80141e8:	4632      	mov	r2, r6
 80141ea:	4641      	mov	r1, r8
 80141ec:	f000 f9c6 	bl	801457c <memmove>
 80141f0:	68a3      	ldr	r3, [r4, #8]
 80141f2:	1b9b      	subs	r3, r3, r6
 80141f4:	60a3      	str	r3, [r4, #8]
 80141f6:	6823      	ldr	r3, [r4, #0]
 80141f8:	4433      	add	r3, r6
 80141fa:	6023      	str	r3, [r4, #0]
 80141fc:	2000      	movs	r0, #0
 80141fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014202:	462a      	mov	r2, r5
 8014204:	f000 fa18 	bl	8014638 <_realloc_r>
 8014208:	4606      	mov	r6, r0
 801420a:	2800      	cmp	r0, #0
 801420c:	d1e0      	bne.n	80141d0 <__ssputs_r+0x5c>
 801420e:	6921      	ldr	r1, [r4, #16]
 8014210:	4650      	mov	r0, sl
 8014212:	f7ff fbe3 	bl	80139dc <_free_r>
 8014216:	230c      	movs	r3, #12
 8014218:	f8ca 3000 	str.w	r3, [sl]
 801421c:	89a3      	ldrh	r3, [r4, #12]
 801421e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014222:	81a3      	strh	r3, [r4, #12]
 8014224:	f04f 30ff 	mov.w	r0, #4294967295
 8014228:	e7e9      	b.n	80141fe <__ssputs_r+0x8a>
	...

0801422c <_svfiprintf_r>:
 801422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014230:	4698      	mov	r8, r3
 8014232:	898b      	ldrh	r3, [r1, #12]
 8014234:	061b      	lsls	r3, r3, #24
 8014236:	b09d      	sub	sp, #116	@ 0x74
 8014238:	4607      	mov	r7, r0
 801423a:	460d      	mov	r5, r1
 801423c:	4614      	mov	r4, r2
 801423e:	d510      	bpl.n	8014262 <_svfiprintf_r+0x36>
 8014240:	690b      	ldr	r3, [r1, #16]
 8014242:	b973      	cbnz	r3, 8014262 <_svfiprintf_r+0x36>
 8014244:	2140      	movs	r1, #64	@ 0x40
 8014246:	f7fd ff65 	bl	8012114 <_malloc_r>
 801424a:	6028      	str	r0, [r5, #0]
 801424c:	6128      	str	r0, [r5, #16]
 801424e:	b930      	cbnz	r0, 801425e <_svfiprintf_r+0x32>
 8014250:	230c      	movs	r3, #12
 8014252:	603b      	str	r3, [r7, #0]
 8014254:	f04f 30ff 	mov.w	r0, #4294967295
 8014258:	b01d      	add	sp, #116	@ 0x74
 801425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801425e:	2340      	movs	r3, #64	@ 0x40
 8014260:	616b      	str	r3, [r5, #20]
 8014262:	2300      	movs	r3, #0
 8014264:	9309      	str	r3, [sp, #36]	@ 0x24
 8014266:	2320      	movs	r3, #32
 8014268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801426c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014270:	2330      	movs	r3, #48	@ 0x30
 8014272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014410 <_svfiprintf_r+0x1e4>
 8014276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801427a:	f04f 0901 	mov.w	r9, #1
 801427e:	4623      	mov	r3, r4
 8014280:	469a      	mov	sl, r3
 8014282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014286:	b10a      	cbz	r2, 801428c <_svfiprintf_r+0x60>
 8014288:	2a25      	cmp	r2, #37	@ 0x25
 801428a:	d1f9      	bne.n	8014280 <_svfiprintf_r+0x54>
 801428c:	ebba 0b04 	subs.w	fp, sl, r4
 8014290:	d00b      	beq.n	80142aa <_svfiprintf_r+0x7e>
 8014292:	465b      	mov	r3, fp
 8014294:	4622      	mov	r2, r4
 8014296:	4629      	mov	r1, r5
 8014298:	4638      	mov	r0, r7
 801429a:	f7ff ff6b 	bl	8014174 <__ssputs_r>
 801429e:	3001      	adds	r0, #1
 80142a0:	f000 80a7 	beq.w	80143f2 <_svfiprintf_r+0x1c6>
 80142a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142a6:	445a      	add	r2, fp
 80142a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80142aa:	f89a 3000 	ldrb.w	r3, [sl]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f000 809f 	beq.w	80143f2 <_svfiprintf_r+0x1c6>
 80142b4:	2300      	movs	r3, #0
 80142b6:	f04f 32ff 	mov.w	r2, #4294967295
 80142ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142be:	f10a 0a01 	add.w	sl, sl, #1
 80142c2:	9304      	str	r3, [sp, #16]
 80142c4:	9307      	str	r3, [sp, #28]
 80142c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80142cc:	4654      	mov	r4, sl
 80142ce:	2205      	movs	r2, #5
 80142d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d4:	484e      	ldr	r0, [pc, #312]	@ (8014410 <_svfiprintf_r+0x1e4>)
 80142d6:	f7ec f803 	bl	80002e0 <memchr>
 80142da:	9a04      	ldr	r2, [sp, #16]
 80142dc:	b9d8      	cbnz	r0, 8014316 <_svfiprintf_r+0xea>
 80142de:	06d0      	lsls	r0, r2, #27
 80142e0:	bf44      	itt	mi
 80142e2:	2320      	movmi	r3, #32
 80142e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142e8:	0711      	lsls	r1, r2, #28
 80142ea:	bf44      	itt	mi
 80142ec:	232b      	movmi	r3, #43	@ 0x2b
 80142ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142f2:	f89a 3000 	ldrb.w	r3, [sl]
 80142f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80142f8:	d015      	beq.n	8014326 <_svfiprintf_r+0xfa>
 80142fa:	9a07      	ldr	r2, [sp, #28]
 80142fc:	4654      	mov	r4, sl
 80142fe:	2000      	movs	r0, #0
 8014300:	f04f 0c0a 	mov.w	ip, #10
 8014304:	4621      	mov	r1, r4
 8014306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801430a:	3b30      	subs	r3, #48	@ 0x30
 801430c:	2b09      	cmp	r3, #9
 801430e:	d94b      	bls.n	80143a8 <_svfiprintf_r+0x17c>
 8014310:	b1b0      	cbz	r0, 8014340 <_svfiprintf_r+0x114>
 8014312:	9207      	str	r2, [sp, #28]
 8014314:	e014      	b.n	8014340 <_svfiprintf_r+0x114>
 8014316:	eba0 0308 	sub.w	r3, r0, r8
 801431a:	fa09 f303 	lsl.w	r3, r9, r3
 801431e:	4313      	orrs	r3, r2
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	46a2      	mov	sl, r4
 8014324:	e7d2      	b.n	80142cc <_svfiprintf_r+0xa0>
 8014326:	9b03      	ldr	r3, [sp, #12]
 8014328:	1d19      	adds	r1, r3, #4
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	9103      	str	r1, [sp, #12]
 801432e:	2b00      	cmp	r3, #0
 8014330:	bfbb      	ittet	lt
 8014332:	425b      	neglt	r3, r3
 8014334:	f042 0202 	orrlt.w	r2, r2, #2
 8014338:	9307      	strge	r3, [sp, #28]
 801433a:	9307      	strlt	r3, [sp, #28]
 801433c:	bfb8      	it	lt
 801433e:	9204      	strlt	r2, [sp, #16]
 8014340:	7823      	ldrb	r3, [r4, #0]
 8014342:	2b2e      	cmp	r3, #46	@ 0x2e
 8014344:	d10a      	bne.n	801435c <_svfiprintf_r+0x130>
 8014346:	7863      	ldrb	r3, [r4, #1]
 8014348:	2b2a      	cmp	r3, #42	@ 0x2a
 801434a:	d132      	bne.n	80143b2 <_svfiprintf_r+0x186>
 801434c:	9b03      	ldr	r3, [sp, #12]
 801434e:	1d1a      	adds	r2, r3, #4
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	9203      	str	r2, [sp, #12]
 8014354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014358:	3402      	adds	r4, #2
 801435a:	9305      	str	r3, [sp, #20]
 801435c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014420 <_svfiprintf_r+0x1f4>
 8014360:	7821      	ldrb	r1, [r4, #0]
 8014362:	2203      	movs	r2, #3
 8014364:	4650      	mov	r0, sl
 8014366:	f7eb ffbb 	bl	80002e0 <memchr>
 801436a:	b138      	cbz	r0, 801437c <_svfiprintf_r+0x150>
 801436c:	9b04      	ldr	r3, [sp, #16]
 801436e:	eba0 000a 	sub.w	r0, r0, sl
 8014372:	2240      	movs	r2, #64	@ 0x40
 8014374:	4082      	lsls	r2, r0
 8014376:	4313      	orrs	r3, r2
 8014378:	3401      	adds	r4, #1
 801437a:	9304      	str	r3, [sp, #16]
 801437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014380:	4824      	ldr	r0, [pc, #144]	@ (8014414 <_svfiprintf_r+0x1e8>)
 8014382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014386:	2206      	movs	r2, #6
 8014388:	f7eb ffaa 	bl	80002e0 <memchr>
 801438c:	2800      	cmp	r0, #0
 801438e:	d036      	beq.n	80143fe <_svfiprintf_r+0x1d2>
 8014390:	4b21      	ldr	r3, [pc, #132]	@ (8014418 <_svfiprintf_r+0x1ec>)
 8014392:	bb1b      	cbnz	r3, 80143dc <_svfiprintf_r+0x1b0>
 8014394:	9b03      	ldr	r3, [sp, #12]
 8014396:	3307      	adds	r3, #7
 8014398:	f023 0307 	bic.w	r3, r3, #7
 801439c:	3308      	adds	r3, #8
 801439e:	9303      	str	r3, [sp, #12]
 80143a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143a2:	4433      	add	r3, r6
 80143a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80143a6:	e76a      	b.n	801427e <_svfiprintf_r+0x52>
 80143a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80143ac:	460c      	mov	r4, r1
 80143ae:	2001      	movs	r0, #1
 80143b0:	e7a8      	b.n	8014304 <_svfiprintf_r+0xd8>
 80143b2:	2300      	movs	r3, #0
 80143b4:	3401      	adds	r4, #1
 80143b6:	9305      	str	r3, [sp, #20]
 80143b8:	4619      	mov	r1, r3
 80143ba:	f04f 0c0a 	mov.w	ip, #10
 80143be:	4620      	mov	r0, r4
 80143c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143c4:	3a30      	subs	r2, #48	@ 0x30
 80143c6:	2a09      	cmp	r2, #9
 80143c8:	d903      	bls.n	80143d2 <_svfiprintf_r+0x1a6>
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d0c6      	beq.n	801435c <_svfiprintf_r+0x130>
 80143ce:	9105      	str	r1, [sp, #20]
 80143d0:	e7c4      	b.n	801435c <_svfiprintf_r+0x130>
 80143d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80143d6:	4604      	mov	r4, r0
 80143d8:	2301      	movs	r3, #1
 80143da:	e7f0      	b.n	80143be <_svfiprintf_r+0x192>
 80143dc:	ab03      	add	r3, sp, #12
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	462a      	mov	r2, r5
 80143e2:	4b0e      	ldr	r3, [pc, #56]	@ (801441c <_svfiprintf_r+0x1f0>)
 80143e4:	a904      	add	r1, sp, #16
 80143e6:	4638      	mov	r0, r7
 80143e8:	f7fd ffae 	bl	8012348 <_printf_float>
 80143ec:	1c42      	adds	r2, r0, #1
 80143ee:	4606      	mov	r6, r0
 80143f0:	d1d6      	bne.n	80143a0 <_svfiprintf_r+0x174>
 80143f2:	89ab      	ldrh	r3, [r5, #12]
 80143f4:	065b      	lsls	r3, r3, #25
 80143f6:	f53f af2d 	bmi.w	8014254 <_svfiprintf_r+0x28>
 80143fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143fc:	e72c      	b.n	8014258 <_svfiprintf_r+0x2c>
 80143fe:	ab03      	add	r3, sp, #12
 8014400:	9300      	str	r3, [sp, #0]
 8014402:	462a      	mov	r2, r5
 8014404:	4b05      	ldr	r3, [pc, #20]	@ (801441c <_svfiprintf_r+0x1f0>)
 8014406:	a904      	add	r1, sp, #16
 8014408:	4638      	mov	r0, r7
 801440a:	f7fe fa25 	bl	8012858 <_printf_i>
 801440e:	e7ed      	b.n	80143ec <_svfiprintf_r+0x1c0>
 8014410:	08017638 	.word	0x08017638
 8014414:	08017642 	.word	0x08017642
 8014418:	08012349 	.word	0x08012349
 801441c:	08014175 	.word	0x08014175
 8014420:	0801763e 	.word	0x0801763e

08014424 <__sflush_r>:
 8014424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442c:	0716      	lsls	r6, r2, #28
 801442e:	4605      	mov	r5, r0
 8014430:	460c      	mov	r4, r1
 8014432:	d454      	bmi.n	80144de <__sflush_r+0xba>
 8014434:	684b      	ldr	r3, [r1, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	dc02      	bgt.n	8014440 <__sflush_r+0x1c>
 801443a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd48      	ble.n	80144d2 <__sflush_r+0xae>
 8014440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014442:	2e00      	cmp	r6, #0
 8014444:	d045      	beq.n	80144d2 <__sflush_r+0xae>
 8014446:	2300      	movs	r3, #0
 8014448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801444c:	682f      	ldr	r7, [r5, #0]
 801444e:	6a21      	ldr	r1, [r4, #32]
 8014450:	602b      	str	r3, [r5, #0]
 8014452:	d030      	beq.n	80144b6 <__sflush_r+0x92>
 8014454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014456:	89a3      	ldrh	r3, [r4, #12]
 8014458:	0759      	lsls	r1, r3, #29
 801445a:	d505      	bpl.n	8014468 <__sflush_r+0x44>
 801445c:	6863      	ldr	r3, [r4, #4]
 801445e:	1ad2      	subs	r2, r2, r3
 8014460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014462:	b10b      	cbz	r3, 8014468 <__sflush_r+0x44>
 8014464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014466:	1ad2      	subs	r2, r2, r3
 8014468:	2300      	movs	r3, #0
 801446a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801446c:	6a21      	ldr	r1, [r4, #32]
 801446e:	4628      	mov	r0, r5
 8014470:	47b0      	blx	r6
 8014472:	1c43      	adds	r3, r0, #1
 8014474:	89a3      	ldrh	r3, [r4, #12]
 8014476:	d106      	bne.n	8014486 <__sflush_r+0x62>
 8014478:	6829      	ldr	r1, [r5, #0]
 801447a:	291d      	cmp	r1, #29
 801447c:	d82b      	bhi.n	80144d6 <__sflush_r+0xb2>
 801447e:	4a2a      	ldr	r2, [pc, #168]	@ (8014528 <__sflush_r+0x104>)
 8014480:	410a      	asrs	r2, r1
 8014482:	07d6      	lsls	r6, r2, #31
 8014484:	d427      	bmi.n	80144d6 <__sflush_r+0xb2>
 8014486:	2200      	movs	r2, #0
 8014488:	6062      	str	r2, [r4, #4]
 801448a:	04d9      	lsls	r1, r3, #19
 801448c:	6922      	ldr	r2, [r4, #16]
 801448e:	6022      	str	r2, [r4, #0]
 8014490:	d504      	bpl.n	801449c <__sflush_r+0x78>
 8014492:	1c42      	adds	r2, r0, #1
 8014494:	d101      	bne.n	801449a <__sflush_r+0x76>
 8014496:	682b      	ldr	r3, [r5, #0]
 8014498:	b903      	cbnz	r3, 801449c <__sflush_r+0x78>
 801449a:	6560      	str	r0, [r4, #84]	@ 0x54
 801449c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801449e:	602f      	str	r7, [r5, #0]
 80144a0:	b1b9      	cbz	r1, 80144d2 <__sflush_r+0xae>
 80144a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144a6:	4299      	cmp	r1, r3
 80144a8:	d002      	beq.n	80144b0 <__sflush_r+0x8c>
 80144aa:	4628      	mov	r0, r5
 80144ac:	f7ff fa96 	bl	80139dc <_free_r>
 80144b0:	2300      	movs	r3, #0
 80144b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80144b4:	e00d      	b.n	80144d2 <__sflush_r+0xae>
 80144b6:	2301      	movs	r3, #1
 80144b8:	4628      	mov	r0, r5
 80144ba:	47b0      	blx	r6
 80144bc:	4602      	mov	r2, r0
 80144be:	1c50      	adds	r0, r2, #1
 80144c0:	d1c9      	bne.n	8014456 <__sflush_r+0x32>
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d0c6      	beq.n	8014456 <__sflush_r+0x32>
 80144c8:	2b1d      	cmp	r3, #29
 80144ca:	d001      	beq.n	80144d0 <__sflush_r+0xac>
 80144cc:	2b16      	cmp	r3, #22
 80144ce:	d11e      	bne.n	801450e <__sflush_r+0xea>
 80144d0:	602f      	str	r7, [r5, #0]
 80144d2:	2000      	movs	r0, #0
 80144d4:	e022      	b.n	801451c <__sflush_r+0xf8>
 80144d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144da:	b21b      	sxth	r3, r3
 80144dc:	e01b      	b.n	8014516 <__sflush_r+0xf2>
 80144de:	690f      	ldr	r7, [r1, #16]
 80144e0:	2f00      	cmp	r7, #0
 80144e2:	d0f6      	beq.n	80144d2 <__sflush_r+0xae>
 80144e4:	0793      	lsls	r3, r2, #30
 80144e6:	680e      	ldr	r6, [r1, #0]
 80144e8:	bf08      	it	eq
 80144ea:	694b      	ldreq	r3, [r1, #20]
 80144ec:	600f      	str	r7, [r1, #0]
 80144ee:	bf18      	it	ne
 80144f0:	2300      	movne	r3, #0
 80144f2:	eba6 0807 	sub.w	r8, r6, r7
 80144f6:	608b      	str	r3, [r1, #8]
 80144f8:	f1b8 0f00 	cmp.w	r8, #0
 80144fc:	dde9      	ble.n	80144d2 <__sflush_r+0xae>
 80144fe:	6a21      	ldr	r1, [r4, #32]
 8014500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014502:	4643      	mov	r3, r8
 8014504:	463a      	mov	r2, r7
 8014506:	4628      	mov	r0, r5
 8014508:	47b0      	blx	r6
 801450a:	2800      	cmp	r0, #0
 801450c:	dc08      	bgt.n	8014520 <__sflush_r+0xfc>
 801450e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014516:	81a3      	strh	r3, [r4, #12]
 8014518:	f04f 30ff 	mov.w	r0, #4294967295
 801451c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014520:	4407      	add	r7, r0
 8014522:	eba8 0800 	sub.w	r8, r8, r0
 8014526:	e7e7      	b.n	80144f8 <__sflush_r+0xd4>
 8014528:	dfbffffe 	.word	0xdfbffffe

0801452c <_fflush_r>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	690b      	ldr	r3, [r1, #16]
 8014530:	4605      	mov	r5, r0
 8014532:	460c      	mov	r4, r1
 8014534:	b913      	cbnz	r3, 801453c <_fflush_r+0x10>
 8014536:	2500      	movs	r5, #0
 8014538:	4628      	mov	r0, r5
 801453a:	bd38      	pop	{r3, r4, r5, pc}
 801453c:	b118      	cbz	r0, 8014546 <_fflush_r+0x1a>
 801453e:	6a03      	ldr	r3, [r0, #32]
 8014540:	b90b      	cbnz	r3, 8014546 <_fflush_r+0x1a>
 8014542:	f7fe fb35 	bl	8012bb0 <__sinit>
 8014546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d0f3      	beq.n	8014536 <_fflush_r+0xa>
 801454e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014550:	07d0      	lsls	r0, r2, #31
 8014552:	d404      	bmi.n	801455e <_fflush_r+0x32>
 8014554:	0599      	lsls	r1, r3, #22
 8014556:	d402      	bmi.n	801455e <_fflush_r+0x32>
 8014558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801455a:	f7fe fc50 	bl	8012dfe <__retarget_lock_acquire_recursive>
 801455e:	4628      	mov	r0, r5
 8014560:	4621      	mov	r1, r4
 8014562:	f7ff ff5f 	bl	8014424 <__sflush_r>
 8014566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014568:	07da      	lsls	r2, r3, #31
 801456a:	4605      	mov	r5, r0
 801456c:	d4e4      	bmi.n	8014538 <_fflush_r+0xc>
 801456e:	89a3      	ldrh	r3, [r4, #12]
 8014570:	059b      	lsls	r3, r3, #22
 8014572:	d4e1      	bmi.n	8014538 <_fflush_r+0xc>
 8014574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014576:	f7fe fc43 	bl	8012e00 <__retarget_lock_release_recursive>
 801457a:	e7dd      	b.n	8014538 <_fflush_r+0xc>

0801457c <memmove>:
 801457c:	4288      	cmp	r0, r1
 801457e:	b510      	push	{r4, lr}
 8014580:	eb01 0402 	add.w	r4, r1, r2
 8014584:	d902      	bls.n	801458c <memmove+0x10>
 8014586:	4284      	cmp	r4, r0
 8014588:	4623      	mov	r3, r4
 801458a:	d807      	bhi.n	801459c <memmove+0x20>
 801458c:	1e43      	subs	r3, r0, #1
 801458e:	42a1      	cmp	r1, r4
 8014590:	d008      	beq.n	80145a4 <memmove+0x28>
 8014592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014596:	f803 2f01 	strb.w	r2, [r3, #1]!
 801459a:	e7f8      	b.n	801458e <memmove+0x12>
 801459c:	4402      	add	r2, r0
 801459e:	4601      	mov	r1, r0
 80145a0:	428a      	cmp	r2, r1
 80145a2:	d100      	bne.n	80145a6 <memmove+0x2a>
 80145a4:	bd10      	pop	{r4, pc}
 80145a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145ae:	e7f7      	b.n	80145a0 <memmove+0x24>

080145b0 <__assert_func>:
 80145b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145b2:	4614      	mov	r4, r2
 80145b4:	461a      	mov	r2, r3
 80145b6:	4b09      	ldr	r3, [pc, #36]	@ (80145dc <__assert_func+0x2c>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4605      	mov	r5, r0
 80145bc:	68d8      	ldr	r0, [r3, #12]
 80145be:	b954      	cbnz	r4, 80145d6 <__assert_func+0x26>
 80145c0:	4b07      	ldr	r3, [pc, #28]	@ (80145e0 <__assert_func+0x30>)
 80145c2:	461c      	mov	r4, r3
 80145c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145c8:	9100      	str	r1, [sp, #0]
 80145ca:	462b      	mov	r3, r5
 80145cc:	4905      	ldr	r1, [pc, #20]	@ (80145e4 <__assert_func+0x34>)
 80145ce:	f000 f86f 	bl	80146b0 <fiprintf>
 80145d2:	f000 f87f 	bl	80146d4 <abort>
 80145d6:	4b04      	ldr	r3, [pc, #16]	@ (80145e8 <__assert_func+0x38>)
 80145d8:	e7f4      	b.n	80145c4 <__assert_func+0x14>
 80145da:	bf00      	nop
 80145dc:	24000138 	.word	0x24000138
 80145e0:	0801768e 	.word	0x0801768e
 80145e4:	08017660 	.word	0x08017660
 80145e8:	08017653 	.word	0x08017653

080145ec <_calloc_r>:
 80145ec:	b570      	push	{r4, r5, r6, lr}
 80145ee:	fba1 5402 	umull	r5, r4, r1, r2
 80145f2:	b93c      	cbnz	r4, 8014604 <_calloc_r+0x18>
 80145f4:	4629      	mov	r1, r5
 80145f6:	f7fd fd8d 	bl	8012114 <_malloc_r>
 80145fa:	4606      	mov	r6, r0
 80145fc:	b928      	cbnz	r0, 801460a <_calloc_r+0x1e>
 80145fe:	2600      	movs	r6, #0
 8014600:	4630      	mov	r0, r6
 8014602:	bd70      	pop	{r4, r5, r6, pc}
 8014604:	220c      	movs	r2, #12
 8014606:	6002      	str	r2, [r0, #0]
 8014608:	e7f9      	b.n	80145fe <_calloc_r+0x12>
 801460a:	462a      	mov	r2, r5
 801460c:	4621      	mov	r1, r4
 801460e:	f7fe fb68 	bl	8012ce2 <memset>
 8014612:	e7f5      	b.n	8014600 <_calloc_r+0x14>

08014614 <__ascii_mbtowc>:
 8014614:	b082      	sub	sp, #8
 8014616:	b901      	cbnz	r1, 801461a <__ascii_mbtowc+0x6>
 8014618:	a901      	add	r1, sp, #4
 801461a:	b142      	cbz	r2, 801462e <__ascii_mbtowc+0x1a>
 801461c:	b14b      	cbz	r3, 8014632 <__ascii_mbtowc+0x1e>
 801461e:	7813      	ldrb	r3, [r2, #0]
 8014620:	600b      	str	r3, [r1, #0]
 8014622:	7812      	ldrb	r2, [r2, #0]
 8014624:	1e10      	subs	r0, r2, #0
 8014626:	bf18      	it	ne
 8014628:	2001      	movne	r0, #1
 801462a:	b002      	add	sp, #8
 801462c:	4770      	bx	lr
 801462e:	4610      	mov	r0, r2
 8014630:	e7fb      	b.n	801462a <__ascii_mbtowc+0x16>
 8014632:	f06f 0001 	mvn.w	r0, #1
 8014636:	e7f8      	b.n	801462a <__ascii_mbtowc+0x16>

08014638 <_realloc_r>:
 8014638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	4680      	mov	r8, r0
 801463e:	4615      	mov	r5, r2
 8014640:	460c      	mov	r4, r1
 8014642:	b921      	cbnz	r1, 801464e <_realloc_r+0x16>
 8014644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014648:	4611      	mov	r1, r2
 801464a:	f7fd bd63 	b.w	8012114 <_malloc_r>
 801464e:	b92a      	cbnz	r2, 801465c <_realloc_r+0x24>
 8014650:	f7ff f9c4 	bl	80139dc <_free_r>
 8014654:	2400      	movs	r4, #0
 8014656:	4620      	mov	r0, r4
 8014658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801465c:	f000 f841 	bl	80146e2 <_malloc_usable_size_r>
 8014660:	4285      	cmp	r5, r0
 8014662:	4606      	mov	r6, r0
 8014664:	d802      	bhi.n	801466c <_realloc_r+0x34>
 8014666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801466a:	d8f4      	bhi.n	8014656 <_realloc_r+0x1e>
 801466c:	4629      	mov	r1, r5
 801466e:	4640      	mov	r0, r8
 8014670:	f7fd fd50 	bl	8012114 <_malloc_r>
 8014674:	4607      	mov	r7, r0
 8014676:	2800      	cmp	r0, #0
 8014678:	d0ec      	beq.n	8014654 <_realloc_r+0x1c>
 801467a:	42b5      	cmp	r5, r6
 801467c:	462a      	mov	r2, r5
 801467e:	4621      	mov	r1, r4
 8014680:	bf28      	it	cs
 8014682:	4632      	movcs	r2, r6
 8014684:	f7fe fbbd 	bl	8012e02 <memcpy>
 8014688:	4621      	mov	r1, r4
 801468a:	4640      	mov	r0, r8
 801468c:	f7ff f9a6 	bl	80139dc <_free_r>
 8014690:	463c      	mov	r4, r7
 8014692:	e7e0      	b.n	8014656 <_realloc_r+0x1e>

08014694 <__ascii_wctomb>:
 8014694:	4603      	mov	r3, r0
 8014696:	4608      	mov	r0, r1
 8014698:	b141      	cbz	r1, 80146ac <__ascii_wctomb+0x18>
 801469a:	2aff      	cmp	r2, #255	@ 0xff
 801469c:	d904      	bls.n	80146a8 <__ascii_wctomb+0x14>
 801469e:	228a      	movs	r2, #138	@ 0x8a
 80146a0:	601a      	str	r2, [r3, #0]
 80146a2:	f04f 30ff 	mov.w	r0, #4294967295
 80146a6:	4770      	bx	lr
 80146a8:	700a      	strb	r2, [r1, #0]
 80146aa:	2001      	movs	r0, #1
 80146ac:	4770      	bx	lr
	...

080146b0 <fiprintf>:
 80146b0:	b40e      	push	{r1, r2, r3}
 80146b2:	b503      	push	{r0, r1, lr}
 80146b4:	4601      	mov	r1, r0
 80146b6:	ab03      	add	r3, sp, #12
 80146b8:	4805      	ldr	r0, [pc, #20]	@ (80146d0 <fiprintf+0x20>)
 80146ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80146be:	6800      	ldr	r0, [r0, #0]
 80146c0:	9301      	str	r3, [sp, #4]
 80146c2:	f000 f83f 	bl	8014744 <_vfiprintf_r>
 80146c6:	b002      	add	sp, #8
 80146c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80146cc:	b003      	add	sp, #12
 80146ce:	4770      	bx	lr
 80146d0:	24000138 	.word	0x24000138

080146d4 <abort>:
 80146d4:	b508      	push	{r3, lr}
 80146d6:	2006      	movs	r0, #6
 80146d8:	f000 fa08 	bl	8014aec <raise>
 80146dc:	2001      	movs	r0, #1
 80146de:	f7ed f863 	bl	80017a8 <_exit>

080146e2 <_malloc_usable_size_r>:
 80146e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146e6:	1f18      	subs	r0, r3, #4
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	bfbc      	itt	lt
 80146ec:	580b      	ldrlt	r3, [r1, r0]
 80146ee:	18c0      	addlt	r0, r0, r3
 80146f0:	4770      	bx	lr

080146f2 <__sfputc_r>:
 80146f2:	6893      	ldr	r3, [r2, #8]
 80146f4:	3b01      	subs	r3, #1
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	b410      	push	{r4}
 80146fa:	6093      	str	r3, [r2, #8]
 80146fc:	da08      	bge.n	8014710 <__sfputc_r+0x1e>
 80146fe:	6994      	ldr	r4, [r2, #24]
 8014700:	42a3      	cmp	r3, r4
 8014702:	db01      	blt.n	8014708 <__sfputc_r+0x16>
 8014704:	290a      	cmp	r1, #10
 8014706:	d103      	bne.n	8014710 <__sfputc_r+0x1e>
 8014708:	f85d 4b04 	ldr.w	r4, [sp], #4
 801470c:	f000 b932 	b.w	8014974 <__swbuf_r>
 8014710:	6813      	ldr	r3, [r2, #0]
 8014712:	1c58      	adds	r0, r3, #1
 8014714:	6010      	str	r0, [r2, #0]
 8014716:	7019      	strb	r1, [r3, #0]
 8014718:	4608      	mov	r0, r1
 801471a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801471e:	4770      	bx	lr

08014720 <__sfputs_r>:
 8014720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014722:	4606      	mov	r6, r0
 8014724:	460f      	mov	r7, r1
 8014726:	4614      	mov	r4, r2
 8014728:	18d5      	adds	r5, r2, r3
 801472a:	42ac      	cmp	r4, r5
 801472c:	d101      	bne.n	8014732 <__sfputs_r+0x12>
 801472e:	2000      	movs	r0, #0
 8014730:	e007      	b.n	8014742 <__sfputs_r+0x22>
 8014732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014736:	463a      	mov	r2, r7
 8014738:	4630      	mov	r0, r6
 801473a:	f7ff ffda 	bl	80146f2 <__sfputc_r>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	d1f3      	bne.n	801472a <__sfputs_r+0xa>
 8014742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014744 <_vfiprintf_r>:
 8014744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014748:	460d      	mov	r5, r1
 801474a:	b09d      	sub	sp, #116	@ 0x74
 801474c:	4614      	mov	r4, r2
 801474e:	4698      	mov	r8, r3
 8014750:	4606      	mov	r6, r0
 8014752:	b118      	cbz	r0, 801475c <_vfiprintf_r+0x18>
 8014754:	6a03      	ldr	r3, [r0, #32]
 8014756:	b90b      	cbnz	r3, 801475c <_vfiprintf_r+0x18>
 8014758:	f7fe fa2a 	bl	8012bb0 <__sinit>
 801475c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801475e:	07d9      	lsls	r1, r3, #31
 8014760:	d405      	bmi.n	801476e <_vfiprintf_r+0x2a>
 8014762:	89ab      	ldrh	r3, [r5, #12]
 8014764:	059a      	lsls	r2, r3, #22
 8014766:	d402      	bmi.n	801476e <_vfiprintf_r+0x2a>
 8014768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801476a:	f7fe fb48 	bl	8012dfe <__retarget_lock_acquire_recursive>
 801476e:	89ab      	ldrh	r3, [r5, #12]
 8014770:	071b      	lsls	r3, r3, #28
 8014772:	d501      	bpl.n	8014778 <_vfiprintf_r+0x34>
 8014774:	692b      	ldr	r3, [r5, #16]
 8014776:	b99b      	cbnz	r3, 80147a0 <_vfiprintf_r+0x5c>
 8014778:	4629      	mov	r1, r5
 801477a:	4630      	mov	r0, r6
 801477c:	f000 f938 	bl	80149f0 <__swsetup_r>
 8014780:	b170      	cbz	r0, 80147a0 <_vfiprintf_r+0x5c>
 8014782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014784:	07dc      	lsls	r4, r3, #31
 8014786:	d504      	bpl.n	8014792 <_vfiprintf_r+0x4e>
 8014788:	f04f 30ff 	mov.w	r0, #4294967295
 801478c:	b01d      	add	sp, #116	@ 0x74
 801478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014792:	89ab      	ldrh	r3, [r5, #12]
 8014794:	0598      	lsls	r0, r3, #22
 8014796:	d4f7      	bmi.n	8014788 <_vfiprintf_r+0x44>
 8014798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801479a:	f7fe fb31 	bl	8012e00 <__retarget_lock_release_recursive>
 801479e:	e7f3      	b.n	8014788 <_vfiprintf_r+0x44>
 80147a0:	2300      	movs	r3, #0
 80147a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80147a4:	2320      	movs	r3, #32
 80147a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80147aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80147ae:	2330      	movs	r3, #48	@ 0x30
 80147b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014960 <_vfiprintf_r+0x21c>
 80147b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80147b8:	f04f 0901 	mov.w	r9, #1
 80147bc:	4623      	mov	r3, r4
 80147be:	469a      	mov	sl, r3
 80147c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147c4:	b10a      	cbz	r2, 80147ca <_vfiprintf_r+0x86>
 80147c6:	2a25      	cmp	r2, #37	@ 0x25
 80147c8:	d1f9      	bne.n	80147be <_vfiprintf_r+0x7a>
 80147ca:	ebba 0b04 	subs.w	fp, sl, r4
 80147ce:	d00b      	beq.n	80147e8 <_vfiprintf_r+0xa4>
 80147d0:	465b      	mov	r3, fp
 80147d2:	4622      	mov	r2, r4
 80147d4:	4629      	mov	r1, r5
 80147d6:	4630      	mov	r0, r6
 80147d8:	f7ff ffa2 	bl	8014720 <__sfputs_r>
 80147dc:	3001      	adds	r0, #1
 80147de:	f000 80a7 	beq.w	8014930 <_vfiprintf_r+0x1ec>
 80147e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80147e4:	445a      	add	r2, fp
 80147e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80147e8:	f89a 3000 	ldrb.w	r3, [sl]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f000 809f 	beq.w	8014930 <_vfiprintf_r+0x1ec>
 80147f2:	2300      	movs	r3, #0
 80147f4:	f04f 32ff 	mov.w	r2, #4294967295
 80147f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147fc:	f10a 0a01 	add.w	sl, sl, #1
 8014800:	9304      	str	r3, [sp, #16]
 8014802:	9307      	str	r3, [sp, #28]
 8014804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014808:	931a      	str	r3, [sp, #104]	@ 0x68
 801480a:	4654      	mov	r4, sl
 801480c:	2205      	movs	r2, #5
 801480e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014812:	4853      	ldr	r0, [pc, #332]	@ (8014960 <_vfiprintf_r+0x21c>)
 8014814:	f7eb fd64 	bl	80002e0 <memchr>
 8014818:	9a04      	ldr	r2, [sp, #16]
 801481a:	b9d8      	cbnz	r0, 8014854 <_vfiprintf_r+0x110>
 801481c:	06d1      	lsls	r1, r2, #27
 801481e:	bf44      	itt	mi
 8014820:	2320      	movmi	r3, #32
 8014822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014826:	0713      	lsls	r3, r2, #28
 8014828:	bf44      	itt	mi
 801482a:	232b      	movmi	r3, #43	@ 0x2b
 801482c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014830:	f89a 3000 	ldrb.w	r3, [sl]
 8014834:	2b2a      	cmp	r3, #42	@ 0x2a
 8014836:	d015      	beq.n	8014864 <_vfiprintf_r+0x120>
 8014838:	9a07      	ldr	r2, [sp, #28]
 801483a:	4654      	mov	r4, sl
 801483c:	2000      	movs	r0, #0
 801483e:	f04f 0c0a 	mov.w	ip, #10
 8014842:	4621      	mov	r1, r4
 8014844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014848:	3b30      	subs	r3, #48	@ 0x30
 801484a:	2b09      	cmp	r3, #9
 801484c:	d94b      	bls.n	80148e6 <_vfiprintf_r+0x1a2>
 801484e:	b1b0      	cbz	r0, 801487e <_vfiprintf_r+0x13a>
 8014850:	9207      	str	r2, [sp, #28]
 8014852:	e014      	b.n	801487e <_vfiprintf_r+0x13a>
 8014854:	eba0 0308 	sub.w	r3, r0, r8
 8014858:	fa09 f303 	lsl.w	r3, r9, r3
 801485c:	4313      	orrs	r3, r2
 801485e:	9304      	str	r3, [sp, #16]
 8014860:	46a2      	mov	sl, r4
 8014862:	e7d2      	b.n	801480a <_vfiprintf_r+0xc6>
 8014864:	9b03      	ldr	r3, [sp, #12]
 8014866:	1d19      	adds	r1, r3, #4
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	9103      	str	r1, [sp, #12]
 801486c:	2b00      	cmp	r3, #0
 801486e:	bfbb      	ittet	lt
 8014870:	425b      	neglt	r3, r3
 8014872:	f042 0202 	orrlt.w	r2, r2, #2
 8014876:	9307      	strge	r3, [sp, #28]
 8014878:	9307      	strlt	r3, [sp, #28]
 801487a:	bfb8      	it	lt
 801487c:	9204      	strlt	r2, [sp, #16]
 801487e:	7823      	ldrb	r3, [r4, #0]
 8014880:	2b2e      	cmp	r3, #46	@ 0x2e
 8014882:	d10a      	bne.n	801489a <_vfiprintf_r+0x156>
 8014884:	7863      	ldrb	r3, [r4, #1]
 8014886:	2b2a      	cmp	r3, #42	@ 0x2a
 8014888:	d132      	bne.n	80148f0 <_vfiprintf_r+0x1ac>
 801488a:	9b03      	ldr	r3, [sp, #12]
 801488c:	1d1a      	adds	r2, r3, #4
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	9203      	str	r2, [sp, #12]
 8014892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014896:	3402      	adds	r4, #2
 8014898:	9305      	str	r3, [sp, #20]
 801489a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014970 <_vfiprintf_r+0x22c>
 801489e:	7821      	ldrb	r1, [r4, #0]
 80148a0:	2203      	movs	r2, #3
 80148a2:	4650      	mov	r0, sl
 80148a4:	f7eb fd1c 	bl	80002e0 <memchr>
 80148a8:	b138      	cbz	r0, 80148ba <_vfiprintf_r+0x176>
 80148aa:	9b04      	ldr	r3, [sp, #16]
 80148ac:	eba0 000a 	sub.w	r0, r0, sl
 80148b0:	2240      	movs	r2, #64	@ 0x40
 80148b2:	4082      	lsls	r2, r0
 80148b4:	4313      	orrs	r3, r2
 80148b6:	3401      	adds	r4, #1
 80148b8:	9304      	str	r3, [sp, #16]
 80148ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148be:	4829      	ldr	r0, [pc, #164]	@ (8014964 <_vfiprintf_r+0x220>)
 80148c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80148c4:	2206      	movs	r2, #6
 80148c6:	f7eb fd0b 	bl	80002e0 <memchr>
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d03f      	beq.n	801494e <_vfiprintf_r+0x20a>
 80148ce:	4b26      	ldr	r3, [pc, #152]	@ (8014968 <_vfiprintf_r+0x224>)
 80148d0:	bb1b      	cbnz	r3, 801491a <_vfiprintf_r+0x1d6>
 80148d2:	9b03      	ldr	r3, [sp, #12]
 80148d4:	3307      	adds	r3, #7
 80148d6:	f023 0307 	bic.w	r3, r3, #7
 80148da:	3308      	adds	r3, #8
 80148dc:	9303      	str	r3, [sp, #12]
 80148de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148e0:	443b      	add	r3, r7
 80148e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80148e4:	e76a      	b.n	80147bc <_vfiprintf_r+0x78>
 80148e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80148ea:	460c      	mov	r4, r1
 80148ec:	2001      	movs	r0, #1
 80148ee:	e7a8      	b.n	8014842 <_vfiprintf_r+0xfe>
 80148f0:	2300      	movs	r3, #0
 80148f2:	3401      	adds	r4, #1
 80148f4:	9305      	str	r3, [sp, #20]
 80148f6:	4619      	mov	r1, r3
 80148f8:	f04f 0c0a 	mov.w	ip, #10
 80148fc:	4620      	mov	r0, r4
 80148fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014902:	3a30      	subs	r2, #48	@ 0x30
 8014904:	2a09      	cmp	r2, #9
 8014906:	d903      	bls.n	8014910 <_vfiprintf_r+0x1cc>
 8014908:	2b00      	cmp	r3, #0
 801490a:	d0c6      	beq.n	801489a <_vfiprintf_r+0x156>
 801490c:	9105      	str	r1, [sp, #20]
 801490e:	e7c4      	b.n	801489a <_vfiprintf_r+0x156>
 8014910:	fb0c 2101 	mla	r1, ip, r1, r2
 8014914:	4604      	mov	r4, r0
 8014916:	2301      	movs	r3, #1
 8014918:	e7f0      	b.n	80148fc <_vfiprintf_r+0x1b8>
 801491a:	ab03      	add	r3, sp, #12
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	462a      	mov	r2, r5
 8014920:	4b12      	ldr	r3, [pc, #72]	@ (801496c <_vfiprintf_r+0x228>)
 8014922:	a904      	add	r1, sp, #16
 8014924:	4630      	mov	r0, r6
 8014926:	f7fd fd0f 	bl	8012348 <_printf_float>
 801492a:	4607      	mov	r7, r0
 801492c:	1c78      	adds	r0, r7, #1
 801492e:	d1d6      	bne.n	80148de <_vfiprintf_r+0x19a>
 8014930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014932:	07d9      	lsls	r1, r3, #31
 8014934:	d405      	bmi.n	8014942 <_vfiprintf_r+0x1fe>
 8014936:	89ab      	ldrh	r3, [r5, #12]
 8014938:	059a      	lsls	r2, r3, #22
 801493a:	d402      	bmi.n	8014942 <_vfiprintf_r+0x1fe>
 801493c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801493e:	f7fe fa5f 	bl	8012e00 <__retarget_lock_release_recursive>
 8014942:	89ab      	ldrh	r3, [r5, #12]
 8014944:	065b      	lsls	r3, r3, #25
 8014946:	f53f af1f 	bmi.w	8014788 <_vfiprintf_r+0x44>
 801494a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801494c:	e71e      	b.n	801478c <_vfiprintf_r+0x48>
 801494e:	ab03      	add	r3, sp, #12
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	462a      	mov	r2, r5
 8014954:	4b05      	ldr	r3, [pc, #20]	@ (801496c <_vfiprintf_r+0x228>)
 8014956:	a904      	add	r1, sp, #16
 8014958:	4630      	mov	r0, r6
 801495a:	f7fd ff7d 	bl	8012858 <_printf_i>
 801495e:	e7e4      	b.n	801492a <_vfiprintf_r+0x1e6>
 8014960:	08017638 	.word	0x08017638
 8014964:	08017642 	.word	0x08017642
 8014968:	08012349 	.word	0x08012349
 801496c:	08014721 	.word	0x08014721
 8014970:	0801763e 	.word	0x0801763e

08014974 <__swbuf_r>:
 8014974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014976:	460e      	mov	r6, r1
 8014978:	4614      	mov	r4, r2
 801497a:	4605      	mov	r5, r0
 801497c:	b118      	cbz	r0, 8014986 <__swbuf_r+0x12>
 801497e:	6a03      	ldr	r3, [r0, #32]
 8014980:	b90b      	cbnz	r3, 8014986 <__swbuf_r+0x12>
 8014982:	f7fe f915 	bl	8012bb0 <__sinit>
 8014986:	69a3      	ldr	r3, [r4, #24]
 8014988:	60a3      	str	r3, [r4, #8]
 801498a:	89a3      	ldrh	r3, [r4, #12]
 801498c:	071a      	lsls	r2, r3, #28
 801498e:	d501      	bpl.n	8014994 <__swbuf_r+0x20>
 8014990:	6923      	ldr	r3, [r4, #16]
 8014992:	b943      	cbnz	r3, 80149a6 <__swbuf_r+0x32>
 8014994:	4621      	mov	r1, r4
 8014996:	4628      	mov	r0, r5
 8014998:	f000 f82a 	bl	80149f0 <__swsetup_r>
 801499c:	b118      	cbz	r0, 80149a6 <__swbuf_r+0x32>
 801499e:	f04f 37ff 	mov.w	r7, #4294967295
 80149a2:	4638      	mov	r0, r7
 80149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a6:	6823      	ldr	r3, [r4, #0]
 80149a8:	6922      	ldr	r2, [r4, #16]
 80149aa:	1a98      	subs	r0, r3, r2
 80149ac:	6963      	ldr	r3, [r4, #20]
 80149ae:	b2f6      	uxtb	r6, r6
 80149b0:	4283      	cmp	r3, r0
 80149b2:	4637      	mov	r7, r6
 80149b4:	dc05      	bgt.n	80149c2 <__swbuf_r+0x4e>
 80149b6:	4621      	mov	r1, r4
 80149b8:	4628      	mov	r0, r5
 80149ba:	f7ff fdb7 	bl	801452c <_fflush_r>
 80149be:	2800      	cmp	r0, #0
 80149c0:	d1ed      	bne.n	801499e <__swbuf_r+0x2a>
 80149c2:	68a3      	ldr	r3, [r4, #8]
 80149c4:	3b01      	subs	r3, #1
 80149c6:	60a3      	str	r3, [r4, #8]
 80149c8:	6823      	ldr	r3, [r4, #0]
 80149ca:	1c5a      	adds	r2, r3, #1
 80149cc:	6022      	str	r2, [r4, #0]
 80149ce:	701e      	strb	r6, [r3, #0]
 80149d0:	6962      	ldr	r2, [r4, #20]
 80149d2:	1c43      	adds	r3, r0, #1
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d004      	beq.n	80149e2 <__swbuf_r+0x6e>
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	07db      	lsls	r3, r3, #31
 80149dc:	d5e1      	bpl.n	80149a2 <__swbuf_r+0x2e>
 80149de:	2e0a      	cmp	r6, #10
 80149e0:	d1df      	bne.n	80149a2 <__swbuf_r+0x2e>
 80149e2:	4621      	mov	r1, r4
 80149e4:	4628      	mov	r0, r5
 80149e6:	f7ff fda1 	bl	801452c <_fflush_r>
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d0d9      	beq.n	80149a2 <__swbuf_r+0x2e>
 80149ee:	e7d6      	b.n	801499e <__swbuf_r+0x2a>

080149f0 <__swsetup_r>:
 80149f0:	b538      	push	{r3, r4, r5, lr}
 80149f2:	4b29      	ldr	r3, [pc, #164]	@ (8014a98 <__swsetup_r+0xa8>)
 80149f4:	4605      	mov	r5, r0
 80149f6:	6818      	ldr	r0, [r3, #0]
 80149f8:	460c      	mov	r4, r1
 80149fa:	b118      	cbz	r0, 8014a04 <__swsetup_r+0x14>
 80149fc:	6a03      	ldr	r3, [r0, #32]
 80149fe:	b90b      	cbnz	r3, 8014a04 <__swsetup_r+0x14>
 8014a00:	f7fe f8d6 	bl	8012bb0 <__sinit>
 8014a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a08:	0719      	lsls	r1, r3, #28
 8014a0a:	d422      	bmi.n	8014a52 <__swsetup_r+0x62>
 8014a0c:	06da      	lsls	r2, r3, #27
 8014a0e:	d407      	bmi.n	8014a20 <__swsetup_r+0x30>
 8014a10:	2209      	movs	r2, #9
 8014a12:	602a      	str	r2, [r5, #0]
 8014a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a18:	81a3      	strh	r3, [r4, #12]
 8014a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1e:	e033      	b.n	8014a88 <__swsetup_r+0x98>
 8014a20:	0758      	lsls	r0, r3, #29
 8014a22:	d512      	bpl.n	8014a4a <__swsetup_r+0x5a>
 8014a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014a26:	b141      	cbz	r1, 8014a3a <__swsetup_r+0x4a>
 8014a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014a2c:	4299      	cmp	r1, r3
 8014a2e:	d002      	beq.n	8014a36 <__swsetup_r+0x46>
 8014a30:	4628      	mov	r0, r5
 8014a32:	f7fe ffd3 	bl	80139dc <_free_r>
 8014a36:	2300      	movs	r3, #0
 8014a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014a40:	81a3      	strh	r3, [r4, #12]
 8014a42:	2300      	movs	r3, #0
 8014a44:	6063      	str	r3, [r4, #4]
 8014a46:	6923      	ldr	r3, [r4, #16]
 8014a48:	6023      	str	r3, [r4, #0]
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	f043 0308 	orr.w	r3, r3, #8
 8014a50:	81a3      	strh	r3, [r4, #12]
 8014a52:	6923      	ldr	r3, [r4, #16]
 8014a54:	b94b      	cbnz	r3, 8014a6a <__swsetup_r+0x7a>
 8014a56:	89a3      	ldrh	r3, [r4, #12]
 8014a58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a60:	d003      	beq.n	8014a6a <__swsetup_r+0x7a>
 8014a62:	4621      	mov	r1, r4
 8014a64:	4628      	mov	r0, r5
 8014a66:	f000 f883 	bl	8014b70 <__smakebuf_r>
 8014a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a6e:	f013 0201 	ands.w	r2, r3, #1
 8014a72:	d00a      	beq.n	8014a8a <__swsetup_r+0x9a>
 8014a74:	2200      	movs	r2, #0
 8014a76:	60a2      	str	r2, [r4, #8]
 8014a78:	6962      	ldr	r2, [r4, #20]
 8014a7a:	4252      	negs	r2, r2
 8014a7c:	61a2      	str	r2, [r4, #24]
 8014a7e:	6922      	ldr	r2, [r4, #16]
 8014a80:	b942      	cbnz	r2, 8014a94 <__swsetup_r+0xa4>
 8014a82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014a86:	d1c5      	bne.n	8014a14 <__swsetup_r+0x24>
 8014a88:	bd38      	pop	{r3, r4, r5, pc}
 8014a8a:	0799      	lsls	r1, r3, #30
 8014a8c:	bf58      	it	pl
 8014a8e:	6962      	ldrpl	r2, [r4, #20]
 8014a90:	60a2      	str	r2, [r4, #8]
 8014a92:	e7f4      	b.n	8014a7e <__swsetup_r+0x8e>
 8014a94:	2000      	movs	r0, #0
 8014a96:	e7f7      	b.n	8014a88 <__swsetup_r+0x98>
 8014a98:	24000138 	.word	0x24000138

08014a9c <_raise_r>:
 8014a9c:	291f      	cmp	r1, #31
 8014a9e:	b538      	push	{r3, r4, r5, lr}
 8014aa0:	4605      	mov	r5, r0
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	d904      	bls.n	8014ab0 <_raise_r+0x14>
 8014aa6:	2316      	movs	r3, #22
 8014aa8:	6003      	str	r3, [r0, #0]
 8014aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8014aae:	bd38      	pop	{r3, r4, r5, pc}
 8014ab0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014ab2:	b112      	cbz	r2, 8014aba <_raise_r+0x1e>
 8014ab4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ab8:	b94b      	cbnz	r3, 8014ace <_raise_r+0x32>
 8014aba:	4628      	mov	r0, r5
 8014abc:	f000 f830 	bl	8014b20 <_getpid_r>
 8014ac0:	4622      	mov	r2, r4
 8014ac2:	4601      	mov	r1, r0
 8014ac4:	4628      	mov	r0, r5
 8014ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014aca:	f000 b817 	b.w	8014afc <_kill_r>
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d00a      	beq.n	8014ae8 <_raise_r+0x4c>
 8014ad2:	1c59      	adds	r1, r3, #1
 8014ad4:	d103      	bne.n	8014ade <_raise_r+0x42>
 8014ad6:	2316      	movs	r3, #22
 8014ad8:	6003      	str	r3, [r0, #0]
 8014ada:	2001      	movs	r0, #1
 8014adc:	e7e7      	b.n	8014aae <_raise_r+0x12>
 8014ade:	2100      	movs	r1, #0
 8014ae0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014ae4:	4620      	mov	r0, r4
 8014ae6:	4798      	blx	r3
 8014ae8:	2000      	movs	r0, #0
 8014aea:	e7e0      	b.n	8014aae <_raise_r+0x12>

08014aec <raise>:
 8014aec:	4b02      	ldr	r3, [pc, #8]	@ (8014af8 <raise+0xc>)
 8014aee:	4601      	mov	r1, r0
 8014af0:	6818      	ldr	r0, [r3, #0]
 8014af2:	f7ff bfd3 	b.w	8014a9c <_raise_r>
 8014af6:	bf00      	nop
 8014af8:	24000138 	.word	0x24000138

08014afc <_kill_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	4d07      	ldr	r5, [pc, #28]	@ (8014b1c <_kill_r+0x20>)
 8014b00:	2300      	movs	r3, #0
 8014b02:	4604      	mov	r4, r0
 8014b04:	4608      	mov	r0, r1
 8014b06:	4611      	mov	r1, r2
 8014b08:	602b      	str	r3, [r5, #0]
 8014b0a:	f7ec fe3d 	bl	8001788 <_kill>
 8014b0e:	1c43      	adds	r3, r0, #1
 8014b10:	d102      	bne.n	8014b18 <_kill_r+0x1c>
 8014b12:	682b      	ldr	r3, [r5, #0]
 8014b14:	b103      	cbz	r3, 8014b18 <_kill_r+0x1c>
 8014b16:	6023      	str	r3, [r4, #0]
 8014b18:	bd38      	pop	{r3, r4, r5, pc}
 8014b1a:	bf00      	nop
 8014b1c:	2400963c 	.word	0x2400963c

08014b20 <_getpid_r>:
 8014b20:	f7ec be2a 	b.w	8001778 <_getpid>

08014b24 <__swhatbuf_r>:
 8014b24:	b570      	push	{r4, r5, r6, lr}
 8014b26:	460c      	mov	r4, r1
 8014b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b2c:	2900      	cmp	r1, #0
 8014b2e:	b096      	sub	sp, #88	@ 0x58
 8014b30:	4615      	mov	r5, r2
 8014b32:	461e      	mov	r6, r3
 8014b34:	da0d      	bge.n	8014b52 <__swhatbuf_r+0x2e>
 8014b36:	89a3      	ldrh	r3, [r4, #12]
 8014b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014b3c:	f04f 0100 	mov.w	r1, #0
 8014b40:	bf14      	ite	ne
 8014b42:	2340      	movne	r3, #64	@ 0x40
 8014b44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014b48:	2000      	movs	r0, #0
 8014b4a:	6031      	str	r1, [r6, #0]
 8014b4c:	602b      	str	r3, [r5, #0]
 8014b4e:	b016      	add	sp, #88	@ 0x58
 8014b50:	bd70      	pop	{r4, r5, r6, pc}
 8014b52:	466a      	mov	r2, sp
 8014b54:	f000 f848 	bl	8014be8 <_fstat_r>
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	dbec      	blt.n	8014b36 <__swhatbuf_r+0x12>
 8014b5c:	9901      	ldr	r1, [sp, #4]
 8014b5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014b62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014b66:	4259      	negs	r1, r3
 8014b68:	4159      	adcs	r1, r3
 8014b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014b6e:	e7eb      	b.n	8014b48 <__swhatbuf_r+0x24>

08014b70 <__smakebuf_r>:
 8014b70:	898b      	ldrh	r3, [r1, #12]
 8014b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014b74:	079d      	lsls	r5, r3, #30
 8014b76:	4606      	mov	r6, r0
 8014b78:	460c      	mov	r4, r1
 8014b7a:	d507      	bpl.n	8014b8c <__smakebuf_r+0x1c>
 8014b7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014b80:	6023      	str	r3, [r4, #0]
 8014b82:	6123      	str	r3, [r4, #16]
 8014b84:	2301      	movs	r3, #1
 8014b86:	6163      	str	r3, [r4, #20]
 8014b88:	b003      	add	sp, #12
 8014b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b8c:	ab01      	add	r3, sp, #4
 8014b8e:	466a      	mov	r2, sp
 8014b90:	f7ff ffc8 	bl	8014b24 <__swhatbuf_r>
 8014b94:	9f00      	ldr	r7, [sp, #0]
 8014b96:	4605      	mov	r5, r0
 8014b98:	4639      	mov	r1, r7
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f7fd faba 	bl	8012114 <_malloc_r>
 8014ba0:	b948      	cbnz	r0, 8014bb6 <__smakebuf_r+0x46>
 8014ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ba6:	059a      	lsls	r2, r3, #22
 8014ba8:	d4ee      	bmi.n	8014b88 <__smakebuf_r+0x18>
 8014baa:	f023 0303 	bic.w	r3, r3, #3
 8014bae:	f043 0302 	orr.w	r3, r3, #2
 8014bb2:	81a3      	strh	r3, [r4, #12]
 8014bb4:	e7e2      	b.n	8014b7c <__smakebuf_r+0xc>
 8014bb6:	89a3      	ldrh	r3, [r4, #12]
 8014bb8:	6020      	str	r0, [r4, #0]
 8014bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014bbe:	81a3      	strh	r3, [r4, #12]
 8014bc0:	9b01      	ldr	r3, [sp, #4]
 8014bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014bc6:	b15b      	cbz	r3, 8014be0 <__smakebuf_r+0x70>
 8014bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bcc:	4630      	mov	r0, r6
 8014bce:	f000 f81d 	bl	8014c0c <_isatty_r>
 8014bd2:	b128      	cbz	r0, 8014be0 <__smakebuf_r+0x70>
 8014bd4:	89a3      	ldrh	r3, [r4, #12]
 8014bd6:	f023 0303 	bic.w	r3, r3, #3
 8014bda:	f043 0301 	orr.w	r3, r3, #1
 8014bde:	81a3      	strh	r3, [r4, #12]
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	431d      	orrs	r5, r3
 8014be4:	81a5      	strh	r5, [r4, #12]
 8014be6:	e7cf      	b.n	8014b88 <__smakebuf_r+0x18>

08014be8 <_fstat_r>:
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4d07      	ldr	r5, [pc, #28]	@ (8014c08 <_fstat_r+0x20>)
 8014bec:	2300      	movs	r3, #0
 8014bee:	4604      	mov	r4, r0
 8014bf0:	4608      	mov	r0, r1
 8014bf2:	4611      	mov	r1, r2
 8014bf4:	602b      	str	r3, [r5, #0]
 8014bf6:	f7ec fe27 	bl	8001848 <_fstat>
 8014bfa:	1c43      	adds	r3, r0, #1
 8014bfc:	d102      	bne.n	8014c04 <_fstat_r+0x1c>
 8014bfe:	682b      	ldr	r3, [r5, #0]
 8014c00:	b103      	cbz	r3, 8014c04 <_fstat_r+0x1c>
 8014c02:	6023      	str	r3, [r4, #0]
 8014c04:	bd38      	pop	{r3, r4, r5, pc}
 8014c06:	bf00      	nop
 8014c08:	2400963c 	.word	0x2400963c

08014c0c <_isatty_r>:
 8014c0c:	b538      	push	{r3, r4, r5, lr}
 8014c0e:	4d06      	ldr	r5, [pc, #24]	@ (8014c28 <_isatty_r+0x1c>)
 8014c10:	2300      	movs	r3, #0
 8014c12:	4604      	mov	r4, r0
 8014c14:	4608      	mov	r0, r1
 8014c16:	602b      	str	r3, [r5, #0]
 8014c18:	f7ec fe26 	bl	8001868 <_isatty>
 8014c1c:	1c43      	adds	r3, r0, #1
 8014c1e:	d102      	bne.n	8014c26 <_isatty_r+0x1a>
 8014c20:	682b      	ldr	r3, [r5, #0]
 8014c22:	b103      	cbz	r3, 8014c26 <_isatty_r+0x1a>
 8014c24:	6023      	str	r3, [r4, #0]
 8014c26:	bd38      	pop	{r3, r4, r5, pc}
 8014c28:	2400963c 	.word	0x2400963c
 8014c2c:	00000000 	.word	0x00000000

08014c30 <fmod>:
 8014c30:	b508      	push	{r3, lr}
 8014c32:	ed2d 8b04 	vpush	{d8-d9}
 8014c36:	eeb0 9b40 	vmov.f64	d9, d0
 8014c3a:	eeb0 8b41 	vmov.f64	d8, d1
 8014c3e:	f000 f8ef 	bl	8014e20 <__ieee754_fmod>
 8014c42:	eeb4 9b48 	vcmp.f64	d9, d8
 8014c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c4a:	d60c      	bvs.n	8014c66 <fmod+0x36>
 8014c4c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014c70 <fmod+0x40>
 8014c50:	eeb4 8b49 	vcmp.f64	d8, d9
 8014c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c58:	d105      	bne.n	8014c66 <fmod+0x36>
 8014c5a:	f7fe f8a5 	bl	8012da8 <__errno>
 8014c5e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014c62:	2321      	movs	r3, #33	@ 0x21
 8014c64:	6003      	str	r3, [r0, #0]
 8014c66:	ecbd 8b04 	vpop	{d8-d9}
 8014c6a:	bd08      	pop	{r3, pc}
 8014c6c:	f3af 8000 	nop.w
	...

08014c78 <sqrt>:
 8014c78:	b508      	push	{r3, lr}
 8014c7a:	ed2d 8b04 	vpush	{d8-d9}
 8014c7e:	eeb0 8b40 	vmov.f64	d8, d0
 8014c82:	f000 f8c7 	bl	8014e14 <__ieee754_sqrt>
 8014c86:	eeb4 8b48 	vcmp.f64	d8, d8
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	d60c      	bvs.n	8014caa <sqrt+0x32>
 8014c90:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014cb0 <sqrt+0x38>
 8014c94:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c9c:	d505      	bpl.n	8014caa <sqrt+0x32>
 8014c9e:	f7fe f883 	bl	8012da8 <__errno>
 8014ca2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014ca6:	2321      	movs	r3, #33	@ 0x21
 8014ca8:	6003      	str	r3, [r0, #0]
 8014caa:	ecbd 8b04 	vpop	{d8-d9}
 8014cae:	bd08      	pop	{r3, pc}
	...

08014cb8 <asinf>:
 8014cb8:	b508      	push	{r3, lr}
 8014cba:	ed2d 8b02 	vpush	{d8}
 8014cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8014cc2:	f000 f9b9 	bl	8015038 <__ieee754_asinf>
 8014cc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8014cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cce:	eef0 8a40 	vmov.f32	s17, s0
 8014cd2:	d615      	bvs.n	8014d00 <asinf+0x48>
 8014cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8014cd8:	f000 f838 	bl	8014d4c <fabsf>
 8014cdc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014ce0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce8:	dd0a      	ble.n	8014d00 <asinf+0x48>
 8014cea:	f7fe f85d 	bl	8012da8 <__errno>
 8014cee:	ecbd 8b02 	vpop	{d8}
 8014cf2:	2321      	movs	r3, #33	@ 0x21
 8014cf4:	6003      	str	r3, [r0, #0]
 8014cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014cfa:	4804      	ldr	r0, [pc, #16]	@ (8014d0c <asinf+0x54>)
 8014cfc:	f000 b82e 	b.w	8014d5c <nanf>
 8014d00:	eeb0 0a68 	vmov.f32	s0, s17
 8014d04:	ecbd 8b02 	vpop	{d8}
 8014d08:	bd08      	pop	{r3, pc}
 8014d0a:	bf00      	nop
 8014d0c:	0801768e 	.word	0x0801768e

08014d10 <sqrtf>:
 8014d10:	b508      	push	{r3, lr}
 8014d12:	ed2d 8b02 	vpush	{d8}
 8014d16:	eeb0 8a40 	vmov.f32	s16, s0
 8014d1a:	f000 f87e 	bl	8014e1a <__ieee754_sqrtf>
 8014d1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d26:	d60c      	bvs.n	8014d42 <sqrtf+0x32>
 8014d28:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014d48 <sqrtf+0x38>
 8014d2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d34:	d505      	bpl.n	8014d42 <sqrtf+0x32>
 8014d36:	f7fe f837 	bl	8012da8 <__errno>
 8014d3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014d3e:	2321      	movs	r3, #33	@ 0x21
 8014d40:	6003      	str	r3, [r0, #0]
 8014d42:	ecbd 8b02 	vpop	{d8}
 8014d46:	bd08      	pop	{r3, pc}
 8014d48:	00000000 	.word	0x00000000

08014d4c <fabsf>:
 8014d4c:	ee10 3a10 	vmov	r3, s0
 8014d50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014d54:	ee00 3a10 	vmov	s0, r3
 8014d58:	4770      	bx	lr
	...

08014d5c <nanf>:
 8014d5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014d64 <nanf+0x8>
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	7fc00000 	.word	0x7fc00000

08014d68 <fmaxf>:
 8014d68:	b508      	push	{r3, lr}
 8014d6a:	ed2d 8b02 	vpush	{d8}
 8014d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8014d72:	eef0 8a60 	vmov.f32	s17, s1
 8014d76:	f000 f831 	bl	8014ddc <__fpclassifyf>
 8014d7a:	b930      	cbnz	r0, 8014d8a <fmaxf+0x22>
 8014d7c:	eeb0 8a68 	vmov.f32	s16, s17
 8014d80:	eeb0 0a48 	vmov.f32	s0, s16
 8014d84:	ecbd 8b02 	vpop	{d8}
 8014d88:	bd08      	pop	{r3, pc}
 8014d8a:	eeb0 0a68 	vmov.f32	s0, s17
 8014d8e:	f000 f825 	bl	8014ddc <__fpclassifyf>
 8014d92:	2800      	cmp	r0, #0
 8014d94:	d0f4      	beq.n	8014d80 <fmaxf+0x18>
 8014d96:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d9e:	dded      	ble.n	8014d7c <fmaxf+0x14>
 8014da0:	e7ee      	b.n	8014d80 <fmaxf+0x18>

08014da2 <fminf>:
 8014da2:	b508      	push	{r3, lr}
 8014da4:	ed2d 8b02 	vpush	{d8}
 8014da8:	eeb0 8a40 	vmov.f32	s16, s0
 8014dac:	eef0 8a60 	vmov.f32	s17, s1
 8014db0:	f000 f814 	bl	8014ddc <__fpclassifyf>
 8014db4:	b930      	cbnz	r0, 8014dc4 <fminf+0x22>
 8014db6:	eeb0 8a68 	vmov.f32	s16, s17
 8014dba:	eeb0 0a48 	vmov.f32	s0, s16
 8014dbe:	ecbd 8b02 	vpop	{d8}
 8014dc2:	bd08      	pop	{r3, pc}
 8014dc4:	eeb0 0a68 	vmov.f32	s0, s17
 8014dc8:	f000 f808 	bl	8014ddc <__fpclassifyf>
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d0f4      	beq.n	8014dba <fminf+0x18>
 8014dd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd8:	d5ed      	bpl.n	8014db6 <fminf+0x14>
 8014dda:	e7ee      	b.n	8014dba <fminf+0x18>

08014ddc <__fpclassifyf>:
 8014ddc:	ee10 3a10 	vmov	r3, s0
 8014de0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014de4:	d00d      	beq.n	8014e02 <__fpclassifyf+0x26>
 8014de6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014dea:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014dee:	d30a      	bcc.n	8014e06 <__fpclassifyf+0x2a>
 8014df0:	4b07      	ldr	r3, [pc, #28]	@ (8014e10 <__fpclassifyf+0x34>)
 8014df2:	1e42      	subs	r2, r0, #1
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d908      	bls.n	8014e0a <__fpclassifyf+0x2e>
 8014df8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014dfc:	4258      	negs	r0, r3
 8014dfe:	4158      	adcs	r0, r3
 8014e00:	4770      	bx	lr
 8014e02:	2002      	movs	r0, #2
 8014e04:	4770      	bx	lr
 8014e06:	2004      	movs	r0, #4
 8014e08:	4770      	bx	lr
 8014e0a:	2003      	movs	r0, #3
 8014e0c:	4770      	bx	lr
 8014e0e:	bf00      	nop
 8014e10:	007ffffe 	.word	0x007ffffe

08014e14 <__ieee754_sqrt>:
 8014e14:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014e18:	4770      	bx	lr

08014e1a <__ieee754_sqrtf>:
 8014e1a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014e1e:	4770      	bx	lr

08014e20 <__ieee754_fmod>:
 8014e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e24:	ed8d 1b00 	vstr	d1, [sp]
 8014e28:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014e2c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014e30:	ea56 0307 	orrs.w	r3, r6, r7
 8014e34:	46b6      	mov	lr, r6
 8014e36:	d00d      	beq.n	8014e54 <__ieee754_fmod+0x34>
 8014e38:	ee10 ca90 	vmov	ip, s1
 8014e3c:	4b78      	ldr	r3, [pc, #480]	@ (8015020 <__ieee754_fmod+0x200>)
 8014e3e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014e42:	4598      	cmp	r8, r3
 8014e44:	d806      	bhi.n	8014e54 <__ieee754_fmod+0x34>
 8014e46:	4273      	negs	r3, r6
 8014e48:	4a76      	ldr	r2, [pc, #472]	@ (8015024 <__ieee754_fmod+0x204>)
 8014e4a:	4333      	orrs	r3, r6
 8014e4c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014e50:	4293      	cmp	r3, r2
 8014e52:	d908      	bls.n	8014e66 <__ieee754_fmod+0x46>
 8014e54:	ed9d 7b00 	vldr	d7, [sp]
 8014e58:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014e5c:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014e60:	b003      	add	sp, #12
 8014e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e66:	ee10 9a10 	vmov	r9, s0
 8014e6a:	45b8      	cmp	r8, r7
 8014e6c:	4649      	mov	r1, r9
 8014e6e:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014e72:	dc09      	bgt.n	8014e88 <__ieee754_fmod+0x68>
 8014e74:	dbf4      	blt.n	8014e60 <__ieee754_fmod+0x40>
 8014e76:	454e      	cmp	r6, r9
 8014e78:	d8f2      	bhi.n	8014e60 <__ieee754_fmod+0x40>
 8014e7a:	d105      	bne.n	8014e88 <__ieee754_fmod+0x68>
 8014e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8015028 <__ieee754_fmod+0x208>)
 8014e7e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014e82:	ed93 0b00 	vldr	d0, [r3]
 8014e86:	e7eb      	b.n	8014e60 <__ieee754_fmod+0x40>
 8014e88:	4a66      	ldr	r2, [pc, #408]	@ (8015024 <__ieee754_fmod+0x204>)
 8014e8a:	ea1c 0f02 	tst.w	ip, r2
 8014e8e:	d14a      	bne.n	8014f26 <__ieee754_fmod+0x106>
 8014e90:	f1b8 0f00 	cmp.w	r8, #0
 8014e94:	d13f      	bne.n	8014f16 <__ieee754_fmod+0xf6>
 8014e96:	4865      	ldr	r0, [pc, #404]	@ (801502c <__ieee754_fmod+0x20c>)
 8014e98:	464b      	mov	r3, r9
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	dc38      	bgt.n	8014f10 <__ieee754_fmod+0xf0>
 8014e9e:	4215      	tst	r5, r2
 8014ea0:	d150      	bne.n	8014f44 <__ieee754_fmod+0x124>
 8014ea2:	2f00      	cmp	r7, #0
 8014ea4:	d147      	bne.n	8014f36 <__ieee754_fmod+0x116>
 8014ea6:	4a61      	ldr	r2, [pc, #388]	@ (801502c <__ieee754_fmod+0x20c>)
 8014ea8:	4633      	mov	r3, r6
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	dc40      	bgt.n	8014f30 <__ieee754_fmod+0x110>
 8014eae:	4b60      	ldr	r3, [pc, #384]	@ (8015030 <__ieee754_fmod+0x210>)
 8014eb0:	4298      	cmp	r0, r3
 8014eb2:	db4b      	blt.n	8014f4c <__ieee754_fmod+0x12c>
 8014eb4:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014ebc:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015030 <__ieee754_fmod+0x210>
 8014ec0:	4562      	cmp	r2, ip
 8014ec2:	db58      	blt.n	8014f76 <__ieee754_fmod+0x156>
 8014ec4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014ec8:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014ecc:	1a80      	subs	r0, r0, r2
 8014ece:	1b5e      	subs	r6, r3, r5
 8014ed0:	eba1 070e 	sub.w	r7, r1, lr
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	d164      	bne.n	8014fa2 <__ieee754_fmod+0x182>
 8014ed8:	4571      	cmp	r1, lr
 8014eda:	bf38      	it	cc
 8014edc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014ee0:	2e00      	cmp	r6, #0
 8014ee2:	bfa4      	itt	ge
 8014ee4:	4639      	movge	r1, r7
 8014ee6:	4633      	movge	r3, r6
 8014ee8:	ea53 0001 	orrs.w	r0, r3, r1
 8014eec:	d0c6      	beq.n	8014e7c <__ieee754_fmod+0x5c>
 8014eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014ef2:	db6b      	blt.n	8014fcc <__ieee754_fmod+0x1ac>
 8014ef4:	484e      	ldr	r0, [pc, #312]	@ (8015030 <__ieee754_fmod+0x210>)
 8014ef6:	4282      	cmp	r2, r0
 8014ef8:	db6e      	blt.n	8014fd8 <__ieee754_fmod+0x1b8>
 8014efa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014efe:	4323      	orrs	r3, r4
 8014f00:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014f04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f08:	460c      	mov	r4, r1
 8014f0a:	ec45 4b10 	vmov	d0, r4, r5
 8014f0e:	e7a7      	b.n	8014e60 <__ieee754_fmod+0x40>
 8014f10:	3801      	subs	r0, #1
 8014f12:	005b      	lsls	r3, r3, #1
 8014f14:	e7c1      	b.n	8014e9a <__ieee754_fmod+0x7a>
 8014f16:	4846      	ldr	r0, [pc, #280]	@ (8015030 <__ieee754_fmod+0x210>)
 8014f18:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	ddbe      	ble.n	8014e9e <__ieee754_fmod+0x7e>
 8014f20:	3801      	subs	r0, #1
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	e7fa      	b.n	8014f1c <__ieee754_fmod+0xfc>
 8014f26:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014f2a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014f2e:	e7b6      	b.n	8014e9e <__ieee754_fmod+0x7e>
 8014f30:	3a01      	subs	r2, #1
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	e7b9      	b.n	8014eaa <__ieee754_fmod+0x8a>
 8014f36:	4a3e      	ldr	r2, [pc, #248]	@ (8015030 <__ieee754_fmod+0x210>)
 8014f38:	02fb      	lsls	r3, r7, #11
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	ddb7      	ble.n	8014eae <__ieee754_fmod+0x8e>
 8014f3e:	3a01      	subs	r2, #1
 8014f40:	005b      	lsls	r3, r3, #1
 8014f42:	e7fa      	b.n	8014f3a <__ieee754_fmod+0x11a>
 8014f44:	153a      	asrs	r2, r7, #20
 8014f46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014f4a:	e7b0      	b.n	8014eae <__ieee754_fmod+0x8e>
 8014f4c:	eba3 0c00 	sub.w	ip, r3, r0
 8014f50:	f1bc 0f1f 	cmp.w	ip, #31
 8014f54:	dc09      	bgt.n	8014f6a <__ieee754_fmod+0x14a>
 8014f56:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014f5a:	fa08 f10c 	lsl.w	r1, r8, ip
 8014f5e:	fa29 f303 	lsr.w	r3, r9, r3
 8014f62:	430b      	orrs	r3, r1
 8014f64:	fa09 f10c 	lsl.w	r1, r9, ip
 8014f68:	e7a8      	b.n	8014ebc <__ieee754_fmod+0x9c>
 8014f6a:	4b32      	ldr	r3, [pc, #200]	@ (8015034 <__ieee754_fmod+0x214>)
 8014f6c:	1a1b      	subs	r3, r3, r0
 8014f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8014f72:	2100      	movs	r1, #0
 8014f74:	e7a2      	b.n	8014ebc <__ieee754_fmod+0x9c>
 8014f76:	ebac 0c02 	sub.w	ip, ip, r2
 8014f7a:	f1bc 0f1f 	cmp.w	ip, #31
 8014f7e:	dc09      	bgt.n	8014f94 <__ieee754_fmod+0x174>
 8014f80:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014f84:	fa07 f70c 	lsl.w	r7, r7, ip
 8014f88:	fa26 f505 	lsr.w	r5, r6, r5
 8014f8c:	433d      	orrs	r5, r7
 8014f8e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014f92:	e79b      	b.n	8014ecc <__ieee754_fmod+0xac>
 8014f94:	4d27      	ldr	r5, [pc, #156]	@ (8015034 <__ieee754_fmod+0x214>)
 8014f96:	1aad      	subs	r5, r5, r2
 8014f98:	fa06 f505 	lsl.w	r5, r6, r5
 8014f9c:	f04f 0e00 	mov.w	lr, #0
 8014fa0:	e794      	b.n	8014ecc <__ieee754_fmod+0xac>
 8014fa2:	4571      	cmp	r1, lr
 8014fa4:	bf38      	it	cc
 8014fa6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014faa:	2e00      	cmp	r6, #0
 8014fac:	da05      	bge.n	8014fba <__ieee754_fmod+0x19a>
 8014fae:	0fce      	lsrs	r6, r1, #31
 8014fb0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014fb4:	0049      	lsls	r1, r1, #1
 8014fb6:	3801      	subs	r0, #1
 8014fb8:	e789      	b.n	8014ece <__ieee754_fmod+0xae>
 8014fba:	ea56 0307 	orrs.w	r3, r6, r7
 8014fbe:	f43f af5d 	beq.w	8014e7c <__ieee754_fmod+0x5c>
 8014fc2:	0ffb      	lsrs	r3, r7, #31
 8014fc4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014fc8:	0079      	lsls	r1, r7, #1
 8014fca:	e7f4      	b.n	8014fb6 <__ieee754_fmod+0x196>
 8014fcc:	0fc8      	lsrs	r0, r1, #31
 8014fce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014fd2:	0049      	lsls	r1, r1, #1
 8014fd4:	3a01      	subs	r2, #1
 8014fd6:	e78a      	b.n	8014eee <__ieee754_fmod+0xce>
 8014fd8:	1a80      	subs	r0, r0, r2
 8014fda:	2814      	cmp	r0, #20
 8014fdc:	dc0c      	bgt.n	8014ff8 <__ieee754_fmod+0x1d8>
 8014fde:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014fe2:	fa03 f202 	lsl.w	r2, r3, r2
 8014fe6:	40c1      	lsrs	r1, r0
 8014fe8:	430a      	orrs	r2, r1
 8014fea:	4103      	asrs	r3, r0
 8014fec:	ea43 0104 	orr.w	r1, r3, r4
 8014ff0:	4610      	mov	r0, r2
 8014ff2:	ec41 0b10 	vmov	d0, r0, r1
 8014ff6:	e733      	b.n	8014e60 <__ieee754_fmod+0x40>
 8014ff8:	281f      	cmp	r0, #31
 8014ffa:	dc07      	bgt.n	801500c <__ieee754_fmod+0x1ec>
 8014ffc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015000:	40c1      	lsrs	r1, r0
 8015002:	fa03 f202 	lsl.w	r2, r3, r2
 8015006:	430a      	orrs	r2, r1
 8015008:	4623      	mov	r3, r4
 801500a:	e7ef      	b.n	8014fec <__ieee754_fmod+0x1cc>
 801500c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015010:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8015014:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015018:	32e2      	adds	r2, #226	@ 0xe2
 801501a:	fa43 f202 	asr.w	r2, r3, r2
 801501e:	e7f3      	b.n	8015008 <__ieee754_fmod+0x1e8>
 8015020:	7fefffff 	.word	0x7fefffff
 8015024:	7ff00000 	.word	0x7ff00000
 8015028:	08017790 	.word	0x08017790
 801502c:	fffffbed 	.word	0xfffffbed
 8015030:	fffffc02 	.word	0xfffffc02
 8015034:	fffffbe2 	.word	0xfffffbe2

08015038 <__ieee754_asinf>:
 8015038:	b538      	push	{r3, r4, r5, lr}
 801503a:	ee10 5a10 	vmov	r5, s0
 801503e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8015042:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8015046:	ed2d 8b04 	vpush	{d8-d9}
 801504a:	d10c      	bne.n	8015066 <__ieee754_asinf+0x2e>
 801504c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80151c4 <__ieee754_asinf+0x18c>
 8015050:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80151c8 <__ieee754_asinf+0x190>
 8015054:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015058:	eee0 7a07 	vfma.f32	s15, s0, s14
 801505c:	eeb0 0a67 	vmov.f32	s0, s15
 8015060:	ecbd 8b04 	vpop	{d8-d9}
 8015064:	bd38      	pop	{r3, r4, r5, pc}
 8015066:	d904      	bls.n	8015072 <__ieee754_asinf+0x3a>
 8015068:	ee70 7a40 	vsub.f32	s15, s0, s0
 801506c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015070:	e7f6      	b.n	8015060 <__ieee754_asinf+0x28>
 8015072:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015076:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801507a:	d20b      	bcs.n	8015094 <__ieee754_asinf+0x5c>
 801507c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8015080:	d252      	bcs.n	8015128 <__ieee754_asinf+0xf0>
 8015082:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80151cc <__ieee754_asinf+0x194>
 8015086:	ee70 7a27 	vadd.f32	s15, s0, s15
 801508a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015092:	dce5      	bgt.n	8015060 <__ieee754_asinf+0x28>
 8015094:	f7ff fe5a 	bl	8014d4c <fabsf>
 8015098:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801509c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80150a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80151d0 <__ieee754_asinf+0x198>
 80150a8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80151d4 <__ieee754_asinf+0x19c>
 80150ac:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80151d8 <__ieee754_asinf+0x1a0>
 80150b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80150b4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80151dc <__ieee754_asinf+0x1a4>
 80150b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80150bc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80151e0 <__ieee754_asinf+0x1a8>
 80150c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80150c4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80151e4 <__ieee754_asinf+0x1ac>
 80150c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80150cc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80151e8 <__ieee754_asinf+0x1b0>
 80150d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80150d4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80151ec <__ieee754_asinf+0x1b4>
 80150d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80150dc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80151f0 <__ieee754_asinf+0x1b8>
 80150e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80150e4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80151f4 <__ieee754_asinf+0x1bc>
 80150e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80150ec:	eeb0 0a48 	vmov.f32	s0, s16
 80150f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80150f4:	f7ff fe91 	bl	8014e1a <__ieee754_sqrtf>
 80150f8:	4b3f      	ldr	r3, [pc, #252]	@ (80151f8 <__ieee754_asinf+0x1c0>)
 80150fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 80150fe:	429c      	cmp	r4, r3
 8015100:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015104:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8015108:	d93d      	bls.n	8015186 <__ieee754_asinf+0x14e>
 801510a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801510e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80151fc <__ieee754_asinf+0x1c4>
 8015112:	eee0 7a26 	vfma.f32	s15, s0, s13
 8015116:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80151c8 <__ieee754_asinf+0x190>
 801511a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801511e:	2d00      	cmp	r5, #0
 8015120:	bfd8      	it	le
 8015122:	eeb1 0a40 	vnegle.f32	s0, s0
 8015126:	e79b      	b.n	8015060 <__ieee754_asinf+0x28>
 8015128:	ee60 7a00 	vmul.f32	s15, s0, s0
 801512c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80151d4 <__ieee754_asinf+0x19c>
 8015130:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80151d0 <__ieee754_asinf+0x198>
 8015134:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80151e8 <__ieee754_asinf+0x1b0>
 8015138:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801513c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80151dc <__ieee754_asinf+0x1a4>
 8015140:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015144:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80151e0 <__ieee754_asinf+0x1a8>
 8015148:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801514c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80151e4 <__ieee754_asinf+0x1ac>
 8015150:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015154:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80151d8 <__ieee754_asinf+0x1a0>
 8015158:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801515c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80151ec <__ieee754_asinf+0x1b4>
 8015160:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015164:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80151f0 <__ieee754_asinf+0x1b8>
 8015168:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801516c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80151f4 <__ieee754_asinf+0x1bc>
 8015170:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015178:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801517c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015180:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015184:	e76c      	b.n	8015060 <__ieee754_asinf+0x28>
 8015186:	ee10 3a10 	vmov	r3, s0
 801518a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801518e:	f023 030f 	bic.w	r3, r3, #15
 8015192:	ee07 3a10 	vmov	s14, r3
 8015196:	eea7 8a47 	vfms.f32	s16, s14, s14
 801519a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801519e:	ee30 0a07 	vadd.f32	s0, s0, s14
 80151a2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80151c4 <__ieee754_asinf+0x18c>
 80151a6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80151aa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8015200 <__ieee754_asinf+0x1c8>
 80151ae:	eee5 7a66 	vfms.f32	s15, s10, s13
 80151b2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80151b6:	eeb0 6a40 	vmov.f32	s12, s0
 80151ba:	eea7 6a66 	vfms.f32	s12, s14, s13
 80151be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80151c2:	e7aa      	b.n	801511a <__ieee754_asinf+0xe2>
 80151c4:	b33bbd2e 	.word	0xb33bbd2e
 80151c8:	3fc90fdb 	.word	0x3fc90fdb
 80151cc:	7149f2ca 	.word	0x7149f2ca
 80151d0:	3a4f7f04 	.word	0x3a4f7f04
 80151d4:	3811ef08 	.word	0x3811ef08
 80151d8:	3e2aaaab 	.word	0x3e2aaaab
 80151dc:	bd241146 	.word	0xbd241146
 80151e0:	3e4e0aa8 	.word	0x3e4e0aa8
 80151e4:	bea6b090 	.word	0xbea6b090
 80151e8:	3d9dc62e 	.word	0x3d9dc62e
 80151ec:	bf303361 	.word	0xbf303361
 80151f0:	4001572d 	.word	0x4001572d
 80151f4:	c019d139 	.word	0xc019d139
 80151f8:	3f799999 	.word	0x3f799999
 80151fc:	333bbd2e 	.word	0x333bbd2e
 8015200:	3f490fdb 	.word	0x3f490fdb

08015204 <_init>:
 8015204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015206:	bf00      	nop
 8015208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801520a:	bc08      	pop	{r3}
 801520c:	469e      	mov	lr, r3
 801520e:	4770      	bx	lr

08015210 <_fini>:
 8015210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015212:	bf00      	nop
 8015214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015216:	bc08      	pop	{r3}
 8015218:	469e      	mov	lr, r3
 801521a:	4770      	bx	lr
