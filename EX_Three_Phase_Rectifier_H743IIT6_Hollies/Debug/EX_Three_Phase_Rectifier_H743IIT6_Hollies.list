
EX_Three_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e10  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b0  080150b0  080150b0  000160b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017660  08017660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017668  08017668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801766c  0801766c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  08017670  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009398  240002f4  08017964  000192f4  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  2400968c  08017964  0001968c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a567  00000000  00000000  00019322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000080e1  00000000  00000000  00053889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002748  00000000  00000000  0005b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d8a  00000000  00000000  0005e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000415a9  00000000  00000000  0005fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003780e  00000000  00000000  000a13eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176dbe  00000000  00000000  000d8bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024f9b7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b2b0  00000000  00000000  0024fa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0025ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  0025ad97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  0025b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015098 	.word	0x08015098

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08015098 	.word	0x08015098

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 fb32 	bl	8012c22 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fdef 	bl	80021a8 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 feb4 	bl	800133c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 fede 	bl	80023b0 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 fe9f 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f001 ffe1 	bl	8002648 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fcec 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fd03 	bl	800209c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  ad7606_Init();
 80006b0:	f00f fee2 	bl	8010478 <ad7606_Init>
  pll_Init_V(&signal_V, 50, 20000);
 80006b4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006b8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800075c <MX_FREERTOS_Init+0xb0>
 80006bc:	4828      	ldr	r0, [pc, #160]	@ (8000760 <MX_FREERTOS_Init+0xb4>)
 80006be:	f010 fe1f 	bl	8011300 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006c2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006c6:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 800075c <MX_FREERTOS_Init+0xb0>
 80006ca:	4826      	ldr	r0, [pc, #152]	@ (8000764 <MX_FREERTOS_Init+0xb8>)
 80006cc:	f010 feb8 	bl	8011440 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4825      	ldr	r0, [pc, #148]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006d4:	f008 fe6a 	bl	80093ac <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006d8:	2104      	movs	r1, #4
 80006da:	4823      	ldr	r0, [pc, #140]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006dc:	f008 fe66 	bl	80093ac <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006e0:	2108      	movs	r1, #8
 80006e2:	4821      	ldr	r0, [pc, #132]	@ (8000768 <MX_FREERTOS_Init+0xbc>)
 80006e4:	f008 fe62 	bl	80093ac <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4820      	ldr	r0, [pc, #128]	@ (800076c <MX_FREERTOS_Init+0xc0>)
 80006ec:	f001 fd7e 	bl	80021ec <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 80006f0:	2100      	movs	r1, #0
 80006f2:	481f      	ldr	r0, [pc, #124]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006f4:	f00f fefa 	bl	80104ec <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80006f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	481e      	ldr	r0, [pc, #120]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 80006fe:	f00c fc45 	bl	800cf8c <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 800070a:	2100      	movs	r1, #0
 800070c:	481d      	ldr	r0, [pc, #116]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 800070e:	f00c fc3d 	bl	800cf8c <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 8000718:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 800071a:	2100      	movs	r1, #0
 800071c:	481c      	ldr	r0, [pc, #112]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800071e:	f00c fc35 	bl	800cf8c <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 8000728:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 800072a:	2100      	movs	r1, #0
 800072c:	481b      	ldr	r0, [pc, #108]	@ (800079c <MX_FREERTOS_Init+0xf0>)
 800072e:	f00c fc2d 	bl	800cf8c <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a1a      	ldr	r2, [pc, #104]	@ (80007a0 <MX_FREERTOS_Init+0xf4>)
 8000736:	6013      	str	r3, [r2, #0]

  /* creation of acVControl */
  acVControlHandle = osThreadNew(StartACVContorl, NULL, &acVControl_attributes);
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <MX_FREERTOS_Init+0xf8>)
 800073a:	2100      	movs	r1, #0
 800073c:	481a      	ldr	r0, [pc, #104]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 800073e:	f00c fc25 	bl	800cf8c <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a19      	ldr	r2, [pc, #100]	@ (80007ac <MX_FREERTOS_Init+0x100>)
 8000746:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtect */
  circuitProtectHandle = osThreadNew(StartCircuitProtect, NULL, &circuitProtect_attributes);
 8000748:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <MX_FREERTOS_Init+0x104>)
 800074a:	2100      	movs	r1, #0
 800074c:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <MX_FREERTOS_Init+0x108>)
 800074e:	f00c fc1d 	bl	800cf8c <osThreadNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_FREERTOS_Init+0x10c>)
 8000756:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	42480000 	.word	0x42480000
 8000760:	24009534 	.word	0x24009534
 8000764:	24009538 	.word	0x24009538
 8000768:	24000554 	.word	0x24000554
 800076c:	24000310 	.word	0x24000310
 8000770:	240005a0 	.word	0x240005a0
 8000774:	080151ec 	.word	0x080151ec
 8000778:	080007bd 	.word	0x080007bd
 800077c:	24000324 	.word	0x24000324
 8000780:	08015210 	.word	0x08015210
 8000784:	0800083d 	.word	0x0800083d
 8000788:	24000328 	.word	0x24000328
 800078c:	08015234 	.word	0x08015234
 8000790:	08000859 	.word	0x08000859
 8000794:	2400032c 	.word	0x2400032c
 8000798:	08015258 	.word	0x08015258
 800079c:	080008a9 	.word	0x080008a9
 80007a0:	24000330 	.word	0x24000330
 80007a4:	0801527c 	.word	0x0801527c
 80007a8:	08000909 	.word	0x08000909
 80007ac:	24000334 	.word	0x24000334
 80007b0:	080152a0 	.word	0x080152a0
 80007b4:	08000921 	.word	0x08000921
 80007b8:	24000338 	.word	0x24000338

080007bc <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007c4:	f00f f918 	bl	800f9f8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    switch (runState)
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <StartStateLED+0x78>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <StartStateLED+0x1a>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d026      	beq.n	8000822 <StartStateLED+0x66>
    case 1: // 保护状态
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
      osDelay(100);
      break;
    default:
      break;
 80007d4:	e02d      	b.n	8000832 <StartStateLED+0x76>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007d6:	2101      	movs	r1, #1
 80007d8:	4817      	ldr	r0, [pc, #92]	@ (8000838 <StartStateLED+0x7c>)
 80007da:	f002 f8fe 	bl	80029da <HAL_GPIO_TogglePin>
      osDelay(100);
 80007de:	2064      	movs	r0, #100	@ 0x64
 80007e0:	f00c fc66 	bl	800d0b0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4814      	ldr	r0, [pc, #80]	@ (8000838 <StartStateLED+0x7c>)
 80007e8:	f002 f8f7 	bl	80029da <HAL_GPIO_TogglePin>
      osDelay(200);
 80007ec:	20c8      	movs	r0, #200	@ 0xc8
 80007ee:	f00c fc5f 	bl	800d0b0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80007f2:	2101      	movs	r1, #1
 80007f4:	4810      	ldr	r0, [pc, #64]	@ (8000838 <StartStateLED+0x7c>)
 80007f6:	f002 f8f0 	bl	80029da <HAL_GPIO_TogglePin>
      osDelay(100);
 80007fa:	2064      	movs	r0, #100	@ 0x64
 80007fc:	f00c fc58 	bl	800d0b0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000800:	2101      	movs	r1, #1
 8000802:	480d      	ldr	r0, [pc, #52]	@ (8000838 <StartStateLED+0x7c>)
 8000804:	f002 f8e9 	bl	80029da <HAL_GPIO_TogglePin>
      osDelay(200);
 8000808:	20c8      	movs	r0, #200	@ 0xc8
 800080a:	f00c fc51 	bl	800d0b0 <osDelay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	4809      	ldr	r0, [pc, #36]	@ (8000838 <StartStateLED+0x7c>)
 8000814:	f002 f8c8 	bl	80029a8 <HAL_GPIO_WritePin>
      osDelay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f00c fc48 	bl	800d0b0 <osDelay>
      break;
 8000820:	e007      	b.n	8000832 <StartStateLED+0x76>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000822:	2101      	movs	r1, #1
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <StartStateLED+0x7c>)
 8000826:	f002 f8d8 	bl	80029da <HAL_GPIO_TogglePin>
      osDelay(100);
 800082a:	2064      	movs	r0, #100	@ 0x64
 800082c:	f00c fc40 	bl	800d0b0 <osDelay>
      break;
 8000830:	bf00      	nop
    switch (runState)
 8000832:	e7c9      	b.n	80007c8 <StartStateLED+0xc>
 8000834:	2400953c 	.word	0x2400953c
 8000838:	58022000 	.word	0x58022000

0800083c <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  OLED_Init();
 8000844:	f010 fa56 	bl	8010cf4 <OLED_Init>
  /* Infinite loop */
  for (;;)
  {
    appOLEDShow();
 8000848:	f000 f902 	bl	8000a50 <appOLEDShow>
    osDelay(100);
 800084c:	2064      	movs	r0, #100	@ 0x64
 800084e:	f00c fc2f 	bl	800d0b0 <osDelay>
    appOLEDShow();
 8000852:	bf00      	nop
 8000854:	e7f8      	b.n	8000848 <StartOledShow+0xc>
	...

08000858 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  INA228_config(INA228_0);
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <StartDcSamp+0x44>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f00f ff1c 	bl	80106a2 <INA228_config>
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <StartDcSamp+0x44>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f00f ffc6 	bl	8010800 <INA228_getVBUS_V>
 8000874:	eef0 7a40 	vmov.f32	s15, s0
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <StartDcSamp+0x48>)
 800087a:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 800087e:	4b07      	ldr	r3, [pc, #28]	@ (800089c <StartDcSamp+0x44>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f010 f840 	bl	8010908 <INA228_getCURRENT_A>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <StartDcSamp+0x4c>)
 800088e:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f00c fc0c 	bl	800d0b0 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 8000898:	bf00      	nop
 800089a:	e7e6      	b.n	800086a <StartDcSamp+0x12>
 800089c:	08016ad4 	.word	0x08016ad4
 80008a0:	24009528 	.word	0x24009528
 80008a4:	2400952c 	.word	0x2400952c

080008a8 <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUsartDebug */
  static uint8_t text[32] = {0};
  /* Infinite loop */
  for (;;)
  {
    sprintf((char *)text, "%5.2f %5.2f\n", signal_V->basic->rms_a, signal_V->basic->input_a);
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <StartUsartDebug+0x54>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80008ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <StartUsartDebug+0x54>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	edd3 7a00 	vldr	s15, [r3]
 80008c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008cc:	ed8d 7b00 	vstr	d7, [sp]
 80008d0:	ec53 2b16 	vmov	r2, r3, d6
 80008d4:	490a      	ldr	r1, [pc, #40]	@ (8000900 <StartUsartDebug+0x58>)
 80008d6:	480b      	ldr	r0, [pc, #44]	@ (8000904 <StartUsartDebug+0x5c>)
 80008d8:	f012 f940 	bl	8012b5c <siprintf>
    CDC_Transmit_FS(text, 32);
 80008dc:	2120      	movs	r1, #32
 80008de:	4809      	ldr	r0, [pc, #36]	@ (8000904 <StartUsartDebug+0x5c>)
 80008e0:	f00f f94a 	bl	800fb78 <CDC_Transmit_FS>
    memset(text, 0, 32);
 80008e4:	2220      	movs	r2, #32
 80008e6:	2100      	movs	r1, #0
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <StartUsartDebug+0x5c>)
 80008ea:	f012 f99a 	bl	8012c22 <memset>
    osDelay(500);
 80008ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f2:	f00c fbdd 	bl	800d0b0 <osDelay>
    sprintf((char *)text, "%5.2f %5.2f\n", signal_V->basic->rms_a, signal_V->basic->input_a);
 80008f6:	bf00      	nop
 80008f8:	e7da      	b.n	80008b0 <StartUsartDebug+0x8>
 80008fa:	bf00      	nop
 80008fc:	24009534 	.word	0x24009534
 8000900:	080150f8 	.word	0x080150f8
 8000904:	2400033c 	.word	0x2400033c

08000908 <StartACVContorl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACVContorl */
void StartACVContorl(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartACVContorl */
  /* Infinite loop */
  for (;;)
  {
    appACVControl();
 8000910:	f000 f990 	bl	8000c34 <appACVControl>
    osDelay(25);
 8000914:	2019      	movs	r0, #25
 8000916:	f00c fbcb 	bl	800d0b0 <osDelay>
    appACVControl();
 800091a:	bf00      	nop
 800091c:	e7f8      	b.n	8000910 <StartACVContorl+0x8>
	...

08000920 <StartCircuitProtect>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCircuitProtect */
void StartCircuitProtect(void *argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCircuitProtect */
  /* Infinite loop */
  for (;;)
  {
    if (U > protection_Udc || I > protection_Idc || signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac || signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac || signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000928:	4b40      	ldr	r3, [pc, #256]	@ (8000a2c <StartCircuitProtect+0x10c>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000a30 <StartCircuitProtect+0x110>
 8000932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093a:	dc51      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 800093c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a34 <StartCircuitProtect+0x114>)
 800093e:	edd3 7a00 	vldr	s15, [r3]
 8000942:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	dc47      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 8000950:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <StartCircuitProtect+0x118>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	edd3 7a03 	vldr	s15, [r3, #12]
 800095a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000a3c <StartCircuitProtect+0x11c>
 800095e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	dc3b      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 8000968:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <StartCircuitProtect+0x120>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000972:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	dc2f      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 8000980:	4b2d      	ldr	r3, [pc, #180]	@ (8000a38 <StartCircuitProtect+0x118>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	edd3 7a04 	vldr	s15, [r3, #16]
 800098a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000a3c <StartCircuitProtect+0x11c>
 800098e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	dc23      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <StartCircuitProtect+0x120>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	edd3 7a04 	vldr	s15, [r3, #16]
 80009a2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ae:	dc17      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <StartCircuitProtect+0x118>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80009ba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000a3c <StartCircuitProtect+0x11c>
 80009be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c6:	dc0b      	bgt.n	80009e0 <StartCircuitProtect+0xc0>
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <StartCircuitProtect+0x120>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80009d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	dd09      	ble.n	80009f4 <StartCircuitProtect+0xd4>
    {
      HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e6:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <StartCircuitProtect+0x124>)
 80009e8:	f001 ffde 	bl	80029a8 <HAL_GPIO_WritePin>
      runState = 1;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <StartCircuitProtect+0x128>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e017      	b.n	8000a24 <StartCircuitProtect+0x104>
    }
    else if (fabs(signal_V->basic->park_q) < 0.05f || runState == 0)
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <StartCircuitProtect+0x118>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80009fe:	eef0 7ae7 	vabs.f32	s15, s15
 8000a02:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000a4c <StartCircuitProtect+0x12c>
 8000a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	d403      	bmi.n	8000a18 <StartCircuitProtect+0xf8>
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <StartCircuitProtect+0x128>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d105      	bne.n	8000a24 <StartCircuitProtect+0x104>
    {
      HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1e:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <StartCircuitProtect+0x124>)
 8000a20:	f001 ffc2 	bl	80029a8 <HAL_GPIO_WritePin>
    }
    osDelay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f00c fb43 	bl	800d0b0 <osDelay>
    if (U > protection_Udc || I > protection_Idc || signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac || signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac || signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000a2a:	e77d      	b.n	8000928 <StartCircuitProtect+0x8>
 8000a2c:	24009528 	.word	0x24009528
 8000a30:	42b40000 	.word	0x42b40000
 8000a34:	2400952c 	.word	0x2400952c
 8000a38:	24009534 	.word	0x24009534
 8000a3c:	42200000 	.word	0x42200000
 8000a40:	24009538 	.word	0x24009538
 8000a44:	58020000 	.word	0x58020000
 8000a48:	2400953c 	.word	0x2400953c
 8000a4c:	3d4ccccd 	.word	0x3d4ccccd

08000a50 <appOLEDShow>:

/**
 * @brief OLED显示
 */
void appOLEDShow()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af02      	add	r7, sp, #8
  static uint8_t text[32] = {0};
  sprintf((char *)text, "Ua: %5.2f Ub: %5.2f", signal_V->basic->rms_a, signal_V->basic->rms_b);
 8000a56:	4b6a      	ldr	r3, [pc, #424]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a64:	4b66      	ldr	r3, [pc, #408]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a72:	ed8d 7b00 	vstr	d7, [sp]
 8000a76:	ec53 2b16 	vmov	r2, r3, d6
 8000a7a:	4962      	ldr	r1, [pc, #392]	@ (8000c04 <appOLEDShow+0x1b4>)
 8000a7c:	4862      	ldr	r0, [pc, #392]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000a7e:	f012 f86d 	bl	8012b5c <siprintf>
  OLED_ShowString(0, 0, text, 12);
 8000a82:	230c      	movs	r3, #12
 8000a84:	4a60      	ldr	r2, [pc, #384]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f010 f8ff 	bl	8010c8c <OLED_ShowString>
  sprintf((char *)text, "Uc: %5.2f Ia: %5.2f", signal_V->basic->rms_c, signal_I->basic->rms_a);
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000aa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aaa:	ed8d 7b00 	vstr	d7, [sp]
 8000aae:	ec53 2b16 	vmov	r2, r3, d6
 8000ab2:	4957      	ldr	r1, [pc, #348]	@ (8000c10 <appOLEDShow+0x1c0>)
 8000ab4:	4854      	ldr	r0, [pc, #336]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000ab6:	f012 f851 	bl	8012b5c <siprintf>
  OLED_ShowString(0, 12, text, 12);
 8000aba:	230c      	movs	r3, #12
 8000abc:	4a52      	ldr	r2, [pc, #328]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000abe:	210c      	movs	r1, #12
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f010 f8e3 	bl	8010c8c <OLED_ShowString>
  sprintf((char *)text, "Ib: %5.2f Ic: %5.2f", signal_I->basic->rms_b, signal_I->basic->rms_c);
 8000ac6:	4b51      	ldr	r3, [pc, #324]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ad0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ade:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae2:	ed8d 7b00 	vstr	d7, [sp]
 8000ae6:	ec53 2b16 	vmov	r2, r3, d6
 8000aea:	494a      	ldr	r1, [pc, #296]	@ (8000c14 <appOLEDShow+0x1c4>)
 8000aec:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000aee:	f012 f835 	bl	8012b5c <siprintf>
  OLED_ShowString(0, 24, text, 12);
 8000af2:	230c      	movs	r3, #12
 8000af4:	4a44      	ldr	r2, [pc, #272]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000af6:	2118      	movs	r1, #24
 8000af8:	2000      	movs	r0, #0
 8000afa:	f010 f8c7 	bl	8010c8c <OLED_ShowString>
  sprintf((char *)text, "U: %5.2f I: %5.2f", U, I);
 8000afe:	4b46      	ldr	r3, [pc, #280]	@ (8000c18 <appOLEDShow+0x1c8>)
 8000b00:	edd3 7a00 	vldr	s15, [r3]
 8000b04:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b08:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <appOLEDShow+0x1cc>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b12:	ed8d 7b00 	vstr	d7, [sp]
 8000b16:	ec53 2b16 	vmov	r2, r3, d6
 8000b1a:	4941      	ldr	r1, [pc, #260]	@ (8000c20 <appOLEDShow+0x1d0>)
 8000b1c:	483a      	ldr	r0, [pc, #232]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000b1e:	f012 f81d 	bl	8012b5c <siprintf>
  OLED_ShowString(0, 36, text, 12);
 8000b22:	230c      	movs	r3, #12
 8000b24:	4a38      	ldr	r2, [pc, #224]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000b26:	2124      	movs	r1, #36	@ 0x24
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f010 f8af 	bl	8010c8c <OLED_ShowString>
  float n = (signal_V->basic->rms_a * signal_I->basic->rms_a + signal_V->basic->rms_b * signal_I->basic->rms_b + signal_V->basic->rms_c * signal_I->basic->rms_c) / (U * I) * 100.f;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b38:	4b34      	ldr	r3, [pc, #208]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b46:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b50:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <appOLEDShow+0x1b0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <appOLEDShow+0x1bc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b7a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <appOLEDShow+0x1c8>)
 8000b80:	ed93 7a00 	vldr	s14, [r3]
 8000b84:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <appOLEDShow+0x1cc>)
 8000b86:	edd3 7a00 	vldr	s15, [r3]
 8000b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b92:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000c24 <appOLEDShow+0x1d4>
 8000b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9a:	edc7 7a01 	vstr	s15, [r7, #4]
  if (n > 100.f)
 8000b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000c24 <appOLEDShow+0x1d4>
 8000ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	dd02      	ble.n	8000bb6 <appOLEDShow+0x166>
  {
    n = 100.f;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <appOLEDShow+0x1d8>)
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	e009      	b.n	8000bca <appOLEDShow+0x17a>
  }
  else if (n < 0.f)
 8000bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d502      	bpl.n	8000bca <appOLEDShow+0x17a>
  {
    n = 0.f;
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  }
  sprintf((char *)text, "cnt: %4ld n: %5.2f%%", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1), n);
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <appOLEDShow+0x1dc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd8:	ed8d 7b00 	vstr	d7, [sp]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4914      	ldr	r1, [pc, #80]	@ (8000c30 <appOLEDShow+0x1e0>)
 8000be0:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000be2:	f011 ffbb 	bl	8012b5c <siprintf>
  OLED_ShowString(0, 48, text, 12);
 8000be6:	230c      	movs	r3, #12
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <appOLEDShow+0x1b8>)
 8000bea:	2130      	movs	r1, #48	@ 0x30
 8000bec:	2000      	movs	r0, #0
 8000bee:	f010 f84d 	bl	8010c8c <OLED_ShowString>
  OLED_Refresh();
 8000bf2:	f00f fedb 	bl	80109ac <OLED_Refresh>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24009534 	.word	0x24009534
 8000c04:	08015108 	.word	0x08015108
 8000c08:	2400035c 	.word	0x2400035c
 8000c0c:	24009538 	.word	0x24009538
 8000c10:	0801511c 	.word	0x0801511c
 8000c14:	08015130 	.word	0x08015130
 8000c18:	24009528 	.word	0x24009528
 8000c1c:	2400952c 	.word	0x2400952c
 8000c20:	08015144 	.word	0x08015144
 8000c24:	42c80000 	.word	0x42c80000
 8000c28:	42c80000 	.word	0x42c80000
 8000c2c:	24000554 	.word	0x24000554
 8000c30:	08015158 	.word	0x08015158

08000c34 <appACVControl>:

/**
 * @brief 交流逆变电压控制
 */
void appACVControl()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  static PID pidACV;
  pid_Init(&pidACV, 0.01f, 0.1f, 0, 1.f, 0.f);
 8000c38:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 8000c78 <appACVControl+0x44>
 8000c3c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8000c40:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8000c78 <appACVControl+0x44>
 8000c44:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000c7c <appACVControl+0x48>
 8000c48:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000c80 <appACVControl+0x4c>
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <appACVControl+0x50>)
 8000c4e:	f010 f8d7 	bl	8010e00 <pid_Init>
  pid(&pidACV, 5.f, signal_V->basic->rms_a);
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <appACVControl+0x54>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c5c:	eef0 0a67 	vmov.f32	s1, s15
 8000c60:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <appACVControl+0x50>)
 8000c66:	f010 f8fa 	bl	8010e5e <pid>
  M = pidACV.out;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <appACVControl+0x50>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <appACVControl+0x58>)
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	3dcccccd 	.word	0x3dcccccd
 8000c80:	3c23d70a 	.word	0x3c23d70a
 8000c84:	2400037c 	.word	0x2400037c
 8000c88:	24009534 	.word	0x24009534
 8000c8c:	24009530 	.word	0x24009530

08000c90 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b73      	ldr	r3, [pc, #460]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a71      	ldr	r2, [pc, #452]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a6a      	ldr	r2, [pc, #424]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b67      	ldr	r3, [pc, #412]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b64      	ldr	r3, [pc, #400]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a62      	ldr	r2, [pc, #392]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b60      	ldr	r3, [pc, #384]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b5c      	ldr	r3, [pc, #368]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a5b      	ldr	r2, [pc, #364]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b58      	ldr	r3, [pc, #352]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	4b55      	ldr	r3, [pc, #340]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4a53      	ldr	r2, [pc, #332]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4b51      	ldr	r3, [pc, #324]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	4a4c      	ldr	r2, [pc, #304]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4c:	4b49      	ldr	r3, [pc, #292]	@ (8000e74 <MX_GPIO_Init+0x1e4>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4846      	ldr	r0, [pc, #280]	@ (8000e78 <MX_GPIO_Init+0x1e8>)
 8000d60:	f001 fe22 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4844      	ldr	r0, [pc, #272]	@ (8000e7c <MX_GPIO_Init+0x1ec>)
 8000d6a:	f001 fe1d 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2188      	movs	r1, #136	@ 0x88
 8000d72:	4843      	ldr	r0, [pc, #268]	@ (8000e80 <MX_GPIO_Init+0x1f0>)
 8000d74:	f001 fe18 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7e:	4841      	ldr	r0, [pc, #260]	@ (8000e84 <MX_GPIO_Init+0x1f4>)
 8000d80:	f001 fe12 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2101      	movs	r1, #1
 8000d88:	483f      	ldr	r0, [pc, #252]	@ (8000e88 <MX_GPIO_Init+0x1f8>)
 8000d8a:	f001 fe0d 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	@ 0x40
 8000d92:	483d      	ldr	r0, [pc, #244]	@ (8000e88 <MX_GPIO_Init+0x1f8>)
 8000d94:	f001 fe08 	bl	80029a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4832      	ldr	r0, [pc, #200]	@ (8000e78 <MX_GPIO_Init+0x1e8>)
 8000db0:	f001 fc4a 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482c      	ldr	r0, [pc, #176]	@ (8000e7c <MX_GPIO_Init+0x1ec>)
 8000dcc:	f001 fc3c 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000dd0:	2388      	movs	r3, #136	@ 0x88
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4826      	ldr	r0, [pc, #152]	@ (8000e80 <MX_GPIO_Init+0x1f0>)
 8000de8:	f001 fc2e 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	481f      	ldr	r0, [pc, #124]	@ (8000e80 <MX_GPIO_Init+0x1f0>)
 8000e02:	f001 fc21 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e10:	2302      	movs	r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4819      	ldr	r0, [pc, #100]	@ (8000e84 <MX_GPIO_Init+0x1f4>)
 8000e20:	f001 fc12 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <MX_GPIO_Init+0x1f8>)
 8000e3c:	f001 fc04 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000e40:	2340      	movs	r3, #64	@ 0x40
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <MX_GPIO_Init+0x1f8>)
 8000e58:	f001 fbf6 	bl	8002648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2105      	movs	r1, #5
 8000e60:	2017      	movs	r0, #23
 8000e62:	f001 f901 	bl	8002068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e66:	2017      	movs	r0, #23
 8000e68:	f001 f918 	bl	800209c <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	@ 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020800 	.word	0x58020800
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58020000 	.word	0x58020000
 8000e88:	58022000 	.word	0x58022000

08000e8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <MX_I2C1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <MX_I2C1_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000ec8:	f001 fdbc 	bl	8002a44 <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 fa33 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000eda:	f002 fb3f 	bl	800355c <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 fa2a 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_I2C1_Init+0x74>)
 8000eec:	f002 fb81 	bl	80035f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fa21 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240003a0 	.word	0x240003a0
 8000f04:	40005400 	.word	0x40005400
 8000f08:	307075b1 	.word	0x307075b1

08000f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	22c0      	movs	r2, #192	@ 0xc0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f011 fe78 	bl	8012c22 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a26      	ldr	r2, [pc, #152]	@ (8000fd0 <HAL_I2C_MspInit+0xc4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d145      	bne.n	8000fc8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f3c:	f04f 0208 	mov.w	r2, #8
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 fe94 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f5e:	f000 f9ed 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f80:	23c0      	movs	r3, #192	@ 0xc0
 8000f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f86:	2312      	movs	r3, #18
 8000f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <HAL_I2C_MspInit+0xcc>)
 8000fa6:	f001 fb4f 	bl	8002648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fb0:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000fb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_I2C_MspInit+0xc8>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	37e8      	adds	r7, #232	@ 0xe8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020400 	.word	0x58020400

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fe2:	f000 f961 	bl	80012a8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fe6:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <main+0x10c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d11b      	bne.n	800102a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff2:	f3bf 8f4f 	dsb	sy
}
 8000ff6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff8:	f3bf 8f6f 	isb	sy
}
 8000ffc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80010e8 <main+0x10c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001006:	f3bf 8f4f 	dsb	sy
}
 800100a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800100c:	f3bf 8f6f 	isb	sy
}
 8001010:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <main+0x10c>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	4a34      	ldr	r2, [pc, #208]	@ (80010e8 <main+0x10c>)
 8001018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800101c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001024:	f3bf 8f6f 	isb	sy
}
 8001028:	e000      	b.n	800102c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800102a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800102c:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <main+0x10c>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d138      	bne.n	80010aa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <main+0x10c>)
 800103a:	2200      	movs	r2, #0
 800103c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001040:	f3bf 8f4f 	dsb	sy
}
 8001044:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <main+0x10c>)
 8001048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	0b5b      	lsrs	r3, r3, #13
 8001052:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001056:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001060:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	015a      	lsls	r2, r3, #5
 8001066:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800106a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001070:	491d      	ldr	r1, [pc, #116]	@ (80010e8 <main+0x10c>)
 8001072:	4313      	orrs	r3, r2
 8001074:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1ef      	bne.n	8001062 <main+0x86>
    } while(sets-- != 0U);
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e5      	bne.n	8001058 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800108c:	f3bf 8f4f 	dsb	sy
}
 8001090:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <main+0x10c>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <main+0x10c>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
}
 80010a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010a4:	f3bf 8f6f 	isb	sy
}
 80010a8:	e000      	b.n	80010ac <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80010aa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f000 fe98 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f81c 	bl	80010ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010b4:	f000 f8c8 	bl	8001248 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f7ff fdea 	bl	8000c90 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010bc:	f000 f944 	bl	8001348 <MX_SPI1_Init>
  MX_SPI2_Init();
 80010c0:	f000 f998 	bl	80013f4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80010c4:	f000 fd50 	bl	8001b68 <MX_TIM2_Init>
  MX_I2C1_Init();
 80010c8:	f7ff fee0 	bl	8000e8c <MX_I2C1_Init>
  MX_TIM1_Init();
 80010cc:	f000 fc84 	bl	80019d8 <MX_TIM1_Init>
  MX_DAC1_Init();
 80010d0:	f7ff fa6c 	bl	80005ac <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80010d4:	f00e fc90 	bl	800f9f8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010d8:	f00b ff0e 	bl	800cef8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010dc:	f7ff fae6 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010e0:	f00b ff2e 	bl	800cf40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <main+0x108>
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09e      	sub	sp, #120	@ 0x78
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	224c      	movs	r2, #76	@ 0x4c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f011 fd91 	bl	8012c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f011 fd8a 	bl	8012c22 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800110e:	2002      	movs	r0, #2
 8001110:	f003 fd5a 	bl	8004bc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b48      	ldr	r3, [pc, #288]	@ (800123c <SystemClock_Config+0x150>)
 800111a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111c:	4a47      	ldr	r2, [pc, #284]	@ (800123c <SystemClock_Config+0x150>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001124:	4b45      	ldr	r3, [pc, #276]	@ (800123c <SystemClock_Config+0x150>)
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <SystemClock_Config+0x154>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <SystemClock_Config+0x154>)
 8001134:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <SystemClock_Config+0x154>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001146:	bf00      	nop
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <SystemClock_Config+0x154>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001154:	d1f8      	bne.n	8001148 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <SystemClock_Config+0x158>)
 8001158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800115c:	4a39      	ldr	r2, [pc, #228]	@ (8001244 <SystemClock_Config+0x158>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001166:	4b37      	ldr	r3, [pc, #220]	@ (8001244 <SystemClock_Config+0x158>)
 8001168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <SystemClock_Config+0x154>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a30      	ldr	r2, [pc, #192]	@ (8001240 <SystemClock_Config+0x154>)
 800117e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <SystemClock_Config+0x154>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <SystemClock_Config+0x150>)
 8001190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001192:	4a2a      	ldr	r2, [pc, #168]	@ (800123c <SystemClock_Config+0x150>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <SystemClock_Config+0x150>)
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011a6:	bf00      	nop
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <SystemClock_Config+0x154>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b4:	d1f8      	bne.n	80011a8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	2302      	movs	r3, #2
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80011c8:	2305      	movs	r3, #5
 80011ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011cc:	23c0      	movs	r3, #192	@ 0xc0
 80011ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80011d4:	2314      	movs	r3, #20
 80011d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d8:	2302      	movs	r3, #2
 80011da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011dc:	2308      	movs	r3, #8
 80011de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fd35 	bl	8004c5c <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x110>
  {
    Error_Handler();
 80011f8:	f000 f8a0 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	233f      	movs	r3, #63	@ 0x3f
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2303      	movs	r3, #3
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001208:	2308      	movs	r3, #8
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800120c:	2340      	movs	r3, #64	@ 0x40
 800120e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001210:	2340      	movs	r3, #64	@ 0x40
 8001212:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800121a:	2340      	movs	r3, #64	@ 0x40
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2104      	movs	r1, #4
 8001224:	4618      	mov	r0, r3
 8001226:	f004 f973 	bl	8005510 <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001230:	f000 f884 	bl	800133c <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	3778      	adds	r7, #120	@ 0x78
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	58000400 	.word	0x58000400
 8001240:	58024800 	.word	0x58024800
 8001244:	58024400 	.word	0x58024400

08001248 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0b0      	sub	sp, #192	@ 0xc0
 800124c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	22c0      	movs	r2, #192	@ 0xc0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f011 fce4 	bl	8012c22 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 800125a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001266:	2319      	movs	r3, #25
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800126a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001280:	2300      	movs	r3, #0
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001288:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fcf5 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 800129c:	f000 f84e 	bl	800133c <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	37c0      	adds	r7, #192	@ 0xc0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012ba:	f000 fefd 	bl	80020b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80012c6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80012ca:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80012cc:	2312      	movs	r3, #18
 80012ce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012d8:	2303      	movs	r3, #3
 80012da:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ec:	463b      	mov	r3, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 ff1a 	bl	8002128 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 80012f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80012fe:	2310      	movs	r3, #16
 8001300:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff0f 	bl	8002128 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800130a:	2004      	movs	r0, #4
 800130c:	f000 feec 	bl	80020e8 <HAL_MPU_Enable>

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132a:	f000 fd95 	bl	8001e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40001000 	.word	0x40001000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800134e:	4a28      	ldr	r2, [pc, #160]	@ (80013f0 <MX_SPI1_Init+0xa8>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001354:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800135c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001360:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001364:	2207      	movs	r2, #7
 8001366:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001376:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800137a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_SPI1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_SPI1_Init+0xa4>)
 800139c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_SPI1_Init+0xa4>)
 80013da:	f005 ffbf 	bl	800735c <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80013e4:	f7ff ffaa 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	240003f4 	.word	0x240003f4
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_SPI2_Init+0xa8>)
 80013fa:	4a29      	ldr	r2, [pc, #164]	@ (80014a0 <MX_SPI2_Init+0xac>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001400:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001408:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800140c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001410:	220f      	movs	r2, #15
 8001412:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800141a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_SPI2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001424:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001428:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_SPI2_Init+0xa8>)
 800142c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_SPI2_Init+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001446:	2200      	movs	r2, #0
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_SPI2_Init+0xa8>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_SPI2_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800145e:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_SPI2_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001472:	2200      	movs	r2, #0
 8001474:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001478:	2200      	movs	r2, #0
 800147a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_SPI2_Init+0xa8>)
 800147e:	2200      	movs	r2, #0
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_SPI2_Init+0xa8>)
 8001484:	2200      	movs	r2, #0
 8001486:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_SPI2_Init+0xa8>)
 800148a:	f005 ff67 	bl	800735c <HAL_SPI_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001494:	f7ff ff52 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2400047c 	.word	0x2400047c
 80014a0:	40003800 	.word	0x40003800

080014a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a34      	ldr	r2, [pc, #208]	@ (8001594 <HAL_SPI_MspInit+0xf0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12e      	bne.n	8001524 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014cc:	4a32      	ldr	r2, [pc, #200]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014d6:	4b30      	ldr	r3, [pc, #192]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin;
 8001502:	23a0      	movs	r3, #160	@ 0xa0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	481f      	ldr	r0, [pc, #124]	@ (800159c <HAL_SPI_MspInit+0xf8>)
 800151e:	f001 f893 	bl	8002648 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001522:	e032      	b.n	800158a <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	@ (80015a0 <HAL_SPI_MspInit+0xfc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12d      	bne.n	800158a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001534:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_SPI_MspInit+0xf4>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800156a:	2306      	movs	r3, #6
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157a:	2305      	movs	r3, #5
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <HAL_SPI_MspInit+0x100>)
 8001586:	f001 f85f 	bl	8002648 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	@ 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013000 	.word	0x40013000
 8001598:	58024400 	.word	0x58024400
 800159c:	58020000 	.word	0x58020000
 80015a0:	40003800 	.word	0x40003800
 80015a4:	58022000 	.word	0x58022000

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x38>)
 80015b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_MspInit+0x38>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_MspInit+0x38>)
 80015c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	210f      	movs	r1, #15
 80015d0:	f06f 0001 	mvn.w	r0, #1
 80015d4:	f000 fd48 	bl	8002068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58024400 	.word	0x58024400

080015e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	@ 0x40
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d827      	bhi.n	8001642 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	2036      	movs	r0, #54	@ 0x36
 80015f8:	f000 fd36 	bl	8002068 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f000 fd4d 	bl	800209c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001602:	4a29      	ldr	r2, [pc, #164]	@ (80016a8 <HAL_InitTick+0xc4>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001608:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_InitTick+0xc8>)
 800160a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160e:	4a27      	ldr	r2, [pc, #156]	@ (80016ac <HAL_InitTick+0xc8>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001618:	4b24      	ldr	r3, [pc, #144]	@ (80016ac <HAL_InitTick+0xc8>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001626:	f107 0210 	add.w	r2, r7, #16
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fae3 	bl	8005bfc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800163a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800163c:	2b00      	cmp	r3, #0
 800163e:	d106      	bne.n	800164e <HAL_InitTick+0x6a>
 8001640:	e001      	b.n	8001646 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e02b      	b.n	800169e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001646:	f004 fac3 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 800164a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800164c:	e004      	b.n	8001658 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800164e:	f004 fabf 	bl	8005bd0 <HAL_RCC_GetPCLK1Freq>
 8001652:	4603      	mov	r3, r0
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <HAL_InitTick+0xcc>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0c9b      	lsrs	r3, r3, #18
 8001662:	3b01      	subs	r3, #1
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_InitTick+0xd0>)
 8001668:	4a13      	ldr	r2, [pc, #76]	@ (80016b8 <HAL_InitTick+0xd4>)
 800166a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_InitTick+0xd0>)
 800166e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001672:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001674:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_InitTick+0xd0>)
 8001676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001678:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_InitTick+0xd0>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_InitTick+0xd0>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001686:	480b      	ldr	r0, [pc, #44]	@ (80016b4 <HAL_InitTick+0xd0>)
 8001688:	f006 fcd5 	bl	8008036 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d104      	bne.n	800169c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001692:	4808      	ldr	r0, [pc, #32]	@ (80016b4 <HAL_InitTick+0xd0>)
 8001694:	f006 fd26 	bl	80080e4 <HAL_TIM_Base_Start_IT>
 8001698:	4603      	mov	r3, r0
 800169a:	e000      	b.n	800169e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3740      	adds	r7, #64	@ 0x40
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000008 	.word	0x24000008
 80016ac:	58024400 	.word	0x58024400
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	24000504 	.word	0x24000504
 80016b8:	40001000 	.word	0x40001000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <NMI_Handler+0x4>

080016c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <MemManage_Handler+0x4>

080016d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 80016f6:	2040      	movs	r0, #64	@ 0x40
 80016f8:	f001 f989 	bl	8002a0e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <TIM6_DAC_IRQHandler+0x20>)
 8001706:	791b      	ldrb	r3, [r3, #4]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <TIM6_DAC_IRQHandler+0x20>)
 8001710:	f000 fdc3 	bl	800229a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001714:	4803      	ldr	r0, [pc, #12]	@ (8001724 <TIM6_DAC_IRQHandler+0x24>)
 8001716:	f006 fecd 	bl	80084b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000310 	.word	0x24000310
 8001724:	24000504 	.word	0x24000504

08001728 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <OTG_FS_IRQHandler+0x10>)
 800172e:	f002 f8ed 	bl	800390c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24006420 	.word	0x24006420

0800173c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_kill>:

int _kill(int pid, int sig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001756:	f011 fac7 	bl	8012ce8 <__errno>
 800175a:	4603      	mov	r3, r0
 800175c:	2216      	movs	r2, #22
 800175e:	601a      	str	r2, [r3, #0]
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_exit>:

void _exit (int status)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffe7 	bl	800174c <_kill>
  while (1) {}    /* Make sure we hang here */
 800177e:	bf00      	nop
 8001780:	e7fd      	b.n	800177e <_exit+0x12>

08001782 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e00a      	b.n	80017aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001794:	f3af 8000 	nop.w
 8001798:	4601      	mov	r1, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	b2ca      	uxtb	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf0      	blt.n	8001794 <_read+0x12>
  }

  return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e009      	b.n	80017e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	60ba      	str	r2, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbf1      	blt.n	80017ce <_write+0x12>
  }
  return len;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_close>:

int _close(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181c:	605a      	str	r2, [r3, #4]
  return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_isatty>:

int _isatty(int file)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f011 fa2c 	bl	8012ce8 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	24080000 	.word	0x24080000
 80018bc:	00008000 	.word	0x00008000
 80018c0:	24000550 	.word	0x24000550
 80018c4:	24009690 	.word	0x24009690

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018cc:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <SystemInit+0xe4>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d2:	4a36      	ldr	r2, [pc, #216]	@ (80019ac <SystemInit+0xe4>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <SystemInit+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d807      	bhi.n	80018f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <SystemInit+0xe8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 030f 	bic.w	r3, r3, #15
 80018f0:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <SystemInit+0xe8>)
 80018f2:	f043 0307 	orr.w	r3, r3, #7
 80018f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018f8:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <SystemInit+0xec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <SystemInit+0xec>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <SystemInit+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <SystemInit+0xec>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4929      	ldr	r1, [pc, #164]	@ (80019b4 <SystemInit+0xec>)
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <SystemInit+0xf0>)
 8001912:	4013      	ands	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001916:	4b26      	ldr	r3, [pc, #152]	@ (80019b0 <SystemInit+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001922:	4b23      	ldr	r3, [pc, #140]	@ (80019b0 <SystemInit+0xe8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 030f 	bic.w	r3, r3, #15
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <SystemInit+0xe8>)
 800192c:	f043 0307 	orr.w	r3, r3, #7
 8001930:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001932:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <SystemInit+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001938:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <SystemInit+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800193e:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <SystemInit+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <SystemInit+0xec>)
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <SystemInit+0xf4>)
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800194a:	4b1a      	ldr	r3, [pc, #104]	@ (80019b4 <SystemInit+0xec>)
 800194c:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <SystemInit+0xf8>)
 800194e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <SystemInit+0xec>)
 8001952:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <SystemInit+0xfc>)
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001956:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <SystemInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <SystemInit+0xec>)
 800195e:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <SystemInit+0xfc>)
 8001960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001962:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <SystemInit+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <SystemInit+0xec>)
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <SystemInit+0xfc>)
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <SystemInit+0xec>)
 8001970:	2200      	movs	r2, #0
 8001972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <SystemInit+0xec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <SystemInit+0xec>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800197e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <SystemInit+0xec>)
 8001982:	2200      	movs	r2, #0
 8001984:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <SystemInit+0x100>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <SystemInit+0x104>)
 800198c:	4013      	ands	r3, r2
 800198e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001992:	d202      	bcs.n	800199a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <SystemInit+0x108>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <SystemInit+0x10c>)
 800199c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	52002000 	.word	0x52002000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019bc:	02020200 	.word	0x02020200
 80019c0:	01ff0000 	.word	0x01ff0000
 80019c4:	01010280 	.word	0x01010280
 80019c8:	5c001000 	.word	0x5c001000
 80019cc:	ffff0000 	.word	0xffff0000
 80019d0:	51008108 	.word	0x51008108
 80019d4:	52004000 	.word	0x52004000

080019d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	@ 0x68
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	222c      	movs	r2, #44	@ 0x2c
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f011 f905 	bl	8012c22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a18:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a1a:	4a52      	ldr	r2, [pc, #328]	@ (8001b64 <MX_TIM1_Init+0x18c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a24:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a26:	2220      	movs	r2, #32
 8001a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a2c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b4b      	ldr	r3, [pc, #300]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a38:	4b49      	ldr	r3, [pc, #292]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b48      	ldr	r3, [pc, #288]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a44:	4846      	ldr	r0, [pc, #280]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a46:	f006 faf6 	bl	8008036 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a50:	f7ff fc74 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a58:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001a5e:	4619      	mov	r1, r3
 8001a60:	483f      	ldr	r0, [pc, #252]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a62:	f006 ff43 	bl	80088ec <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a6c:	f7ff fc66 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a70:	483b      	ldr	r0, [pc, #236]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a72:	f006 fbaf 	bl	80081d4 <HAL_TIM_PWM_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a7c:	f7ff fc5e 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4833      	ldr	r0, [pc, #204]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001a94:	f007 fd4c 	bl	8009530 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a9e:	f7ff fc4d 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa2:	2360      	movs	r3, #96	@ 0x60
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 8001aa6:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4825      	ldr	r0, [pc, #148]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001aca:	f006 fdfb 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ad4:	f7ff fc32 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001adc:	2204      	movs	r2, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481f      	ldr	r0, [pc, #124]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001ae2:	f006 fdef 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001aec:	f7ff fc26 	bl	800133c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001af4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001af8:	2208      	movs	r2, #8
 8001afa:	4619      	mov	r1, r3
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001afe:	f006 fde1 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001b08:	f7ff fc18 	bl	800133c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001b42:	f007 fd83 	bl	800964c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001b4c:	f7ff fbf6 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM1_Init+0x188>)
 8001b52:	f000 f8b9 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3768      	adds	r7, #104	@ 0x68
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	24000554 	.word	0x24000554
 8001b64:	40010000 	.word	0x40010000

08001b68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	@ 0x38
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001bae:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001bb0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc2:	4824      	ldr	r0, [pc, #144]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001bc4:	f006 fa37 	bl	8008036 <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001bce:	f7ff fbb5 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481d      	ldr	r0, [pc, #116]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001be0:	f006 fe84 	bl	80088ec <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001bea:	f7ff fba7 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bee:	4819      	ldr	r0, [pc, #100]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001bf0:	f006 faf0 	bl	80081d4 <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001bfa:	f7ff fb9f 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4811      	ldr	r0, [pc, #68]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001c0e:	f007 fc8f 	bl	8009530 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c18:	f7ff fb90 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	@ 0x60
 8001c1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001c20:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001c36:	f006 fd45 	bl	80086c4 <HAL_TIM_PWM_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c40:	f7ff fb7c 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c44:	4803      	ldr	r0, [pc, #12]	@ (8001c54 <MX_TIM2_Init+0xec>)
 8001c46:	f000 f83f 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001c4a:	bf00      	nop
 8001c4c:	3738      	adds	r7, #56	@ 0x38
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	240005a0 	.word	0x240005a0

08001c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_TIM_Base_MspInit+0x68>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10f      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6a:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c88:	e013      	b.n	8001cb2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ca4:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	58024400 	.word	0x58024400

08001cc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a25      	ldr	r2, [pc, #148]	@ (8001d7c <HAL_TIM_MspPostInit+0xb4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d120      	bne.n	8001d2c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf0:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001d08:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4817      	ldr	r0, [pc, #92]	@ (8001d84 <HAL_TIM_MspPostInit+0xbc>)
 8001d26:	f000 fc8f 	bl	8002648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d2a:	e023      	b.n	8001d74 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d34:	d11e      	bne.n	8001d74 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_TIM_MspPostInit+0xb8>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d64:	2301      	movs	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <HAL_TIM_MspPostInit+0xc0>)
 8001d70:	f000 fc6a 	bl	8002648 <HAL_GPIO_Init>
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020400 	.word	0x58020400
 8001d88:	58020000 	.word	0x58020000

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d90:	f7ff fd9a 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d96:	490d      	ldr	r1, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dac:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f010 ff9b 	bl	8012cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff f90d 	bl	8000fdc <main>
  bx  lr
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001dc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dcc:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001dd0:	08017670 	.word	0x08017670
  ldr r2, =_sbss
 8001dd4:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001dd8:	2400968c 	.word	0x2400968c

08001ddc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC3_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f933 	bl	8002052 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dec:	f003 fd46 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_Init+0x68>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	4913      	ldr	r1, [pc, #76]	@ (8001e4c <HAL_Init+0x6c>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_Init+0x68>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_Init+0x6c>)
 8001e14:	5cd3      	ldrb	r3, [r2, r3]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_Init+0x70>)
 8001e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e24:	4a0b      	ldr	r2, [pc, #44]	@ (8001e54 <HAL_Init+0x74>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f7ff fbda 	bl	80015e4 <HAL_InitTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e002      	b.n	8001e40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3a:	f7ff fbb5 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	080152c4 	.word	0x080152c4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	24000000 	.word	0x24000000

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2400000c 	.word	0x2400000c
 8001e7c:	240005ec 	.word	0x240005ec

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	240005ec 	.word	0x240005ec

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2400000c 	.word	0x2400000c

08001ee0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <HAL_GetREVID+0x14>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	5c001000 	.word	0x5c001000

08001ef8 <__NVIC_SetPriorityGrouping>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x40>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	05fa0000 	.word	0x05fa0000

08001f40 <__NVIC_GetPriorityGrouping>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <__NVIC_EnableIRQ+0x38>)
 8001f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_SetPriority>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db0a      	blt.n	8001fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <__NVIC_SetPriority+0x4c>)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	0112      	lsls	r2, r2, #4
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fc0:	e00a      	b.n	8001fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <__NVIC_SetPriority+0x50>)
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3b04      	subs	r3, #4
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	761a      	strb	r2, [r3, #24]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000e100 	.word	0xe000e100
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <NVIC_EncodePriority>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	bf28      	it	cs
 800200a:	2304      	movcs	r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3304      	adds	r3, #4
 8002012:	2b06      	cmp	r3, #6
 8002014:	d902      	bls.n	800201c <NVIC_EncodePriority+0x30>
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3b03      	subs	r3, #3
 800201a:	e000      	b.n	800201e <NVIC_EncodePriority+0x32>
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002020:	f04f 32ff 	mov.w	r2, #4294967295
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	401a      	ands	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43d9      	mvns	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	4313      	orrs	r3, r2
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff4c 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002076:	f7ff ff63 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 800207a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	6978      	ldr	r0, [r7, #20]
 8002082:	f7ff ffb3 	bl	8001fec <NVIC_EncodePriority>
 8002086:	4602      	mov	r2, r0
 8002088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff82 	bl	8001f98 <__NVIC_SetPriority>
}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff56 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020bc:	f3bf 8f5f 	dmb	sy
}
 80020c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_MPU_Disable+0x28>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	4a06      	ldr	r2, [pc, #24]	@ (80020e0 <HAL_MPU_Disable+0x28>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020ce:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_MPU_Disable+0x2c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00
 80020e4:	e000ed90 	.word	0xe000ed90

080020e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <HAL_MPU_Enable+0x38>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_MPU_Enable+0x3c>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_MPU_Enable+0x3c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002106:	f3bf 8f4f 	dsb	sy
}
 800210a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800210c:	f3bf 8f6f 	isb	sy
}
 8002110:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed90 	.word	0xe000ed90
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	785a      	ldrb	r2, [r3, #1]
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_MPU_ConfigRegion+0x7c>)
 8002136:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_MPU_ConfigRegion+0x7c>)
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <HAL_MPU_ConfigRegion+0x7c>)
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002144:	4a17      	ldr	r2, [pc, #92]	@ (80021a4 <HAL_MPU_ConfigRegion+0x7c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7b1b      	ldrb	r3, [r3, #12]
 8002150:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7adb      	ldrb	r3, [r3, #11]
 8002156:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002158:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7a9b      	ldrb	r3, [r3, #10]
 800215e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002160:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7b5b      	ldrb	r3, [r3, #13]
 8002166:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002168:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7b9b      	ldrb	r3, [r3, #14]
 800216e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002170:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7bdb      	ldrb	r3, [r3, #15]
 8002176:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002178:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7a5b      	ldrb	r3, [r3, #9]
 800217e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002180:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7a1b      	ldrb	r3, [r3, #8]
 8002186:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002188:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002192:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002194:	6113      	str	r3, [r2, #16]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed90 	.word	0xe000ed90

080021a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e014      	b.n	80021e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	791b      	ldrb	r3, [r3, #4]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fa20 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e046      	b.n	800228e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	795b      	ldrb	r3, [r3, #5]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_DAC_Start+0x20>
 8002208:	2302      	movs	r3, #2
 800220a:	e040      	b.n	800228e <HAL_DAC_Start+0xa2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2201      	movs	r2, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10f      	bne.n	8002256 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11d      	bne.n	8002280 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	e014      	b.n	8002280 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2102      	movs	r1, #2
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0202 	orr.w	r2, r2, #2
 800227e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01d      	beq.n	80022f8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d018      	beq.n	80022f8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f851 	bl	800239a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d018      	beq.n	800233e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2204      	movs	r2, #4
 8002310:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f043 0202 	orr.w	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002326:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002336:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f97b 	bl	8002634 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e015      	b.n	800238e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	3308      	adds	r3, #8
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e004      	b.n	8002384 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	3314      	adds	r3, #20
 8002382:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_DAC_ConfigChannel+0x1e>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e12a      	b.n	8002628 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	795b      	ldrb	r3, [r3, #5]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_DAC_ConfigChannel+0x2e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e124      	b.n	8002628 <HAL_DAC_ConfigChannel+0x278>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2202      	movs	r2, #2
 80023e8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d17a      	bne.n	80024e8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80023f2:	f7ff fd45 	bl	8001e80 <HAL_GetTick>
 80023f6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d13d      	bne.n	800247a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023fe:	e018      	b.n	8002432 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002400:	f7ff fd3e 	bl	8001e80 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d911      	bls.n	8002432 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002414:	4b86      	ldr	r3, [pc, #536]	@ (8002630 <HAL_DAC_ConfigChannel+0x280>)
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f043 0208 	orr.w	r2, r3, #8
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2203      	movs	r2, #3
 800242c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0fa      	b.n	8002628 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002438:	4b7d      	ldr	r3, [pc, #500]	@ (8002630 <HAL_DAC_ConfigChannel+0x280>)
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1df      	bne.n	8002400 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	6992      	ldr	r2, [r2, #24]
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
 800244a:	e020      	b.n	800248e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800244c:	f7ff fd18 	bl	8001e80 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d90f      	bls.n	800247a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002460:	2b00      	cmp	r3, #0
 8002462:	da0a      	bge.n	800247a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f043 0208 	orr.w	r2, r3, #8
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2203      	movs	r2, #3
 8002474:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0d6      	b.n	8002628 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	2b00      	cmp	r3, #0
 8002482:	dbe3      	blt.n	800244c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	6992      	ldr	r2, [r2, #24]
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	ea02 0103 	and.w	r1, r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	21ff      	movs	r1, #255	@ 0xff
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	ea02 0103 	and.w	r1, r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d11d      	bne.n	800252c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002532:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2207      	movs	r2, #7
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d102      	bne.n	8002556 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
 8002554:	e00f      	b.n	8002576 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d102      	bne.n	8002564 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800255e:	2301      	movs	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
 8002562:	e008      	b.n	8002576 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800256c:	2301      	movs	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002570:	e001      	b.n	8002576 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4313      	orrs	r3, r2
 8002580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	22c0      	movs	r2, #192	@ 0xc0
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002624:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002628:	4618      	mov	r0, r3
 800262a:	3728      	adds	r7, #40	@ 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20008000 	.word	0x20008000

08002634 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002656:	4b89      	ldr	r3, [pc, #548]	@ (800287c <HAL_GPIO_Init+0x234>)
 8002658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800265a:	e194      	b.n	8002986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8186 	beq.w	8002980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d005      	beq.n	800268c <HAL_GPIO_Init+0x44>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d130      	bne.n	80026ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c2:	2201      	movs	r2, #1
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 0201 	and.w	r2, r3, #1
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d017      	beq.n	800272a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2203      	movs	r2, #3
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d123      	bne.n	800277e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	220f      	movs	r2, #15
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0203 	and.w	r2, r3, #3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80e0 	beq.w	8002980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <HAL_GPIO_Init+0x238>)
 80027c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002880 <HAL_GPIO_Init+0x238>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_GPIO_Init+0x238>)
 80027d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <HAL_GPIO_Init+0x23c>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <HAL_GPIO_Init+0x240>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d052      	beq.n	80028b0 <HAL_GPIO_Init+0x268>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <HAL_GPIO_Init+0x244>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_GPIO_Init+0x22e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1e      	ldr	r2, [pc, #120]	@ (8002890 <HAL_GPIO_Init+0x248>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d02b      	beq.n	8002872 <HAL_GPIO_Init+0x22a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <HAL_GPIO_Init+0x24c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d025      	beq.n	800286e <HAL_GPIO_Init+0x226>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <HAL_GPIO_Init+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01f      	beq.n	800286a <HAL_GPIO_Init+0x222>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1b      	ldr	r2, [pc, #108]	@ (800289c <HAL_GPIO_Init+0x254>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d019      	beq.n	8002866 <HAL_GPIO_Init+0x21e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1a      	ldr	r2, [pc, #104]	@ (80028a0 <HAL_GPIO_Init+0x258>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_GPIO_Init+0x21a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <HAL_GPIO_Init+0x25c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <HAL_GPIO_Init+0x216>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <HAL_GPIO_Init+0x260>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <HAL_GPIO_Init+0x212>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <HAL_GPIO_Init+0x264>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_GPIO_Init+0x20e>
 8002852:	2309      	movs	r3, #9
 8002854:	e02d      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 8002856:	230a      	movs	r3, #10
 8002858:	e02b      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 800285a:	2308      	movs	r3, #8
 800285c:	e029      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 800285e:	2307      	movs	r3, #7
 8002860:	e027      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 8002862:	2306      	movs	r3, #6
 8002864:	e025      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 8002866:	2305      	movs	r3, #5
 8002868:	e023      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 800286a:	2304      	movs	r3, #4
 800286c:	e021      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 800286e:	2303      	movs	r3, #3
 8002870:	e01f      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 8002872:	2302      	movs	r3, #2
 8002874:	e01d      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 8002876:	2301      	movs	r3, #1
 8002878:	e01b      	b.n	80028b2 <HAL_GPIO_Init+0x26a>
 800287a:	bf00      	nop
 800287c:	58000080 	.word	0x58000080
 8002880:	58024400 	.word	0x58024400
 8002884:	58000400 	.word	0x58000400
 8002888:	58020000 	.word	0x58020000
 800288c:	58020400 	.word	0x58020400
 8002890:	58020800 	.word	0x58020800
 8002894:	58020c00 	.word	0x58020c00
 8002898:	58021000 	.word	0x58021000
 800289c:	58021400 	.word	0x58021400
 80028a0:	58021800 	.word	0x58021800
 80028a4:	58021c00 	.word	0x58021c00
 80028a8:	58022000 	.word	0x58022000
 80028ac:	58022400 	.word	0x58022400
 80028b0:	2300      	movs	r3, #0
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	f002 0203 	and.w	r2, r2, #3
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	4093      	lsls	r3, r2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c2:	4938      	ldr	r1, [pc, #224]	@ (80029a4 <HAL_GPIO_Init+0x35c>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f ae63 	bne.w	800265c <HAL_GPIO_Init+0x14>
  }
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	3724      	adds	r7, #36	@ 0x24
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	58000400 	.word	0x58000400

080029a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
 80029b4:	4613      	mov	r3, r2
 80029b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b8:	787b      	ldrb	r3, [r7, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	887a      	ldrh	r2, [r7, #2]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029c4:	e003      	b.n	80029ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029c6:	887b      	ldrh	r3, [r7, #2]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	400b      	ands	r3, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	619a      	str	r2, [r3, #24]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00e ffff 	bl	8011a38 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e08b      	b.n	8002b6e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fa4e 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e007      	b.n	8002af6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_I2C_Init+0x134>)
 8002b02:	430b      	orrs	r3, r1
 8002b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69d9      	ldr	r1, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	02008000 	.word	0x02008000

08002b7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	f040 80f9 	bne.w	8002d96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x34>
 8002baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0ed      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Mem_Write+0x4e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0e6      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd2:	f7ff f955 	bl	8001e80 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2319      	movs	r3, #25
 8002bde:	2201      	movs	r2, #1
 8002be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fac3 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d1      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2221      	movs	r2, #33	@ 0x21
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2240      	movs	r2, #64	@ 0x40
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a3a      	ldr	r2, [r7, #32]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1c:	88f8      	ldrh	r0, [r7, #6]
 8002c1e:	893a      	ldrh	r2, [r7, #8]
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f9d3 	bl	8002fd8 <I2C_RequestMemoryWrite>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0a9      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2bff      	cmp	r3, #255	@ 0xff
 8002c4c:	d90e      	bls.n	8002c6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	@ 0xff
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fc47 	bl	80034f8 <I2C_TransferConfig>
 8002c6a:	e00f      	b.n	8002c8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fc36 	bl	80034f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fac6 	bl	8003222 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e07b      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d034      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d130      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	@ 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fa3f 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04d      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	@ 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	@ 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fbeb 	bl	80034f8 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fbda 	bl	80034f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d19e      	bne.n	8002c8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 faac 	bl	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01a      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_I2C_Mem_Write+0x224>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	fe00e800 	.word	0xfe00e800

08002da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 80fd 	bne.w	8002fc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x34>
 8002dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0f1      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x4e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0ea      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dfa:	f7ff f841 	bl	8001e80 <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2319      	movs	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f9af 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0d5      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	@ 0x22
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	@ 0x40
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e44:	88f8      	ldrh	r0, [r7, #6]
 8002e46:	893a      	ldrh	r2, [r7, #8]
 8002e48:	8979      	ldrh	r1, [r7, #10]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4603      	mov	r3, r0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f913 	bl	8003080 <I2C_RequestMemoryRead>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0ad      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d90e      	bls.n	8002e94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	22ff      	movs	r2, #255	@ 0xff
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8979      	ldrh	r1, [r7, #10]
 8002e84:	4b52      	ldr	r3, [pc, #328]	@ (8002fd0 <HAL_I2C_Mem_Read+0x22c>)
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fb33 	bl	80034f8 <I2C_TransferConfig>
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_I2C_Mem_Read+0x22c>)
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fb22 	bl	80034f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f956 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07c      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d034      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d130      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	@ 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f927 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04d      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	@ 0xff
 8002f34:	d90e      	bls.n	8002f54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	22ff      	movs	r2, #255	@ 0xff
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fad3 	bl	80034f8 <I2C_TransferConfig>
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fac2 	bl	80034f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d19a      	bne.n	8002eb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f994 	bl	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e01a      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2220      	movs	r2, #32
 8002f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_I2C_Mem_Read+0x230>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	80002400 	.word	0x80002400
 8002fd4:	fe00e800 	.word	0xfe00e800

08002fd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	460b      	mov	r3, r1
 8002fec:	813b      	strh	r3, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	4b20      	ldr	r3, [pc, #128]	@ (800307c <I2C_RequestMemoryWrite+0xa4>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fa79 	bl	80034f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f909 	bl	8003222 <I2C_WaitOnTXISFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02c      	b.n	8003074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
 800302a:	e015      	b.n	8003058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f8ef 	bl	8003222 <I2C_WaitOnTXISFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e012      	b.n	8003074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800304e:	893b      	ldrh	r3, [r7, #8]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2200      	movs	r2, #0
 8003060:	2180      	movs	r1, #128	@ 0x80
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f884 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	80002000 	.word	0x80002000

08003080 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	8979      	ldrh	r1, [r7, #10]
 80030a0:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <I2C_RequestMemoryRead+0xa4>)
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa26 	bl	80034f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8b6 	bl	8003222 <I2C_WaitOnTXISFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e02c      	b.n	800311a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d105      	bne.n	80030d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c6:	893b      	ldrh	r3, [r7, #8]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80030d0:	e015      	b.n	80030fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d2:	893b      	ldrh	r3, [r7, #8]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f89c 	bl	8003222 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e012      	b.n	800311a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2200      	movs	r2, #0
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f831 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	80002000 	.word	0x80002000

08003128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d103      	bne.n	8003146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d007      	beq.n	8003164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	619a      	str	r2, [r3, #24]
  }
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003180:	e03b      	b.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8d6 	bl	8003338 <I2C_IsErrorOccurred>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d02d      	beq.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe fe6f 	bl	8001e80 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d122      	bne.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d113      	bne.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	429a      	cmp	r2, r3
 8003216:	d0b4      	beq.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800322e:	e033      	b.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f87f 	bl	8003338 <I2C_IsErrorOccurred>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e031      	b.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d025      	beq.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe fe18 	bl	8001e80 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d11a      	bne.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d013      	beq.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d1c4      	bne.n	8003230 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032bc:	e02f      	b.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f838 	bl	8003338 <I2C_IsErrorOccurred>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e02d      	b.n	800332e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe fdd5 	bl	8001e80 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11a      	bne.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d013      	beq.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b20      	cmp	r3, #32
 800332a:	d1c8      	bne.n	80032be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d068      	beq.n	8003436 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800336c:	e049      	b.n	8003402 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d045      	beq.n	8003402 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe fd83 	bl	8001e80 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_IsErrorOccurred+0x54>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d13a      	bne.n	8003402 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003396:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ae:	d121      	bne.n	80033f4 <I2C_IsErrorOccurred+0xbc>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033b6:	d01d      	beq.n	80033f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d01a      	beq.n	80033f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033ce:	f7fe fd57 	bl	8001e80 <HAL_GetTick>
 80033d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d4:	e00e      	b.n	80033f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033d6:	f7fe fd53 	bl	8001e80 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b19      	cmp	r3, #25
 80033e2:	d907      	bls.n	80033f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	f043 0320 	orr.w	r3, r3, #32
 80033ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033f2:	e006      	b.n	8003402 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d1e9      	bne.n	80033d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b20      	cmp	r3, #32
 800340e:	d003      	beq.n	8003418 <I2C_IsErrorOccurred+0xe0>
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0aa      	beq.n	800336e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2220      	movs	r2, #32
 8003426:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003458:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00b      	beq.n	80034a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800349c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80034a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01c      	beq.n	80034e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fe3b 	bl	8003128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <I2C_IsErrorOccurred+0x1bc>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3728      	adds	r7, #40	@ 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	fe00e800 	.word	0xfe00e800

080034f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	817b      	strh	r3, [r7, #10]
 8003506:	4613      	mov	r3, r2
 8003508:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003510:	7a7b      	ldrb	r3, [r7, #9]
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003518:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	4313      	orrs	r3, r2
 8003522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003526:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	0d5b      	lsrs	r3, r3, #21
 8003532:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003536:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <I2C_TransferConfig+0x60>)
 8003538:	430b      	orrs	r3, r1
 800353a:	43db      	mvns	r3, r3
 800353c:	ea02 0103 	and.w	r1, r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	03ff63ff 	.word	0x03ff63ff

0800355c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	d138      	bne.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800357c:	2302      	movs	r3, #2
 800357e:	e032      	b.n	80035e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	@ 0x24
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6819      	ldr	r1, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	d139      	bne.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003612:	2302      	movs	r3, #2
 8003614:	e033      	b.n	800367e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2224      	movs	r2, #36	@ 0x24
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003644:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af02      	add	r7, sp, #8
 8003690:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0fe      	b.n	800389a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f00c fba9 	bl	800fe08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f006 f9a9 	bl	8009a1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7c1a      	ldrb	r2, [r3, #16]
 80036d0:	f88d 2000 	strb.w	r2, [sp]
 80036d4:	3304      	adds	r3, #4
 80036d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d8:	f006 f87a 	bl	80097d0 <USB_CoreInit>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0d5      	b.n	800389a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f006 f9a1 	bl	8009a3c <USB_SetCurrentMode>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0c6      	b.n	800389a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e04a      	b.n	80037a8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3315      	adds	r3, #21
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3314      	adds	r3, #20
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	b298      	uxth	r0, r3
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	332e      	adds	r3, #46	@ 0x2e
 800374e:	4602      	mov	r2, r0
 8003750:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3318      	adds	r3, #24
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	331c      	adds	r3, #28
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3320      	adds	r3, #32
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3324      	adds	r3, #36	@ 0x24
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3301      	adds	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3af      	bcc.n	8003712 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e044      	b.n	8003842 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3301      	adds	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	791b      	ldrb	r3, [r3, #4]
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3b5      	bcc.n	80037b8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7c1a      	ldrb	r2, [r3, #16]
 8003854:	f88d 2000 	strb.w	r2, [sp]
 8003858:	3304      	adds	r3, #4
 800385a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385c:	f006 f93a 	bl	8009ad4 <USB_DevInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e013      	b.n	800389a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7b1b      	ldrb	r3, [r3, #12]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f001 f96d 	bl	8004b68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f007 f979 	bl	800ab8a <USB_DevDisconnect>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_PCD_Start+0x1c>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e022      	b.n	8003904 <HAL_PCD_Start+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d105      	bne.n	80038e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 f884 	bl	80099f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f007 f927 	bl	800ab48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b08d      	sub	sp, #52	@ 0x34
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f007 f9e5 	bl	800acf2 <USB_GetMode>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 84b9 	bne.w	80042a2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f007 f949 	bl	800abcc <USB_ReadInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 84af 	beq.w	80042a0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f007 f936 	bl	800abcc <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d107      	bne.n	800397a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f002 0202 	and.w	r2, r2, #2
 8003978:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f007 f924 	bl	800abcc <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d161      	bne.n	8003a52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0210 	bic.w	r2, r2, #16
 800399c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f003 020f 	and.w	r2, r3, #15
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	3304      	adds	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	0c5b      	lsrs	r3, r3, #17
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d124      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d035      	beq.n	8003a42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a38      	ldr	r0, [r7, #32]
 80039ea:	f006 ff5b 	bl	800a8a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fa:	441a      	add	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a0c:	441a      	add	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	615a      	str	r2, [r3, #20]
 8003a12:	e016      	b.n	8003a42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	0c5b      	lsrs	r3, r3, #17
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d110      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a26:	2208      	movs	r2, #8
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6a38      	ldr	r0, [r7, #32]
 8003a2c:	f006 ff3a 	bl	800a8a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a3c:	441a      	add	r2, r3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0210 	orr.w	r2, r2, #16
 8003a50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f007 f8b8 	bl	800abcc <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a66:	f040 80a7 	bne.w	8003bb8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f007 f8bd 	bl	800abf2 <USB_ReadDevAllOutEpInterrupt>
 8003a78:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a7a:	e099      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 808e 	beq.w	8003ba4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f007 f8e1 	bl	800ac5a <USB_ReadDevOutEPInterrupt>
 8003a98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00c      	beq.n	8003abe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fecf 	bl	800485c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ada:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 ffa5 	bl	8004a2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2310      	movs	r3, #16
 8003afc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d030      	beq.n	8003b6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b10:	2b80      	cmp	r3, #128	@ 0x80
 8003b12:	d109      	bne.n	8003b28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	78db      	ldrb	r3, [r3, #3]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f00c fa7e 	bl	8010054 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	2302      	movs	r3, #2
 8003b68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2320      	movs	r3, #32
 8003b84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ba2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f47f af62 	bne.w	8003a7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f007 f805 	bl	800abcc <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bcc:	f040 80db 	bne.w	8003d86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f007 f826 	bl	800ac26 <USB_ReadDevAllInEpInterrupt>
 8003bda:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003be0:	e0cd      	b.n	8003d7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80c2 	beq.w	8003d72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f007 f84c 	bl	800ac96 <USB_ReadDevInEPInterrupt>
 8003bfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d057      	beq.n	8003cba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	2201      	movs	r2, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69f9      	ldr	r1, [r7, #28]
 8003c26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	799b      	ldrb	r3, [r3, #6]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d132      	bne.n	8003cae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3320      	adds	r3, #32
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4403      	add	r3, r0
 8003c68:	331c      	adds	r3, #28
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4419      	add	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4403      	add	r3, r0
 8003c7c:	3320      	adds	r3, #32
 8003c7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d113      	bne.n	8003cae <HAL_PCD_IRQHandler+0x3a2>
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3324      	adds	r3, #36	@ 0x24
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d108      	bne.n	8003cae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2101      	movs	r1, #1
 8003caa:	f007 f855 	bl	800ad58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f00c f948 	bl	800ff4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	2310      	movs	r3, #16
 8003cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2340      	movs	r3, #64	@ 0x40
 8003d0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d1a:	6a38      	ldr	r0, [r7, #32]
 8003d1c:	f006 f838 	bl	8009d90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	3310      	adds	r3, #16
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3304      	adds	r3, #4
 8003d32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	78db      	ldrb	r3, [r3, #3]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d108      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f00c f995 	bl	8010078 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fce8 	bl	8004742 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	3301      	adds	r3, #1
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f af2e 	bne.w	8003be2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f006 ff1e 	bl	800abcc <USB_ReadInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d9a:	d122      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fef3 	bl	8004bb0 <HAL_PCDEx_LPM_Callback>
 8003dca:	e002      	b.n	8003dd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f00c f933 	bl	8010038 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 fef0 	bl	800abcc <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003df6:	d112      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f00c f8ef 	bl	800ffec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fed2 	bl	800abcc <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e32:	d121      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003e42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d111      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e68:	2101      	movs	r1, #1
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fea0 	bl	8004bb0 <HAL_PCDEx_LPM_Callback>
 8003e70:	e002      	b.n	8003e78 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f00c f8ba 	bl	800ffec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f006 fea5 	bl	800abcc <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	f040 80b7 	bne.w	8003ffe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f005 ff70 	bl	8009d90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb4:	e046      	b.n	8003f44 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ec8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003efc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	3301      	adds	r3, #1
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	791b      	ldrb	r3, [r3, #4]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d3b2      	bcc.n	8003eb6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7bdb      	ldrb	r3, [r3, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d016      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f7c:	f043 030b 	orr.w	r3, r3, #11
 8003f80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f92:	f043 030b 	orr.w	r3, r3, #11
 8003f96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f98:	e015      	b.n	8003fc6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc0:	f043 030b 	orr.w	r3, r3, #11
 8003fc4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fd4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fd8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f006 feb5 	bl	800ad58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f006 fde2 	bl	800abcc <USB_ReadInterrupts>
 8004008:	4603      	mov	r3, r0
 800400a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004012:	d123      	bne.n	800405c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f006 fe79 	bl	800ad10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f005 ff2d 	bl	8009e82 <USB_GetDevSpeed>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681c      	ldr	r4, [r3, #0]
 8004034:	f001 fd9c 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8004038:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800403e:	461a      	mov	r2, r3
 8004040:	4620      	mov	r0, r4
 8004042:	f005 fc37 	bl	80098b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f00b ffa7 	bl	800ff9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800405a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f006 fdb3 	bl	800abcc <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b08      	cmp	r3, #8
 800406e:	d10a      	bne.n	8004086 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f00b ff84 	bl	800ff7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 0208 	and.w	r2, r2, #8
 8004084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f006 fd9e 	bl	800abcc <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b80      	cmp	r3, #128	@ 0x80
 8004098:	d123      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a6:	2301      	movs	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040aa:	e014      	b.n	80040d6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fb08 	bl	80046e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	3301      	adds	r3, #1
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	461a      	mov	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	4293      	cmp	r3, r2
 80040e0:	d3e4      	bcc.n	80040ac <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f006 fd70 	bl	800abcc <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f6:	d13c      	bne.n	8004172 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fc:	e02b      	b.n	8004156 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3318      	adds	r3, #24
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d115      	bne.n	8004150 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004124:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004126:	2b00      	cmp	r3, #0
 8004128:	da12      	bge.n	8004150 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3317      	adds	r3, #23
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004146:	b2db      	uxtb	r3, r3
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fac8 	bl	80046e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	3301      	adds	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	4293      	cmp	r3, r2
 8004160:	d3cd      	bcc.n	80040fe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fd28 	bl	800abcc <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004186:	d156      	bne.n	8004236 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	e045      	b.n	800421a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d12e      	bne.n	8004214 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	da2b      	bge.n	8004214 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80041c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d121      	bne.n	8004214 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800420c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004210:	6053      	str	r3, [r2, #4]
            break;
 8004212:	e008      	b.n	8004226 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	4293      	cmp	r3, r2
 8004224:	d3b3      	bcc.n	800418e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f006 fcc6 	bl	800abcc <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424a:	d10a      	bne.n	8004262 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f00b ff25 	bl	801009c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f006 fcb0 	bl	800abcc <USB_ReadInterrupts>
 800426c:	4603      	mov	r3, r0
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b04      	cmp	r3, #4
 8004274:	d115      	bne.n	80042a2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f00b ff15 	bl	80100b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e000      	b.n	80042a2 <HAL_PCD_IRQHandler+0x996>
      return;
 80042a0:	bf00      	nop
    }
  }
}
 80042a2:	3734      	adds	r7, #52	@ 0x34
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd90      	pop	{r4, r7, pc}

080042a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_PCD_SetAddress+0x1a>
 80042be:	2302      	movs	r3, #2
 80042c0:	e012      	b.n	80042e8 <HAL_PCD_SetAddress+0x40>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f006 fc0f 	bl	800aafc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	70fb      	strb	r3, [r7, #3]
 8004302:	460b      	mov	r3, r1
 8004304:	803b      	strh	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800430e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004312:	2b00      	cmp	r3, #0
 8004314:	da0f      	bge.n	8004336 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	3310      	adds	r3, #16
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	705a      	strb	r2, [r3, #1]
 8004334:	e00f      	b.n	8004356 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 020f 	and.w	r2, r3, #15
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004362:	883a      	ldrh	r2, [r7, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	78ba      	ldrb	r2, [r7, #2]
 800436c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004380:	78bb      	ldrb	r3, [r7, #2]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d102      	bne.n	800438c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_PCD_EP_Open+0xaa>
 8004396:	2302      	movs	r3, #2
 8004398:	e00e      	b.n	80043b8 <HAL_PCD_EP_Open+0xc8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 fd8f 	bl	8009ecc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80043b6:	7afb      	ldrb	r3, [r7, #11]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da0f      	bge.n	80043f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	3310      	adds	r3, #16
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	705a      	strb	r2, [r3, #1]
 80043f2:	e00f      	b.n	8004414 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	3304      	adds	r3, #4
 800440c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_PCD_EP_Close+0x6e>
 800442a:	2302      	movs	r3, #2
 800442c:	e00e      	b.n	800444c <HAL_PCD_EP_Close+0x8c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68f9      	ldr	r1, [r7, #12]
 800443c:	4618      	mov	r0, r3
 800443e:	f005 fdcd 	bl	8009fdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	460b      	mov	r3, r1
 8004462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004464:	7afb      	ldrb	r3, [r7, #11]
 8004466:	f003 020f 	and.w	r2, r3, #15
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	3304      	adds	r3, #4
 800447c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2200      	movs	r2, #0
 8004494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	799b      	ldrb	r3, [r3, #6]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6979      	ldr	r1, [r7, #20]
 80044bc:	f005 fe6a 	bl	800a194 <USB_EPStartXfer>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80044ec:	681b      	ldr	r3, [r3, #0]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	460b      	mov	r3, r1
 8004508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	f003 020f 	and.w	r2, r3, #15
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	3310      	adds	r3, #16
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453a:	7afb      	ldrb	r3, [r7, #11]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	b2da      	uxtb	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	799b      	ldrb	r3, [r3, #6]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	799b      	ldrb	r3, [r3, #6]
 800455c:	461a      	mov	r2, r3
 800455e:	6979      	ldr	r1, [r7, #20]
 8004560:	f005 fe18 	bl	800a194 <USB_EPStartXfer>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	7912      	ldrb	r2, [r2, #4]
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e04f      	b.n	800462c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800458c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004590:	2b00      	cmp	r3, #0
 8004592:	da0f      	bge.n	80045b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	3310      	adds	r3, #16
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	705a      	strb	r2, [r3, #1]
 80045b2:	e00d      	b.n	80045d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	3304      	adds	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_PCD_EP_SetStall+0x82>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e01d      	b.n	800462c <HAL_PCD_EP_SetStall+0xbe>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	4618      	mov	r0, r3
 8004600:	f006 f9a8 	bl	800a954 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	7999      	ldrb	r1, [r3, #6]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800461c:	461a      	mov	r2, r3
 800461e:	f006 fb9b 	bl	800ad58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	7912      	ldrb	r2, [r2, #4]
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e042      	b.n	80046d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0f      	bge.n	800467a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3310      	adds	r3, #16
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	705a      	strb	r2, [r3, #1]
 8004678:	e00f      	b.n	800469a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	3304      	adds	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_PCD_EP_ClrStall+0x86>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e00e      	b.n	80046d8 <HAL_PCD_EP_ClrStall+0xa4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f006 f9b1 	bl	800aa30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da0c      	bge.n	800470e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	3310      	adds	r3, #16
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	3304      	adds	r3, #4
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e00c      	b.n	8004728 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 020f 	and.w	r2, r3, #15
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4413      	add	r3, r2
 8004724:	3304      	adds	r3, #4
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	4618      	mov	r0, r3
 8004730:	f005 ffd0 	bl	800a6d4 <USB_EPStopXfer>
 8004734:	4603      	mov	r3, r0
 8004736:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004738:	7afb      	ldrb	r3, [r7, #11]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08a      	sub	sp, #40	@ 0x28
 8004746:	af02      	add	r7, sp, #8
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	3310      	adds	r3, #16
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d901      	bls.n	800477a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e06b      	b.n	8004852 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	429a      	cmp	r2, r3
 800478e:	d902      	bls.n	8004796 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3303      	adds	r3, #3
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800479e:	e02a      	b.n	80047f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d902      	bls.n	80047bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3303      	adds	r3, #3
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68d9      	ldr	r1, [r3, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4603      	mov	r3, r0
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f006 f825 	bl	800a828 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	441a      	add	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	429a      	cmp	r2, r3
 800480a:	d809      	bhi.n	8004820 <PCD_WriteEmptyTxFifo+0xde>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004814:	429a      	cmp	r2, r3
 8004816:	d203      	bcs.n	8004820 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1bf      	bne.n	80047a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	d811      	bhi.n	8004850 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	43db      	mvns	r3, r3
 8004846:	6939      	ldr	r1, [r7, #16]
 8004848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800484c:	4013      	ands	r3, r2
 800484e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	333c      	adds	r3, #60	@ 0x3c
 8004874:	3304      	adds	r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	799b      	ldrb	r3, [r3, #6]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d17b      	bne.n	800498a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	f240 80b9 	bls.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80b3 	beq.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	461a      	mov	r2, r3
 80048c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c4:	6093      	str	r3, [r2, #8]
 80048c6:	e0a7      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	2320      	movs	r3, #32
 80048e2:	6093      	str	r3, [r2, #8]
 80048e4:	e098      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8093 	bne.w	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d90f      	bls.n	800491a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004910:	461a      	mov	r2, r3
 8004912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004916:	6093      	str	r3, [r2, #8]
 8004918:	e07e      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1a      	ldr	r2, [r3, #32]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	0159      	lsls	r1, r3, #5
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	440b      	add	r3, r1
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d114      	bne.n	800497c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004964:	461a      	mov	r2, r3
 8004966:	2101      	movs	r1, #1
 8004968:	f006 f9f6 	bl	800ad58 <USB_EP0_OutStart>
 800496c:	e006      	b.n	800497c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	441a      	add	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f00b fac6 	bl	800ff14 <HAL_PCD_DataOutStageCallback>
 8004988:	e046      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4a26      	ldr	r2, [pc, #152]	@ (8004a28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d124      	bne.n	80049dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ae:	6093      	str	r3, [r2, #8]
 80049b0:	e032      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	2320      	movs	r3, #32
 80049cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f00b fa9d 	bl	800ff14 <HAL_PCD_DataOutStageCallback>
 80049da:	e01d      	b.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d114      	bne.n	8004a0c <PCD_EP_OutXfrComplete_int+0x1b0>
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d108      	bne.n	8004a0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a04:	461a      	mov	r2, r3
 8004a06:	2100      	movs	r1, #0
 8004a08:	f006 f9a6 	bl	800ad58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f00b fa7e 	bl	800ff14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	4f54300a 	.word	0x4f54300a
 8004a28:	4f54310a 	.word	0x4f54310a

08004a2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	333c      	adds	r3, #60	@ 0x3c
 8004a44:	3304      	adds	r3, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d90e      	bls.n	8004a80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f00b fa35 	bl	800fef0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d90c      	bls.n	8004aa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	799b      	ldrb	r3, [r3, #6]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d108      	bne.n	8004aa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	f006 f958 	bl	800ad58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	4f54300a 	.word	0x4f54300a

08004ab8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ad6:	883b      	ldrh	r3, [r7, #0]
 8004ad8:	0419      	lsls	r1, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ae4:	e028      	b.n	8004b38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	4413      	add	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]
 8004af8:	e00d      	b.n	8004b16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	3340      	adds	r3, #64	@ 0x40
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	3301      	adds	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3ec      	bcc.n	8004afa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b20:	883b      	ldrh	r3, [r7, #0]
 8004b22:	0418      	lsls	r0, r3, #16
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	4302      	orrs	r2, r0
 8004b30:	3340      	adds	r3, #64	@ 0x40
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b96:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <HAL_PCDEx_ActivateLPM+0x44>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	10000003 	.word	0x10000003

08004bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bd0:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <HAL_PWREx_ConfigSupply+0x70>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00a      	beq.n	8004bf2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bdc:	4b16      	ldr	r3, [pc, #88]	@ (8004c38 <HAL_PWREx_ConfigSupply+0x70>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d001      	beq.n	8004bee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e01f      	b.n	8004c2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e01d      	b.n	8004c2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bf2:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f023 0207 	bic.w	r2, r3, #7
 8004bfa:	490f      	ldr	r1, [pc, #60]	@ (8004c38 <HAL_PWREx_ConfigSupply+0x70>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c02:	f7fd f93d 	bl	8001e80 <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c08:	e009      	b.n	8004c1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c0a:	f7fd f939 	bl	8001e80 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c18:	d901      	bls.n	8004c1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e007      	b.n	8004c2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_PWREx_ConfigSupply+0x70>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2a:	d1ee      	bne.n	8004c0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	58024800 	.word	0x58024800

08004c3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4a:	60d3      	str	r3, [r2, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	58024800 	.word	0x58024800

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	@ 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f000 bc48 	b.w	8005500 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8088 	beq.w	8004d8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4b99      	ldr	r3, [pc, #612]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c88:	4b96      	ldr	r3, [pc, #600]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d007      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x48>
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	2b18      	cmp	r3, #24
 8004c98:	d111      	bne.n	8004cbe <HAL_RCC_OscConfig+0x62>
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d10c      	bne.n	8004cbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d06d      	beq.n	8004d8c <HAL_RCC_OscConfig+0x130>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d169      	bne.n	8004d8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f000 bc21 	b.w	8005500 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x7a>
 8004cc8:	4b86      	ldr	r3, [pc, #536]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a85      	ldr	r2, [pc, #532]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e02e      	b.n	8004d34 <HAL_RCC_OscConfig+0xd8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x9c>
 8004cde:	4b81      	ldr	r3, [pc, #516]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a80      	ldr	r2, [pc, #512]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xd8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0xc0>
 8004d02:	4b78      	ldr	r3, [pc, #480]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a77      	ldr	r2, [pc, #476]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b75      	ldr	r3, [pc, #468]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a74      	ldr	r2, [pc, #464]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xd8>
 8004d1c:	4b71      	ldr	r3, [pc, #452]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a70      	ldr	r2, [pc, #448]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6d      	ldr	r2, [pc, #436]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f8a0 	bl	8001e80 <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fd f89c 	bl	8001e80 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	@ 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e3d4      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d56:	4b63      	ldr	r3, [pc, #396]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe8>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd f88c 	bl	8001e80 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fd f888 	bl	8001e80 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e3c0      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d7e:	4b59      	ldr	r3, [pc, #356]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x110>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80ca 	beq.w	8004f30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4b51      	ldr	r3, [pc, #324]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004da4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004da6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x166>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d156      	bne.n	8004e66 <HAL_RCC_OscConfig+0x20a>
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d151      	bne.n	8004e66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc2:	4b48      	ldr	r3, [pc, #288]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e392      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dda:	4b42      	ldr	r3, [pc, #264]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 0219 	bic.w	r2, r3, #25
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	493f      	ldr	r1, [pc, #252]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd f848 	bl	8001e80 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df4:	f7fd f844 	bl	8001e80 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e37c      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e06:	4b37      	ldr	r3, [pc, #220]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	f7fd f865 	bl	8001ee0 <HAL_GetREVID>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d817      	bhi.n	8004e50 <HAL_RCC_OscConfig+0x1f4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	d108      	bne.n	8004e3a <HAL_RCC_OscConfig+0x1de>
 8004e28:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e38:	e07a      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	4926      	ldr	r1, [pc, #152]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4e:	e06f      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	4921      	ldr	r1, [pc, #132]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	e064      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d047      	beq.n	8004efe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0219 	bic.w	r2, r3, #25
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	491a      	ldr	r1, [pc, #104]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fffe 	bl	8001e80 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e88:	f7fc fffa 	bl	8001e80 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e332      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea6:	f7fd f81b 	bl	8001ee0 <HAL_GetREVID>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d819      	bhi.n	8004ee8 <HAL_RCC_OscConfig+0x28c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d108      	bne.n	8004ece <HAL_RCC_OscConfig+0x272>
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ec4:	4a07      	ldr	r2, [pc, #28]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eca:	6053      	str	r3, [r2, #4]
 8004ecc:	e030      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	031b      	lsls	r3, r3, #12
 8004edc:	4901      	ldr	r1, [pc, #4]	@ (8004ee4 <HAL_RCC_OscConfig+0x288>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
 8004ee2:	e025      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	4b9a      	ldr	r3, [pc, #616]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	4997      	ldr	r1, [pc, #604]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
 8004efc:	e018      	b.n	8004f30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b95      	ldr	r3, [pc, #596]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a94      	ldr	r2, [pc, #592]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fc ffb9 	bl	8001e80 <HAL_GetTick>
 8004f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f12:	f7fc ffb5 	bl	8001e80 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e2ed      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f24:	4b8b      	ldr	r3, [pc, #556]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a9 	beq.w	8005090 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b85      	ldr	r3, [pc, #532]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f48:	4b82      	ldr	r3, [pc, #520]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d007      	beq.n	8004f64 <HAL_RCC_OscConfig+0x308>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d13a      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x374>
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d135      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f64:	4b7b      	ldr	r3, [pc, #492]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_OscConfig+0x320>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b80      	cmp	r3, #128	@ 0x80
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e2c1      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f7c:	f7fc ffb0 	bl	8001ee0 <HAL_GetREVID>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d817      	bhi.n	8004fba <HAL_RCC_OscConfig+0x35e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x348>
 8004f92:	4b70      	ldr	r3, [pc, #448]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004f9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fa0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fa2:	e075      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	069b      	lsls	r3, r3, #26
 8004fb2:	4968      	ldr	r1, [pc, #416]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb8:	e06a      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fba:	4b66      	ldr	r3, [pc, #408]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	4962      	ldr	r1, [pc, #392]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fce:	e05f      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d042      	beq.n	800505e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc ff4c 	bl	8001e80 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fec:	f7fc ff48 	bl	8001e80 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e280      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ffe:	4b55      	ldr	r3, [pc, #340]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800500a:	f7fc ff69 	bl	8001ee0 <HAL_GetREVID>
 800500e:	4603      	mov	r3, r0
 8005010:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005014:	4293      	cmp	r3, r2
 8005016:	d817      	bhi.n	8005048 <HAL_RCC_OscConfig+0x3ec>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	2b20      	cmp	r3, #32
 800501e:	d108      	bne.n	8005032 <HAL_RCC_OscConfig+0x3d6>
 8005020:	4b4c      	ldr	r3, [pc, #304]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005028:	4a4a      	ldr	r2, [pc, #296]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 800502a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e02e      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
 8005032:	4b48      	ldr	r3, [pc, #288]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	069b      	lsls	r3, r3, #26
 8005040:	4944      	ldr	r1, [pc, #272]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	604b      	str	r3, [r1, #4]
 8005046:	e023      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
 8005048:	4b42      	ldr	r3, [pc, #264]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	493f      	ldr	r1, [pc, #252]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005058:	4313      	orrs	r3, r2
 800505a:	60cb      	str	r3, [r1, #12]
 800505c:	e018      	b.n	8005090 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800505e:	4b3d      	ldr	r3, [pc, #244]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a3c      	ldr	r2, [pc, #240]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7fc ff09 	bl	8001e80 <HAL_GetTick>
 800506e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005072:	f7fc ff05 	bl	8001e80 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e23d      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005084:	4b33      	ldr	r3, [pc, #204]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d036      	beq.n	800510a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d019      	beq.n	80050d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 80050a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc fee6 	bl	8001e80 <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fc fee2 	bl	8001e80 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e21a      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ca:	4b22      	ldr	r3, [pc, #136]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 80050cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x45c>
 80050d6:	e018      	b.n	800510a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 80050da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fc fecc 	bl	8001e80 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fc fec8 	bl	8001e80 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e200      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050fe:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d039      	beq.n	800518a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01c      	beq.n	8005158 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a0c      	ldr	r2, [pc, #48]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005128:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800512a:	f7fc fea9 	bl	8001e80 <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005132:	f7fc fea5 	bl	8001e80 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e1dd      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <HAL_RCC_OscConfig+0x4f8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x4d6>
 8005150:	e01b      	b.n	800518a <HAL_RCC_OscConfig+0x52e>
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005158:	4b9b      	ldr	r3, [pc, #620]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a9a      	ldr	r2, [pc, #616]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800515e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005162:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005164:	f7fc fe8c 	bl	8001e80 <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516c:	f7fc fe88 	bl	8001e80 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1c0      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800517e:	4b92      	ldr	r3, [pc, #584]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8081 	beq.w	800529a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005198:	4b8c      	ldr	r3, [pc, #560]	@ (80053cc <HAL_RCC_OscConfig+0x770>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a8b      	ldr	r2, [pc, #556]	@ (80053cc <HAL_RCC_OscConfig+0x770>)
 800519e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051a4:	f7fc fe6c 	bl	8001e80 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ac:	f7fc fe68 	bl	8001e80 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e1a0      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051be:	4b83      	ldr	r3, [pc, #524]	@ (80053cc <HAL_RCC_OscConfig+0x770>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d106      	bne.n	80051e0 <HAL_RCC_OscConfig+0x584>
 80051d2:	4b7d      	ldr	r3, [pc, #500]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	4a7c      	ldr	r2, [pc, #496]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051de:	e02d      	b.n	800523c <HAL_RCC_OscConfig+0x5e0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10c      	bne.n	8005202 <HAL_RCC_OscConfig+0x5a6>
 80051e8:	4b77      	ldr	r3, [pc, #476]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a76      	ldr	r2, [pc, #472]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f4:	4b74      	ldr	r3, [pc, #464]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	4a73      	ldr	r2, [pc, #460]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80051fa:	f023 0304 	bic.w	r3, r3, #4
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005200:	e01c      	b.n	800523c <HAL_RCC_OscConfig+0x5e0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b05      	cmp	r3, #5
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c8>
 800520a:	4b6f      	ldr	r3, [pc, #444]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	4a6e      	ldr	r2, [pc, #440]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	6713      	str	r3, [r2, #112]	@ 0x70
 8005216:	4b6c      	ldr	r3, [pc, #432]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	4a6b      	ldr	r2, [pc, #428]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	@ 0x70
 8005222:	e00b      	b.n	800523c <HAL_RCC_OscConfig+0x5e0>
 8005224:	4b68      	ldr	r3, [pc, #416]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	4a67      	ldr	r2, [pc, #412]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	4b65      	ldr	r3, [pc, #404]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a64      	ldr	r2, [pc, #400]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005236:	f023 0304 	bic.w	r3, r3, #4
 800523a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005244:	f7fc fe1c 	bl	8001e80 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fc fe18 	bl	8001e80 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e14e      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005262:	4b59      	ldr	r3, [pc, #356]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ee      	beq.n	800524c <HAL_RCC_OscConfig+0x5f0>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fc fe06 	bl	8001e80 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fc fe02 	bl	8001e80 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e138      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800528e:	4b4e      	ldr	r3, [pc, #312]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ee      	bne.n	8005278 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 812d 	beq.w	80054fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052a4:	4b48      	ldr	r3, [pc, #288]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052ac:	2b18      	cmp	r3, #24
 80052ae:	f000 80bd 	beq.w	800542c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	f040 809e 	bne.w	80053f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052bc:	4b42      	ldr	r3, [pc, #264]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a41      	ldr	r2, [pc, #260]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80052c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fc fdda 	bl	8001e80 <HAL_GetTick>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc fdd6 	bl	8001e80 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e10e      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052e2:	4b39      	ldr	r3, [pc, #228]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ee:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80052f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052f2:	4b37      	ldr	r3, [pc, #220]	@ (80053d0 <HAL_RCC_OscConfig+0x774>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052fe:	0112      	lsls	r2, r2, #4
 8005300:	430a      	orrs	r2, r1
 8005302:	4931      	ldr	r1, [pc, #196]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	628b      	str	r3, [r1, #40]	@ 0x28
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530c:	3b01      	subs	r3, #1
 800530e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005316:	3b01      	subs	r3, #1
 8005318:	025b      	lsls	r3, r3, #9
 800531a:	b29b      	uxth	r3, r3
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	3b01      	subs	r3, #1
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	3b01      	subs	r3, #1
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005338:	4923      	ldr	r1, [pc, #140]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800533e:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800534a:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800534c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800534e:	4b21      	ldr	r3, [pc, #132]	@ (80053d4 <HAL_RCC_OscConfig+0x778>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005356:	00d2      	lsls	r2, r2, #3
 8005358:	491b      	ldr	r1, [pc, #108]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800535e:	4b1a      	ldr	r3, [pc, #104]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	f023 020c 	bic.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	4917      	ldr	r1, [pc, #92]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005370:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	f023 0202 	bic.w	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537c:	4912      	ldr	r1, [pc, #72]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800537e:	4313      	orrs	r3, r2
 8005380:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	4a10      	ldr	r2, [pc, #64]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 8005394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800539a:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4a0a      	ldr	r2, [pc, #40]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053a6:	4b08      	ldr	r3, [pc, #32]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a07      	ldr	r2, [pc, #28]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b2:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a04      	ldr	r2, [pc, #16]	@ (80053c8 <HAL_RCC_OscConfig+0x76c>)
 80053b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fc fd5f 	bl	8001e80 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053c4:	e011      	b.n	80053ea <HAL_RCC_OscConfig+0x78e>
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	58024800 	.word	0x58024800
 80053d0:	fffffc0c 	.word	0xfffffc0c
 80053d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc fd52 	bl	8001e80 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e08a      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ea:	4b47      	ldr	r3, [pc, #284]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x77c>
 80053f6:	e082      	b.n	80054fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f8:	4b43      	ldr	r3, [pc, #268]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a42      	ldr	r2, [pc, #264]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fc fd3c 	bl	8001e80 <HAL_GetTick>
 8005408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fc fd38 	bl	8001e80 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e070      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541e:	4b3a      	ldr	r3, [pc, #232]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x7b0>
 800542a:	e068      	b.n	80054fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800542c:	4b36      	ldr	r3, [pc, #216]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005432:	4b35      	ldr	r3, [pc, #212]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005436:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	2b01      	cmp	r3, #1
 800543e:	d031      	beq.n	80054a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0203 	and.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d12a      	bne.n	80054a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d122      	bne.n	80054a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d11a      	bne.n	80054a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	0a5b      	lsrs	r3, r3, #9
 8005472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d111      	bne.n	80054a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d108      	bne.n	80054a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	0e1b      	lsrs	r3, r3, #24
 8005496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e02b      	b.n	8005500 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054a8:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ac:	08db      	lsrs	r3, r3, #3
 80054ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d01f      	beq.n	80054fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054be:	4b12      	ldr	r3, [pc, #72]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	4a11      	ldr	r2, [pc, #68]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ca:	f7fc fcd9 	bl	8001e80 <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054d0:	bf00      	nop
 80054d2:	f7fc fcd5 	bl	8001e80 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	4293      	cmp	r3, r2
 80054dc:	d0f9      	beq.n	80054d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054de:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <HAL_RCC_OscConfig+0x8b0>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054ea:	00d2      	lsls	r2, r2, #3
 80054ec:	4906      	ldr	r1, [pc, #24]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054f2:	4b05      	ldr	r3, [pc, #20]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	4a04      	ldr	r2, [pc, #16]	@ (8005508 <HAL_RCC_OscConfig+0x8ac>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3730      	adds	r7, #48	@ 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	58024400 	.word	0x58024400
 800550c:	ffff0007 	.word	0xffff0007

08005510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e19c      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005524:	4b8a      	ldr	r3, [pc, #552]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d910      	bls.n	8005554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b87      	ldr	r3, [pc, #540]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 020f 	bic.w	r2, r3, #15
 800553a:	4985      	ldr	r1, [pc, #532]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b83      	ldr	r3, [pc, #524]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e184      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	4b7b      	ldr	r3, [pc, #492]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800556c:	429a      	cmp	r2, r3
 800556e:	d908      	bls.n	8005582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005570:	4b78      	ldr	r3, [pc, #480]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4975      	ldr	r1, [pc, #468]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 800557e:	4313      	orrs	r3, r2
 8005580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	4b70      	ldr	r3, [pc, #448]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800559a:	429a      	cmp	r2, r3
 800559c:	d908      	bls.n	80055b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800559e:	4b6d      	ldr	r3, [pc, #436]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	496a      	ldr	r1, [pc, #424]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d010      	beq.n	80055de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	4b64      	ldr	r3, [pc, #400]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d908      	bls.n	80055de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055cc:	4b61      	ldr	r3, [pc, #388]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	495e      	ldr	r1, [pc, #376]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d010      	beq.n	800560c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	4b59      	ldr	r3, [pc, #356]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d908      	bls.n	800560c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055fa:	4b56      	ldr	r3, [pc, #344]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4953      	ldr	r1, [pc, #332]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005608:	4313      	orrs	r3, r2
 800560a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	4b4d      	ldr	r3, [pc, #308]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	429a      	cmp	r2, r3
 8005626:	d908      	bls.n	800563a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005628:	4b4a      	ldr	r3, [pc, #296]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f023 020f 	bic.w	r2, r3, #15
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4947      	ldr	r1, [pc, #284]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005636:	4313      	orrs	r3, r2
 8005638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d055      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005646:	4b43      	ldr	r3, [pc, #268]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4940      	ldr	r1, [pc, #256]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005654:	4313      	orrs	r3, r2
 8005656:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d107      	bne.n	8005670 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005660:	4b3c      	ldr	r3, [pc, #240]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d121      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0f6      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d107      	bne.n	8005688 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005678:	4b36      	ldr	r3, [pc, #216]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0ea      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d107      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005690:	4b30      	ldr	r3, [pc, #192]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d109      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0de      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0d6      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056b0:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f023 0207 	bic.w	r2, r3, #7
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4925      	ldr	r1, [pc, #148]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fc fbdd 	bl	8001e80 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c8:	e00a      	b.n	80056e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ca:	f7fc fbd9 	bl	8001e80 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e0be      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d1eb      	bne.n	80056ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d010      	beq.n	8005720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	429a      	cmp	r2, r3
 800570c:	d208      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800570e:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	490e      	ldr	r1, [pc, #56]	@ (8005754 <HAL_RCC_ClockConfig+0x244>)
 800571c:	4313      	orrs	r3, r2
 800571e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d214      	bcs.n	8005758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b08      	ldr	r3, [pc, #32]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	4906      	ldr	r1, [pc, #24]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d005      	beq.n	8005758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e086      	b.n	800585e <HAL_RCC_ClockConfig+0x34e>
 8005750:	52002000 	.word	0x52002000
 8005754:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005770:	429a      	cmp	r2, r3
 8005772:	d208      	bcs.n	8005786 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005774:	4b3c      	ldr	r3, [pc, #240]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	4939      	ldr	r1, [pc, #228]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005782:	4313      	orrs	r3, r2
 8005784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d010      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	4b34      	ldr	r3, [pc, #208]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800579e:	429a      	cmp	r2, r3
 80057a0:	d208      	bcs.n	80057b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	492e      	ldr	r1, [pc, #184]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d208      	bcs.n	80057e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057d0:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	4922      	ldr	r1, [pc, #136]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	4b1d      	ldr	r3, [pc, #116]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d208      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	4917      	ldr	r1, [pc, #92]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 800580c:	4313      	orrs	r3, r2
 800580e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005810:	f000 f834 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	4912      	ldr	r1, [pc, #72]	@ (800586c <HAL_RCC_ClockConfig+0x35c>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800582e:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <HAL_RCC_ClockConfig+0x358>)
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	4a0d      	ldr	r2, [pc, #52]	@ (800586c <HAL_RCC_ClockConfig+0x35c>)
 8005838:	5cd3      	ldrb	r3, [r2, r3]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
 8005844:	4a0a      	ldr	r2, [pc, #40]	@ (8005870 <HAL_RCC_ClockConfig+0x360>)
 8005846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005848:	4a0a      	ldr	r2, [pc, #40]	@ (8005874 <HAL_RCC_ClockConfig+0x364>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800584e:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <HAL_RCC_ClockConfig+0x368>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fb fec6 	bl	80015e4 <HAL_InitTick>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	58024400 	.word	0x58024400
 800586c:	080152c4 	.word	0x080152c4
 8005870:	24000004 	.word	0x24000004
 8005874:	24000000 	.word	0x24000000
 8005878:	24000008 	.word	0x24000008

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	@ 0x24
 8005880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005882:	4bb3      	ldr	r3, [pc, #716]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	2b18      	cmp	r3, #24
 800588c:	f200 8155 	bhi.w	8005b3a <HAL_RCC_GetSysClockFreq+0x2be>
 8005890:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058fd 	.word	0x080058fd
 800589c:	08005b3b 	.word	0x08005b3b
 80058a0:	08005b3b 	.word	0x08005b3b
 80058a4:	08005b3b 	.word	0x08005b3b
 80058a8:	08005b3b 	.word	0x08005b3b
 80058ac:	08005b3b 	.word	0x08005b3b
 80058b0:	08005b3b 	.word	0x08005b3b
 80058b4:	08005b3b 	.word	0x08005b3b
 80058b8:	08005923 	.word	0x08005923
 80058bc:	08005b3b 	.word	0x08005b3b
 80058c0:	08005b3b 	.word	0x08005b3b
 80058c4:	08005b3b 	.word	0x08005b3b
 80058c8:	08005b3b 	.word	0x08005b3b
 80058cc:	08005b3b 	.word	0x08005b3b
 80058d0:	08005b3b 	.word	0x08005b3b
 80058d4:	08005b3b 	.word	0x08005b3b
 80058d8:	08005929 	.word	0x08005929
 80058dc:	08005b3b 	.word	0x08005b3b
 80058e0:	08005b3b 	.word	0x08005b3b
 80058e4:	08005b3b 	.word	0x08005b3b
 80058e8:	08005b3b 	.word	0x08005b3b
 80058ec:	08005b3b 	.word	0x08005b3b
 80058f0:	08005b3b 	.word	0x08005b3b
 80058f4:	08005b3b 	.word	0x08005b3b
 80058f8:	0800592f 	.word	0x0800592f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058fc:	4b94      	ldr	r3, [pc, #592]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005908:	4b91      	ldr	r3, [pc, #580]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	08db      	lsrs	r3, r3, #3
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	4a90      	ldr	r2, [pc, #576]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800591a:	e111      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800591c:	4b8d      	ldr	r3, [pc, #564]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800591e:	61bb      	str	r3, [r7, #24]
      break;
 8005920:	e10e      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005922:	4b8d      	ldr	r3, [pc, #564]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005924:	61bb      	str	r3, [r7, #24]
      break;
 8005926:	e10b      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005928:	4b8c      	ldr	r3, [pc, #560]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800592a:	61bb      	str	r3, [r7, #24]
      break;
 800592c:	e108      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800592e:	4b88      	ldr	r3, [pc, #544]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005938:	4b85      	ldr	r3, [pc, #532]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005942:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005944:	4b82      	ldr	r3, [pc, #520]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800594e:	4b80      	ldr	r3, [pc, #512]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80e1 	beq.w	8005b34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f000 8083 	beq.w	8005a80 <HAL_RCC_GetSysClockFreq+0x204>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b02      	cmp	r3, #2
 800597e:	f200 80a1 	bhi.w	8005ac4 <HAL_RCC_GetSysClockFreq+0x248>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x114>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d056      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x1c0>
 800598e:	e099      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005990:	4b6f      	ldr	r3, [pc, #444]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02d      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800599c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	08db      	lsrs	r3, r3, #3
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
 80059ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b62      	ldr	r3, [pc, #392]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059f6:	e087      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b51      	ldr	r3, [pc, #324]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a3a:	e065      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b40      	ldr	r3, [pc, #256]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a7e:	e043      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b2f      	ldr	r3, [pc, #188]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ac2:	e021      	b.n	8005b08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	0a5b      	lsrs	r3, r3, #9
 8005b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b12:	3301      	adds	r3, #1
 8005b14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2c:	ee17 3a90 	vmov	r3, s15
 8005b30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b32:	e005      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b3a:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b3c:	61bb      	str	r3, [r7, #24]
      break;
 8005b3e:	bf00      	nop
  }

  return sysclockfreq;
 8005b40:	69bb      	ldr	r3, [r7, #24]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3724      	adds	r7, #36	@ 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400
 8005b54:	03d09000 	.word	0x03d09000
 8005b58:	003d0900 	.word	0x003d0900
 8005b5c:	017d7840 	.word	0x017d7840
 8005b60:	46000000 	.word	0x46000000
 8005b64:	4c742400 	.word	0x4c742400
 8005b68:	4a742400 	.word	0x4a742400
 8005b6c:	4bbebc20 	.word	0x4bbebc20

08005b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b76:	f7ff fe81 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	4b10      	ldr	r3, [pc, #64]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	490f      	ldr	r1, [pc, #60]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b88:	5ccb      	ldrb	r3, [r1, r3]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b94:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	4a09      	ldr	r2, [pc, #36]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8005baa:	4a07      	ldr	r2, [pc, #28]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bae:	4a07      	ldr	r2, [pc, #28]	@ (8005bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bb4:	4b04      	ldr	r3, [pc, #16]	@ (8005bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	080152c4 	.word	0x080152c4
 8005bc8:	24000004 	.word	0x24000004
 8005bcc:	24000000 	.word	0x24000000

08005bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bd4:	f7ff ffcc 	bl	8005b70 <HAL_RCC_GetHCLKFreq>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	4904      	ldr	r1, [pc, #16]	@ (8005bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005be6:	5ccb      	ldrb	r3, [r1, r3]
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	080152c4 	.word	0x080152c4

08005bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	223f      	movs	r2, #63	@ 0x3f
 8005c0a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0207 	and.w	r2, r3, #7
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005c18:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005c24:	4b14      	ldr	r3, [pc, #80]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f003 020f 	and.w	r2, r3, #15
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005c30:	4b11      	ldr	r3, [pc, #68]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005c54:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <HAL_RCC_GetClockConfig+0x7c>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <HAL_RCC_GetClockConfig+0x80>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	58024400 	.word	0x58024400
 8005c7c:	52002000 	.word	0x52002000

08005c80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c84:	b0ca      	sub	sp, #296	@ 0x128
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005ca4:	2500      	movs	r5, #0
 8005ca6:	ea54 0305 	orrs.w	r3, r4, r5
 8005caa:	d049      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cb6:	d02f      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005cb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cbc:	d828      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cc2:	d01a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cc8:	d822      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cd2:	d007      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cd4:	e01c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd6:	4bb8      	ldr	r3, [pc, #736]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	4ab7      	ldr	r2, [pc, #732]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ce2:	e01a      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	3308      	adds	r3, #8
 8005cea:	2102      	movs	r1, #2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f9d1 	bl	8007094 <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cf8:	e00f      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	3328      	adds	r3, #40	@ 0x28
 8005d00:	2102      	movs	r1, #2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fa78 	bl	80071f8 <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d0e:	e004      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d16:	e000      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d22:	4ba5      	ldr	r3, [pc, #660]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d30:	4aa1      	ldr	r2, [pc, #644]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d36:	e003      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d4c:	f04f 0900 	mov.w	r9, #0
 8005d50:	ea58 0309 	orrs.w	r3, r8, r9
 8005d54:	d047      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d82a      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d60:	a201      	add	r2, pc, #4	@ (adr r2, 8005d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d7d 	.word	0x08005d7d
 8005d6c:	08005d8b 	.word	0x08005d8b
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005dbf 	.word	0x08005dbf
 8005d78:	08005dbf 	.word	0x08005dbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	4a8d      	ldr	r2, [pc, #564]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d88:	e01a      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	3308      	adds	r3, #8
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 f97e 	bl	8007094 <RCCEx_PLL2_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d9e:	e00f      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	3328      	adds	r3, #40	@ 0x28
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fa25 	bl	80071f8 <RCCEx_PLL3_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db4:	e004      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dcc:	f023 0107 	bic.w	r1, r3, #7
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	4a78      	ldr	r2, [pc, #480]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005df2:	f04f 0b00 	mov.w	fp, #0
 8005df6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dfa:	d04c      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e06:	d030      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0c:	d829      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e10:	d02d      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e14:	d825      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d018      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e1a:	2b80      	cmp	r3, #128	@ 0x80
 8005e1c:	d821      	bhi.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e22:	2b40      	cmp	r3, #64	@ 0x40
 8005e24:	d007      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e26:	e01c      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e28:	4b63      	ldr	r3, [pc, #396]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	4a62      	ldr	r2, [pc, #392]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e34:	e01c      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 f928 	bl	8007094 <RCCEx_PLL2_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e4a:	e011      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	3328      	adds	r3, #40	@ 0x28
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 f9cf 	bl	80071f8 <RCCEx_PLL3_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e60:	e006      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e68:	e002      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e78:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e86:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ea2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005eac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	d053      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ebe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ec2:	d035      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ec8:	d82e      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ece:	d031      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ed4:	d828      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eda:	d01a      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ee0:	d822      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eea:	d007      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005eec:	e01c      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4b32      	ldr	r3, [pc, #200]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4a31      	ldr	r2, [pc, #196]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005efa:	e01c      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	3308      	adds	r3, #8
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f8c5 	bl	8007094 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f10:	e011      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f16:	3328      	adds	r3, #40	@ 0x28
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f96c 	bl	80071f8 <RCCEx_PLL3_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f26:	e006      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f2e:	e002      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f42:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f74:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d056      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f8a:	d038      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f90:	d831      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f96:	d034      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f9c:	d82b      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fa8:	d825      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005fb4:	e01f      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fb6:	bf00      	nop
 8005fb8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fbc:	4ba2      	ldr	r3, [pc, #648]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	4aa1      	ldr	r2, [pc, #644]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e01c      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	3308      	adds	r3, #8
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f85e 	bl	8007094 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fde:	e011      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe4:	3328      	adds	r3, #40	@ 0x28
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f905 	bl	80071f8 <RCCEx_PLL3_Config>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ff4:	e006      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10b      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800600c:	4b8e      	ldr	r3, [pc, #568]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006010:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006018:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800601c:	4a8a      	ldr	r2, [pc, #552]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800601e:	430b      	orrs	r3, r1
 8006020:	6593      	str	r3, [r2, #88]	@ 0x58
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006042:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d03a      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006052:	2b30      	cmp	r3, #48	@ 0x30
 8006054:	d01f      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006056:	2b30      	cmp	r3, #48	@ 0x30
 8006058:	d819      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d00c      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d815      	bhi.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d019      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006066:	2b10      	cmp	r3, #16
 8006068:	d111      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800606a:	4b77      	ldr	r3, [pc, #476]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a76      	ldr	r2, [pc, #472]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006076:	e011      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	3308      	adds	r3, #8
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f807 	bl	8007094 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800608c:	e006      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006094:	e002      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800609a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060a4:	4b68      	ldr	r3, [pc, #416]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b2:	4a65      	ldr	r2, [pc, #404]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80060ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d051      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060ec:	d035      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80060ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060f2:	d82e      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060f8:	d031      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060fe:	d828      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006104:	d01a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610a:	d822      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006114:	d007      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006116:	e01c      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b4b      	ldr	r3, [pc, #300]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4a4a      	ldr	r2, [pc, #296]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006124:	e01c      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	3308      	adds	r3, #8
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f000 ffb0 	bl	8007094 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800613a:	e011      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	3328      	adds	r3, #40	@ 0x28
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f001 f857 	bl	80071f8 <RCCEx_PLL3_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006150:	e006      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006158:	e002      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800615a:	bf00      	nop
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006168:	4b37      	ldr	r3, [pc, #220]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800616c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006176:	4a34      	ldr	r2, [pc, #208]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006178:	430b      	orrs	r3, r1
 800617a:	6513      	str	r3, [r2, #80]	@ 0x50
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800619c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d056      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061b0:	d033      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80061b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061b6:	d82c      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061bc:	d02f      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80061be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061c2:	d826      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061c8:	d02b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80061ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061ce:	d820      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d4:	d012      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80061d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061da:	d81a      	bhi.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d022      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e4:	d115      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ea:	3308      	adds	r3, #8
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 ff50 	bl	8007094 <RCCEx_PLL2_Config>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061fa:	e015      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006200:	3328      	adds	r3, #40	@ 0x28
 8006202:	2101      	movs	r1, #1
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fff7 	bl	80071f8 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006210:	e00a      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006218:	e006      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006234:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623e:	4a02      	ldr	r2, [pc, #8]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006240:	430b      	orrs	r3, r1
 8006242:	6513      	str	r3, [r2, #80]	@ 0x50
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006246:	bf00      	nop
 8006248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006264:	2300      	movs	r3, #0
 8006266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800626a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800626e:	460b      	mov	r3, r1
 8006270:	4313      	orrs	r3, r2
 8006272:	d055      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800627c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006280:	d033      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006286:	d82c      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628c:	d02f      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006292:	d826      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006294:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006298:	d02b      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800629a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800629e:	d820      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d012      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80062a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062aa:	d81a      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d022      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80062b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062b4:	d115      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	3308      	adds	r3, #8
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fee8 	bl	8007094 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062ca:	e015      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	3328      	adds	r3, #40	@ 0x28
 80062d2:	2101      	movs	r1, #1
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ff8f 	bl	80071f8 <RCCEx_PLL3_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062e0:	e00a      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062e8:	e006      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ea:	bf00      	nop
 80062ec:	e004      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ee:	bf00      	nop
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006300:	4ba3      	ldr	r3, [pc, #652]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006310:	4a9f      	ldr	r2, [pc, #636]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006312:	430b      	orrs	r3, r1
 8006314:	6593      	str	r3, [r2, #88]	@ 0x58
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800632c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d037      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634a:	d00e      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800634c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006350:	d816      	bhi.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d018      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800635a:	d111      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4b8c      	ldr	r3, [pc, #560]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	4a8b      	ldr	r2, [pc, #556]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006368:	e00f      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	3308      	adds	r3, #8
 8006370:	2101      	movs	r1, #1
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fe8e 	bl	8007094 <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800637e:	e004      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006392:	4b7f      	ldr	r3, [pc, #508]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006396:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a0:	4a7b      	ldr	r2, [pc, #492]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a2:	430b      	orrs	r3, r1
 80063a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80063a6:	e003      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d039      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d81c      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80063da:	a201      	add	r2, pc, #4	@ (adr r2, 80063e0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	0800641d 	.word	0x0800641d
 80063e4:	080063f1 	.word	0x080063f1
 80063e8:	080063ff 	.word	0x080063ff
 80063ec:	0800641d 	.word	0x0800641d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4b67      	ldr	r3, [pc, #412]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f4:	4a66      	ldr	r2, [pc, #408]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063fc:	e00f      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	3308      	adds	r3, #8
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fe44 	bl	8007094 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006412:	e004      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800641a:	e000      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800641c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006426:	4b5a      	ldr	r3, [pc, #360]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800642a:	f023 0103 	bic.w	r1, r3, #3
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006434:	4a56      	ldr	r2, [pc, #344]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006436:	430b      	orrs	r3, r1
 8006438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800643a:	e003      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006454:	2300      	movs	r3, #0
 8006456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800645a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	f000 809f 	beq.w	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006466:	4b4b      	ldr	r3, [pc, #300]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a4a      	ldr	r2, [pc, #296]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006470:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006472:	f7fb fd05 	bl	8001e80 <HAL_GetTick>
 8006476:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800647a:	e00b      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647c:	f7fb fd00 	bl	8001e80 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b64      	cmp	r3, #100	@ 0x64
 800648a:	d903      	bls.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006492:	e005      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006494:	4b3f      	ldr	r3, [pc, #252]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0ed      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d179      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064a8:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064b4:	4053      	eors	r3, r2
 80064b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d015      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064be:	4b34      	ldr	r3, [pc, #208]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064ca:	4b31      	ldr	r3, [pc, #196]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064da:	4a2d      	ldr	r2, [pc, #180]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f6:	d118      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fb fcc2 	bl	8001e80 <HAL_GetTick>
 80064fc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006500:	e00d      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f7fb fcbd 	bl	8001e80 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800650c:	1ad2      	subs	r2, r2, r3
 800650e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006512:	429a      	cmp	r2, r3
 8006514:	d903      	bls.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800651c:	e005      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800651e:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0eb      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800652a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652e:	2b00      	cmp	r3, #0
 8006530:	d129      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800653a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800653e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006542:	d10e      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006554:	091a      	lsrs	r2, r3, #4
 8006556:	4b10      	ldr	r3, [pc, #64]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006558:	4013      	ands	r3, r2
 800655a:	4a0d      	ldr	r2, [pc, #52]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6113      	str	r3, [r2, #16]
 8006560:	e005      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4a0a      	ldr	r2, [pc, #40]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006568:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800656c:	6113      	str	r3, [r2, #16]
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006570:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800657a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657e:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6713      	str	r3, [r2, #112]	@ 0x70
 8006584:	e00e      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800658e:	e009      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006590:	58024400 	.word	0x58024400
 8006594:	58024800 	.word	0x58024800
 8006598:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f002 0301 	and.w	r3, r2, #1
 80065b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b4:	2300      	movs	r3, #0
 80065b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f000 8089 	beq.w	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065cc:	2b28      	cmp	r3, #40	@ 0x28
 80065ce:	d86b      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080066b1 	.word	0x080066b1
 80065dc:	080066a9 	.word	0x080066a9
 80065e0:	080066a9 	.word	0x080066a9
 80065e4:	080066a9 	.word	0x080066a9
 80065e8:	080066a9 	.word	0x080066a9
 80065ec:	080066a9 	.word	0x080066a9
 80065f0:	080066a9 	.word	0x080066a9
 80065f4:	080066a9 	.word	0x080066a9
 80065f8:	0800667d 	.word	0x0800667d
 80065fc:	080066a9 	.word	0x080066a9
 8006600:	080066a9 	.word	0x080066a9
 8006604:	080066a9 	.word	0x080066a9
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066a9 	.word	0x080066a9
 8006610:	080066a9 	.word	0x080066a9
 8006614:	080066a9 	.word	0x080066a9
 8006618:	08006693 	.word	0x08006693
 800661c:	080066a9 	.word	0x080066a9
 8006620:	080066a9 	.word	0x080066a9
 8006624:	080066a9 	.word	0x080066a9
 8006628:	080066a9 	.word	0x080066a9
 800662c:	080066a9 	.word	0x080066a9
 8006630:	080066a9 	.word	0x080066a9
 8006634:	080066a9 	.word	0x080066a9
 8006638:	080066b1 	.word	0x080066b1
 800663c:	080066a9 	.word	0x080066a9
 8006640:	080066a9 	.word	0x080066a9
 8006644:	080066a9 	.word	0x080066a9
 8006648:	080066a9 	.word	0x080066a9
 800664c:	080066a9 	.word	0x080066a9
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066a9 	.word	0x080066a9
 8006658:	080066b1 	.word	0x080066b1
 800665c:	080066a9 	.word	0x080066a9
 8006660:	080066a9 	.word	0x080066a9
 8006664:	080066a9 	.word	0x080066a9
 8006668:	080066a9 	.word	0x080066a9
 800666c:	080066a9 	.word	0x080066a9
 8006670:	080066a9 	.word	0x080066a9
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066b1 	.word	0x080066b1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006680:	3308      	adds	r3, #8
 8006682:	2101      	movs	r1, #1
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fd05 	bl	8007094 <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006690:	e00f      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	3328      	adds	r3, #40	@ 0x28
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fdac 	bl	80071f8 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80066b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066ba:	4bbf      	ldr	r3, [pc, #764]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066c8:	4abb      	ldr	r2, [pc, #748]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ca:	430b      	orrs	r3, r1
 80066cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80066ce:	e003      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f002 0302 	and.w	r3, r2, #2
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066f2:	460b      	mov	r3, r1
 80066f4:	4313      	orrs	r3, r2
 80066f6:	d041      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066fe:	2b05      	cmp	r3, #5
 8006700:	d824      	bhi.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006755 	.word	0x08006755
 800670c:	08006721 	.word	0x08006721
 8006710:	08006737 	.word	0x08006737
 8006714:	08006755 	.word	0x08006755
 8006718:	08006755 	.word	0x08006755
 800671c:	08006755 	.word	0x08006755
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006724:	3308      	adds	r3, #8
 8006726:	2101      	movs	r1, #1
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fcb3 	bl	8007094 <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006734:	e00f      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3328      	adds	r3, #40	@ 0x28
 800673c:	2101      	movs	r1, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fd5a 	bl	80071f8 <RCCEx_PLL3_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006752:	e000      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800675e:	4b96      	ldr	r3, [pc, #600]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006762:	f023 0107 	bic.w	r1, r3, #7
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800676c:	4a92      	ldr	r2, [pc, #584]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800676e:	430b      	orrs	r3, r1
 8006770:	6553      	str	r3, [r2, #84]	@ 0x54
 8006772:	e003      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f002 0304 	and.w	r3, r2, #4
 8006788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006792:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d044      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d825      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80067a8:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067c9 	.word	0x080067c9
 80067b8:	080067df 	.word	0x080067df
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067fd 	.word	0x080067fd
 80067c4:	080067fd 	.word	0x080067fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067cc:	3308      	adds	r3, #8
 80067ce:	2101      	movs	r1, #1
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fc5f 	bl	8007094 <RCCEx_PLL2_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067dc:	e00f      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fd06 	bl	80071f8 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006806:	4b6c      	ldr	r3, [pc, #432]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	f023 0107 	bic.w	r1, r3, #7
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006816:	4a68      	ldr	r2, [pc, #416]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006818:	430b      	orrs	r3, r1
 800681a:	6593      	str	r3, [r2, #88]	@ 0x58
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f002 0320 	and.w	r3, r2, #32
 8006832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800683c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d055      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006852:	d033      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006858:	d82c      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685e:	d02f      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006864:	d826      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800686a:	d02b      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800686c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006870:	d820      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006876:	d012      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800687c:	d81a      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d022      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006886:	d115      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	3308      	adds	r3, #8
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fbff 	bl	8007094 <RCCEx_PLL2_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800689c:	e015      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	3328      	adds	r3, #40	@ 0x28
 80068a4:	2102      	movs	r1, #2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fca6 	bl	80071f8 <RCCEx_PLL3_Config>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068b2:	e00a      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ba:	e006      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068bc:	bf00      	nop
 80068be:	e004      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068c0:	bf00      	nop
 80068c2:	e002      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068c4:	bf00      	nop
 80068c6:	e000      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068d2:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e2:	4a35      	ldr	r2, [pc, #212]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80068e8:	e003      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80068fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006902:	2300      	movs	r3, #0
 8006904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006908:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800690c:	460b      	mov	r3, r1
 800690e:	4313      	orrs	r3, r2
 8006910:	d058      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800691a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800691e:	d033      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006920:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006924:	d82c      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692a:	d02f      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d826      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006936:	d02b      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800693c:	d820      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800693e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006942:	d012      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006948:	d81a      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d022      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006952:	d115      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	3308      	adds	r3, #8
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fb99 	bl	8007094 <RCCEx_PLL2_Config>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006968:	e015      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	3328      	adds	r3, #40	@ 0x28
 8006970:	2102      	movs	r1, #2
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fc40 	bl	80071f8 <RCCEx_PLL3_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800697e:	e00a      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006986:	e006      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006988:	bf00      	nop
 800698a:	e004      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10e      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800699e:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069ae:	4a02      	ldr	r2, [pc, #8]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069b4:	e006      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80069d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d055      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80069e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069f0:	d033      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80069f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069f6:	d82c      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069fc:	d02f      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a02:	d826      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a08:	d02b      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a0e:	d820      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a14:	d012      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a1a:	d81a      	bhi.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d022      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a24:	d115      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb30 	bl	8007094 <RCCEx_PLL2_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a3a:	e015      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	3328      	adds	r3, #40	@ 0x28
 8006a42:	2102      	movs	r1, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fbd7 	bl	80071f8 <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a50:	e00a      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a58:	e006      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a5a:	bf00      	nop
 8006a5c:	e004      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a5e:	bf00      	nop
 8006a60:	e002      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a62:	bf00      	nop
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a70:	4ba1      	ldr	r3, [pc, #644]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a80:	4a9d      	ldr	r2, [pc, #628]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a86:	e003      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f002 0308 	and.w	r3, r2, #8
 8006a9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4313      	orrs	r3, r2
 8006aae:	d01e      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006abc:	d10c      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	3328      	adds	r3, #40	@ 0x28
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fb96 	bl	80071f8 <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ad8:	4b87      	ldr	r3, [pc, #540]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006adc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae8:	4a83      	ldr	r2, [pc, #524]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aea:	430b      	orrs	r3, r1
 8006aec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f002 0310 	and.w	r3, r2, #16
 8006afa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d01e      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1a:	d10c      	bne.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	3328      	adds	r3, #40	@ 0x28
 8006b22:	2102      	movs	r1, #2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fb67 	bl	80071f8 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b36:	4b70      	ldr	r3, [pc, #448]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b46:	4a6c      	ldr	r2, [pc, #432]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b66:	460b      	mov	r3, r1
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	d03e      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b78:	d022      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7e:	d81b      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d00b      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b8a:	e015      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	3308      	adds	r3, #8
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fa7d 	bl	8007094 <RCCEx_PLL2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba6:	3328      	adds	r3, #40	@ 0x28
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fb24 	bl	80071f8 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bca:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bda:	4a47      	ldr	r2, [pc, #284]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c00:	460b      	mov	r3, r1
 8006c02:	4313      	orrs	r3, r2
 8006c04:	d03b      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c12:	d01f      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c18:	d818      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c24:	d007      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c26:	e011      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c28:	4b33      	ldr	r3, [pc, #204]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a32      	ldr	r2, [pc, #200]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fada 	bl	80071f8 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c5e:	4b26      	ldr	r3, [pc, #152]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	4a22      	ldr	r2, [pc, #136]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c94:	460b      	mov	r3, r1
 8006c96:	4313      	orrs	r3, r2
 8006c98:	d034      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca8:	d007      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006caa:	e011      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	4a11      	ldr	r2, [pc, #68]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00e      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 f9e6 	bl	8007094 <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10d      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ce0:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cee:	4a02      	ldr	r2, [pc, #8]	@ (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cf4:	e006      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d12:	2300      	movs	r3, #0
 8006d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d00c      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d24:	3328      	adds	r3, #40	@ 0x28
 8006d26:	2102      	movs	r1, #2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fa65 	bl	80071f8 <RCCEx_PLL3_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d48:	2300      	movs	r3, #0
 8006d4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d038      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d62:	d018      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d68:	d811      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6e:	d014      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d74:	d80b      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d7e:	d106      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d80:	4bc3      	ldr	r3, [pc, #780]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	4ac2      	ldr	r2, [pc, #776]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d8c:	e008      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006da8:	4bb9      	ldr	r3, [pc, #740]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db8:	4ab5      	ldr	r2, [pc, #724]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006de4:	4baa      	ldr	r3, [pc, #680]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df2:	4aa7      	ldr	r2, [pc, #668]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e06:	2300      	movs	r3, #0
 8006e08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e14:	4b9e      	ldr	r3, [pc, #632]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e24:	4a9a      	ldr	r2, [pc, #616]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e38:	2300      	movs	r3, #0
 8006e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e40:	460b      	mov	r3, r1
 8006e42:	4313      	orrs	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e46:	4b92      	ldr	r3, [pc, #584]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e4a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e54:	4a8e      	ldr	r2, [pc, #568]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e68:	2300      	movs	r3, #0
 8006e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e70:	460b      	mov	r3, r1
 8006e72:	4313      	orrs	r3, r2
 8006e74:	d00e      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e76:	4b86      	ldr	r3, [pc, #536]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	4a85      	ldr	r2, [pc, #532]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e80:	6113      	str	r3, [r2, #16]
 8006e82:	4b83      	ldr	r3, [pc, #524]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e84:	6919      	ldr	r1, [r3, #16]
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e8e:	4a80      	ldr	r2, [pc, #512]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006eb0:	4b77      	ldr	r3, [pc, #476]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	4a74      	ldr	r2, [pc, #464]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d00a      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef0:	4a67      	ldr	r2, [pc, #412]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	2100      	movs	r1, #0
 8006f00:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d011      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	3308      	adds	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f8ba 	bl	8007094 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6239      	str	r1, [r7, #32]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f48:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	d011      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f56:	3308      	adds	r3, #8
 8006f58:	2101      	movs	r1, #1
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f89a 	bl	8007094 <RCCEx_PLL2_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	61b9      	str	r1, [r7, #24]
 8006f82:	f003 0304 	and.w	r3, r3, #4
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d011      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	3308      	adds	r3, #8
 8006f98:	2102      	movs	r1, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f87a 	bl	8007094 <RCCEx_PLL2_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6139      	str	r1, [r7, #16]
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d011      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd6:	3328      	adds	r3, #40	@ 0x28
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f90c 	bl	80071f8 <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	2100      	movs	r1, #0
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d011      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	3328      	adds	r3, #40	@ 0x28
 8007018:	2101      	movs	r1, #1
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f8ec 	bl	80071f8 <RCCEx_PLL3_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007032:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	2100      	movs	r1, #0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e9d7 1200 	ldrd	r1, r2, [r7]
 800704c:	460b      	mov	r3, r1
 800704e:	4313      	orrs	r3, r2
 8007050:	d011      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007056:	3328      	adds	r3, #40	@ 0x28
 8007058:	2102      	movs	r1, #2
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f8cc 	bl	80071f8 <RCCEx_PLL3_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007076:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
}
 8007084:	4618      	mov	r0, r3
 8007086:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800708a:	46bd      	mov	sp, r7
 800708c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007090:	58024400 	.word	0x58024400

08007094 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070a2:	4b53      	ldr	r3, [pc, #332]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d101      	bne.n	80070b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e099      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070b2:	4b4f      	ldr	r3, [pc, #316]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a4e      	ldr	r2, [pc, #312]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070be:	f7fa fedf 	bl	8001e80 <HAL_GetTick>
 80070c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070c4:	e008      	b.n	80070d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070c6:	f7fa fedb 	bl	8001e80 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e086      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070d8:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f0      	bne.n	80070c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070e4:	4b42      	ldr	r3, [pc, #264]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	493f      	ldr	r1, [pc, #252]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	3b01      	subs	r3, #1
 8007108:	025b      	lsls	r3, r3, #9
 800710a:	b29b      	uxth	r3, r3
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	3b01      	subs	r3, #1
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	3b01      	subs	r3, #1
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007128:	4931      	ldr	r1, [pc, #196]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800712e:	4b30      	ldr	r3, [pc, #192]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	492d      	ldr	r1, [pc, #180]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800713c:	4313      	orrs	r3, r2
 800713e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007140:	4b2b      	ldr	r3, [pc, #172]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	f023 0220 	bic.w	r2, r3, #32
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	4928      	ldr	r1, [pc, #160]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007152:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	4a26      	ldr	r2, [pc, #152]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800715e:	4b24      	ldr	r3, [pc, #144]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <RCCEx_PLL2_Config+0x160>)
 8007164:	4013      	ands	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	69d2      	ldr	r2, [r2, #28]
 800716a:	00d2      	lsls	r2, r2, #3
 800716c:	4920      	ldr	r1, [pc, #128]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007172:	4b1f      	ldr	r3, [pc, #124]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a1e      	ldr	r2, [pc, #120]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007178:	f043 0310 	orr.w	r3, r3, #16
 800717c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007184:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	4a19      	ldr	r2, [pc, #100]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800718a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800718e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007190:	e00f      	b.n	80071b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d106      	bne.n	80071a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007198:	4b15      	ldr	r3, [pc, #84]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	4a14      	ldr	r2, [pc, #80]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071a4:	e005      	b.n	80071b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071a6:	4b12      	ldr	r3, [pc, #72]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	4a11      	ldr	r2, [pc, #68]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071b2:	4b0f      	ldr	r3, [pc, #60]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071be:	f7fa fe5f 	bl	8001e80 <HAL_GetTick>
 80071c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071c4:	e008      	b.n	80071d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071c6:	f7fa fe5b 	bl	8001e80 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <RCCEx_PLL2_Config+0x15c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	58024400 	.word	0x58024400
 80071f4:	ffff0007 	.word	0xffff0007

080071f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007206:	4b53      	ldr	r3, [pc, #332]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d101      	bne.n	8007216 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e099      	b.n	800734a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007216:	4b4f      	ldr	r3, [pc, #316]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a4e      	ldr	r2, [pc, #312]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007222:	f7fa fe2d 	bl	8001e80 <HAL_GetTick>
 8007226:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007228:	e008      	b.n	800723c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800722a:	f7fa fe29 	bl	8001e80 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e086      	b.n	800734a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800723c:	4b45      	ldr	r3, [pc, #276]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1f0      	bne.n	800722a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007248:	4b42      	ldr	r3, [pc, #264]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	493f      	ldr	r1, [pc, #252]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007258:	4313      	orrs	r3, r2
 800725a:	628b      	str	r3, [r1, #40]	@ 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	3b01      	subs	r3, #1
 8007262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	3b01      	subs	r3, #1
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	b29b      	uxth	r3, r3
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	3b01      	subs	r3, #1
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	3b01      	subs	r3, #1
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800728c:	4931      	ldr	r1, [pc, #196]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800728e:	4313      	orrs	r3, r2
 8007290:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007292:	4b30      	ldr	r3, [pc, #192]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	492d      	ldr	r1, [pc, #180]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	4928      	ldr	r1, [pc, #160]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	4a26      	ldr	r2, [pc, #152]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072c2:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c6:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <RCCEx_PLL3_Config+0x160>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	69d2      	ldr	r2, [r2, #28]
 80072ce:	00d2      	lsls	r2, r2, #3
 80072d0:	4920      	ldr	r1, [pc, #128]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4a1e      	ldr	r2, [pc, #120]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	4a19      	ldr	r2, [pc, #100]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072f4:	e00f      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d106      	bne.n	800730a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072fc:	4b15      	ldr	r3, [pc, #84]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	4a14      	ldr	r2, [pc, #80]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007302:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007306:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007308:	e005      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	4a11      	ldr	r2, [pc, #68]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007314:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800731c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fa fdad 	bl	8001e80 <HAL_GetTick>
 8007326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007328:	e008      	b.n	800733c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800732a:	f7fa fda9 	bl	8001e80 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e006      	b.n	800734a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800733c:	4b05      	ldr	r3, [pc, #20]	@ (8007354 <RCCEx_PLL3_Config+0x15c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f0      	beq.n	800732a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	58024400 	.word	0x58024400
 8007358:	ffff0007 	.word	0xffff0007

0800735c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e10f      	b.n	800758e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a87      	ldr	r2, [pc, #540]	@ (8007598 <HAL_SPI_Init+0x23c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00f      	beq.n	800739e <HAL_SPI_Init+0x42>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a86      	ldr	r2, [pc, #536]	@ (800759c <HAL_SPI_Init+0x240>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00a      	beq.n	800739e <HAL_SPI_Init+0x42>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a84      	ldr	r2, [pc, #528]	@ (80075a0 <HAL_SPI_Init+0x244>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d005      	beq.n	800739e <HAL_SPI_Init+0x42>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d901      	bls.n	800739e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e0f7      	b.n	800758e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fe2e 	bl	8008000 <SPI_GetPacketSize>
 80073a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007598 <HAL_SPI_Init+0x23c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00c      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a79      	ldr	r2, [pc, #484]	@ (800759c <HAL_SPI_Init+0x240>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a78      	ldr	r2, [pc, #480]	@ (80075a0 <HAL_SPI_Init+0x244>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d002      	beq.n	80073ca <HAL_SPI_Init+0x6e>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d811      	bhi.n	80073ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073ce:	4a72      	ldr	r2, [pc, #456]	@ (8007598 <HAL_SPI_Init+0x23c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a70      	ldr	r2, [pc, #448]	@ (800759c <HAL_SPI_Init+0x240>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_SPI_Init+0x8c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a6f      	ldr	r2, [pc, #444]	@ (80075a0 <HAL_SPI_Init+0x244>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d104      	bne.n	80073f2 <HAL_SPI_Init+0x96>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d901      	bls.n	80073f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0cd      	b.n	800758e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fa f84c 	bl	80014a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800742e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007438:	d119      	bne.n	800746e <HAL_SPI_Init+0x112>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007442:	d103      	bne.n	800744c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800745c:	d107      	bne.n	800746e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800746c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00f      	beq.n	800749a <HAL_SPI_Init+0x13e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d90b      	bls.n	800749a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e007      	b.n	80074aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69da      	ldr	r2, [r3, #28]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750a:	ea42 0103 	orr.w	r1, r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d113      	bne.n	800754a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007534:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007548:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40013000 	.word	0x40013000
 800759c:	40003800 	.word	0x40003800
 80075a0:	40003c00 	.word	0x40003c00

080075a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3320      	adds	r3, #32
 80075ba:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075bc:	f7fa fc60 	bl	8001e80 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80075ce:	2302      	movs	r3, #2
 80075d0:	e1d1      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x3a>
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e1c9      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_SPI_Transmit+0x4c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e1c2      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2203      	movs	r2, #3
 80075fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007648:	d108      	bne.n	800765c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e009      	b.n	8007670 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800766e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4b96      	ldr	r3, [pc, #600]	@ (80078d0 <HAL_SPI_Transmit+0x32c>)
 8007678:	4013      	ands	r3, r2
 800767a:	88f9      	ldrh	r1, [r7, #6]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	430b      	orrs	r3, r1
 8007682:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800769c:	d107      	bne.n	80076ae <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b0f      	cmp	r3, #15
 80076b4:	d947      	bls.n	8007746 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80076b6:	e03f      	b.n	8007738 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d114      	bne.n	80076f0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d6:	1d1a      	adds	r2, r3, #4
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80076ee:	e023      	b.n	8007738 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f0:	f7fa fbc6 	bl	8001e80 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d803      	bhi.n	8007708 <HAL_SPI_Transmit+0x164>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d102      	bne.n	800770e <HAL_SPI_Transmit+0x16a>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d114      	bne.n	8007738 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fba8 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800771a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e11e      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1b9      	bne.n	80076b8 <HAL_SPI_Transmit+0x114>
 8007744:	e0f1      	b.n	800792a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2b07      	cmp	r3, #7
 800774c:	f240 80e6 	bls.w	800791c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007750:	e05d      	b.n	800780e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d132      	bne.n	80077c6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d918      	bls.n	800779e <HAL_SPI_Transmit+0x1fa>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d014      	beq.n	800779e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007784:	1d1a      	adds	r2, r3, #4
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b02      	subs	r3, #2
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800779c:	e037      	b.n	800780e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ac:	1c9a      	adds	r2, r3, #2
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077c4:	e023      	b.n	800780e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c6:	f7fa fb5b 	bl	8001e80 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d803      	bhi.n	80077de <HAL_SPI_Transmit+0x23a>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_Transmit+0x240>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d114      	bne.n	800780e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fb3d 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e0b3      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d19b      	bne.n	8007752 <HAL_SPI_Transmit+0x1ae>
 800781a:	e086      	b.n	800792a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d154      	bne.n	80078d4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d918      	bls.n	8007868 <HAL_SPI_Transmit+0x2c4>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783a:	2b40      	cmp	r3, #64	@ 0x40
 800783c:	d914      	bls.n	8007868 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b04      	subs	r3, #4
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007866:	e059      	b.n	800791c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d917      	bls.n	80078a4 <HAL_SPI_Transmit+0x300>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007880:	881a      	ldrh	r2, [r3, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788a:	1c9a      	adds	r2, r3, #2
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b02      	subs	r3, #2
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078a2:	e03b      	b.n	800791c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3320      	adds	r3, #32
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078ce:	e025      	b.n	800791c <HAL_SPI_Transmit+0x378>
 80078d0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d4:	f7fa fad4 	bl	8001e80 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d803      	bhi.n	80078ec <HAL_SPI_Transmit+0x348>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Transmit+0x34e>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d114      	bne.n	800791c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fab6 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e02c      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	f47f af79 	bne.w	800781c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	2108      	movs	r1, #8
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fb35 	bl	8007fa4 <SPI_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fa87 	bl	8007e64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007974:	2300      	movs	r3, #0
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop

08007980 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	b29b      	uxth	r3, r3
 8007998:	3301      	adds	r3, #1
 800799a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3330      	adds	r3, #48	@ 0x30
 80079a2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079a4:	f7fa fa6c 	bl	8001e80 <HAL_GetTick>
 80079a8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d001      	beq.n	80079ba <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
 80079b8:	e250      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_Receive+0x46>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e248      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_SPI_Receive+0x58>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e241      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2204      	movs	r2, #4
 80079e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007a30:	d108      	bne.n	8007a44 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e009      	b.n	8007a58 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007a56:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b95      	ldr	r3, [pc, #596]	@ (8007cb4 <HAL_SPI_Receive+0x334>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	88f9      	ldrh	r1, [r7, #6]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0201 	orr.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a84:	d107      	bne.n	8007a96 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d96c      	bls.n	8007b78 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007a9e:	e064      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d114      	bne.n	8007ae0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007ac0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ade:	e044      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	8bfa      	ldrh	r2, [r7, #30]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d919      	bls.n	8007b22 <HAL_SPI_Receive+0x1a2>
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d014      	beq.n	8007b22 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b08:	1d1a      	adds	r2, r3, #4
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b20:	e023      	b.n	8007b6a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b22:	f7fa f9ad 	bl	8001e80 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d803      	bhi.n	8007b3a <HAL_SPI_Receive+0x1ba>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b38:	d102      	bne.n	8007b40 <HAL_SPI_Receive+0x1c0>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d114      	bne.n	8007b6a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f98f 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e178      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d194      	bne.n	8007aa0 <HAL_SPI_Receive+0x120>
 8007b76:	e15e      	b.n	8007e36 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b07      	cmp	r3, #7
 8007b7e:	f240 8153 	bls.w	8007e28 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007b82:	e08f      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d114      	bne.n	8007bc4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	8812      	ldrh	r2, [r2, #0]
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007baa:	1c9a      	adds	r2, r3, #2
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bc2:	e06f      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8bfa      	ldrh	r2, [r7, #30]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d924      	bls.n	8007c1c <HAL_SPI_Receive+0x29c>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01f      	beq.n	8007c1c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	8812      	ldrh	r2, [r2, #0]
 8007be4:	b292      	uxth	r2, r2
 8007be6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	8812      	ldrh	r2, [r2, #0]
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b02      	subs	r3, #2
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c1a:	e043      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d119      	bne.n	8007c5c <HAL_SPI_Receive+0x2dc>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d014      	beq.n	8007c5c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	8812      	ldrh	r2, [r2, #0]
 8007c3a:	b292      	uxth	r2, r2
 8007c3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c42:	1c9a      	adds	r2, r3, #2
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c5a:	e023      	b.n	8007ca4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c5c:	f7fa f910 	bl	8001e80 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d803      	bhi.n	8007c74 <HAL_SPI_Receive+0x2f4>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d102      	bne.n	8007c7a <HAL_SPI_Receive+0x2fa>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d114      	bne.n	8007ca4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8f2 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e0db      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f47f af69 	bne.w	8007b84 <HAL_SPI_Receive+0x204>
 8007cb2:	e0c0      	b.n	8007e36 <HAL_SPI_Receive+0x4b6>
 8007cb4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d117      	bne.n	8007cfe <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cda:	7812      	ldrb	r2, [r2, #0]
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cfc:	e094      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8bfa      	ldrh	r2, [r7, #30]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d946      	bls.n	8007d9a <HAL_SPI_Receive+0x41a>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d041      	beq.n	8007d9a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d5a:	7812      	ldrb	r2, [r2, #0]
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b04      	subs	r3, #4
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d98:	e046      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d81c      	bhi.n	8007de0 <HAL_SPI_Receive+0x460>
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d017      	beq.n	8007de0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dbc:	7812      	ldrb	r2, [r2, #0]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dde:	e023      	b.n	8007e28 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de0:	f7fa f84e 	bl	8001e80 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d803      	bhi.n	8007df8 <HAL_SPI_Receive+0x478>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d102      	bne.n	8007dfe <HAL_SPI_Receive+0x47e>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d114      	bne.n	8007e28 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f830 	bl	8007e64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e019      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f af41 	bne.w	8007cb8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f814 	bl	8007e64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0210 	orr.w	r2, r2, #16
 8007e92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa0 <SPI_CloseTransfer+0x13c>)
 8007eb0:	400b      	ands	r3, r1
 8007eb2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ec2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d014      	beq.n	8007efa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00f      	beq.n	8007efa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699a      	ldr	r2, [r3, #24]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0220 	orr.w	r2, r2, #32
 8007ef8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d014      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f40:	f043 0201 	orr.w	r2, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f6a:	f043 0208 	orr.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	fffffc90 	.word	0xfffffc90

08007fa4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007fb4:	e010      	b.n	8007fd8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb6:	f7f9 ff63 	bl	8001e80 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d803      	bhi.n	8007fce <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d102      	bne.n	8007fd4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e00f      	b.n	8007ff8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2301      	moveq	r3, #1
 8007fea:	2300      	movne	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d0df      	beq.n	8007fb6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	095b      	lsrs	r3, r3, #5
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	3307      	adds	r3, #7
 800801e:	08db      	lsrs	r3, r3, #3
 8008020:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	fb02 f303 	mul.w	r3, r2, r3
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e049      	b.n	80080dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7f9 fdfb 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 fd59 	bl	8008b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d001      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e054      	b.n	80081a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d022      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	d01d      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a22      	ldr	r2, [pc, #136]	@ (80081b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d018      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a21      	ldr	r2, [pc, #132]	@ (80081bc <HAL_TIM_Base_Start_IT+0xd8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1f      	ldr	r2, [pc, #124]	@ (80081c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00e      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1e      	ldr	r2, [pc, #120]	@ (80081c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1c      	ldr	r2, [pc, #112]	@ (80081c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_TIM_Base_Start_IT+0x80>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1b      	ldr	r2, [pc, #108]	@ (80081cc <HAL_TIM_Base_Start_IT+0xe8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d115      	bne.n	8008190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	4b19      	ldr	r3, [pc, #100]	@ (80081d0 <HAL_TIM_Base_Start_IT+0xec>)
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b06      	cmp	r3, #6
 8008174:	d015      	beq.n	80081a2 <HAL_TIM_Base_Start_IT+0xbe>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800817c:	d011      	beq.n	80081a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e008      	b.n	80081a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e000      	b.n	80081a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40001800 	.word	0x40001800
 80081cc:	40014000 	.word	0x40014000
 80081d0:	00010007 	.word	0x00010007

080081d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e049      	b.n	800827a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f841 	bl	8008282 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3304      	adds	r3, #4
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f000 fc8a 	bl	8008b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <HAL_TIM_PWM_Start+0x24>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	e03c      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d109      	bne.n	80082d6 <HAL_TIM_PWM_Start+0x3e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	bf14      	ite	ne
 80082ce:	2301      	movne	r3, #1
 80082d0:	2300      	moveq	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	e02f      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d109      	bne.n	80082f0 <HAL_TIM_PWM_Start+0x58>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	bf14      	ite	ne
 80082e8:	2301      	movne	r3, #1
 80082ea:	2300      	moveq	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	e022      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b0c      	cmp	r3, #12
 80082f4:	d109      	bne.n	800830a <HAL_TIM_PWM_Start+0x72>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	e015      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b10      	cmp	r3, #16
 800830e:	d109      	bne.n	8008324 <HAL_TIM_PWM_Start+0x8c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	bf14      	ite	ne
 800831c:	2301      	movne	r3, #1
 800831e:	2300      	moveq	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	e008      	b.n	8008336 <HAL_TIM_PWM_Start+0x9e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e0a1      	b.n	8008482 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_TIM_PWM_Start+0xb6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800834c:	e023      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b04      	cmp	r3, #4
 8008352:	d104      	bne.n	800835e <HAL_TIM_PWM_Start+0xc6>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800835c:	e01b      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d104      	bne.n	800836e <HAL_TIM_PWM_Start+0xd6>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800836c:	e013      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b0c      	cmp	r3, #12
 8008372:	d104      	bne.n	800837e <HAL_TIM_PWM_Start+0xe6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800837c:	e00b      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b10      	cmp	r3, #16
 8008382:	d104      	bne.n	800838e <HAL_TIM_PWM_Start+0xf6>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800838c:	e003      	b.n	8008396 <HAL_TIM_PWM_Start+0xfe>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2201      	movs	r2, #1
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 ffde 	bl	8009360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a38      	ldr	r2, [pc, #224]	@ (800848c <HAL_TIM_PWM_Start+0x1f4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d013      	beq.n	80083d6 <HAL_TIM_PWM_Start+0x13e>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a37      	ldr	r2, [pc, #220]	@ (8008490 <HAL_TIM_PWM_Start+0x1f8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d00e      	beq.n	80083d6 <HAL_TIM_PWM_Start+0x13e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a35      	ldr	r2, [pc, #212]	@ (8008494 <HAL_TIM_PWM_Start+0x1fc>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d009      	beq.n	80083d6 <HAL_TIM_PWM_Start+0x13e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a34      	ldr	r2, [pc, #208]	@ (8008498 <HAL_TIM_PWM_Start+0x200>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d004      	beq.n	80083d6 <HAL_TIM_PWM_Start+0x13e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a32      	ldr	r2, [pc, #200]	@ (800849c <HAL_TIM_PWM_Start+0x204>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d101      	bne.n	80083da <HAL_TIM_PWM_Start+0x142>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <HAL_TIM_PWM_Start+0x144>
 80083da:	2300      	movs	r3, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a25      	ldr	r2, [pc, #148]	@ (800848c <HAL_TIM_PWM_Start+0x1f4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d022      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008402:	d01d      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a25      	ldr	r2, [pc, #148]	@ (80084a0 <HAL_TIM_PWM_Start+0x208>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a24      	ldr	r2, [pc, #144]	@ (80084a4 <HAL_TIM_PWM_Start+0x20c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a22      	ldr	r2, [pc, #136]	@ (80084a8 <HAL_TIM_PWM_Start+0x210>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1a      	ldr	r2, [pc, #104]	@ (8008490 <HAL_TIM_PWM_Start+0x1f8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a1e      	ldr	r2, [pc, #120]	@ (80084ac <HAL_TIM_PWM_Start+0x214>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <HAL_TIM_PWM_Start+0x1a8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <HAL_TIM_PWM_Start+0x1fc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d115      	bne.n	800846c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <HAL_TIM_PWM_Start+0x218>)
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b06      	cmp	r3, #6
 8008450:	d015      	beq.n	800847e <HAL_TIM_PWM_Start+0x1e6>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008458:	d011      	beq.n	800847e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0201 	orr.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800846a:	e008      	b.n	800847e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e000      	b.n	8008480 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40010000 	.word	0x40010000
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800
 80084a0:	40000400 	.word	0x40000400
 80084a4:	40000800 	.word	0x40000800
 80084a8:	40000c00 	.word	0x40000c00
 80084ac:	40001800 	.word	0x40001800
 80084b0:	00010007 	.word	0x00010007

080084b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d020      	beq.n	8008518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01b      	beq.n	8008518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0202 	mvn.w	r2, #2
 80084e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 faf6 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fae8 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 faf9 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d020      	beq.n	8008564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01b      	beq.n	8008564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0204 	mvn.w	r2, #4
 8008534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fad0 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 8008550:	e005      	b.n	800855e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fac2 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fad3 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 0308 	and.w	r3, r3, #8
 800856a:	2b00      	cmp	r3, #0
 800856c:	d020      	beq.n	80085b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01b      	beq.n	80085b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0208 	mvn.w	r2, #8
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2204      	movs	r2, #4
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 faaa 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa9c 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 faad 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0310 	and.w	r3, r3, #16
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d020      	beq.n	80085fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 0310 	and.w	r3, r3, #16
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01b      	beq.n	80085fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0210 	mvn.w	r2, #16
 80085cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2208      	movs	r2, #8
 80085d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa84 	bl	8008af0 <HAL_TIM_IC_CaptureCallback>
 80085e8:	e005      	b.n	80085f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa76 	bl	8008adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fa87 	bl	8008b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00c      	beq.n	8008620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0201 	mvn.w	r2, #1
 8008618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7f8 fe7c 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00c      	beq.n	800864e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f887 	bl	800975c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800866a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f87f 	bl	8009770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00c      	beq.n	8008696 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800868e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fa41 	bl	8008b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0220 	mvn.w	r2, #32
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 f847 	bl	8009748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086de:	2302      	movs	r3, #2
 80086e0:	e0ff      	b.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b14      	cmp	r3, #20
 80086ee:	f200 80f0 	bhi.w	80088d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	080088d3 	.word	0x080088d3
 8008700:	080088d3 	.word	0x080088d3
 8008704:	080088d3 	.word	0x080088d3
 8008708:	0800878d 	.word	0x0800878d
 800870c:	080088d3 	.word	0x080088d3
 8008710:	080088d3 	.word	0x080088d3
 8008714:	080088d3 	.word	0x080088d3
 8008718:	080087cf 	.word	0x080087cf
 800871c:	080088d3 	.word	0x080088d3
 8008720:	080088d3 	.word	0x080088d3
 8008724:	080088d3 	.word	0x080088d3
 8008728:	0800880f 	.word	0x0800880f
 800872c:	080088d3 	.word	0x080088d3
 8008730:	080088d3 	.word	0x080088d3
 8008734:	080088d3 	.word	0x080088d3
 8008738:	08008851 	.word	0x08008851
 800873c:	080088d3 	.word	0x080088d3
 8008740:	080088d3 	.word	0x080088d3
 8008744:	080088d3 	.word	0x080088d3
 8008748:	08008891 	.word	0x08008891
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fa90 	bl	8008c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0208 	orr.w	r2, r2, #8
 8008766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0204 	bic.w	r2, r2, #4
 8008776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6999      	ldr	r1, [r3, #24]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	691a      	ldr	r2, [r3, #16]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	619a      	str	r2, [r3, #24]
      break;
 800878a:	e0a5      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fb00 	bl	8008d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6999      	ldr	r1, [r3, #24]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	021a      	lsls	r2, r3, #8
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	619a      	str	r2, [r3, #24]
      break;
 80087cc:	e084      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fb69 	bl	8008eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0208 	orr.w	r2, r2, #8
 80087e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69da      	ldr	r2, [r3, #28]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0204 	bic.w	r2, r2, #4
 80087f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69d9      	ldr	r1, [r3, #28]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	61da      	str	r2, [r3, #28]
      break;
 800880c:	e064      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fbd1 	bl	8008fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	021a      	lsls	r2, r3, #8
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	61da      	str	r2, [r3, #28]
      break;
 800884e:	e043      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fc1a 	bl	8009090 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0208 	orr.w	r2, r2, #8
 800886a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 0204 	bic.w	r2, r2, #4
 800887a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800888e:	e023      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fc5e 	bl	8009158 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	021a      	lsls	r2, r3, #8
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80088d0:	e002      	b.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]
      break;
 80088d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_TIM_ConfigClockSource+0x1c>
 8008904:	2302      	movs	r3, #2
 8008906:	e0dc      	b.n	8008ac2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	4b6a      	ldr	r3, [pc, #424]	@ (8008acc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008924:	4013      	ands	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800892e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a64      	ldr	r2, [pc, #400]	@ (8008ad0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	f000 80a9 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 8008944:	4a62      	ldr	r2, [pc, #392]	@ (8008ad0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	f200 80ae 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800894c:	4a61      	ldr	r2, [pc, #388]	@ (8008ad4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	f000 80a1 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 8008954:	4a5f      	ldr	r2, [pc, #380]	@ (8008ad4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	f200 80a6 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800895c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ad8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800895e:	4293      	cmp	r3, r2
 8008960:	f000 8099 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 8008964:	4a5c      	ldr	r2, [pc, #368]	@ (8008ad8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008966:	4293      	cmp	r3, r2
 8008968:	f200 809e 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800896c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008970:	f000 8091 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 8008974:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008978:	f200 8096 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800897c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008980:	f000 8089 	beq.w	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 8008984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008988:	f200 808e 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800898c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008990:	d03e      	beq.n	8008a10 <HAL_TIM_ConfigClockSource+0x124>
 8008992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008996:	f200 8087 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899e:	f000 8086 	beq.w	8008aae <HAL_TIM_ConfigClockSource+0x1c2>
 80089a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a6:	d87f      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089a8:	2b70      	cmp	r3, #112	@ 0x70
 80089aa:	d01a      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0xf6>
 80089ac:	2b70      	cmp	r3, #112	@ 0x70
 80089ae:	d87b      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089b0:	2b60      	cmp	r3, #96	@ 0x60
 80089b2:	d050      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x16a>
 80089b4:	2b60      	cmp	r3, #96	@ 0x60
 80089b6:	d877      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089b8:	2b50      	cmp	r3, #80	@ 0x50
 80089ba:	d03c      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x14a>
 80089bc:	2b50      	cmp	r3, #80	@ 0x50
 80089be:	d873      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089c0:	2b40      	cmp	r3, #64	@ 0x40
 80089c2:	d058      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x18a>
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	d86f      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089c8:	2b30      	cmp	r3, #48	@ 0x30
 80089ca:	d064      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 80089cc:	2b30      	cmp	r3, #48	@ 0x30
 80089ce:	d86b      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d060      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d867      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05c      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d05a      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x1aa>
 80089e0:	e062      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089f2:	f000 fc95 	bl	8009320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	609a      	str	r2, [r3, #8]
      break;
 8008a0e:	e04f      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a20:	f000 fc7e 	bl	8009320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a32:	609a      	str	r2, [r3, #8]
      break;
 8008a34:	e03c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a42:	461a      	mov	r2, r3
 8008a44:	f000 fbee 	bl	8009224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2150      	movs	r1, #80	@ 0x50
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fc48 	bl	80092e4 <TIM_ITRx_SetConfig>
      break;
 8008a54:	e02c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a62:	461a      	mov	r2, r3
 8008a64:	f000 fc0d 	bl	8009282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2160      	movs	r1, #96	@ 0x60
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fc38 	bl	80092e4 <TIM_ITRx_SetConfig>
      break;
 8008a74:	e01c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a82:	461a      	mov	r2, r3
 8008a84:	f000 fbce 	bl	8009224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2140      	movs	r1, #64	@ 0x40
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fc28 	bl	80092e4 <TIM_ITRx_SetConfig>
      break;
 8008a94:	e00c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f000 fc1f 	bl	80092e4 <TIM_ITRx_SetConfig>
      break;
 8008aa6:	e003      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008aac:	e000      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	ffceff88 	.word	0xffceff88
 8008ad0:	00100040 	.word	0x00100040
 8008ad4:	00100030 	.word	0x00100030
 8008ad8:	00100020 	.word	0x00100020

08008adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a46      	ldr	r2, [pc, #280]	@ (8008c58 <TIM_Base_SetConfig+0x12c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d013      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4a:	d00f      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a43      	ldr	r2, [pc, #268]	@ (8008c5c <TIM_Base_SetConfig+0x130>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00b      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a42      	ldr	r2, [pc, #264]	@ (8008c60 <TIM_Base_SetConfig+0x134>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d007      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a41      	ldr	r2, [pc, #260]	@ (8008c64 <TIM_Base_SetConfig+0x138>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_Base_SetConfig+0x40>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a40      	ldr	r2, [pc, #256]	@ (8008c68 <TIM_Base_SetConfig+0x13c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d108      	bne.n	8008b7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a35      	ldr	r2, [pc, #212]	@ (8008c58 <TIM_Base_SetConfig+0x12c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d01f      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8c:	d01b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a32      	ldr	r2, [pc, #200]	@ (8008c5c <TIM_Base_SetConfig+0x130>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d017      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a31      	ldr	r2, [pc, #196]	@ (8008c60 <TIM_Base_SetConfig+0x134>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a30      	ldr	r2, [pc, #192]	@ (8008c64 <TIM_Base_SetConfig+0x138>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a2f      	ldr	r2, [pc, #188]	@ (8008c68 <TIM_Base_SetConfig+0x13c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8008c6c <TIM_Base_SetConfig+0x140>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8008c70 <TIM_Base_SetConfig+0x144>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_Base_SetConfig+0x9a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8008c74 <TIM_Base_SetConfig+0x148>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d108      	bne.n	8008bd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a16      	ldr	r2, [pc, #88]	@ (8008c58 <TIM_Base_SetConfig+0x12c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00f      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a18      	ldr	r2, [pc, #96]	@ (8008c68 <TIM_Base_SetConfig+0x13c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00b      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a17      	ldr	r2, [pc, #92]	@ (8008c6c <TIM_Base_SetConfig+0x140>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d007      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a16      	ldr	r2, [pc, #88]	@ (8008c70 <TIM_Base_SetConfig+0x144>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_Base_SetConfig+0xf8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	@ (8008c74 <TIM_Base_SetConfig+0x148>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d103      	bne.n	8008c2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d105      	bne.n	8008c4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f023 0201 	bic.w	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	611a      	str	r2, [r3, #16]
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40000400 	.word	0x40000400
 8008c60:	40000800 	.word	0x40000800
 8008c64:	40000c00 	.word	0x40000c00
 8008c68:	40010400 	.word	0x40010400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40014400 	.word	0x40014400
 8008c74:	40014800 	.word	0x40014800

08008c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	f023 0201 	bic.w	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4b37      	ldr	r3, [pc, #220]	@ (8008d80 <TIM_OC1_SetConfig+0x108>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f023 0302 	bic.w	r3, r3, #2
 8008cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a2d      	ldr	r2, [pc, #180]	@ (8008d84 <TIM_OC1_SetConfig+0x10c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_OC1_SetConfig+0x7c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008d88 <TIM_OC1_SetConfig+0x110>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_OC1_SetConfig+0x7c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a2b      	ldr	r2, [pc, #172]	@ (8008d8c <TIM_OC1_SetConfig+0x114>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_OC1_SetConfig+0x7c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d90 <TIM_OC1_SetConfig+0x118>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_OC1_SetConfig+0x7c>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a29      	ldr	r2, [pc, #164]	@ (8008d94 <TIM_OC1_SetConfig+0x11c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d10c      	bne.n	8008d0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f023 0308 	bic.w	r3, r3, #8
 8008cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f023 0304 	bic.w	r3, r3, #4
 8008d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1c      	ldr	r2, [pc, #112]	@ (8008d84 <TIM_OC1_SetConfig+0x10c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00f      	beq.n	8008d36 <TIM_OC1_SetConfig+0xbe>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a1b      	ldr	r2, [pc, #108]	@ (8008d88 <TIM_OC1_SetConfig+0x110>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00b      	beq.n	8008d36 <TIM_OC1_SetConfig+0xbe>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a1a      	ldr	r2, [pc, #104]	@ (8008d8c <TIM_OC1_SetConfig+0x114>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <TIM_OC1_SetConfig+0xbe>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a19      	ldr	r2, [pc, #100]	@ (8008d90 <TIM_OC1_SetConfig+0x118>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_OC1_SetConfig+0xbe>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a18      	ldr	r2, [pc, #96]	@ (8008d94 <TIM_OC1_SetConfig+0x11c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d111      	bne.n	8008d5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685a      	ldr	r2, [r3, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	621a      	str	r2, [r3, #32]
}
 8008d74:	bf00      	nop
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	fffeff8f 	.word	0xfffeff8f
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40014400 	.word	0x40014400
 8008d94:	40014800 	.word	0x40014800

08008d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	f023 0210 	bic.w	r2, r3, #16
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4b34      	ldr	r3, [pc, #208]	@ (8008e94 <TIM_OC2_SetConfig+0xfc>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f023 0320 	bic.w	r3, r3, #32
 8008de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a29      	ldr	r2, [pc, #164]	@ (8008e98 <TIM_OC2_SetConfig+0x100>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d003      	beq.n	8008e00 <TIM_OC2_SetConfig+0x68>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a28      	ldr	r2, [pc, #160]	@ (8008e9c <TIM_OC2_SetConfig+0x104>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10d      	bne.n	8008e1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e98 <TIM_OC2_SetConfig+0x100>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00f      	beq.n	8008e44 <TIM_OC2_SetConfig+0xac>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1d      	ldr	r2, [pc, #116]	@ (8008e9c <TIM_OC2_SetConfig+0x104>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00b      	beq.n	8008e44 <TIM_OC2_SetConfig+0xac>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea0 <TIM_OC2_SetConfig+0x108>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d007      	beq.n	8008e44 <TIM_OC2_SetConfig+0xac>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea4 <TIM_OC2_SetConfig+0x10c>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC2_SetConfig+0xac>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ea8 <TIM_OC2_SetConfig+0x110>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d113      	bne.n	8008e6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	feff8fff 	.word	0xfeff8fff
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40010400 	.word	0x40010400
 8008ea0:	40014000 	.word	0x40014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40014800 	.word	0x40014800

08008eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4b33      	ldr	r3, [pc, #204]	@ (8008fa4 <TIM_OC3_SetConfig+0xf8>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a28      	ldr	r2, [pc, #160]	@ (8008fa8 <TIM_OC3_SetConfig+0xfc>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d003      	beq.n	8008f12 <TIM_OC3_SetConfig+0x66>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a27      	ldr	r2, [pc, #156]	@ (8008fac <TIM_OC3_SetConfig+0x100>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d10d      	bne.n	8008f2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa8 <TIM_OC3_SetConfig+0xfc>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00f      	beq.n	8008f56 <TIM_OC3_SetConfig+0xaa>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a1c      	ldr	r2, [pc, #112]	@ (8008fac <TIM_OC3_SetConfig+0x100>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00b      	beq.n	8008f56 <TIM_OC3_SetConfig+0xaa>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb0 <TIM_OC3_SetConfig+0x104>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d007      	beq.n	8008f56 <TIM_OC3_SetConfig+0xaa>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb4 <TIM_OC3_SetConfig+0x108>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d003      	beq.n	8008f56 <TIM_OC3_SetConfig+0xaa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a19      	ldr	r2, [pc, #100]	@ (8008fb8 <TIM_OC3_SetConfig+0x10c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d113      	bne.n	8008f7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	621a      	str	r2, [r3, #32]
}
 8008f98:	bf00      	nop
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr
 8008fa4:	fffeff8f 	.word	0xfffeff8f
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800

08008fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4b24      	ldr	r3, [pc, #144]	@ (8009078 <TIM_OC4_SetConfig+0xbc>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	031b      	lsls	r3, r3, #12
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4313      	orrs	r3, r2
 8009012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a19      	ldr	r2, [pc, #100]	@ (800907c <TIM_OC4_SetConfig+0xc0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00f      	beq.n	800903c <TIM_OC4_SetConfig+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a18      	ldr	r2, [pc, #96]	@ (8009080 <TIM_OC4_SetConfig+0xc4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00b      	beq.n	800903c <TIM_OC4_SetConfig+0x80>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a17      	ldr	r2, [pc, #92]	@ (8009084 <TIM_OC4_SetConfig+0xc8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d007      	beq.n	800903c <TIM_OC4_SetConfig+0x80>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a16      	ldr	r2, [pc, #88]	@ (8009088 <TIM_OC4_SetConfig+0xcc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_OC4_SetConfig+0x80>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a15      	ldr	r2, [pc, #84]	@ (800908c <TIM_OC4_SetConfig+0xd0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d109      	bne.n	8009050 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	621a      	str	r2, [r3, #32]
}
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	feff8fff 	.word	0xfeff8fff
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400
 8009084:	40014000 	.word	0x40014000
 8009088:	40014400 	.word	0x40014400
 800908c:	40014800 	.word	0x40014800

08009090 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4b21      	ldr	r3, [pc, #132]	@ (8009140 <TIM_OC5_SetConfig+0xb0>)
 80090bc:	4013      	ands	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a18      	ldr	r2, [pc, #96]	@ (8009144 <TIM_OC5_SetConfig+0xb4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00f      	beq.n	8009106 <TIM_OC5_SetConfig+0x76>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <TIM_OC5_SetConfig+0xb8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_OC5_SetConfig+0x76>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a16      	ldr	r2, [pc, #88]	@ (800914c <TIM_OC5_SetConfig+0xbc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_OC5_SetConfig+0x76>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a15      	ldr	r2, [pc, #84]	@ (8009150 <TIM_OC5_SetConfig+0xc0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_OC5_SetConfig+0x76>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a14      	ldr	r2, [pc, #80]	@ (8009154 <TIM_OC5_SetConfig+0xc4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d109      	bne.n	800911a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800910c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	621a      	str	r2, [r3, #32]
}
 8009134:	bf00      	nop
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	fffeff8f 	.word	0xfffeff8f
 8009144:	40010000 	.word	0x40010000
 8009148:	40010400 	.word	0x40010400
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800

08009158 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4b22      	ldr	r3, [pc, #136]	@ (800920c <TIM_OC6_SetConfig+0xb4>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800919a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a19      	ldr	r2, [pc, #100]	@ (8009210 <TIM_OC6_SetConfig+0xb8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00f      	beq.n	80091d0 <TIM_OC6_SetConfig+0x78>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a18      	ldr	r2, [pc, #96]	@ (8009214 <TIM_OC6_SetConfig+0xbc>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00b      	beq.n	80091d0 <TIM_OC6_SetConfig+0x78>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a17      	ldr	r2, [pc, #92]	@ (8009218 <TIM_OC6_SetConfig+0xc0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d007      	beq.n	80091d0 <TIM_OC6_SetConfig+0x78>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a16      	ldr	r2, [pc, #88]	@ (800921c <TIM_OC6_SetConfig+0xc4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d003      	beq.n	80091d0 <TIM_OC6_SetConfig+0x78>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a15      	ldr	r2, [pc, #84]	@ (8009220 <TIM_OC6_SetConfig+0xc8>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d109      	bne.n	80091e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	621a      	str	r2, [r3, #32]
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	feff8fff 	.word	0xfeff8fff
 8009210:	40010000 	.word	0x40010000
 8009214:	40010400 	.word	0x40010400
 8009218:	40014000 	.word	0x40014000
 800921c:	40014400 	.word	0x40014400
 8009220:	40014800 	.word	0x40014800

08009224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	f023 0201 	bic.w	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800924e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f023 030a 	bic.w	r3, r3, #10
 8009260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009282:	b480      	push	{r7}
 8009284:	b087      	sub	sp, #28
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	f023 0210 	bic.w	r2, r3, #16
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	031b      	lsls	r3, r3, #12
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4b09      	ldr	r3, [pc, #36]	@ (800931c <TIM_ITRx_SetConfig+0x38>)
 80092f8:	4013      	ands	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	f043 0307 	orr.w	r3, r3, #7
 8009306:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	609a      	str	r2, [r3, #8]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	ffcfff8f 	.word	0xffcfff8f

08009320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800933a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	021a      	lsls	r2, r3, #8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	431a      	orrs	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4313      	orrs	r3, r2
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	609a      	str	r2, [r3, #8]
}
 8009354:	bf00      	nop
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2201      	movs	r2, #1
 8009374:	fa02 f303 	lsl.w	r3, r2, r3
 8009378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1a      	ldr	r2, [r3, #32]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	43db      	mvns	r3, r3
 8009382:	401a      	ands	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6a1a      	ldr	r2, [r3, #32]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 031f 	and.w	r3, r3, #31
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	fa01 f303 	lsl.w	r3, r1, r3
 8009398:	431a      	orrs	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <HAL_TIMEx_PWMN_Start+0x24>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	bf14      	ite	ne
 80093c8:	2301      	movne	r3, #1
 80093ca:	2300      	moveq	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	e022      	b.n	8009416 <HAL_TIMEx_PWMN_Start+0x6a>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d109      	bne.n	80093ea <HAL_TIMEx_PWMN_Start+0x3e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b01      	cmp	r3, #1
 80093e0:	bf14      	ite	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	2300      	moveq	r3, #0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	e015      	b.n	8009416 <HAL_TIMEx_PWMN_Start+0x6a>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d109      	bne.n	8009404 <HAL_TIMEx_PWMN_Start+0x58>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	bf14      	ite	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	2300      	moveq	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	e008      	b.n	8009416 <HAL_TIMEx_PWMN_Start+0x6a>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b01      	cmp	r3, #1
 800940e:	bf14      	ite	ne
 8009410:	2301      	movne	r3, #1
 8009412:	2300      	moveq	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e073      	b.n	8009506 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d104      	bne.n	800942e <HAL_TIMEx_PWMN_Start+0x82>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2202      	movs	r2, #2
 8009428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800942c:	e013      	b.n	8009456 <HAL_TIMEx_PWMN_Start+0xaa>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b04      	cmp	r3, #4
 8009432:	d104      	bne.n	800943e <HAL_TIMEx_PWMN_Start+0x92>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800943c:	e00b      	b.n	8009456 <HAL_TIMEx_PWMN_Start+0xaa>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b08      	cmp	r3, #8
 8009442:	d104      	bne.n	800944e <HAL_TIMEx_PWMN_Start+0xa2>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800944c:	e003      	b.n	8009456 <HAL_TIMEx_PWMN_Start+0xaa>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2204      	movs	r2, #4
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f990 	bl	8009784 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a25      	ldr	r2, [pc, #148]	@ (8009510 <HAL_TIMEx_PWMN_Start+0x164>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d022      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009486:	d01d      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a21      	ldr	r2, [pc, #132]	@ (8009514 <HAL_TIMEx_PWMN_Start+0x168>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d018      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a20      	ldr	r2, [pc, #128]	@ (8009518 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1e      	ldr	r2, [pc, #120]	@ (800951c <HAL_TIMEx_PWMN_Start+0x170>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d00e      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009520 <HAL_TIMEx_PWMN_Start+0x174>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d009      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009524 <HAL_TIMEx_PWMN_Start+0x178>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <HAL_TIMEx_PWMN_Start+0x118>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a1a      	ldr	r2, [pc, #104]	@ (8009528 <HAL_TIMEx_PWMN_Start+0x17c>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d115      	bne.n	80094f0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	4b18      	ldr	r3, [pc, #96]	@ (800952c <HAL_TIMEx_PWMN_Start+0x180>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b06      	cmp	r3, #6
 80094d4:	d015      	beq.n	8009502 <HAL_TIMEx_PWMN_Start+0x156>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094dc:	d011      	beq.n	8009502 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0201 	orr.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ee:	e008      	b.n	8009502 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0201 	orr.w	r2, r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e000      	b.n	8009504 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40010400 	.word	0x40010400
 8009524:	40001800 	.word	0x40001800
 8009528:	40014000 	.word	0x40014000
 800952c:	00010007 	.word	0x00010007

08009530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009540:	2b01      	cmp	r3, #1
 8009542:	d101      	bne.n	8009548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009544:	2302      	movs	r3, #2
 8009546:	e06d      	b.n	8009624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a30      	ldr	r2, [pc, #192]	@ (8009630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d004      	beq.n	800957c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a2f      	ldr	r2, [pc, #188]	@ (8009634 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d108      	bne.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009582:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009594:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4313      	orrs	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a20      	ldr	r2, [pc, #128]	@ (8009630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d022      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ba:	d01d      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009638 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d018      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1c      	ldr	r2, [pc, #112]	@ (800963c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d013      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a1a      	ldr	r2, [pc, #104]	@ (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00e      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a15      	ldr	r2, [pc, #84]	@ (8009634 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d009      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a16      	ldr	r2, [pc, #88]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d10c      	bne.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	4313      	orrs	r3, r2
 8009608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	40010000 	.word	0x40010000
 8009634:	40010400 	.word	0x40010400
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40000c00 	.word	0x40000c00
 8009644:	40001800 	.word	0x40001800
 8009648:	40014000 	.word	0x40014000

0800964c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009664:	2302      	movs	r3, #2
 8009666:	e065      	b.n	8009734 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	041b      	lsls	r3, r3, #16
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a16      	ldr	r2, [pc, #88]	@ (8009740 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d004      	beq.n	80096f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a14      	ldr	r2, [pc, #80]	@ (8009744 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d115      	bne.n	8009722 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	051b      	lsls	r3, r3, #20
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400

08009748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 030f 	and.w	r3, r3, #15
 8009796:	2204      	movs	r2, #4
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a1a      	ldr	r2, [r3, #32]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	43db      	mvns	r3, r3
 80097a6:	401a      	ands	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a1a      	ldr	r2, [r3, #32]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	fa01 f303 	lsl.w	r3, r1, r3
 80097bc:	431a      	orrs	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	621a      	str	r2, [r3, #32]
}
 80097c2:	bf00      	nop
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d0:	b084      	sub	sp, #16
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	f107 001c 	add.w	r0, r7, #28
 80097de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d121      	bne.n	800982e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	4b2c      	ldr	r3, [pc, #176]	@ (80098ac <USB_CoreInit+0xdc>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800980e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009812:	2b01      	cmp	r3, #1
 8009814:	d105      	bne.n	8009822 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 faf6 	bl	800ae14 <USB_CoreReset>
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
 800982c:	e01b      	b.n	8009866 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 faea 	bl	800ae14 <USB_CoreReset>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009844:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009848:	2b00      	cmp	r3, #0
 800984a:	d106      	bne.n	800985a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009850:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	639a      	str	r2, [r3, #56]	@ 0x38
 8009858:	e005      	b.n	8009866 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009866:	7fbb      	ldrb	r3, [r7, #30]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d116      	bne.n	800989a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800987a:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <USB_CoreInit+0xe0>)
 800987c:	4313      	orrs	r3, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f043 0206 	orr.w	r2, r3, #6
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f043 0220 	orr.w	r2, r3, #32
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098a6:	b004      	add	sp, #16
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	ffbdffbf 	.word	0xffbdffbf
 80098b0:	03ee0000 	.word	0x03ee0000

080098b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	4613      	mov	r3, r2
 80098c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d165      	bne.n	8009994 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4a41      	ldr	r2, [pc, #260]	@ (80099d0 <USB_SetTurnaroundTime+0x11c>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d906      	bls.n	80098de <USB_SetTurnaroundTime+0x2a>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4a40      	ldr	r2, [pc, #256]	@ (80099d4 <USB_SetTurnaroundTime+0x120>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d202      	bcs.n	80098de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098d8:	230f      	movs	r3, #15
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e062      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4a3c      	ldr	r2, [pc, #240]	@ (80099d4 <USB_SetTurnaroundTime+0x120>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d306      	bcc.n	80098f4 <USB_SetTurnaroundTime+0x40>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	4a3b      	ldr	r2, [pc, #236]	@ (80099d8 <USB_SetTurnaroundTime+0x124>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d202      	bcs.n	80098f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098ee:	230e      	movs	r3, #14
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	e057      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4a38      	ldr	r2, [pc, #224]	@ (80099d8 <USB_SetTurnaroundTime+0x124>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d306      	bcc.n	800990a <USB_SetTurnaroundTime+0x56>
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4a37      	ldr	r2, [pc, #220]	@ (80099dc <USB_SetTurnaroundTime+0x128>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d202      	bcs.n	800990a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009904:	230d      	movs	r3, #13
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	e04c      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	4a33      	ldr	r2, [pc, #204]	@ (80099dc <USB_SetTurnaroundTime+0x128>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d306      	bcc.n	8009920 <USB_SetTurnaroundTime+0x6c>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	4a32      	ldr	r2, [pc, #200]	@ (80099e0 <USB_SetTurnaroundTime+0x12c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d802      	bhi.n	8009920 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800991a:	230c      	movs	r3, #12
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	e041      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	4a2f      	ldr	r2, [pc, #188]	@ (80099e0 <USB_SetTurnaroundTime+0x12c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d906      	bls.n	8009936 <USB_SetTurnaroundTime+0x82>
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4a2e      	ldr	r2, [pc, #184]	@ (80099e4 <USB_SetTurnaroundTime+0x130>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d802      	bhi.n	8009936 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009930:	230b      	movs	r3, #11
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	e036      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4a2a      	ldr	r2, [pc, #168]	@ (80099e4 <USB_SetTurnaroundTime+0x130>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d906      	bls.n	800994c <USB_SetTurnaroundTime+0x98>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	4a29      	ldr	r2, [pc, #164]	@ (80099e8 <USB_SetTurnaroundTime+0x134>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d802      	bhi.n	800994c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009946:	230a      	movs	r3, #10
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	e02b      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4a26      	ldr	r2, [pc, #152]	@ (80099e8 <USB_SetTurnaroundTime+0x134>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d906      	bls.n	8009962 <USB_SetTurnaroundTime+0xae>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4a25      	ldr	r2, [pc, #148]	@ (80099ec <USB_SetTurnaroundTime+0x138>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d202      	bcs.n	8009962 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800995c:	2309      	movs	r3, #9
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	e020      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4a21      	ldr	r2, [pc, #132]	@ (80099ec <USB_SetTurnaroundTime+0x138>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d306      	bcc.n	8009978 <USB_SetTurnaroundTime+0xc4>
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4a20      	ldr	r2, [pc, #128]	@ (80099f0 <USB_SetTurnaroundTime+0x13c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d802      	bhi.n	8009978 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009972:	2308      	movs	r3, #8
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	e015      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4a1d      	ldr	r2, [pc, #116]	@ (80099f0 <USB_SetTurnaroundTime+0x13c>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d906      	bls.n	800998e <USB_SetTurnaroundTime+0xda>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4a1c      	ldr	r2, [pc, #112]	@ (80099f4 <USB_SetTurnaroundTime+0x140>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d202      	bcs.n	800998e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009988:	2307      	movs	r3, #7
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	e00a      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800998e:	2306      	movs	r3, #6
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	e007      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d102      	bne.n	80099a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800999a:	2309      	movs	r3, #9
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	e001      	b.n	80099a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099a0:	2309      	movs	r3, #9
 80099a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	00d8acbf 	.word	0x00d8acbf
 80099d4:	00e4e1c0 	.word	0x00e4e1c0
 80099d8:	00f42400 	.word	0x00f42400
 80099dc:	01067380 	.word	0x01067380
 80099e0:	011a499f 	.word	0x011a499f
 80099e4:	01312cff 	.word	0x01312cff
 80099e8:	014ca43f 	.word	0x014ca43f
 80099ec:	016e3600 	.word	0x016e3600
 80099f0:	01a6ab1f 	.word	0x01a6ab1f
 80099f4:	01e84800 	.word	0x01e84800

080099f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f043 0201 	orr.w	r2, r3, #1
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f023 0201 	bic.w	r2, r3, #1
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d115      	bne.n	8009a8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a6a:	200a      	movs	r0, #10
 8009a6c:	f7f8 fa14 	bl	8001e98 <HAL_Delay>
      ms += 10U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	330a      	adds	r3, #10
 8009a74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 f93b 	bl	800acf2 <USB_GetMode>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d01e      	beq.n	8009ac0 <USB_SetCurrentMode+0x84>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2bc7      	cmp	r3, #199	@ 0xc7
 8009a86:	d9f0      	bls.n	8009a6a <USB_SetCurrentMode+0x2e>
 8009a88:	e01a      	b.n	8009ac0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d115      	bne.n	8009abc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a9c:	200a      	movs	r0, #10
 8009a9e:	f7f8 f9fb 	bl	8001e98 <HAL_Delay>
      ms += 10U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	330a      	adds	r3, #10
 8009aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f922 	bl	800acf2 <USB_GetMode>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <USB_SetCurrentMode+0x84>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ab8:	d9f0      	bls.n	8009a9c <USB_SetCurrentMode+0x60>
 8009aba:	e001      	b.n	8009ac0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e005      	b.n	8009acc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ac4:	d101      	bne.n	8009aca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009aee:	2300      	movs	r3, #0
 8009af0:	613b      	str	r3, [r7, #16]
 8009af2:	e009      	b.n	8009b08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	3340      	adds	r3, #64	@ 0x40
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	3301      	adds	r3, #1
 8009b06:	613b      	str	r3, [r7, #16]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b0e      	cmp	r3, #14
 8009b0c:	d9f2      	bls.n	8009af4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d11c      	bne.n	8009b50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b24:	f043 0302 	orr.w	r3, r3, #2
 8009b28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e005      	b.n	8009b5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b62:	461a      	mov	r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d10d      	bne.n	8009b8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f968 	bl	8009e50 <USB_SetDevSpeed>
 8009b80:	e008      	b.n	8009b94 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b82:	2101      	movs	r1, #1
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f963 	bl	8009e50 <USB_SetDevSpeed>
 8009b8a:	e003      	b.n	8009b94 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b8c:	2103      	movs	r1, #3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f95e 	bl	8009e50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b94:	2110      	movs	r1, #16
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f8fa 	bl	8009d90 <USB_FlushTxFifo>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f924 	bl	8009df4 <USB_FlushRxFifo>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc8:	461a      	mov	r2, r3
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	e043      	b.n	8009c68 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf6:	d118      	bne.n	8009c2a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	e013      	b.n	8009c3c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e008      	b.n	8009c3c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c36:	461a      	mov	r2, r3
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c48:	461a      	mov	r2, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	3301      	adds	r3, #1
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d3b5      	bcc.n	8009be0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	e043      	b.n	8009d02 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c90:	d118      	bne.n	8009cc4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e013      	b.n	8009cd6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	e008      	b.n	8009cd6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	613b      	str	r3, [r7, #16]
 8009d02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d06:	461a      	mov	r2, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d3b5      	bcc.n	8009c7a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d105      	bne.n	8009d44 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f043 0210 	orr.w	r2, r3, #16
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	4b0f      	ldr	r3, [pc, #60]	@ (8009d88 <USB_DevInit+0x2b4>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f043 0208 	orr.w	r2, r3, #8
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d105      	bne.n	8009d78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699a      	ldr	r2, [r3, #24]
 8009d70:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <USB_DevInit+0x2b8>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d84:	b004      	add	sp, #16
 8009d86:	4770      	bx	lr
 8009d88:	803c3800 	.word	0x803c3800
 8009d8c:	40000004 	.word	0x40000004

08009d90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009daa:	d901      	bls.n	8009db0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e01b      	b.n	8009de8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	daf2      	bge.n	8009d9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	019b      	lsls	r3, r3, #6
 8009dc0:	f043 0220 	orr.w	r2, r3, #32
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009dd4:	d901      	bls.n	8009dda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e006      	b.n	8009de8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b20      	cmp	r3, #32
 8009de4:	d0f0      	beq.n	8009dc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e0c:	d901      	bls.n	8009e12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e018      	b.n	8009e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	daf2      	bge.n	8009e00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2210      	movs	r2, #16
 8009e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e30:	d901      	bls.n	8009e36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e006      	b.n	8009e44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 0310 	and.w	r3, r3, #16
 8009e3e:	2b10      	cmp	r3, #16
 8009e40:	d0f0      	beq.n	8009e24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e70:	4313      	orrs	r3, r2
 8009e72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b087      	sub	sp, #28
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 0306 	and.w	r3, r3, #6
 8009e9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75fb      	strb	r3, [r7, #23]
 8009ea6:	e00a      	b.n	8009ebe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d002      	beq.n	8009eb4 <USB_GetDevSpeed+0x32>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b06      	cmp	r3, #6
 8009eb2:	d102      	bne.n	8009eba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	75fb      	strb	r3, [r7, #23]
 8009eb8:	e001      	b.n	8009ebe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009eba:	230f      	movs	r3, #15
 8009ebc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	371c      	adds	r7, #28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d139      	bne.n	8009f5c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	2101      	movs	r1, #1
 8009efa:	fa01 f303 	lsl.w	r3, r1, r3
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	68f9      	ldr	r1, [r7, #12]
 8009f02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f06:	4313      	orrs	r3, r2
 8009f08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d153      	bne.n	8009fc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	791b      	ldrb	r3, [r3, #4]
 8009f3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	059b      	lsls	r3, r3, #22
 8009f42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f44:	431a      	orrs	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	0159      	lsls	r1, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	440b      	add	r3, r1
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f52:	4619      	mov	r1, r3
 8009f54:	4b20      	ldr	r3, [pc, #128]	@ (8009fd8 <USB_ActivateEndpoint+0x10c>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	600b      	str	r3, [r1, #0]
 8009f5a:	e035      	b.n	8009fc8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f62:	69da      	ldr	r2, [r3, #28]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	f003 030f 	and.w	r3, r3, #15
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f72:	041b      	lsls	r3, r3, #16
 8009f74:	68f9      	ldr	r1, [r7, #12]
 8009f76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d119      	bne.n	8009fc8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	791b      	ldrb	r3, [r3, #4]
 8009fae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	0159      	lsls	r1, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	440b      	add	r3, r1
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <USB_ActivateEndpoint+0x10c>)
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	10008000 	.word	0x10008000

08009fdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d161      	bne.n	800a0bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a00a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a00e:	d11f      	bne.n	800a050 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	440a      	add	r2, r1
 800a026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a02a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a02e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	0151      	lsls	r1, r2, #5
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	440a      	add	r2, r1
 800a046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a04e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 030f 	and.w	r3, r3, #15
 800a060:	2101      	movs	r1, #1
 800a062:	fa01 f303 	lsl.w	r3, r1, r3
 800a066:	b29b      	uxth	r3, r3
 800a068:	43db      	mvns	r3, r3
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a070:	4013      	ands	r3, r2
 800a072:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	f003 030f 	and.w	r3, r3, #15
 800a084:	2101      	movs	r1, #1
 800a086:	fa01 f303 	lsl.w	r3, r1, r3
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	43db      	mvns	r3, r3
 800a08e:	68f9      	ldr	r1, [r7, #12]
 800a090:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a094:	4013      	ands	r3, r2
 800a096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	0159      	lsls	r1, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4b35      	ldr	r3, [pc, #212]	@ (800a18c <USB_DeactivateEndpoint+0x1b0>)
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	600b      	str	r3, [r1, #0]
 800a0ba:	e060      	b.n	800a17e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0d2:	d11f      	bne.n	800a114 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a10e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a11a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	2101      	movs	r1, #1
 800a126:	fa01 f303 	lsl.w	r3, r1, r3
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	43db      	mvns	r3, r3
 800a12e:	68f9      	ldr	r1, [r7, #12]
 800a130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a134:	4013      	ands	r3, r2
 800a136:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	2101      	movs	r1, #1
 800a14a:	fa01 f303 	lsl.w	r3, r1, r3
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	43db      	mvns	r3, r3
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a158:	4013      	ands	r3, r2
 800a15a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	0159      	lsls	r1, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	440b      	add	r3, r1
 800a172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a176:	4619      	mov	r1, r3
 800a178:	4b05      	ldr	r3, [pc, #20]	@ (800a190 <USB_DeactivateEndpoint+0x1b4>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	ec337800 	.word	0xec337800
 800a190:	eff37800 	.word	0xeff37800

0800a194 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08a      	sub	sp, #40	@ 0x28
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f040 8181 	bne.w	800a4b8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d132      	bne.n	800a224 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	0159      	lsls	r1, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	440b      	add	r3, r1
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4ba5      	ldr	r3, [pc, #660]	@ (800a470 <USB_EPStartXfer+0x2dc>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	69ba      	ldr	r2, [r7, #24]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	0159      	lsls	r1, r3, #5
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	440b      	add	r3, r1
 800a216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a21a:	4619      	mov	r1, r3
 800a21c:	4b95      	ldr	r3, [pc, #596]	@ (800a474 <USB_EPStartXfer+0x2e0>)
 800a21e:	4013      	ands	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
 800a222:	e092      	b.n	800a34a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	0159      	lsls	r1, r3, #5
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	440b      	add	r3, r1
 800a23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23e:	4619      	mov	r1, r3
 800a240:	4b8c      	ldr	r3, [pc, #560]	@ (800a474 <USB_EPStartXfer+0x2e0>)
 800a242:	4013      	ands	r3, r2
 800a244:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	0159      	lsls	r1, r3, #5
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	440b      	add	r3, r1
 800a25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a260:	4619      	mov	r1, r3
 800a262:	4b83      	ldr	r3, [pc, #524]	@ (800a470 <USB_EPStartXfer+0x2dc>)
 800a264:	4013      	ands	r3, r2
 800a266:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d11a      	bne.n	800a2a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	429a      	cmp	r2, r3
 800a278:	d903      	bls.n	800a282 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	689a      	ldr	r2, [r3, #8]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	69fa      	ldr	r2, [r7, #28]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a29c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2a0:	6113      	str	r3, [r2, #16]
 800a2a2:	e01b      	b.n	800a2dc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6919      	ldr	r1, [r3, #16]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	440b      	add	r3, r1
 800a2bc:	1e59      	subs	r1, r3, #1
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2c6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a2c8:	4b6b      	ldr	r3, [pc, #428]	@ (800a478 <USB_EPStartXfer+0x2e4>)
 800a2ca:	400b      	ands	r3, r1
 800a2cc:	69b9      	ldr	r1, [r7, #24]
 800a2ce:	0148      	lsls	r0, r1, #5
 800a2d0:	69f9      	ldr	r1, [r7, #28]
 800a2d2:	4401      	add	r1, r0
 800a2d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2f2:	69b9      	ldr	r1, [r7, #24]
 800a2f4:	0148      	lsls	r0, r1, #5
 800a2f6:	69f9      	ldr	r1, [r7, #28]
 800a2f8:	4401      	add	r1, r0
 800a2fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2fe:	4313      	orrs	r3, r2
 800a300:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d11f      	bne.n	800a34a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	69fa      	ldr	r2, [r7, #28]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a324:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a328:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a344:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a348:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a34a:	79fb      	ldrb	r3, [r7, #7]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d14b      	bne.n	800a3e8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	69db      	ldr	r3, [r3, #28]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a364:	461a      	mov	r2, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d128      	bne.n	800a3c6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	e00f      	b.n	800a3c6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	e16a      	b.n	800a6be <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	0151      	lsls	r1, r2, #5
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	440a      	add	r2, r1
 800a3fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a402:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a406:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	791b      	ldrb	r3, [r3, #4]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d015      	beq.n	800a43c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8152 	beq.w	800a6be <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	2101      	movs	r1, #1
 800a42c:	fa01 f303 	lsl.w	r3, r1, r3
 800a430:	69f9      	ldr	r1, [r7, #28]
 800a432:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a436:	4313      	orrs	r3, r2
 800a438:	634b      	str	r3, [r1, #52]	@ 0x34
 800a43a:	e140      	b.n	800a6be <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d117      	bne.n	800a47c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	440a      	add	r2, r1
 800a462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a466:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	e016      	b.n	800a49c <USB_EPStartXfer+0x308>
 800a46e:	bf00      	nop
 800a470:	e007ffff 	.word	0xe007ffff
 800a474:	fff80000 	.word	0xfff80000
 800a478:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	69fa      	ldr	r2, [r7, #28]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a49a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	68d9      	ldr	r1, [r3, #12]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	781a      	ldrb	r2, [r3, #0]
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	b298      	uxth	r0, r3
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 f9b9 	bl	800a828 <USB_WritePacket>
 800a4b6:	e102      	b.n	800a6be <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	0159      	lsls	r1, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	440b      	add	r3, r1
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	4b7c      	ldr	r3, [pc, #496]	@ (800a6c8 <USB_EPStartXfer+0x534>)
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e6:	691a      	ldr	r2, [r3, #16]
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	0159      	lsls	r1, r3, #5
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	440b      	add	r3, r1
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4b75      	ldr	r3, [pc, #468]	@ (800a6cc <USB_EPStartXfer+0x538>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d12f      	bne.n	800a562 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	689a      	ldr	r2, [r3, #8]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a526:	691a      	ldr	r2, [r3, #16]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a530:	69b9      	ldr	r1, [r7, #24]
 800a532:	0148      	lsls	r0, r1, #5
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	4401      	add	r1, r0
 800a538:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a53c:	4313      	orrs	r3, r2
 800a53e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a55e:	6113      	str	r3, [r2, #16]
 800a560:	e05f      	b.n	800a622 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d123      	bne.n	800a5b2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a580:	69b9      	ldr	r1, [r7, #24]
 800a582:	0148      	lsls	r0, r1, #5
 800a584:	69f9      	ldr	r1, [r7, #28]
 800a586:	4401      	add	r1, r0
 800a588:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a58c:	4313      	orrs	r3, r2
 800a58e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ae:	6113      	str	r3, [r2, #16]
 800a5b0:	e037      	b.n	800a622 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	1e5a      	subs	r2, r3, #1
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	8afa      	ldrh	r2, [r7, #22]
 800a5ce:	fb03 f202 	mul.w	r2, r3, r2
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e2:	691a      	ldr	r2, [r3, #16]
 800a5e4:	8afb      	ldrh	r3, [r7, #22]
 800a5e6:	04d9      	lsls	r1, r3, #19
 800a5e8:	4b39      	ldr	r3, [pc, #228]	@ (800a6d0 <USB_EPStartXfer+0x53c>)
 800a5ea:	400b      	ands	r3, r1
 800a5ec:	69b9      	ldr	r1, [r7, #24]
 800a5ee:	0148      	lsls	r0, r1, #5
 800a5f0:	69f9      	ldr	r1, [r7, #28]
 800a5f2:	4401      	add	r1, r0
 800a5f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a612:	69b9      	ldr	r1, [r7, #24]
 800a614:	0148      	lsls	r0, r1, #5
 800a616:	69f9      	ldr	r1, [r7, #28]
 800a618:	4401      	add	r1, r0
 800a61a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a61e:	4313      	orrs	r3, r2
 800a620:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d10d      	bne.n	800a644 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	68d9      	ldr	r1, [r3, #12]
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a640:	460a      	mov	r2, r1
 800a642:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	791b      	ldrb	r3, [r3, #4]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d128      	bne.n	800a69e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d110      	bne.n	800a67e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a676:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	e00f      	b.n	800a69e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	440a      	add	r2, r1
 800a694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a69c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3720      	adds	r7, #32
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	fff80000 	.word	0xfff80000
 800a6cc:	e007ffff 	.word	0xe007ffff
 800a6d0:	1ff80000 	.word	0x1ff80000

0800a6d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	785b      	ldrb	r3, [r3, #1]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d14a      	bne.n	800a788 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a70a:	f040 8086 	bne.w	800a81a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	7812      	ldrb	r2, [r2, #0]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	440a      	add	r2, r1
 800a728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a72c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a730:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	7812      	ldrb	r2, [r2, #0]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a754:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a762:	4293      	cmp	r3, r2
 800a764:	d902      	bls.n	800a76c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	75fb      	strb	r3, [r7, #23]
          break;
 800a76a:	e056      	b.n	800a81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a784:	d0e7      	beq.n	800a756 <USB_EPStopXfer+0x82>
 800a786:	e048      	b.n	800a81a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a79c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a0:	d13b      	bne.n	800a81a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	7812      	ldrb	r2, [r2, #0]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	7812      	ldrb	r2, [r2, #0]
 800a7da:	0151      	lsls	r1, r2, #5
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	440a      	add	r2, r1
 800a7e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d902      	bls.n	800a800 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7fe:	e00c      	b.n	800a81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a818:	d0e7      	beq.n	800a7ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a828:	b480      	push	{r7}
 800a82a:	b089      	sub	sp, #36	@ 0x24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	4611      	mov	r1, r2
 800a834:	461a      	mov	r2, r3
 800a836:	460b      	mov	r3, r1
 800a838:	71fb      	strb	r3, [r7, #7]
 800a83a:	4613      	mov	r3, r2
 800a83c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d123      	bne.n	800a896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a84e:	88bb      	ldrh	r3, [r7, #4]
 800a850:	3303      	adds	r3, #3
 800a852:	089b      	lsrs	r3, r3, #2
 800a854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	e018      	b.n	800a88e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	031a      	lsls	r2, r3, #12
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a868:	461a      	mov	r2, r3
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	3301      	adds	r3, #1
 800a874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	3301      	adds	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	3301      	adds	r3, #1
 800a880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	3301      	adds	r3, #1
 800a886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	3301      	adds	r3, #1
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	429a      	cmp	r2, r3
 800a894:	d3e2      	bcc.n	800a85c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3724      	adds	r7, #36	@ 0x24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b08b      	sub	sp, #44	@ 0x2c
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	089b      	lsrs	r3, r3, #2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8c2:	88fb      	ldrh	r3, [r7, #6]
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	623b      	str	r3, [r7, #32]
 800a8ce:	e014      	b.n	800a8fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8da:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8de:	3301      	adds	r3, #1
 800a8e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	623b      	str	r3, [r7, #32]
 800a8fa:	6a3a      	ldr	r2, [r7, #32]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d3e6      	bcc.n	800a8d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a902:	8bfb      	ldrh	r3, [r7, #30]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01e      	beq.n	800a946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a912:	461a      	mov	r2, r3
 800a914:	f107 0310 	add.w	r3, r7, #16
 800a918:	6812      	ldr	r2, [r2, #0]
 800a91a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	6a3b      	ldr	r3, [r7, #32]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	fa22 f303 	lsr.w	r3, r2, r3
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	701a      	strb	r2, [r3, #0]
      i++;
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	3301      	adds	r3, #1
 800a932:	623b      	str	r3, [r7, #32]
      pDest++;
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	3301      	adds	r3, #1
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a93a:	8bfb      	ldrh	r3, [r7, #30]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a940:	8bfb      	ldrh	r3, [r7, #30]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1ea      	bne.n	800a91c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a948:	4618      	mov	r0, r3
 800a94a:	372c      	adds	r7, #44	@ 0x2c
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d12c      	bne.n	800a9ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	db12      	blt.n	800a9a8 <USB_EPSetStall+0x54>
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00f      	beq.n	800a9a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	0151      	lsls	r1, r2, #5
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	440a      	add	r2, r1
 800a99e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a9a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	0151      	lsls	r1, r2, #5
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	440a      	add	r2, r1
 800a9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	e02b      	b.n	800aa22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	db12      	blt.n	800aa02 <USB_EPSetStall+0xae>
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00f      	beq.n	800aa02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	0151      	lsls	r1, r2, #5
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	440a      	add	r2, r1
 800a9f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	0151      	lsls	r1, r2, #5
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	440a      	add	r2, r1
 800aa18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d128      	bne.n	800aa9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	791b      	ldrb	r3, [r3, #4]
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d003      	beq.n	800aa7c <USB_EPClearStall+0x4c>
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	791b      	ldrb	r3, [r3, #4]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d138      	bne.n	800aaee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	e027      	b.n	800aaee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aab8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aabc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	791b      	ldrb	r3, [r3, #4]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d003      	beq.n	800aace <USB_EPClearStall+0x9e>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	791b      	ldrb	r3, [r3, #4]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d10f      	bne.n	800aaee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aaec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ab1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ab30:	68f9      	ldr	r1, [r7, #12]
 800ab32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab36:	4313      	orrs	r3, r2
 800ab38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab76:	f023 0302 	bic.w	r3, r3, #2
 800ab7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aba4:	f023 0303 	bic.w	r3, r3, #3
 800aba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abb8:	f043 0302 	orr.w	r3, r3, #2
 800abbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4013      	ands	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abe4:	68fb      	ldr	r3, [r7, #12]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b085      	sub	sp, #20
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac0e:	69db      	ldr	r3, [r3, #28]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	4013      	ands	r3, r2
 800ac14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	0c1b      	lsrs	r3, r3, #16
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	4013      	ands	r3, r2
 800ac48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	b29b      	uxth	r3, r3
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	4013      	ands	r3, r2
 800ac86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac88:	68bb      	ldr	r3, [r7, #8]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b087      	sub	sp, #28
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	f003 030f 	and.w	r3, r3, #15
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	fa22 f303 	lsr.w	r3, r2, r3
 800acc6:	01db      	lsls	r3, r3, #7
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	4313      	orrs	r3, r2
 800acce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4013      	ands	r3, r2
 800ace2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ace4:	68bb      	ldr	r3, [r7, #8]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	f003 0301 	and.w	r3, r3, #1
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <USB_ActivateSetup+0x44>)
 800ad2e:	4013      	ands	r3, r2
 800ad30:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	fffff800 	.word	0xfffff800

0800ad58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	460b      	mov	r3, r1
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	333c      	adds	r3, #60	@ 0x3c
 800ad6e:	3304      	adds	r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	4a26      	ldr	r2, [pc, #152]	@ (800ae10 <USB_EP0_OutStart+0xb8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d90a      	bls.n	800ad92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad8c:	d101      	bne.n	800ad92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e037      	b.n	800ae02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad98:	461a      	mov	r2, r3
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adc0:	f043 0318 	orr.w	r3, r3, #24
 800adc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800add4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800add8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10f      	bne.n	800ae00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade6:	461a      	mov	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800adfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	4f54300a 	.word	0x4f54300a

0800ae14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3301      	adds	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae2c:	d901      	bls.n	800ae32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e01b      	b.n	800ae6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	daf2      	bge.n	800ae20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f043 0201 	orr.w	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae56:	d901      	bls.n	800ae5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e006      	b.n	800ae6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d0f0      	beq.n	800ae4a <USB_CoreReset+0x36>

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
	...

0800ae78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae88:	f005 fab2 	bl	80103f0 <USBD_static_malloc>
 800ae8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d109      	bne.n	800aea8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32b0      	adds	r2, #176	@ 0xb0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aea4:	2302      	movs	r3, #2
 800aea6:	e0d4      	b.n	800b052 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aea8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aeac:	2100      	movs	r1, #0
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f007 feb7 	bl	8012c22 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32b0      	adds	r2, #176	@ 0xb0
 800aebe:	68f9      	ldr	r1, [r7, #12]
 800aec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	32b0      	adds	r2, #176	@ 0xb0
 800aece:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	7c1b      	ldrb	r3, [r3, #16]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d138      	bne.n	800af52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aee0:	4b5e      	ldr	r3, [pc, #376]	@ (800b05c <USBD_CDC_Init+0x1e4>)
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aee8:	2202      	movs	r2, #2
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f005 f95d 	bl	80101aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aef0:	4b5a      	ldr	r3, [pc, #360]	@ (800b05c <USBD_CDC_Init+0x1e4>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f003 020f 	and.w	r2, r3, #15
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	3324      	adds	r3, #36	@ 0x24
 800af06:	2201      	movs	r2, #1
 800af08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af0a:	4b55      	ldr	r3, [pc, #340]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800af0c:	7819      	ldrb	r1, [r3, #0]
 800af0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af12:	2202      	movs	r2, #2
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f005 f948 	bl	80101aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af1a:	4b51      	ldr	r3, [pc, #324]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	f003 020f 	and.w	r2, r3, #15
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	4613      	mov	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	440b      	add	r3, r1
 800af2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af32:	2201      	movs	r2, #1
 800af34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af36:	4b4b      	ldr	r3, [pc, #300]	@ (800b064 <USBD_CDC_Init+0x1ec>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 020f 	and.w	r2, r3, #15
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	3326      	adds	r3, #38	@ 0x26
 800af4c:	2210      	movs	r2, #16
 800af4e:	801a      	strh	r2, [r3, #0]
 800af50:	e035      	b.n	800afbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af52:	4b42      	ldr	r3, [pc, #264]	@ (800b05c <USBD_CDC_Init+0x1e4>)
 800af54:	7819      	ldrb	r1, [r3, #0]
 800af56:	2340      	movs	r3, #64	@ 0x40
 800af58:	2202      	movs	r2, #2
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f005 f925 	bl	80101aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af60:	4b3e      	ldr	r3, [pc, #248]	@ (800b05c <USBD_CDC_Init+0x1e4>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f003 020f 	and.w	r2, r3, #15
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	440b      	add	r3, r1
 800af74:	3324      	adds	r3, #36	@ 0x24
 800af76:	2201      	movs	r2, #1
 800af78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af7a:	4b39      	ldr	r3, [pc, #228]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800af7c:	7819      	ldrb	r1, [r3, #0]
 800af7e:	2340      	movs	r3, #64	@ 0x40
 800af80:	2202      	movs	r2, #2
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f005 f911 	bl	80101aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af88:	4b35      	ldr	r3, [pc, #212]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afa0:	2201      	movs	r2, #1
 800afa2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800afa4:	4b2f      	ldr	r3, [pc, #188]	@ (800b064 <USBD_CDC_Init+0x1ec>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	3326      	adds	r3, #38	@ 0x26
 800afba:	2210      	movs	r2, #16
 800afbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afbe:	4b29      	ldr	r3, [pc, #164]	@ (800b064 <USBD_CDC_Init+0x1ec>)
 800afc0:	7819      	ldrb	r1, [r3, #0]
 800afc2:	2308      	movs	r3, #8
 800afc4:	2203      	movs	r2, #3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f005 f8ef 	bl	80101aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800afcc:	4b25      	ldr	r3, [pc, #148]	@ (800b064 <USBD_CDC_Init+0x1ec>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	f003 020f 	and.w	r2, r3, #15
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	440b      	add	r3, r1
 800afe0:	3324      	adds	r3, #36	@ 0x24
 800afe2:	2201      	movs	r2, #1
 800afe4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	33b0      	adds	r3, #176	@ 0xb0
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	4413      	add	r3, r2
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b01c:	2302      	movs	r3, #2
 800b01e:	e018      	b.n	800b052 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	7c1b      	ldrb	r3, [r3, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b028:	4b0d      	ldr	r3, [pc, #52]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800b02a:	7819      	ldrb	r1, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f005 f9a6 	bl	8010388 <USBD_LL_PrepareReceive>
 800b03c:	e008      	b.n	800b050 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b03e:	4b08      	ldr	r3, [pc, #32]	@ (800b060 <USBD_CDC_Init+0x1e8>)
 800b040:	7819      	ldrb	r1, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b048:	2340      	movs	r3, #64	@ 0x40
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f005 f99c 	bl	8010388 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	24000097 	.word	0x24000097
 800b060:	24000098 	.word	0x24000098
 800b064:	24000099 	.word	0x24000099

0800b068 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b074:	4b3a      	ldr	r3, [pc, #232]	@ (800b160 <USBD_CDC_DeInit+0xf8>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f005 f8bb 	bl	80101f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b080:	4b37      	ldr	r3, [pc, #220]	@ (800b160 <USBD_CDC_DeInit+0xf8>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3324      	adds	r3, #36	@ 0x24
 800b096:	2200      	movs	r2, #0
 800b098:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b09a:	4b32      	ldr	r3, [pc, #200]	@ (800b164 <USBD_CDC_DeInit+0xfc>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f005 f8a8 	bl	80101f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b0a6:	4b2f      	ldr	r3, [pc, #188]	@ (800b164 <USBD_CDC_DeInit+0xfc>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 020f 	and.w	r2, r3, #15
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0be:	2200      	movs	r2, #0
 800b0c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b0c2:	4b29      	ldr	r3, [pc, #164]	@ (800b168 <USBD_CDC_DeInit+0x100>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f005 f894 	bl	80101f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b0ce:	4b26      	ldr	r3, [pc, #152]	@ (800b168 <USBD_CDC_DeInit+0x100>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 020f 	and.w	r2, r3, #15
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	440b      	add	r3, r1
 800b0e2:	3324      	adds	r3, #36	@ 0x24
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b0e8:	4b1f      	ldr	r3, [pc, #124]	@ (800b168 <USBD_CDC_DeInit+0x100>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	f003 020f 	and.w	r2, r3, #15
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	3326      	adds	r3, #38	@ 0x26
 800b0fe:	2200      	movs	r2, #0
 800b100:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	32b0      	adds	r2, #176	@ 0xb0
 800b10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d01f      	beq.n	800b154 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	33b0      	adds	r3, #176	@ 0xb0
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	32b0      	adds	r2, #176	@ 0xb0
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	4618      	mov	r0, r3
 800b138:	f005 f968 	bl	801040c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	32b0      	adds	r2, #176	@ 0xb0
 800b146:	2100      	movs	r1, #0
 800b148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	24000097 	.word	0x24000097
 800b164:	24000098 	.word	0x24000098
 800b168:	24000099 	.word	0x24000099

0800b16c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	32b0      	adds	r2, #176	@ 0xb0
 800b180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b184:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d101      	bne.n	800b19c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	e0bf      	b.n	800b31c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d050      	beq.n	800b24a <USBD_CDC_Setup+0xde>
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	f040 80af 	bne.w	800b30c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88db      	ldrh	r3, [r3, #6]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d03a      	beq.n	800b22c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	b25b      	sxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da1b      	bge.n	800b1f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	33b0      	adds	r3, #176	@ 0xb0
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b1d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	88d2      	ldrh	r2, [r2, #6]
 800b1dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	88db      	ldrh	r3, [r3, #6]
 800b1e2:	2b07      	cmp	r3, #7
 800b1e4:	bf28      	it	cs
 800b1e6:	2307      	movcs	r3, #7
 800b1e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	89fa      	ldrh	r2, [r7, #14]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f001 fdbd 	bl	800cd70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b1f6:	e090      	b.n	800b31a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	785a      	ldrb	r2, [r3, #1]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	88db      	ldrh	r3, [r3, #6]
 800b206:	2b3f      	cmp	r3, #63	@ 0x3f
 800b208:	d803      	bhi.n	800b212 <USBD_CDC_Setup+0xa6>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	88db      	ldrh	r3, [r3, #6]
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	e000      	b.n	800b214 <USBD_CDC_Setup+0xa8>
 800b212:	2240      	movs	r2, #64	@ 0x40
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b21a:	6939      	ldr	r1, [r7, #16]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b222:	461a      	mov	r2, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 fdcf 	bl	800cdc8 <USBD_CtlPrepareRx>
      break;
 800b22a:	e076      	b.n	800b31a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	33b0      	adds	r3, #176	@ 0xb0
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	7850      	ldrb	r0, [r2, #1]
 800b242:	2200      	movs	r2, #0
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	4798      	blx	r3
      break;
 800b248:	e067      	b.n	800b31a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b0b      	cmp	r3, #11
 800b250:	d851      	bhi.n	800b2f6 <USBD_CDC_Setup+0x18a>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <USBD_CDC_Setup+0xec>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b289 	.word	0x0800b289
 800b25c:	0800b305 	.word	0x0800b305
 800b260:	0800b2f7 	.word	0x0800b2f7
 800b264:	0800b2f7 	.word	0x0800b2f7
 800b268:	0800b2f7 	.word	0x0800b2f7
 800b26c:	0800b2f7 	.word	0x0800b2f7
 800b270:	0800b2f7 	.word	0x0800b2f7
 800b274:	0800b2f7 	.word	0x0800b2f7
 800b278:	0800b2f7 	.word	0x0800b2f7
 800b27c:	0800b2f7 	.word	0x0800b2f7
 800b280:	0800b2b3 	.word	0x0800b2b3
 800b284:	0800b2dd 	.word	0x0800b2dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b03      	cmp	r3, #3
 800b292:	d107      	bne.n	800b2a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b294:	f107 030a 	add.w	r3, r7, #10
 800b298:	2202      	movs	r2, #2
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fd67 	bl	800cd70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2a2:	e032      	b.n	800b30a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fce5 	bl	800cc76 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b0:	e02b      	b.n	800b30a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d107      	bne.n	800b2ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2be:	f107 030d 	add.w	r3, r7, #13
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 fd52 	bl	800cd70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2cc:	e01d      	b.n	800b30a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 fcd0 	bl	800cc76 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2da:	e016      	b.n	800b30a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d00f      	beq.n	800b308 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fcc3 	bl	800cc76 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2f4:	e008      	b.n	800b308 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 fcbc 	bl	800cc76 <USBD_CtlError>
          ret = USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	75fb      	strb	r3, [r7, #23]
          break;
 800b302:	e002      	b.n	800b30a <USBD_CDC_Setup+0x19e>
          break;
 800b304:	bf00      	nop
 800b306:	e008      	b.n	800b31a <USBD_CDC_Setup+0x1ae>
          break;
 800b308:	bf00      	nop
      }
      break;
 800b30a:	e006      	b.n	800b31a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 fcb1 	bl	800cc76 <USBD_CtlError>
      ret = USBD_FAIL;
 800b314:	2303      	movs	r3, #3
 800b316:	75fb      	strb	r3, [r7, #23]
      break;
 800b318:	bf00      	nop
  }

  return (uint8_t)ret;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	32b0      	adds	r2, #176	@ 0xb0
 800b342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e065      	b.n	800b41a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	32b0      	adds	r2, #176	@ 0xb0
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b35e:	78fb      	ldrb	r3, [r7, #3]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	3318      	adds	r3, #24
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d02f      	beq.n	800b3d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	f003 020f 	and.w	r2, r3, #15
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	3318      	adds	r3, #24
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	f003 010f 	and.w	r1, r3, #15
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	460b      	mov	r3, r1
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	440b      	add	r3, r1
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4403      	add	r3, r0
 800b3a0:	331c      	adds	r3, #28
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3a8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d112      	bne.n	800b3d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	f003 020f 	and.w	r2, r3, #15
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	3318      	adds	r3, #24
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3ca:	78f9      	ldrb	r1, [r7, #3]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f004 ffb8 	bl	8010346 <USBD_LL_Transmit>
 800b3d6:	e01f      	b.n	800b418 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	33b0      	adds	r3, #176	@ 0xb0
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4413      	add	r3, r2
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d010      	beq.n	800b418 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	33b0      	adds	r3, #176	@ 0xb0
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b414:	78fa      	ldrb	r2, [r7, #3]
 800b416:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	460b      	mov	r3, r1
 800b42c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	32b0      	adds	r2, #176	@ 0xb0
 800b438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	@ 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	e01a      	b.n	800b48a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f004 ffb6 	bl	80103ca <USBD_LL_GetRxDataSize>
 800b45e:	4602      	mov	r2, r0
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	33b0      	adds	r3, #176	@ 0xb0
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b484:	4611      	mov	r1, r2
 800b486:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	32b0      	adds	r2, #176	@ 0xb0
 800b4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e024      	b.n	800b4fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	33b0      	adds	r3, #176	@ 0xb0
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d019      	beq.n	800b4fc <USBD_CDC_EP0_RxReady+0x6a>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b4ce:	2bff      	cmp	r3, #255	@ 0xff
 800b4d0:	d014      	beq.n	800b4fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	33b0      	adds	r3, #176	@ 0xb0
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b4ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	22ff      	movs	r2, #255	@ 0xff
 800b4f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b510:	2182      	movs	r1, #130	@ 0x82
 800b512:	4818      	ldr	r0, [pc, #96]	@ (800b574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b514:	f000 fd4f 	bl	800bfb6 <USBD_GetEpDesc>
 800b518:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b51a:	2101      	movs	r1, #1
 800b51c:	4815      	ldr	r0, [pc, #84]	@ (800b574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b51e:	f000 fd4a 	bl	800bfb6 <USBD_GetEpDesc>
 800b522:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b524:	2181      	movs	r1, #129	@ 0x81
 800b526:	4813      	ldr	r0, [pc, #76]	@ (800b574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b528:	f000 fd45 	bl	800bfb6 <USBD_GetEpDesc>
 800b52c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2210      	movs	r2, #16
 800b538:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	2200      	movs	r2, #0
 800b544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b548:	711a      	strb	r2, [r3, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d006      	beq.n	800b562 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b55c:	711a      	strb	r2, [r3, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2243      	movs	r2, #67	@ 0x43
 800b566:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b568:	4b02      	ldr	r3, [pc, #8]	@ (800b574 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	24000054 	.word	0x24000054

0800b578 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b580:	2182      	movs	r1, #130	@ 0x82
 800b582:	4818      	ldr	r0, [pc, #96]	@ (800b5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b584:	f000 fd17 	bl	800bfb6 <USBD_GetEpDesc>
 800b588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b58a:	2101      	movs	r1, #1
 800b58c:	4815      	ldr	r0, [pc, #84]	@ (800b5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b58e:	f000 fd12 	bl	800bfb6 <USBD_GetEpDesc>
 800b592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b594:	2181      	movs	r1, #129	@ 0x81
 800b596:	4813      	ldr	r0, [pc, #76]	@ (800b5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b598:	f000 fd0d 	bl	800bfb6 <USBD_GetEpDesc>
 800b59c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2210      	movs	r2, #16
 800b5a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	711a      	strb	r2, [r3, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f042 0202 	orr.w	r2, r2, #2
 800b5bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	711a      	strb	r2, [r3, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f042 0202 	orr.w	r2, r2, #2
 800b5d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2243      	movs	r2, #67	@ 0x43
 800b5d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5d8:	4b02      	ldr	r3, [pc, #8]	@ (800b5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	24000054 	.word	0x24000054

0800b5e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5f0:	2182      	movs	r1, #130	@ 0x82
 800b5f2:	4818      	ldr	r0, [pc, #96]	@ (800b654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5f4:	f000 fcdf 	bl	800bfb6 <USBD_GetEpDesc>
 800b5f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	4815      	ldr	r0, [pc, #84]	@ (800b654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b5fe:	f000 fcda 	bl	800bfb6 <USBD_GetEpDesc>
 800b602:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b604:	2181      	movs	r1, #129	@ 0x81
 800b606:	4813      	ldr	r0, [pc, #76]	@ (800b654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b608:	f000 fcd5 	bl	800bfb6 <USBD_GetEpDesc>
 800b60c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2210      	movs	r2, #16
 800b618:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d006      	beq.n	800b62e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2200      	movs	r2, #0
 800b624:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b628:	711a      	strb	r2, [r3, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b63c:	711a      	strb	r2, [r3, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2243      	movs	r2, #67	@ 0x43
 800b646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b648:	4b02      	ldr	r3, [pc, #8]	@ (800b654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	24000054 	.word	0x24000054

0800b658 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	220a      	movs	r2, #10
 800b664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b666:	4b03      	ldr	r3, [pc, #12]	@ (800b674 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	24000010 	.word	0x24000010

0800b678 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b688:	2303      	movs	r3, #3
 800b68a:	e009      	b.n	800b6a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	33b0      	adds	r3, #176	@ 0xb0
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	32b0      	adds	r2, #176	@ 0xb0
 800b6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e008      	b.n	800b6e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	32b0      	adds	r2, #176	@ 0xb0
 800b704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b708:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	e004      	b.n	800b71e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
	...

0800b72c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	32b0      	adds	r2, #176	@ 0xb0
 800b73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b742:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b744:	2301      	movs	r3, #1
 800b746:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b74e:	2303      	movs	r3, #3
 800b750:	e025      	b.n	800b79e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d11f      	bne.n	800b79c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2201      	movs	r2, #1
 800b760:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b764:	4b10      	ldr	r3, [pc, #64]	@ (800b7a8 <USBD_CDC_TransmitPacket+0x7c>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	f003 020f 	and.w	r2, r3, #15
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4403      	add	r3, r0
 800b77e:	3318      	adds	r3, #24
 800b780:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b782:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <USBD_CDC_TransmitPacket+0x7c>)
 800b784:	7819      	ldrb	r1, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f004 fdd7 	bl	8010346 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	24000097 	.word	0x24000097

0800b7ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32b0      	adds	r2, #176	@ 0xb0
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32b0      	adds	r2, #176	@ 0xb0
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e018      	b.n	800b80c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7c1b      	ldrb	r3, [r3, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10a      	bne.n	800b7f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b814 <USBD_CDC_ReceivePacket+0x68>)
 800b7e4:	7819      	ldrb	r1, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f004 fdc9 	bl	8010388 <USBD_LL_PrepareReceive>
 800b7f6:	e008      	b.n	800b80a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7f8:	4b06      	ldr	r3, [pc, #24]	@ (800b814 <USBD_CDC_ReceivePacket+0x68>)
 800b7fa:	7819      	ldrb	r1, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b802:	2340      	movs	r3, #64	@ 0x40
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f004 fdbf 	bl	8010388 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	24000098 	.word	0x24000098

0800b818 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e01f      	b.n	800b870 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	79fa      	ldrb	r2, [r7, #7]
 800b862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f004 fc35 	bl	80100d4 <USBD_LL_Init>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e025      	b.n	800b8dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	@ 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00f      	beq.n	800b8cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	32ae      	adds	r2, #174	@ 0xae
 800b8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8bc:	f107 020e 	add.w	r2, r7, #14
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f004 fc41 	bl	8010174 <USBD_LL_Start>
 800b8f2:	4603      	mov	r3, r0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b904:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b906:	4618      	mov	r0, r3
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d009      	beq.n	800b940 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	78fa      	ldrb	r2, [r7, #3]
 800b936:	4611      	mov	r1, r2
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	4798      	blx	r3
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b956:	2300      	movs	r3, #0
 800b958:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	78fa      	ldrb	r2, [r7, #3]
 800b964:	4611      	mov	r1, r2
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	4798      	blx	r3
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b970:	2303      	movs	r3, #3
 800b972:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b974:	7bfb      	ldrb	r3, [r7, #15]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f001 f936 	bl	800cc02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9b2:	f003 031f 	and.w	r3, r3, #31
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d01a      	beq.n	800b9f0 <USBD_LL_SetupStage+0x72>
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d822      	bhi.n	800ba04 <USBD_LL_SetupStage+0x86>
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <USBD_LL_SetupStage+0x4a>
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d00a      	beq.n	800b9dc <USBD_LL_SetupStage+0x5e>
 800b9c6:	e01d      	b.n	800ba04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fb63 	bl	800c09c <USBD_StdDevReq>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9da:	e020      	b.n	800ba1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fbcb 	bl	800c180 <USBD_StdItfReq>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ee:	e016      	b.n	800ba1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fc2d 	bl	800c258 <USBD_StdEPReq>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73fb      	strb	r3, [r7, #15]
      break;
 800ba02:	e00c      	b.n	800ba1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f004 fc0e 	bl	8010234 <USBD_LL_StallEP>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1c:	bf00      	nop
  }

  return ret;
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	460b      	mov	r3, r1
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba3a:	7afb      	ldrb	r3, [r7, #11]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d16e      	bne.n	800bb1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	f040 8098 	bne.w	800bb84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d913      	bls.n	800ba88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	689a      	ldr	r2, [r3, #8]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	1ad2      	subs	r2, r2, r3
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	68da      	ldr	r2, [r3, #12]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	4293      	cmp	r3, r2
 800ba78:	bf28      	it	cs
 800ba7a:	4613      	movcs	r3, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	6879      	ldr	r1, [r7, #4]
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f001 f9be 	bl	800ce02 <USBD_CtlContinueRx>
 800ba86:	e07d      	b.n	800bb84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba8e:	f003 031f 	and.w	r3, r3, #31
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d014      	beq.n	800bac0 <USBD_LL_DataOutStage+0x98>
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d81d      	bhi.n	800bad6 <USBD_LL_DataOutStage+0xae>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <USBD_LL_DataOutStage+0x7c>
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d003      	beq.n	800baaa <USBD_LL_DataOutStage+0x82>
 800baa2:	e018      	b.n	800bad6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800baa4:	2300      	movs	r3, #0
 800baa6:	75bb      	strb	r3, [r7, #22]
            break;
 800baa8:	e018      	b.n	800badc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fa64 	bl	800bf82 <USBD_CoreFindIF>
 800baba:	4603      	mov	r3, r0
 800babc:	75bb      	strb	r3, [r7, #22]
            break;
 800babe:	e00d      	b.n	800badc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	4619      	mov	r1, r3
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f000 fa66 	bl	800bf9c <USBD_CoreFindEP>
 800bad0:	4603      	mov	r3, r0
 800bad2:	75bb      	strb	r3, [r7, #22]
            break;
 800bad4:	e002      	b.n	800badc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	75bb      	strb	r3, [r7, #22]
            break;
 800bada:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800badc:	7dbb      	ldrb	r3, [r7, #22]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d119      	bne.n	800bb16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d113      	bne.n	800bb16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800baee:	7dba      	ldrb	r2, [r7, #22]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	32ae      	adds	r2, #174	@ 0xae
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00b      	beq.n	800bb16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bafe:	7dba      	ldrb	r2, [r7, #22]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb06:	7dba      	ldrb	r2, [r7, #22]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	32ae      	adds	r2, #174	@ 0xae
 800bb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 f984 	bl	800ce24 <USBD_CtlSendStatus>
 800bb1c:	e032      	b.n	800bb84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb1e:	7afb      	ldrb	r3, [r7, #11]
 800bb20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	4619      	mov	r1, r3
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f000 fa37 	bl	800bf9c <USBD_CoreFindEP>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb32:	7dbb      	ldrb	r3, [r7, #22]
 800bb34:	2bff      	cmp	r3, #255	@ 0xff
 800bb36:	d025      	beq.n	800bb84 <USBD_LL_DataOutStage+0x15c>
 800bb38:	7dbb      	ldrb	r3, [r7, #22]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d122      	bne.n	800bb84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d117      	bne.n	800bb7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb4a:	7dba      	ldrb	r2, [r7, #22]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	32ae      	adds	r2, #174	@ 0xae
 800bb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00f      	beq.n	800bb7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb5a:	7dba      	ldrb	r2, [r7, #22]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb62:	7dba      	ldrb	r2, [r7, #22]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	32ae      	adds	r2, #174	@ 0xae
 800bb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	7afa      	ldrb	r2, [r7, #11]
 800bb70:	4611      	mov	r1, r2
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	4798      	blx	r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	e000      	b.n	800bb86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	60f8      	str	r0, [r7, #12]
 800bb96:	460b      	mov	r3, r1
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d16f      	bne.n	800bc82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3314      	adds	r3, #20
 800bba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d15a      	bne.n	800bc68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	689a      	ldr	r2, [r3, #8]
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d914      	bls.n	800bbe8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	689a      	ldr	r2, [r3, #8]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	1ad2      	subs	r2, r2, r3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f001 f8e6 	bl	800cda6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbda:	2300      	movs	r3, #0
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f004 fbd1 	bl	8010388 <USBD_LL_PrepareReceive>
 800bbe6:	e03f      	b.n	800bc68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d11c      	bne.n	800bc2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d316      	bcc.n	800bc2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d20f      	bcs.n	800bc2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2100      	movs	r1, #0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f001 f8c7 	bl	800cda6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc20:	2300      	movs	r3, #0
 800bc22:	2200      	movs	r2, #0
 800bc24:	2100      	movs	r1, #0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f004 fbae 	bl	8010388 <USBD_LL_PrepareReceive>
 800bc2c:	e01c      	b.n	800bc68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d10f      	bne.n	800bc5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f004 fae9 	bl	8010234 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f001 f8f1 	bl	800ce4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d03a      	beq.n	800bce8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fe42 	bl	800b8fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bc80:	e032      	b.n	800bce8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f985 	bl	800bf9c <USBD_CoreFindEP>
 800bc92:	4603      	mov	r3, r0
 800bc94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	2bff      	cmp	r3, #255	@ 0xff
 800bc9a:	d025      	beq.n	800bce8 <USBD_LL_DataInStage+0x15a>
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d122      	bne.n	800bce8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d11c      	bne.n	800bce8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcae:	7dfa      	ldrb	r2, [r7, #23]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	32ae      	adds	r2, #174	@ 0xae
 800bcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d014      	beq.n	800bce8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bcbe:	7dfa      	ldrb	r2, [r7, #23]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bcc6:	7dfa      	ldrb	r2, [r7, #23]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	32ae      	adds	r2, #174	@ 0xae
 800bccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	7afa      	ldrb	r2, [r7, #11]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	4798      	blx	r3
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	e000      	b.n	800bcea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d014      	beq.n	800bd58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6852      	ldr	r2, [r2, #4]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	4611      	mov	r1, r2
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd58:	2340      	movs	r3, #64	@ 0x40
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f004 fa23 	bl	80101aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2240      	movs	r2, #64	@ 0x40
 800bd70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd74:	2340      	movs	r3, #64	@ 0x40
 800bd76:	2200      	movs	r2, #0
 800bd78:	2180      	movs	r1, #128	@ 0x80
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f004 fa15 	bl	80101aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2240      	movs	r2, #64	@ 0x40
 800bd8a:	621a      	str	r2, [r3, #32]

  return ret;
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	78fa      	ldrb	r2, [r7, #3]
 800bda6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b083      	sub	sp, #12
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b04      	cmp	r3, #4
 800bdc8:	d006      	beq.n	800bdd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2204      	movs	r2, #4
 800bddc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d106      	bne.n	800be10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b082      	sub	sp, #8
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d110      	bne.n	800be54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d005      	beq.n	800be54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4e:	69db      	ldr	r3, [r3, #28]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	32ae      	adds	r2, #174	@ 0xae
 800be74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be7c:	2303      	movs	r3, #3
 800be7e:	e01c      	b.n	800beba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d115      	bne.n	800beb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32ae      	adds	r2, #174	@ 0xae
 800be96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9a:	6a1b      	ldr	r3, [r3, #32]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00b      	beq.n	800beb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	32ae      	adds	r2, #174	@ 0xae
 800beaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	78fa      	ldrb	r2, [r7, #3]
 800beb2:	4611      	mov	r1, r2
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	460b      	mov	r3, r1
 800becc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	32ae      	adds	r2, #174	@ 0xae
 800bed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e01c      	b.n	800bf1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b03      	cmp	r3, #3
 800beee:	d115      	bne.n	800bf1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	32ae      	adds	r2, #174	@ 0xae
 800befa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800befe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	32ae      	adds	r2, #174	@ 0xae
 800bf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf14:	78fa      	ldrb	r2, [r7, #3]
 800bf16:	4611      	mov	r1, r2
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00e      	beq.n	800bf78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6852      	ldr	r2, [r2, #4]
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	4611      	mov	r1, r2
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf74:	2303      	movs	r3, #3
 800bf76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bf8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b086      	sub	sp, #24
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	885b      	ldrh	r3, [r3, #2]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d91f      	bls.n	800c01c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bfe2:	e013      	b.n	800c00c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bfe4:	f107 030a 	add.w	r3, r7, #10
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6978      	ldr	r0, [r7, #20]
 800bfec:	f000 f81b 	bl	800c026 <USBD_GetNextDesc>
 800bff0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b05      	cmp	r3, #5
 800bff8:	d108      	bne.n	800c00c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	789b      	ldrb	r3, [r3, #2]
 800c002:	78fa      	ldrb	r2, [r7, #3]
 800c004:	429a      	cmp	r2, r3
 800c006:	d008      	beq.n	800c01a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	885b      	ldrh	r3, [r3, #2]
 800c010:	b29a      	uxth	r2, r3
 800c012:	897b      	ldrh	r3, [r7, #10]
 800c014:	429a      	cmp	r2, r3
 800c016:	d8e5      	bhi.n	800bfe4 <USBD_GetEpDesc+0x2e>
 800c018:	e000      	b.n	800c01c <USBD_GetEpDesc+0x66>
          break;
 800c01a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c01c:	693b      	ldr	r3, [r7, #16]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3718      	adds	r7, #24
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c026:	b480      	push	{r7}
 800c028:	b085      	sub	sp, #20
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	881b      	ldrh	r3, [r3, #0]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	4413      	add	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c050:	68fb      	ldr	r3, [r7, #12]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c05e:	b480      	push	{r7}
 800c060:	b087      	sub	sp, #28
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	3301      	adds	r3, #1
 800c074:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c07c:	8a3b      	ldrh	r3, [r7, #16]
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b21a      	sxth	r2, r3
 800c082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c086:	4313      	orrs	r3, r2
 800c088:	b21b      	sxth	r3, r3
 800c08a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c08c:	89fb      	ldrh	r3, [r7, #14]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0b2:	2b40      	cmp	r3, #64	@ 0x40
 800c0b4:	d005      	beq.n	800c0c2 <USBD_StdDevReq+0x26>
 800c0b6:	2b40      	cmp	r3, #64	@ 0x40
 800c0b8:	d857      	bhi.n	800c16a <USBD_StdDevReq+0xce>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00f      	beq.n	800c0de <USBD_StdDevReq+0x42>
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d153      	bne.n	800c16a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	32ae      	adds	r2, #174	@ 0xae
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	4798      	blx	r3
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	e04a      	b.n	800c174 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	785b      	ldrb	r3, [r3, #1]
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	d83b      	bhi.n	800c15e <USBD_StdDevReq+0xc2>
 800c0e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0ec <USBD_StdDevReq+0x50>)
 800c0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ec:	0800c141 	.word	0x0800c141
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c15f 	.word	0x0800c15f
 800c0f8:	0800c14b 	.word	0x0800c14b
 800c0fc:	0800c15f 	.word	0x0800c15f
 800c100:	0800c11f 	.word	0x0800c11f
 800c104:	0800c115 	.word	0x0800c115
 800c108:	0800c15f 	.word	0x0800c15f
 800c10c:	0800c137 	.word	0x0800c137
 800c110:	0800c129 	.word	0x0800c129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fa3c 	bl	800c594 <USBD_GetDescriptor>
          break;
 800c11c:	e024      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fbcb 	bl	800c8bc <USBD_SetAddress>
          break;
 800c126:	e01f      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fc0a 	bl	800c944 <USBD_SetConfig>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
          break;
 800c134:	e018      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fcad 	bl	800ca98 <USBD_GetConfig>
          break;
 800c13e:	e013      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fcde 	bl	800cb04 <USBD_GetStatus>
          break;
 800c148:	e00e      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fd0d 	bl	800cb6c <USBD_SetFeature>
          break;
 800c152:	e009      	b.n	800c168 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 fd31 	bl	800cbbe <USBD_ClrFeature>
          break;
 800c15c:	e004      	b.n	800c168 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fd88 	bl	800cc76 <USBD_CtlError>
          break;
 800c166:	bf00      	nop
      }
      break;
 800c168:	e004      	b.n	800c174 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fd82 	bl	800cc76 <USBD_CtlError>
      break;
 800c172:	bf00      	nop
  }

  return ret;
 800c174:	7bfb      	ldrb	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop

0800c180 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c196:	2b40      	cmp	r3, #64	@ 0x40
 800c198:	d005      	beq.n	800c1a6 <USBD_StdItfReq+0x26>
 800c19a:	2b40      	cmp	r3, #64	@ 0x40
 800c19c:	d852      	bhi.n	800c244 <USBD_StdItfReq+0xc4>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <USBD_StdItfReq+0x26>
 800c1a2:	2b20      	cmp	r3, #32
 800c1a4:	d14e      	bne.n	800c244 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d840      	bhi.n	800c236 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	889b      	ldrh	r3, [r3, #4]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d836      	bhi.n	800c22c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	889b      	ldrh	r3, [r3, #4]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fedb 	bl	800bf82 <USBD_CoreFindIF>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2bff      	cmp	r3, #255	@ 0xff
 800c1d4:	d01d      	beq.n	800c212 <USBD_StdItfReq+0x92>
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d11a      	bne.n	800c212 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1dc:	7bba      	ldrb	r2, [r7, #14]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	32ae      	adds	r2, #174	@ 0xae
 800c1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00f      	beq.n	800c20c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c1ec:	7bba      	ldrb	r2, [r7, #14]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1f4:	7bba      	ldrb	r2, [r7, #14]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	32ae      	adds	r2, #174	@ 0xae
 800c1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	4798      	blx	r3
 800c206:	4603      	mov	r3, r0
 800c208:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c20a:	e004      	b.n	800c216 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c210:	e001      	b.n	800c216 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	88db      	ldrh	r3, [r3, #6]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d110      	bne.n	800c240 <USBD_StdItfReq+0xc0>
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10d      	bne.n	800c240 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fdfd 	bl	800ce24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c22a:	e009      	b.n	800c240 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fd21 	bl	800cc76 <USBD_CtlError>
          break;
 800c234:	e004      	b.n	800c240 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fd1c 	bl	800cc76 <USBD_CtlError>
          break;
 800c23e:	e000      	b.n	800c242 <USBD_StdItfReq+0xc2>
          break;
 800c240:	bf00      	nop
      }
      break;
 800c242:	e004      	b.n	800c24e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fd15 	bl	800cc76 <USBD_CtlError>
      break;
 800c24c:	bf00      	nop
  }

  return ret;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	889b      	ldrh	r3, [r3, #4]
 800c26a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c274:	2b40      	cmp	r3, #64	@ 0x40
 800c276:	d007      	beq.n	800c288 <USBD_StdEPReq+0x30>
 800c278:	2b40      	cmp	r3, #64	@ 0x40
 800c27a:	f200 817f 	bhi.w	800c57c <USBD_StdEPReq+0x324>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d02a      	beq.n	800c2d8 <USBD_StdEPReq+0x80>
 800c282:	2b20      	cmp	r3, #32
 800c284:	f040 817a 	bne.w	800c57c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff fe85 	bl	800bf9c <USBD_CoreFindEP>
 800c292:	4603      	mov	r3, r0
 800c294:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c296:	7b7b      	ldrb	r3, [r7, #13]
 800c298:	2bff      	cmp	r3, #255	@ 0xff
 800c29a:	f000 8174 	beq.w	800c586 <USBD_StdEPReq+0x32e>
 800c29e:	7b7b      	ldrb	r3, [r7, #13]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8170 	bne.w	800c586 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2a6:	7b7a      	ldrb	r2, [r7, #13]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2ae:	7b7a      	ldrb	r2, [r7, #13]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	32ae      	adds	r2, #174	@ 0xae
 800c2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8163 	beq.w	800c586 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2c0:	7b7a      	ldrb	r2, [r7, #13]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	32ae      	adds	r2, #174	@ 0xae
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2d6:	e156      	b.n	800c586 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	785b      	ldrb	r3, [r3, #1]
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d008      	beq.n	800c2f2 <USBD_StdEPReq+0x9a>
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	f300 8145 	bgt.w	800c570 <USBD_StdEPReq+0x318>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f000 809b 	beq.w	800c422 <USBD_StdEPReq+0x1ca>
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d03c      	beq.n	800c36a <USBD_StdEPReq+0x112>
 800c2f0:	e13e      	b.n	800c570 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d002      	beq.n	800c304 <USBD_StdEPReq+0xac>
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d016      	beq.n	800c330 <USBD_StdEPReq+0xd8>
 800c302:	e02c      	b.n	800c35e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00d      	beq.n	800c326 <USBD_StdEPReq+0xce>
 800c30a:	7bbb      	ldrb	r3, [r7, #14]
 800c30c:	2b80      	cmp	r3, #128	@ 0x80
 800c30e:	d00a      	beq.n	800c326 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f003 ff8d 	bl	8010234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c31a:	2180      	movs	r1, #128	@ 0x80
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f003 ff89 	bl	8010234 <USBD_LL_StallEP>
 800c322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c324:	e020      	b.n	800c368 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c326:	6839      	ldr	r1, [r7, #0]
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fca4 	bl	800cc76 <USBD_CtlError>
              break;
 800c32e:	e01b      	b.n	800c368 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	885b      	ldrh	r3, [r3, #2]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10e      	bne.n	800c356 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00b      	beq.n	800c356 <USBD_StdEPReq+0xfe>
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b80      	cmp	r3, #128	@ 0x80
 800c342:	d008      	beq.n	800c356 <USBD_StdEPReq+0xfe>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	88db      	ldrh	r3, [r3, #6]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f003 ff6f 	bl	8010234 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fd64 	bl	800ce24 <USBD_CtlSendStatus>

              break;
 800c35c:	e004      	b.n	800c368 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fc88 	bl	800cc76 <USBD_CtlError>
              break;
 800c366:	bf00      	nop
          }
          break;
 800c368:	e107      	b.n	800c57a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b02      	cmp	r3, #2
 800c374:	d002      	beq.n	800c37c <USBD_StdEPReq+0x124>
 800c376:	2b03      	cmp	r3, #3
 800c378:	d016      	beq.n	800c3a8 <USBD_StdEPReq+0x150>
 800c37a:	e04b      	b.n	800c414 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00d      	beq.n	800c39e <USBD_StdEPReq+0x146>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b80      	cmp	r3, #128	@ 0x80
 800c386:	d00a      	beq.n	800c39e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c388:	7bbb      	ldrb	r3, [r7, #14]
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f003 ff51 	bl	8010234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c392:	2180      	movs	r1, #128	@ 0x80
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f003 ff4d 	bl	8010234 <USBD_LL_StallEP>
 800c39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c39c:	e040      	b.n	800c420 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc68 	bl	800cc76 <USBD_CtlError>
              break;
 800c3a6:	e03b      	b.n	800c420 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	885b      	ldrh	r3, [r3, #2]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d136      	bne.n	800c41e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d004      	beq.n	800c3c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f003 ff57 	bl	8010272 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fd2d 	bl	800ce24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fde4 	bl	800bf9c <USBD_CoreFindEP>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3d8:	7b7b      	ldrb	r3, [r7, #13]
 800c3da:	2bff      	cmp	r3, #255	@ 0xff
 800c3dc:	d01f      	beq.n	800c41e <USBD_StdEPReq+0x1c6>
 800c3de:	7b7b      	ldrb	r3, [r7, #13]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d11c      	bne.n	800c41e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c3e4:	7b7a      	ldrb	r2, [r7, #13]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c3ec:	7b7a      	ldrb	r2, [r7, #13]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	32ae      	adds	r2, #174	@ 0xae
 800c3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d010      	beq.n	800c41e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3fc:	7b7a      	ldrb	r2, [r7, #13]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	32ae      	adds	r2, #174	@ 0xae
 800c402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
 800c40e:	4603      	mov	r3, r0
 800c410:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c412:	e004      	b.n	800c41e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fc2d 	bl	800cc76 <USBD_CtlError>
              break;
 800c41c:	e000      	b.n	800c420 <USBD_StdEPReq+0x1c8>
              break;
 800c41e:	bf00      	nop
          }
          break;
 800c420:	e0ab      	b.n	800c57a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d002      	beq.n	800c434 <USBD_StdEPReq+0x1dc>
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d032      	beq.n	800c498 <USBD_StdEPReq+0x240>
 800c432:	e097      	b.n	800c564 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <USBD_StdEPReq+0x1f2>
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	2b80      	cmp	r3, #128	@ 0x80
 800c43e:	d004      	beq.n	800c44a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fc17 	bl	800cc76 <USBD_CtlError>
                break;
 800c448:	e091      	b.n	800c56e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da0b      	bge.n	800c46a <USBD_StdEPReq+0x212>
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	3310      	adds	r3, #16
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	4413      	add	r3, r2
 800c466:	3304      	adds	r3, #4
 800c468:	e00b      	b.n	800c482 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c46a:	7bbb      	ldrb	r3, [r7, #14]
 800c46c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c470:	4613      	mov	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	4413      	add	r3, r2
 800c480:	3304      	adds	r3, #4
 800c482:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2200      	movs	r2, #0
 800c488:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2202      	movs	r2, #2
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fc6d 	bl	800cd70 <USBD_CtlSendData>
              break;
 800c496:	e06a      	b.n	800c56e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	da11      	bge.n	800c4c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	f003 020f 	and.w	r2, r3, #15
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	440b      	add	r3, r1
 800c4b2:	3324      	adds	r3, #36	@ 0x24
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d117      	bne.n	800c4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fbda 	bl	800cc76 <USBD_CtlError>
                  break;
 800c4c2:	e054      	b.n	800c56e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	f003 020f 	and.w	r2, r3, #15
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	440b      	add	r3, r1
 800c4d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d104      	bne.n	800c4ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fbc7 	bl	800cc76 <USBD_CtlError>
                  break;
 800c4e8:	e041      	b.n	800c56e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da0b      	bge.n	800c50a <USBD_StdEPReq+0x2b2>
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	3310      	adds	r3, #16
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	4413      	add	r3, r2
 800c506:	3304      	adds	r3, #4
 800c508:	e00b      	b.n	800c522 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	4413      	add	r3, r2
 800c520:	3304      	adds	r3, #4
 800c522:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c524:	7bbb      	ldrb	r3, [r7, #14]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <USBD_StdEPReq+0x2d8>
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	2b80      	cmp	r3, #128	@ 0x80
 800c52e:	d103      	bne.n	800c538 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	e00e      	b.n	800c556 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f003 feb7 	bl	80102b0 <USBD_LL_IsStallEP>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2201      	movs	r2, #1
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	e002      	b.n	800c556 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2202      	movs	r2, #2
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fc07 	bl	800cd70 <USBD_CtlSendData>
              break;
 800c562:	e004      	b.n	800c56e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fb85 	bl	800cc76 <USBD_CtlError>
              break;
 800c56c:	bf00      	nop
          }
          break;
 800c56e:	e004      	b.n	800c57a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fb7f 	bl	800cc76 <USBD_CtlError>
          break;
 800c578:	bf00      	nop
      }
      break;
 800c57a:	e005      	b.n	800c588 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fb79 	bl	800cc76 <USBD_CtlError>
      break;
 800c584:	e000      	b.n	800c588 <USBD_StdEPReq+0x330>
      break;
 800c586:	bf00      	nop
  }

  return ret;
 800c588:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
	...

0800c594 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	885b      	ldrh	r3, [r3, #2]
 800c5ae:	0a1b      	lsrs	r3, r3, #8
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	2b0e      	cmp	r3, #14
 800c5b6:	f200 8152 	bhi.w	800c85e <USBD_GetDescriptor+0x2ca>
 800c5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c0 <USBD_GetDescriptor+0x2c>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c631 	.word	0x0800c631
 800c5c4:	0800c649 	.word	0x0800c649
 800c5c8:	0800c689 	.word	0x0800c689
 800c5cc:	0800c85f 	.word	0x0800c85f
 800c5d0:	0800c85f 	.word	0x0800c85f
 800c5d4:	0800c7ff 	.word	0x0800c7ff
 800c5d8:	0800c82b 	.word	0x0800c82b
 800c5dc:	0800c85f 	.word	0x0800c85f
 800c5e0:	0800c85f 	.word	0x0800c85f
 800c5e4:	0800c85f 	.word	0x0800c85f
 800c5e8:	0800c85f 	.word	0x0800c85f
 800c5ec:	0800c85f 	.word	0x0800c85f
 800c5f0:	0800c85f 	.word	0x0800c85f
 800c5f4:	0800c85f 	.word	0x0800c85f
 800c5f8:	0800c5fd 	.word	0x0800c5fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	7c12      	ldrb	r2, [r2, #16]
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c61e:	e126      	b.n	800c86e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fb27 	bl	800cc76 <USBD_CtlError>
        err++;
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	3301      	adds	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
      break;
 800c62e:	e11e      	b.n	800c86e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
      break;
 800c646:	e112      	b.n	800c86e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7c1b      	ldrb	r3, [r3, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10d      	bne.n	800c66c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	f107 0208 	add.w	r2, r7, #8
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3301      	adds	r3, #1
 800c666:	2202      	movs	r2, #2
 800c668:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c66a:	e100      	b.n	800c86e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c674:	f107 0208 	add.w	r2, r7, #8
 800c678:	4610      	mov	r0, r2
 800c67a:	4798      	blx	r3
 800c67c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3301      	adds	r3, #1
 800c682:	2202      	movs	r2, #2
 800c684:	701a      	strb	r2, [r3, #0]
      break;
 800c686:	e0f2      	b.n	800c86e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	885b      	ldrh	r3, [r3, #2]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b05      	cmp	r3, #5
 800c690:	f200 80ac 	bhi.w	800c7ec <USBD_GetDescriptor+0x258>
 800c694:	a201      	add	r2, pc, #4	@ (adr r2, 800c69c <USBD_GetDescriptor+0x108>)
 800c696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69a:	bf00      	nop
 800c69c:	0800c6b5 	.word	0x0800c6b5
 800c6a0:	0800c6e9 	.word	0x0800c6e9
 800c6a4:	0800c71d 	.word	0x0800c71d
 800c6a8:	0800c751 	.word	0x0800c751
 800c6ac:	0800c785 	.word	0x0800c785
 800c6b0:	0800c7b9 	.word	0x0800c7b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	7c12      	ldrb	r2, [r2, #16]
 800c6cc:	f107 0108 	add.w	r1, r7, #8
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4798      	blx	r3
 800c6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d6:	e091      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 facb 	bl	800cc76 <USBD_CtlError>
            err++;
 800c6e0:	7afb      	ldrb	r3, [r7, #11]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e6:	e089      	b.n	800c7fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	7c12      	ldrb	r2, [r2, #16]
 800c700:	f107 0108 	add.w	r1, r7, #8
 800c704:	4610      	mov	r0, r2
 800c706:	4798      	blx	r3
 800c708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70a:	e077      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fab1 	bl	800cc76 <USBD_CtlError>
            err++;
 800c714:	7afb      	ldrb	r3, [r7, #11]
 800c716:	3301      	adds	r3, #1
 800c718:	72fb      	strb	r3, [r7, #11]
          break;
 800c71a:	e06f      	b.n	800c7fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00b      	beq.n	800c740 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	7c12      	ldrb	r2, [r2, #16]
 800c734:	f107 0108 	add.w	r1, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c73e:	e05d      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa97 	bl	800cc76 <USBD_CtlError>
            err++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
          break;
 800c74e:	e055      	b.n	800c7fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	7c12      	ldrb	r2, [r2, #16]
 800c768:	f107 0108 	add.w	r1, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
 800c770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c772:	e043      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa7d 	bl	800cc76 <USBD_CtlError>
            err++;
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	3301      	adds	r3, #1
 800c780:	72fb      	strb	r3, [r7, #11]
          break;
 800c782:	e03b      	b.n	800c7fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e029      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa63 	bl	800cc76 <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e021      	b.n	800c7fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 0108 	add.w	r1, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7da:	e00f      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 fa49 	bl	800cc76 <USBD_CtlError>
            err++;
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7ea:	e007      	b.n	800c7fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa41 	bl	800cc76 <USBD_CtlError>
          err++;
 800c7f4:	7afb      	ldrb	r3, [r7, #11]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7fa:	bf00      	nop
      }
      break;
 800c7fc:	e037      	b.n	800c86e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	7c1b      	ldrb	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c80e:	f107 0208 	add.w	r2, r7, #8
 800c812:	4610      	mov	r0, r2
 800c814:	4798      	blx	r3
 800c816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c818:	e029      	b.n	800c86e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fa2a 	bl	800cc76 <USBD_CtlError>
        err++;
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	3301      	adds	r3, #1
 800c826:	72fb      	strb	r3, [r7, #11]
      break;
 800c828:	e021      	b.n	800c86e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7c1b      	ldrb	r3, [r3, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10d      	bne.n	800c84e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c83a:	f107 0208 	add.w	r2, r7, #8
 800c83e:	4610      	mov	r0, r2
 800c840:	4798      	blx	r3
 800c842:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3301      	adds	r3, #1
 800c848:	2207      	movs	r2, #7
 800c84a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c84c:	e00f      	b.n	800c86e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fa10 	bl	800cc76 <USBD_CtlError>
        err++;
 800c856:	7afb      	ldrb	r3, [r7, #11]
 800c858:	3301      	adds	r3, #1
 800c85a:	72fb      	strb	r3, [r7, #11]
      break;
 800c85c:	e007      	b.n	800c86e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fa08 	bl	800cc76 <USBD_CtlError>
      err++;
 800c866:	7afb      	ldrb	r3, [r7, #11]
 800c868:	3301      	adds	r3, #1
 800c86a:	72fb      	strb	r3, [r7, #11]
      break;
 800c86c:	bf00      	nop
  }

  if (err != 0U)
 800c86e:	7afb      	ldrb	r3, [r7, #11]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11e      	bne.n	800c8b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	88db      	ldrh	r3, [r3, #6]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d016      	beq.n	800c8aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c87c:	893b      	ldrh	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00e      	beq.n	800c8a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	88da      	ldrh	r2, [r3, #6]
 800c886:	893b      	ldrh	r3, [r7, #8]
 800c888:	4293      	cmp	r3, r2
 800c88a:	bf28      	it	cs
 800c88c:	4613      	movcs	r3, r2
 800c88e:	b29b      	uxth	r3, r3
 800c890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c892:	893b      	ldrh	r3, [r7, #8]
 800c894:	461a      	mov	r2, r3
 800c896:	68f9      	ldr	r1, [r7, #12]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fa69 	bl	800cd70 <USBD_CtlSendData>
 800c89e:	e009      	b.n	800c8b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f9e7 	bl	800cc76 <USBD_CtlError>
 800c8a8:	e004      	b.n	800c8b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 faba 	bl	800ce24 <USBD_CtlSendStatus>
 800c8b0:	e000      	b.n	800c8b4 <USBD_GetDescriptor+0x320>
    return;
 800c8b2:	bf00      	nop
  }
}
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop

0800c8bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	889b      	ldrh	r3, [r3, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d131      	bne.n	800c932 <USBD_SetAddress+0x76>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	88db      	ldrh	r3, [r3, #6]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d12d      	bne.n	800c932 <USBD_SetAddress+0x76>
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	885b      	ldrh	r3, [r3, #2]
 800c8da:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8dc:	d829      	bhi.n	800c932 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	885b      	ldrh	r3, [r3, #2]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b03      	cmp	r3, #3
 800c8f4:	d104      	bne.n	800c900 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f9bc 	bl	800cc76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fe:	e01d      	b.n	800c93c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7bfa      	ldrb	r2, [r7, #15]
 800c904:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f003 fcfb 	bl	8010308 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fa86 	bl	800ce24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d004      	beq.n	800c928 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2202      	movs	r2, #2
 800c922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c926:	e009      	b.n	800c93c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c930:	e004      	b.n	800c93c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c932:	6839      	ldr	r1, [r7, #0]
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 f99e 	bl	800cc76 <USBD_CtlError>
  }
}
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	885b      	ldrh	r3, [r3, #2]
 800c956:	b2da      	uxtb	r2, r3
 800c958:	4b4e      	ldr	r3, [pc, #312]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c95a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c95c:	4b4d      	ldr	r3, [pc, #308]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d905      	bls.n	800c970 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f985 	bl	800cc76 <USBD_CtlError>
    return USBD_FAIL;
 800c96c:	2303      	movs	r3, #3
 800c96e:	e08c      	b.n	800ca8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d002      	beq.n	800c982 <USBD_SetConfig+0x3e>
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d029      	beq.n	800c9d4 <USBD_SetConfig+0x90>
 800c980:	e075      	b.n	800ca6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c982:	4b44      	ldr	r3, [pc, #272]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d020      	beq.n	800c9cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c98a:	4b42      	ldr	r3, [pc, #264]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c994:	4b3f      	ldr	r3, [pc, #252]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7fe ffb9 	bl	800b912 <USBD_SetClassConfig>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 f962 	bl	800cc76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9ba:	e065      	b.n	800ca88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa31 	bl	800ce24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2203      	movs	r2, #3
 800c9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c9ca:	e05d      	b.n	800ca88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fa29 	bl	800ce24 <USBD_CtlSendStatus>
      break;
 800c9d2:	e059      	b.n	800ca88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9d4:	4b2f      	ldr	r3, [pc, #188]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d112      	bne.n	800ca02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2202      	movs	r2, #2
 800c9e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c9e4:	4b2b      	ldr	r3, [pc, #172]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9ee:	4b29      	ldr	r3, [pc, #164]	@ (800ca94 <USBD_SetConfig+0x150>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe ffa8 	bl	800b94a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa12 	bl	800ce24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca00:	e042      	b.n	800ca88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca02:	4b24      	ldr	r3, [pc, #144]	@ (800ca94 <USBD_SetConfig+0x150>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d02a      	beq.n	800ca66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	4619      	mov	r1, r3
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7fe ff96 	bl	800b94a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca94 <USBD_SetConfig+0x150>)
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca28:	4b1a      	ldr	r3, [pc, #104]	@ (800ca94 <USBD_SetConfig+0x150>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7fe ff6f 	bl	800b912 <USBD_SetClassConfig>
 800ca34:	4603      	mov	r3, r0
 800ca36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00f      	beq.n	800ca5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f918 	bl	800cc76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7fe ff7b 	bl	800b94a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca5c:	e014      	b.n	800ca88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f9e0 	bl	800ce24 <USBD_CtlSendStatus>
      break;
 800ca64:	e010      	b.n	800ca88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f9dc 	bl	800ce24 <USBD_CtlSendStatus>
      break;
 800ca6c:	e00c      	b.n	800ca88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f900 	bl	800cc76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca76:	4b07      	ldr	r3, [pc, #28]	@ (800ca94 <USBD_SetConfig+0x150>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7fe ff64 	bl	800b94a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca82:	2303      	movs	r3, #3
 800ca84:	73fb      	strb	r3, [r7, #15]
      break;
 800ca86:	bf00      	nop
  }

  return ret;
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	240005f0 	.word	0x240005f0

0800ca98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	88db      	ldrh	r3, [r3, #6]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d004      	beq.n	800cab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f8e2 	bl	800cc76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cab2:	e023      	b.n	800cafc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	dc02      	bgt.n	800cac6 <USBD_GetConfig+0x2e>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dc03      	bgt.n	800cacc <USBD_GetConfig+0x34>
 800cac4:	e015      	b.n	800caf2 <USBD_GetConfig+0x5a>
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	d00b      	beq.n	800cae2 <USBD_GetConfig+0x4a>
 800caca:	e012      	b.n	800caf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3308      	adds	r3, #8
 800cad6:	2201      	movs	r2, #1
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f948 	bl	800cd70 <USBD_CtlSendData>
        break;
 800cae0:	e00c      	b.n	800cafc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3304      	adds	r3, #4
 800cae6:	2201      	movs	r2, #1
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f940 	bl	800cd70 <USBD_CtlSendData>
        break;
 800caf0:	e004      	b.n	800cafc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f8be 	bl	800cc76 <USBD_CtlError>
        break;
 800cafa:	bf00      	nop
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d81e      	bhi.n	800cb5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	88db      	ldrh	r3, [r3, #6]
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d004      	beq.n	800cb2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f8a5 	bl	800cc76 <USBD_CtlError>
        break;
 800cb2c:	e01a      	b.n	800cb64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d005      	beq.n	800cb4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f043 0202 	orr.w	r2, r3, #2
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	2202      	movs	r2, #2
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f90c 	bl	800cd70 <USBD_CtlSendData>
      break;
 800cb58:	e004      	b.n	800cb64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f88a 	bl	800cc76 <USBD_CtlError>
      break;
 800cb62:	bf00      	nop
  }
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	885b      	ldrh	r3, [r3, #2]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d107      	bne.n	800cb8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f94c 	bl	800ce24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb8c:	e013      	b.n	800cbb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	885b      	ldrh	r3, [r3, #2]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d10b      	bne.n	800cbae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	889b      	ldrh	r3, [r3, #4]
 800cb9a:	0a1b      	lsrs	r3, r3, #8
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f93c 	bl	800ce24 <USBD_CtlSendStatus>
}
 800cbac:	e003      	b.n	800cbb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 f860 	bl	800cc76 <USBD_CtlError>
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d80b      	bhi.n	800cbee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	885b      	ldrh	r3, [r3, #2]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d10c      	bne.n	800cbf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 f91c 	bl	800ce24 <USBD_CtlSendStatus>
      }
      break;
 800cbec:	e004      	b.n	800cbf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f840 	bl	800cc76 <USBD_CtlError>
      break;
 800cbf6:	e000      	b.n	800cbfa <USBD_ClrFeature+0x3c>
      break;
 800cbf8:	bf00      	nop
  }
}
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b084      	sub	sp, #16
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	781a      	ldrb	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff fa16 	bl	800c05e <SWAPBYTE>
 800cc32:	4603      	mov	r3, r0
 800cc34:	461a      	mov	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	3301      	adds	r3, #1
 800cc44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff fa09 	bl	800c05e <SWAPBYTE>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	3301      	adds	r3, #1
 800cc58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7ff f9fc 	bl	800c05e <SWAPBYTE>
 800cc66:	4603      	mov	r3, r0
 800cc68:	461a      	mov	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	80da      	strh	r2, [r3, #6]
}
 800cc6e:	bf00      	nop
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc80:	2180      	movs	r1, #128	@ 0x80
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f003 fad6 	bl	8010234 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc88:	2100      	movs	r1, #0
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f003 fad2 	bl	8010234 <USBD_LL_StallEP>
}
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cca4:	2300      	movs	r3, #0
 800cca6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d042      	beq.n	800cd34 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ccb2:	6938      	ldr	r0, [r7, #16]
 800ccb4:	f000 f842 	bl	800cd3c <USBD_GetLen>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	3301      	adds	r3, #1
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccc2:	d808      	bhi.n	800ccd6 <USBD_GetString+0x3e>
 800ccc4:	6938      	ldr	r0, [r7, #16]
 800ccc6:	f000 f839 	bl	800cd3c <USBD_GetLen>
 800ccca:	4603      	mov	r3, r0
 800cccc:	3301      	adds	r3, #1
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	e001      	b.n	800ccda <USBD_GetString+0x42>
 800ccd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	4413      	add	r3, r2
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	7812      	ldrb	r2, [r2, #0]
 800cce8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	3301      	adds	r3, #1
 800ccee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	2203      	movs	r2, #3
 800ccf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd00:	e013      	b.n	800cd2a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cd02:	7dfb      	ldrb	r3, [r7, #23]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	4413      	add	r3, r2
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	7812      	ldrb	r2, [r2, #0]
 800cd0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	3301      	adds	r3, #1
 800cd12:	613b      	str	r3, [r7, #16]
    idx++;
 800cd14:	7dfb      	ldrb	r3, [r7, #23]
 800cd16:	3301      	adds	r3, #1
 800cd18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	4413      	add	r3, r2
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	3301      	adds	r3, #1
 800cd28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1e7      	bne.n	800cd02 <USBD_GetString+0x6a>
 800cd32:	e000      	b.n	800cd36 <USBD_GetString+0x9e>
    return;
 800cd34:	bf00      	nop
  }
}
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd4c:	e005      	b.n	800cd5a <USBD_GetLen+0x1e>
  {
    len++;
 800cd4e:	7bfb      	ldrb	r3, [r7, #15]
 800cd50:	3301      	adds	r3, #1
 800cd52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	3301      	adds	r3, #1
 800cd58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f5      	bne.n	800cd4e <USBD_GetLen+0x12>
  }

  return len;
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2202      	movs	r2, #2
 800cd80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	2100      	movs	r1, #0
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f003 fad5 	bl	8010346 <USBD_LL_Transmit>

  return USBD_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	60b9      	str	r1, [r7, #8]
 800cdb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f003 fac4 	bl	8010346 <USBD_LL_Transmit>

  return USBD_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2203      	movs	r2, #3
 800cdd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f003 fac8 	bl	8010388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	2100      	movs	r1, #0
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f003 fab7 	bl	8010388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce34:	2300      	movs	r3, #0
 800ce36:	2200      	movs	r2, #0
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f003 fa83 	bl	8010346 <USBD_LL_Transmit>

  return USBD_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2205      	movs	r2, #5
 800ce56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2100      	movs	r1, #0
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f003 fa91 	bl	8010388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <__NVIC_SetPriority>:
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ce7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	db0a      	blt.n	800ce9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	490c      	ldr	r1, [pc, #48]	@ (800cebc <__NVIC_SetPriority+0x4c>)
 800ce8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ce8e:	0112      	lsls	r2, r2, #4
 800ce90:	b2d2      	uxtb	r2, r2
 800ce92:	440b      	add	r3, r1
 800ce94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ce98:	e00a      	b.n	800ceb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	4908      	ldr	r1, [pc, #32]	@ (800cec0 <__NVIC_SetPriority+0x50>)
 800cea0:	88fb      	ldrh	r3, [r7, #6]
 800cea2:	f003 030f 	and.w	r3, r3, #15
 800cea6:	3b04      	subs	r3, #4
 800cea8:	0112      	lsls	r2, r2, #4
 800ceaa:	b2d2      	uxtb	r2, r2
 800ceac:	440b      	add	r3, r1
 800ceae:	761a      	strb	r2, [r3, #24]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	e000e100 	.word	0xe000e100
 800cec0:	e000ed00 	.word	0xe000ed00

0800cec4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cec8:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <SysTick_Handler+0x1c>)
 800ceca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cecc:	f001 fd18 	bl	800e900 <xTaskGetSchedulerState>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d001      	beq.n	800ceda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ced6:	f002 fb0f 	bl	800f4f8 <xPortSysTickHandler>
  }
}
 800ceda:	bf00      	nop
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010

0800cee4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cee8:	2100      	movs	r1, #0
 800ceea:	f06f 0004 	mvn.w	r0, #4
 800ceee:	f7ff ffbf 	bl	800ce70 <__NVIC_SetPriority>
#endif
}
 800cef2:	bf00      	nop
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cefe:	f3ef 8305 	mrs	r3, IPSR
 800cf02:	603b      	str	r3, [r7, #0]
  return(result);
 800cf04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf0a:	f06f 0305 	mvn.w	r3, #5
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	e00c      	b.n	800cf2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf12:	4b0a      	ldr	r3, [pc, #40]	@ (800cf3c <osKernelInitialize+0x44>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d105      	bne.n	800cf26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf1a:	4b08      	ldr	r3, [pc, #32]	@ (800cf3c <osKernelInitialize+0x44>)
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	607b      	str	r3, [r7, #4]
 800cf24:	e002      	b.n	800cf2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf26:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf2c:	687b      	ldr	r3, [r7, #4]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	240005f4 	.word	0x240005f4

0800cf40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf46:	f3ef 8305 	mrs	r3, IPSR
 800cf4a:	603b      	str	r3, [r7, #0]
  return(result);
 800cf4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf52:	f06f 0305 	mvn.w	r3, #5
 800cf56:	607b      	str	r3, [r7, #4]
 800cf58:	e010      	b.n	800cf7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf5a:	4b0b      	ldr	r3, [pc, #44]	@ (800cf88 <osKernelStart+0x48>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d109      	bne.n	800cf76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf62:	f7ff ffbf 	bl	800cee4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf66:	4b08      	ldr	r3, [pc, #32]	@ (800cf88 <osKernelStart+0x48>)
 800cf68:	2202      	movs	r2, #2
 800cf6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf6c:	f001 f87a 	bl	800e064 <vTaskStartScheduler>
      stat = osOK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	607b      	str	r3, [r7, #4]
 800cf74:	e002      	b.n	800cf7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf7c:	687b      	ldr	r3, [r7, #4]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	240005f4 	.word	0x240005f4

0800cf8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08e      	sub	sp, #56	@ 0x38
 800cf90:	af04      	add	r7, sp, #16
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf9c:	f3ef 8305 	mrs	r3, IPSR
 800cfa0:	617b      	str	r3, [r7, #20]
  return(result);
 800cfa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d17e      	bne.n	800d0a6 <osThreadNew+0x11a>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d07b      	beq.n	800d0a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cfae:	2380      	movs	r3, #128	@ 0x80
 800cfb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cfb2:	2318      	movs	r3, #24
 800cfb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cfba:	f04f 33ff 	mov.w	r3, #4294967295
 800cfbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d045      	beq.n	800d052 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <osThreadNew+0x48>
        name = attr->name;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d008      	beq.n	800cffa <osThreadNew+0x6e>
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2b38      	cmp	r3, #56	@ 0x38
 800cfec:	d805      	bhi.n	800cffa <osThreadNew+0x6e>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <osThreadNew+0x72>
        return (NULL);
 800cffa:	2300      	movs	r3, #0
 800cffc:	e054      	b.n	800d0a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	695b      	ldr	r3, [r3, #20]
 800d00a:	089b      	lsrs	r3, r3, #2
 800d00c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00e      	beq.n	800d034 <osThreadNew+0xa8>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	2b5b      	cmp	r3, #91	@ 0x5b
 800d01c:	d90a      	bls.n	800d034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d022:	2b00      	cmp	r3, #0
 800d024:	d006      	beq.n	800d034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <osThreadNew+0xa8>
        mem = 1;
 800d02e:	2301      	movs	r3, #1
 800d030:	61bb      	str	r3, [r7, #24]
 800d032:	e010      	b.n	800d056 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10c      	bne.n	800d056 <osThreadNew+0xca>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d108      	bne.n	800d056 <osThreadNew+0xca>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d104      	bne.n	800d056 <osThreadNew+0xca>
          mem = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	61bb      	str	r3, [r7, #24]
 800d050:	e001      	b.n	800d056 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d110      	bne.n	800d07e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d064:	9202      	str	r2, [sp, #8]
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	6a3a      	ldr	r2, [r7, #32]
 800d070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 fe1a 	bl	800dcac <xTaskCreateStatic>
 800d078:	4603      	mov	r3, r0
 800d07a:	613b      	str	r3, [r7, #16]
 800d07c:	e013      	b.n	800d0a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d110      	bne.n	800d0a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	b29a      	uxth	r2, r3
 800d088:	f107 0310 	add.w	r3, r7, #16
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 fe68 	bl	800dd6c <xTaskCreate>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d001      	beq.n	800d0a6 <osThreadNew+0x11a>
            hTask = NULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0a6:	693b      	ldr	r3, [r7, #16]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3728      	adds	r7, #40	@ 0x28
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0b8:	f3ef 8305 	mrs	r3, IPSR
 800d0bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d003      	beq.n	800d0cc <osDelay+0x1c>
    stat = osErrorISR;
 800d0c4:	f06f 0305 	mvn.w	r3, #5
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	e007      	b.n	800d0dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 ff8e 	bl	800dff8 <vTaskDelay>
    }
  }

  return (stat);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
	...

0800d0e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4a07      	ldr	r2, [pc, #28]	@ (800d114 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	4a06      	ldr	r2, [pc, #24]	@ (800d118 <vApplicationGetIdleTaskMemory+0x30>)
 800d0fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2280      	movs	r2, #128	@ 0x80
 800d104:	601a      	str	r2, [r3, #0]
}
 800d106:	bf00      	nop
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	240005f8 	.word	0x240005f8
 800d118:	24000654 	.word	0x24000654

0800d11c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4a07      	ldr	r2, [pc, #28]	@ (800d148 <vApplicationGetTimerTaskMemory+0x2c>)
 800d12c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	4a06      	ldr	r2, [pc, #24]	@ (800d14c <vApplicationGetTimerTaskMemory+0x30>)
 800d132:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d13a:	601a      	str	r2, [r3, #0]
}
 800d13c:	bf00      	nop
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	24000854 	.word	0x24000854
 800d14c:	240008b0 	.word	0x240008b0

0800d150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f103 0208 	add.w	r2, r3, #8
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f103 0208 	add.w	r2, r3, #8
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0208 	add.w	r2, r3, #8
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d19e:	bf00      	nop
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1aa:	b480      	push	{r7}
 800d1ac:	b085      	sub	sp, #20
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	689a      	ldr	r2, [r3, #8]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	b085      	sub	sp, #20
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d208:	d103      	bne.n	800d212 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e00c      	b.n	800d22c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3308      	adds	r3, #8
 800d216:	60fb      	str	r3, [r7, #12]
 800d218:	e002      	b.n	800d220 <vListInsert+0x2e>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	60fb      	str	r3, [r7, #12]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d2f6      	bcs.n	800d21a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	683a      	ldr	r2, [r7, #0]
 800d23a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	601a      	str	r2, [r3, #0]
}
 800d258:	bf00      	nop
 800d25a:	3714      	adds	r7, #20
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr

0800d264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	6892      	ldr	r2, [r2, #8]
 800d27a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	6852      	ldr	r2, [r2, #4]
 800d284:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d103      	bne.n	800d298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	689a      	ldr	r2, [r3, #8]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	1e5a      	subs	r2, r3, #1
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10b      	bne.n	800d2e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	e7fd      	b.n	800d2e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2e4:	f002 f878 	bl	800f3d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f0:	68f9      	ldr	r1, [r7, #12]
 800d2f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d2f4:	fb01 f303 	mul.w	r3, r1, r3
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d314:	3b01      	subs	r3, #1
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d31a:	fb01 f303 	mul.w	r3, r1, r3
 800d31e:	441a      	add	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	22ff      	movs	r2, #255	@ 0xff
 800d328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	22ff      	movs	r2, #255	@ 0xff
 800d330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d114      	bne.n	800d364 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d01a      	beq.n	800d378 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3310      	adds	r3, #16
 800d346:	4618      	mov	r0, r3
 800d348:	f001 f91a 	bl	800e580 <xTaskRemoveFromEventList>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d012      	beq.n	800d378 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <xQueueGenericReset+0xd0>)
 800d354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	e009      	b.n	800d378 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	3310      	adds	r3, #16
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff fef1 	bl	800d150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3324      	adds	r3, #36	@ 0x24
 800d372:	4618      	mov	r0, r3
 800d374:	f7ff feec 	bl	800d150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d378:	f002 f860 	bl	800f43c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d37c:	2301      	movs	r3, #1
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08e      	sub	sp, #56	@ 0x38
 800d390:	af02      	add	r7, sp, #8
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3b2:	bf00      	nop
 800d3b4:	bf00      	nop
 800d3b6:	e7fd      	b.n	800d3b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10b      	bne.n	800d3d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	e7fd      	b.n	800d3d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <xQueueGenericCreateStatic+0x56>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <xQueueGenericCreateStatic+0x5a>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e000      	b.n	800d3e8 <xQueueGenericCreateStatic+0x5c>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10b      	bne.n	800d404 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	623b      	str	r3, [r7, #32]
}
 800d3fe:	bf00      	nop
 800d400:	bf00      	nop
 800d402:	e7fd      	b.n	800d400 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <xQueueGenericCreateStatic+0x84>
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <xQueueGenericCreateStatic+0x88>
 800d410:	2301      	movs	r3, #1
 800d412:	e000      	b.n	800d416 <xQueueGenericCreateStatic+0x8a>
 800d414:	2300      	movs	r3, #0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10b      	bne.n	800d432 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	61fb      	str	r3, [r7, #28]
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	e7fd      	b.n	800d42e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d432:	2350      	movs	r3, #80	@ 0x50
 800d434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2b50      	cmp	r3, #80	@ 0x50
 800d43a:	d00b      	beq.n	800d454 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	61bb      	str	r3, [r7, #24]
}
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
 800d452:	e7fd      	b.n	800d450 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d454:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00d      	beq.n	800d47c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d468:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	4613      	mov	r3, r2
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	68b9      	ldr	r1, [r7, #8]
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f000 f805 	bl	800d486 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d47e:	4618      	mov	r0, r3
 800d480:	3730      	adds	r7, #48	@ 0x30
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]
 800d492:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	e002      	b.n	800d4a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	69b8      	ldr	r0, [r7, #24]
 800d4b8:	f7ff fefe 	bl	800d2b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	78fa      	ldrb	r2, [r7, #3]
 800d4c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b08e      	sub	sp, #56	@ 0x38
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10b      	bne.n	800d500 <xQueueGenericSend+0x34>
	__asm volatile
 800d4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	e7fd      	b.n	800d4fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d103      	bne.n	800d50e <xQueueGenericSend+0x42>
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <xQueueGenericSend+0x46>
 800d50e:	2301      	movs	r3, #1
 800d510:	e000      	b.n	800d514 <xQueueGenericSend+0x48>
 800d512:	2300      	movs	r3, #0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10b      	bne.n	800d530 <xQueueGenericSend+0x64>
	__asm volatile
 800d518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d52a:	bf00      	nop
 800d52c:	bf00      	nop
 800d52e:	e7fd      	b.n	800d52c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2b02      	cmp	r3, #2
 800d534:	d103      	bne.n	800d53e <xQueueGenericSend+0x72>
 800d536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d101      	bne.n	800d542 <xQueueGenericSend+0x76>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <xQueueGenericSend+0x78>
 800d542:	2300      	movs	r3, #0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10b      	bne.n	800d560 <xQueueGenericSend+0x94>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d54c:	f383 8811 	msr	BASEPRI, r3
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	623b      	str	r3, [r7, #32]
}
 800d55a:	bf00      	nop
 800d55c:	bf00      	nop
 800d55e:	e7fd      	b.n	800d55c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d560:	f001 f9ce 	bl	800e900 <xTaskGetSchedulerState>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d102      	bne.n	800d570 <xQueueGenericSend+0xa4>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <xQueueGenericSend+0xa8>
 800d570:	2301      	movs	r3, #1
 800d572:	e000      	b.n	800d576 <xQueueGenericSend+0xaa>
 800d574:	2300      	movs	r3, #0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10b      	bne.n	800d592 <xQueueGenericSend+0xc6>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	61fb      	str	r3, [r7, #28]
}
 800d58c:	bf00      	nop
 800d58e:	bf00      	nop
 800d590:	e7fd      	b.n	800d58e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d592:	f001 ff21 	bl	800f3d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d302      	bcc.n	800d5a8 <xQueueGenericSend+0xdc>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d129      	bne.n	800d5fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	68b9      	ldr	r1, [r7, #8]
 800d5ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5ae:	f000 fa0f 	bl	800d9d0 <prvCopyDataToQueue>
 800d5b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d010      	beq.n	800d5de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	3324      	adds	r3, #36	@ 0x24
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 ffdd 	bl	800e580 <xTaskRemoveFromEventList>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d013      	beq.n	800d5f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5cc:	4b3f      	ldr	r3, [pc, #252]	@ (800d6cc <xQueueGenericSend+0x200>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	e00a      	b.n	800d5f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d007      	beq.n	800d5f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5e4:	4b39      	ldr	r3, [pc, #228]	@ (800d6cc <xQueueGenericSend+0x200>)
 800d5e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5f4:	f001 ff22 	bl	800f43c <vPortExitCritical>
				return pdPASS;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e063      	b.n	800d6c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d103      	bne.n	800d60a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d602:	f001 ff1b 	bl	800f43c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d606:	2300      	movs	r3, #0
 800d608:	e05c      	b.n	800d6c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d610:	f107 0314 	add.w	r3, r7, #20
 800d614:	4618      	mov	r0, r3
 800d616:	f001 f817 	bl	800e648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d61a:	2301      	movs	r3, #1
 800d61c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d61e:	f001 ff0d 	bl	800f43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d622:	f000 fd87 	bl	800e134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d626:	f001 fed7 	bl	800f3d8 <vPortEnterCritical>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d630:	b25b      	sxtb	r3, r3
 800d632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d636:	d103      	bne.n	800d640 <xQueueGenericSend+0x174>
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d646:	b25b      	sxtb	r3, r3
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64c:	d103      	bne.n	800d656 <xQueueGenericSend+0x18a>
 800d64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d656:	f001 fef1 	bl	800f43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d65a:	1d3a      	adds	r2, r7, #4
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	4611      	mov	r1, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f806 	bl	800e674 <xTaskCheckForTimeOut>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d124      	bne.n	800d6b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d66e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d670:	f000 faa6 	bl	800dbc0 <prvIsQueueFull>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d018      	beq.n	800d6ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67c:	3310      	adds	r3, #16
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f000 ff2a 	bl	800e4dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d68a:	f000 fa31 	bl	800daf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d68e:	f000 fd5f 	bl	800e150 <xTaskResumeAll>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	f47f af7c 	bne.w	800d592 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d69a:	4b0c      	ldr	r3, [pc, #48]	@ (800d6cc <xQueueGenericSend+0x200>)
 800d69c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6a0:	601a      	str	r2, [r3, #0]
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	e772      	b.n	800d592 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ae:	f000 fa1f 	bl	800daf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6b2:	f000 fd4d 	bl	800e150 <xTaskResumeAll>
 800d6b6:	e76c      	b.n	800d592 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ba:	f000 fa19 	bl	800daf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6be:	f000 fd47 	bl	800e150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3738      	adds	r7, #56	@ 0x38
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b090      	sub	sp, #64	@ 0x40
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10b      	bne.n	800d700 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	e7fd      	b.n	800d6fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <xQueueGenericSendFromISR+0x3e>
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <xQueueGenericSendFromISR+0x42>
 800d70e:	2301      	movs	r3, #1
 800d710:	e000      	b.n	800d714 <xQueueGenericSendFromISR+0x44>
 800d712:	2300      	movs	r3, #0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10b      	bne.n	800d730 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d72a:	bf00      	nop
 800d72c:	bf00      	nop
 800d72e:	e7fd      	b.n	800d72c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d103      	bne.n	800d73e <xQueueGenericSendFromISR+0x6e>
 800d736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d101      	bne.n	800d742 <xQueueGenericSendFromISR+0x72>
 800d73e:	2301      	movs	r3, #1
 800d740:	e000      	b.n	800d744 <xQueueGenericSendFromISR+0x74>
 800d742:	2300      	movs	r3, #0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10b      	bne.n	800d760 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	623b      	str	r3, [r7, #32]
}
 800d75a:	bf00      	nop
 800d75c:	bf00      	nop
 800d75e:	e7fd      	b.n	800d75c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d760:	f001 ff1a 	bl	800f598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d764:	f3ef 8211 	mrs	r2, BASEPRI
 800d768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	61fa      	str	r2, [r7, #28]
 800d77a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d77c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d77e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d788:	429a      	cmp	r2, r3
 800d78a:	d302      	bcc.n	800d792 <xQueueGenericSendFromISR+0xc2>
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d12f      	bne.n	800d7f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	68b9      	ldr	r1, [r7, #8]
 800d7a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7a8:	f000 f912 	bl	800d9d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b4:	d112      	bne.n	800d7dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d016      	beq.n	800d7ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c0:	3324      	adds	r3, #36	@ 0x24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fedc 	bl	800e580 <xTaskRemoveFromEventList>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00e      	beq.n	800d7ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00b      	beq.n	800d7ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	e007      	b.n	800d7ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	b25a      	sxtb	r2, r3
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d7f0:	e001      	b.n	800d7f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d804:	4618      	mov	r0, r3
 800d806:	3740      	adds	r7, #64	@ 0x40
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08c      	sub	sp, #48	@ 0x30
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d818:	2300      	movs	r3, #0
 800d81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10b      	bne.n	800d83e <xQueueReceive+0x32>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	623b      	str	r3, [r7, #32]
}
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
 800d83c:	e7fd      	b.n	800d83a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d103      	bne.n	800d84c <xQueueReceive+0x40>
 800d844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <xQueueReceive+0x44>
 800d84c:	2301      	movs	r3, #1
 800d84e:	e000      	b.n	800d852 <xQueueReceive+0x46>
 800d850:	2300      	movs	r3, #0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10b      	bne.n	800d86e <xQueueReceive+0x62>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	61fb      	str	r3, [r7, #28]
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	e7fd      	b.n	800d86a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d86e:	f001 f847 	bl	800e900 <xTaskGetSchedulerState>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d102      	bne.n	800d87e <xQueueReceive+0x72>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <xQueueReceive+0x76>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <xQueueReceive+0x78>
 800d882:	2300      	movs	r3, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10b      	bne.n	800d8a0 <xQueueReceive+0x94>
	__asm volatile
 800d888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	61bb      	str	r3, [r7, #24]
}
 800d89a:	bf00      	nop
 800d89c:	bf00      	nop
 800d89e:	e7fd      	b.n	800d89c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8a0:	f001 fd9a 	bl	800f3d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d01f      	beq.n	800d8f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8b0:	68b9      	ldr	r1, [r7, #8]
 800d8b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8b4:	f000 f8f6 	bl	800daa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	1e5a      	subs	r2, r3, #1
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00f      	beq.n	800d8e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ca:	3310      	adds	r3, #16
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fe57 	bl	800e580 <xTaskRemoveFromEventList>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d007      	beq.n	800d8e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8d8:	4b3c      	ldr	r3, [pc, #240]	@ (800d9cc <xQueueReceive+0x1c0>)
 800d8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8e8:	f001 fda8 	bl	800f43c <vPortExitCritical>
				return pdPASS;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e069      	b.n	800d9c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d103      	bne.n	800d8fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8f6:	f001 fda1 	bl	800f43c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e062      	b.n	800d9c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d904:	f107 0310 	add.w	r3, r7, #16
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fe9d 	bl	800e648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d90e:	2301      	movs	r3, #1
 800d910:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d912:	f001 fd93 	bl	800f43c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d916:	f000 fc0d 	bl	800e134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d91a:	f001 fd5d 	bl	800f3d8 <vPortEnterCritical>
 800d91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d924:	b25b      	sxtb	r3, r3
 800d926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92a:	d103      	bne.n	800d934 <xQueueReceive+0x128>
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d93a:	b25b      	sxtb	r3, r3
 800d93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d940:	d103      	bne.n	800d94a <xQueueReceive+0x13e>
 800d942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d94a:	f001 fd77 	bl	800f43c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d94e:	1d3a      	adds	r2, r7, #4
 800d950:	f107 0310 	add.w	r3, r7, #16
 800d954:	4611      	mov	r1, r2
 800d956:	4618      	mov	r0, r3
 800d958:	f000 fe8c 	bl	800e674 <xTaskCheckForTimeOut>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d123      	bne.n	800d9aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d964:	f000 f916 	bl	800db94 <prvIsQueueEmpty>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d017      	beq.n	800d99e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d970:	3324      	adds	r3, #36	@ 0x24
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	4611      	mov	r1, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fdb0 	bl	800e4dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d97e:	f000 f8b7 	bl	800daf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d982:	f000 fbe5 	bl	800e150 <xTaskResumeAll>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d189      	bne.n	800d8a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d98c:	4b0f      	ldr	r3, [pc, #60]	@ (800d9cc <xQueueReceive+0x1c0>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	e780      	b.n	800d8a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9a0:	f000 f8a6 	bl	800daf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9a4:	f000 fbd4 	bl	800e150 <xTaskResumeAll>
 800d9a8:	e77a      	b.n	800d8a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9ac:	f000 f8a0 	bl	800daf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9b0:	f000 fbce 	bl	800e150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9b6:	f000 f8ed 	bl	800db94 <prvIsQueueEmpty>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f43f af6f 	beq.w	800d8a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3730      	adds	r7, #48	@ 0x30
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	e000ed04 	.word	0xe000ed04

0800d9d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10d      	bne.n	800da0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d14d      	bne.n	800da92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 ff9e 	bl	800e93c <xTaskPriorityDisinherit>
 800da00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	609a      	str	r2, [r3, #8]
 800da08:	e043      	b.n	800da92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d119      	bne.n	800da44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6858      	ldr	r0, [r3, #4]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da18:	461a      	mov	r2, r3
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	f005 f991 	bl	8012d42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da28:	441a      	add	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	429a      	cmp	r2, r3
 800da38:	d32b      	bcc.n	800da92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	605a      	str	r2, [r3, #4]
 800da42:	e026      	b.n	800da92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68d8      	ldr	r0, [r3, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da4c:	461a      	mov	r2, r3
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	f005 f977 	bl	8012d42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5c:	425b      	negs	r3, r3
 800da5e:	441a      	add	r2, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d207      	bcs.n	800da80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	689a      	ldr	r2, [r3, #8]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da78:	425b      	negs	r3, r3
 800da7a:	441a      	add	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d105      	bne.n	800da92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	3b01      	subs	r3, #1
 800da90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	1c5a      	adds	r2, r3, #1
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800da9a:	697b      	ldr	r3, [r7, #20]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d018      	beq.n	800dae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68da      	ldr	r2, [r3, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabe:	441a      	add	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68da      	ldr	r2, [r3, #12]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d303      	bcc.n	800dad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68d9      	ldr	r1, [r3, #12]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dae0:	461a      	mov	r2, r3
 800dae2:	6838      	ldr	r0, [r7, #0]
 800dae4:	f005 f92d 	bl	8012d42 <memcpy>
	}
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800daf8:	f001 fc6e 	bl	800f3d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db04:	e011      	b.n	800db2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d012      	beq.n	800db34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	3324      	adds	r3, #36	@ 0x24
 800db12:	4618      	mov	r0, r3
 800db14:	f000 fd34 	bl	800e580 <xTaskRemoveFromEventList>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db1e:	f000 fe0d 	bl	800e73c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	3b01      	subs	r3, #1
 800db26:	b2db      	uxtb	r3, r3
 800db28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	dce9      	bgt.n	800db06 <prvUnlockQueue+0x16>
 800db32:	e000      	b.n	800db36 <prvUnlockQueue+0x46>
					break;
 800db34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	22ff      	movs	r2, #255	@ 0xff
 800db3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db3e:	f001 fc7d 	bl	800f43c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db42:	f001 fc49 	bl	800f3d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db4e:	e011      	b.n	800db74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d012      	beq.n	800db7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3310      	adds	r3, #16
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 fd0f 	bl	800e580 <xTaskRemoveFromEventList>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db68:	f000 fde8 	bl	800e73c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
 800db6e:	3b01      	subs	r3, #1
 800db70:	b2db      	uxtb	r3, r3
 800db72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dce9      	bgt.n	800db50 <prvUnlockQueue+0x60>
 800db7c:	e000      	b.n	800db80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	22ff      	movs	r2, #255	@ 0xff
 800db84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800db88:	f001 fc58 	bl	800f43c <vPortExitCritical>
}
 800db8c:	bf00      	nop
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db9c:	f001 fc1c 	bl	800f3d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	e001      	b.n	800dbb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbb2:	f001 fc43 	bl	800f43c <vPortExitCritical>

	return xReturn;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbc8:	f001 fc06 	bl	800f3d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d102      	bne.n	800dbde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	e001      	b.n	800dbe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbe2:	f001 fc2b 	bl	800f43c <vPortExitCritical>

	return xReturn;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	e014      	b.n	800dc2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc00:	4a0f      	ldr	r2, [pc, #60]	@ (800dc40 <vQueueAddToRegistry+0x50>)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10b      	bne.n	800dc24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc0c:	490c      	ldr	r1, [pc, #48]	@ (800dc40 <vQueueAddToRegistry+0x50>)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc16:	4a0a      	ldr	r2, [pc, #40]	@ (800dc40 <vQueueAddToRegistry+0x50>)
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	4413      	add	r3, r2
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc22:	e006      	b.n	800dc32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3301      	adds	r3, #1
 800dc28:	60fb      	str	r3, [r7, #12]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b07      	cmp	r3, #7
 800dc2e:	d9e7      	bls.n	800dc00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc30:	bf00      	nop
 800dc32:	bf00      	nop
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	24000cb0 	.word	0x24000cb0

0800dc44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc54:	f001 fbc0 	bl	800f3d8 <vPortEnterCritical>
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc5e:	b25b      	sxtb	r3, r3
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc64:	d103      	bne.n	800dc6e <vQueueWaitForMessageRestricted+0x2a>
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc74:	b25b      	sxtb	r3, r3
 800dc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7a:	d103      	bne.n	800dc84 <vQueueWaitForMessageRestricted+0x40>
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc84:	f001 fbda 	bl	800f43c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d106      	bne.n	800dc9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	3324      	adds	r3, #36	@ 0x24
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 fc45 	bl	800e528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc9e:	6978      	ldr	r0, [r7, #20]
 800dca0:	f7ff ff26 	bl	800daf0 <prvUnlockQueue>
	}
 800dca4:	bf00      	nop
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b08e      	sub	sp, #56	@ 0x38
 800dcb0:	af04      	add	r7, sp, #16
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
 800dcb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d10b      	bne.n	800dcd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	623b      	str	r3, [r7, #32]
}
 800dcd2:	bf00      	nop
 800dcd4:	bf00      	nop
 800dcd6:	e7fd      	b.n	800dcd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10b      	bne.n	800dcf6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	61fb      	str	r3, [r7, #28]
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	e7fd      	b.n	800dcf2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcf6:	235c      	movs	r3, #92	@ 0x5c
 800dcf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2b5c      	cmp	r3, #92	@ 0x5c
 800dcfe:	d00b      	beq.n	800dd18 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	61bb      	str	r3, [r7, #24]
}
 800dd12:	bf00      	nop
 800dd14:	bf00      	nop
 800dd16:	e7fd      	b.n	800dd14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d01e      	beq.n	800dd5e <xTaskCreateStatic+0xb2>
 800dd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d01b      	beq.n	800dd5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd38:	2300      	movs	r3, #0
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3e:	9302      	str	r3, [sp, #8]
 800dd40:	f107 0314 	add.w	r3, r7, #20
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f000 f850 	bl	800ddf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd58:	f000 f8de 	bl	800df18 <prvAddNewTaskToReadyList>
 800dd5c:	e001      	b.n	800dd62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd62:	697b      	ldr	r3, [r7, #20]
	}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3728      	adds	r7, #40	@ 0x28
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	@ 0x30
 800dd70:	af04      	add	r7, sp, #16
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	603b      	str	r3, [r7, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd7c:	88fb      	ldrh	r3, [r7, #6]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4618      	mov	r0, r3
 800dd82:	f001 fc4b 	bl	800f61c <pvPortMalloc>
 800dd86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00e      	beq.n	800ddac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd8e:	205c      	movs	r0, #92	@ 0x5c
 800dd90:	f001 fc44 	bl	800f61c <pvPortMalloc>
 800dd94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d003      	beq.n	800dda4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	631a      	str	r2, [r3, #48]	@ 0x30
 800dda2:	e005      	b.n	800ddb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dda4:	6978      	ldr	r0, [r7, #20]
 800dda6:	f001 fd07 	bl	800f7b8 <vPortFree>
 800ddaa:	e001      	b.n	800ddb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ddac:	2300      	movs	r3, #0
 800ddae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d017      	beq.n	800dde6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ddbe:	88fa      	ldrh	r2, [r7, #6]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9303      	str	r3, [sp, #12]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f000 f80e 	bl	800ddf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddda:	69f8      	ldr	r0, [r7, #28]
 800dddc:	f000 f89c 	bl	800df18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dde0:	2301      	movs	r3, #1
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	e002      	b.n	800ddec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295
 800ddea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ddec:	69bb      	ldr	r3, [r7, #24]
	}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3720      	adds	r7, #32
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b088      	sub	sp, #32
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	60b9      	str	r1, [r7, #8]
 800de00:	607a      	str	r2, [r7, #4]
 800de02:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	461a      	mov	r2, r3
 800de0e:	21a5      	movs	r1, #165	@ 0xa5
 800de10:	f004 ff07 	bl	8012c22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de18:	6879      	ldr	r1, [r7, #4]
 800de1a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800de1e:	440b      	add	r3, r1
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	f023 0307 	bic.w	r3, r3, #7
 800de2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	f003 0307 	and.w	r3, r3, #7
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00b      	beq.n	800de50 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	617b      	str	r3, [r7, #20]
}
 800de4a:	bf00      	nop
 800de4c:	bf00      	nop
 800de4e:	e7fd      	b.n	800de4c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d01f      	beq.n	800de96 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de56:	2300      	movs	r3, #0
 800de58:	61fb      	str	r3, [r7, #28]
 800de5a:	e012      	b.n	800de82 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	4413      	add	r3, r2
 800de62:	7819      	ldrb	r1, [r3, #0]
 800de64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	4413      	add	r3, r2
 800de6a:	3334      	adds	r3, #52	@ 0x34
 800de6c:	460a      	mov	r2, r1
 800de6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	4413      	add	r3, r2
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d006      	beq.n	800de8a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3301      	adds	r3, #1
 800de80:	61fb      	str	r3, [r7, #28]
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2b0f      	cmp	r3, #15
 800de86:	d9e9      	bls.n	800de5c <prvInitialiseNewTask+0x66>
 800de88:	e000      	b.n	800de8c <prvInitialiseNewTask+0x96>
			{
				break;
 800de8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800de94:	e003      	b.n	800de9e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea0:	2b37      	cmp	r3, #55	@ 0x37
 800dea2:	d901      	bls.n	800dea8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dea4:	2337      	movs	r3, #55	@ 0x37
 800dea6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800deac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800deae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800deb2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800deb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb6:	2200      	movs	r2, #0
 800deb8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800deba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debc:	3304      	adds	r3, #4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff f966 	bl	800d190 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec6:	3318      	adds	r3, #24
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff f961 	bl	800d190 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ded2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ded4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800deda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dedc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dee2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee6:	2200      	movs	r2, #0
 800dee8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	68f9      	ldr	r1, [r7, #12]
 800def6:	69b8      	ldr	r0, [r7, #24]
 800def8:	f001 f93e 	bl	800f178 <pxPortInitialiseStack>
 800defc:	4602      	mov	r2, r0
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df0e:	bf00      	nop
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
	...

0800df18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df20:	f001 fa5a 	bl	800f3d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df24:	4b2d      	ldr	r3, [pc, #180]	@ (800dfdc <prvAddNewTaskToReadyList+0xc4>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	3301      	adds	r3, #1
 800df2a:	4a2c      	ldr	r2, [pc, #176]	@ (800dfdc <prvAddNewTaskToReadyList+0xc4>)
 800df2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dfe0 <prvAddNewTaskToReadyList+0xc8>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d109      	bne.n	800df4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df36:	4a2a      	ldr	r2, [pc, #168]	@ (800dfe0 <prvAddNewTaskToReadyList+0xc8>)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df3c:	4b27      	ldr	r3, [pc, #156]	@ (800dfdc <prvAddNewTaskToReadyList+0xc4>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d110      	bne.n	800df66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df44:	f000 fc1e 	bl	800e784 <prvInitialiseTaskLists>
 800df48:	e00d      	b.n	800df66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df4a:	4b26      	ldr	r3, [pc, #152]	@ (800dfe4 <prvAddNewTaskToReadyList+0xcc>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df52:	4b23      	ldr	r3, [pc, #140]	@ (800dfe0 <prvAddNewTaskToReadyList+0xc8>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d802      	bhi.n	800df66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df60:	4a1f      	ldr	r2, [pc, #124]	@ (800dfe0 <prvAddNewTaskToReadyList+0xc8>)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df66:	4b20      	ldr	r3, [pc, #128]	@ (800dfe8 <prvAddNewTaskToReadyList+0xd0>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3301      	adds	r3, #1
 800df6c:	4a1e      	ldr	r2, [pc, #120]	@ (800dfe8 <prvAddNewTaskToReadyList+0xd0>)
 800df6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df70:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <prvAddNewTaskToReadyList+0xd0>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df7c:	4b1b      	ldr	r3, [pc, #108]	@ (800dfec <prvAddNewTaskToReadyList+0xd4>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	429a      	cmp	r2, r3
 800df82:	d903      	bls.n	800df8c <prvAddNewTaskToReadyList+0x74>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df88:	4a18      	ldr	r2, [pc, #96]	@ (800dfec <prvAddNewTaskToReadyList+0xd4>)
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df90:	4613      	mov	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4413      	add	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4a15      	ldr	r2, [pc, #84]	@ (800dff0 <prvAddNewTaskToReadyList+0xd8>)
 800df9a:	441a      	add	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	3304      	adds	r3, #4
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4610      	mov	r0, r2
 800dfa4:	f7ff f901 	bl	800d1aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfa8:	f001 fa48 	bl	800f43c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfac:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <prvAddNewTaskToReadyList+0xcc>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00e      	beq.n	800dfd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfb4:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe0 <prvAddNewTaskToReadyList+0xc8>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d207      	bcs.n	800dfd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dfc2:	4b0c      	ldr	r3, [pc, #48]	@ (800dff4 <prvAddNewTaskToReadyList+0xdc>)
 800dfc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfc8:	601a      	str	r2, [r3, #0]
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	240011c4 	.word	0x240011c4
 800dfe0:	24000cf0 	.word	0x24000cf0
 800dfe4:	240011d0 	.word	0x240011d0
 800dfe8:	240011e0 	.word	0x240011e0
 800dfec:	240011cc 	.word	0x240011cc
 800dff0:	24000cf4 	.word	0x24000cf4
 800dff4:	e000ed04 	.word	0xe000ed04

0800dff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d018      	beq.n	800e03c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <vTaskDelay+0x64>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <vTaskDelay+0x32>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop
 800e028:	e7fd      	b.n	800e026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e02a:	f000 f883 	bl	800e134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fcf3 	bl	800ea1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e036:	f000 f88b 	bl	800e150 <xTaskResumeAll>
 800e03a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d107      	bne.n	800e052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e042:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <vTaskDelay+0x68>)
 800e044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	240011ec 	.word	0x240011ec
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	@ 0x28
 800e068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e072:	463a      	mov	r2, r7
 800e074:	1d39      	adds	r1, r7, #4
 800e076:	f107 0308 	add.w	r3, r7, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7ff f834 	bl	800d0e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	9202      	str	r2, [sp, #8]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	2300      	movs	r3, #0
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	2300      	movs	r3, #0
 800e090:	460a      	mov	r2, r1
 800e092:	4922      	ldr	r1, [pc, #136]	@ (800e11c <vTaskStartScheduler+0xb8>)
 800e094:	4822      	ldr	r0, [pc, #136]	@ (800e120 <vTaskStartScheduler+0xbc>)
 800e096:	f7ff fe09 	bl	800dcac <xTaskCreateStatic>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4a21      	ldr	r2, [pc, #132]	@ (800e124 <vTaskStartScheduler+0xc0>)
 800e09e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0a0:	4b20      	ldr	r3, [pc, #128]	@ (800e124 <vTaskStartScheduler+0xc0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
 800e0ac:	e001      	b.n	800e0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d102      	bne.n	800e0be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e0b8:	f000 fd04 	bl	800eac4 <xTimerCreateTimerTask>
 800e0bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d116      	bne.n	800e0f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	613b      	str	r3, [r7, #16]
}
 800e0d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0d8:	4b13      	ldr	r3, [pc, #76]	@ (800e128 <vTaskStartScheduler+0xc4>)
 800e0da:	f04f 32ff 	mov.w	r2, #4294967295
 800e0de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0e0:	4b12      	ldr	r3, [pc, #72]	@ (800e12c <vTaskStartScheduler+0xc8>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0e6:	4b12      	ldr	r3, [pc, #72]	@ (800e130 <vTaskStartScheduler+0xcc>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0ec:	f001 f8d0 	bl	800f290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0f0:	e00f      	b.n	800e112 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f8:	d10b      	bne.n	800e112 <vTaskStartScheduler+0xae>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	60fb      	str	r3, [r7, #12]
}
 800e10c:	bf00      	nop
 800e10e:	bf00      	nop
 800e110:	e7fd      	b.n	800e10e <vTaskStartScheduler+0xaa>
}
 800e112:	bf00      	nop
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	0801518c 	.word	0x0801518c
 800e120:	0800e755 	.word	0x0800e755
 800e124:	240011e8 	.word	0x240011e8
 800e128:	240011e4 	.word	0x240011e4
 800e12c:	240011d0 	.word	0x240011d0
 800e130:	240011c8 	.word	0x240011c8

0800e134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e134:	b480      	push	{r7}
 800e136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e138:	4b04      	ldr	r3, [pc, #16]	@ (800e14c <vTaskSuspendAll+0x18>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	4a03      	ldr	r2, [pc, #12]	@ (800e14c <vTaskSuspendAll+0x18>)
 800e140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e142:	bf00      	nop
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	240011ec 	.word	0x240011ec

0800e150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e15e:	4b42      	ldr	r3, [pc, #264]	@ (800e268 <xTaskResumeAll+0x118>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10b      	bne.n	800e17e <xTaskResumeAll+0x2e>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	603b      	str	r3, [r7, #0]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e17e:	f001 f92b 	bl	800f3d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e182:	4b39      	ldr	r3, [pc, #228]	@ (800e268 <xTaskResumeAll+0x118>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3b01      	subs	r3, #1
 800e188:	4a37      	ldr	r2, [pc, #220]	@ (800e268 <xTaskResumeAll+0x118>)
 800e18a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18c:	4b36      	ldr	r3, [pc, #216]	@ (800e268 <xTaskResumeAll+0x118>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d162      	bne.n	800e25a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e194:	4b35      	ldr	r3, [pc, #212]	@ (800e26c <xTaskResumeAll+0x11c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d05e      	beq.n	800e25a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e19c:	e02f      	b.n	800e1fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e19e:	4b34      	ldr	r3, [pc, #208]	@ (800e270 <xTaskResumeAll+0x120>)
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3318      	adds	r3, #24
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7ff f85a 	bl	800d264 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7ff f855 	bl	800d264 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1be:	4b2d      	ldr	r3, [pc, #180]	@ (800e274 <xTaskResumeAll+0x124>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d903      	bls.n	800e1ce <xTaskResumeAll+0x7e>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ca:	4a2a      	ldr	r2, [pc, #168]	@ (800e274 <xTaskResumeAll+0x124>)
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4413      	add	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4a27      	ldr	r2, [pc, #156]	@ (800e278 <xTaskResumeAll+0x128>)
 800e1dc:	441a      	add	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	f7fe ffe0 	bl	800d1aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ee:	4b23      	ldr	r3, [pc, #140]	@ (800e27c <xTaskResumeAll+0x12c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d302      	bcc.n	800e1fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e1f8:	4b21      	ldr	r3, [pc, #132]	@ (800e280 <xTaskResumeAll+0x130>)
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <xTaskResumeAll+0x120>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d1cb      	bne.n	800e19e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e20c:	f000 fb58 	bl	800e8c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e210:	4b1c      	ldr	r3, [pc, #112]	@ (800e284 <xTaskResumeAll+0x134>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d010      	beq.n	800e23e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e21c:	f000 f846 	bl	800e2ac <xTaskIncrementTick>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e226:	4b16      	ldr	r3, [pc, #88]	@ (800e280 <xTaskResumeAll+0x130>)
 800e228:	2201      	movs	r2, #1
 800e22a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3b01      	subs	r3, #1
 800e230:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1f1      	bne.n	800e21c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e238:	4b12      	ldr	r3, [pc, #72]	@ (800e284 <xTaskResumeAll+0x134>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e23e:	4b10      	ldr	r3, [pc, #64]	@ (800e280 <xTaskResumeAll+0x130>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d009      	beq.n	800e25a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e246:	2301      	movs	r3, #1
 800e248:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e24a:	4b0f      	ldr	r3, [pc, #60]	@ (800e288 <xTaskResumeAll+0x138>)
 800e24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e25a:	f001 f8ef 	bl	800f43c <vPortExitCritical>

	return xAlreadyYielded;
 800e25e:	68bb      	ldr	r3, [r7, #8]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	240011ec 	.word	0x240011ec
 800e26c:	240011c4 	.word	0x240011c4
 800e270:	24001184 	.word	0x24001184
 800e274:	240011cc 	.word	0x240011cc
 800e278:	24000cf4 	.word	0x24000cf4
 800e27c:	24000cf0 	.word	0x24000cf0
 800e280:	240011d8 	.word	0x240011d8
 800e284:	240011d4 	.word	0x240011d4
 800e288:	e000ed04 	.word	0xe000ed04

0800e28c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e292:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <xTaskGetTickCount+0x1c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e298:	687b      	ldr	r3, [r7, #4]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	240011c8 	.word	0x240011c8

0800e2ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2b6:	4b4f      	ldr	r3, [pc, #316]	@ (800e3f4 <xTaskIncrementTick+0x148>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f040 8090 	bne.w	800e3e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2c0:	4b4d      	ldr	r3, [pc, #308]	@ (800e3f8 <xTaskIncrementTick+0x14c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2c8:	4a4b      	ldr	r2, [pc, #300]	@ (800e3f8 <xTaskIncrementTick+0x14c>)
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d121      	bne.n	800e318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2d4:	4b49      	ldr	r3, [pc, #292]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	603b      	str	r3, [r7, #0]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <xTaskIncrementTick+0x46>
 800e2f6:	4b41      	ldr	r3, [pc, #260]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	4b40      	ldr	r3, [pc, #256]	@ (800e400 <xTaskIncrementTick+0x154>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a3e      	ldr	r2, [pc, #248]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	4a3e      	ldr	r2, [pc, #248]	@ (800e400 <xTaskIncrementTick+0x154>)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	4b3e      	ldr	r3, [pc, #248]	@ (800e404 <xTaskIncrementTick+0x158>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3301      	adds	r3, #1
 800e310:	4a3c      	ldr	r2, [pc, #240]	@ (800e404 <xTaskIncrementTick+0x158>)
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	f000 fad4 	bl	800e8c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e318:	4b3b      	ldr	r3, [pc, #236]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d349      	bcc.n	800e3b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e322:	4b36      	ldr	r3, [pc, #216]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e32c:	4b36      	ldr	r3, [pc, #216]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295
 800e332:	601a      	str	r2, [r3, #0]
					break;
 800e334:	e03f      	b.n	800e3b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e336:	4b31      	ldr	r3, [pc, #196]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d203      	bcs.n	800e356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e34e:	4a2e      	ldr	r2, [pc, #184]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e354:	e02f      	b.n	800e3b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	3304      	adds	r3, #4
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe ff82 	bl	800d264 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	3318      	adds	r3, #24
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe ff79 	bl	800d264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e376:	4b25      	ldr	r3, [pc, #148]	@ (800e40c <xTaskIncrementTick+0x160>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d903      	bls.n	800e386 <xTaskIncrementTick+0xda>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e382:	4a22      	ldr	r2, [pc, #136]	@ (800e40c <xTaskIncrementTick+0x160>)
 800e384:	6013      	str	r3, [r2, #0]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a1f      	ldr	r2, [pc, #124]	@ (800e410 <xTaskIncrementTick+0x164>)
 800e394:	441a      	add	r2, r3
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	3304      	adds	r3, #4
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f7fe ff04 	bl	800d1aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800e414 <xTaskIncrementTick+0x168>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d3b8      	bcc.n	800e322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3b4:	e7b5      	b.n	800e322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3b6:	4b17      	ldr	r3, [pc, #92]	@ (800e414 <xTaskIncrementTick+0x168>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3bc:	4914      	ldr	r1, [pc, #80]	@ (800e410 <xTaskIncrementTick+0x164>)
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	440b      	add	r3, r1
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d901      	bls.n	800e3d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3d2:	4b11      	ldr	r3, [pc, #68]	@ (800e418 <xTaskIncrementTick+0x16c>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d007      	beq.n	800e3ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	e004      	b.n	800e3ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <xTaskIncrementTick+0x170>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	4a0d      	ldr	r2, [pc, #52]	@ (800e41c <xTaskIncrementTick+0x170>)
 800e3e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3ea:	697b      	ldr	r3, [r7, #20]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	240011ec 	.word	0x240011ec
 800e3f8:	240011c8 	.word	0x240011c8
 800e3fc:	2400117c 	.word	0x2400117c
 800e400:	24001180 	.word	0x24001180
 800e404:	240011dc 	.word	0x240011dc
 800e408:	240011e4 	.word	0x240011e4
 800e40c:	240011cc 	.word	0x240011cc
 800e410:	24000cf4 	.word	0x24000cf4
 800e414:	24000cf0 	.word	0x24000cf0
 800e418:	240011d8 	.word	0x240011d8
 800e41c:	240011d4 	.word	0x240011d4

0800e420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e426:	4b28      	ldr	r3, [pc, #160]	@ (800e4c8 <vTaskSwitchContext+0xa8>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e42e:	4b27      	ldr	r3, [pc, #156]	@ (800e4cc <vTaskSwitchContext+0xac>)
 800e430:	2201      	movs	r2, #1
 800e432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e434:	e042      	b.n	800e4bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e436:	4b25      	ldr	r3, [pc, #148]	@ (800e4cc <vTaskSwitchContext+0xac>)
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43c:	4b24      	ldr	r3, [pc, #144]	@ (800e4d0 <vTaskSwitchContext+0xb0>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	60fb      	str	r3, [r7, #12]
 800e442:	e011      	b.n	800e468 <vTaskSwitchContext+0x48>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d10b      	bne.n	800e462 <vTaskSwitchContext+0x42>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	607b      	str	r3, [r7, #4]
}
 800e45c:	bf00      	nop
 800e45e:	bf00      	nop
 800e460:	e7fd      	b.n	800e45e <vTaskSwitchContext+0x3e>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3b01      	subs	r3, #1
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	491a      	ldr	r1, [pc, #104]	@ (800e4d4 <vTaskSwitchContext+0xb4>)
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	440b      	add	r3, r1
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d0e3      	beq.n	800e444 <vTaskSwitchContext+0x24>
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4a13      	ldr	r2, [pc, #76]	@ (800e4d4 <vTaskSwitchContext+0xb4>)
 800e488:	4413      	add	r3, r2
 800e48a:	60bb      	str	r3, [r7, #8]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	685a      	ldr	r2, [r3, #4]
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	605a      	str	r2, [r3, #4]
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	3308      	adds	r3, #8
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d104      	bne.n	800e4ac <vTaskSwitchContext+0x8c>
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	685a      	ldr	r2, [r3, #4]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	605a      	str	r2, [r3, #4]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	4a09      	ldr	r2, [pc, #36]	@ (800e4d8 <vTaskSwitchContext+0xb8>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	4a06      	ldr	r2, [pc, #24]	@ (800e4d0 <vTaskSwitchContext+0xb0>)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6013      	str	r3, [r2, #0]
}
 800e4bc:	bf00      	nop
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	240011ec 	.word	0x240011ec
 800e4cc:	240011d8 	.word	0x240011d8
 800e4d0:	240011cc 	.word	0x240011cc
 800e4d4:	24000cf4 	.word	0x24000cf4
 800e4d8:	24000cf0 	.word	0x24000cf0

0800e4dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10b      	bne.n	800e504 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	60fb      	str	r3, [r7, #12]
}
 800e4fe:	bf00      	nop
 800e500:	bf00      	nop
 800e502:	e7fd      	b.n	800e500 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e504:	4b07      	ldr	r3, [pc, #28]	@ (800e524 <vTaskPlaceOnEventList+0x48>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3318      	adds	r3, #24
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7fe fe70 	bl	800d1f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e512:	2101      	movs	r1, #1
 800e514:	6838      	ldr	r0, [r7, #0]
 800e516:	f000 fa81 	bl	800ea1c <prvAddCurrentTaskToDelayedList>
}
 800e51a:	bf00      	nop
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	24000cf0 	.word	0x24000cf0

0800e528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10b      	bne.n	800e552 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	617b      	str	r3, [r7, #20]
}
 800e54c:	bf00      	nop
 800e54e:	bf00      	nop
 800e550:	e7fd      	b.n	800e54e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e552:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <vTaskPlaceOnEventListRestricted+0x54>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3318      	adds	r3, #24
 800e558:	4619      	mov	r1, r3
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7fe fe25 	bl	800d1aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d002      	beq.n	800e56c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e566:	f04f 33ff 	mov.w	r3, #4294967295
 800e56a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	68b8      	ldr	r0, [r7, #8]
 800e570:	f000 fa54 	bl	800ea1c <prvAddCurrentTaskToDelayedList>
	}
 800e574:	bf00      	nop
 800e576:	3718      	adds	r7, #24
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	24000cf0 	.word	0x24000cf0

0800e580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d10b      	bne.n	800e5ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59a:	f383 8811 	msr	BASEPRI, r3
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	60fb      	str	r3, [r7, #12]
}
 800e5a8:	bf00      	nop
 800e5aa:	bf00      	nop
 800e5ac:	e7fd      	b.n	800e5aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	3318      	adds	r3, #24
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe fe56 	bl	800d264 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800e630 <xTaskRemoveFromEventList+0xb0>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d11d      	bne.n	800e5fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe fe4d 	bl	800d264 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ce:	4b19      	ldr	r3, [pc, #100]	@ (800e634 <xTaskRemoveFromEventList+0xb4>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d903      	bls.n	800e5de <xTaskRemoveFromEventList+0x5e>
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5da:	4a16      	ldr	r2, [pc, #88]	@ (800e634 <xTaskRemoveFromEventList+0xb4>)
 800e5dc:	6013      	str	r3, [r2, #0]
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4a13      	ldr	r2, [pc, #76]	@ (800e638 <xTaskRemoveFromEventList+0xb8>)
 800e5ec:	441a      	add	r2, r3
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	f7fe fdd8 	bl	800d1aa <vListInsertEnd>
 800e5fa:	e005      	b.n	800e608 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	3318      	adds	r3, #24
 800e600:	4619      	mov	r1, r3
 800e602:	480e      	ldr	r0, [pc, #56]	@ (800e63c <xTaskRemoveFromEventList+0xbc>)
 800e604:	f7fe fdd1 	bl	800d1aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60c:	4b0c      	ldr	r3, [pc, #48]	@ (800e640 <xTaskRemoveFromEventList+0xc0>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e612:	429a      	cmp	r2, r3
 800e614:	d905      	bls.n	800e622 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e616:	2301      	movs	r3, #1
 800e618:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e61a:	4b0a      	ldr	r3, [pc, #40]	@ (800e644 <xTaskRemoveFromEventList+0xc4>)
 800e61c:	2201      	movs	r2, #1
 800e61e:	601a      	str	r2, [r3, #0]
 800e620:	e001      	b.n	800e626 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e622:	2300      	movs	r3, #0
 800e624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e626:	697b      	ldr	r3, [r7, #20]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3718      	adds	r7, #24
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	240011ec 	.word	0x240011ec
 800e634:	240011cc 	.word	0x240011cc
 800e638:	24000cf4 	.word	0x24000cf4
 800e63c:	24001184 	.word	0x24001184
 800e640:	24000cf0 	.word	0x24000cf0
 800e644:	240011d8 	.word	0x240011d8

0800e648 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e650:	4b06      	ldr	r3, [pc, #24]	@ (800e66c <vTaskInternalSetTimeOutState+0x24>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e658:	4b05      	ldr	r3, [pc, #20]	@ (800e670 <vTaskInternalSetTimeOutState+0x28>)
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	605a      	str	r2, [r3, #4]
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr
 800e66c:	240011dc 	.word	0x240011dc
 800e670:	240011c8 	.word	0x240011c8

0800e674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10b      	bne.n	800e69c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	613b      	str	r3, [r7, #16]
}
 800e696:	bf00      	nop
 800e698:	bf00      	nop
 800e69a:	e7fd      	b.n	800e698 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10b      	bne.n	800e6ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	60fb      	str	r3, [r7, #12]
}
 800e6b4:	bf00      	nop
 800e6b6:	bf00      	nop
 800e6b8:	e7fd      	b.n	800e6b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e6ba:	f000 fe8d 	bl	800f3d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e6be:	4b1d      	ldr	r3, [pc, #116]	@ (800e734 <xTaskCheckForTimeOut+0xc0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	69ba      	ldr	r2, [r7, #24]
 800e6ca:	1ad3      	subs	r3, r2, r3
 800e6cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d6:	d102      	bne.n	800e6de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	61fb      	str	r3, [r7, #28]
 800e6dc:	e023      	b.n	800e726 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	4b15      	ldr	r3, [pc, #84]	@ (800e738 <xTaskCheckForTimeOut+0xc4>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d007      	beq.n	800e6fa <xTaskCheckForTimeOut+0x86>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	69ba      	ldr	r2, [r7, #24]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d302      	bcc.n	800e6fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	61fb      	str	r3, [r7, #28]
 800e6f8:	e015      	b.n	800e726 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	429a      	cmp	r2, r3
 800e702:	d20b      	bcs.n	800e71c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	1ad2      	subs	r2, r2, r3
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff ff99 	bl	800e648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e716:	2300      	movs	r3, #0
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	e004      	b.n	800e726 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	2200      	movs	r2, #0
 800e720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e722:	2301      	movs	r3, #1
 800e724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e726:	f000 fe89 	bl	800f43c <vPortExitCritical>

	return xReturn;
 800e72a:	69fb      	ldr	r3, [r7, #28]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	240011c8 	.word	0x240011c8
 800e738:	240011dc 	.word	0x240011dc

0800e73c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e740:	4b03      	ldr	r3, [pc, #12]	@ (800e750 <vTaskMissedYield+0x14>)
 800e742:	2201      	movs	r2, #1
 800e744:	601a      	str	r2, [r3, #0]
}
 800e746:	bf00      	nop
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr
 800e750:	240011d8 	.word	0x240011d8

0800e754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e75c:	f000 f852 	bl	800e804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e760:	4b06      	ldr	r3, [pc, #24]	@ (800e77c <prvIdleTask+0x28>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d9f9      	bls.n	800e75c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e768:	4b05      	ldr	r3, [pc, #20]	@ (800e780 <prvIdleTask+0x2c>)
 800e76a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e778:	e7f0      	b.n	800e75c <prvIdleTask+0x8>
 800e77a:	bf00      	nop
 800e77c:	24000cf4 	.word	0x24000cf4
 800e780:	e000ed04 	.word	0xe000ed04

0800e784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e78a:	2300      	movs	r3, #0
 800e78c:	607b      	str	r3, [r7, #4]
 800e78e:	e00c      	b.n	800e7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	4613      	mov	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4a12      	ldr	r2, [pc, #72]	@ (800e7e4 <prvInitialiseTaskLists+0x60>)
 800e79c:	4413      	add	r3, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fcd6 	bl	800d150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	607b      	str	r3, [r7, #4]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b37      	cmp	r3, #55	@ 0x37
 800e7ae:	d9ef      	bls.n	800e790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7b0:	480d      	ldr	r0, [pc, #52]	@ (800e7e8 <prvInitialiseTaskLists+0x64>)
 800e7b2:	f7fe fccd 	bl	800d150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7b6:	480d      	ldr	r0, [pc, #52]	@ (800e7ec <prvInitialiseTaskLists+0x68>)
 800e7b8:	f7fe fcca 	bl	800d150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e7bc:	480c      	ldr	r0, [pc, #48]	@ (800e7f0 <prvInitialiseTaskLists+0x6c>)
 800e7be:	f7fe fcc7 	bl	800d150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e7c2:	480c      	ldr	r0, [pc, #48]	@ (800e7f4 <prvInitialiseTaskLists+0x70>)
 800e7c4:	f7fe fcc4 	bl	800d150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e7c8:	480b      	ldr	r0, [pc, #44]	@ (800e7f8 <prvInitialiseTaskLists+0x74>)
 800e7ca:	f7fe fcc1 	bl	800d150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e7ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e7fc <prvInitialiseTaskLists+0x78>)
 800e7d0:	4a05      	ldr	r2, [pc, #20]	@ (800e7e8 <prvInitialiseTaskLists+0x64>)
 800e7d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e7d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e800 <prvInitialiseTaskLists+0x7c>)
 800e7d6:	4a05      	ldr	r2, [pc, #20]	@ (800e7ec <prvInitialiseTaskLists+0x68>)
 800e7d8:	601a      	str	r2, [r3, #0]
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	24000cf4 	.word	0x24000cf4
 800e7e8:	24001154 	.word	0x24001154
 800e7ec:	24001168 	.word	0x24001168
 800e7f0:	24001184 	.word	0x24001184
 800e7f4:	24001198 	.word	0x24001198
 800e7f8:	240011b0 	.word	0x240011b0
 800e7fc:	2400117c 	.word	0x2400117c
 800e800:	24001180 	.word	0x24001180

0800e804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e80a:	e019      	b.n	800e840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e80c:	f000 fde4 	bl	800f3d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e810:	4b10      	ldr	r3, [pc, #64]	@ (800e854 <prvCheckTasksWaitingTermination+0x50>)
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3304      	adds	r3, #4
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe fd21 	bl	800d264 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e822:	4b0d      	ldr	r3, [pc, #52]	@ (800e858 <prvCheckTasksWaitingTermination+0x54>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3b01      	subs	r3, #1
 800e828:	4a0b      	ldr	r2, [pc, #44]	@ (800e858 <prvCheckTasksWaitingTermination+0x54>)
 800e82a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e82c:	4b0b      	ldr	r3, [pc, #44]	@ (800e85c <prvCheckTasksWaitingTermination+0x58>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	3b01      	subs	r3, #1
 800e832:	4a0a      	ldr	r2, [pc, #40]	@ (800e85c <prvCheckTasksWaitingTermination+0x58>)
 800e834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e836:	f000 fe01 	bl	800f43c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f810 	bl	800e860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e840:	4b06      	ldr	r3, [pc, #24]	@ (800e85c <prvCheckTasksWaitingTermination+0x58>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1e1      	bne.n	800e80c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e848:	bf00      	nop
 800e84a:	bf00      	nop
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	24001198 	.word	0x24001198
 800e858:	240011c4 	.word	0x240011c4
 800e85c:	240011ac 	.word	0x240011ac

0800e860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d108      	bne.n	800e884 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e876:	4618      	mov	r0, r3
 800e878:	f000 ff9e 	bl	800f7b8 <vPortFree>
				vPortFree( pxTCB );
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 ff9b 	bl	800f7b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e882:	e019      	b.n	800e8b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d103      	bne.n	800e896 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 ff92 	bl	800f7b8 <vPortFree>
	}
 800e894:	e010      	b.n	800e8b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d00b      	beq.n	800e8b8 <prvDeleteTCB+0x58>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	60fb      	str	r3, [r7, #12]
}
 800e8b2:	bf00      	nop
 800e8b4:	bf00      	nop
 800e8b6:	e7fd      	b.n	800e8b4 <prvDeleteTCB+0x54>
	}
 800e8b8:	bf00      	nop
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f8 <prvResetNextTaskUnblockTime+0x38>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d104      	bne.n	800e8da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8fc <prvResetNextTaskUnblockTime+0x3c>)
 800e8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e8d8:	e008      	b.n	800e8ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8da:	4b07      	ldr	r3, [pc, #28]	@ (800e8f8 <prvResetNextTaskUnblockTime+0x38>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	4a04      	ldr	r2, [pc, #16]	@ (800e8fc <prvResetNextTaskUnblockTime+0x3c>)
 800e8ea:	6013      	str	r3, [r2, #0]
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	2400117c 	.word	0x2400117c
 800e8fc:	240011e4 	.word	0x240011e4

0800e900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <xTaskGetSchedulerState+0x34>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d102      	bne.n	800e914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e90e:	2301      	movs	r3, #1
 800e910:	607b      	str	r3, [r7, #4]
 800e912:	e008      	b.n	800e926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e914:	4b08      	ldr	r3, [pc, #32]	@ (800e938 <xTaskGetSchedulerState+0x38>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e91c:	2302      	movs	r3, #2
 800e91e:	607b      	str	r3, [r7, #4]
 800e920:	e001      	b.n	800e926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e922:	2300      	movs	r3, #0
 800e924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e926:	687b      	ldr	r3, [r7, #4]
	}
 800e928:	4618      	mov	r0, r3
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr
 800e934:	240011d0 	.word	0x240011d0
 800e938:	240011ec 	.word	0x240011ec

0800e93c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e948:	2300      	movs	r3, #0
 800e94a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d058      	beq.n	800ea04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e952:	4b2f      	ldr	r3, [pc, #188]	@ (800ea10 <xTaskPriorityDisinherit+0xd4>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d00b      	beq.n	800e974 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	60fb      	str	r3, [r7, #12]
}
 800e96e:	bf00      	nop
 800e970:	bf00      	nop
 800e972:	e7fd      	b.n	800e970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10b      	bne.n	800e994 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	60bb      	str	r3, [r7, #8]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e998:	1e5a      	subs	r2, r3, #1
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d02c      	beq.n	800ea04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d128      	bne.n	800ea04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe fc54 	bl	800d264 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea14 <xTaskPriorityDisinherit+0xd8>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d903      	bls.n	800e9e4 <xTaskPriorityDisinherit+0xa8>
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9e0:	4a0c      	ldr	r2, [pc, #48]	@ (800ea14 <xTaskPriorityDisinherit+0xd8>)
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	4a09      	ldr	r2, [pc, #36]	@ (800ea18 <xTaskPriorityDisinherit+0xdc>)
 800e9f2:	441a      	add	r2, r3
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	f7fe fbd5 	bl	800d1aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea00:	2301      	movs	r3, #1
 800ea02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea04:	697b      	ldr	r3, [r7, #20]
	}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	24000cf0 	.word	0x24000cf0
 800ea14:	240011cc 	.word	0x240011cc
 800ea18:	24000cf4 	.word	0x24000cf4

0800ea1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea26:	4b21      	ldr	r3, [pc, #132]	@ (800eaac <prvAddCurrentTaskToDelayedList+0x90>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea2c:	4b20      	ldr	r3, [pc, #128]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3304      	adds	r3, #4
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fe fc16 	bl	800d264 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3e:	d10a      	bne.n	800ea56 <prvAddCurrentTaskToDelayedList+0x3a>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d007      	beq.n	800ea56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea46:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4819      	ldr	r0, [pc, #100]	@ (800eab4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ea50:	f7fe fbab 	bl	800d1aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea54:	e026      	b.n	800eaa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea56:	68fa      	ldr	r2, [r7, #12]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ea5e:	4b14      	ldr	r3, [pc, #80]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68ba      	ldr	r2, [r7, #8]
 800ea64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d209      	bcs.n	800ea82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea6e:	4b12      	ldr	r3, [pc, #72]	@ (800eab8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	4b0f      	ldr	r3, [pc, #60]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4619      	mov	r1, r3
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	f7fe fbb9 	bl	800d1f2 <vListInsert>
}
 800ea80:	e010      	b.n	800eaa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea82:	4b0e      	ldr	r3, [pc, #56]	@ (800eabc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f7fe fbaf 	bl	800d1f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea94:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d202      	bcs.n	800eaa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea9e:	4a08      	ldr	r2, [pc, #32]	@ (800eac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	6013      	str	r3, [r2, #0]
}
 800eaa4:	bf00      	nop
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	240011c8 	.word	0x240011c8
 800eab0:	24000cf0 	.word	0x24000cf0
 800eab4:	240011b0 	.word	0x240011b0
 800eab8:	24001180 	.word	0x24001180
 800eabc:	2400117c 	.word	0x2400117c
 800eac0:	240011e4 	.word	0x240011e4

0800eac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08a      	sub	sp, #40	@ 0x28
 800eac8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eace:	f000 fb13 	bl	800f0f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ead2:	4b1d      	ldr	r3, [pc, #116]	@ (800eb48 <xTimerCreateTimerTask+0x84>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d021      	beq.n	800eb1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eae2:	1d3a      	adds	r2, r7, #4
 800eae4:	f107 0108 	add.w	r1, r7, #8
 800eae8:	f107 030c 	add.w	r3, r7, #12
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe fb15 	bl	800d11c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	9202      	str	r2, [sp, #8]
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	2302      	movs	r3, #2
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	2300      	movs	r3, #0
 800eb02:	460a      	mov	r2, r1
 800eb04:	4911      	ldr	r1, [pc, #68]	@ (800eb4c <xTimerCreateTimerTask+0x88>)
 800eb06:	4812      	ldr	r0, [pc, #72]	@ (800eb50 <xTimerCreateTimerTask+0x8c>)
 800eb08:	f7ff f8d0 	bl	800dcac <xTaskCreateStatic>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4a11      	ldr	r2, [pc, #68]	@ (800eb54 <xTimerCreateTimerTask+0x90>)
 800eb10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb12:	4b10      	ldr	r3, [pc, #64]	@ (800eb54 <xTimerCreateTimerTask+0x90>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10b      	bne.n	800eb3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	613b      	str	r3, [r7, #16]
}
 800eb36:	bf00      	nop
 800eb38:	bf00      	nop
 800eb3a:	e7fd      	b.n	800eb38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eb3c:	697b      	ldr	r3, [r7, #20]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	24001220 	.word	0x24001220
 800eb4c:	08015194 	.word	0x08015194
 800eb50:	0800ec91 	.word	0x0800ec91
 800eb54:	24001224 	.word	0x24001224

0800eb58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08a      	sub	sp, #40	@ 0x28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10b      	bne.n	800eb88 <xTimerGenericCommand+0x30>
	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	623b      	str	r3, [r7, #32]
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	e7fd      	b.n	800eb84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb88:	4b19      	ldr	r3, [pc, #100]	@ (800ebf0 <xTimerGenericCommand+0x98>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d02a      	beq.n	800ebe6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b05      	cmp	r3, #5
 800eba0:	dc18      	bgt.n	800ebd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eba2:	f7ff fead 	bl	800e900 <xTaskGetSchedulerState>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d109      	bne.n	800ebc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ebac:	4b10      	ldr	r3, [pc, #64]	@ (800ebf0 <xTimerGenericCommand+0x98>)
 800ebae:	6818      	ldr	r0, [r3, #0]
 800ebb0:	f107 0110 	add.w	r1, r7, #16
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebb8:	f7fe fc88 	bl	800d4cc <xQueueGenericSend>
 800ebbc:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebbe:	e012      	b.n	800ebe6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ebc0:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf0 <xTimerGenericCommand+0x98>)
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	f107 0110 	add.w	r1, r7, #16
 800ebc8:	2300      	movs	r3, #0
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f7fe fc7e 	bl	800d4cc <xQueueGenericSend>
 800ebd0:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebd2:	e008      	b.n	800ebe6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ebd4:	4b06      	ldr	r3, [pc, #24]	@ (800ebf0 <xTimerGenericCommand+0x98>)
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	f107 0110 	add.w	r1, r7, #16
 800ebdc:	2300      	movs	r3, #0
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	f7fe fd76 	bl	800d6d0 <xQueueGenericSendFromISR>
 800ebe4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3728      	adds	r7, #40	@ 0x28
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	24001220 	.word	0x24001220

0800ebf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af02      	add	r7, sp, #8
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfe:	4b23      	ldr	r3, [pc, #140]	@ (800ec8c <prvProcessExpiredTimer+0x98>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fe fb29 	bl	800d264 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec18:	f003 0304 	and.w	r3, r3, #4
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d023      	beq.n	800ec68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	699a      	ldr	r2, [r3, #24]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	18d1      	adds	r1, r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	6978      	ldr	r0, [r7, #20]
 800ec2e:	f000 f8d5 	bl	800eddc <prvInsertTimerInActiveList>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d020      	beq.n	800ec7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec38:	2300      	movs	r3, #0
 800ec3a:	9300      	str	r3, [sp, #0]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	2100      	movs	r1, #0
 800ec42:	6978      	ldr	r0, [r7, #20]
 800ec44:	f7ff ff88 	bl	800eb58 <xTimerGenericCommand>
 800ec48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d114      	bne.n	800ec7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	60fb      	str	r3, [r7, #12]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec6e:	f023 0301 	bic.w	r3, r3, #1
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	6978      	ldr	r0, [r7, #20]
 800ec80:	4798      	blx	r3
}
 800ec82:	bf00      	nop
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	24001218 	.word	0x24001218

0800ec90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec98:	f107 0308 	add.w	r3, r7, #8
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 f859 	bl	800ed54 <prvGetNextExpireTime>
 800eca2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	4619      	mov	r1, r3
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 f805 	bl	800ecb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ecae:	f000 f8d7 	bl	800ee60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ecb2:	bf00      	nop
 800ecb4:	e7f0      	b.n	800ec98 <prvTimerTask+0x8>
	...

0800ecb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ecc2:	f7ff fa37 	bl	800e134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecc6:	f107 0308 	add.w	r3, r7, #8
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 f866 	bl	800ed9c <prvSampleTimeNow>
 800ecd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d130      	bne.n	800ed3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10a      	bne.n	800ecf4 <prvProcessTimerOrBlockTask+0x3c>
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d806      	bhi.n	800ecf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ece6:	f7ff fa33 	bl	800e150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ecea:	68f9      	ldr	r1, [r7, #12]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f7ff ff81 	bl	800ebf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ecf2:	e024      	b.n	800ed3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d008      	beq.n	800ed0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ecfa:	4b13      	ldr	r3, [pc, #76]	@ (800ed48 <prvProcessTimerOrBlockTask+0x90>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d101      	bne.n	800ed08 <prvProcessTimerOrBlockTask+0x50>
 800ed04:	2301      	movs	r3, #1
 800ed06:	e000      	b.n	800ed0a <prvProcessTimerOrBlockTask+0x52>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ed0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed4c <prvProcessTimerOrBlockTask+0x94>)
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	f7fe ff93 	bl	800dc44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ed1e:	f7ff fa17 	bl	800e150 <xTaskResumeAll>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10a      	bne.n	800ed3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ed28:	4b09      	ldr	r3, [pc, #36]	@ (800ed50 <prvProcessTimerOrBlockTask+0x98>)
 800ed2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	f3bf 8f6f 	isb	sy
}
 800ed38:	e001      	b.n	800ed3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ed3a:	f7ff fa09 	bl	800e150 <xTaskResumeAll>
}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	2400121c 	.word	0x2400121c
 800ed4c:	24001220 	.word	0x24001220
 800ed50:	e000ed04 	.word	0xe000ed04

0800ed54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ed5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <prvGetNextExpireTime+0x44>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d101      	bne.n	800ed6a <prvGetNextExpireTime+0x16>
 800ed66:	2201      	movs	r2, #1
 800ed68:	e000      	b.n	800ed6c <prvGetNextExpireTime+0x18>
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d105      	bne.n	800ed84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed78:	4b07      	ldr	r3, [pc, #28]	@ (800ed98 <prvGetNextExpireTime+0x44>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	60fb      	str	r3, [r7, #12]
 800ed82:	e001      	b.n	800ed88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed84:	2300      	movs	r3, #0
 800ed86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed88:	68fb      	ldr	r3, [r7, #12]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3714      	adds	r7, #20
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	24001218 	.word	0x24001218

0800ed9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eda4:	f7ff fa72 	bl	800e28c <xTaskGetTickCount>
 800eda8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800edaa:	4b0b      	ldr	r3, [pc, #44]	@ (800edd8 <prvSampleTimeNow+0x3c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d205      	bcs.n	800edc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800edb4:	f000 f93a 	bl	800f02c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	e002      	b.n	800edc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800edc6:	4a04      	ldr	r2, [pc, #16]	@ (800edd8 <prvSampleTimeNow+0x3c>)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800edcc:	68fb      	ldr	r3, [r7, #12]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	24001228 	.word	0x24001228

0800eddc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b086      	sub	sp, #24
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
 800ede8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800edea:	2300      	movs	r3, #0
 800edec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d812      	bhi.n	800ee28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	1ad2      	subs	r2, r2, r3
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d302      	bcc.n	800ee16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee10:	2301      	movs	r3, #1
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	e01b      	b.n	800ee4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee16:	4b10      	ldr	r3, [pc, #64]	@ (800ee58 <prvInsertTimerInActiveList+0x7c>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4619      	mov	r1, r3
 800ee20:	4610      	mov	r0, r2
 800ee22:	f7fe f9e6 	bl	800d1f2 <vListInsert>
 800ee26:	e012      	b.n	800ee4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d206      	bcs.n	800ee3e <prvInsertTimerInActiveList+0x62>
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d302      	bcc.n	800ee3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e007      	b.n	800ee4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee3e:	4b07      	ldr	r3, [pc, #28]	@ (800ee5c <prvInsertTimerInActiveList+0x80>)
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3304      	adds	r3, #4
 800ee46:	4619      	mov	r1, r3
 800ee48:	4610      	mov	r0, r2
 800ee4a:	f7fe f9d2 	bl	800d1f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ee4e:	697b      	ldr	r3, [r7, #20]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	2400121c 	.word	0x2400121c
 800ee5c:	24001218 	.word	0x24001218

0800ee60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b08e      	sub	sp, #56	@ 0x38
 800ee64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee66:	e0ce      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	da19      	bge.n	800eea2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ee6e:	1d3b      	adds	r3, r7, #4
 800ee70:	3304      	adds	r3, #4
 800ee72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ee74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10b      	bne.n	800ee92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	61fb      	str	r3, [r7, #28]
}
 800ee8c:	bf00      	nop
 800ee8e:	bf00      	nop
 800ee90:	e7fd      	b.n	800ee8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee98:	6850      	ldr	r0, [r2, #4]
 800ee9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee9c:	6892      	ldr	r2, [r2, #8]
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f2c0 80ae 	blt.w	800f006 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb0:	695b      	ldr	r3, [r3, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d004      	beq.n	800eec0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb8:	3304      	adds	r3, #4
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe f9d2 	bl	800d264 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eec0:	463b      	mov	r3, r7
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff ff6a 	bl	800ed9c <prvSampleTimeNow>
 800eec8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b09      	cmp	r3, #9
 800eece:	f200 8097 	bhi.w	800f000 <prvProcessReceivedCommands+0x1a0>
 800eed2:	a201      	add	r2, pc, #4	@ (adr r2, 800eed8 <prvProcessReceivedCommands+0x78>)
 800eed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed8:	0800ef01 	.word	0x0800ef01
 800eedc:	0800ef01 	.word	0x0800ef01
 800eee0:	0800ef01 	.word	0x0800ef01
 800eee4:	0800ef77 	.word	0x0800ef77
 800eee8:	0800ef8b 	.word	0x0800ef8b
 800eeec:	0800efd7 	.word	0x0800efd7
 800eef0:	0800ef01 	.word	0x0800ef01
 800eef4:	0800ef01 	.word	0x0800ef01
 800eef8:	0800ef77 	.word	0x0800ef77
 800eefc:	0800ef8b 	.word	0x0800ef8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef06:	f043 0301 	orr.w	r3, r3, #1
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	18d1      	adds	r1, r2, r3
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef20:	f7ff ff5c 	bl	800eddc <prvInsertTimerInActiveList>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d06c      	beq.n	800f004 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef2c:	6a1b      	ldr	r3, [r3, #32]
 800ef2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d061      	beq.n	800f004 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	441a      	add	r2, r3
 800ef48:	2300      	movs	r3, #0
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	2100      	movs	r1, #0
 800ef50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef52:	f7ff fe01 	bl	800eb58 <xTimerGenericCommand>
 800ef56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d152      	bne.n	800f004 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	61bb      	str	r3, [r7, #24]
}
 800ef70:	bf00      	nop
 800ef72:	bf00      	nop
 800ef74:	e7fd      	b.n	800ef72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef7c:	f023 0301 	bic.w	r3, r3, #1
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ef88:	e03d      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef90:	f043 0301 	orr.w	r3, r3, #1
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800efa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10b      	bne.n	800efc2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	617b      	str	r3, [r7, #20]
}
 800efbc:	bf00      	nop
 800efbe:	bf00      	nop
 800efc0:	e7fd      	b.n	800efbe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	699a      	ldr	r2, [r3, #24]
 800efc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc8:	18d1      	adds	r1, r2, r3
 800efca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efd0:	f7ff ff04 	bl	800eddc <prvInsertTimerInActiveList>
					break;
 800efd4:	e017      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efdc:	f003 0302 	and.w	r3, r3, #2
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d103      	bne.n	800efec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800efe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800efe6:	f000 fbe7 	bl	800f7b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800efea:	e00c      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eff2:	f023 0301 	bic.w	r3, r3, #1
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800effe:	e002      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f000:	bf00      	nop
 800f002:	e000      	b.n	800f006 <prvProcessReceivedCommands+0x1a6>
					break;
 800f004:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f006:	4b08      	ldr	r3, [pc, #32]	@ (800f028 <prvProcessReceivedCommands+0x1c8>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	1d39      	adds	r1, r7, #4
 800f00c:	2200      	movs	r2, #0
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe fbfc 	bl	800d80c <xQueueReceive>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	f47f af26 	bne.w	800ee68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f01c:	bf00      	nop
 800f01e:	bf00      	nop
 800f020:	3730      	adds	r7, #48	@ 0x30
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	24001220 	.word	0x24001220

0800f02c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f032:	e049      	b.n	800f0c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f034:	4b2e      	ldr	r3, [pc, #184]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f03e:	4b2c      	ldr	r3, [pc, #176]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe f909 	bl	800d264 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f060:	f003 0304 	and.w	r3, r3, #4
 800f064:	2b00      	cmp	r3, #0
 800f066:	d02f      	beq.n	800f0c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	4413      	add	r3, r2
 800f070:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	429a      	cmp	r2, r3
 800f078:	d90e      	bls.n	800f098 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f086:	4b1a      	ldr	r3, [pc, #104]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	3304      	adds	r3, #4
 800f08e:	4619      	mov	r1, r3
 800f090:	4610      	mov	r0, r2
 800f092:	f7fe f8ae 	bl	800d1f2 <vListInsert>
 800f096:	e017      	b.n	800f0c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f098:	2300      	movs	r3, #0
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	2300      	movs	r3, #0
 800f09e:	693a      	ldr	r2, [r7, #16]
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f7ff fd58 	bl	800eb58 <xTimerGenericCommand>
 800f0a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d10b      	bne.n	800f0c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	603b      	str	r3, [r7, #0]
}
 800f0c2:	bf00      	nop
 800f0c4:	bf00      	nop
 800f0c6:	e7fd      	b.n	800f0c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0c8:	4b09      	ldr	r3, [pc, #36]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d1b0      	bne.n	800f034 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f0d2:	4b07      	ldr	r3, [pc, #28]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f0d8:	4b06      	ldr	r3, [pc, #24]	@ (800f0f4 <prvSwitchTimerLists+0xc8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a04      	ldr	r2, [pc, #16]	@ (800f0f0 <prvSwitchTimerLists+0xc4>)
 800f0de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f0e0:	4a04      	ldr	r2, [pc, #16]	@ (800f0f4 <prvSwitchTimerLists+0xc8>)
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	6013      	str	r3, [r2, #0]
}
 800f0e6:	bf00      	nop
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	24001218 	.word	0x24001218
 800f0f4:	2400121c 	.word	0x2400121c

0800f0f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f0fe:	f000 f96b 	bl	800f3d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f102:	4b15      	ldr	r3, [pc, #84]	@ (800f158 <prvCheckForValidListAndQueue+0x60>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d120      	bne.n	800f14c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f10a:	4814      	ldr	r0, [pc, #80]	@ (800f15c <prvCheckForValidListAndQueue+0x64>)
 800f10c:	f7fe f820 	bl	800d150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f110:	4813      	ldr	r0, [pc, #76]	@ (800f160 <prvCheckForValidListAndQueue+0x68>)
 800f112:	f7fe f81d 	bl	800d150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f116:	4b13      	ldr	r3, [pc, #76]	@ (800f164 <prvCheckForValidListAndQueue+0x6c>)
 800f118:	4a10      	ldr	r2, [pc, #64]	@ (800f15c <prvCheckForValidListAndQueue+0x64>)
 800f11a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f11c:	4b12      	ldr	r3, [pc, #72]	@ (800f168 <prvCheckForValidListAndQueue+0x70>)
 800f11e:	4a10      	ldr	r2, [pc, #64]	@ (800f160 <prvCheckForValidListAndQueue+0x68>)
 800f120:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f122:	2300      	movs	r3, #0
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	4b11      	ldr	r3, [pc, #68]	@ (800f16c <prvCheckForValidListAndQueue+0x74>)
 800f128:	4a11      	ldr	r2, [pc, #68]	@ (800f170 <prvCheckForValidListAndQueue+0x78>)
 800f12a:	2110      	movs	r1, #16
 800f12c:	200a      	movs	r0, #10
 800f12e:	f7fe f92d 	bl	800d38c <xQueueGenericCreateStatic>
 800f132:	4603      	mov	r3, r0
 800f134:	4a08      	ldr	r2, [pc, #32]	@ (800f158 <prvCheckForValidListAndQueue+0x60>)
 800f136:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f138:	4b07      	ldr	r3, [pc, #28]	@ (800f158 <prvCheckForValidListAndQueue+0x60>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d005      	beq.n	800f14c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f140:	4b05      	ldr	r3, [pc, #20]	@ (800f158 <prvCheckForValidListAndQueue+0x60>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	490b      	ldr	r1, [pc, #44]	@ (800f174 <prvCheckForValidListAndQueue+0x7c>)
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe fd52 	bl	800dbf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f14c:	f000 f976 	bl	800f43c <vPortExitCritical>
}
 800f150:	bf00      	nop
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	24001220 	.word	0x24001220
 800f15c:	240011f0 	.word	0x240011f0
 800f160:	24001204 	.word	0x24001204
 800f164:	24001218 	.word	0x24001218
 800f168:	2400121c 	.word	0x2400121c
 800f16c:	240012cc 	.word	0x240012cc
 800f170:	2400122c 	.word	0x2400122c
 800f174:	0801519c 	.word	0x0801519c

0800f178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	3b04      	subs	r3, #4
 800f188:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3b04      	subs	r3, #4
 800f196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f023 0201 	bic.w	r2, r3, #1
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	3b04      	subs	r3, #4
 800f1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1a8:	4a0c      	ldr	r2, [pc, #48]	@ (800f1dc <pxPortInitialiseStack+0x64>)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	3b14      	subs	r3, #20
 800f1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3b04      	subs	r3, #4
 800f1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f06f 0202 	mvn.w	r2, #2
 800f1c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	3b20      	subs	r3, #32
 800f1cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr
 800f1dc:	0800f1e1 	.word	0x0800f1e1

0800f1e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1ea:	4b13      	ldr	r3, [pc, #76]	@ (800f238 <prvTaskExitError+0x58>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f2:	d00b      	beq.n	800f20c <prvTaskExitError+0x2c>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	60fb      	str	r3, [r7, #12]
}
 800f206:	bf00      	nop
 800f208:	bf00      	nop
 800f20a:	e7fd      	b.n	800f208 <prvTaskExitError+0x28>
	__asm volatile
 800f20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f210:	f383 8811 	msr	BASEPRI, r3
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	60bb      	str	r3, [r7, #8]
}
 800f21e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f220:	bf00      	nop
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0fc      	beq.n	800f222 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f228:	bf00      	nop
 800f22a:	bf00      	nop
 800f22c:	3714      	adds	r7, #20
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	2400009c 	.word	0x2400009c
 800f23c:	00000000 	.word	0x00000000

0800f240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f240:	4b07      	ldr	r3, [pc, #28]	@ (800f260 <pxCurrentTCBConst2>)
 800f242:	6819      	ldr	r1, [r3, #0]
 800f244:	6808      	ldr	r0, [r1, #0]
 800f246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24a:	f380 8809 	msr	PSP, r0
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f04f 0000 	mov.w	r0, #0
 800f256:	f380 8811 	msr	BASEPRI, r0
 800f25a:	4770      	bx	lr
 800f25c:	f3af 8000 	nop.w

0800f260 <pxCurrentTCBConst2>:
 800f260:	24000cf0 	.word	0x24000cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop

0800f268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f268:	4808      	ldr	r0, [pc, #32]	@ (800f28c <prvPortStartFirstTask+0x24>)
 800f26a:	6800      	ldr	r0, [r0, #0]
 800f26c:	6800      	ldr	r0, [r0, #0]
 800f26e:	f380 8808 	msr	MSP, r0
 800f272:	f04f 0000 	mov.w	r0, #0
 800f276:	f380 8814 	msr	CONTROL, r0
 800f27a:	b662      	cpsie	i
 800f27c:	b661      	cpsie	f
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	df00      	svc	0
 800f288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f28a:	bf00      	nop
 800f28c:	e000ed08 	.word	0xe000ed08

0800f290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f296:	4b47      	ldr	r3, [pc, #284]	@ (800f3b4 <xPortStartScheduler+0x124>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4a47      	ldr	r2, [pc, #284]	@ (800f3b8 <xPortStartScheduler+0x128>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d10b      	bne.n	800f2b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	613b      	str	r3, [r7, #16]
}
 800f2b2:	bf00      	nop
 800f2b4:	bf00      	nop
 800f2b6:	e7fd      	b.n	800f2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f3b4 <xPortStartScheduler+0x124>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f3bc <xPortStartScheduler+0x12c>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d10b      	bne.n	800f2da <xPortStartScheduler+0x4a>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	60fb      	str	r3, [r7, #12]
}
 800f2d4:	bf00      	nop
 800f2d6:	bf00      	nop
 800f2d8:	e7fd      	b.n	800f2d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f2da:	4b39      	ldr	r3, [pc, #228]	@ (800f3c0 <xPortStartScheduler+0x130>)
 800f2dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	22ff      	movs	r2, #255	@ 0xff
 800f2ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f2f4:	78fb      	ldrb	r3, [r7, #3]
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	4b31      	ldr	r3, [pc, #196]	@ (800f3c4 <xPortStartScheduler+0x134>)
 800f300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f302:	4b31      	ldr	r3, [pc, #196]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f304:	2207      	movs	r2, #7
 800f306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f308:	e009      	b.n	800f31e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f30a:	4b2f      	ldr	r3, [pc, #188]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3b01      	subs	r3, #1
 800f310:	4a2d      	ldr	r2, [pc, #180]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f314:	78fb      	ldrb	r3, [r7, #3]
 800f316:	b2db      	uxtb	r3, r3
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f31e:	78fb      	ldrb	r3, [r7, #3]
 800f320:	b2db      	uxtb	r3, r3
 800f322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f326:	2b80      	cmp	r3, #128	@ 0x80
 800f328:	d0ef      	beq.n	800f30a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f32a:	4b27      	ldr	r3, [pc, #156]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f1c3 0307 	rsb	r3, r3, #7
 800f332:	2b04      	cmp	r3, #4
 800f334:	d00b      	beq.n	800f34e <xPortStartScheduler+0xbe>
	__asm volatile
 800f336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33a:	f383 8811 	msr	BASEPRI, r3
 800f33e:	f3bf 8f6f 	isb	sy
 800f342:	f3bf 8f4f 	dsb	sy
 800f346:	60bb      	str	r3, [r7, #8]
}
 800f348:	bf00      	nop
 800f34a:	bf00      	nop
 800f34c:	e7fd      	b.n	800f34a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f34e:	4b1e      	ldr	r3, [pc, #120]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	021b      	lsls	r3, r3, #8
 800f354:	4a1c      	ldr	r2, [pc, #112]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f358:	4b1b      	ldr	r3, [pc, #108]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f360:	4a19      	ldr	r2, [pc, #100]	@ (800f3c8 <xPortStartScheduler+0x138>)
 800f362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	b2da      	uxtb	r2, r3
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f36c:	4b17      	ldr	r3, [pc, #92]	@ (800f3cc <xPortStartScheduler+0x13c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a16      	ldr	r2, [pc, #88]	@ (800f3cc <xPortStartScheduler+0x13c>)
 800f372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f378:	4b14      	ldr	r3, [pc, #80]	@ (800f3cc <xPortStartScheduler+0x13c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a13      	ldr	r2, [pc, #76]	@ (800f3cc <xPortStartScheduler+0x13c>)
 800f37e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f384:	f000 f8da 	bl	800f53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f388:	4b11      	ldr	r3, [pc, #68]	@ (800f3d0 <xPortStartScheduler+0x140>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f38e:	f000 f8f9 	bl	800f584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f392:	4b10      	ldr	r3, [pc, #64]	@ (800f3d4 <xPortStartScheduler+0x144>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a0f      	ldr	r2, [pc, #60]	@ (800f3d4 <xPortStartScheduler+0x144>)
 800f398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f39c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f39e:	f7ff ff63 	bl	800f268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f3a2:	f7ff f83d 	bl	800e420 <vTaskSwitchContext>
	prvTaskExitError();
 800f3a6:	f7ff ff1b 	bl	800f1e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3718      	adds	r7, #24
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	e000ed00 	.word	0xe000ed00
 800f3b8:	410fc271 	.word	0x410fc271
 800f3bc:	410fc270 	.word	0x410fc270
 800f3c0:	e000e400 	.word	0xe000e400
 800f3c4:	2400131c 	.word	0x2400131c
 800f3c8:	24001320 	.word	0x24001320
 800f3cc:	e000ed20 	.word	0xe000ed20
 800f3d0:	2400009c 	.word	0x2400009c
 800f3d4:	e000ef34 	.word	0xe000ef34

0800f3d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	607b      	str	r3, [r7, #4]
}
 800f3f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f3f2:	4b10      	ldr	r3, [pc, #64]	@ (800f434 <vPortEnterCritical+0x5c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	4a0e      	ldr	r2, [pc, #56]	@ (800f434 <vPortEnterCritical+0x5c>)
 800f3fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f434 <vPortEnterCritical+0x5c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d110      	bne.n	800f426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f404:	4b0c      	ldr	r3, [pc, #48]	@ (800f438 <vPortEnterCritical+0x60>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00b      	beq.n	800f426 <vPortEnterCritical+0x4e>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	603b      	str	r3, [r7, #0]
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	e7fd      	b.n	800f422 <vPortEnterCritical+0x4a>
	}
}
 800f426:	bf00      	nop
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	2400009c 	.word	0x2400009c
 800f438:	e000ed04 	.word	0xe000ed04

0800f43c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f442:	4b12      	ldr	r3, [pc, #72]	@ (800f48c <vPortExitCritical+0x50>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10b      	bne.n	800f462 <vPortExitCritical+0x26>
	__asm volatile
 800f44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44e:	f383 8811 	msr	BASEPRI, r3
 800f452:	f3bf 8f6f 	isb	sy
 800f456:	f3bf 8f4f 	dsb	sy
 800f45a:	607b      	str	r3, [r7, #4]
}
 800f45c:	bf00      	nop
 800f45e:	bf00      	nop
 800f460:	e7fd      	b.n	800f45e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f462:	4b0a      	ldr	r3, [pc, #40]	@ (800f48c <vPortExitCritical+0x50>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	3b01      	subs	r3, #1
 800f468:	4a08      	ldr	r2, [pc, #32]	@ (800f48c <vPortExitCritical+0x50>)
 800f46a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f46c:	4b07      	ldr	r3, [pc, #28]	@ (800f48c <vPortExitCritical+0x50>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d105      	bne.n	800f480 <vPortExitCritical+0x44>
 800f474:	2300      	movs	r3, #0
 800f476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	f383 8811 	msr	BASEPRI, r3
}
 800f47e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	2400009c 	.word	0x2400009c

0800f490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f490:	f3ef 8009 	mrs	r0, PSP
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	4b15      	ldr	r3, [pc, #84]	@ (800f4f0 <pxCurrentTCBConst>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	f01e 0f10 	tst.w	lr, #16
 800f4a0:	bf08      	it	eq
 800f4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4aa:	6010      	str	r0, [r2, #0]
 800f4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f4b4:	f380 8811 	msr	BASEPRI, r0
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f7fe ffae 	bl	800e420 <vTaskSwitchContext>
 800f4c4:	f04f 0000 	mov.w	r0, #0
 800f4c8:	f380 8811 	msr	BASEPRI, r0
 800f4cc:	bc09      	pop	{r0, r3}
 800f4ce:	6819      	ldr	r1, [r3, #0]
 800f4d0:	6808      	ldr	r0, [r1, #0]
 800f4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d6:	f01e 0f10 	tst.w	lr, #16
 800f4da:	bf08      	it	eq
 800f4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f4e0:	f380 8809 	msr	PSP, r0
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	f3af 8000 	nop.w

0800f4f0 <pxCurrentTCBConst>:
 800f4f0:	24000cf0 	.word	0x24000cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop

0800f4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	607b      	str	r3, [r7, #4]
}
 800f510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f512:	f7fe fecb 	bl	800e2ac <xTaskIncrementTick>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d003      	beq.n	800f524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f51c:	4b06      	ldr	r3, [pc, #24]	@ (800f538 <xPortSysTickHandler+0x40>)
 800f51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	2300      	movs	r3, #0
 800f526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	f383 8811 	msr	BASEPRI, r3
}
 800f52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	e000ed04 	.word	0xe000ed04

0800f53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f53c:	b480      	push	{r7}
 800f53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f540:	4b0b      	ldr	r3, [pc, #44]	@ (800f570 <vPortSetupTimerInterrupt+0x34>)
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f546:	4b0b      	ldr	r3, [pc, #44]	@ (800f574 <vPortSetupTimerInterrupt+0x38>)
 800f548:	2200      	movs	r2, #0
 800f54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f54c:	4b0a      	ldr	r3, [pc, #40]	@ (800f578 <vPortSetupTimerInterrupt+0x3c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a0a      	ldr	r2, [pc, #40]	@ (800f57c <vPortSetupTimerInterrupt+0x40>)
 800f552:	fba2 2303 	umull	r2, r3, r2, r3
 800f556:	099b      	lsrs	r3, r3, #6
 800f558:	4a09      	ldr	r2, [pc, #36]	@ (800f580 <vPortSetupTimerInterrupt+0x44>)
 800f55a:	3b01      	subs	r3, #1
 800f55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f55e:	4b04      	ldr	r3, [pc, #16]	@ (800f570 <vPortSetupTimerInterrupt+0x34>)
 800f560:	2207      	movs	r2, #7
 800f562:	601a      	str	r2, [r3, #0]
}
 800f564:	bf00      	nop
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	e000e010 	.word	0xe000e010
 800f574:	e000e018 	.word	0xe000e018
 800f578:	24000000 	.word	0x24000000
 800f57c:	10624dd3 	.word	0x10624dd3
 800f580:	e000e014 	.word	0xe000e014

0800f584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f594 <vPortEnableVFP+0x10>
 800f588:	6801      	ldr	r1, [r0, #0]
 800f58a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f58e:	6001      	str	r1, [r0, #0]
 800f590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f592:	bf00      	nop
 800f594:	e000ed88 	.word	0xe000ed88

0800f598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f59e:	f3ef 8305 	mrs	r3, IPSR
 800f5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b0f      	cmp	r3, #15
 800f5a8:	d915      	bls.n	800f5d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f5aa:	4a18      	ldr	r2, [pc, #96]	@ (800f60c <vPortValidateInterruptPriority+0x74>)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5b4:	4b16      	ldr	r3, [pc, #88]	@ (800f610 <vPortValidateInterruptPriority+0x78>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	7afa      	ldrb	r2, [r7, #11]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d20b      	bcs.n	800f5d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	607b      	str	r3, [r7, #4]
}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	e7fd      	b.n	800f5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f614 <vPortValidateInterruptPriority+0x7c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f5de:	4b0e      	ldr	r3, [pc, #56]	@ (800f618 <vPortValidateInterruptPriority+0x80>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d90b      	bls.n	800f5fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ea:	f383 8811 	msr	BASEPRI, r3
 800f5ee:	f3bf 8f6f 	isb	sy
 800f5f2:	f3bf 8f4f 	dsb	sy
 800f5f6:	603b      	str	r3, [r7, #0]
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	e7fd      	b.n	800f5fa <vPortValidateInterruptPriority+0x62>
	}
 800f5fe:	bf00      	nop
 800f600:	3714      	adds	r7, #20
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	e000e3f0 	.word	0xe000e3f0
 800f610:	2400131c 	.word	0x2400131c
 800f614:	e000ed0c 	.word	0xe000ed0c
 800f618:	24001320 	.word	0x24001320

0800f61c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08a      	sub	sp, #40	@ 0x28
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f624:	2300      	movs	r3, #0
 800f626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f628:	f7fe fd84 	bl	800e134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f62c:	4b5c      	ldr	r3, [pc, #368]	@ (800f7a0 <pvPortMalloc+0x184>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f634:	f000 f924 	bl	800f880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f638:	4b5a      	ldr	r3, [pc, #360]	@ (800f7a4 <pvPortMalloc+0x188>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4013      	ands	r3, r2
 800f640:	2b00      	cmp	r3, #0
 800f642:	f040 8095 	bne.w	800f770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d01e      	beq.n	800f68a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f64c:	2208      	movs	r2, #8
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4413      	add	r3, r2
 800f652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f003 0307 	and.w	r3, r3, #7
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d015      	beq.n	800f68a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f023 0307 	bic.w	r3, r3, #7
 800f664:	3308      	adds	r3, #8
 800f666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f003 0307 	and.w	r3, r3, #7
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <pvPortMalloc+0x6e>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	617b      	str	r3, [r7, #20]
}
 800f684:	bf00      	nop
 800f686:	bf00      	nop
 800f688:	e7fd      	b.n	800f686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d06f      	beq.n	800f770 <pvPortMalloc+0x154>
 800f690:	4b45      	ldr	r3, [pc, #276]	@ (800f7a8 <pvPortMalloc+0x18c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	429a      	cmp	r2, r3
 800f698:	d86a      	bhi.n	800f770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f69a:	4b44      	ldr	r3, [pc, #272]	@ (800f7ac <pvPortMalloc+0x190>)
 800f69c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f69e:	4b43      	ldr	r3, [pc, #268]	@ (800f7ac <pvPortMalloc+0x190>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6a4:	e004      	b.n	800f6b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d903      	bls.n	800f6c2 <pvPortMalloc+0xa6>
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1f1      	bne.n	800f6a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6c2:	4b37      	ldr	r3, [pc, #220]	@ (800f7a0 <pvPortMalloc+0x184>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d051      	beq.n	800f770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2208      	movs	r2, #8
 800f6d2:	4413      	add	r3, r2
 800f6d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e0:	685a      	ldr	r2, [r3, #4]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	1ad2      	subs	r2, r2, r3
 800f6e6:	2308      	movs	r3, #8
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d920      	bls.n	800f730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	f003 0307 	and.w	r3, r3, #7
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00b      	beq.n	800f718 <pvPortMalloc+0xfc>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	613b      	str	r3, [r7, #16]
}
 800f712:	bf00      	nop
 800f714:	bf00      	nop
 800f716:	e7fd      	b.n	800f714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	1ad2      	subs	r2, r2, r3
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f72a:	69b8      	ldr	r0, [r7, #24]
 800f72c:	f000 f90a 	bl	800f944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f730:	4b1d      	ldr	r3, [pc, #116]	@ (800f7a8 <pvPortMalloc+0x18c>)
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	4a1b      	ldr	r2, [pc, #108]	@ (800f7a8 <pvPortMalloc+0x18c>)
 800f73c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f73e:	4b1a      	ldr	r3, [pc, #104]	@ (800f7a8 <pvPortMalloc+0x18c>)
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	4b1b      	ldr	r3, [pc, #108]	@ (800f7b0 <pvPortMalloc+0x194>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	d203      	bcs.n	800f752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f74a:	4b17      	ldr	r3, [pc, #92]	@ (800f7a8 <pvPortMalloc+0x18c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	4a18      	ldr	r2, [pc, #96]	@ (800f7b0 <pvPortMalloc+0x194>)
 800f750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	4b13      	ldr	r3, [pc, #76]	@ (800f7a4 <pvPortMalloc+0x188>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	431a      	orrs	r2, r3
 800f75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f766:	4b13      	ldr	r3, [pc, #76]	@ (800f7b4 <pvPortMalloc+0x198>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3301      	adds	r3, #1
 800f76c:	4a11      	ldr	r2, [pc, #68]	@ (800f7b4 <pvPortMalloc+0x198>)
 800f76e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f770:	f7fe fcee 	bl	800e150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00b      	beq.n	800f796 <pvPortMalloc+0x17a>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	60fb      	str	r3, [r7, #12]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <pvPortMalloc+0x176>
	return pvReturn;
 800f796:	69fb      	ldr	r3, [r7, #28]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3728      	adds	r7, #40	@ 0x28
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	24004f2c 	.word	0x24004f2c
 800f7a4:	24004f40 	.word	0x24004f40
 800f7a8:	24004f30 	.word	0x24004f30
 800f7ac:	24004f24 	.word	0x24004f24
 800f7b0:	24004f34 	.word	0x24004f34
 800f7b4:	24004f38 	.word	0x24004f38

0800f7b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d04f      	beq.n	800f86a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f7ca:	2308      	movs	r3, #8
 800f7cc:	425b      	negs	r3, r3
 800f7ce:	697a      	ldr	r2, [r7, #20]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	4b25      	ldr	r3, [pc, #148]	@ (800f874 <vPortFree+0xbc>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10b      	bne.n	800f7fe <vPortFree+0x46>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	60fb      	str	r3, [r7, #12]
}
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	e7fd      	b.n	800f7fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00b      	beq.n	800f81e <vPortFree+0x66>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	60bb      	str	r3, [r7, #8]
}
 800f818:	bf00      	nop
 800f81a:	bf00      	nop
 800f81c:	e7fd      	b.n	800f81a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	4b14      	ldr	r3, [pc, #80]	@ (800f874 <vPortFree+0xbc>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4013      	ands	r3, r2
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d01e      	beq.n	800f86a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d11a      	bne.n	800f86a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	685a      	ldr	r2, [r3, #4]
 800f838:	4b0e      	ldr	r3, [pc, #56]	@ (800f874 <vPortFree+0xbc>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	43db      	mvns	r3, r3
 800f83e:	401a      	ands	r2, r3
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f844:	f7fe fc76 	bl	800e134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	4b0a      	ldr	r3, [pc, #40]	@ (800f878 <vPortFree+0xc0>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4413      	add	r3, r2
 800f852:	4a09      	ldr	r2, [pc, #36]	@ (800f878 <vPortFree+0xc0>)
 800f854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f856:	6938      	ldr	r0, [r7, #16]
 800f858:	f000 f874 	bl	800f944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f85c:	4b07      	ldr	r3, [pc, #28]	@ (800f87c <vPortFree+0xc4>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	3301      	adds	r3, #1
 800f862:	4a06      	ldr	r2, [pc, #24]	@ (800f87c <vPortFree+0xc4>)
 800f864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f866:	f7fe fc73 	bl	800e150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f86a:	bf00      	nop
 800f86c:	3718      	adds	r7, #24
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	24004f40 	.word	0x24004f40
 800f878:	24004f30 	.word	0x24004f30
 800f87c:	24004f3c 	.word	0x24004f3c

0800f880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f886:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f88a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f88c:	4b27      	ldr	r3, [pc, #156]	@ (800f92c <prvHeapInit+0xac>)
 800f88e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f003 0307 	and.w	r3, r3, #7
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00c      	beq.n	800f8b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3307      	adds	r3, #7
 800f89e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f023 0307 	bic.w	r3, r3, #7
 800f8a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	4a1f      	ldr	r2, [pc, #124]	@ (800f92c <prvHeapInit+0xac>)
 800f8b0:	4413      	add	r3, r2
 800f8b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f8b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f930 <prvHeapInit+0xb0>)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f8be:	4b1c      	ldr	r3, [pc, #112]	@ (800f930 <prvHeapInit+0xb0>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f8cc:	2208      	movs	r2, #8
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	1a9b      	subs	r3, r3, r2
 800f8d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 0307 	bic.w	r3, r3, #7
 800f8da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	4a15      	ldr	r2, [pc, #84]	@ (800f934 <prvHeapInit+0xb4>)
 800f8e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f8e2:	4b14      	ldr	r3, [pc, #80]	@ (800f934 <prvHeapInit+0xb4>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8ea:	4b12      	ldr	r3, [pc, #72]	@ (800f934 <prvHeapInit+0xb4>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	1ad2      	subs	r2, r2, r3
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f900:	4b0c      	ldr	r3, [pc, #48]	@ (800f934 <prvHeapInit+0xb4>)
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	4a0a      	ldr	r2, [pc, #40]	@ (800f938 <prvHeapInit+0xb8>)
 800f90e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	4a09      	ldr	r2, [pc, #36]	@ (800f93c <prvHeapInit+0xbc>)
 800f916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f918:	4b09      	ldr	r3, [pc, #36]	@ (800f940 <prvHeapInit+0xc0>)
 800f91a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f91e:	601a      	str	r2, [r3, #0]
}
 800f920:	bf00      	nop
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr
 800f92c:	24001324 	.word	0x24001324
 800f930:	24004f24 	.word	0x24004f24
 800f934:	24004f2c 	.word	0x24004f2c
 800f938:	24004f34 	.word	0x24004f34
 800f93c:	24004f30 	.word	0x24004f30
 800f940:	24004f40 	.word	0x24004f40

0800f944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f94c:	4b28      	ldr	r3, [pc, #160]	@ (800f9f0 <prvInsertBlockIntoFreeList+0xac>)
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	e002      	b.n	800f958 <prvInsertBlockIntoFreeList+0x14>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	429a      	cmp	r2, r3
 800f960:	d8f7      	bhi.n	800f952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	68ba      	ldr	r2, [r7, #8]
 800f96c:	4413      	add	r3, r2
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	429a      	cmp	r2, r3
 800f972:	d108      	bne.n	800f986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	685a      	ldr	r2, [r3, #4]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	441a      	add	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	441a      	add	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	429a      	cmp	r2, r3
 800f998:	d118      	bne.n	800f9cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	4b15      	ldr	r3, [pc, #84]	@ (800f9f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d00d      	beq.n	800f9c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	685a      	ldr	r2, [r3, #4]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	441a      	add	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	601a      	str	r2, [r3, #0]
 800f9c0:	e008      	b.n	800f9d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f9c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f4 <prvInsertBlockIntoFreeList+0xb0>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	e003      	b.n	800f9d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d002      	beq.n	800f9e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9e2:	bf00      	nop
 800f9e4:	3714      	adds	r7, #20
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop
 800f9f0:	24004f24 	.word	0x24004f24
 800f9f4:	24004f2c 	.word	0x24004f2c

0800f9f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	4913      	ldr	r1, [pc, #76]	@ (800fa4c <MX_USB_DEVICE_Init+0x54>)
 800fa00:	4813      	ldr	r0, [pc, #76]	@ (800fa50 <MX_USB_DEVICE_Init+0x58>)
 800fa02:	f7fb ff09 	bl	800b818 <USBD_Init>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fa0c:	f7f1 fc96 	bl	800133c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fa10:	4910      	ldr	r1, [pc, #64]	@ (800fa54 <MX_USB_DEVICE_Init+0x5c>)
 800fa12:	480f      	ldr	r0, [pc, #60]	@ (800fa50 <MX_USB_DEVICE_Init+0x58>)
 800fa14:	f7fb ff30 	bl	800b878 <USBD_RegisterClass>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa1e:	f7f1 fc8d 	bl	800133c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fa22:	490d      	ldr	r1, [pc, #52]	@ (800fa58 <MX_USB_DEVICE_Init+0x60>)
 800fa24:	480a      	ldr	r0, [pc, #40]	@ (800fa50 <MX_USB_DEVICE_Init+0x58>)
 800fa26:	f7fb fe27 	bl	800b678 <USBD_CDC_RegisterInterface>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d001      	beq.n	800fa34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa30:	f7f1 fc84 	bl	800133c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fa34:	4806      	ldr	r0, [pc, #24]	@ (800fa50 <MX_USB_DEVICE_Init+0x58>)
 800fa36:	f7fb ff55 	bl	800b8e4 <USBD_Start>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa40:	f7f1 fc7c 	bl	800133c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fa44:	f7f5 f8fa 	bl	8004c3c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa48:	bf00      	nop
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	240000b4 	.word	0x240000b4
 800fa50:	24004f44 	.word	0x24004f44
 800fa54:	2400001c 	.word	0x2400001c
 800fa58:	240000a0 	.word	0x240000a0

0800fa5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa60:	2200      	movs	r2, #0
 800fa62:	4905      	ldr	r1, [pc, #20]	@ (800fa78 <CDC_Init_FS+0x1c>)
 800fa64:	4805      	ldr	r0, [pc, #20]	@ (800fa7c <CDC_Init_FS+0x20>)
 800fa66:	f7fb fe21 	bl	800b6ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa6a:	4905      	ldr	r1, [pc, #20]	@ (800fa80 <CDC_Init_FS+0x24>)
 800fa6c:	4803      	ldr	r0, [pc, #12]	@ (800fa7c <CDC_Init_FS+0x20>)
 800fa6e:	f7fb fe3f 	bl	800b6f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fa72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	24005a20 	.word	0x24005a20
 800fa7c:	24004f44 	.word	0x24004f44
 800fa80:	24005220 	.word	0x24005220

0800fa84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fa84:	b480      	push	{r7}
 800fa86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fa88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
 800faa0:	4613      	mov	r3, r2
 800faa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800faa4:	79fb      	ldrb	r3, [r7, #7]
 800faa6:	2b23      	cmp	r3, #35	@ 0x23
 800faa8:	d84a      	bhi.n	800fb40 <CDC_Control_FS+0xac>
 800faaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fab0 <CDC_Control_FS+0x1c>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fb41 	.word	0x0800fb41
 800fab4:	0800fb41 	.word	0x0800fb41
 800fab8:	0800fb41 	.word	0x0800fb41
 800fabc:	0800fb41 	.word	0x0800fb41
 800fac0:	0800fb41 	.word	0x0800fb41
 800fac4:	0800fb41 	.word	0x0800fb41
 800fac8:	0800fb41 	.word	0x0800fb41
 800facc:	0800fb41 	.word	0x0800fb41
 800fad0:	0800fb41 	.word	0x0800fb41
 800fad4:	0800fb41 	.word	0x0800fb41
 800fad8:	0800fb41 	.word	0x0800fb41
 800fadc:	0800fb41 	.word	0x0800fb41
 800fae0:	0800fb41 	.word	0x0800fb41
 800fae4:	0800fb41 	.word	0x0800fb41
 800fae8:	0800fb41 	.word	0x0800fb41
 800faec:	0800fb41 	.word	0x0800fb41
 800faf0:	0800fb41 	.word	0x0800fb41
 800faf4:	0800fb41 	.word	0x0800fb41
 800faf8:	0800fb41 	.word	0x0800fb41
 800fafc:	0800fb41 	.word	0x0800fb41
 800fb00:	0800fb41 	.word	0x0800fb41
 800fb04:	0800fb41 	.word	0x0800fb41
 800fb08:	0800fb41 	.word	0x0800fb41
 800fb0c:	0800fb41 	.word	0x0800fb41
 800fb10:	0800fb41 	.word	0x0800fb41
 800fb14:	0800fb41 	.word	0x0800fb41
 800fb18:	0800fb41 	.word	0x0800fb41
 800fb1c:	0800fb41 	.word	0x0800fb41
 800fb20:	0800fb41 	.word	0x0800fb41
 800fb24:	0800fb41 	.word	0x0800fb41
 800fb28:	0800fb41 	.word	0x0800fb41
 800fb2c:	0800fb41 	.word	0x0800fb41
 800fb30:	0800fb41 	.word	0x0800fb41
 800fb34:	0800fb41 	.word	0x0800fb41
 800fb38:	0800fb41 	.word	0x0800fb41
 800fb3c:	0800fb41 	.word	0x0800fb41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fb40:	bf00      	nop
  }

  return (USBD_OK);
 800fb42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fb5a:	6879      	ldr	r1, [r7, #4]
 800fb5c:	4805      	ldr	r0, [pc, #20]	@ (800fb74 <CDC_Receive_FS+0x24>)
 800fb5e:	f7fb fdc7 	bl	800b6f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fb62:	4804      	ldr	r0, [pc, #16]	@ (800fb74 <CDC_Receive_FS+0x24>)
 800fb64:	f7fb fe22 	bl	800b7ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fb68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	24004f44 	.word	0x24004f44

0800fb78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fb88:	4b0d      	ldr	r3, [pc, #52]	@ (800fbc0 <CDC_Transmit_FS+0x48>)
 800fb8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fb8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e00b      	b.n	800fbb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fb9e:	887b      	ldrh	r3, [r7, #2]
 800fba0:	461a      	mov	r2, r3
 800fba2:	6879      	ldr	r1, [r7, #4]
 800fba4:	4806      	ldr	r0, [pc, #24]	@ (800fbc0 <CDC_Transmit_FS+0x48>)
 800fba6:	f7fb fd81 	bl	800b6ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fbaa:	4805      	ldr	r0, [pc, #20]	@ (800fbc0 <CDC_Transmit_FS+0x48>)
 800fbac:	f7fb fdbe 	bl	800b72c <USBD_CDC_TransmitPacket>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	24004f44 	.word	0x24004f44

0800fbc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fbd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	371c      	adds	r7, #28
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr
	...

0800fbe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	6039      	str	r1, [r7, #0]
 800fbf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2212      	movs	r2, #18
 800fbf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fbfa:	4b03      	ldr	r3, [pc, #12]	@ (800fc08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr
 800fc08:	240000d4 	.word	0x240000d4

0800fc0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	4603      	mov	r3, r0
 800fc14:	6039      	str	r1, [r7, #0]
 800fc16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	2204      	movs	r2, #4
 800fc1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fc1e:	4b03      	ldr	r3, [pc, #12]	@ (800fc2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	240000e8 	.word	0x240000e8

0800fc30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	4603      	mov	r3, r0
 800fc38:	6039      	str	r1, [r7, #0]
 800fc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d105      	bne.n	800fc4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc42:	683a      	ldr	r2, [r7, #0]
 800fc44:	4907      	ldr	r1, [pc, #28]	@ (800fc64 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc46:	4808      	ldr	r0, [pc, #32]	@ (800fc68 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc48:	f7fd f826 	bl	800cc98 <USBD_GetString>
 800fc4c:	e004      	b.n	800fc58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	4904      	ldr	r1, [pc, #16]	@ (800fc64 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc52:	4805      	ldr	r0, [pc, #20]	@ (800fc68 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc54:	f7fd f820 	bl	800cc98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc58:	4b02      	ldr	r3, [pc, #8]	@ (800fc64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	24006220 	.word	0x24006220
 800fc68:	080151a4 	.word	0x080151a4

0800fc6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	4603      	mov	r3, r0
 800fc74:	6039      	str	r1, [r7, #0]
 800fc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	4904      	ldr	r1, [pc, #16]	@ (800fc8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc7c:	4804      	ldr	r0, [pc, #16]	@ (800fc90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc7e:	f7fd f80b 	bl	800cc98 <USBD_GetString>
  return USBD_StrDesc;
 800fc82:	4b02      	ldr	r3, [pc, #8]	@ (800fc8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	24006220 	.word	0x24006220
 800fc90:	080151bc 	.word	0x080151bc

0800fc94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	6039      	str	r1, [r7, #0]
 800fc9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	221a      	movs	r2, #26
 800fca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fca6:	f000 f843 	bl	800fd30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fcaa:	4b02      	ldr	r3, [pc, #8]	@ (800fcb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	240000ec 	.word	0x240000ec

0800fcb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	6039      	str	r1, [r7, #0]
 800fcc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d105      	bne.n	800fcd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcca:	683a      	ldr	r2, [r7, #0]
 800fccc:	4907      	ldr	r1, [pc, #28]	@ (800fcec <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcce:	4808      	ldr	r0, [pc, #32]	@ (800fcf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcd0:	f7fc ffe2 	bl	800cc98 <USBD_GetString>
 800fcd4:	e004      	b.n	800fce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	4904      	ldr	r1, [pc, #16]	@ (800fcec <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcda:	4805      	ldr	r0, [pc, #20]	@ (800fcf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcdc:	f7fc ffdc 	bl	800cc98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fce0:	4b02      	ldr	r3, [pc, #8]	@ (800fcec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	24006220 	.word	0x24006220
 800fcf0:	080151d0 	.word	0x080151d0

0800fcf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	6039      	str	r1, [r7, #0]
 800fcfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd00:	79fb      	ldrb	r3, [r7, #7]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d105      	bne.n	800fd12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	4907      	ldr	r1, [pc, #28]	@ (800fd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd0a:	4808      	ldr	r0, [pc, #32]	@ (800fd2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd0c:	f7fc ffc4 	bl	800cc98 <USBD_GetString>
 800fd10:	e004      	b.n	800fd1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd12:	683a      	ldr	r2, [r7, #0]
 800fd14:	4904      	ldr	r1, [pc, #16]	@ (800fd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd16:	4805      	ldr	r0, [pc, #20]	@ (800fd2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd18:	f7fc ffbe 	bl	800cc98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd1c:	4b02      	ldr	r3, [pc, #8]	@ (800fd28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	24006220 	.word	0x24006220
 800fd2c:	080151dc 	.word	0x080151dc

0800fd30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd36:	4b0f      	ldr	r3, [pc, #60]	@ (800fd74 <Get_SerialNum+0x44>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd3c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd78 <Get_SerialNum+0x48>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd42:	4b0e      	ldr	r3, [pc, #56]	@ (800fd7c <Get_SerialNum+0x4c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd48:	68fa      	ldr	r2, [r7, #12]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd56:	2208      	movs	r2, #8
 800fd58:	4909      	ldr	r1, [pc, #36]	@ (800fd80 <Get_SerialNum+0x50>)
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	f000 f814 	bl	800fd88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd60:	2204      	movs	r2, #4
 800fd62:	4908      	ldr	r1, [pc, #32]	@ (800fd84 <Get_SerialNum+0x54>)
 800fd64:	68b8      	ldr	r0, [r7, #8]
 800fd66:	f000 f80f 	bl	800fd88 <IntToUnicode>
  }
}
 800fd6a:	bf00      	nop
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	1ff1e800 	.word	0x1ff1e800
 800fd78:	1ff1e804 	.word	0x1ff1e804
 800fd7c:	1ff1e808 	.word	0x1ff1e808
 800fd80:	240000ee 	.word	0x240000ee
 800fd84:	240000fe 	.word	0x240000fe

0800fd88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b087      	sub	sp, #28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	4613      	mov	r3, r2
 800fd94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd96:	2300      	movs	r3, #0
 800fd98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	75fb      	strb	r3, [r7, #23]
 800fd9e:	e027      	b.n	800fdf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	0f1b      	lsrs	r3, r3, #28
 800fda4:	2b09      	cmp	r3, #9
 800fda6:	d80b      	bhi.n	800fdc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	0f1b      	lsrs	r3, r3, #28
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	7dfb      	ldrb	r3, [r7, #23]
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	440b      	add	r3, r1
 800fdb8:	3230      	adds	r2, #48	@ 0x30
 800fdba:	b2d2      	uxtb	r2, r2
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	e00a      	b.n	800fdd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	0f1b      	lsrs	r3, r3, #28
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	7dfb      	ldrb	r3, [r7, #23]
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	4619      	mov	r1, r3
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	440b      	add	r3, r1
 800fdd0:	3237      	adds	r2, #55	@ 0x37
 800fdd2:	b2d2      	uxtb	r2, r2
 800fdd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	011b      	lsls	r3, r3, #4
 800fdda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fddc:	7dfb      	ldrb	r3, [r7, #23]
 800fdde:	005b      	lsls	r3, r3, #1
 800fde0:	3301      	adds	r3, #1
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	4413      	add	r3, r2
 800fde6:	2200      	movs	r2, #0
 800fde8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdea:	7dfb      	ldrb	r3, [r7, #23]
 800fdec:	3301      	adds	r3, #1
 800fdee:	75fb      	strb	r3, [r7, #23]
 800fdf0:	7dfa      	ldrb	r2, [r7, #23]
 800fdf2:	79fb      	ldrb	r3, [r7, #7]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d3d3      	bcc.n	800fda0 <IntToUnicode+0x18>
  }
}
 800fdf8:	bf00      	nop
 800fdfa:	bf00      	nop
 800fdfc:	371c      	adds	r7, #28
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
	...

0800fe08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b0ba      	sub	sp, #232	@ 0xe8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fe14:	2200      	movs	r2, #0
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	605a      	str	r2, [r3, #4]
 800fe1a:	609a      	str	r2, [r3, #8]
 800fe1c:	60da      	str	r2, [r3, #12]
 800fe1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fe20:	f107 0310 	add.w	r3, r7, #16
 800fe24:	22c0      	movs	r2, #192	@ 0xc0
 800fe26:	2100      	movs	r1, #0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f002 fefa 	bl	8012c22 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a2c      	ldr	r2, [pc, #176]	@ (800fee4 <HAL_PCD_MspInit+0xdc>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d151      	bne.n	800fedc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fe38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800fe3c:	f04f 0300 	mov.w	r3, #0
 800fe40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800fe44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fe48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fe4c:	f107 0310 	add.w	r3, r7, #16
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7f5 ff15 	bl	8005c80 <HAL_RCCEx_PeriphCLKConfig>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800fe5c:	f7f1 fa6e 	bl	800133c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800fe60:	f7f4 feec 	bl	8004c3c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe64:	4b20      	ldr	r3, [pc, #128]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800fe66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fe6a:	4a1f      	ldr	r2, [pc, #124]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800fe6c:	f043 0301 	orr.w	r3, r3, #1
 800fe70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fe74:	4b1c      	ldr	r3, [pc, #112]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800fe76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	60fb      	str	r3, [r7, #12]
 800fe80:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fe86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe90:	2300      	movs	r3, #0
 800fe92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe96:	2300      	movs	r3, #0
 800fe98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fe9c:	230a      	movs	r3, #10
 800fe9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fea2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fea6:	4619      	mov	r1, r3
 800fea8:	4810      	ldr	r0, [pc, #64]	@ (800feec <HAL_PCD_MspInit+0xe4>)
 800feaa:	f7f2 fbcd 	bl	8002648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800feae:	4b0e      	ldr	r3, [pc, #56]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800feb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800feb4:	4a0c      	ldr	r2, [pc, #48]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800feb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800feba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800febe:	4b0a      	ldr	r3, [pc, #40]	@ (800fee8 <HAL_PCD_MspInit+0xe0>)
 800fec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fec8:	60bb      	str	r3, [r7, #8]
 800feca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fecc:	2200      	movs	r2, #0
 800fece:	2105      	movs	r1, #5
 800fed0:	2065      	movs	r0, #101	@ 0x65
 800fed2:	f7f2 f8c9 	bl	8002068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fed6:	2065      	movs	r0, #101	@ 0x65
 800fed8:	f7f2 f8e0 	bl	800209c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fedc:	bf00      	nop
 800fede:	37e8      	adds	r7, #232	@ 0xe8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	40080000 	.word	0x40080000
 800fee8:	58024400 	.word	0x58024400
 800feec:	58020000 	.word	0x58020000

0800fef0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ff04:	4619      	mov	r1, r3
 800ff06:	4610      	mov	r0, r2
 800ff08:	f7fb fd39 	bl	800b97e <USBD_LL_SetupStage>
}
 800ff0c:	bf00      	nop
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ff26:	78fa      	ldrb	r2, [r7, #3]
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	4613      	mov	r3, r2
 800ff2c:	00db      	lsls	r3, r3, #3
 800ff2e:	4413      	add	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	440b      	add	r3, r1
 800ff34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	78fb      	ldrb	r3, [r7, #3]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	f7fb fd73 	bl	800ba28 <USBD_LL_DataOutStage>
}
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	460b      	mov	r3, r1
 800ff54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ff5c:	78fa      	ldrb	r2, [r7, #3]
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	4613      	mov	r3, r2
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	4413      	add	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	440b      	add	r3, r1
 800ff6a:	3320      	adds	r3, #32
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	4619      	mov	r1, r3
 800ff72:	f7fb fe0c 	bl	800bb8e <USBD_LL_DataInStage>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f7fb ff46 	bl	800be1e <USBD_LL_SOF>
}
 800ff92:	bf00      	nop
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	79db      	ldrb	r3, [r3, #7]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	73fb      	strb	r3, [r7, #15]
 800ffb2:	e008      	b.n	800ffc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	79db      	ldrb	r3, [r3, #7]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d102      	bne.n	800ffc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	73fb      	strb	r3, [r7, #15]
 800ffc0:	e001      	b.n	800ffc6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ffc2:	f7f1 f9bb 	bl	800133c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffcc:	7bfa      	ldrb	r2, [r7, #15]
 800ffce:	4611      	mov	r1, r2
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fb fee0 	bl	800bd96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fb fe88 	bl	800bcf2 <USBD_LL_Reset>
}
 800ffe2:	bf00      	nop
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
	...

0800ffec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fb fedb 	bl	800bdb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	6812      	ldr	r2, [r2, #0]
 801000e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010012:	f043 0301 	orr.w	r3, r3, #1
 8010016:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	7adb      	ldrb	r3, [r3, #11]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d005      	beq.n	801002c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010020:	4b04      	ldr	r3, [pc, #16]	@ (8010034 <HAL_PCD_SuspendCallback+0x48>)
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	4a03      	ldr	r2, [pc, #12]	@ (8010034 <HAL_PCD_SuspendCallback+0x48>)
 8010026:	f043 0306 	orr.w	r3, r3, #6
 801002a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801002c:	bf00      	nop
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	e000ed00 	.word	0xe000ed00

08010038 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010046:	4618      	mov	r0, r3
 8010048:	f7fb fed1 	bl	800bdee <USBD_LL_Resume>
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	460b      	mov	r3, r1
 801005e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010066:	78fa      	ldrb	r2, [r7, #3]
 8010068:	4611      	mov	r1, r2
 801006a:	4618      	mov	r0, r3
 801006c:	f7fb ff29 	bl	800bec2 <USBD_LL_IsoOUTIncomplete>
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	460b      	mov	r3, r1
 8010082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801008a:	78fa      	ldrb	r2, [r7, #3]
 801008c:	4611      	mov	r1, r2
 801008e:	4618      	mov	r0, r3
 8010090:	f7fb fee5 	bl	800be5e <USBD_LL_IsoINIncomplete>
}
 8010094:	bf00      	nop
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fb ff3b 	bl	800bf26 <USBD_LL_DevConnected>
}
 80100b0:	bf00      	nop
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fb ff38 	bl	800bf3c <USBD_LL_DevDisconnected>
}
 80100cc:	bf00      	nop
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d13e      	bne.n	8010162 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80100e4:	4a21      	ldr	r2, [pc, #132]	@ (801016c <USBD_LL_Init+0x98>)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4a1f      	ldr	r2, [pc, #124]	@ (801016c <USBD_LL_Init+0x98>)
 80100f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80100f4:	4b1d      	ldr	r3, [pc, #116]	@ (801016c <USBD_LL_Init+0x98>)
 80100f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010170 <USBD_LL_Init+0x9c>)
 80100f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80100fa:	4b1c      	ldr	r3, [pc, #112]	@ (801016c <USBD_LL_Init+0x98>)
 80100fc:	2209      	movs	r2, #9
 80100fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010100:	4b1a      	ldr	r3, [pc, #104]	@ (801016c <USBD_LL_Init+0x98>)
 8010102:	2202      	movs	r2, #2
 8010104:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010106:	4b19      	ldr	r3, [pc, #100]	@ (801016c <USBD_LL_Init+0x98>)
 8010108:	2200      	movs	r2, #0
 801010a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801010c:	4b17      	ldr	r3, [pc, #92]	@ (801016c <USBD_LL_Init+0x98>)
 801010e:	2202      	movs	r2, #2
 8010110:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010112:	4b16      	ldr	r3, [pc, #88]	@ (801016c <USBD_LL_Init+0x98>)
 8010114:	2200      	movs	r2, #0
 8010116:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010118:	4b14      	ldr	r3, [pc, #80]	@ (801016c <USBD_LL_Init+0x98>)
 801011a:	2200      	movs	r2, #0
 801011c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801011e:	4b13      	ldr	r3, [pc, #76]	@ (801016c <USBD_LL_Init+0x98>)
 8010120:	2200      	movs	r2, #0
 8010122:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010124:	4b11      	ldr	r3, [pc, #68]	@ (801016c <USBD_LL_Init+0x98>)
 8010126:	2200      	movs	r2, #0
 8010128:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801012a:	4b10      	ldr	r3, [pc, #64]	@ (801016c <USBD_LL_Init+0x98>)
 801012c:	2200      	movs	r2, #0
 801012e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010130:	4b0e      	ldr	r3, [pc, #56]	@ (801016c <USBD_LL_Init+0x98>)
 8010132:	2200      	movs	r2, #0
 8010134:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010136:	480d      	ldr	r0, [pc, #52]	@ (801016c <USBD_LL_Init+0x98>)
 8010138:	f7f3 faa7 	bl	800368a <HAL_PCD_Init>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010142:	f7f1 f8fb 	bl	800133c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010146:	2180      	movs	r1, #128	@ 0x80
 8010148:	4808      	ldr	r0, [pc, #32]	@ (801016c <USBD_LL_Init+0x98>)
 801014a:	f7f4 fcfc 	bl	8004b46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801014e:	2240      	movs	r2, #64	@ 0x40
 8010150:	2100      	movs	r1, #0
 8010152:	4806      	ldr	r0, [pc, #24]	@ (801016c <USBD_LL_Init+0x98>)
 8010154:	f7f4 fcb0 	bl	8004ab8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010158:	2280      	movs	r2, #128	@ 0x80
 801015a:	2101      	movs	r1, #1
 801015c:	4803      	ldr	r0, [pc, #12]	@ (801016c <USBD_LL_Init+0x98>)
 801015e:	f7f4 fcab 	bl	8004ab8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	24006420 	.word	0x24006420
 8010170:	40080000 	.word	0x40080000

08010174 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801018a:	4618      	mov	r0, r3
 801018c:	f7f3 fb89 	bl	80038a2 <HAL_PCD_Start>
 8010190:	4603      	mov	r3, r0
 8010192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010194:	7bfb      	ldrb	r3, [r7, #15]
 8010196:	4618      	mov	r0, r3
 8010198:	f000 f942 	bl	8010420 <USBD_Get_USB_Status>
 801019c:	4603      	mov	r3, r0
 801019e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	4608      	mov	r0, r1
 80101b4:	4611      	mov	r1, r2
 80101b6:	461a      	mov	r2, r3
 80101b8:	4603      	mov	r3, r0
 80101ba:	70fb      	strb	r3, [r7, #3]
 80101bc:	460b      	mov	r3, r1
 80101be:	70bb      	strb	r3, [r7, #2]
 80101c0:	4613      	mov	r3, r2
 80101c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80101d2:	78bb      	ldrb	r3, [r7, #2]
 80101d4:	883a      	ldrh	r2, [r7, #0]
 80101d6:	78f9      	ldrb	r1, [r7, #3]
 80101d8:	f7f4 f88a 	bl	80042f0 <HAL_PCD_EP_Open>
 80101dc:	4603      	mov	r3, r0
 80101de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f000 f91c 	bl	8010420 <USBD_Get_USB_Status>
 80101e8:	4603      	mov	r3, r0
 80101ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3710      	adds	r7, #16
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b084      	sub	sp, #16
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	460b      	mov	r3, r1
 8010200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010210:	78fa      	ldrb	r2, [r7, #3]
 8010212:	4611      	mov	r1, r2
 8010214:	4618      	mov	r0, r3
 8010216:	f7f4 f8d3 	bl	80043c0 <HAL_PCD_EP_Close>
 801021a:	4603      	mov	r3, r0
 801021c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801021e:	7bfb      	ldrb	r3, [r7, #15]
 8010220:	4618      	mov	r0, r3
 8010222:	f000 f8fd 	bl	8010420 <USBD_Get_USB_Status>
 8010226:	4603      	mov	r3, r0
 8010228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801022a:	7bbb      	ldrb	r3, [r7, #14]
}
 801022c:	4618      	mov	r0, r3
 801022e:	3710      	adds	r7, #16
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	460b      	mov	r3, r1
 801023e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010244:	2300      	movs	r3, #0
 8010246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801024e:	78fa      	ldrb	r2, [r7, #3]
 8010250:	4611      	mov	r1, r2
 8010252:	4618      	mov	r0, r3
 8010254:	f7f4 f98b 	bl	800456e <HAL_PCD_EP_SetStall>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	4618      	mov	r0, r3
 8010260:	f000 f8de 	bl	8010420 <USBD_Get_USB_Status>
 8010264:	4603      	mov	r3, r0
 8010266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010268:	7bbb      	ldrb	r3, [r7, #14]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	460b      	mov	r3, r1
 801027c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801028c:	78fa      	ldrb	r2, [r7, #3]
 801028e:	4611      	mov	r1, r2
 8010290:	4618      	mov	r0, r3
 8010292:	f7f4 f9cf 	bl	8004634 <HAL_PCD_EP_ClrStall>
 8010296:	4603      	mov	r3, r0
 8010298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801029a:	7bfb      	ldrb	r3, [r7, #15]
 801029c:	4618      	mov	r0, r3
 801029e:	f000 f8bf 	bl	8010420 <USBD_Get_USB_Status>
 80102a2:	4603      	mov	r3, r0
 80102a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80102c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	da0b      	bge.n	80102e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80102d2:	68f9      	ldr	r1, [r7, #12]
 80102d4:	4613      	mov	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	4413      	add	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	440b      	add	r3, r1
 80102de:	3316      	adds	r3, #22
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	e00b      	b.n	80102fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80102e4:	78fb      	ldrb	r3, [r7, #3]
 80102e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80102ea:	68f9      	ldr	r1, [r7, #12]
 80102ec:	4613      	mov	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	4413      	add	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	440b      	add	r3, r1
 80102f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80102fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3714      	adds	r7, #20
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010314:	2300      	movs	r3, #0
 8010316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010322:	78fa      	ldrb	r2, [r7, #3]
 8010324:	4611      	mov	r1, r2
 8010326:	4618      	mov	r0, r3
 8010328:	f7f3 ffbe 	bl	80042a8 <HAL_PCD_SetAddress>
 801032c:	4603      	mov	r3, r0
 801032e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010330:	7bfb      	ldrb	r3, [r7, #15]
 8010332:	4618      	mov	r0, r3
 8010334:	f000 f874 	bl	8010420 <USBD_Get_USB_Status>
 8010338:	4603      	mov	r3, r0
 801033a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801033c:	7bbb      	ldrb	r3, [r7, #14]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b086      	sub	sp, #24
 801034a:	af00      	add	r7, sp, #0
 801034c:	60f8      	str	r0, [r7, #12]
 801034e:	607a      	str	r2, [r7, #4]
 8010350:	603b      	str	r3, [r7, #0]
 8010352:	460b      	mov	r3, r1
 8010354:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801035a:	2300      	movs	r3, #0
 801035c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010364:	7af9      	ldrb	r1, [r7, #11]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	f7f4 f8c6 	bl	80044fa <HAL_PCD_EP_Transmit>
 801036e:	4603      	mov	r3, r0
 8010370:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010372:	7dfb      	ldrb	r3, [r7, #23]
 8010374:	4618      	mov	r0, r3
 8010376:	f000 f853 	bl	8010420 <USBD_Get_USB_Status>
 801037a:	4603      	mov	r3, r0
 801037c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801037e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3718      	adds	r7, #24
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	607a      	str	r2, [r7, #4]
 8010392:	603b      	str	r3, [r7, #0]
 8010394:	460b      	mov	r3, r1
 8010396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801039c:	2300      	movs	r3, #0
 801039e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80103a6:	7af9      	ldrb	r1, [r7, #11]
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	f7f4 f852 	bl	8004454 <HAL_PCD_EP_Receive>
 80103b0:	4603      	mov	r3, r0
 80103b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103b4:	7dfb      	ldrb	r3, [r7, #23]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f000 f832 	bl	8010420 <USBD_Get_USB_Status>
 80103bc:	4603      	mov	r3, r0
 80103be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80103c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b082      	sub	sp, #8
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	460b      	mov	r3, r1
 80103d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103dc:	78fa      	ldrb	r2, [r7, #3]
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f4 f872 	bl	80044ca <HAL_PCD_EP_GetRxCount>
 80103e6:	4603      	mov	r3, r0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80103f8:	4b03      	ldr	r3, [pc, #12]	@ (8010408 <USBD_static_malloc+0x18>)
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	370c      	adds	r7, #12
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop
 8010408:	24006904 	.word	0x24006904

0801040c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010414:	bf00      	nop
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010420:	b480      	push	{r7}
 8010422:	b085      	sub	sp, #20
 8010424:	af00      	add	r7, sp, #0
 8010426:	4603      	mov	r3, r0
 8010428:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801042a:	2300      	movs	r3, #0
 801042c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	2b03      	cmp	r3, #3
 8010432:	d817      	bhi.n	8010464 <USBD_Get_USB_Status+0x44>
 8010434:	a201      	add	r2, pc, #4	@ (adr r2, 801043c <USBD_Get_USB_Status+0x1c>)
 8010436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801043a:	bf00      	nop
 801043c:	0801044d 	.word	0x0801044d
 8010440:	08010453 	.word	0x08010453
 8010444:	08010459 	.word	0x08010459
 8010448:	0801045f 	.word	0x0801045f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	73fb      	strb	r3, [r7, #15]
    break;
 8010450:	e00b      	b.n	801046a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010452:	2303      	movs	r3, #3
 8010454:	73fb      	strb	r3, [r7, #15]
    break;
 8010456:	e008      	b.n	801046a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010458:	2301      	movs	r3, #1
 801045a:	73fb      	strb	r3, [r7, #15]
    break;
 801045c:	e005      	b.n	801046a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801045e:	2303      	movs	r3, #3
 8010460:	73fb      	strb	r3, [r7, #15]
    break;
 8010462:	e002      	b.n	801046a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010464:	2303      	movs	r3, #3
 8010466:	73fb      	strb	r3, [r7, #15]
    break;
 8010468:	bf00      	nop
  }
  return usb_status;
 801046a:	7bfb      	ldrb	r3, [r7, #15]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 801047c:	2200      	movs	r2, #0
 801047e:	2108      	movs	r1, #8
 8010480:	480a      	ldr	r0, [pc, #40]	@ (80104ac <ad7606_Init+0x34>)
 8010482:	f7f2 fa91 	bl	80029a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010486:	2001      	movs	r0, #1
 8010488:	f7f1 fd06 	bl	8001e98 <HAL_Delay>
    AD7606_RST_SET();
 801048c:	2201      	movs	r2, #1
 801048e:	2108      	movs	r1, #8
 8010490:	4806      	ldr	r0, [pc, #24]	@ (80104ac <ad7606_Init+0x34>)
 8010492:	f7f2 fa89 	bl	80029a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010496:	2001      	movs	r0, #1
 8010498:	f7f1 fcfe 	bl	8001e98 <HAL_Delay>
    AD7606_RST_RESET();
 801049c:	2200      	movs	r2, #0
 801049e:	2108      	movs	r1, #8
 80104a0:	4802      	ldr	r0, [pc, #8]	@ (80104ac <ad7606_Init+0x34>)
 80104a2:	f7f2 fa81 	bl	80029a8 <HAL_GPIO_WritePin>
}
 80104a6:	bf00      	nop
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	58021800 	.word	0x58021800

080104b0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	4613      	mov	r3, r2
 80104bc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 80104be:	2200      	movs	r2, #0
 80104c0:	2180      	movs	r1, #128	@ 0x80
 80104c2:	4809      	ldr	r0, [pc, #36]	@ (80104e8 <ad7606_Read+0x38>)
 80104c4:	f7f2 fa70 	bl	80029a8 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 80104c8:	88fa      	ldrh	r2, [r7, #6]
 80104ca:	2364      	movs	r3, #100	@ 0x64
 80104cc:	68b9      	ldr	r1, [r7, #8]
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f7f7 fa56 	bl	8007980 <HAL_SPI_Receive>
    AD7606_CS_SET();
 80104d4:	2201      	movs	r2, #1
 80104d6:	2180      	movs	r1, #128	@ 0x80
 80104d8:	4803      	ldr	r0, [pc, #12]	@ (80104e8 <ad7606_Read+0x38>)
 80104da:	f7f2 fa65 	bl	80029a8 <HAL_GPIO_WritePin>
}
 80104de:	bf00      	nop
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	58021800 	.word	0x58021800

080104ec <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7f7 fecd 	bl	8008298 <HAL_TIM_PWM_Start>
}
 80104fe:	bf00      	nop
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
	...

08010508 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8010508:	b480      	push	{r7}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	460b      	mov	r3, r1
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8010516:	2300      	movs	r3, #0
 8010518:	617b      	str	r3, [r7, #20]
 801051a:	e03d      	b.n	8010598 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	005b      	lsls	r3, r3, #1
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	4413      	add	r3, r2
 8010524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010528:	2b00      	cmp	r3, #0
 801052a:	da0f      	bge.n	801054c <ad7606_Convert+0x44>
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	4413      	add	r3, r2
 8010534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010538:	b29b      	uxth	r3, r3
 801053a:	425b      	negs	r3, r3
 801053c:	b29b      	uxth	r3, r3
 801053e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010542:	b29b      	uxth	r3, r3
 8010544:	425b      	negs	r3, r3
 8010546:	b29b      	uxth	r3, r3
 8010548:	b21b      	sxth	r3, r3
 801054a:	e005      	b.n	8010558 <ad7606_Convert+0x50>
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	4413      	add	r3, r2
 8010554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010558:	697a      	ldr	r2, [r7, #20]
 801055a:	0052      	lsls	r2, r2, #1
 801055c:	68f9      	ldr	r1, [r7, #12]
 801055e:	440a      	add	r2, r1
 8010560:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	4413      	add	r3, r2
 801056a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801056e:	ee07 3a90 	vmov	s15, r3
 8010572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010576:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801057a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	687a      	ldr	r2, [r7, #4]
 8010584:	4413      	add	r3, r2
 8010586:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80105b0 <ad7606_Convert+0xa8>
 801058a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801058e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	3301      	adds	r3, #1
 8010596:	617b      	str	r3, [r7, #20]
 8010598:	897b      	ldrh	r3, [r7, #10]
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	429a      	cmp	r2, r3
 801059e:	dbbd      	blt.n	801051c <ad7606_Convert+0x14>
    }
}
 80105a0:	bf00      	nop
 80105a2:	bf00      	nop
 80105a4:	371c      	adds	r7, #28
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	47000000 	.word	0x47000000

080105b4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 80105b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105b8:	b087      	sub	sp, #28
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	460b      	mov	r3, r1
 80105c0:	607a      	str	r2, [r7, #4]
 80105c2:	817b      	strh	r3, [r7, #10]
 80105c4:	466b      	mov	r3, sp
 80105c6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 80105c8:	8979      	ldrh	r1, [r7, #10]
 80105ca:	460b      	mov	r3, r1
 80105cc:	3b01      	subs	r3, #1
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	b28b      	uxth	r3, r1
 80105d2:	2200      	movs	r2, #0
 80105d4:	4698      	mov	r8, r3
 80105d6:	4691      	mov	r9, r2
 80105d8:	f04f 0200 	mov.w	r2, #0
 80105dc:	f04f 0300 	mov.w	r3, #0
 80105e0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80105e4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80105e8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80105ec:	b28b      	uxth	r3, r1
 80105ee:	2200      	movs	r2, #0
 80105f0:	461c      	mov	r4, r3
 80105f2:	4615      	mov	r5, r2
 80105f4:	f04f 0200 	mov.w	r2, #0
 80105f8:	f04f 0300 	mov.w	r3, #0
 80105fc:	012b      	lsls	r3, r5, #4
 80105fe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010602:	0122      	lsls	r2, r4, #4
 8010604:	460b      	mov	r3, r1
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	3307      	adds	r3, #7
 801060a:	08db      	lsrs	r3, r3, #3
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	ebad 0d03 	sub.w	sp, sp, r3
 8010612:	466b      	mov	r3, sp
 8010614:	3301      	adds	r3, #1
 8010616:	085b      	lsrs	r3, r3, #1
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 801061c:	897b      	ldrh	r3, [r7, #10]
 801061e:	461a      	mov	r2, r3
 8010620:	6939      	ldr	r1, [r7, #16]
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f7ff ff44 	bl	80104b0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8010628:	897b      	ldrh	r3, [r7, #10]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	4619      	mov	r1, r3
 801062e:	6938      	ldr	r0, [r7, #16]
 8010630:	f7ff ff6a 	bl	8010508 <ad7606_Convert>
 8010634:	46b5      	mov	sp, r6
}
 8010636:	bf00      	nop
 8010638:	371c      	adds	r7, #28
 801063a:	46bd      	mov	sp, r7
 801063c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010640 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b088      	sub	sp, #32
 8010644:	af04      	add	r7, sp, #16
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	460b      	mov	r3, r1
 801064a:	70fb      	strb	r3, [r7, #3]
 801064c:	4613      	mov	r3, r2
 801064e:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010650:	2300      	movs	r3, #0
 8010652:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010654:	883b      	ldrh	r3, [r7, #0]
 8010656:	0a1b      	lsrs	r3, r3, #8
 8010658:	b29b      	uxth	r3, r3
 801065a:	b2db      	uxtb	r3, r3
 801065c:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 801065e:	883b      	ldrh	r3, [r7, #0]
 8010660:	b2db      	uxtb	r3, r3
 8010662:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	69d8      	ldr	r0, [r3, #28]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801066e:	4619      	mov	r1, r3
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	b29a      	uxth	r2, r3
 8010674:	2364      	movs	r3, #100	@ 0x64
 8010676:	9302      	str	r3, [sp, #8]
 8010678:	2302      	movs	r3, #2
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	f107 030c 	add.w	r3, r7, #12
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	2301      	movs	r3, #1
 8010684:	f7f2 fa7a 	bl	8002b7c <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 8010688:	78fb      	ldrb	r3, [r7, #3]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 801068e:	883b      	ldrh	r3, [r7, #0]
 8010690:	f003 0310 	and.w	r3, r3, #16
 8010694:	b29a      	uxth	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	82da      	strh	r2, [r3, #22]
	}
}
 801069a:	bf00      	nop
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b082      	sub	sp, #8
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	2100      	movs	r1, #0
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff ffc4 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	885b      	ldrh	r3, [r3, #2]
 80106bc:	461a      	mov	r2, r3
 80106be:	2101      	movs	r1, #1
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ff ffbd 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	889b      	ldrh	r3, [r3, #4]
 80106ca:	461a      	mov	r2, r3
 80106cc:	2102      	movs	r1, #2
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff ffb6 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	88db      	ldrh	r3, [r3, #6]
 80106d8:	461a      	mov	r2, r3
 80106da:	2103      	movs	r1, #3
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7ff ffaf 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	891b      	ldrh	r3, [r3, #8]
 80106e6:	461a      	mov	r2, r3
 80106e8:	210b      	movs	r1, #11
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7ff ffa8 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	895b      	ldrh	r3, [r3, #10]
 80106f4:	461a      	mov	r2, r3
 80106f6:	210c      	movs	r1, #12
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ffa1 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	899b      	ldrh	r3, [r3, #12]
 8010702:	461a      	mov	r2, r3
 8010704:	210d      	movs	r1, #13
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff ff9a 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	89db      	ldrh	r3, [r3, #14]
 8010710:	461a      	mov	r2, r3
 8010712:	210e      	movs	r1, #14
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ff93 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	8a1b      	ldrh	r3, [r3, #16]
 801071e:	461a      	mov	r2, r3
 8010720:	210f      	movs	r1, #15
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7ff ff8c 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	8a5b      	ldrh	r3, [r3, #18]
 801072c:	461a      	mov	r2, r3
 801072e:	2110      	movs	r1, #16
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff ff85 	bl	8010640 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	8a9b      	ldrh	r3, [r3, #20]
 801073a:	461a      	mov	r2, r3
 801073c:	2111      	movs	r1, #17
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7ff ff7e 	bl	8010640 <INA228_writeReg>
}
 8010744:	bf00      	nop
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 801074c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010750:	b08c      	sub	sp, #48	@ 0x30
 8010752:	af04      	add	r7, sp, #16
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	460b      	mov	r3, r1
 8010758:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801075a:	2300      	movs	r3, #0
 801075c:	60fb      	str	r3, [r7, #12]
 801075e:	2300      	movs	r3, #0
 8010760:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010768:	4618      	mov	r0, r3
 801076a:	78fb      	ldrb	r3, [r7, #3]
 801076c:	b29a      	uxth	r2, r3
 801076e:	78fb      	ldrb	r3, [r7, #3]
 8010770:	4921      	ldr	r1, [pc, #132]	@ (80107f8 <INA228_readReg+0xac>)
 8010772:	5ccb      	ldrb	r3, [r1, r3]
 8010774:	4619      	mov	r1, r3
 8010776:	2364      	movs	r3, #100	@ 0x64
 8010778:	9302      	str	r3, [sp, #8]
 801077a:	9101      	str	r1, [sp, #4]
 801077c:	f107 030c 	add.w	r3, r7, #12
 8010780:	9300      	str	r3, [sp, #0]
 8010782:	2301      	movs	r3, #1
 8010784:	4601      	mov	r1, r0
 8010786:	481d      	ldr	r0, [pc, #116]	@ (80107fc <INA228_readReg+0xb0>)
 8010788:	f7f2 fb0c 	bl	8002da4 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 801078c:	7b3b      	ldrb	r3, [r7, #12]
 801078e:	b2db      	uxtb	r3, r3
 8010790:	2200      	movs	r2, #0
 8010792:	469a      	mov	sl, r3
 8010794:	4693      	mov	fp, r2
 8010796:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 801079a:	2301      	movs	r3, #1
 801079c:	617b      	str	r3, [r7, #20]
 801079e:	e01b      	b.n	80107d8 <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 80107a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80107a4:	f04f 0200 	mov.w	r2, #0
 80107a8:	f04f 0300 	mov.w	r3, #0
 80107ac:	020b      	lsls	r3, r1, #8
 80107ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80107b2:	0202      	lsls	r2, r0, #8
 80107b4:	f107 000c 	add.w	r0, r7, #12
 80107b8:	6979      	ldr	r1, [r7, #20]
 80107ba:	4401      	add	r1, r0
 80107bc:	7809      	ldrb	r1, [r1, #0]
 80107be:	b2c9      	uxtb	r1, r1
 80107c0:	2000      	movs	r0, #0
 80107c2:	460c      	mov	r4, r1
 80107c4:	4605      	mov	r5, r0
 80107c6:	ea42 0804 	orr.w	r8, r2, r4
 80107ca:	ea43 0905 	orr.w	r9, r3, r5
 80107ce:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	3301      	adds	r3, #1
 80107d6:	617b      	str	r3, [r7, #20]
 80107d8:	78fb      	ldrb	r3, [r7, #3]
 80107da:	4a07      	ldr	r2, [pc, #28]	@ (80107f8 <INA228_readReg+0xac>)
 80107dc:	5cd3      	ldrb	r3, [r2, r3]
 80107de:	461a      	mov	r2, r3
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	4293      	cmp	r3, r2
 80107e4:	dbdc      	blt.n	80107a0 <INA228_readReg+0x54>
	}

	return value;
 80107e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80107ea:	4610      	mov	r0, r2
 80107ec:	4619      	mov	r1, r3
 80107ee:	3720      	adds	r7, #32
 80107f0:	46bd      	mov	sp, r7
 80107f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107f6:	bf00      	nop
 80107f8:	080152d4 	.word	0x080152d4
 80107fc:	240003a0 	.word	0x240003a0

08010800 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 8010808:	2105      	movs	r1, #5
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff ff9e 	bl	801074c <INA228_readReg>
 8010810:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010818:	f04f 0200 	mov.w	r2, #0
 801081c:	f04f 0300 	mov.w	r3, #0
 8010820:	0902      	lsrs	r2, r0, #4
 8010822:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010826:	090b      	lsrs	r3, r1, #4
 8010828:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 801082c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010830:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010834:	f173 0300 	sbcs.w	r3, r3, #0
 8010838:	d30c      	bcc.n	8010854 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 801083a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801083e:	f7ef fe6f 	bl	8000520 <__aeabi_ul2f>
 8010842:	ee07 0a10 	vmov	s14, r0
 8010846:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010888 <INA228_getVBUS_V+0x88>
 801084a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801084e:	edc7 7a05 	vstr	s15, [r7, #20]
 8010852:	e005      	b.n	8010860 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010858:	f7ef fe62 	bl	8000520 <__aeabi_ul2f>
 801085c:	4603      	mov	r3, r0
 801085e:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010860:	edd7 7a05 	vldr	s15, [r7, #20]
 8010864:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801088c <INA228_getVBUS_V+0x8c>
 8010868:	ee27 7a87 	vmul.f32	s14, s15, s14
 801086c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8010890 <INA228_getVBUS_V+0x90>
 8010870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010874:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	ee07 3a90 	vmov	s15, r3
}
 801087e:	eeb0 0a67 	vmov.f32	s0, s15
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	49800000 	.word	0x49800000
 801088c:	43435000 	.word	0x43435000
 8010890:	49742400 	.word	0x49742400

08010894 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 801089c:	2107      	movs	r1, #7
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f7ff ff54 	bl	801074c <INA228_readReg>
 80108a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80108a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108ac:	f04f 0200 	mov.w	r2, #0
 80108b0:	f04f 0300 	mov.w	r3, #0
 80108b4:	0902      	lsrs	r2, r0, #4
 80108b6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80108ba:	090b      	lsrs	r3, r1, #4
 80108bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 80108c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80108c4:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80108c8:	f173 0300 	sbcs.w	r3, r3, #0
 80108cc:	d30c      	bcc.n	80108e8 <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 80108ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108d2:	f7ef fe25 	bl	8000520 <__aeabi_ul2f>
 80108d6:	ee07 0a10 	vmov	s14, r0
 80108da:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010904 <INA228_getCURRENT_signedLSB+0x70>
 80108de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108e2:	edc7 7a05 	vstr	s15, [r7, #20]
 80108e6:	e005      	b.n	80108f4 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 80108e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108ec:	f7ef fe18 	bl	8000520 <__aeabi_ul2f>
 80108f0:	4603      	mov	r3, r0
 80108f2:	617b      	str	r3, [r7, #20]
	}

	return data;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	ee07 3a90 	vmov	s15, r3
}
 80108fa:	eeb0 0a67 	vmov.f32	s0, s15
 80108fe:	3718      	adds	r7, #24
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	49800000 	.word	0x49800000

08010908 <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ffbf 	bl	8010894 <INA228_getCURRENT_signedLSB>
 8010916:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010920:	ed97 7a03 	vldr	s14, [r7, #12]
 8010924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010928:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	ee07 3a90 	vmov	s15, r3
}
 8010932:	eeb0 0a67 	vmov.f32	s0, s15
 8010936:	3710      	adds	r7, #16
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	460a      	mov	r2, r1
 8010946:	71fb      	strb	r3, [r7, #7]
 8010948:	4613      	mov	r3, r2
 801094a:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 801094c:	1dfb      	adds	r3, r7, #7
 801094e:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010950:	79bb      	ldrb	r3, [r7, #6]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d005      	beq.n	8010962 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010956:	2201      	movs	r2, #1
 8010958:	2140      	movs	r1, #64	@ 0x40
 801095a:	4811      	ldr	r0, [pc, #68]	@ (80109a0 <OLED_WR_Byte+0x64>)
 801095c:	f7f2 f824 	bl	80029a8 <HAL_GPIO_WritePin>
 8010960:	e004      	b.n	801096c <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010962:	2200      	movs	r2, #0
 8010964:	2140      	movs	r1, #64	@ 0x40
 8010966:	480e      	ldr	r0, [pc, #56]	@ (80109a0 <OLED_WR_Byte+0x64>)
 8010968:	f7f2 f81e 	bl	80029a8 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 801096c:	2200      	movs	r2, #0
 801096e:	2102      	movs	r1, #2
 8010970:	480c      	ldr	r0, [pc, #48]	@ (80109a4 <OLED_WR_Byte+0x68>)
 8010972:	f7f2 f819 	bl	80029a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010976:	23c8      	movs	r3, #200	@ 0xc8
 8010978:	2201      	movs	r2, #1
 801097a:	68f9      	ldr	r1, [r7, #12]
 801097c:	480a      	ldr	r0, [pc, #40]	@ (80109a8 <OLED_WR_Byte+0x6c>)
 801097e:	f7f6 fe11 	bl	80075a4 <HAL_SPI_Transmit>

	OLED_CS_Set();
 8010982:	2201      	movs	r2, #1
 8010984:	2102      	movs	r1, #2
 8010986:	4807      	ldr	r0, [pc, #28]	@ (80109a4 <OLED_WR_Byte+0x68>)
 8010988:	f7f2 f80e 	bl	80029a8 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 801098c:	2201      	movs	r2, #1
 801098e:	2140      	movs	r1, #64	@ 0x40
 8010990:	4803      	ldr	r0, [pc, #12]	@ (80109a0 <OLED_WR_Byte+0x64>)
 8010992:	f7f2 f809 	bl	80029a8 <HAL_GPIO_WritePin>
}
 8010996:	bf00      	nop
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	58022000 	.word	0x58022000
 80109a4:	58020400 	.word	0x58020400
 80109a8:	240003f4 	.word	0x240003f4

080109ac <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 80109b2:	2300      	movs	r3, #0
 80109b4:	71fb      	strb	r3, [r7, #7]
 80109b6:	e026      	b.n	8010a06 <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 80109b8:	79fb      	ldrb	r3, [r7, #7]
 80109ba:	3b50      	subs	r3, #80	@ 0x50
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	2100      	movs	r1, #0
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff ffbb 	bl	801093c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 80109c6:	2100      	movs	r1, #0
 80109c8:	2000      	movs	r0, #0
 80109ca:	f7ff ffb7 	bl	801093c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 80109ce:	2100      	movs	r1, #0
 80109d0:	2010      	movs	r0, #16
 80109d2:	f7ff ffb3 	bl	801093c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80109d6:	2300      	movs	r3, #0
 80109d8:	71bb      	strb	r3, [r7, #6]
 80109da:	e00d      	b.n	80109f8 <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 80109dc:	79ba      	ldrb	r2, [r7, #6]
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	490d      	ldr	r1, [pc, #52]	@ (8010a18 <OLED_Refresh+0x6c>)
 80109e2:	00d2      	lsls	r2, r2, #3
 80109e4:	440a      	add	r2, r1
 80109e6:	4413      	add	r3, r2
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	2101      	movs	r1, #1
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7ff ffa5 	bl	801093c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80109f2:	79bb      	ldrb	r3, [r7, #6]
 80109f4:	3301      	adds	r3, #1
 80109f6:	71bb      	strb	r3, [r7, #6]
 80109f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	daed      	bge.n	80109dc <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010a00:	79fb      	ldrb	r3, [r7, #7]
 8010a02:	3301      	adds	r3, #1
 8010a04:	71fb      	strb	r3, [r7, #7]
 8010a06:	79fb      	ldrb	r3, [r7, #7]
 8010a08:	2b07      	cmp	r3, #7
 8010a0a:	d9d5      	bls.n	80109b8 <OLED_Refresh+0xc>
	}
}
 8010a0c:	bf00      	nop
 8010a0e:	bf00      	nop
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	24006b24 	.word	0x24006b24

08010a1c <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010a22:	2300      	movs	r3, #0
 8010a24:	71fb      	strb	r3, [r7, #7]
 8010a26:	e014      	b.n	8010a52 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	71bb      	strb	r3, [r7, #6]
 8010a2c:	e00a      	b.n	8010a44 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 8010a2e:	79ba      	ldrb	r2, [r7, #6]
 8010a30:	79fb      	ldrb	r3, [r7, #7]
 8010a32:	490c      	ldr	r1, [pc, #48]	@ (8010a64 <OLED_Clear+0x48>)
 8010a34:	00d2      	lsls	r2, r2, #3
 8010a36:	440a      	add	r2, r1
 8010a38:	4413      	add	r3, r2
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8010a3e:	79bb      	ldrb	r3, [r7, #6]
 8010a40:	3301      	adds	r3, #1
 8010a42:	71bb      	strb	r3, [r7, #6]
 8010a44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	daf0      	bge.n	8010a2e <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8010a4c:	79fb      	ldrb	r3, [r7, #7]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	71fb      	strb	r3, [r7, #7]
 8010a52:	79fb      	ldrb	r3, [r7, #7]
 8010a54:	2b07      	cmp	r3, #7
 8010a56:	d9e7      	bls.n	8010a28 <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010a58:	f7ff ffa8 	bl	80109ac <OLED_Refresh>
}
 8010a5c:	bf00      	nop
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	24006b24 	.word	0x24006b24

08010a68 <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	460a      	mov	r2, r1
 8010a72:	71fb      	strb	r3, [r7, #7]
 8010a74:	4613      	mov	r3, r2
 8010a76:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010a78:	79bb      	ldrb	r3, [r7, #6]
 8010a7a:	08db      	lsrs	r3, r3, #3
 8010a7c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010a7e:	79bb      	ldrb	r3, [r7, #6]
 8010a80:	f003 0307 	and.w	r3, r3, #7
 8010a84:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010a86:	7bbb      	ldrb	r3, [r7, #14]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a8e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010a90:	79fa      	ldrb	r2, [r7, #7]
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	490a      	ldr	r1, [pc, #40]	@ (8010ac0 <OLED_DrawPoint+0x58>)
 8010a96:	00d2      	lsls	r2, r2, #3
 8010a98:	440a      	add	r2, r1
 8010a9a:	4413      	add	r3, r2
 8010a9c:	7818      	ldrb	r0, [r3, #0]
 8010a9e:	79fa      	ldrb	r2, [r7, #7]
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
 8010aa2:	7b79      	ldrb	r1, [r7, #13]
 8010aa4:	4301      	orrs	r1, r0
 8010aa6:	b2c8      	uxtb	r0, r1
 8010aa8:	4905      	ldr	r1, [pc, #20]	@ (8010ac0 <OLED_DrawPoint+0x58>)
 8010aaa:	00d2      	lsls	r2, r2, #3
 8010aac:	440a      	add	r2, r1
 8010aae:	4413      	add	r3, r2
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	701a      	strb	r2, [r3, #0]
}
 8010ab4:	bf00      	nop
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	24006b24 	.word	0x24006b24

08010ac4 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	460a      	mov	r2, r1
 8010ace:	71fb      	strb	r3, [r7, #7]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010ad4:	79bb      	ldrb	r3, [r7, #6]
 8010ad6:	08db      	lsrs	r3, r3, #3
 8010ad8:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010ada:	79bb      	ldrb	r3, [r7, #6]
 8010adc:	f003 0307 	and.w	r3, r3, #7
 8010ae0:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010ae2:	7bbb      	ldrb	r3, [r7, #14]
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8010aea:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010aec:	79fa      	ldrb	r2, [r7, #7]
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	491b      	ldr	r1, [pc, #108]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010af2:	00d2      	lsls	r2, r2, #3
 8010af4:	440a      	add	r2, r1
 8010af6:	4413      	add	r3, r2
 8010af8:	7819      	ldrb	r1, [r3, #0]
 8010afa:	79fa      	ldrb	r2, [r7, #7]
 8010afc:	7bfb      	ldrb	r3, [r7, #15]
 8010afe:	43c9      	mvns	r1, r1
 8010b00:	b2c8      	uxtb	r0, r1
 8010b02:	4917      	ldr	r1, [pc, #92]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010b04:	00d2      	lsls	r2, r2, #3
 8010b06:	440a      	add	r2, r1
 8010b08:	4413      	add	r3, r2
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 8010b0e:	79fa      	ldrb	r2, [r7, #7]
 8010b10:	7bfb      	ldrb	r3, [r7, #15]
 8010b12:	4913      	ldr	r1, [pc, #76]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010b14:	00d2      	lsls	r2, r2, #3
 8010b16:	440a      	add	r2, r1
 8010b18:	4413      	add	r3, r2
 8010b1a:	7818      	ldrb	r0, [r3, #0]
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	7bfb      	ldrb	r3, [r7, #15]
 8010b20:	7b79      	ldrb	r1, [r7, #13]
 8010b22:	4301      	orrs	r1, r0
 8010b24:	b2c8      	uxtb	r0, r1
 8010b26:	490e      	ldr	r1, [pc, #56]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010b28:	00d2      	lsls	r2, r2, #3
 8010b2a:	440a      	add	r2, r1
 8010b2c:	4413      	add	r3, r2
 8010b2e:	4602      	mov	r2, r0
 8010b30:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010b32:	79fa      	ldrb	r2, [r7, #7]
 8010b34:	7bfb      	ldrb	r3, [r7, #15]
 8010b36:	490a      	ldr	r1, [pc, #40]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010b38:	00d2      	lsls	r2, r2, #3
 8010b3a:	440a      	add	r2, r1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	7819      	ldrb	r1, [r3, #0]
 8010b40:	79fa      	ldrb	r2, [r7, #7]
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
 8010b44:	43c9      	mvns	r1, r1
 8010b46:	b2c8      	uxtb	r0, r1
 8010b48:	4905      	ldr	r1, [pc, #20]	@ (8010b60 <OLED_ClearPoint+0x9c>)
 8010b4a:	00d2      	lsls	r2, r2, #3
 8010b4c:	440a      	add	r2, r1
 8010b4e:	4413      	add	r3, r2
 8010b50:	4602      	mov	r2, r0
 8010b52:	701a      	strb	r2, [r3, #0]
}
 8010b54:	bf00      	nop
 8010b56:	3714      	adds	r7, #20
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr
 8010b60:	24006b24 	.word	0x24006b24

08010b64 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010b64:	b590      	push	{r4, r7, lr}
 8010b66:	b085      	sub	sp, #20
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	4608      	mov	r0, r1
 8010b6e:	4611      	mov	r1, r2
 8010b70:	461a      	mov	r2, r3
 8010b72:	4623      	mov	r3, r4
 8010b74:	71fb      	strb	r3, [r7, #7]
 8010b76:	4603      	mov	r3, r0
 8010b78:	71bb      	strb	r3, [r7, #6]
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	717b      	strb	r3, [r7, #5]
 8010b7e:	4613      	mov	r3, r2
 8010b80:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010b82:	79bb      	ldrb	r3, [r7, #6]
 8010b84:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010b86:	793b      	ldrb	r3, [r7, #4]
 8010b88:	08db      	lsrs	r3, r3, #3
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	793b      	ldrb	r3, [r7, #4]
 8010b90:	f003 0307 	and.w	r3, r3, #7
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	bf14      	ite	ne
 8010b9a:	2301      	movne	r3, #1
 8010b9c:	2300      	moveq	r3, #0
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	4413      	add	r3, r2
 8010ba2:	b2da      	uxtb	r2, r3
 8010ba4:	793b      	ldrb	r3, [r7, #4]
 8010ba6:	085b      	lsrs	r3, r3, #1
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	fb12 f303 	smulbb	r3, r2, r3
 8010bae:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010bb0:	797b      	ldrb	r3, [r7, #5]
 8010bb2:	3b20      	subs	r3, #32
 8010bb4:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	73fb      	strb	r3, [r7, #15]
 8010bba:	e057      	b.n	8010c6c <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 8010bbc:	793b      	ldrb	r3, [r7, #4]
 8010bbe:	2b0c      	cmp	r3, #12
 8010bc0:	d10b      	bne.n	8010bda <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010bc2:	7aba      	ldrb	r2, [r7, #10]
 8010bc4:	7bf9      	ldrb	r1, [r7, #15]
 8010bc6:	482e      	ldr	r0, [pc, #184]	@ (8010c80 <OLED_ShowChar+0x11c>)
 8010bc8:	4613      	mov	r3, r2
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	4413      	add	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4403      	add	r3, r0
 8010bd2:	440b      	add	r3, r1
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	737b      	strb	r3, [r7, #13]
 8010bd8:	e019      	b.n	8010c0e <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 8010bda:	793b      	ldrb	r3, [r7, #4]
 8010bdc:	2b10      	cmp	r3, #16
 8010bde:	d108      	bne.n	8010bf2 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010be0:	7aba      	ldrb	r2, [r7, #10]
 8010be2:	7bfb      	ldrb	r3, [r7, #15]
 8010be4:	4927      	ldr	r1, [pc, #156]	@ (8010c84 <OLED_ShowChar+0x120>)
 8010be6:	0112      	lsls	r2, r2, #4
 8010be8:	440a      	add	r2, r1
 8010bea:	4413      	add	r3, r2
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	737b      	strb	r3, [r7, #13]
 8010bf0:	e00d      	b.n	8010c0e <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010bf2:	793b      	ldrb	r3, [r7, #4]
 8010bf4:	2b18      	cmp	r3, #24
 8010bf6:	d13e      	bne.n	8010c76 <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010bf8:	7aba      	ldrb	r2, [r7, #10]
 8010bfa:	7bf9      	ldrb	r1, [r7, #15]
 8010bfc:	4822      	ldr	r0, [pc, #136]	@ (8010c88 <OLED_ShowChar+0x124>)
 8010bfe:	4613      	mov	r3, r2
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	4413      	add	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4403      	add	r3, r0
 8010c08:	440b      	add	r3, r1
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010c0e:	2300      	movs	r3, #0
 8010c10:	73bb      	strb	r3, [r7, #14]
 8010c12:	e025      	b.n	8010c60 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010c14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da06      	bge.n	8010c2a <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010c1c:	79ba      	ldrb	r2, [r7, #6]
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7ff ff20 	bl	8010a68 <OLED_DrawPoint>
 8010c28:	e005      	b.n	8010c36 <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010c2a:	79ba      	ldrb	r2, [r7, #6]
 8010c2c:	79fb      	ldrb	r3, [r7, #7]
 8010c2e:	4611      	mov	r1, r2
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff ff47 	bl	8010ac4 <OLED_ClearPoint>
			temp <<= 1;
 8010c36:	7b7b      	ldrb	r3, [r7, #13]
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	737b      	strb	r3, [r7, #13]
			y++;
 8010c3c:	79bb      	ldrb	r3, [r7, #6]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010c42:	79ba      	ldrb	r2, [r7, #6]
 8010c44:	7b3b      	ldrb	r3, [r7, #12]
 8010c46:	1ad2      	subs	r2, r2, r3
 8010c48:	793b      	ldrb	r3, [r7, #4]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d105      	bne.n	8010c5a <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010c4e:	7b3b      	ldrb	r3, [r7, #12]
 8010c50:	71bb      	strb	r3, [r7, #6]
				x++;
 8010c52:	79fb      	ldrb	r3, [r7, #7]
 8010c54:	3301      	adds	r3, #1
 8010c56:	71fb      	strb	r3, [r7, #7]
				break;
 8010c58:	e005      	b.n	8010c66 <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010c5a:	7bbb      	ldrb	r3, [r7, #14]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	73bb      	strb	r3, [r7, #14]
 8010c60:	7bbb      	ldrb	r3, [r7, #14]
 8010c62:	2b07      	cmp	r3, #7
 8010c64:	d9d6      	bls.n	8010c14 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010c66:	7bfb      	ldrb	r3, [r7, #15]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	73fb      	strb	r3, [r7, #15]
 8010c6c:	7bfa      	ldrb	r2, [r7, #15]
 8010c6e:	7afb      	ldrb	r3, [r7, #11]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d3a3      	bcc.n	8010bbc <OLED_ShowChar+0x58>
 8010c74:	e000      	b.n	8010c78 <OLED_ShowChar+0x114>
			return;
 8010c76:	bf00      	nop
			}
		}
	}
}
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd90      	pop	{r4, r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	08015314 	.word	0x08015314
 8010c84:	08015788 	.word	0x08015788
 8010c88:	08015d78 	.word	0x08015d78

08010c8c <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	603a      	str	r2, [r7, #0]
 8010c94:	461a      	mov	r2, r3
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	71bb      	strb	r3, [r7, #6]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010ca2:	e01b      	b.n	8010cdc <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	781a      	ldrb	r2, [r3, #0]
 8010ca8:	797b      	ldrb	r3, [r7, #5]
 8010caa:	79b9      	ldrb	r1, [r7, #6]
 8010cac:	79f8      	ldrb	r0, [r7, #7]
 8010cae:	f7ff ff59 	bl	8010b64 <OLED_ShowChar>
		x += size1 / 2;
 8010cb2:	797b      	ldrb	r3, [r7, #5]
 8010cb4:	085b      	lsrs	r3, r3, #1
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	4413      	add	r3, r2
 8010cbc:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	797b      	ldrb	r3, [r7, #5]
 8010cc2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	dd05      	ble.n	8010cd6 <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010cca:	2302      	movs	r3, #2
 8010ccc:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010cce:	79ba      	ldrb	r2, [r7, #6]
 8010cd0:	797b      	ldrb	r3, [r7, #5]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b1f      	cmp	r3, #31
 8010ce2:	d903      	bls.n	8010cec <OLED_ShowString+0x60>
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b7e      	cmp	r3, #126	@ 0x7e
 8010cea:	d9db      	bls.n	8010ca4 <OLED_ShowString+0x18>
	}
}
 8010cec:	bf00      	nop
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	2120      	movs	r1, #32
 8010cfc:	483f      	ldr	r0, [pc, #252]	@ (8010dfc <OLED_Init+0x108>)
 8010cfe:	f7f1 fe53 	bl	80029a8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010d02:	20c8      	movs	r0, #200	@ 0xc8
 8010d04:	f7f1 f8c8 	bl	8001e98 <HAL_Delay>
	OLED_RES_Set();
 8010d08:	2201      	movs	r2, #1
 8010d0a:	2120      	movs	r1, #32
 8010d0c:	483b      	ldr	r0, [pc, #236]	@ (8010dfc <OLED_Init+0x108>)
 8010d0e:	f7f1 fe4b 	bl	80029a8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010d12:	2100      	movs	r1, #0
 8010d14:	20ae      	movs	r0, #174	@ 0xae
 8010d16:	f7ff fe11 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	2000      	movs	r0, #0
 8010d1e:	f7ff fe0d 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010d22:	2100      	movs	r1, #0
 8010d24:	2010      	movs	r0, #16
 8010d26:	f7ff fe09 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	2040      	movs	r0, #64	@ 0x40
 8010d2e:	f7ff fe05 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010d32:	2100      	movs	r1, #0
 8010d34:	2081      	movs	r0, #129	@ 0x81
 8010d36:	f7ff fe01 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	20cf      	movs	r0, #207	@ 0xcf
 8010d3e:	f7ff fdfd 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010d42:	2100      	movs	r1, #0
 8010d44:	20a1      	movs	r0, #161	@ 0xa1
 8010d46:	f7ff fdf9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	20c8      	movs	r0, #200	@ 0xc8
 8010d4e:	f7ff fdf5 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010d52:	2100      	movs	r1, #0
 8010d54:	20a6      	movs	r0, #166	@ 0xa6
 8010d56:	f7ff fdf1 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	20a8      	movs	r0, #168	@ 0xa8
 8010d5e:	f7ff fded 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010d62:	2100      	movs	r1, #0
 8010d64:	203f      	movs	r0, #63	@ 0x3f
 8010d66:	f7ff fde9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	20d3      	movs	r0, #211	@ 0xd3
 8010d6e:	f7ff fde5 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010d72:	2100      	movs	r1, #0
 8010d74:	2000      	movs	r0, #0
 8010d76:	f7ff fde1 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	20d5      	movs	r0, #213	@ 0xd5
 8010d7e:	f7ff fddd 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010d82:	2100      	movs	r1, #0
 8010d84:	2080      	movs	r0, #128	@ 0x80
 8010d86:	f7ff fdd9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	20d9      	movs	r0, #217	@ 0xd9
 8010d8e:	f7ff fdd5 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010d92:	2100      	movs	r1, #0
 8010d94:	20f1      	movs	r0, #241	@ 0xf1
 8010d96:	f7ff fdd1 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	20da      	movs	r0, #218	@ 0xda
 8010d9e:	f7ff fdcd 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010da2:	2100      	movs	r1, #0
 8010da4:	2012      	movs	r0, #18
 8010da6:	f7ff fdc9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010daa:	2100      	movs	r1, #0
 8010dac:	20db      	movs	r0, #219	@ 0xdb
 8010dae:	f7ff fdc5 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010db2:	2100      	movs	r1, #0
 8010db4:	2040      	movs	r0, #64	@ 0x40
 8010db6:	f7ff fdc1 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010dba:	2100      	movs	r1, #0
 8010dbc:	2020      	movs	r0, #32
 8010dbe:	f7ff fdbd 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	2002      	movs	r0, #2
 8010dc6:	f7ff fdb9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010dca:	2100      	movs	r1, #0
 8010dcc:	208d      	movs	r0, #141	@ 0x8d
 8010dce:	f7ff fdb5 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	2014      	movs	r0, #20
 8010dd6:	f7ff fdb1 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010dda:	2100      	movs	r1, #0
 8010ddc:	20a4      	movs	r0, #164	@ 0xa4
 8010dde:	f7ff fdad 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010de2:	2100      	movs	r1, #0
 8010de4:	20a6      	movs	r0, #166	@ 0xa6
 8010de6:	f7ff fda9 	bl	801093c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010dea:	2100      	movs	r1, #0
 8010dec:	20af      	movs	r0, #175	@ 0xaf
 8010dee:	f7ff fda5 	bl	801093c <OLED_WR_Byte>
	OLED_Clear();
 8010df2:	f7ff fe13 	bl	8010a1c <OLED_Clear>
}
 8010df6:	bf00      	nop
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	58020800 	.word	0x58020800

08010e00 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010e00:	b480      	push	{r7}
 8010e02:	b087      	sub	sp, #28
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6178      	str	r0, [r7, #20]
 8010e08:	ed87 0a04 	vstr	s0, [r7, #16]
 8010e0c:	edc7 0a03 	vstr	s1, [r7, #12]
 8010e10:	ed87 1a02 	vstr	s2, [r7, #8]
 8010e14:	edc7 1a01 	vstr	s3, [r7, #4]
 8010e18:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	693a      	ldr	r2, [r7, #16]
 8010e20:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	68ba      	ldr	r2, [r7, #8]
 8010e2c:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f04f 0200 	mov.w	r2, #0
 8010e40:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0;
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	f04f 0200 	mov.w	r2, #0
 8010e48:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f04f 0200 	mov.w	r2, #0
 8010e50:	615a      	str	r2, [r3, #20]
}
 8010e52:	bf00      	nop
 8010e54:	371c      	adds	r7, #28
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b085      	sub	sp, #20
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	60f8      	str	r0, [r7, #12]
 8010e66:	ed87 0a02 	vstr	s0, [r7, #8]
 8010e6a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010e6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8010e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	ed93 7a06 	vldr	s14, [r3, #24]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	edd3 6a00 	vldr	s13, [r3]
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	ed93 6a03 	vldr	s12, [r3, #12]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	edd3 7a04 	vldr	s15, [r3, #16]
 8010e98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	ed93 6a01 	vldr	s12, [r3, #4]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	edd3 7a03 	vldr	s15, [r3, #12]
 8010eac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010eb0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	ed93 6a02 	vldr	s12, [r3, #8]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	edd3 5a03 	vldr	s11, [r3, #12]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ec6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010eca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	edd3 7a05 	vldr	s15, [r3, #20]
 8010ed4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010ed8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	691a      	ldr	r2, [r3, #16]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0e:	dd04      	ble.n	8010f1a <pid+0xbc>
		pid->out = pid->Max;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	69da      	ldr	r2, [r3, #28]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8010f18:	e00f      	b.n	8010f3a <pid+0xdc>
	else if (pid->out < pid->Min)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2e:	d400      	bmi.n	8010f32 <pid+0xd4>
}
 8010f30:	e003      	b.n	8010f3a <pid+0xdc>
		pid->out = pid->Min;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6a1a      	ldr	r2, [r3, #32]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	619a      	str	r2, [r3, #24]
}
 8010f3a:	bf00      	nop
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
	...

08010f48 <svpwm_Control>:
 * @brief  SVPWM控制
 * @param  signal PLL信号输入结构体指针
 * @param  Udc 直流母线电压
 */
void svpwm_Control(pll_Signal_I *signal)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b093      	sub	sp, #76	@ 0x4c
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
    // 计算中间变量
    float Ts = signal->basic->Ts;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f56:	633b      	str	r3, [r7, #48]	@ 0x30
    float Ualpha = signal->park_inv_alpha;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float Ubeta = signal->park_inv_beta;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	689b      	ldr	r3, [r3, #8]
 8010f62:	62bb      	str	r3, [r7, #40]	@ 0x28

    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 8010f64:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010f68:	ed9f 7ae1 	vldr	s14, [pc, #900]	@ 80112f0 <svpwm_Control+0x3a8>
 8010f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f70:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float Ubeta_ = Ubeta * Ts;
 8010f7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010f80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8010f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f88:	edc7 7a08 	vstr	s15, [r7, #32]

    // 计算XYZ
    float X = Ubeta_;
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	61fb      	str	r3, [r7, #28]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8010f90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010f94:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010f9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8010fa0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010fa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fac:	edc7 7a06 	vstr	s15, [r7, #24]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8010fb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8010fb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010fbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8010fc0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fcc:	edc7 7a05 	vstr	s15, [r7, #20]

    // 通过XYZ做扇区判断
    uint8_t sector = 0;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (Y < 0)
 8010fd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe2:	d517      	bpl.n	8011014 <svpwm_Control+0xcc>
    {
        if (Z < 0)
 8010fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8010fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff0:	d503      	bpl.n	8010ffa <svpwm_Control+0xb2>
            sector = 5;
 8010ff2:	2305      	movs	r3, #5
 8010ff4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010ff8:	e023      	b.n	8011042 <svpwm_Control+0xfa>
        else
            sector = (X < 0) ? 4 : 3;
 8010ffa:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011006:	d501      	bpl.n	801100c <svpwm_Control+0xc4>
 8011008:	2304      	movs	r3, #4
 801100a:	e000      	b.n	801100e <svpwm_Control+0xc6>
 801100c:	2303      	movs	r3, #3
 801100e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011012:	e016      	b.n	8011042 <svpwm_Control+0xfa>
    }
    else
    {
        if (Z > 0)
 8011014:	edd7 7a05 	vldr	s15, [r7, #20]
 8011018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011020:	dd03      	ble.n	801102a <svpwm_Control+0xe2>
            sector = 2;
 8011022:	2302      	movs	r3, #2
 8011024:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8011028:	e00b      	b.n	8011042 <svpwm_Control+0xfa>
        else
            sector = (X < 0) ? 6 : 1;
 801102a:	edd7 7a07 	vldr	s15, [r7, #28]
 801102e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011036:	d501      	bpl.n	801103c <svpwm_Control+0xf4>
 8011038:	2306      	movs	r3, #6
 801103a:	e000      	b.n	801103e <svpwm_Control+0xf6>
 801103c:	2301      	movs	r3, #1
 801103e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8011042:	f04f 0300 	mov.w	r3, #0
 8011046:	643b      	str	r3, [r7, #64]	@ 0x40
 8011048:	f04f 0300 	mov.w	r3, #0
 801104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801104e:	f04f 0300 	mov.w	r3, #0
 8011052:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (sector)
 8011054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8011058:	3b01      	subs	r3, #1
 801105a:	2b05      	cmp	r3, #5
 801105c:	f200 80f0 	bhi.w	8011240 <svpwm_Control+0x2f8>
 8011060:	a201      	add	r2, pc, #4	@ (adr r2, 8011068 <svpwm_Control+0x120>)
 8011062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011066:	bf00      	nop
 8011068:	08011081 	.word	0x08011081
 801106c:	080110cb 	.word	0x080110cb
 8011070:	08011115 	.word	0x08011115
 8011074:	0801115f 	.word	0x0801115f
 8011078:	080111a9 	.word	0x080111a9
 801107c:	080111f7 	.word	0x080111f7
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8011080:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011084:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011088:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801108c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011090:	edd7 7a05 	vldr	s15, [r7, #20]
 8011094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011098:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801109c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80110a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Ta + Z;
 80110a8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80110ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80110b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110b4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Tc = Tb - X;
 80110b8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80110bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80110c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110c4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        break;
 80110c8:	e0ba      	b.n	8011240 <svpwm_Control+0x2f8>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 80110ca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80110ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80110d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80110d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80110da:	edd7 7a06 	vldr	s15, [r7, #24]
 80110de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80110e2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80110e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80110ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Ta = Tb - Z;
 80110f2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80110f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80110fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tc = Ta - Y;
 8011102:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011106:	edd7 7a06 	vldr	s15, [r7, #24]
 801110a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801110e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        break;
 8011112:	e095      	b.n	8011240 <svpwm_Control+0x2f8>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 8011114:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011118:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801111c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011120:	edd7 6a07 	vldr	s13, [r7, #28]
 8011124:	edd7 7a06 	vldr	s15, [r7, #24]
 8011128:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801112c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011130:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011138:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Tc = Tb - X;
 801113c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011140:	edd7 7a07 	vldr	s15, [r7, #28]
 8011144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011148:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Ta = Tc + Y;
 801114c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8011150:	edd7 7a06 	vldr	s15, [r7, #24]
 8011154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011158:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 801115c:	e070      	b.n	8011240 <svpwm_Control+0x2f8>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 801115e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011162:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011166:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801116a:	edd7 6a05 	vldr	s13, [r7, #20]
 801116e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011172:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011176:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801117a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011182:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Tb = Tc + X;
 8011186:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 801118a:	edd7 7a07 	vldr	s15, [r7, #28]
 801118e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011192:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        Ta = Tb - Z;
 8011196:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801119a:	edd7 7a05 	vldr	s15, [r7, #20]
 801119e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111a2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        break;
 80111a6:	e04b      	b.n	8011240 <svpwm_Control+0x2f8>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 80111a8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80111ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80111b8:	eef1 6a67 	vneg.f32	s13, s15
 80111bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80111c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111c4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80111c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80111cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111d0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Ta = Tc + Y;
 80111d4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80111d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80111dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111e0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tb = Ta + Z;
 80111e4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80111e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80111ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111f0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        break;
 80111f4:	e024      	b.n	8011240 <svpwm_Control+0x2f8>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 80111f6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80111fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011202:	edd7 6a06 	vldr	s13, [r7, #24]
 8011206:	edd7 7a07 	vldr	s15, [r7, #28]
 801120a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801120e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011212:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801121a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        Tc = Ta - Y;
 801121e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011222:	edd7 7a06 	vldr	s15, [r7, #24]
 8011226:	ee77 7a67 	vsub.f32	s15, s14, s15
 801122a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        Tb = Tc + X;
 801122e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8011232:	edd7 7a07 	vldr	s15, [r7, #28]
 8011236:	ee77 7a27 	vadd.f32	s15, s14, s15
 801123a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        break;
 801123e:	bf00      	nop
    }

    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 8011240:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8011244:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801124c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80112f4 <svpwm_Control+0x3ac>
 8011250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011258:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 801125c:	60bb      	str	r3, [r7, #8]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 801125e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011262:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801126a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80112f4 <svpwm_Control+0x3ac>
 801126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011276:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 801127a:	60fb      	str	r3, [r7, #12]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 801127c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011280:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011288:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80112f4 <svpwm_Control+0x3ac>
 801128c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011294:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011298:	613b      	str	r3, [r7, #16]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 801129a:	2300      	movs	r3, #0
 801129c:	637b      	str	r3, [r7, #52]	@ 0x34
 801129e:	e014      	b.n	80112ca <svpwm_Control+0x382>
    {
        if (ccr[i] > TIM_PERIOD)
 80112a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	3348      	adds	r3, #72	@ 0x48
 80112a6:	443b      	add	r3, r7
 80112a8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80112ac:	f241 726f 	movw	r2, #5999	@ 0x176f
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d907      	bls.n	80112c4 <svpwm_Control+0x37c>
        {
            ccr[i] = TIM_PERIOD;
 80112b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112b6:	009b      	lsls	r3, r3, #2
 80112b8:	3348      	adds	r3, #72	@ 0x48
 80112ba:	443b      	add	r3, r7
 80112bc:	f241 726f 	movw	r2, #5999	@ 0x176f
 80112c0:	f843 2c40 	str.w	r2, [r3, #-64]
    for (int i = 0; i < 3; ++i)
 80112c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c6:	3301      	adds	r3, #1
 80112c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80112ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	dde7      	ble.n	80112a0 <svpwm_Control+0x358>
            ccr[i] = 0;
        }
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 80112d0:	4a09      	ldr	r2, [pc, #36]	@ (80112f8 <svpwm_Control+0x3b0>)
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 80112d6:	4a08      	ldr	r2, [pc, #32]	@ (80112f8 <svpwm_Control+0x3b0>)
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 80112dc:	4a06      	ldr	r2, [pc, #24]	@ (80112f8 <svpwm_Control+0x3b0>)
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80112e2:	bf00      	nop
 80112e4:	374c      	adds	r7, #76	@ 0x4c
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	3fddb3d7 	.word	0x3fddb3d7
 80112f4:	45bb7800 	.word	0x45bb7800
 80112f8:	40010000 	.word	0x40010000
 80112fc:	00000000 	.word	0x00000000

08011300 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 8011300:	b590      	push	{r4, r7, lr}
 8011302:	b087      	sub	sp, #28
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	ed87 0a02 	vstr	s0, [r7, #8]
 801130c:	460b      	mov	r3, r1
 801130e:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 8011310:	200c      	movs	r0, #12
 8011312:	f000 fe73 	bl	8011ffc <malloc>
 8011316:	4603      	mov	r3, r0
 8011318:	461a      	mov	r2, r3
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681c      	ldr	r4, [r3, #0]
 8011322:	2050      	movs	r0, #80	@ 0x50
 8011324:	f000 fe6a 	bl	8011ffc <malloc>
 8011328:	4603      	mov	r3, r0
 801132a:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681c      	ldr	r4, [r3, #0]
 8011330:	2024      	movs	r0, #36	@ 0x24
 8011332:	f000 fe63 	bl	8011ffc <malloc>
 8011336:	4603      	mov	r3, r0
 8011338:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f04f 0200 	mov.w	r2, #0
 8011344:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f04f 0200 	mov.w	r2, #0
 8011350:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f04f 0200 	mov.w	r2, #0
 801135c:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f04f 0200 	mov.w	r2, #0
 8011368:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f04f 0200 	mov.w	r2, #0
 8011374:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f04f 0200 	mov.w	r2, #0
 8011380:	615a      	str	r2, [r3, #20]

    (*signal)->theta = 0.f;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f04f 0200 	mov.w	r2, #0
 801138a:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	edd7 7a02 	vldr	s15, [r7, #8]
 8011396:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011430 <pll_Init_V+0x130>
 801139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801139e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 80113a2:	88fb      	ldrh	r3, [r7, #6]
 80113a4:	ee07 3a90 	vmov	s15, r3
 80113a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80113b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80113d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113d6:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 80113da:	edd7 7a05 	vldr	s15, [r7, #20]
 80113de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80113e2:	eeb0 0b47 	vmov.f64	d0, d7
 80113e6:	f003 fbe7 	bl	8014bb8 <sqrt>
 80113ea:	eeb0 7b40 	vmov.f64	d7, d0
 80113ee:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011428 <pll_Init_V+0x128>
 80113f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80113f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80113fa:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8011434 <pll_Init_V+0x134>
 8011408:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011438 <pll_Init_V+0x138>
 801140c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 801143c <pll_Init_V+0x13c>
 8011410:	edd7 0a05 	vldr	s1, [r7, #20]
 8011414:	ed97 0a04 	vldr	s0, [r7, #16]
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff fcf1 	bl	8010e00 <pid_Init>
}
 801141e:	bf00      	nop
 8011420:	371c      	adds	r7, #28
 8011422:	46bd      	mov	sp, r7
 8011424:	bd90      	pop	{r4, r7, pc}
 8011426:	bf00      	nop
 8011428:	667f3bcd 	.word	0x667f3bcd
 801142c:	3ff6a09e 	.word	0x3ff6a09e
 8011430:	40c90fdb 	.word	0x40c90fdb
 8011434:	c27b53d2 	.word	0xc27b53d2
 8011438:	431d1463 	.word	0x431d1463
 801143c:	00000000 	.word	0x00000000

08011440 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011440:	b590      	push	{r4, r7, lr}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	ed87 0a02 	vstr	s0, [r7, #8]
 801144c:	460b      	mov	r3, r1
 801144e:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011450:	2028      	movs	r0, #40	@ 0x28
 8011452:	f000 fdd3 	bl	8011ffc <malloc>
 8011456:	4603      	mov	r3, r0
 8011458:	461a      	mov	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681c      	ldr	r4, [r3, #0]
 8011462:	2050      	movs	r0, #80	@ 0x50
 8011464:	f000 fdca 	bl	8011ffc <malloc>
 8011468:	4603      	mov	r3, r0
 801146a:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681c      	ldr	r4, [r3, #0]
 8011470:	2024      	movs	r0, #36	@ 0x24
 8011472:	f000 fdc3 	bl	8011ffc <malloc>
 8011476:	4603      	mov	r3, r0
 8011478:	6223      	str	r3, [r4, #32]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681c      	ldr	r4, [r3, #0]
 801147e:	2024      	movs	r0, #36	@ 0x24
 8011480:	f000 fdbc 	bl	8011ffc <malloc>
 8011484:	4603      	mov	r3, r0
 8011486:	6263      	str	r3, [r4, #36]	@ 0x24
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f04f 0200 	mov.w	r2, #0
 8011492:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f04f 0200 	mov.w	r2, #0
 801149e:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f04f 0200 	mov.w	r2, #0
 80114aa:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f04f 0200 	mov.w	r2, #0
 80114b6:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f04f 0200 	mov.w	r2, #0
 80114c2:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f04f 0200 	mov.w	r2, #0
 80114ce:	615a      	str	r2, [r3, #20]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80114da:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801155c <pll_Init_I+0x11c>
 80114de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 80114e6:	88fb      	ldrh	r3, [r7, #6]
 80114e8:	ee07 3a90 	vmov	s15, r3
 80114ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80114fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114fe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    (*signal)->CorL = 0;   // 0:感性 1:容性
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2200      	movs	r2, #0
 8011508:	761a      	strb	r2, [r3, #24]
    (*signal)->L = 0.001f; // 1mH
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4a14      	ldr	r2, [pc, #80]	@ (8011560 <pll_Init_I+0x120>)
 8011510:	61da      	str	r2, [r3, #28]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 0.1f, 0.01f, 0, 1.f, -1.f);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	6a1b      	ldr	r3, [r3, #32]
 8011518:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 801151c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8011520:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8011564 <pll_Init_I+0x124>
 8011524:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8011568 <pll_Init_I+0x128>
 8011528:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 801156c <pll_Init_I+0x12c>
 801152c:	4618      	mov	r0, r3
 801152e:	f7ff fc67 	bl	8010e00 <pid_Init>
    pid_Init((*signal)->pid_q, 0.1f, 0.01f, 0, 1.f, -1.f);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011538:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 801153c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8011540:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8011564 <pll_Init_I+0x124>
 8011544:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8011568 <pll_Init_I+0x128>
 8011548:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801156c <pll_Init_I+0x12c>
 801154c:	4618      	mov	r0, r3
 801154e:	f7ff fc57 	bl	8010e00 <pid_Init>
}
 8011552:	bf00      	nop
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	bd90      	pop	{r4, r7, pc}
 801155a:	bf00      	nop
 801155c:	40c90fdb 	.word	0x40c90fdb
 8011560:	3a83126f 	.word	0x3a83126f
 8011564:	00000000 	.word	0x00000000
 8011568:	3c23d70a 	.word	0x3c23d70a
 801156c:	3dcccccd 	.word	0x3dcccccd

08011570 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011574:	ed2d 8b02 	vpush	{d8}
 8011578:	b08c      	sub	sp, #48	@ 0x30
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_V->basic->input_a, signal_V->basic->input_b, &signal_V->basic->clarke_alpha, &signal_V->basic->clarke_beta);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	6818      	ldr	r0, [r3, #0]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	6859      	ldr	r1, [r3, #4]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f103 0218 	add.w	r2, r3, #24
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	331c      	adds	r3, #28
 8011598:	6178      	str	r0, [r7, #20]
 801159a:	6139      	str	r1, [r7, #16]
 801159c:	60fa      	str	r2, [r7, #12]
 801159e:	60bb      	str	r3, [r7, #8]
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {
    /* Calculate pIalpha using the equation, pIalpha = Ia */
    *pIalpha = Ia;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	697a      	ldr	r2, [r7, #20]
 80115a4:	601a      	str	r2, [r3, #0]

    /* Calculate pIbeta using the equation, pIbeta = (1/sqrt(3)) * Ia + (2/sqrt(3)) * Ib */
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 80115a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80115aa:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80116f0 <pll_Control_V+0x180>
 80115ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80115b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80115b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80116f4 <pll_Control_V+0x184>
 80115ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	edc3 7a00 	vstr	s15, [r3]
  }
 80115c8:	bf00      	nop
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	69de      	ldr	r6, [r3, #28]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f103 0520 	add.w	r5, r3, #32
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80115ee:	eeb0 0a67 	vmov.f32	s0, s15
 80115f2:	f000 fc73 	bl	8011edc <arm_sin_f32>
 80115f6:	eeb0 8a40 	vmov.f32	s16, s0
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8011600:	eeb0 0a67 	vmov.f32	s0, s15
 8011604:	f000 fcb0 	bl	8011f68 <arm_cos_f32>
 8011608:	eef0 7a40 	vmov.f32	s15, s0
 801160c:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
 8011610:	62be      	str	r6, [r7, #40]	@ 0x28
 8011612:	627d      	str	r5, [r7, #36]	@ 0x24
 8011614:	623c      	str	r4, [r7, #32]
 8011616:	ed87 8a07 	vstr	s16, [r7, #28]
 801161a:	edc7 7a06 	vstr	s15, [r7, #24]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 801161e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011622:	edd7 7a06 	vldr	s15, [r7, #24]
 8011626:	ee27 7a27 	vmul.f32	s14, s14, s15
 801162a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801162e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011636:	ee77 7a27 	vadd.f32	s15, s14, s15
 801163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801163c:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011640:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011644:	eeb1 7a67 	vneg.f32	s14, s15
 8011648:	edd7 7a07 	vldr	s15, [r7, #28]
 801164c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011650:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8011654:	edd7 7a06 	vldr	s15, [r7, #24]
 8011658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011660:	6a3b      	ldr	r3, [r7, #32]
 8011662:	edc3 7a00 	vstr	s15, [r3]
  }
 8011666:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	689a      	ldr	r2, [r3, #8]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011674:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80116f8 <pll_Control_V+0x188>
 8011678:	eeb0 0a67 	vmov.f32	s0, s15
 801167c:	4610      	mov	r0, r2
 801167e:	f7ff fbee 	bl	8010e5e <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	ed93 7a01 	vldr	s14, [r3, #4]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	edd3 6a06 	vldr	s13, [r3, #24]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011698:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80116a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80116b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80116bc:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 80116e8 <pll_Control_V+0x178>
 80116c0:	eeb0 0b47 	vmov.f64	d0, d7
 80116c4:	f003 fa54 	bl	8014b70 <fmod>
 80116c8:	eeb0 7b40 	vmov.f64	d7, d0
 80116cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80116d6:	bf00      	nop
 80116d8:	3730      	adds	r7, #48	@ 0x30
 80116da:	46bd      	mov	sp, r7
 80116dc:	ecbd 8b02 	vpop	{d8}
 80116e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e4:	f3af 8000 	nop.w
 80116e8:	60000000 	.word	0x60000000
 80116ec:	401921fb 	.word	0x401921fb
 80116f0:	3f13cd3a 	.word	0x3f13cd3a
 80116f4:	3f93cd3a 	.word	0x3f93cd3a
 80116f8:	00000000 	.word	0x00000000

080116fc <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 80116fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011700:	ed2d 8b02 	vpush	{d8}
 8011704:	b098      	sub	sp, #96	@ 0x60
 8011706:	af00      	add	r7, sp, #0
 8011708:	60f8      	str	r0, [r7, #12]
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	ed87 0a01 	vstr	s0, [r7, #4]
 8011710:	edc7 0a00 	vstr	s1, [r7]
    // 先对信号进行clarke变换
    arm_clarke_f32(signal_I->basic->input_a, signal_I->basic->input_b, &signal_I->basic->clarke_alpha, &signal_I->basic->clarke_beta);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	6818      	ldr	r0, [r3, #0]
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	6859      	ldr	r1, [r3, #4]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f103 0218 	add.w	r2, r3, #24
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	331c      	adds	r3, #28
 801172e:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011730:	6379      	str	r1, [r7, #52]	@ 0x34
 8011732:	633a      	str	r2, [r7, #48]	@ 0x30
 8011734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pIalpha = Ia;
 8011736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801173a:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 801173c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8011740:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8011a24 <pll_Control_I+0x328>
 8011744:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011748:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801174c:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8011a28 <pll_Control_I+0x32c>
 8011750:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175a:	edc3 7a00 	vstr	s15, [r3]
  }
 801175e:	bf00      	nop
    // 在电压的系上得出电流的dq值
    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	69de      	ldr	r6, [r3, #28]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f103 0520 	add.w	r5, r3, #32
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	edd3 7a01 	vldr	s15, [r3, #4]
 8011784:	eeb0 0a67 	vmov.f32	s0, s15
 8011788:	f000 fba8 	bl	8011edc <arm_sin_f32>
 801178c:	eeb0 8a40 	vmov.f32	s16, s0
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	edd3 7a01 	vldr	s15, [r3, #4]
 8011796:	eeb0 0a67 	vmov.f32	s0, s15
 801179a:	f000 fbe5 	bl	8011f68 <arm_cos_f32>
 801179e:	eef0 7a40 	vmov.f32	s15, s0
 80117a2:	f8c7 8050 	str.w	r8, [r7, #80]	@ 0x50
 80117a6:	64fe      	str	r6, [r7, #76]	@ 0x4c
 80117a8:	64bd      	str	r5, [r7, #72]	@ 0x48
 80117aa:	647c      	str	r4, [r7, #68]	@ 0x44
 80117ac:	ed87 8a10 	vstr	s16, [r7, #64]	@ 0x40
 80117b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80117b4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80117b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80117bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117c0:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80117c4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80117c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117d2:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80117d6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80117da:	eeb1 7a67 	vneg.f32	s14, s15
 80117de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80117e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117e6:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80117ea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80117ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117f8:	edc3 7a00 	vstr	s15, [r3]
  }
 80117fc:	bf00      	nop
    // PI控制
    float PFTheta = asinf(PF);
 80117fe:	ed97 0a00 	vldr	s0, [r7]
 8011802:	f003 f9f9 	bl	8014bf8 <asinf>
 8011806:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
    Iset = Iset * 1.414f / Ibase;
 801180a:	edd7 7a01 	vldr	s15, [r7, #4]
 801180e:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8011a2c <pll_Control_I+0x330>
 8011812:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011816:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8011a30 <pll_Control_I+0x334>
 801181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801181e:	edc7 7a01 	vstr	s15, [r7, #4]
    pid(signal_I->pid_d, Iset * arm_cos_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	6a1c      	ldr	r4, [r3, #32]
 8011826:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 801182a:	f000 fb9d 	bl	8011f68 <arm_cos_f32>
 801182e:	eeb0 7a40 	vmov.f32	s14, s0
 8011832:	edd7 7a01 	vldr	s15, [r7, #4]
 8011836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	ed93 7a08 	vldr	s14, [r3, #32]
 8011842:	eef0 0a47 	vmov.f32	s1, s14
 8011846:	eeb0 0a67 	vmov.f32	s0, s15
 801184a:	4620      	mov	r0, r4
 801184c:	f7ff fb07 	bl	8010e5e <pid>
    if (signal_I->CorL == 1)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	7e1b      	ldrb	r3, [r3, #24]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d117      	bne.n	8011888 <pll_Control_I+0x18c>
    {
        pid(signal_I->pid_q, Iset * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801185c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011860:	f000 fb3c 	bl	8011edc <arm_sin_f32>
 8011864:	eeb0 7a40 	vmov.f32	s14, s0
 8011868:	edd7 7a01 	vldr	s15, [r7, #4]
 801186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011878:	eef0 0a47 	vmov.f32	s1, s14
 801187c:	eeb0 0a67 	vmov.f32	s0, s15
 8011880:	4620      	mov	r0, r4
 8011882:	f7ff faec 	bl	8010e5e <pid>
 8011886:	e018      	b.n	80118ba <pll_Control_I+0x1be>
    }
    else
    {
        pid(signal_I->pid_q, -Iset * arm_sin_f32(PFTheta), signal_I->basic->park_q); // 相位
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801188c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011890:	eeb1 8a67 	vneg.f32	s16, s15
 8011894:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011898:	f000 fb20 	bl	8011edc <arm_sin_f32>
 801189c:	eef0 7a40 	vmov.f32	s15, s0
 80118a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80118ac:	eef0 0a47 	vmov.f32	s1, s14
 80118b0:	eeb0 0a67 	vmov.f32	s0, s15
 80118b4:	4620      	mov	r0, r4
 80118b6:	f7ff fad2 	bl	8010e5e <pid>
    }
    // 解耦调制
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	ed93 7a08 	vldr	s14, [r3, #32]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	6a1b      	ldr	r3, [r3, #32]
 80118c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80118ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80118de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80118e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118f0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011900:	edd3 7a06 	vldr	s15, [r3, #24]
 8011904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	edd3 6a08 	vldr	s13, [r3, #32]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011918:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	edd3 7a07 	vldr	s15, [r3, #28]
 8011922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011926:	ee77 7a67 	vsub.f32	s15, s14, s15
 801192a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    // 限幅
    if (Uabd > 1.f)
 801192e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8011932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011936:	eef4 7ac7 	vcmpe.f32	s15, s14
 801193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193e:	dd03      	ble.n	8011948 <pll_Control_I+0x24c>
    {
        Uabd = 1.f;
 8011940:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011946:	e00a      	b.n	801195e <pll_Control_I+0x262>
    }
    else if (Uabd < -1.f)
 8011948:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 801194c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011958:	d501      	bpl.n	801195e <pll_Control_I+0x262>
    {
        Uabd = -1.f;
 801195a:	4b36      	ldr	r3, [pc, #216]	@ (8011a34 <pll_Control_I+0x338>)
 801195c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    if (Uabq > 1.f)
 801195e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8011962:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011966:	eef4 7ac7 	vcmpe.f32	s15, s14
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	dd03      	ble.n	8011978 <pll_Control_I+0x27c>
    {
        Uabq = 1.f;
 8011970:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011976:	e00a      	b.n	801198e <pll_Control_I+0x292>
    }
    else if (Uabq < -1.f)
 8011978:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801197c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	d501      	bpl.n	801198e <pll_Control_I+0x292>
    {
        Uabq = -1.f;
 801198a:	4b2a      	ldr	r3, [pc, #168]	@ (8011a34 <pll_Control_I+0x338>)
 801198c:	65bb      	str	r3, [r7, #88]	@ 0x58
    }
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	1d1d      	adds	r5, r3, #4
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f103 0408 	add.w	r4, r3, #8
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	edd3 7a01 	vldr	s15, [r3, #4]
 801199e:	eeb0 0a67 	vmov.f32	s0, s15
 80119a2:	f000 fa9b 	bl	8011edc <arm_sin_f32>
 80119a6:	eeb0 8a40 	vmov.f32	s16, s0
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80119b0:	eeb0 0a67 	vmov.f32	s0, s15
 80119b4:	f000 fad8 	bl	8011f68 <arm_cos_f32>
 80119b8:	eef0 7a40 	vmov.f32	s15, s0
 80119bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80119c4:	623d      	str	r5, [r7, #32]
 80119c6:	61fc      	str	r4, [r7, #28]
 80119c8:	ed87 8a06 	vstr	s16, [r7, #24]
 80119cc:	edc7 7a05 	vstr	s15, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 80119d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80119d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80119d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80119dc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80119e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80119e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80119e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 80119f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80119f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80119fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80119fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8011a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	edc3 7a00 	vstr	s15, [r3]
  }
 8011a14:	bf00      	nop
}
 8011a16:	bf00      	nop
 8011a18:	3760      	adds	r7, #96	@ 0x60
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	ecbd 8b02 	vpop	{d8}
 8011a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a24:	3f13cd3a 	.word	0x3f13cd3a
 8011a28:	3f93cd3a 	.word	0x3f93cd3a
 8011a2c:	3fb4fdf4 	.word	0x3fb4fdf4
 8011a30:	40e23d71 	.word	0x40e23d71
 8011a34:	bf800000 	.word	0xbf800000

08011a38 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	4603      	mov	r3, r0
 8011a40:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011a42:	88fb      	ldrh	r3, [r7, #6]
 8011a44:	2b40      	cmp	r3, #64	@ 0x40
 8011a46:	d13b      	bne.n	8011ac0 <HAL_GPIO_EXTI_Callback+0x88>
    {
        // 获取电压电流
        getVoltageCurrent();
 8011a48:	f000 f958 	bl	8011cfc <getVoltageCurrent>

        // 计算有效值
        calcEffectiveValue();
 8011a4c:	f000 f84a 	bl	8011ae4 <calcEffectiveValue>

        // 标幺化
        normalize();
 8011a50:	f000 f8f0 	bl	8011c34 <normalize>

        // 锁相控制
        pll_Control_V(signal_V);
 8011a54:	4b1c      	ldr	r3, [pc, #112]	@ (8011ac8 <HAL_GPIO_EXTI_Callback+0x90>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7ff fd89 	bl	8011570 <pll_Control_V>

        // 电流内环控制
        pll_Control_I(signal_I, signal_V, 1.f, 1.f);
 8011a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8011acc <HAL_GPIO_EXTI_Callback+0x94>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4a19      	ldr	r2, [pc, #100]	@ (8011ac8 <HAL_GPIO_EXTI_Callback+0x90>)
 8011a64:	6812      	ldr	r2, [r2, #0]
 8011a66:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011a6a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011a6e:	4611      	mov	r1, r2
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7ff fe43 	bl	80116fc <pll_Control_I>

        // svpwm调制
        svpwm_Control(signal_I);
 8011a76:	4b15      	ldr	r3, [pc, #84]	@ (8011acc <HAL_GPIO_EXTI_Callback+0x94>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff fa64 	bl	8010f48 <svpwm_Control>

        // DAC输出
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f));
 8011a80:	4b13      	ldr	r3, [pc, #76]	@ (8011ad0 <HAL_GPIO_EXTI_Callback+0x98>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a86:	ee07 3a90 	vmov	s15, r3
 8011a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a8e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8011ad4 <HAL_GPIO_EXTI_Callback+0x9c>
 8011a92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011a96:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8011ad4 <HAL_GPIO_EXTI_Callback+0x9c>
 8011a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011a9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011ad8 <HAL_GPIO_EXTI_Callback+0xa0>
 8011aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011aa6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011adc <HAL_GPIO_EXTI_Callback+0xa4>
 8011aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ab2:	ee17 3a90 	vmov	r3, s15
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	2100      	movs	r1, #0
 8011aba:	4809      	ldr	r0, [pc, #36]	@ (8011ae0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8011abc:	f7f0 fc43 	bl	8002346 <HAL_DAC_SetValue>
    }
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	24009534 	.word	0x24009534
 8011acc:	24009538 	.word	0x24009538
 8011ad0:	24000554 	.word	0x24000554
 8011ad4:	453b8000 	.word	0x453b8000
 8011ad8:	44fa0000 	.word	0x44fa0000
 8011adc:	45000000 	.word	0x45000000
 8011ae0:	24000310 	.word	0x24000310

08011ae4 <calcEffectiveValue>:

/**
 * @brief  计算电压电流有效值
 */
void calcEffectiveValue(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
    static float V_rms_c[400] = {0};
    static float I_rms_a[400] = {0};
    static float I_rms_b[400] = {0};
    static float I_rms_c[400] = {0};

    V_rms_a[cnt] = signal_V->basic->input_a;
 8011ae8:	4b49      	ldr	r3, [pc, #292]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4a49      	ldr	r2, [pc, #292]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011af0:	8812      	ldrh	r2, [r2, #0]
 8011af2:	b292      	uxth	r2, r2
 8011af4:	4610      	mov	r0, r2
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	4947      	ldr	r1, [pc, #284]	@ (8011c18 <calcEffectiveValue+0x134>)
 8011afa:	0083      	lsls	r3, r0, #2
 8011afc:	440b      	add	r3, r1
 8011afe:	601a      	str	r2, [r3, #0]
    V_rms_b[cnt] = signal_V->basic->input_b;
 8011b00:	4b43      	ldr	r3, [pc, #268]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4a43      	ldr	r2, [pc, #268]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b08:	8812      	ldrh	r2, [r2, #0]
 8011b0a:	b292      	uxth	r2, r2
 8011b0c:	4610      	mov	r0, r2
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	4942      	ldr	r1, [pc, #264]	@ (8011c1c <calcEffectiveValue+0x138>)
 8011b12:	0083      	lsls	r3, r0, #2
 8011b14:	440b      	add	r3, r1
 8011b16:	601a      	str	r2, [r3, #0]
    V_rms_c[cnt] = signal_V->basic->input_c;
 8011b18:	4b3d      	ldr	r3, [pc, #244]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b20:	8812      	ldrh	r2, [r2, #0]
 8011b22:	b292      	uxth	r2, r2
 8011b24:	4610      	mov	r0, r2
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	493d      	ldr	r1, [pc, #244]	@ (8011c20 <calcEffectiveValue+0x13c>)
 8011b2a:	0083      	lsls	r3, r0, #2
 8011b2c:	440b      	add	r3, r1
 8011b2e:	601a      	str	r2, [r3, #0]
    I_rms_a[cnt] = signal_I->basic->input_a;
 8011b30:	4b3c      	ldr	r3, [pc, #240]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4a37      	ldr	r2, [pc, #220]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b38:	8812      	ldrh	r2, [r2, #0]
 8011b3a:	b292      	uxth	r2, r2
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	4939      	ldr	r1, [pc, #228]	@ (8011c28 <calcEffectiveValue+0x144>)
 8011b42:	0083      	lsls	r3, r0, #2
 8011b44:	440b      	add	r3, r1
 8011b46:	601a      	str	r2, [r3, #0]
    I_rms_b[cnt] = signal_I->basic->input_b;
 8011b48:	4b36      	ldr	r3, [pc, #216]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4a31      	ldr	r2, [pc, #196]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b50:	8812      	ldrh	r2, [r2, #0]
 8011b52:	b292      	uxth	r2, r2
 8011b54:	4610      	mov	r0, r2
 8011b56:	685a      	ldr	r2, [r3, #4]
 8011b58:	4934      	ldr	r1, [pc, #208]	@ (8011c2c <calcEffectiveValue+0x148>)
 8011b5a:	0083      	lsls	r3, r0, #2
 8011b5c:	440b      	add	r3, r1
 8011b5e:	601a      	str	r2, [r3, #0]
    I_rms_c[cnt] = signal_I->basic->input_c;
 8011b60:	4b30      	ldr	r3, [pc, #192]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a2b      	ldr	r2, [pc, #172]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b68:	8812      	ldrh	r2, [r2, #0]
 8011b6a:	b292      	uxth	r2, r2
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	689a      	ldr	r2, [r3, #8]
 8011b70:	492f      	ldr	r1, [pc, #188]	@ (8011c30 <calcEffectiveValue+0x14c>)
 8011b72:	0083      	lsls	r3, r0, #2
 8011b74:	440b      	add	r3, r1
 8011b76:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 8011b78:	4b26      	ldr	r3, [pc, #152]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	3301      	adds	r3, #1
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	4a24      	ldr	r2, [pc, #144]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b84:	4619      	mov	r1, r3
 8011b86:	8011      	strh	r1, [r2, #0]
 8011b88:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8011b8c:	d13e      	bne.n	8011c0c <calcEffectiveValue+0x128>
    {
        cnt = 0;
 8011b8e:	4b21      	ldr	r3, [pc, #132]	@ (8011c14 <calcEffectiveValue+0x130>)
 8011b90:	2200      	movs	r2, #0
 8011b92:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(V_rms_a, 400, &signal_V->basic->rms_a);
 8011b94:	4b1e      	ldr	r3, [pc, #120]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	330c      	adds	r3, #12
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011ba2:	481d      	ldr	r0, [pc, #116]	@ (8011c18 <calcEffectiveValue+0x134>)
 8011ba4:	f000 f932 	bl	8011e0c <arm_rms_f32>
        arm_rms_f32(V_rms_b, 400, &signal_V->basic->rms_b);
 8011ba8:	4b19      	ldr	r3, [pc, #100]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3310      	adds	r3, #16
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bb6:	4819      	ldr	r0, [pc, #100]	@ (8011c1c <calcEffectiveValue+0x138>)
 8011bb8:	f000 f928 	bl	8011e0c <arm_rms_f32>
        arm_rms_f32(V_rms_c, 400, &signal_V->basic->rms_c);
 8011bbc:	4b14      	ldr	r3, [pc, #80]	@ (8011c10 <calcEffectiveValue+0x12c>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	3314      	adds	r3, #20
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bca:	4815      	ldr	r0, [pc, #84]	@ (8011c20 <calcEffectiveValue+0x13c>)
 8011bcc:	f000 f91e 	bl	8011e0c <arm_rms_f32>
        arm_rms_f32(I_rms_a, 400, &signal_I->basic->rms_a);
 8011bd0:	4b14      	ldr	r3, [pc, #80]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	330c      	adds	r3, #12
 8011bd8:	461a      	mov	r2, r3
 8011bda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bde:	4812      	ldr	r0, [pc, #72]	@ (8011c28 <calcEffectiveValue+0x144>)
 8011be0:	f000 f914 	bl	8011e0c <arm_rms_f32>
        arm_rms_f32(I_rms_b, 400, &signal_I->basic->rms_b);
 8011be4:	4b0f      	ldr	r3, [pc, #60]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3310      	adds	r3, #16
 8011bec:	461a      	mov	r2, r3
 8011bee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011bf2:	480e      	ldr	r0, [pc, #56]	@ (8011c2c <calcEffectiveValue+0x148>)
 8011bf4:	f000 f90a 	bl	8011e0c <arm_rms_f32>
        arm_rms_f32(I_rms_c, 400, &signal_I->basic->rms_c);
 8011bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8011c24 <calcEffectiveValue+0x140>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3314      	adds	r3, #20
 8011c00:	461a      	mov	r2, r3
 8011c02:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011c06:	480a      	ldr	r0, [pc, #40]	@ (8011c30 <calcEffectiveValue+0x14c>)
 8011c08:	f000 f900 	bl	8011e0c <arm_rms_f32>
    }
}
 8011c0c:	bf00      	nop
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	24009534 	.word	0x24009534
 8011c14:	24006fa4 	.word	0x24006fa4
 8011c18:	24006fa8 	.word	0x24006fa8
 8011c1c:	240075e8 	.word	0x240075e8
 8011c20:	24007c28 	.word	0x24007c28
 8011c24:	24009538 	.word	0x24009538
 8011c28:	24008268 	.word	0x24008268
 8011c2c:	240088a8 	.word	0x240088a8
 8011c30:	24008ee8 	.word	0x24008ee8

08011c34 <normalize>:

/**
 * @brief  标幺化
 */
void normalize(void)
{
 8011c34:	b480      	push	{r7}
 8011c36:	af00      	add	r7, sp, #0
    signal_V->basic->input_a /= Ubase;
 8011c38:	4b2c      	ldr	r3, [pc, #176]	@ (8011cec <normalize+0xb8>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	ed93 7a00 	vldr	s14, [r3]
 8011c42:	4b2a      	ldr	r3, [pc, #168]	@ (8011cec <normalize+0xb8>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011cf0 <normalize+0xbc>
 8011c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c50:	edc3 7a00 	vstr	s15, [r3]
    signal_V->basic->input_b /= Ubase;
 8011c54:	4b25      	ldr	r3, [pc, #148]	@ (8011cec <normalize+0xb8>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011c5e:	4b23      	ldr	r3, [pc, #140]	@ (8011cec <normalize+0xb8>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8011cf0 <normalize+0xbc>
 8011c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c6c:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->basic->input_c /= Ubase;
 8011c70:	4b1e      	ldr	r3, [pc, #120]	@ (8011cec <normalize+0xb8>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8011c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8011cec <normalize+0xb8>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8011cf0 <normalize+0xbc>
 8011c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c88:	edc3 7a02 	vstr	s15, [r3, #8]
    signal_I->basic->input_a /= Ibase;
 8011c8c:	4b19      	ldr	r3, [pc, #100]	@ (8011cf4 <normalize+0xc0>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	ed93 7a00 	vldr	s14, [r3]
 8011c96:	4b17      	ldr	r3, [pc, #92]	@ (8011cf4 <normalize+0xc0>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8011cf8 <normalize+0xc4>
 8011ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ca4:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input_b /= Ibase;
 8011ca8:	4b12      	ldr	r3, [pc, #72]	@ (8011cf4 <normalize+0xc0>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	ed93 7a01 	vldr	s14, [r3, #4]
 8011cb2:	4b10      	ldr	r3, [pc, #64]	@ (8011cf4 <normalize+0xc0>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8011cf8 <normalize+0xc4>
 8011cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011cc0:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->basic->input_c /= Ibase;
 8011cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf4 <normalize+0xc0>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	ed93 7a02 	vldr	s14, [r3, #8]
 8011cce:	4b09      	ldr	r3, [pc, #36]	@ (8011cf4 <normalize+0xc0>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8011cf8 <normalize+0xc4>
 8011cd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011cdc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011ce0:	bf00      	nop
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop
 8011cec:	24009534 	.word	0x24009534
 8011cf0:	4229ae15 	.word	0x4229ae15
 8011cf4:	24009538 	.word	0x24009538
 8011cf8:	40e23d71 	.word	0x40e23d71

08011cfc <getVoltageCurrent>:

/**
 * @brief  获取相电压和电流
 */
void getVoltageCurrent(void)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b08c      	sub	sp, #48	@ 0x30
 8011d00:	af00      	add	r7, sp, #0
    // 读取AD7606数据
    float adcValue[8] = {0};
 8011d02:	1d3b      	adds	r3, r7, #4
 8011d04:	2220      	movs	r2, #32
 8011d06:	2100      	movs	r1, #0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f000 ff8a 	bl	8012c22 <memset>
    ad7606_GetValue(&hspi2, 7, adcValue);
 8011d0e:	1d3b      	adds	r3, r7, #4
 8011d10:	461a      	mov	r2, r3
 8011d12:	2107      	movs	r1, #7
 8011d14:	4836      	ldr	r0, [pc, #216]	@ (8011df0 <getVoltageCurrent+0xf4>)
 8011d16:	f7fe fc4d 	bl	80105b4 <ad7606_GetValue>

    // 处理电流数据
    signal_I->basic->input_a = adcValue[1] * 2.2258065f;
 8011d1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8011d1e:	4b35      	ldr	r3, [pc, #212]	@ (8011df4 <getVoltageCurrent+0xf8>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011df8 <getVoltageCurrent+0xfc>
 8011d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d2c:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input_b = adcValue[3] * 2.2258065f;
 8011d30:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d34:	4b2f      	ldr	r3, [pc, #188]	@ (8011df4 <getVoltageCurrent+0xf8>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011df8 <getVoltageCurrent+0xfc>
 8011d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d42:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->basic->input_c = adcValue[5] * 2.2258065f;
 8011d46:	edd7 7a06 	vldr	s15, [r7, #24]
 8011d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8011df4 <getVoltageCurrent+0xf8>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8011df8 <getVoltageCurrent+0xfc>
 8011d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d58:	edc3 7a02 	vstr	s15, [r3, #8]

    // 处理电压数据，将线电压转为相电压
    float Uab = adcValue[2] * 38.423350f;
 8011d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011d60:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011dfc <getVoltageCurrent+0x100>
 8011d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d68:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float Ubc = adcValue[4] * 38.669998f;
 8011d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011d70:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8011e00 <getVoltageCurrent+0x104>
 8011d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float Uca = adcValue[6] * 38.560814f;
 8011d7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8011d80:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011e04 <getVoltageCurrent+0x108>
 8011d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    signal_V->basic->input_a = (Uab - Uca) / 3.f;
 8011d8c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011d90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d98:	4b1b      	ldr	r3, [pc, #108]	@ (8011e08 <getVoltageCurrent+0x10c>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011da6:	edc3 7a00 	vstr	s15, [r3]
    signal_V->basic->input_b = (Ubc - Uab) / 3.f;
 8011daa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011dae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011db6:	4b14      	ldr	r3, [pc, #80]	@ (8011e08 <getVoltageCurrent+0x10c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011dc4:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->basic->input_c = (Uca - Ubc) / 3.f;
 8011dc8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011dcc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8011e08 <getVoltageCurrent+0x10c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011de2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011de6:	bf00      	nop
 8011de8:	3730      	adds	r7, #48	@ 0x30
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	2400047c 	.word	0x2400047c
 8011df4:	24009538 	.word	0x24009538
 8011df8:	400e739d 	.word	0x400e739d
 8011dfc:	4219b183 	.word	0x4219b183
 8011e00:	421aae14 	.word	0x421aae14
 8011e04:	421a3e46 	.word	0x421a3e46
 8011e08:	24009534 	.word	0x24009534

08011e0c <arm_rms_f32>:
 8011e0c:	b530      	push	{r4, r5, lr}
 8011e0e:	088d      	lsrs	r5, r1, #2
 8011e10:	ed2d 8b02 	vpush	{d8}
 8011e14:	b083      	sub	sp, #12
 8011e16:	d054      	beq.n	8011ec2 <arm_rms_f32+0xb6>
 8011e18:	f100 0310 	add.w	r3, r0, #16
 8011e1c:	462c      	mov	r4, r5
 8011e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011ed8 <arm_rms_f32+0xcc>
 8011e22:	ed53 6a04 	vldr	s13, [r3, #-16]
 8011e26:	3c01      	subs	r4, #1
 8011e28:	ed13 7a03 	vldr	s14, [r3, #-12]
 8011e2c:	f103 0310 	add.w	r3, r3, #16
 8011e30:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011e34:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8011e38:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011e3c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8011e40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011e44:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011e48:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011e4c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e54:	ee76 5a27 	vadd.f32	s11, s12, s15
 8011e58:	d1e3      	bne.n	8011e22 <arm_rms_f32+0x16>
 8011e5a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8011e5e:	f011 0303 	ands.w	r3, r1, #3
 8011e62:	d015      	beq.n	8011e90 <arm_rms_f32+0x84>
 8011e64:	edd0 7a00 	vldr	s15, [r0]
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011e6e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011e72:	d00d      	beq.n	8011e90 <arm_rms_f32+0x84>
 8011e74:	edd0 7a01 	vldr	s15, [r0, #4]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011e7e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011e82:	d005      	beq.n	8011e90 <arm_rms_f32+0x84>
 8011e84:	edd0 7a02 	vldr	s15, [r0, #8]
 8011e88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011e8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011e90:	ee07 1a90 	vmov	s15, r1
 8011e94:	2300      	movs	r3, #0
 8011e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e9a:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 8011e9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea6:	db0f      	blt.n	8011ec8 <arm_rms_f32+0xbc>
 8011ea8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011eac:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	d40a      	bmi.n	8011ecc <arm_rms_f32+0xc0>
 8011eb6:	ed82 8a00 	vstr	s16, [r2]
 8011eba:	b003      	add	sp, #12
 8011ebc:	ecbd 8b02 	vpop	{d8}
 8011ec0:	bd30      	pop	{r4, r5, pc}
 8011ec2:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8011ed8 <arm_rms_f32+0xcc>
 8011ec6:	e7ca      	b.n	8011e5e <arm_rms_f32+0x52>
 8011ec8:	6013      	str	r3, [r2, #0]
 8011eca:	e7f6      	b.n	8011eba <arm_rms_f32+0xae>
 8011ecc:	9201      	str	r2, [sp, #4]
 8011ece:	f002 febf 	bl	8014c50 <sqrtf>
 8011ed2:	9a01      	ldr	r2, [sp, #4]
 8011ed4:	e7ef      	b.n	8011eb6 <arm_rms_f32+0xaa>
 8011ed6:	bf00      	nop
 8011ed8:	00000000 	.word	0x00000000

08011edc <arm_sin_f32>:
 8011edc:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8011f5c <arm_sin_f32+0x80>
 8011ee0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011ee4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ee8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	d504      	bpl.n	8011efc <arm_sin_f32+0x20>
 8011ef2:	ee17 3a90 	vmov	r3, s15
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	ee07 3a90 	vmov	s15, r3
 8011efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f00:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011f60 <arm_sin_f32+0x84>
 8011f04:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011f0c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011f10:	ee17 3a10 	vmov	r3, s14
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f1a:	d21a      	bcs.n	8011f52 <arm_sin_f32+0x76>
 8011f1c:	ee07 3a10 	vmov	s14, r3
 8011f20:	1c59      	adds	r1, r3, #1
 8011f22:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011f26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8011f64 <arm_sin_f32+0x88>)
 8011f2c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011f34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011f38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011f3c:	edd3 6a00 	vldr	s13, [r3]
 8011f40:	ed92 7a00 	vldr	s14, [r2]
 8011f44:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011f50:	4770      	bx	lr
 8011f52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011f56:	2101      	movs	r1, #1
 8011f58:	2300      	movs	r3, #0
 8011f5a:	e7e6      	b.n	8011f2a <arm_sin_f32+0x4e>
 8011f5c:	3e22f983 	.word	0x3e22f983
 8011f60:	44000000 	.word	0x44000000
 8011f64:	08016ad8 	.word	0x08016ad8

08011f68 <arm_cos_f32>:
 8011f68:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8011ff0 <arm_cos_f32+0x88>
 8011f6c:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8011f70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011f74:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011f78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011f7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f84:	d504      	bpl.n	8011f90 <arm_cos_f32+0x28>
 8011f86:	ee17 3a90 	vmov	r3, s15
 8011f8a:	3b01      	subs	r3, #1
 8011f8c:	ee07 3a90 	vmov	s15, r3
 8011f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f94:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8011ff4 <arm_cos_f32+0x8c>
 8011f98:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011fa0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8011fa4:	ee17 3a10 	vmov	r3, s14
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fae:	d21a      	bcs.n	8011fe6 <arm_cos_f32+0x7e>
 8011fb0:	ee07 3a10 	vmov	s14, r3
 8011fb4:	1c59      	adds	r1, r3, #1
 8011fb6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8011fba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8011ff8 <arm_cos_f32+0x90>)
 8011fc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011fc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011fc8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011fcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011fd0:	edd3 6a00 	vldr	s13, [r3]
 8011fd4:	ed92 7a00 	vldr	s14, [r2]
 8011fd8:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011fe0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011fe4:	4770      	bx	lr
 8011fe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011fea:	2101      	movs	r1, #1
 8011fec:	2300      	movs	r3, #0
 8011fee:	e7e6      	b.n	8011fbe <arm_cos_f32+0x56>
 8011ff0:	3e22f983 	.word	0x3e22f983
 8011ff4:	44000000 	.word	0x44000000
 8011ff8:	08016ad8 	.word	0x08016ad8

08011ffc <malloc>:
 8011ffc:	4b02      	ldr	r3, [pc, #8]	@ (8012008 <malloc+0xc>)
 8011ffe:	4601      	mov	r1, r0
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f000 b825 	b.w	8012050 <_malloc_r>
 8012006:	bf00      	nop
 8012008:	24000138 	.word	0x24000138

0801200c <sbrk_aligned>:
 801200c:	b570      	push	{r4, r5, r6, lr}
 801200e:	4e0f      	ldr	r6, [pc, #60]	@ (801204c <sbrk_aligned+0x40>)
 8012010:	460c      	mov	r4, r1
 8012012:	6831      	ldr	r1, [r6, #0]
 8012014:	4605      	mov	r5, r0
 8012016:	b911      	cbnz	r1, 801201e <sbrk_aligned+0x12>
 8012018:	f000 fe44 	bl	8012ca4 <_sbrk_r>
 801201c:	6030      	str	r0, [r6, #0]
 801201e:	4621      	mov	r1, r4
 8012020:	4628      	mov	r0, r5
 8012022:	f000 fe3f 	bl	8012ca4 <_sbrk_r>
 8012026:	1c43      	adds	r3, r0, #1
 8012028:	d103      	bne.n	8012032 <sbrk_aligned+0x26>
 801202a:	f04f 34ff 	mov.w	r4, #4294967295
 801202e:	4620      	mov	r0, r4
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	1cc4      	adds	r4, r0, #3
 8012034:	f024 0403 	bic.w	r4, r4, #3
 8012038:	42a0      	cmp	r0, r4
 801203a:	d0f8      	beq.n	801202e <sbrk_aligned+0x22>
 801203c:	1a21      	subs	r1, r4, r0
 801203e:	4628      	mov	r0, r5
 8012040:	f000 fe30 	bl	8012ca4 <_sbrk_r>
 8012044:	3001      	adds	r0, #1
 8012046:	d1f2      	bne.n	801202e <sbrk_aligned+0x22>
 8012048:	e7ef      	b.n	801202a <sbrk_aligned+0x1e>
 801204a:	bf00      	nop
 801204c:	24009540 	.word	0x24009540

08012050 <_malloc_r>:
 8012050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012054:	1ccd      	adds	r5, r1, #3
 8012056:	f025 0503 	bic.w	r5, r5, #3
 801205a:	3508      	adds	r5, #8
 801205c:	2d0c      	cmp	r5, #12
 801205e:	bf38      	it	cc
 8012060:	250c      	movcc	r5, #12
 8012062:	2d00      	cmp	r5, #0
 8012064:	4606      	mov	r6, r0
 8012066:	db01      	blt.n	801206c <_malloc_r+0x1c>
 8012068:	42a9      	cmp	r1, r5
 801206a:	d904      	bls.n	8012076 <_malloc_r+0x26>
 801206c:	230c      	movs	r3, #12
 801206e:	6033      	str	r3, [r6, #0]
 8012070:	2000      	movs	r0, #0
 8012072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801214c <_malloc_r+0xfc>
 801207a:	f000 f869 	bl	8012150 <__malloc_lock>
 801207e:	f8d8 3000 	ldr.w	r3, [r8]
 8012082:	461c      	mov	r4, r3
 8012084:	bb44      	cbnz	r4, 80120d8 <_malloc_r+0x88>
 8012086:	4629      	mov	r1, r5
 8012088:	4630      	mov	r0, r6
 801208a:	f7ff ffbf 	bl	801200c <sbrk_aligned>
 801208e:	1c43      	adds	r3, r0, #1
 8012090:	4604      	mov	r4, r0
 8012092:	d158      	bne.n	8012146 <_malloc_r+0xf6>
 8012094:	f8d8 4000 	ldr.w	r4, [r8]
 8012098:	4627      	mov	r7, r4
 801209a:	2f00      	cmp	r7, #0
 801209c:	d143      	bne.n	8012126 <_malloc_r+0xd6>
 801209e:	2c00      	cmp	r4, #0
 80120a0:	d04b      	beq.n	801213a <_malloc_r+0xea>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	4639      	mov	r1, r7
 80120a6:	4630      	mov	r0, r6
 80120a8:	eb04 0903 	add.w	r9, r4, r3
 80120ac:	f000 fdfa 	bl	8012ca4 <_sbrk_r>
 80120b0:	4581      	cmp	r9, r0
 80120b2:	d142      	bne.n	801213a <_malloc_r+0xea>
 80120b4:	6821      	ldr	r1, [r4, #0]
 80120b6:	1a6d      	subs	r5, r5, r1
 80120b8:	4629      	mov	r1, r5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ffa6 	bl	801200c <sbrk_aligned>
 80120c0:	3001      	adds	r0, #1
 80120c2:	d03a      	beq.n	801213a <_malloc_r+0xea>
 80120c4:	6823      	ldr	r3, [r4, #0]
 80120c6:	442b      	add	r3, r5
 80120c8:	6023      	str	r3, [r4, #0]
 80120ca:	f8d8 3000 	ldr.w	r3, [r8]
 80120ce:	685a      	ldr	r2, [r3, #4]
 80120d0:	bb62      	cbnz	r2, 801212c <_malloc_r+0xdc>
 80120d2:	f8c8 7000 	str.w	r7, [r8]
 80120d6:	e00f      	b.n	80120f8 <_malloc_r+0xa8>
 80120d8:	6822      	ldr	r2, [r4, #0]
 80120da:	1b52      	subs	r2, r2, r5
 80120dc:	d420      	bmi.n	8012120 <_malloc_r+0xd0>
 80120de:	2a0b      	cmp	r2, #11
 80120e0:	d917      	bls.n	8012112 <_malloc_r+0xc2>
 80120e2:	1961      	adds	r1, r4, r5
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	6025      	str	r5, [r4, #0]
 80120e8:	bf18      	it	ne
 80120ea:	6059      	strne	r1, [r3, #4]
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	bf08      	it	eq
 80120f0:	f8c8 1000 	streq.w	r1, [r8]
 80120f4:	5162      	str	r2, [r4, r5]
 80120f6:	604b      	str	r3, [r1, #4]
 80120f8:	4630      	mov	r0, r6
 80120fa:	f000 f82f 	bl	801215c <__malloc_unlock>
 80120fe:	f104 000b 	add.w	r0, r4, #11
 8012102:	1d23      	adds	r3, r4, #4
 8012104:	f020 0007 	bic.w	r0, r0, #7
 8012108:	1ac2      	subs	r2, r0, r3
 801210a:	bf1c      	itt	ne
 801210c:	1a1b      	subne	r3, r3, r0
 801210e:	50a3      	strne	r3, [r4, r2]
 8012110:	e7af      	b.n	8012072 <_malloc_r+0x22>
 8012112:	6862      	ldr	r2, [r4, #4]
 8012114:	42a3      	cmp	r3, r4
 8012116:	bf0c      	ite	eq
 8012118:	f8c8 2000 	streq.w	r2, [r8]
 801211c:	605a      	strne	r2, [r3, #4]
 801211e:	e7eb      	b.n	80120f8 <_malloc_r+0xa8>
 8012120:	4623      	mov	r3, r4
 8012122:	6864      	ldr	r4, [r4, #4]
 8012124:	e7ae      	b.n	8012084 <_malloc_r+0x34>
 8012126:	463c      	mov	r4, r7
 8012128:	687f      	ldr	r7, [r7, #4]
 801212a:	e7b6      	b.n	801209a <_malloc_r+0x4a>
 801212c:	461a      	mov	r2, r3
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	42a3      	cmp	r3, r4
 8012132:	d1fb      	bne.n	801212c <_malloc_r+0xdc>
 8012134:	2300      	movs	r3, #0
 8012136:	6053      	str	r3, [r2, #4]
 8012138:	e7de      	b.n	80120f8 <_malloc_r+0xa8>
 801213a:	230c      	movs	r3, #12
 801213c:	6033      	str	r3, [r6, #0]
 801213e:	4630      	mov	r0, r6
 8012140:	f000 f80c 	bl	801215c <__malloc_unlock>
 8012144:	e794      	b.n	8012070 <_malloc_r+0x20>
 8012146:	6005      	str	r5, [r0, #0]
 8012148:	e7d6      	b.n	80120f8 <_malloc_r+0xa8>
 801214a:	bf00      	nop
 801214c:	24009544 	.word	0x24009544

08012150 <__malloc_lock>:
 8012150:	4801      	ldr	r0, [pc, #4]	@ (8012158 <__malloc_lock+0x8>)
 8012152:	f000 bdf4 	b.w	8012d3e <__retarget_lock_acquire_recursive>
 8012156:	bf00      	nop
 8012158:	24009688 	.word	0x24009688

0801215c <__malloc_unlock>:
 801215c:	4801      	ldr	r0, [pc, #4]	@ (8012164 <__malloc_unlock+0x8>)
 801215e:	f000 bdef 	b.w	8012d40 <__retarget_lock_release_recursive>
 8012162:	bf00      	nop
 8012164:	24009688 	.word	0x24009688

08012168 <__cvt>:
 8012168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801216a:	ed2d 8b02 	vpush	{d8}
 801216e:	eeb0 8b40 	vmov.f64	d8, d0
 8012172:	b085      	sub	sp, #20
 8012174:	4617      	mov	r7, r2
 8012176:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012178:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801217a:	ee18 2a90 	vmov	r2, s17
 801217e:	f025 0520 	bic.w	r5, r5, #32
 8012182:	2a00      	cmp	r2, #0
 8012184:	bfb6      	itet	lt
 8012186:	222d      	movlt	r2, #45	@ 0x2d
 8012188:	2200      	movge	r2, #0
 801218a:	eeb1 8b40 	vneglt.f64	d8, d0
 801218e:	2d46      	cmp	r5, #70	@ 0x46
 8012190:	460c      	mov	r4, r1
 8012192:	701a      	strb	r2, [r3, #0]
 8012194:	d004      	beq.n	80121a0 <__cvt+0x38>
 8012196:	2d45      	cmp	r5, #69	@ 0x45
 8012198:	d100      	bne.n	801219c <__cvt+0x34>
 801219a:	3401      	adds	r4, #1
 801219c:	2102      	movs	r1, #2
 801219e:	e000      	b.n	80121a2 <__cvt+0x3a>
 80121a0:	2103      	movs	r1, #3
 80121a2:	ab03      	add	r3, sp, #12
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	ab02      	add	r3, sp, #8
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	4622      	mov	r2, r4
 80121ac:	4633      	mov	r3, r6
 80121ae:	eeb0 0b48 	vmov.f64	d0, d8
 80121b2:	f000 fe5d 	bl	8012e70 <_dtoa_r>
 80121b6:	2d47      	cmp	r5, #71	@ 0x47
 80121b8:	d114      	bne.n	80121e4 <__cvt+0x7c>
 80121ba:	07fb      	lsls	r3, r7, #31
 80121bc:	d50a      	bpl.n	80121d4 <__cvt+0x6c>
 80121be:	1902      	adds	r2, r0, r4
 80121c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80121c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c8:	bf08      	it	eq
 80121ca:	9203      	streq	r2, [sp, #12]
 80121cc:	2130      	movs	r1, #48	@ 0x30
 80121ce:	9b03      	ldr	r3, [sp, #12]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d319      	bcc.n	8012208 <__cvt+0xa0>
 80121d4:	9b03      	ldr	r3, [sp, #12]
 80121d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121d8:	1a1b      	subs	r3, r3, r0
 80121da:	6013      	str	r3, [r2, #0]
 80121dc:	b005      	add	sp, #20
 80121de:	ecbd 8b02 	vpop	{d8}
 80121e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121e4:	2d46      	cmp	r5, #70	@ 0x46
 80121e6:	eb00 0204 	add.w	r2, r0, r4
 80121ea:	d1e9      	bne.n	80121c0 <__cvt+0x58>
 80121ec:	7803      	ldrb	r3, [r0, #0]
 80121ee:	2b30      	cmp	r3, #48	@ 0x30
 80121f0:	d107      	bne.n	8012202 <__cvt+0x9a>
 80121f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80121f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fa:	bf1c      	itt	ne
 80121fc:	f1c4 0401 	rsbne	r4, r4, #1
 8012200:	6034      	strne	r4, [r6, #0]
 8012202:	6833      	ldr	r3, [r6, #0]
 8012204:	441a      	add	r2, r3
 8012206:	e7db      	b.n	80121c0 <__cvt+0x58>
 8012208:	1c5c      	adds	r4, r3, #1
 801220a:	9403      	str	r4, [sp, #12]
 801220c:	7019      	strb	r1, [r3, #0]
 801220e:	e7de      	b.n	80121ce <__cvt+0x66>

08012210 <__exponent>:
 8012210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012212:	2900      	cmp	r1, #0
 8012214:	bfba      	itte	lt
 8012216:	4249      	neglt	r1, r1
 8012218:	232d      	movlt	r3, #45	@ 0x2d
 801221a:	232b      	movge	r3, #43	@ 0x2b
 801221c:	2909      	cmp	r1, #9
 801221e:	7002      	strb	r2, [r0, #0]
 8012220:	7043      	strb	r3, [r0, #1]
 8012222:	dd29      	ble.n	8012278 <__exponent+0x68>
 8012224:	f10d 0307 	add.w	r3, sp, #7
 8012228:	461d      	mov	r5, r3
 801222a:	270a      	movs	r7, #10
 801222c:	461a      	mov	r2, r3
 801222e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012232:	fb07 1416 	mls	r4, r7, r6, r1
 8012236:	3430      	adds	r4, #48	@ 0x30
 8012238:	f802 4c01 	strb.w	r4, [r2, #-1]
 801223c:	460c      	mov	r4, r1
 801223e:	2c63      	cmp	r4, #99	@ 0x63
 8012240:	f103 33ff 	add.w	r3, r3, #4294967295
 8012244:	4631      	mov	r1, r6
 8012246:	dcf1      	bgt.n	801222c <__exponent+0x1c>
 8012248:	3130      	adds	r1, #48	@ 0x30
 801224a:	1e94      	subs	r4, r2, #2
 801224c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012250:	1c41      	adds	r1, r0, #1
 8012252:	4623      	mov	r3, r4
 8012254:	42ab      	cmp	r3, r5
 8012256:	d30a      	bcc.n	801226e <__exponent+0x5e>
 8012258:	f10d 0309 	add.w	r3, sp, #9
 801225c:	1a9b      	subs	r3, r3, r2
 801225e:	42ac      	cmp	r4, r5
 8012260:	bf88      	it	hi
 8012262:	2300      	movhi	r3, #0
 8012264:	3302      	adds	r3, #2
 8012266:	4403      	add	r3, r0
 8012268:	1a18      	subs	r0, r3, r0
 801226a:	b003      	add	sp, #12
 801226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801226e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012272:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012276:	e7ed      	b.n	8012254 <__exponent+0x44>
 8012278:	2330      	movs	r3, #48	@ 0x30
 801227a:	3130      	adds	r1, #48	@ 0x30
 801227c:	7083      	strb	r3, [r0, #2]
 801227e:	70c1      	strb	r1, [r0, #3]
 8012280:	1d03      	adds	r3, r0, #4
 8012282:	e7f1      	b.n	8012268 <__exponent+0x58>
 8012284:	0000      	movs	r0, r0
	...

08012288 <_printf_float>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	b08d      	sub	sp, #52	@ 0x34
 801228e:	460c      	mov	r4, r1
 8012290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012294:	4616      	mov	r6, r2
 8012296:	461f      	mov	r7, r3
 8012298:	4605      	mov	r5, r0
 801229a:	f000 fccb 	bl	8012c34 <_localeconv_r>
 801229e:	f8d0 b000 	ldr.w	fp, [r0]
 80122a2:	4658      	mov	r0, fp
 80122a4:	f7ee f86c 	bl	8000380 <strlen>
 80122a8:	2300      	movs	r3, #0
 80122aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80122ac:	f8d8 3000 	ldr.w	r3, [r8]
 80122b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80122b4:	6822      	ldr	r2, [r4, #0]
 80122b6:	9005      	str	r0, [sp, #20]
 80122b8:	3307      	adds	r3, #7
 80122ba:	f023 0307 	bic.w	r3, r3, #7
 80122be:	f103 0108 	add.w	r1, r3, #8
 80122c2:	f8c8 1000 	str.w	r1, [r8]
 80122c6:	ed93 0b00 	vldr	d0, [r3]
 80122ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012528 <_printf_float+0x2a0>
 80122ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80122d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80122d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80122de:	dd24      	ble.n	801232a <_printf_float+0xa2>
 80122e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80122e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e8:	d502      	bpl.n	80122f0 <_printf_float+0x68>
 80122ea:	232d      	movs	r3, #45	@ 0x2d
 80122ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122f0:	498f      	ldr	r1, [pc, #572]	@ (8012530 <_printf_float+0x2a8>)
 80122f2:	4b90      	ldr	r3, [pc, #576]	@ (8012534 <_printf_float+0x2ac>)
 80122f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80122f8:	bf94      	ite	ls
 80122fa:	4688      	movls	r8, r1
 80122fc:	4698      	movhi	r8, r3
 80122fe:	f022 0204 	bic.w	r2, r2, #4
 8012302:	2303      	movs	r3, #3
 8012304:	6123      	str	r3, [r4, #16]
 8012306:	6022      	str	r2, [r4, #0]
 8012308:	f04f 0a00 	mov.w	sl, #0
 801230c:	9700      	str	r7, [sp, #0]
 801230e:	4633      	mov	r3, r6
 8012310:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012312:	4621      	mov	r1, r4
 8012314:	4628      	mov	r0, r5
 8012316:	f000 f9d1 	bl	80126bc <_printf_common>
 801231a:	3001      	adds	r0, #1
 801231c:	f040 8089 	bne.w	8012432 <_printf_float+0x1aa>
 8012320:	f04f 30ff 	mov.w	r0, #4294967295
 8012324:	b00d      	add	sp, #52	@ 0x34
 8012326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801232a:	eeb4 0b40 	vcmp.f64	d0, d0
 801232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012332:	d709      	bvc.n	8012348 <_printf_float+0xc0>
 8012334:	ee10 3a90 	vmov	r3, s1
 8012338:	2b00      	cmp	r3, #0
 801233a:	bfbc      	itt	lt
 801233c:	232d      	movlt	r3, #45	@ 0x2d
 801233e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012342:	497d      	ldr	r1, [pc, #500]	@ (8012538 <_printf_float+0x2b0>)
 8012344:	4b7d      	ldr	r3, [pc, #500]	@ (801253c <_printf_float+0x2b4>)
 8012346:	e7d5      	b.n	80122f4 <_printf_float+0x6c>
 8012348:	6863      	ldr	r3, [r4, #4]
 801234a:	1c59      	adds	r1, r3, #1
 801234c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012350:	d139      	bne.n	80123c6 <_printf_float+0x13e>
 8012352:	2306      	movs	r3, #6
 8012354:	6063      	str	r3, [r4, #4]
 8012356:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801235a:	2300      	movs	r3, #0
 801235c:	6022      	str	r2, [r4, #0]
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	ab0a      	add	r3, sp, #40	@ 0x28
 8012362:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012366:	ab09      	add	r3, sp, #36	@ 0x24
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	6861      	ldr	r1, [r4, #4]
 801236c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012370:	4628      	mov	r0, r5
 8012372:	f7ff fef9 	bl	8012168 <__cvt>
 8012376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801237a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801237c:	4680      	mov	r8, r0
 801237e:	d129      	bne.n	80123d4 <_printf_float+0x14c>
 8012380:	1cc8      	adds	r0, r1, #3
 8012382:	db02      	blt.n	801238a <_printf_float+0x102>
 8012384:	6863      	ldr	r3, [r4, #4]
 8012386:	4299      	cmp	r1, r3
 8012388:	dd41      	ble.n	801240e <_printf_float+0x186>
 801238a:	f1a9 0902 	sub.w	r9, r9, #2
 801238e:	fa5f f989 	uxtb.w	r9, r9
 8012392:	3901      	subs	r1, #1
 8012394:	464a      	mov	r2, r9
 8012396:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801239a:	9109      	str	r1, [sp, #36]	@ 0x24
 801239c:	f7ff ff38 	bl	8012210 <__exponent>
 80123a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123a2:	1813      	adds	r3, r2, r0
 80123a4:	2a01      	cmp	r2, #1
 80123a6:	4682      	mov	sl, r0
 80123a8:	6123      	str	r3, [r4, #16]
 80123aa:	dc02      	bgt.n	80123b2 <_printf_float+0x12a>
 80123ac:	6822      	ldr	r2, [r4, #0]
 80123ae:	07d2      	lsls	r2, r2, #31
 80123b0:	d501      	bpl.n	80123b6 <_printf_float+0x12e>
 80123b2:	3301      	adds	r3, #1
 80123b4:	6123      	str	r3, [r4, #16]
 80123b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d0a6      	beq.n	801230c <_printf_float+0x84>
 80123be:	232d      	movs	r3, #45	@ 0x2d
 80123c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123c4:	e7a2      	b.n	801230c <_printf_float+0x84>
 80123c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80123ca:	d1c4      	bne.n	8012356 <_printf_float+0xce>
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1c2      	bne.n	8012356 <_printf_float+0xce>
 80123d0:	2301      	movs	r3, #1
 80123d2:	e7bf      	b.n	8012354 <_printf_float+0xcc>
 80123d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80123d8:	d9db      	bls.n	8012392 <_printf_float+0x10a>
 80123da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80123de:	d118      	bne.n	8012412 <_printf_float+0x18a>
 80123e0:	2900      	cmp	r1, #0
 80123e2:	6863      	ldr	r3, [r4, #4]
 80123e4:	dd0b      	ble.n	80123fe <_printf_float+0x176>
 80123e6:	6121      	str	r1, [r4, #16]
 80123e8:	b913      	cbnz	r3, 80123f0 <_printf_float+0x168>
 80123ea:	6822      	ldr	r2, [r4, #0]
 80123ec:	07d0      	lsls	r0, r2, #31
 80123ee:	d502      	bpl.n	80123f6 <_printf_float+0x16e>
 80123f0:	3301      	adds	r3, #1
 80123f2:	440b      	add	r3, r1
 80123f4:	6123      	str	r3, [r4, #16]
 80123f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80123f8:	f04f 0a00 	mov.w	sl, #0
 80123fc:	e7db      	b.n	80123b6 <_printf_float+0x12e>
 80123fe:	b913      	cbnz	r3, 8012406 <_printf_float+0x17e>
 8012400:	6822      	ldr	r2, [r4, #0]
 8012402:	07d2      	lsls	r2, r2, #31
 8012404:	d501      	bpl.n	801240a <_printf_float+0x182>
 8012406:	3302      	adds	r3, #2
 8012408:	e7f4      	b.n	80123f4 <_printf_float+0x16c>
 801240a:	2301      	movs	r3, #1
 801240c:	e7f2      	b.n	80123f4 <_printf_float+0x16c>
 801240e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012414:	4299      	cmp	r1, r3
 8012416:	db05      	blt.n	8012424 <_printf_float+0x19c>
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	6121      	str	r1, [r4, #16]
 801241c:	07d8      	lsls	r0, r3, #31
 801241e:	d5ea      	bpl.n	80123f6 <_printf_float+0x16e>
 8012420:	1c4b      	adds	r3, r1, #1
 8012422:	e7e7      	b.n	80123f4 <_printf_float+0x16c>
 8012424:	2900      	cmp	r1, #0
 8012426:	bfd4      	ite	le
 8012428:	f1c1 0202 	rsble	r2, r1, #2
 801242c:	2201      	movgt	r2, #1
 801242e:	4413      	add	r3, r2
 8012430:	e7e0      	b.n	80123f4 <_printf_float+0x16c>
 8012432:	6823      	ldr	r3, [r4, #0]
 8012434:	055a      	lsls	r2, r3, #21
 8012436:	d407      	bmi.n	8012448 <_printf_float+0x1c0>
 8012438:	6923      	ldr	r3, [r4, #16]
 801243a:	4642      	mov	r2, r8
 801243c:	4631      	mov	r1, r6
 801243e:	4628      	mov	r0, r5
 8012440:	47b8      	blx	r7
 8012442:	3001      	adds	r0, #1
 8012444:	d12a      	bne.n	801249c <_printf_float+0x214>
 8012446:	e76b      	b.n	8012320 <_printf_float+0x98>
 8012448:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801244c:	f240 80e0 	bls.w	8012610 <_printf_float+0x388>
 8012450:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012454:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245c:	d133      	bne.n	80124c6 <_printf_float+0x23e>
 801245e:	4a38      	ldr	r2, [pc, #224]	@ (8012540 <_printf_float+0x2b8>)
 8012460:	2301      	movs	r3, #1
 8012462:	4631      	mov	r1, r6
 8012464:	4628      	mov	r0, r5
 8012466:	47b8      	blx	r7
 8012468:	3001      	adds	r0, #1
 801246a:	f43f af59 	beq.w	8012320 <_printf_float+0x98>
 801246e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012472:	4543      	cmp	r3, r8
 8012474:	db02      	blt.n	801247c <_printf_float+0x1f4>
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	07d8      	lsls	r0, r3, #31
 801247a:	d50f      	bpl.n	801249c <_printf_float+0x214>
 801247c:	9b05      	ldr	r3, [sp, #20]
 801247e:	465a      	mov	r2, fp
 8012480:	4631      	mov	r1, r6
 8012482:	4628      	mov	r0, r5
 8012484:	47b8      	blx	r7
 8012486:	3001      	adds	r0, #1
 8012488:	f43f af4a 	beq.w	8012320 <_printf_float+0x98>
 801248c:	f04f 0900 	mov.w	r9, #0
 8012490:	f108 38ff 	add.w	r8, r8, #4294967295
 8012494:	f104 0a1a 	add.w	sl, r4, #26
 8012498:	45c8      	cmp	r8, r9
 801249a:	dc09      	bgt.n	80124b0 <_printf_float+0x228>
 801249c:	6823      	ldr	r3, [r4, #0]
 801249e:	079b      	lsls	r3, r3, #30
 80124a0:	f100 8107 	bmi.w	80126b2 <_printf_float+0x42a>
 80124a4:	68e0      	ldr	r0, [r4, #12]
 80124a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124a8:	4298      	cmp	r0, r3
 80124aa:	bfb8      	it	lt
 80124ac:	4618      	movlt	r0, r3
 80124ae:	e739      	b.n	8012324 <_printf_float+0x9c>
 80124b0:	2301      	movs	r3, #1
 80124b2:	4652      	mov	r2, sl
 80124b4:	4631      	mov	r1, r6
 80124b6:	4628      	mov	r0, r5
 80124b8:	47b8      	blx	r7
 80124ba:	3001      	adds	r0, #1
 80124bc:	f43f af30 	beq.w	8012320 <_printf_float+0x98>
 80124c0:	f109 0901 	add.w	r9, r9, #1
 80124c4:	e7e8      	b.n	8012498 <_printf_float+0x210>
 80124c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	dc3b      	bgt.n	8012544 <_printf_float+0x2bc>
 80124cc:	4a1c      	ldr	r2, [pc, #112]	@ (8012540 <_printf_float+0x2b8>)
 80124ce:	2301      	movs	r3, #1
 80124d0:	4631      	mov	r1, r6
 80124d2:	4628      	mov	r0, r5
 80124d4:	47b8      	blx	r7
 80124d6:	3001      	adds	r0, #1
 80124d8:	f43f af22 	beq.w	8012320 <_printf_float+0x98>
 80124dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80124e0:	ea59 0303 	orrs.w	r3, r9, r3
 80124e4:	d102      	bne.n	80124ec <_printf_float+0x264>
 80124e6:	6823      	ldr	r3, [r4, #0]
 80124e8:	07d9      	lsls	r1, r3, #31
 80124ea:	d5d7      	bpl.n	801249c <_printf_float+0x214>
 80124ec:	9b05      	ldr	r3, [sp, #20]
 80124ee:	465a      	mov	r2, fp
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	f43f af12 	beq.w	8012320 <_printf_float+0x98>
 80124fc:	f04f 0a00 	mov.w	sl, #0
 8012500:	f104 0b1a 	add.w	fp, r4, #26
 8012504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012506:	425b      	negs	r3, r3
 8012508:	4553      	cmp	r3, sl
 801250a:	dc01      	bgt.n	8012510 <_printf_float+0x288>
 801250c:	464b      	mov	r3, r9
 801250e:	e794      	b.n	801243a <_printf_float+0x1b2>
 8012510:	2301      	movs	r3, #1
 8012512:	465a      	mov	r2, fp
 8012514:	4631      	mov	r1, r6
 8012516:	4628      	mov	r0, r5
 8012518:	47b8      	blx	r7
 801251a:	3001      	adds	r0, #1
 801251c:	f43f af00 	beq.w	8012320 <_printf_float+0x98>
 8012520:	f10a 0a01 	add.w	sl, sl, #1
 8012524:	e7ee      	b.n	8012504 <_printf_float+0x27c>
 8012526:	bf00      	nop
 8012528:	ffffffff 	.word	0xffffffff
 801252c:	7fefffff 	.word	0x7fefffff
 8012530:	080172dc 	.word	0x080172dc
 8012534:	080172e0 	.word	0x080172e0
 8012538:	080172e4 	.word	0x080172e4
 801253c:	080172e8 	.word	0x080172e8
 8012540:	080172ec 	.word	0x080172ec
 8012544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801254a:	4553      	cmp	r3, sl
 801254c:	bfa8      	it	ge
 801254e:	4653      	movge	r3, sl
 8012550:	2b00      	cmp	r3, #0
 8012552:	4699      	mov	r9, r3
 8012554:	dc37      	bgt.n	80125c6 <_printf_float+0x33e>
 8012556:	2300      	movs	r3, #0
 8012558:	9307      	str	r3, [sp, #28]
 801255a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801255e:	f104 021a 	add.w	r2, r4, #26
 8012562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012564:	9907      	ldr	r1, [sp, #28]
 8012566:	9306      	str	r3, [sp, #24]
 8012568:	eba3 0309 	sub.w	r3, r3, r9
 801256c:	428b      	cmp	r3, r1
 801256e:	dc31      	bgt.n	80125d4 <_printf_float+0x34c>
 8012570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012572:	459a      	cmp	sl, r3
 8012574:	dc3b      	bgt.n	80125ee <_printf_float+0x366>
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	07da      	lsls	r2, r3, #31
 801257a:	d438      	bmi.n	80125ee <_printf_float+0x366>
 801257c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801257e:	ebaa 0903 	sub.w	r9, sl, r3
 8012582:	9b06      	ldr	r3, [sp, #24]
 8012584:	ebaa 0303 	sub.w	r3, sl, r3
 8012588:	4599      	cmp	r9, r3
 801258a:	bfa8      	it	ge
 801258c:	4699      	movge	r9, r3
 801258e:	f1b9 0f00 	cmp.w	r9, #0
 8012592:	dc34      	bgt.n	80125fe <_printf_float+0x376>
 8012594:	f04f 0800 	mov.w	r8, #0
 8012598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801259c:	f104 0b1a 	add.w	fp, r4, #26
 80125a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125a2:	ebaa 0303 	sub.w	r3, sl, r3
 80125a6:	eba3 0309 	sub.w	r3, r3, r9
 80125aa:	4543      	cmp	r3, r8
 80125ac:	f77f af76 	ble.w	801249c <_printf_float+0x214>
 80125b0:	2301      	movs	r3, #1
 80125b2:	465a      	mov	r2, fp
 80125b4:	4631      	mov	r1, r6
 80125b6:	4628      	mov	r0, r5
 80125b8:	47b8      	blx	r7
 80125ba:	3001      	adds	r0, #1
 80125bc:	f43f aeb0 	beq.w	8012320 <_printf_float+0x98>
 80125c0:	f108 0801 	add.w	r8, r8, #1
 80125c4:	e7ec      	b.n	80125a0 <_printf_float+0x318>
 80125c6:	4642      	mov	r2, r8
 80125c8:	4631      	mov	r1, r6
 80125ca:	4628      	mov	r0, r5
 80125cc:	47b8      	blx	r7
 80125ce:	3001      	adds	r0, #1
 80125d0:	d1c1      	bne.n	8012556 <_printf_float+0x2ce>
 80125d2:	e6a5      	b.n	8012320 <_printf_float+0x98>
 80125d4:	2301      	movs	r3, #1
 80125d6:	4631      	mov	r1, r6
 80125d8:	4628      	mov	r0, r5
 80125da:	9206      	str	r2, [sp, #24]
 80125dc:	47b8      	blx	r7
 80125de:	3001      	adds	r0, #1
 80125e0:	f43f ae9e 	beq.w	8012320 <_printf_float+0x98>
 80125e4:	9b07      	ldr	r3, [sp, #28]
 80125e6:	9a06      	ldr	r2, [sp, #24]
 80125e8:	3301      	adds	r3, #1
 80125ea:	9307      	str	r3, [sp, #28]
 80125ec:	e7b9      	b.n	8012562 <_printf_float+0x2da>
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	465a      	mov	r2, fp
 80125f2:	4631      	mov	r1, r6
 80125f4:	4628      	mov	r0, r5
 80125f6:	47b8      	blx	r7
 80125f8:	3001      	adds	r0, #1
 80125fa:	d1bf      	bne.n	801257c <_printf_float+0x2f4>
 80125fc:	e690      	b.n	8012320 <_printf_float+0x98>
 80125fe:	9a06      	ldr	r2, [sp, #24]
 8012600:	464b      	mov	r3, r9
 8012602:	4442      	add	r2, r8
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	d1c2      	bne.n	8012594 <_printf_float+0x30c>
 801260e:	e687      	b.n	8012320 <_printf_float+0x98>
 8012610:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012614:	f1b9 0f01 	cmp.w	r9, #1
 8012618:	dc01      	bgt.n	801261e <_printf_float+0x396>
 801261a:	07db      	lsls	r3, r3, #31
 801261c:	d536      	bpl.n	801268c <_printf_float+0x404>
 801261e:	2301      	movs	r3, #1
 8012620:	4642      	mov	r2, r8
 8012622:	4631      	mov	r1, r6
 8012624:	4628      	mov	r0, r5
 8012626:	47b8      	blx	r7
 8012628:	3001      	adds	r0, #1
 801262a:	f43f ae79 	beq.w	8012320 <_printf_float+0x98>
 801262e:	9b05      	ldr	r3, [sp, #20]
 8012630:	465a      	mov	r2, fp
 8012632:	4631      	mov	r1, r6
 8012634:	4628      	mov	r0, r5
 8012636:	47b8      	blx	r7
 8012638:	3001      	adds	r0, #1
 801263a:	f43f ae71 	beq.w	8012320 <_printf_float+0x98>
 801263e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264a:	f109 39ff 	add.w	r9, r9, #4294967295
 801264e:	d018      	beq.n	8012682 <_printf_float+0x3fa>
 8012650:	464b      	mov	r3, r9
 8012652:	f108 0201 	add.w	r2, r8, #1
 8012656:	4631      	mov	r1, r6
 8012658:	4628      	mov	r0, r5
 801265a:	47b8      	blx	r7
 801265c:	3001      	adds	r0, #1
 801265e:	d10c      	bne.n	801267a <_printf_float+0x3f2>
 8012660:	e65e      	b.n	8012320 <_printf_float+0x98>
 8012662:	2301      	movs	r3, #1
 8012664:	465a      	mov	r2, fp
 8012666:	4631      	mov	r1, r6
 8012668:	4628      	mov	r0, r5
 801266a:	47b8      	blx	r7
 801266c:	3001      	adds	r0, #1
 801266e:	f43f ae57 	beq.w	8012320 <_printf_float+0x98>
 8012672:	f108 0801 	add.w	r8, r8, #1
 8012676:	45c8      	cmp	r8, r9
 8012678:	dbf3      	blt.n	8012662 <_printf_float+0x3da>
 801267a:	4653      	mov	r3, sl
 801267c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012680:	e6dc      	b.n	801243c <_printf_float+0x1b4>
 8012682:	f04f 0800 	mov.w	r8, #0
 8012686:	f104 0b1a 	add.w	fp, r4, #26
 801268a:	e7f4      	b.n	8012676 <_printf_float+0x3ee>
 801268c:	2301      	movs	r3, #1
 801268e:	4642      	mov	r2, r8
 8012690:	e7e1      	b.n	8012656 <_printf_float+0x3ce>
 8012692:	2301      	movs	r3, #1
 8012694:	464a      	mov	r2, r9
 8012696:	4631      	mov	r1, r6
 8012698:	4628      	mov	r0, r5
 801269a:	47b8      	blx	r7
 801269c:	3001      	adds	r0, #1
 801269e:	f43f ae3f 	beq.w	8012320 <_printf_float+0x98>
 80126a2:	f108 0801 	add.w	r8, r8, #1
 80126a6:	68e3      	ldr	r3, [r4, #12]
 80126a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80126aa:	1a5b      	subs	r3, r3, r1
 80126ac:	4543      	cmp	r3, r8
 80126ae:	dcf0      	bgt.n	8012692 <_printf_float+0x40a>
 80126b0:	e6f8      	b.n	80124a4 <_printf_float+0x21c>
 80126b2:	f04f 0800 	mov.w	r8, #0
 80126b6:	f104 0919 	add.w	r9, r4, #25
 80126ba:	e7f4      	b.n	80126a6 <_printf_float+0x41e>

080126bc <_printf_common>:
 80126bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c0:	4616      	mov	r6, r2
 80126c2:	4698      	mov	r8, r3
 80126c4:	688a      	ldr	r2, [r1, #8]
 80126c6:	690b      	ldr	r3, [r1, #16]
 80126c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80126cc:	4293      	cmp	r3, r2
 80126ce:	bfb8      	it	lt
 80126d0:	4613      	movlt	r3, r2
 80126d2:	6033      	str	r3, [r6, #0]
 80126d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80126d8:	4607      	mov	r7, r0
 80126da:	460c      	mov	r4, r1
 80126dc:	b10a      	cbz	r2, 80126e2 <_printf_common+0x26>
 80126de:	3301      	adds	r3, #1
 80126e0:	6033      	str	r3, [r6, #0]
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	0699      	lsls	r1, r3, #26
 80126e6:	bf42      	ittt	mi
 80126e8:	6833      	ldrmi	r3, [r6, #0]
 80126ea:	3302      	addmi	r3, #2
 80126ec:	6033      	strmi	r3, [r6, #0]
 80126ee:	6825      	ldr	r5, [r4, #0]
 80126f0:	f015 0506 	ands.w	r5, r5, #6
 80126f4:	d106      	bne.n	8012704 <_printf_common+0x48>
 80126f6:	f104 0a19 	add.w	sl, r4, #25
 80126fa:	68e3      	ldr	r3, [r4, #12]
 80126fc:	6832      	ldr	r2, [r6, #0]
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	42ab      	cmp	r3, r5
 8012702:	dc26      	bgt.n	8012752 <_printf_common+0x96>
 8012704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012708:	6822      	ldr	r2, [r4, #0]
 801270a:	3b00      	subs	r3, #0
 801270c:	bf18      	it	ne
 801270e:	2301      	movne	r3, #1
 8012710:	0692      	lsls	r2, r2, #26
 8012712:	d42b      	bmi.n	801276c <_printf_common+0xb0>
 8012714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012718:	4641      	mov	r1, r8
 801271a:	4638      	mov	r0, r7
 801271c:	47c8      	blx	r9
 801271e:	3001      	adds	r0, #1
 8012720:	d01e      	beq.n	8012760 <_printf_common+0xa4>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	6922      	ldr	r2, [r4, #16]
 8012726:	f003 0306 	and.w	r3, r3, #6
 801272a:	2b04      	cmp	r3, #4
 801272c:	bf02      	ittt	eq
 801272e:	68e5      	ldreq	r5, [r4, #12]
 8012730:	6833      	ldreq	r3, [r6, #0]
 8012732:	1aed      	subeq	r5, r5, r3
 8012734:	68a3      	ldr	r3, [r4, #8]
 8012736:	bf0c      	ite	eq
 8012738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801273c:	2500      	movne	r5, #0
 801273e:	4293      	cmp	r3, r2
 8012740:	bfc4      	itt	gt
 8012742:	1a9b      	subgt	r3, r3, r2
 8012744:	18ed      	addgt	r5, r5, r3
 8012746:	2600      	movs	r6, #0
 8012748:	341a      	adds	r4, #26
 801274a:	42b5      	cmp	r5, r6
 801274c:	d11a      	bne.n	8012784 <_printf_common+0xc8>
 801274e:	2000      	movs	r0, #0
 8012750:	e008      	b.n	8012764 <_printf_common+0xa8>
 8012752:	2301      	movs	r3, #1
 8012754:	4652      	mov	r2, sl
 8012756:	4641      	mov	r1, r8
 8012758:	4638      	mov	r0, r7
 801275a:	47c8      	blx	r9
 801275c:	3001      	adds	r0, #1
 801275e:	d103      	bne.n	8012768 <_printf_common+0xac>
 8012760:	f04f 30ff 	mov.w	r0, #4294967295
 8012764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012768:	3501      	adds	r5, #1
 801276a:	e7c6      	b.n	80126fa <_printf_common+0x3e>
 801276c:	18e1      	adds	r1, r4, r3
 801276e:	1c5a      	adds	r2, r3, #1
 8012770:	2030      	movs	r0, #48	@ 0x30
 8012772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012776:	4422      	add	r2, r4
 8012778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801277c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012780:	3302      	adds	r3, #2
 8012782:	e7c7      	b.n	8012714 <_printf_common+0x58>
 8012784:	2301      	movs	r3, #1
 8012786:	4622      	mov	r2, r4
 8012788:	4641      	mov	r1, r8
 801278a:	4638      	mov	r0, r7
 801278c:	47c8      	blx	r9
 801278e:	3001      	adds	r0, #1
 8012790:	d0e6      	beq.n	8012760 <_printf_common+0xa4>
 8012792:	3601      	adds	r6, #1
 8012794:	e7d9      	b.n	801274a <_printf_common+0x8e>
	...

08012798 <_printf_i>:
 8012798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801279c:	7e0f      	ldrb	r7, [r1, #24]
 801279e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80127a0:	2f78      	cmp	r7, #120	@ 0x78
 80127a2:	4691      	mov	r9, r2
 80127a4:	4680      	mov	r8, r0
 80127a6:	460c      	mov	r4, r1
 80127a8:	469a      	mov	sl, r3
 80127aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80127ae:	d807      	bhi.n	80127c0 <_printf_i+0x28>
 80127b0:	2f62      	cmp	r7, #98	@ 0x62
 80127b2:	d80a      	bhi.n	80127ca <_printf_i+0x32>
 80127b4:	2f00      	cmp	r7, #0
 80127b6:	f000 80d2 	beq.w	801295e <_printf_i+0x1c6>
 80127ba:	2f58      	cmp	r7, #88	@ 0x58
 80127bc:	f000 80b9 	beq.w	8012932 <_printf_i+0x19a>
 80127c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80127c8:	e03a      	b.n	8012840 <_printf_i+0xa8>
 80127ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80127ce:	2b15      	cmp	r3, #21
 80127d0:	d8f6      	bhi.n	80127c0 <_printf_i+0x28>
 80127d2:	a101      	add	r1, pc, #4	@ (adr r1, 80127d8 <_printf_i+0x40>)
 80127d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127d8:	08012831 	.word	0x08012831
 80127dc:	08012845 	.word	0x08012845
 80127e0:	080127c1 	.word	0x080127c1
 80127e4:	080127c1 	.word	0x080127c1
 80127e8:	080127c1 	.word	0x080127c1
 80127ec:	080127c1 	.word	0x080127c1
 80127f0:	08012845 	.word	0x08012845
 80127f4:	080127c1 	.word	0x080127c1
 80127f8:	080127c1 	.word	0x080127c1
 80127fc:	080127c1 	.word	0x080127c1
 8012800:	080127c1 	.word	0x080127c1
 8012804:	08012945 	.word	0x08012945
 8012808:	0801286f 	.word	0x0801286f
 801280c:	080128ff 	.word	0x080128ff
 8012810:	080127c1 	.word	0x080127c1
 8012814:	080127c1 	.word	0x080127c1
 8012818:	08012967 	.word	0x08012967
 801281c:	080127c1 	.word	0x080127c1
 8012820:	0801286f 	.word	0x0801286f
 8012824:	080127c1 	.word	0x080127c1
 8012828:	080127c1 	.word	0x080127c1
 801282c:	08012907 	.word	0x08012907
 8012830:	6833      	ldr	r3, [r6, #0]
 8012832:	1d1a      	adds	r2, r3, #4
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	6032      	str	r2, [r6, #0]
 8012838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801283c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012840:	2301      	movs	r3, #1
 8012842:	e09d      	b.n	8012980 <_printf_i+0x1e8>
 8012844:	6833      	ldr	r3, [r6, #0]
 8012846:	6820      	ldr	r0, [r4, #0]
 8012848:	1d19      	adds	r1, r3, #4
 801284a:	6031      	str	r1, [r6, #0]
 801284c:	0606      	lsls	r6, r0, #24
 801284e:	d501      	bpl.n	8012854 <_printf_i+0xbc>
 8012850:	681d      	ldr	r5, [r3, #0]
 8012852:	e003      	b.n	801285c <_printf_i+0xc4>
 8012854:	0645      	lsls	r5, r0, #25
 8012856:	d5fb      	bpl.n	8012850 <_printf_i+0xb8>
 8012858:	f9b3 5000 	ldrsh.w	r5, [r3]
 801285c:	2d00      	cmp	r5, #0
 801285e:	da03      	bge.n	8012868 <_printf_i+0xd0>
 8012860:	232d      	movs	r3, #45	@ 0x2d
 8012862:	426d      	negs	r5, r5
 8012864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012868:	4859      	ldr	r0, [pc, #356]	@ (80129d0 <_printf_i+0x238>)
 801286a:	230a      	movs	r3, #10
 801286c:	e011      	b.n	8012892 <_printf_i+0xfa>
 801286e:	6821      	ldr	r1, [r4, #0]
 8012870:	6833      	ldr	r3, [r6, #0]
 8012872:	0608      	lsls	r0, r1, #24
 8012874:	f853 5b04 	ldr.w	r5, [r3], #4
 8012878:	d402      	bmi.n	8012880 <_printf_i+0xe8>
 801287a:	0649      	lsls	r1, r1, #25
 801287c:	bf48      	it	mi
 801287e:	b2ad      	uxthmi	r5, r5
 8012880:	2f6f      	cmp	r7, #111	@ 0x6f
 8012882:	4853      	ldr	r0, [pc, #332]	@ (80129d0 <_printf_i+0x238>)
 8012884:	6033      	str	r3, [r6, #0]
 8012886:	bf14      	ite	ne
 8012888:	230a      	movne	r3, #10
 801288a:	2308      	moveq	r3, #8
 801288c:	2100      	movs	r1, #0
 801288e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012892:	6866      	ldr	r6, [r4, #4]
 8012894:	60a6      	str	r6, [r4, #8]
 8012896:	2e00      	cmp	r6, #0
 8012898:	bfa2      	ittt	ge
 801289a:	6821      	ldrge	r1, [r4, #0]
 801289c:	f021 0104 	bicge.w	r1, r1, #4
 80128a0:	6021      	strge	r1, [r4, #0]
 80128a2:	b90d      	cbnz	r5, 80128a8 <_printf_i+0x110>
 80128a4:	2e00      	cmp	r6, #0
 80128a6:	d04b      	beq.n	8012940 <_printf_i+0x1a8>
 80128a8:	4616      	mov	r6, r2
 80128aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80128ae:	fb03 5711 	mls	r7, r3, r1, r5
 80128b2:	5dc7      	ldrb	r7, [r0, r7]
 80128b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80128b8:	462f      	mov	r7, r5
 80128ba:	42bb      	cmp	r3, r7
 80128bc:	460d      	mov	r5, r1
 80128be:	d9f4      	bls.n	80128aa <_printf_i+0x112>
 80128c0:	2b08      	cmp	r3, #8
 80128c2:	d10b      	bne.n	80128dc <_printf_i+0x144>
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	07df      	lsls	r7, r3, #31
 80128c8:	d508      	bpl.n	80128dc <_printf_i+0x144>
 80128ca:	6923      	ldr	r3, [r4, #16]
 80128cc:	6861      	ldr	r1, [r4, #4]
 80128ce:	4299      	cmp	r1, r3
 80128d0:	bfde      	ittt	le
 80128d2:	2330      	movle	r3, #48	@ 0x30
 80128d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80128dc:	1b92      	subs	r2, r2, r6
 80128de:	6122      	str	r2, [r4, #16]
 80128e0:	f8cd a000 	str.w	sl, [sp]
 80128e4:	464b      	mov	r3, r9
 80128e6:	aa03      	add	r2, sp, #12
 80128e8:	4621      	mov	r1, r4
 80128ea:	4640      	mov	r0, r8
 80128ec:	f7ff fee6 	bl	80126bc <_printf_common>
 80128f0:	3001      	adds	r0, #1
 80128f2:	d14a      	bne.n	801298a <_printf_i+0x1f2>
 80128f4:	f04f 30ff 	mov.w	r0, #4294967295
 80128f8:	b004      	add	sp, #16
 80128fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fe:	6823      	ldr	r3, [r4, #0]
 8012900:	f043 0320 	orr.w	r3, r3, #32
 8012904:	6023      	str	r3, [r4, #0]
 8012906:	4833      	ldr	r0, [pc, #204]	@ (80129d4 <_printf_i+0x23c>)
 8012908:	2778      	movs	r7, #120	@ 0x78
 801290a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801290e:	6823      	ldr	r3, [r4, #0]
 8012910:	6831      	ldr	r1, [r6, #0]
 8012912:	061f      	lsls	r7, r3, #24
 8012914:	f851 5b04 	ldr.w	r5, [r1], #4
 8012918:	d402      	bmi.n	8012920 <_printf_i+0x188>
 801291a:	065f      	lsls	r7, r3, #25
 801291c:	bf48      	it	mi
 801291e:	b2ad      	uxthmi	r5, r5
 8012920:	6031      	str	r1, [r6, #0]
 8012922:	07d9      	lsls	r1, r3, #31
 8012924:	bf44      	itt	mi
 8012926:	f043 0320 	orrmi.w	r3, r3, #32
 801292a:	6023      	strmi	r3, [r4, #0]
 801292c:	b11d      	cbz	r5, 8012936 <_printf_i+0x19e>
 801292e:	2310      	movs	r3, #16
 8012930:	e7ac      	b.n	801288c <_printf_i+0xf4>
 8012932:	4827      	ldr	r0, [pc, #156]	@ (80129d0 <_printf_i+0x238>)
 8012934:	e7e9      	b.n	801290a <_printf_i+0x172>
 8012936:	6823      	ldr	r3, [r4, #0]
 8012938:	f023 0320 	bic.w	r3, r3, #32
 801293c:	6023      	str	r3, [r4, #0]
 801293e:	e7f6      	b.n	801292e <_printf_i+0x196>
 8012940:	4616      	mov	r6, r2
 8012942:	e7bd      	b.n	80128c0 <_printf_i+0x128>
 8012944:	6833      	ldr	r3, [r6, #0]
 8012946:	6825      	ldr	r5, [r4, #0]
 8012948:	6961      	ldr	r1, [r4, #20]
 801294a:	1d18      	adds	r0, r3, #4
 801294c:	6030      	str	r0, [r6, #0]
 801294e:	062e      	lsls	r6, r5, #24
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	d501      	bpl.n	8012958 <_printf_i+0x1c0>
 8012954:	6019      	str	r1, [r3, #0]
 8012956:	e002      	b.n	801295e <_printf_i+0x1c6>
 8012958:	0668      	lsls	r0, r5, #25
 801295a:	d5fb      	bpl.n	8012954 <_printf_i+0x1bc>
 801295c:	8019      	strh	r1, [r3, #0]
 801295e:	2300      	movs	r3, #0
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	4616      	mov	r6, r2
 8012964:	e7bc      	b.n	80128e0 <_printf_i+0x148>
 8012966:	6833      	ldr	r3, [r6, #0]
 8012968:	1d1a      	adds	r2, r3, #4
 801296a:	6032      	str	r2, [r6, #0]
 801296c:	681e      	ldr	r6, [r3, #0]
 801296e:	6862      	ldr	r2, [r4, #4]
 8012970:	2100      	movs	r1, #0
 8012972:	4630      	mov	r0, r6
 8012974:	f7ed fcb4 	bl	80002e0 <memchr>
 8012978:	b108      	cbz	r0, 801297e <_printf_i+0x1e6>
 801297a:	1b80      	subs	r0, r0, r6
 801297c:	6060      	str	r0, [r4, #4]
 801297e:	6863      	ldr	r3, [r4, #4]
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	2300      	movs	r3, #0
 8012984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012988:	e7aa      	b.n	80128e0 <_printf_i+0x148>
 801298a:	6923      	ldr	r3, [r4, #16]
 801298c:	4632      	mov	r2, r6
 801298e:	4649      	mov	r1, r9
 8012990:	4640      	mov	r0, r8
 8012992:	47d0      	blx	sl
 8012994:	3001      	adds	r0, #1
 8012996:	d0ad      	beq.n	80128f4 <_printf_i+0x15c>
 8012998:	6823      	ldr	r3, [r4, #0]
 801299a:	079b      	lsls	r3, r3, #30
 801299c:	d413      	bmi.n	80129c6 <_printf_i+0x22e>
 801299e:	68e0      	ldr	r0, [r4, #12]
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	4298      	cmp	r0, r3
 80129a4:	bfb8      	it	lt
 80129a6:	4618      	movlt	r0, r3
 80129a8:	e7a6      	b.n	80128f8 <_printf_i+0x160>
 80129aa:	2301      	movs	r3, #1
 80129ac:	4632      	mov	r2, r6
 80129ae:	4649      	mov	r1, r9
 80129b0:	4640      	mov	r0, r8
 80129b2:	47d0      	blx	sl
 80129b4:	3001      	adds	r0, #1
 80129b6:	d09d      	beq.n	80128f4 <_printf_i+0x15c>
 80129b8:	3501      	adds	r5, #1
 80129ba:	68e3      	ldr	r3, [r4, #12]
 80129bc:	9903      	ldr	r1, [sp, #12]
 80129be:	1a5b      	subs	r3, r3, r1
 80129c0:	42ab      	cmp	r3, r5
 80129c2:	dcf2      	bgt.n	80129aa <_printf_i+0x212>
 80129c4:	e7eb      	b.n	801299e <_printf_i+0x206>
 80129c6:	2500      	movs	r5, #0
 80129c8:	f104 0619 	add.w	r6, r4, #25
 80129cc:	e7f5      	b.n	80129ba <_printf_i+0x222>
 80129ce:	bf00      	nop
 80129d0:	080172ee 	.word	0x080172ee
 80129d4:	080172ff 	.word	0x080172ff

080129d8 <std>:
 80129d8:	2300      	movs	r3, #0
 80129da:	b510      	push	{r4, lr}
 80129dc:	4604      	mov	r4, r0
 80129de:	e9c0 3300 	strd	r3, r3, [r0]
 80129e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129e6:	6083      	str	r3, [r0, #8]
 80129e8:	8181      	strh	r1, [r0, #12]
 80129ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80129ec:	81c2      	strh	r2, [r0, #14]
 80129ee:	6183      	str	r3, [r0, #24]
 80129f0:	4619      	mov	r1, r3
 80129f2:	2208      	movs	r2, #8
 80129f4:	305c      	adds	r0, #92	@ 0x5c
 80129f6:	f000 f914 	bl	8012c22 <memset>
 80129fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012a30 <std+0x58>)
 80129fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80129fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012a34 <std+0x5c>)
 8012a00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012a02:	4b0d      	ldr	r3, [pc, #52]	@ (8012a38 <std+0x60>)
 8012a04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012a06:	4b0d      	ldr	r3, [pc, #52]	@ (8012a3c <std+0x64>)
 8012a08:	6323      	str	r3, [r4, #48]	@ 0x30
 8012a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a40 <std+0x68>)
 8012a0c:	6224      	str	r4, [r4, #32]
 8012a0e:	429c      	cmp	r4, r3
 8012a10:	d006      	beq.n	8012a20 <std+0x48>
 8012a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012a16:	4294      	cmp	r4, r2
 8012a18:	d002      	beq.n	8012a20 <std+0x48>
 8012a1a:	33d0      	adds	r3, #208	@ 0xd0
 8012a1c:	429c      	cmp	r4, r3
 8012a1e:	d105      	bne.n	8012a2c <std+0x54>
 8012a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a28:	f000 b988 	b.w	8012d3c <__retarget_lock_init_recursive>
 8012a2c:	bd10      	pop	{r4, pc}
 8012a2e:	bf00      	nop
 8012a30:	08012b9d 	.word	0x08012b9d
 8012a34:	08012bbf 	.word	0x08012bbf
 8012a38:	08012bf7 	.word	0x08012bf7
 8012a3c:	08012c1b 	.word	0x08012c1b
 8012a40:	24009548 	.word	0x24009548

08012a44 <stdio_exit_handler>:
 8012a44:	4a02      	ldr	r2, [pc, #8]	@ (8012a50 <stdio_exit_handler+0xc>)
 8012a46:	4903      	ldr	r1, [pc, #12]	@ (8012a54 <stdio_exit_handler+0x10>)
 8012a48:	4803      	ldr	r0, [pc, #12]	@ (8012a58 <stdio_exit_handler+0x14>)
 8012a4a:	f000 b869 	b.w	8012b20 <_fwalk_sglue>
 8012a4e:	bf00      	nop
 8012a50:	2400012c 	.word	0x2400012c
 8012a54:	0801446d 	.word	0x0801446d
 8012a58:	2400013c 	.word	0x2400013c

08012a5c <cleanup_stdio>:
 8012a5c:	6841      	ldr	r1, [r0, #4]
 8012a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8012a90 <cleanup_stdio+0x34>)
 8012a60:	4299      	cmp	r1, r3
 8012a62:	b510      	push	{r4, lr}
 8012a64:	4604      	mov	r4, r0
 8012a66:	d001      	beq.n	8012a6c <cleanup_stdio+0x10>
 8012a68:	f001 fd00 	bl	801446c <_fflush_r>
 8012a6c:	68a1      	ldr	r1, [r4, #8]
 8012a6e:	4b09      	ldr	r3, [pc, #36]	@ (8012a94 <cleanup_stdio+0x38>)
 8012a70:	4299      	cmp	r1, r3
 8012a72:	d002      	beq.n	8012a7a <cleanup_stdio+0x1e>
 8012a74:	4620      	mov	r0, r4
 8012a76:	f001 fcf9 	bl	801446c <_fflush_r>
 8012a7a:	68e1      	ldr	r1, [r4, #12]
 8012a7c:	4b06      	ldr	r3, [pc, #24]	@ (8012a98 <cleanup_stdio+0x3c>)
 8012a7e:	4299      	cmp	r1, r3
 8012a80:	d004      	beq.n	8012a8c <cleanup_stdio+0x30>
 8012a82:	4620      	mov	r0, r4
 8012a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a88:	f001 bcf0 	b.w	801446c <_fflush_r>
 8012a8c:	bd10      	pop	{r4, pc}
 8012a8e:	bf00      	nop
 8012a90:	24009548 	.word	0x24009548
 8012a94:	240095b0 	.word	0x240095b0
 8012a98:	24009618 	.word	0x24009618

08012a9c <global_stdio_init.part.0>:
 8012a9c:	b510      	push	{r4, lr}
 8012a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8012acc <global_stdio_init.part.0+0x30>)
 8012aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8012ad0 <global_stdio_init.part.0+0x34>)
 8012aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8012ad4 <global_stdio_init.part.0+0x38>)
 8012aa4:	601a      	str	r2, [r3, #0]
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	2104      	movs	r1, #4
 8012aac:	f7ff ff94 	bl	80129d8 <std>
 8012ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	2109      	movs	r1, #9
 8012ab8:	f7ff ff8e 	bl	80129d8 <std>
 8012abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ac0:	2202      	movs	r2, #2
 8012ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac6:	2112      	movs	r1, #18
 8012ac8:	f7ff bf86 	b.w	80129d8 <std>
 8012acc:	24009680 	.word	0x24009680
 8012ad0:	24009548 	.word	0x24009548
 8012ad4:	08012a45 	.word	0x08012a45

08012ad8 <__sfp_lock_acquire>:
 8012ad8:	4801      	ldr	r0, [pc, #4]	@ (8012ae0 <__sfp_lock_acquire+0x8>)
 8012ada:	f000 b930 	b.w	8012d3e <__retarget_lock_acquire_recursive>
 8012ade:	bf00      	nop
 8012ae0:	24009689 	.word	0x24009689

08012ae4 <__sfp_lock_release>:
 8012ae4:	4801      	ldr	r0, [pc, #4]	@ (8012aec <__sfp_lock_release+0x8>)
 8012ae6:	f000 b92b 	b.w	8012d40 <__retarget_lock_release_recursive>
 8012aea:	bf00      	nop
 8012aec:	24009689 	.word	0x24009689

08012af0 <__sinit>:
 8012af0:	b510      	push	{r4, lr}
 8012af2:	4604      	mov	r4, r0
 8012af4:	f7ff fff0 	bl	8012ad8 <__sfp_lock_acquire>
 8012af8:	6a23      	ldr	r3, [r4, #32]
 8012afa:	b11b      	cbz	r3, 8012b04 <__sinit+0x14>
 8012afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b00:	f7ff bff0 	b.w	8012ae4 <__sfp_lock_release>
 8012b04:	4b04      	ldr	r3, [pc, #16]	@ (8012b18 <__sinit+0x28>)
 8012b06:	6223      	str	r3, [r4, #32]
 8012b08:	4b04      	ldr	r3, [pc, #16]	@ (8012b1c <__sinit+0x2c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1f5      	bne.n	8012afc <__sinit+0xc>
 8012b10:	f7ff ffc4 	bl	8012a9c <global_stdio_init.part.0>
 8012b14:	e7f2      	b.n	8012afc <__sinit+0xc>
 8012b16:	bf00      	nop
 8012b18:	08012a5d 	.word	0x08012a5d
 8012b1c:	24009680 	.word	0x24009680

08012b20 <_fwalk_sglue>:
 8012b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b24:	4607      	mov	r7, r0
 8012b26:	4688      	mov	r8, r1
 8012b28:	4614      	mov	r4, r2
 8012b2a:	2600      	movs	r6, #0
 8012b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b30:	f1b9 0901 	subs.w	r9, r9, #1
 8012b34:	d505      	bpl.n	8012b42 <_fwalk_sglue+0x22>
 8012b36:	6824      	ldr	r4, [r4, #0]
 8012b38:	2c00      	cmp	r4, #0
 8012b3a:	d1f7      	bne.n	8012b2c <_fwalk_sglue+0xc>
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b42:	89ab      	ldrh	r3, [r5, #12]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d907      	bls.n	8012b58 <_fwalk_sglue+0x38>
 8012b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	d003      	beq.n	8012b58 <_fwalk_sglue+0x38>
 8012b50:	4629      	mov	r1, r5
 8012b52:	4638      	mov	r0, r7
 8012b54:	47c0      	blx	r8
 8012b56:	4306      	orrs	r6, r0
 8012b58:	3568      	adds	r5, #104	@ 0x68
 8012b5a:	e7e9      	b.n	8012b30 <_fwalk_sglue+0x10>

08012b5c <siprintf>:
 8012b5c:	b40e      	push	{r1, r2, r3}
 8012b5e:	b500      	push	{lr}
 8012b60:	b09c      	sub	sp, #112	@ 0x70
 8012b62:	ab1d      	add	r3, sp, #116	@ 0x74
 8012b64:	9002      	str	r0, [sp, #8]
 8012b66:	9006      	str	r0, [sp, #24]
 8012b68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012b6c:	4809      	ldr	r0, [pc, #36]	@ (8012b94 <siprintf+0x38>)
 8012b6e:	9107      	str	r1, [sp, #28]
 8012b70:	9104      	str	r1, [sp, #16]
 8012b72:	4909      	ldr	r1, [pc, #36]	@ (8012b98 <siprintf+0x3c>)
 8012b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b78:	9105      	str	r1, [sp, #20]
 8012b7a:	6800      	ldr	r0, [r0, #0]
 8012b7c:	9301      	str	r3, [sp, #4]
 8012b7e:	a902      	add	r1, sp, #8
 8012b80:	f001 faf4 	bl	801416c <_svfiprintf_r>
 8012b84:	9b02      	ldr	r3, [sp, #8]
 8012b86:	2200      	movs	r2, #0
 8012b88:	701a      	strb	r2, [r3, #0]
 8012b8a:	b01c      	add	sp, #112	@ 0x70
 8012b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b90:	b003      	add	sp, #12
 8012b92:	4770      	bx	lr
 8012b94:	24000138 	.word	0x24000138
 8012b98:	ffff0208 	.word	0xffff0208

08012b9c <__sread>:
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba4:	f000 f86c 	bl	8012c80 <_read_r>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	bfab      	itete	ge
 8012bac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012bae:	89a3      	ldrhlt	r3, [r4, #12]
 8012bb0:	181b      	addge	r3, r3, r0
 8012bb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012bb6:	bfac      	ite	ge
 8012bb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012bba:	81a3      	strhlt	r3, [r4, #12]
 8012bbc:	bd10      	pop	{r4, pc}

08012bbe <__swrite>:
 8012bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc2:	461f      	mov	r7, r3
 8012bc4:	898b      	ldrh	r3, [r1, #12]
 8012bc6:	05db      	lsls	r3, r3, #23
 8012bc8:	4605      	mov	r5, r0
 8012bca:	460c      	mov	r4, r1
 8012bcc:	4616      	mov	r6, r2
 8012bce:	d505      	bpl.n	8012bdc <__swrite+0x1e>
 8012bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd4:	2302      	movs	r3, #2
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f000 f840 	bl	8012c5c <_lseek_r>
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012be2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012be6:	81a3      	strh	r3, [r4, #12]
 8012be8:	4632      	mov	r2, r6
 8012bea:	463b      	mov	r3, r7
 8012bec:	4628      	mov	r0, r5
 8012bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf2:	f000 b867 	b.w	8012cc4 <_write_r>

08012bf6 <__sseek>:
 8012bf6:	b510      	push	{r4, lr}
 8012bf8:	460c      	mov	r4, r1
 8012bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bfe:	f000 f82d 	bl	8012c5c <_lseek_r>
 8012c02:	1c43      	adds	r3, r0, #1
 8012c04:	89a3      	ldrh	r3, [r4, #12]
 8012c06:	bf15      	itete	ne
 8012c08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012c0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012c0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012c12:	81a3      	strheq	r3, [r4, #12]
 8012c14:	bf18      	it	ne
 8012c16:	81a3      	strhne	r3, [r4, #12]
 8012c18:	bd10      	pop	{r4, pc}

08012c1a <__sclose>:
 8012c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c1e:	f000 b80d 	b.w	8012c3c <_close_r>

08012c22 <memset>:
 8012c22:	4402      	add	r2, r0
 8012c24:	4603      	mov	r3, r0
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d100      	bne.n	8012c2c <memset+0xa>
 8012c2a:	4770      	bx	lr
 8012c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8012c30:	e7f9      	b.n	8012c26 <memset+0x4>
	...

08012c34 <_localeconv_r>:
 8012c34:	4800      	ldr	r0, [pc, #0]	@ (8012c38 <_localeconv_r+0x4>)
 8012c36:	4770      	bx	lr
 8012c38:	24000278 	.word	0x24000278

08012c3c <_close_r>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4d06      	ldr	r5, [pc, #24]	@ (8012c58 <_close_r+0x1c>)
 8012c40:	2300      	movs	r3, #0
 8012c42:	4604      	mov	r4, r0
 8012c44:	4608      	mov	r0, r1
 8012c46:	602b      	str	r3, [r5, #0]
 8012c48:	f7ee fdd4 	bl	80017f4 <_close>
 8012c4c:	1c43      	adds	r3, r0, #1
 8012c4e:	d102      	bne.n	8012c56 <_close_r+0x1a>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	b103      	cbz	r3, 8012c56 <_close_r+0x1a>
 8012c54:	6023      	str	r3, [r4, #0]
 8012c56:	bd38      	pop	{r3, r4, r5, pc}
 8012c58:	24009684 	.word	0x24009684

08012c5c <_lseek_r>:
 8012c5c:	b538      	push	{r3, r4, r5, lr}
 8012c5e:	4d07      	ldr	r5, [pc, #28]	@ (8012c7c <_lseek_r+0x20>)
 8012c60:	4604      	mov	r4, r0
 8012c62:	4608      	mov	r0, r1
 8012c64:	4611      	mov	r1, r2
 8012c66:	2200      	movs	r2, #0
 8012c68:	602a      	str	r2, [r5, #0]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	f7ee fde9 	bl	8001842 <_lseek>
 8012c70:	1c43      	adds	r3, r0, #1
 8012c72:	d102      	bne.n	8012c7a <_lseek_r+0x1e>
 8012c74:	682b      	ldr	r3, [r5, #0]
 8012c76:	b103      	cbz	r3, 8012c7a <_lseek_r+0x1e>
 8012c78:	6023      	str	r3, [r4, #0]
 8012c7a:	bd38      	pop	{r3, r4, r5, pc}
 8012c7c:	24009684 	.word	0x24009684

08012c80 <_read_r>:
 8012c80:	b538      	push	{r3, r4, r5, lr}
 8012c82:	4d07      	ldr	r5, [pc, #28]	@ (8012ca0 <_read_r+0x20>)
 8012c84:	4604      	mov	r4, r0
 8012c86:	4608      	mov	r0, r1
 8012c88:	4611      	mov	r1, r2
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	602a      	str	r2, [r5, #0]
 8012c8e:	461a      	mov	r2, r3
 8012c90:	f7ee fd77 	bl	8001782 <_read>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_read_r+0x1e>
 8012c98:	682b      	ldr	r3, [r5, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_read_r+0x1e>
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	24009684 	.word	0x24009684

08012ca4 <_sbrk_r>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	4d06      	ldr	r5, [pc, #24]	@ (8012cc0 <_sbrk_r+0x1c>)
 8012ca8:	2300      	movs	r3, #0
 8012caa:	4604      	mov	r4, r0
 8012cac:	4608      	mov	r0, r1
 8012cae:	602b      	str	r3, [r5, #0]
 8012cb0:	f7ee fdd4 	bl	800185c <_sbrk>
 8012cb4:	1c43      	adds	r3, r0, #1
 8012cb6:	d102      	bne.n	8012cbe <_sbrk_r+0x1a>
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	b103      	cbz	r3, 8012cbe <_sbrk_r+0x1a>
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	bd38      	pop	{r3, r4, r5, pc}
 8012cc0:	24009684 	.word	0x24009684

08012cc4 <_write_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4d07      	ldr	r5, [pc, #28]	@ (8012ce4 <_write_r+0x20>)
 8012cc8:	4604      	mov	r4, r0
 8012cca:	4608      	mov	r0, r1
 8012ccc:	4611      	mov	r1, r2
 8012cce:	2200      	movs	r2, #0
 8012cd0:	602a      	str	r2, [r5, #0]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f7ee fd72 	bl	80017bc <_write>
 8012cd8:	1c43      	adds	r3, r0, #1
 8012cda:	d102      	bne.n	8012ce2 <_write_r+0x1e>
 8012cdc:	682b      	ldr	r3, [r5, #0]
 8012cde:	b103      	cbz	r3, 8012ce2 <_write_r+0x1e>
 8012ce0:	6023      	str	r3, [r4, #0]
 8012ce2:	bd38      	pop	{r3, r4, r5, pc}
 8012ce4:	24009684 	.word	0x24009684

08012ce8 <__errno>:
 8012ce8:	4b01      	ldr	r3, [pc, #4]	@ (8012cf0 <__errno+0x8>)
 8012cea:	6818      	ldr	r0, [r3, #0]
 8012cec:	4770      	bx	lr
 8012cee:	bf00      	nop
 8012cf0:	24000138 	.word	0x24000138

08012cf4 <__libc_init_array>:
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8012d2c <__libc_init_array+0x38>)
 8012cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8012d30 <__libc_init_array+0x3c>)
 8012cfa:	1b64      	subs	r4, r4, r5
 8012cfc:	10a4      	asrs	r4, r4, #2
 8012cfe:	2600      	movs	r6, #0
 8012d00:	42a6      	cmp	r6, r4
 8012d02:	d109      	bne.n	8012d18 <__libc_init_array+0x24>
 8012d04:	4d0b      	ldr	r5, [pc, #44]	@ (8012d34 <__libc_init_array+0x40>)
 8012d06:	4c0c      	ldr	r4, [pc, #48]	@ (8012d38 <__libc_init_array+0x44>)
 8012d08:	f002 f9c6 	bl	8015098 <_init>
 8012d0c:	1b64      	subs	r4, r4, r5
 8012d0e:	10a4      	asrs	r4, r4, #2
 8012d10:	2600      	movs	r6, #0
 8012d12:	42a6      	cmp	r6, r4
 8012d14:	d105      	bne.n	8012d22 <__libc_init_array+0x2e>
 8012d16:	bd70      	pop	{r4, r5, r6, pc}
 8012d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d1c:	4798      	blx	r3
 8012d1e:	3601      	adds	r6, #1
 8012d20:	e7ee      	b.n	8012d00 <__libc_init_array+0xc>
 8012d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d26:	4798      	blx	r3
 8012d28:	3601      	adds	r6, #1
 8012d2a:	e7f2      	b.n	8012d12 <__libc_init_array+0x1e>
 8012d2c:	08017668 	.word	0x08017668
 8012d30:	08017668 	.word	0x08017668
 8012d34:	08017668 	.word	0x08017668
 8012d38:	0801766c 	.word	0x0801766c

08012d3c <__retarget_lock_init_recursive>:
 8012d3c:	4770      	bx	lr

08012d3e <__retarget_lock_acquire_recursive>:
 8012d3e:	4770      	bx	lr

08012d40 <__retarget_lock_release_recursive>:
 8012d40:	4770      	bx	lr

08012d42 <memcpy>:
 8012d42:	440a      	add	r2, r1
 8012d44:	4291      	cmp	r1, r2
 8012d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8012d4a:	d100      	bne.n	8012d4e <memcpy+0xc>
 8012d4c:	4770      	bx	lr
 8012d4e:	b510      	push	{r4, lr}
 8012d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d58:	4291      	cmp	r1, r2
 8012d5a:	d1f9      	bne.n	8012d50 <memcpy+0xe>
 8012d5c:	bd10      	pop	{r4, pc}

08012d5e <quorem>:
 8012d5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d62:	6903      	ldr	r3, [r0, #16]
 8012d64:	690c      	ldr	r4, [r1, #16]
 8012d66:	42a3      	cmp	r3, r4
 8012d68:	4607      	mov	r7, r0
 8012d6a:	db7e      	blt.n	8012e6a <quorem+0x10c>
 8012d6c:	3c01      	subs	r4, #1
 8012d6e:	f101 0814 	add.w	r8, r1, #20
 8012d72:	00a3      	lsls	r3, r4, #2
 8012d74:	f100 0514 	add.w	r5, r0, #20
 8012d78:	9300      	str	r3, [sp, #0]
 8012d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d7e:	9301      	str	r3, [sp, #4]
 8012d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d90:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d94:	d32e      	bcc.n	8012df4 <quorem+0x96>
 8012d96:	f04f 0a00 	mov.w	sl, #0
 8012d9a:	46c4      	mov	ip, r8
 8012d9c:	46ae      	mov	lr, r5
 8012d9e:	46d3      	mov	fp, sl
 8012da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012da4:	b298      	uxth	r0, r3
 8012da6:	fb06 a000 	mla	r0, r6, r0, sl
 8012daa:	0c02      	lsrs	r2, r0, #16
 8012dac:	0c1b      	lsrs	r3, r3, #16
 8012dae:	fb06 2303 	mla	r3, r6, r3, r2
 8012db2:	f8de 2000 	ldr.w	r2, [lr]
 8012db6:	b280      	uxth	r0, r0
 8012db8:	b292      	uxth	r2, r2
 8012dba:	1a12      	subs	r2, r2, r0
 8012dbc:	445a      	add	r2, fp
 8012dbe:	f8de 0000 	ldr.w	r0, [lr]
 8012dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012dcc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012dd0:	b292      	uxth	r2, r2
 8012dd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012dd6:	45e1      	cmp	r9, ip
 8012dd8:	f84e 2b04 	str.w	r2, [lr], #4
 8012ddc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012de0:	d2de      	bcs.n	8012da0 <quorem+0x42>
 8012de2:	9b00      	ldr	r3, [sp, #0]
 8012de4:	58eb      	ldr	r3, [r5, r3]
 8012de6:	b92b      	cbnz	r3, 8012df4 <quorem+0x96>
 8012de8:	9b01      	ldr	r3, [sp, #4]
 8012dea:	3b04      	subs	r3, #4
 8012dec:	429d      	cmp	r5, r3
 8012dee:	461a      	mov	r2, r3
 8012df0:	d32f      	bcc.n	8012e52 <quorem+0xf4>
 8012df2:	613c      	str	r4, [r7, #16]
 8012df4:	4638      	mov	r0, r7
 8012df6:	f001 f855 	bl	8013ea4 <__mcmp>
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	db25      	blt.n	8012e4a <quorem+0xec>
 8012dfe:	4629      	mov	r1, r5
 8012e00:	2000      	movs	r0, #0
 8012e02:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e06:	f8d1 c000 	ldr.w	ip, [r1]
 8012e0a:	fa1f fe82 	uxth.w	lr, r2
 8012e0e:	fa1f f38c 	uxth.w	r3, ip
 8012e12:	eba3 030e 	sub.w	r3, r3, lr
 8012e16:	4403      	add	r3, r0
 8012e18:	0c12      	lsrs	r2, r2, #16
 8012e1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012e1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e28:	45c1      	cmp	r9, r8
 8012e2a:	f841 3b04 	str.w	r3, [r1], #4
 8012e2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012e32:	d2e6      	bcs.n	8012e02 <quorem+0xa4>
 8012e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e3c:	b922      	cbnz	r2, 8012e48 <quorem+0xea>
 8012e3e:	3b04      	subs	r3, #4
 8012e40:	429d      	cmp	r5, r3
 8012e42:	461a      	mov	r2, r3
 8012e44:	d30b      	bcc.n	8012e5e <quorem+0x100>
 8012e46:	613c      	str	r4, [r7, #16]
 8012e48:	3601      	adds	r6, #1
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	b003      	add	sp, #12
 8012e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e52:	6812      	ldr	r2, [r2, #0]
 8012e54:	3b04      	subs	r3, #4
 8012e56:	2a00      	cmp	r2, #0
 8012e58:	d1cb      	bne.n	8012df2 <quorem+0x94>
 8012e5a:	3c01      	subs	r4, #1
 8012e5c:	e7c6      	b.n	8012dec <quorem+0x8e>
 8012e5e:	6812      	ldr	r2, [r2, #0]
 8012e60:	3b04      	subs	r3, #4
 8012e62:	2a00      	cmp	r2, #0
 8012e64:	d1ef      	bne.n	8012e46 <quorem+0xe8>
 8012e66:	3c01      	subs	r4, #1
 8012e68:	e7ea      	b.n	8012e40 <quorem+0xe2>
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	e7ee      	b.n	8012e4c <quorem+0xee>
	...

08012e70 <_dtoa_r>:
 8012e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e74:	ed2d 8b02 	vpush	{d8}
 8012e78:	69c7      	ldr	r7, [r0, #28]
 8012e7a:	b091      	sub	sp, #68	@ 0x44
 8012e7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012e80:	ec55 4b10 	vmov	r4, r5, d0
 8012e84:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012e86:	9107      	str	r1, [sp, #28]
 8012e88:	4681      	mov	r9, r0
 8012e8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e8e:	b97f      	cbnz	r7, 8012eb0 <_dtoa_r+0x40>
 8012e90:	2010      	movs	r0, #16
 8012e92:	f7ff f8b3 	bl	8011ffc <malloc>
 8012e96:	4602      	mov	r2, r0
 8012e98:	f8c9 001c 	str.w	r0, [r9, #28]
 8012e9c:	b920      	cbnz	r0, 8012ea8 <_dtoa_r+0x38>
 8012e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8013120 <_dtoa_r+0x2b0>)
 8012ea0:	21ef      	movs	r1, #239	@ 0xef
 8012ea2:	48a0      	ldr	r0, [pc, #640]	@ (8013124 <_dtoa_r+0x2b4>)
 8012ea4:	f001 fb24 	bl	80144f0 <__assert_func>
 8012ea8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012eac:	6007      	str	r7, [r0, #0]
 8012eae:	60c7      	str	r7, [r0, #12]
 8012eb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012eb4:	6819      	ldr	r1, [r3, #0]
 8012eb6:	b159      	cbz	r1, 8012ed0 <_dtoa_r+0x60>
 8012eb8:	685a      	ldr	r2, [r3, #4]
 8012eba:	604a      	str	r2, [r1, #4]
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	4093      	lsls	r3, r2
 8012ec0:	608b      	str	r3, [r1, #8]
 8012ec2:	4648      	mov	r0, r9
 8012ec4:	f000 fdb4 	bl	8013a30 <_Bfree>
 8012ec8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	601a      	str	r2, [r3, #0]
 8012ed0:	1e2b      	subs	r3, r5, #0
 8012ed2:	bfbb      	ittet	lt
 8012ed4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012ed8:	9303      	strlt	r3, [sp, #12]
 8012eda:	2300      	movge	r3, #0
 8012edc:	2201      	movlt	r2, #1
 8012ede:	bfac      	ite	ge
 8012ee0:	6033      	strge	r3, [r6, #0]
 8012ee2:	6032      	strlt	r2, [r6, #0]
 8012ee4:	4b90      	ldr	r3, [pc, #576]	@ (8013128 <_dtoa_r+0x2b8>)
 8012ee6:	9e03      	ldr	r6, [sp, #12]
 8012ee8:	43b3      	bics	r3, r6
 8012eea:	d110      	bne.n	8012f0e <_dtoa_r+0x9e>
 8012eec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012eee:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012ef2:	6013      	str	r3, [r2, #0]
 8012ef4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012ef8:	4323      	orrs	r3, r4
 8012efa:	f000 84de 	beq.w	80138ba <_dtoa_r+0xa4a>
 8012efe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f00:	4f8a      	ldr	r7, [pc, #552]	@ (801312c <_dtoa_r+0x2bc>)
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f000 84e0 	beq.w	80138c8 <_dtoa_r+0xa58>
 8012f08:	1cfb      	adds	r3, r7, #3
 8012f0a:	f000 bcdb 	b.w	80138c4 <_dtoa_r+0xa54>
 8012f0e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012f12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1a:	d10a      	bne.n	8012f32 <_dtoa_r+0xc2>
 8012f1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f1e:	2301      	movs	r3, #1
 8012f20:	6013      	str	r3, [r2, #0]
 8012f22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f24:	b113      	cbz	r3, 8012f2c <_dtoa_r+0xbc>
 8012f26:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012f28:	4b81      	ldr	r3, [pc, #516]	@ (8013130 <_dtoa_r+0x2c0>)
 8012f2a:	6013      	str	r3, [r2, #0]
 8012f2c:	4f81      	ldr	r7, [pc, #516]	@ (8013134 <_dtoa_r+0x2c4>)
 8012f2e:	f000 bccb 	b.w	80138c8 <_dtoa_r+0xa58>
 8012f32:	aa0e      	add	r2, sp, #56	@ 0x38
 8012f34:	a90f      	add	r1, sp, #60	@ 0x3c
 8012f36:	4648      	mov	r0, r9
 8012f38:	eeb0 0b48 	vmov.f64	d0, d8
 8012f3c:	f001 f862 	bl	8014004 <__d2b>
 8012f40:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f46:	9001      	str	r0, [sp, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d045      	beq.n	8012fd8 <_dtoa_r+0x168>
 8012f4c:	eeb0 7b48 	vmov.f64	d7, d8
 8012f50:	ee18 1a90 	vmov	r1, s17
 8012f54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012f58:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012f5c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012f60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012f64:	2500      	movs	r5, #0
 8012f66:	ee07 1a90 	vmov	s15, r1
 8012f6a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012f6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013108 <_dtoa_r+0x298>
 8012f72:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f76:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013110 <_dtoa_r+0x2a0>
 8012f7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012f7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013118 <_dtoa_r+0x2a8>
 8012f82:	ee07 3a90 	vmov	s15, r3
 8012f86:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012f8a:	eeb0 7b46 	vmov.f64	d7, d6
 8012f8e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012f92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012f96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9e:	ee16 8a90 	vmov	r8, s13
 8012fa2:	d508      	bpl.n	8012fb6 <_dtoa_r+0x146>
 8012fa4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012fa8:	eeb4 6b47 	vcmp.f64	d6, d7
 8012fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb0:	bf18      	it	ne
 8012fb2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012fb6:	f1b8 0f16 	cmp.w	r8, #22
 8012fba:	d82b      	bhi.n	8013014 <_dtoa_r+0x1a4>
 8012fbc:	495e      	ldr	r1, [pc, #376]	@ (8013138 <_dtoa_r+0x2c8>)
 8012fbe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012fc2:	ed91 7b00 	vldr	d7, [r1]
 8012fc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fce:	d501      	bpl.n	8012fd4 <_dtoa_r+0x164>
 8012fd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fd4:	2100      	movs	r1, #0
 8012fd6:	e01e      	b.n	8013016 <_dtoa_r+0x1a6>
 8012fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fda:	4413      	add	r3, r2
 8012fdc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012fe0:	2920      	cmp	r1, #32
 8012fe2:	bfc1      	itttt	gt
 8012fe4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012fe8:	408e      	lslgt	r6, r1
 8012fea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012fee:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012ff2:	bfd6      	itet	le
 8012ff4:	f1c1 0120 	rsble	r1, r1, #32
 8012ff8:	4331      	orrgt	r1, r6
 8012ffa:	fa04 f101 	lslle.w	r1, r4, r1
 8012ffe:	ee07 1a90 	vmov	s15, r1
 8013002:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013006:	3b01      	subs	r3, #1
 8013008:	ee17 1a90 	vmov	r1, s15
 801300c:	2501      	movs	r5, #1
 801300e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013012:	e7a8      	b.n	8012f66 <_dtoa_r+0xf6>
 8013014:	2101      	movs	r1, #1
 8013016:	1ad2      	subs	r2, r2, r3
 8013018:	1e53      	subs	r3, r2, #1
 801301a:	9306      	str	r3, [sp, #24]
 801301c:	bf45      	ittet	mi
 801301e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013022:	9305      	strmi	r3, [sp, #20]
 8013024:	2300      	movpl	r3, #0
 8013026:	2300      	movmi	r3, #0
 8013028:	bf4c      	ite	mi
 801302a:	9306      	strmi	r3, [sp, #24]
 801302c:	9305      	strpl	r3, [sp, #20]
 801302e:	f1b8 0f00 	cmp.w	r8, #0
 8013032:	910c      	str	r1, [sp, #48]	@ 0x30
 8013034:	db18      	blt.n	8013068 <_dtoa_r+0x1f8>
 8013036:	9b06      	ldr	r3, [sp, #24]
 8013038:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801303c:	4443      	add	r3, r8
 801303e:	9306      	str	r3, [sp, #24]
 8013040:	2300      	movs	r3, #0
 8013042:	9a07      	ldr	r2, [sp, #28]
 8013044:	2a09      	cmp	r2, #9
 8013046:	d849      	bhi.n	80130dc <_dtoa_r+0x26c>
 8013048:	2a05      	cmp	r2, #5
 801304a:	bfc4      	itt	gt
 801304c:	3a04      	subgt	r2, #4
 801304e:	9207      	strgt	r2, [sp, #28]
 8013050:	9a07      	ldr	r2, [sp, #28]
 8013052:	f1a2 0202 	sub.w	r2, r2, #2
 8013056:	bfcc      	ite	gt
 8013058:	2400      	movgt	r4, #0
 801305a:	2401      	movle	r4, #1
 801305c:	2a03      	cmp	r2, #3
 801305e:	d848      	bhi.n	80130f2 <_dtoa_r+0x282>
 8013060:	e8df f002 	tbb	[pc, r2]
 8013064:	3a2c2e0b 	.word	0x3a2c2e0b
 8013068:	9b05      	ldr	r3, [sp, #20]
 801306a:	2200      	movs	r2, #0
 801306c:	eba3 0308 	sub.w	r3, r3, r8
 8013070:	9305      	str	r3, [sp, #20]
 8013072:	920a      	str	r2, [sp, #40]	@ 0x28
 8013074:	f1c8 0300 	rsb	r3, r8, #0
 8013078:	e7e3      	b.n	8013042 <_dtoa_r+0x1d2>
 801307a:	2200      	movs	r2, #0
 801307c:	9208      	str	r2, [sp, #32]
 801307e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013080:	2a00      	cmp	r2, #0
 8013082:	dc39      	bgt.n	80130f8 <_dtoa_r+0x288>
 8013084:	f04f 0b01 	mov.w	fp, #1
 8013088:	46da      	mov	sl, fp
 801308a:	465a      	mov	r2, fp
 801308c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013090:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013094:	2100      	movs	r1, #0
 8013096:	2004      	movs	r0, #4
 8013098:	f100 0614 	add.w	r6, r0, #20
 801309c:	4296      	cmp	r6, r2
 801309e:	d930      	bls.n	8013102 <_dtoa_r+0x292>
 80130a0:	6079      	str	r1, [r7, #4]
 80130a2:	4648      	mov	r0, r9
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	f000 fc83 	bl	80139b0 <_Balloc>
 80130aa:	9b04      	ldr	r3, [sp, #16]
 80130ac:	4607      	mov	r7, r0
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d146      	bne.n	8013140 <_dtoa_r+0x2d0>
 80130b2:	4b22      	ldr	r3, [pc, #136]	@ (801313c <_dtoa_r+0x2cc>)
 80130b4:	4602      	mov	r2, r0
 80130b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80130ba:	e6f2      	b.n	8012ea2 <_dtoa_r+0x32>
 80130bc:	2201      	movs	r2, #1
 80130be:	e7dd      	b.n	801307c <_dtoa_r+0x20c>
 80130c0:	2200      	movs	r2, #0
 80130c2:	9208      	str	r2, [sp, #32]
 80130c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130c6:	eb08 0b02 	add.w	fp, r8, r2
 80130ca:	f10b 0a01 	add.w	sl, fp, #1
 80130ce:	4652      	mov	r2, sl
 80130d0:	2a01      	cmp	r2, #1
 80130d2:	bfb8      	it	lt
 80130d4:	2201      	movlt	r2, #1
 80130d6:	e7db      	b.n	8013090 <_dtoa_r+0x220>
 80130d8:	2201      	movs	r2, #1
 80130da:	e7f2      	b.n	80130c2 <_dtoa_r+0x252>
 80130dc:	2401      	movs	r4, #1
 80130de:	2200      	movs	r2, #0
 80130e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80130e4:	f04f 3bff 	mov.w	fp, #4294967295
 80130e8:	2100      	movs	r1, #0
 80130ea:	46da      	mov	sl, fp
 80130ec:	2212      	movs	r2, #18
 80130ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80130f0:	e7ce      	b.n	8013090 <_dtoa_r+0x220>
 80130f2:	2201      	movs	r2, #1
 80130f4:	9208      	str	r2, [sp, #32]
 80130f6:	e7f5      	b.n	80130e4 <_dtoa_r+0x274>
 80130f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80130fc:	46da      	mov	sl, fp
 80130fe:	465a      	mov	r2, fp
 8013100:	e7c6      	b.n	8013090 <_dtoa_r+0x220>
 8013102:	3101      	adds	r1, #1
 8013104:	0040      	lsls	r0, r0, #1
 8013106:	e7c7      	b.n	8013098 <_dtoa_r+0x228>
 8013108:	636f4361 	.word	0x636f4361
 801310c:	3fd287a7 	.word	0x3fd287a7
 8013110:	8b60c8b3 	.word	0x8b60c8b3
 8013114:	3fc68a28 	.word	0x3fc68a28
 8013118:	509f79fb 	.word	0x509f79fb
 801311c:	3fd34413 	.word	0x3fd34413
 8013120:	0801731d 	.word	0x0801731d
 8013124:	08017334 	.word	0x08017334
 8013128:	7ff00000 	.word	0x7ff00000
 801312c:	08017319 	.word	0x08017319
 8013130:	080172ed 	.word	0x080172ed
 8013134:	080172ec 	.word	0x080172ec
 8013138:	08017430 	.word	0x08017430
 801313c:	0801738c 	.word	0x0801738c
 8013140:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013144:	f1ba 0f0e 	cmp.w	sl, #14
 8013148:	6010      	str	r0, [r2, #0]
 801314a:	d86f      	bhi.n	801322c <_dtoa_r+0x3bc>
 801314c:	2c00      	cmp	r4, #0
 801314e:	d06d      	beq.n	801322c <_dtoa_r+0x3bc>
 8013150:	f1b8 0f00 	cmp.w	r8, #0
 8013154:	f340 80c2 	ble.w	80132dc <_dtoa_r+0x46c>
 8013158:	4aca      	ldr	r2, [pc, #808]	@ (8013484 <_dtoa_r+0x614>)
 801315a:	f008 010f 	and.w	r1, r8, #15
 801315e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013162:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013166:	ed92 7b00 	vldr	d7, [r2]
 801316a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801316e:	f000 80a9 	beq.w	80132c4 <_dtoa_r+0x454>
 8013172:	4ac5      	ldr	r2, [pc, #788]	@ (8013488 <_dtoa_r+0x618>)
 8013174:	ed92 6b08 	vldr	d6, [r2, #32]
 8013178:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801317c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013180:	f001 010f 	and.w	r1, r1, #15
 8013184:	2203      	movs	r2, #3
 8013186:	48c0      	ldr	r0, [pc, #768]	@ (8013488 <_dtoa_r+0x618>)
 8013188:	2900      	cmp	r1, #0
 801318a:	f040 809d 	bne.w	80132c8 <_dtoa_r+0x458>
 801318e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013192:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013196:	ed8d 7b02 	vstr	d7, [sp, #8]
 801319a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801319c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131a0:	2900      	cmp	r1, #0
 80131a2:	f000 80c1 	beq.w	8013328 <_dtoa_r+0x4b8>
 80131a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80131aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80131ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b2:	f140 80b9 	bpl.w	8013328 <_dtoa_r+0x4b8>
 80131b6:	f1ba 0f00 	cmp.w	sl, #0
 80131ba:	f000 80b5 	beq.w	8013328 <_dtoa_r+0x4b8>
 80131be:	f1bb 0f00 	cmp.w	fp, #0
 80131c2:	dd31      	ble.n	8013228 <_dtoa_r+0x3b8>
 80131c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80131c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80131d4:	9104      	str	r1, [sp, #16]
 80131d6:	3201      	adds	r2, #1
 80131d8:	465c      	mov	r4, fp
 80131da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80131de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80131e2:	ee07 2a90 	vmov	s15, r2
 80131e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80131ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80131ee:	ee15 2a90 	vmov	r2, s11
 80131f2:	ec51 0b15 	vmov	r0, r1, d5
 80131f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80131fa:	2c00      	cmp	r4, #0
 80131fc:	f040 8098 	bne.w	8013330 <_dtoa_r+0x4c0>
 8013200:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013204:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013208:	ec41 0b17 	vmov	d7, r0, r1
 801320c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013214:	f300 8261 	bgt.w	80136da <_dtoa_r+0x86a>
 8013218:	eeb1 7b47 	vneg.f64	d7, d7
 801321c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013224:	f100 80f5 	bmi.w	8013412 <_dtoa_r+0x5a2>
 8013228:	ed8d 8b02 	vstr	d8, [sp, #8]
 801322c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801322e:	2a00      	cmp	r2, #0
 8013230:	f2c0 812c 	blt.w	801348c <_dtoa_r+0x61c>
 8013234:	f1b8 0f0e 	cmp.w	r8, #14
 8013238:	f300 8128 	bgt.w	801348c <_dtoa_r+0x61c>
 801323c:	4b91      	ldr	r3, [pc, #580]	@ (8013484 <_dtoa_r+0x614>)
 801323e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013242:	ed93 6b00 	vldr	d6, [r3]
 8013246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013248:	2b00      	cmp	r3, #0
 801324a:	da03      	bge.n	8013254 <_dtoa_r+0x3e4>
 801324c:	f1ba 0f00 	cmp.w	sl, #0
 8013250:	f340 80d2 	ble.w	80133f8 <_dtoa_r+0x588>
 8013254:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013258:	ed9d 7b02 	vldr	d7, [sp, #8]
 801325c:	463e      	mov	r6, r7
 801325e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013262:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013266:	ee15 3a10 	vmov	r3, s10
 801326a:	3330      	adds	r3, #48	@ 0x30
 801326c:	f806 3b01 	strb.w	r3, [r6], #1
 8013270:	1bf3      	subs	r3, r6, r7
 8013272:	459a      	cmp	sl, r3
 8013274:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013278:	eea3 7b46 	vfms.f64	d7, d3, d6
 801327c:	f040 80f8 	bne.w	8013470 <_dtoa_r+0x600>
 8013280:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013284:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328c:	f300 80dd 	bgt.w	801344a <_dtoa_r+0x5da>
 8013290:	eeb4 7b46 	vcmp.f64	d7, d6
 8013294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013298:	d104      	bne.n	80132a4 <_dtoa_r+0x434>
 801329a:	ee15 3a10 	vmov	r3, s10
 801329e:	07db      	lsls	r3, r3, #31
 80132a0:	f100 80d3 	bmi.w	801344a <_dtoa_r+0x5da>
 80132a4:	9901      	ldr	r1, [sp, #4]
 80132a6:	4648      	mov	r0, r9
 80132a8:	f000 fbc2 	bl	8013a30 <_Bfree>
 80132ac:	2300      	movs	r3, #0
 80132ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80132b0:	7033      	strb	r3, [r6, #0]
 80132b2:	f108 0301 	add.w	r3, r8, #1
 80132b6:	6013      	str	r3, [r2, #0]
 80132b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f000 8304 	beq.w	80138c8 <_dtoa_r+0xa58>
 80132c0:	601e      	str	r6, [r3, #0]
 80132c2:	e301      	b.n	80138c8 <_dtoa_r+0xa58>
 80132c4:	2202      	movs	r2, #2
 80132c6:	e75e      	b.n	8013186 <_dtoa_r+0x316>
 80132c8:	07cc      	lsls	r4, r1, #31
 80132ca:	d504      	bpl.n	80132d6 <_dtoa_r+0x466>
 80132cc:	ed90 6b00 	vldr	d6, [r0]
 80132d0:	3201      	adds	r2, #1
 80132d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132d6:	1049      	asrs	r1, r1, #1
 80132d8:	3008      	adds	r0, #8
 80132da:	e755      	b.n	8013188 <_dtoa_r+0x318>
 80132dc:	d022      	beq.n	8013324 <_dtoa_r+0x4b4>
 80132de:	f1c8 0100 	rsb	r1, r8, #0
 80132e2:	4a68      	ldr	r2, [pc, #416]	@ (8013484 <_dtoa_r+0x614>)
 80132e4:	f001 000f 	and.w	r0, r1, #15
 80132e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80132ec:	ed92 7b00 	vldr	d7, [r2]
 80132f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80132f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132f8:	4863      	ldr	r0, [pc, #396]	@ (8013488 <_dtoa_r+0x618>)
 80132fa:	1109      	asrs	r1, r1, #4
 80132fc:	2400      	movs	r4, #0
 80132fe:	2202      	movs	r2, #2
 8013300:	b929      	cbnz	r1, 801330e <_dtoa_r+0x49e>
 8013302:	2c00      	cmp	r4, #0
 8013304:	f43f af49 	beq.w	801319a <_dtoa_r+0x32a>
 8013308:	ed8d 7b02 	vstr	d7, [sp, #8]
 801330c:	e745      	b.n	801319a <_dtoa_r+0x32a>
 801330e:	07ce      	lsls	r6, r1, #31
 8013310:	d505      	bpl.n	801331e <_dtoa_r+0x4ae>
 8013312:	ed90 6b00 	vldr	d6, [r0]
 8013316:	3201      	adds	r2, #1
 8013318:	2401      	movs	r4, #1
 801331a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801331e:	1049      	asrs	r1, r1, #1
 8013320:	3008      	adds	r0, #8
 8013322:	e7ed      	b.n	8013300 <_dtoa_r+0x490>
 8013324:	2202      	movs	r2, #2
 8013326:	e738      	b.n	801319a <_dtoa_r+0x32a>
 8013328:	f8cd 8010 	str.w	r8, [sp, #16]
 801332c:	4654      	mov	r4, sl
 801332e:	e754      	b.n	80131da <_dtoa_r+0x36a>
 8013330:	4a54      	ldr	r2, [pc, #336]	@ (8013484 <_dtoa_r+0x614>)
 8013332:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013336:	ed12 4b02 	vldr	d4, [r2, #-8]
 801333a:	9a08      	ldr	r2, [sp, #32]
 801333c:	ec41 0b17 	vmov	d7, r0, r1
 8013340:	443c      	add	r4, r7
 8013342:	b34a      	cbz	r2, 8013398 <_dtoa_r+0x528>
 8013344:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013348:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801334c:	463e      	mov	r6, r7
 801334e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013352:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013356:	ee35 7b47 	vsub.f64	d7, d5, d7
 801335a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801335e:	ee14 2a90 	vmov	r2, s9
 8013362:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013366:	3230      	adds	r2, #48	@ 0x30
 8013368:	ee36 6b45 	vsub.f64	d6, d6, d5
 801336c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013374:	f806 2b01 	strb.w	r2, [r6], #1
 8013378:	d438      	bmi.n	80133ec <_dtoa_r+0x57c>
 801337a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801337e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013386:	d462      	bmi.n	801344e <_dtoa_r+0x5de>
 8013388:	42a6      	cmp	r6, r4
 801338a:	f43f af4d 	beq.w	8013228 <_dtoa_r+0x3b8>
 801338e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013392:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013396:	e7e0      	b.n	801335a <_dtoa_r+0x4ea>
 8013398:	4621      	mov	r1, r4
 801339a:	463e      	mov	r6, r7
 801339c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80133a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80133a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80133a8:	ee14 2a90 	vmov	r2, s9
 80133ac:	3230      	adds	r2, #48	@ 0x30
 80133ae:	f806 2b01 	strb.w	r2, [r6], #1
 80133b2:	42a6      	cmp	r6, r4
 80133b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80133b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80133bc:	d119      	bne.n	80133f2 <_dtoa_r+0x582>
 80133be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80133c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80133c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80133ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ce:	dc3e      	bgt.n	801344e <_dtoa_r+0x5de>
 80133d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80133d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80133d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133dc:	f57f af24 	bpl.w	8013228 <_dtoa_r+0x3b8>
 80133e0:	460e      	mov	r6, r1
 80133e2:	3901      	subs	r1, #1
 80133e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133e8:	2b30      	cmp	r3, #48	@ 0x30
 80133ea:	d0f9      	beq.n	80133e0 <_dtoa_r+0x570>
 80133ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80133f0:	e758      	b.n	80132a4 <_dtoa_r+0x434>
 80133f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80133f6:	e7d5      	b.n	80133a4 <_dtoa_r+0x534>
 80133f8:	d10b      	bne.n	8013412 <_dtoa_r+0x5a2>
 80133fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80133fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013402:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801340e:	f2c0 8161 	blt.w	80136d4 <_dtoa_r+0x864>
 8013412:	2400      	movs	r4, #0
 8013414:	4625      	mov	r5, r4
 8013416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013418:	43db      	mvns	r3, r3
 801341a:	9304      	str	r3, [sp, #16]
 801341c:	463e      	mov	r6, r7
 801341e:	f04f 0800 	mov.w	r8, #0
 8013422:	4621      	mov	r1, r4
 8013424:	4648      	mov	r0, r9
 8013426:	f000 fb03 	bl	8013a30 <_Bfree>
 801342a:	2d00      	cmp	r5, #0
 801342c:	d0de      	beq.n	80133ec <_dtoa_r+0x57c>
 801342e:	f1b8 0f00 	cmp.w	r8, #0
 8013432:	d005      	beq.n	8013440 <_dtoa_r+0x5d0>
 8013434:	45a8      	cmp	r8, r5
 8013436:	d003      	beq.n	8013440 <_dtoa_r+0x5d0>
 8013438:	4641      	mov	r1, r8
 801343a:	4648      	mov	r0, r9
 801343c:	f000 faf8 	bl	8013a30 <_Bfree>
 8013440:	4629      	mov	r1, r5
 8013442:	4648      	mov	r0, r9
 8013444:	f000 faf4 	bl	8013a30 <_Bfree>
 8013448:	e7d0      	b.n	80133ec <_dtoa_r+0x57c>
 801344a:	f8cd 8010 	str.w	r8, [sp, #16]
 801344e:	4633      	mov	r3, r6
 8013450:	461e      	mov	r6, r3
 8013452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013456:	2a39      	cmp	r2, #57	@ 0x39
 8013458:	d106      	bne.n	8013468 <_dtoa_r+0x5f8>
 801345a:	429f      	cmp	r7, r3
 801345c:	d1f8      	bne.n	8013450 <_dtoa_r+0x5e0>
 801345e:	9a04      	ldr	r2, [sp, #16]
 8013460:	3201      	adds	r2, #1
 8013462:	9204      	str	r2, [sp, #16]
 8013464:	2230      	movs	r2, #48	@ 0x30
 8013466:	703a      	strb	r2, [r7, #0]
 8013468:	781a      	ldrb	r2, [r3, #0]
 801346a:	3201      	adds	r2, #1
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	e7bd      	b.n	80133ec <_dtoa_r+0x57c>
 8013470:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013474:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347c:	f47f aeef 	bne.w	801325e <_dtoa_r+0x3ee>
 8013480:	e710      	b.n	80132a4 <_dtoa_r+0x434>
 8013482:	bf00      	nop
 8013484:	08017430 	.word	0x08017430
 8013488:	08017408 	.word	0x08017408
 801348c:	9908      	ldr	r1, [sp, #32]
 801348e:	2900      	cmp	r1, #0
 8013490:	f000 80e3 	beq.w	801365a <_dtoa_r+0x7ea>
 8013494:	9907      	ldr	r1, [sp, #28]
 8013496:	2901      	cmp	r1, #1
 8013498:	f300 80c8 	bgt.w	801362c <_dtoa_r+0x7bc>
 801349c:	2d00      	cmp	r5, #0
 801349e:	f000 80c1 	beq.w	8013624 <_dtoa_r+0x7b4>
 80134a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80134a6:	9e05      	ldr	r6, [sp, #20]
 80134a8:	461c      	mov	r4, r3
 80134aa:	9304      	str	r3, [sp, #16]
 80134ac:	9b05      	ldr	r3, [sp, #20]
 80134ae:	4413      	add	r3, r2
 80134b0:	9305      	str	r3, [sp, #20]
 80134b2:	9b06      	ldr	r3, [sp, #24]
 80134b4:	2101      	movs	r1, #1
 80134b6:	4413      	add	r3, r2
 80134b8:	4648      	mov	r0, r9
 80134ba:	9306      	str	r3, [sp, #24]
 80134bc:	f000 fb6c 	bl	8013b98 <__i2b>
 80134c0:	9b04      	ldr	r3, [sp, #16]
 80134c2:	4605      	mov	r5, r0
 80134c4:	b166      	cbz	r6, 80134e0 <_dtoa_r+0x670>
 80134c6:	9a06      	ldr	r2, [sp, #24]
 80134c8:	2a00      	cmp	r2, #0
 80134ca:	dd09      	ble.n	80134e0 <_dtoa_r+0x670>
 80134cc:	42b2      	cmp	r2, r6
 80134ce:	9905      	ldr	r1, [sp, #20]
 80134d0:	bfa8      	it	ge
 80134d2:	4632      	movge	r2, r6
 80134d4:	1a89      	subs	r1, r1, r2
 80134d6:	9105      	str	r1, [sp, #20]
 80134d8:	9906      	ldr	r1, [sp, #24]
 80134da:	1ab6      	subs	r6, r6, r2
 80134dc:	1a8a      	subs	r2, r1, r2
 80134de:	9206      	str	r2, [sp, #24]
 80134e0:	b1fb      	cbz	r3, 8013522 <_dtoa_r+0x6b2>
 80134e2:	9a08      	ldr	r2, [sp, #32]
 80134e4:	2a00      	cmp	r2, #0
 80134e6:	f000 80bc 	beq.w	8013662 <_dtoa_r+0x7f2>
 80134ea:	b19c      	cbz	r4, 8013514 <_dtoa_r+0x6a4>
 80134ec:	4629      	mov	r1, r5
 80134ee:	4622      	mov	r2, r4
 80134f0:	4648      	mov	r0, r9
 80134f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134f4:	f000 fc10 	bl	8013d18 <__pow5mult>
 80134f8:	9a01      	ldr	r2, [sp, #4]
 80134fa:	4601      	mov	r1, r0
 80134fc:	4605      	mov	r5, r0
 80134fe:	4648      	mov	r0, r9
 8013500:	f000 fb60 	bl	8013bc4 <__multiply>
 8013504:	9901      	ldr	r1, [sp, #4]
 8013506:	9004      	str	r0, [sp, #16]
 8013508:	4648      	mov	r0, r9
 801350a:	f000 fa91 	bl	8013a30 <_Bfree>
 801350e:	9a04      	ldr	r2, [sp, #16]
 8013510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013512:	9201      	str	r2, [sp, #4]
 8013514:	1b1a      	subs	r2, r3, r4
 8013516:	d004      	beq.n	8013522 <_dtoa_r+0x6b2>
 8013518:	9901      	ldr	r1, [sp, #4]
 801351a:	4648      	mov	r0, r9
 801351c:	f000 fbfc 	bl	8013d18 <__pow5mult>
 8013520:	9001      	str	r0, [sp, #4]
 8013522:	2101      	movs	r1, #1
 8013524:	4648      	mov	r0, r9
 8013526:	f000 fb37 	bl	8013b98 <__i2b>
 801352a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801352c:	4604      	mov	r4, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	f000 81d0 	beq.w	80138d4 <_dtoa_r+0xa64>
 8013534:	461a      	mov	r2, r3
 8013536:	4601      	mov	r1, r0
 8013538:	4648      	mov	r0, r9
 801353a:	f000 fbed 	bl	8013d18 <__pow5mult>
 801353e:	9b07      	ldr	r3, [sp, #28]
 8013540:	2b01      	cmp	r3, #1
 8013542:	4604      	mov	r4, r0
 8013544:	f300 8095 	bgt.w	8013672 <_dtoa_r+0x802>
 8013548:	9b02      	ldr	r3, [sp, #8]
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 808b 	bne.w	8013666 <_dtoa_r+0x7f6>
 8013550:	9b03      	ldr	r3, [sp, #12]
 8013552:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013556:	2a00      	cmp	r2, #0
 8013558:	f040 8087 	bne.w	801366a <_dtoa_r+0x7fa>
 801355c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013560:	0d12      	lsrs	r2, r2, #20
 8013562:	0512      	lsls	r2, r2, #20
 8013564:	2a00      	cmp	r2, #0
 8013566:	f000 8082 	beq.w	801366e <_dtoa_r+0x7fe>
 801356a:	9b05      	ldr	r3, [sp, #20]
 801356c:	3301      	adds	r3, #1
 801356e:	9305      	str	r3, [sp, #20]
 8013570:	9b06      	ldr	r3, [sp, #24]
 8013572:	3301      	adds	r3, #1
 8013574:	9306      	str	r3, [sp, #24]
 8013576:	2301      	movs	r3, #1
 8013578:	930b      	str	r3, [sp, #44]	@ 0x2c
 801357a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 81af 	beq.w	80138e0 <_dtoa_r+0xa70>
 8013582:	6922      	ldr	r2, [r4, #16]
 8013584:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013588:	6910      	ldr	r0, [r2, #16]
 801358a:	f000 fab9 	bl	8013b00 <__hi0bits>
 801358e:	f1c0 0020 	rsb	r0, r0, #32
 8013592:	9b06      	ldr	r3, [sp, #24]
 8013594:	4418      	add	r0, r3
 8013596:	f010 001f 	ands.w	r0, r0, #31
 801359a:	d076      	beq.n	801368a <_dtoa_r+0x81a>
 801359c:	f1c0 0220 	rsb	r2, r0, #32
 80135a0:	2a04      	cmp	r2, #4
 80135a2:	dd69      	ble.n	8013678 <_dtoa_r+0x808>
 80135a4:	9b05      	ldr	r3, [sp, #20]
 80135a6:	f1c0 001c 	rsb	r0, r0, #28
 80135aa:	4403      	add	r3, r0
 80135ac:	9305      	str	r3, [sp, #20]
 80135ae:	9b06      	ldr	r3, [sp, #24]
 80135b0:	4406      	add	r6, r0
 80135b2:	4403      	add	r3, r0
 80135b4:	9306      	str	r3, [sp, #24]
 80135b6:	9b05      	ldr	r3, [sp, #20]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	dd05      	ble.n	80135c8 <_dtoa_r+0x758>
 80135bc:	9901      	ldr	r1, [sp, #4]
 80135be:	461a      	mov	r2, r3
 80135c0:	4648      	mov	r0, r9
 80135c2:	f000 fc03 	bl	8013dcc <__lshift>
 80135c6:	9001      	str	r0, [sp, #4]
 80135c8:	9b06      	ldr	r3, [sp, #24]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	dd05      	ble.n	80135da <_dtoa_r+0x76a>
 80135ce:	4621      	mov	r1, r4
 80135d0:	461a      	mov	r2, r3
 80135d2:	4648      	mov	r0, r9
 80135d4:	f000 fbfa 	bl	8013dcc <__lshift>
 80135d8:	4604      	mov	r4, r0
 80135da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d056      	beq.n	801368e <_dtoa_r+0x81e>
 80135e0:	9801      	ldr	r0, [sp, #4]
 80135e2:	4621      	mov	r1, r4
 80135e4:	f000 fc5e 	bl	8013ea4 <__mcmp>
 80135e8:	2800      	cmp	r0, #0
 80135ea:	da50      	bge.n	801368e <_dtoa_r+0x81e>
 80135ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80135f0:	9304      	str	r3, [sp, #16]
 80135f2:	9901      	ldr	r1, [sp, #4]
 80135f4:	2300      	movs	r3, #0
 80135f6:	220a      	movs	r2, #10
 80135f8:	4648      	mov	r0, r9
 80135fa:	f000 fa3b 	bl	8013a74 <__multadd>
 80135fe:	9b08      	ldr	r3, [sp, #32]
 8013600:	9001      	str	r0, [sp, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	f000 816e 	beq.w	80138e4 <_dtoa_r+0xa74>
 8013608:	4629      	mov	r1, r5
 801360a:	2300      	movs	r3, #0
 801360c:	220a      	movs	r2, #10
 801360e:	4648      	mov	r0, r9
 8013610:	f000 fa30 	bl	8013a74 <__multadd>
 8013614:	f1bb 0f00 	cmp.w	fp, #0
 8013618:	4605      	mov	r5, r0
 801361a:	dc64      	bgt.n	80136e6 <_dtoa_r+0x876>
 801361c:	9b07      	ldr	r3, [sp, #28]
 801361e:	2b02      	cmp	r3, #2
 8013620:	dc3e      	bgt.n	80136a0 <_dtoa_r+0x830>
 8013622:	e060      	b.n	80136e6 <_dtoa_r+0x876>
 8013624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801362a:	e73c      	b.n	80134a6 <_dtoa_r+0x636>
 801362c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013630:	42a3      	cmp	r3, r4
 8013632:	bfbf      	itttt	lt
 8013634:	1ae2      	sublt	r2, r4, r3
 8013636:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013638:	189b      	addlt	r3, r3, r2
 801363a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801363c:	bfae      	itee	ge
 801363e:	1b1c      	subge	r4, r3, r4
 8013640:	4623      	movlt	r3, r4
 8013642:	2400      	movlt	r4, #0
 8013644:	f1ba 0f00 	cmp.w	sl, #0
 8013648:	bfb5      	itete	lt
 801364a:	9a05      	ldrlt	r2, [sp, #20]
 801364c:	9e05      	ldrge	r6, [sp, #20]
 801364e:	eba2 060a 	sublt.w	r6, r2, sl
 8013652:	4652      	movge	r2, sl
 8013654:	bfb8      	it	lt
 8013656:	2200      	movlt	r2, #0
 8013658:	e727      	b.n	80134aa <_dtoa_r+0x63a>
 801365a:	9e05      	ldr	r6, [sp, #20]
 801365c:	9d08      	ldr	r5, [sp, #32]
 801365e:	461c      	mov	r4, r3
 8013660:	e730      	b.n	80134c4 <_dtoa_r+0x654>
 8013662:	461a      	mov	r2, r3
 8013664:	e758      	b.n	8013518 <_dtoa_r+0x6a8>
 8013666:	2300      	movs	r3, #0
 8013668:	e786      	b.n	8013578 <_dtoa_r+0x708>
 801366a:	9b02      	ldr	r3, [sp, #8]
 801366c:	e784      	b.n	8013578 <_dtoa_r+0x708>
 801366e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013670:	e783      	b.n	801357a <_dtoa_r+0x70a>
 8013672:	2300      	movs	r3, #0
 8013674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013676:	e784      	b.n	8013582 <_dtoa_r+0x712>
 8013678:	d09d      	beq.n	80135b6 <_dtoa_r+0x746>
 801367a:	9b05      	ldr	r3, [sp, #20]
 801367c:	321c      	adds	r2, #28
 801367e:	4413      	add	r3, r2
 8013680:	9305      	str	r3, [sp, #20]
 8013682:	9b06      	ldr	r3, [sp, #24]
 8013684:	4416      	add	r6, r2
 8013686:	4413      	add	r3, r2
 8013688:	e794      	b.n	80135b4 <_dtoa_r+0x744>
 801368a:	4602      	mov	r2, r0
 801368c:	e7f5      	b.n	801367a <_dtoa_r+0x80a>
 801368e:	f1ba 0f00 	cmp.w	sl, #0
 8013692:	f8cd 8010 	str.w	r8, [sp, #16]
 8013696:	46d3      	mov	fp, sl
 8013698:	dc21      	bgt.n	80136de <_dtoa_r+0x86e>
 801369a:	9b07      	ldr	r3, [sp, #28]
 801369c:	2b02      	cmp	r3, #2
 801369e:	dd1e      	ble.n	80136de <_dtoa_r+0x86e>
 80136a0:	f1bb 0f00 	cmp.w	fp, #0
 80136a4:	f47f aeb7 	bne.w	8013416 <_dtoa_r+0x5a6>
 80136a8:	4621      	mov	r1, r4
 80136aa:	465b      	mov	r3, fp
 80136ac:	2205      	movs	r2, #5
 80136ae:	4648      	mov	r0, r9
 80136b0:	f000 f9e0 	bl	8013a74 <__multadd>
 80136b4:	4601      	mov	r1, r0
 80136b6:	4604      	mov	r4, r0
 80136b8:	9801      	ldr	r0, [sp, #4]
 80136ba:	f000 fbf3 	bl	8013ea4 <__mcmp>
 80136be:	2800      	cmp	r0, #0
 80136c0:	f77f aea9 	ble.w	8013416 <_dtoa_r+0x5a6>
 80136c4:	463e      	mov	r6, r7
 80136c6:	2331      	movs	r3, #49	@ 0x31
 80136c8:	f806 3b01 	strb.w	r3, [r6], #1
 80136cc:	9b04      	ldr	r3, [sp, #16]
 80136ce:	3301      	adds	r3, #1
 80136d0:	9304      	str	r3, [sp, #16]
 80136d2:	e6a4      	b.n	801341e <_dtoa_r+0x5ae>
 80136d4:	f8cd 8010 	str.w	r8, [sp, #16]
 80136d8:	4654      	mov	r4, sl
 80136da:	4625      	mov	r5, r4
 80136dc:	e7f2      	b.n	80136c4 <_dtoa_r+0x854>
 80136de:	9b08      	ldr	r3, [sp, #32]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f000 8103 	beq.w	80138ec <_dtoa_r+0xa7c>
 80136e6:	2e00      	cmp	r6, #0
 80136e8:	dd05      	ble.n	80136f6 <_dtoa_r+0x886>
 80136ea:	4629      	mov	r1, r5
 80136ec:	4632      	mov	r2, r6
 80136ee:	4648      	mov	r0, r9
 80136f0:	f000 fb6c 	bl	8013dcc <__lshift>
 80136f4:	4605      	mov	r5, r0
 80136f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d058      	beq.n	80137ae <_dtoa_r+0x93e>
 80136fc:	6869      	ldr	r1, [r5, #4]
 80136fe:	4648      	mov	r0, r9
 8013700:	f000 f956 	bl	80139b0 <_Balloc>
 8013704:	4606      	mov	r6, r0
 8013706:	b928      	cbnz	r0, 8013714 <_dtoa_r+0x8a4>
 8013708:	4b82      	ldr	r3, [pc, #520]	@ (8013914 <_dtoa_r+0xaa4>)
 801370a:	4602      	mov	r2, r0
 801370c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013710:	f7ff bbc7 	b.w	8012ea2 <_dtoa_r+0x32>
 8013714:	692a      	ldr	r2, [r5, #16]
 8013716:	3202      	adds	r2, #2
 8013718:	0092      	lsls	r2, r2, #2
 801371a:	f105 010c 	add.w	r1, r5, #12
 801371e:	300c      	adds	r0, #12
 8013720:	f7ff fb0f 	bl	8012d42 <memcpy>
 8013724:	2201      	movs	r2, #1
 8013726:	4631      	mov	r1, r6
 8013728:	4648      	mov	r0, r9
 801372a:	f000 fb4f 	bl	8013dcc <__lshift>
 801372e:	1c7b      	adds	r3, r7, #1
 8013730:	9305      	str	r3, [sp, #20]
 8013732:	eb07 030b 	add.w	r3, r7, fp
 8013736:	9309      	str	r3, [sp, #36]	@ 0x24
 8013738:	9b02      	ldr	r3, [sp, #8]
 801373a:	f003 0301 	and.w	r3, r3, #1
 801373e:	46a8      	mov	r8, r5
 8013740:	9308      	str	r3, [sp, #32]
 8013742:	4605      	mov	r5, r0
 8013744:	9b05      	ldr	r3, [sp, #20]
 8013746:	9801      	ldr	r0, [sp, #4]
 8013748:	4621      	mov	r1, r4
 801374a:	f103 3bff 	add.w	fp, r3, #4294967295
 801374e:	f7ff fb06 	bl	8012d5e <quorem>
 8013752:	4641      	mov	r1, r8
 8013754:	9002      	str	r0, [sp, #8]
 8013756:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801375a:	9801      	ldr	r0, [sp, #4]
 801375c:	f000 fba2 	bl	8013ea4 <__mcmp>
 8013760:	462a      	mov	r2, r5
 8013762:	9006      	str	r0, [sp, #24]
 8013764:	4621      	mov	r1, r4
 8013766:	4648      	mov	r0, r9
 8013768:	f000 fbb8 	bl	8013edc <__mdiff>
 801376c:	68c2      	ldr	r2, [r0, #12]
 801376e:	4606      	mov	r6, r0
 8013770:	b9fa      	cbnz	r2, 80137b2 <_dtoa_r+0x942>
 8013772:	4601      	mov	r1, r0
 8013774:	9801      	ldr	r0, [sp, #4]
 8013776:	f000 fb95 	bl	8013ea4 <__mcmp>
 801377a:	4602      	mov	r2, r0
 801377c:	4631      	mov	r1, r6
 801377e:	4648      	mov	r0, r9
 8013780:	920a      	str	r2, [sp, #40]	@ 0x28
 8013782:	f000 f955 	bl	8013a30 <_Bfree>
 8013786:	9b07      	ldr	r3, [sp, #28]
 8013788:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801378a:	9e05      	ldr	r6, [sp, #20]
 801378c:	ea43 0102 	orr.w	r1, r3, r2
 8013790:	9b08      	ldr	r3, [sp, #32]
 8013792:	4319      	orrs	r1, r3
 8013794:	d10f      	bne.n	80137b6 <_dtoa_r+0x946>
 8013796:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801379a:	d028      	beq.n	80137ee <_dtoa_r+0x97e>
 801379c:	9b06      	ldr	r3, [sp, #24]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	dd02      	ble.n	80137a8 <_dtoa_r+0x938>
 80137a2:	9b02      	ldr	r3, [sp, #8]
 80137a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80137a8:	f88b a000 	strb.w	sl, [fp]
 80137ac:	e639      	b.n	8013422 <_dtoa_r+0x5b2>
 80137ae:	4628      	mov	r0, r5
 80137b0:	e7bd      	b.n	801372e <_dtoa_r+0x8be>
 80137b2:	2201      	movs	r2, #1
 80137b4:	e7e2      	b.n	801377c <_dtoa_r+0x90c>
 80137b6:	9b06      	ldr	r3, [sp, #24]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	db04      	blt.n	80137c6 <_dtoa_r+0x956>
 80137bc:	9907      	ldr	r1, [sp, #28]
 80137be:	430b      	orrs	r3, r1
 80137c0:	9908      	ldr	r1, [sp, #32]
 80137c2:	430b      	orrs	r3, r1
 80137c4:	d120      	bne.n	8013808 <_dtoa_r+0x998>
 80137c6:	2a00      	cmp	r2, #0
 80137c8:	ddee      	ble.n	80137a8 <_dtoa_r+0x938>
 80137ca:	9901      	ldr	r1, [sp, #4]
 80137cc:	2201      	movs	r2, #1
 80137ce:	4648      	mov	r0, r9
 80137d0:	f000 fafc 	bl	8013dcc <__lshift>
 80137d4:	4621      	mov	r1, r4
 80137d6:	9001      	str	r0, [sp, #4]
 80137d8:	f000 fb64 	bl	8013ea4 <__mcmp>
 80137dc:	2800      	cmp	r0, #0
 80137de:	dc03      	bgt.n	80137e8 <_dtoa_r+0x978>
 80137e0:	d1e2      	bne.n	80137a8 <_dtoa_r+0x938>
 80137e2:	f01a 0f01 	tst.w	sl, #1
 80137e6:	d0df      	beq.n	80137a8 <_dtoa_r+0x938>
 80137e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80137ec:	d1d9      	bne.n	80137a2 <_dtoa_r+0x932>
 80137ee:	2339      	movs	r3, #57	@ 0x39
 80137f0:	f88b 3000 	strb.w	r3, [fp]
 80137f4:	4633      	mov	r3, r6
 80137f6:	461e      	mov	r6, r3
 80137f8:	3b01      	subs	r3, #1
 80137fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80137fe:	2a39      	cmp	r2, #57	@ 0x39
 8013800:	d053      	beq.n	80138aa <_dtoa_r+0xa3a>
 8013802:	3201      	adds	r2, #1
 8013804:	701a      	strb	r2, [r3, #0]
 8013806:	e60c      	b.n	8013422 <_dtoa_r+0x5b2>
 8013808:	2a00      	cmp	r2, #0
 801380a:	dd07      	ble.n	801381c <_dtoa_r+0x9ac>
 801380c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013810:	d0ed      	beq.n	80137ee <_dtoa_r+0x97e>
 8013812:	f10a 0301 	add.w	r3, sl, #1
 8013816:	f88b 3000 	strb.w	r3, [fp]
 801381a:	e602      	b.n	8013422 <_dtoa_r+0x5b2>
 801381c:	9b05      	ldr	r3, [sp, #20]
 801381e:	9a05      	ldr	r2, [sp, #20]
 8013820:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013826:	4293      	cmp	r3, r2
 8013828:	d029      	beq.n	801387e <_dtoa_r+0xa0e>
 801382a:	9901      	ldr	r1, [sp, #4]
 801382c:	2300      	movs	r3, #0
 801382e:	220a      	movs	r2, #10
 8013830:	4648      	mov	r0, r9
 8013832:	f000 f91f 	bl	8013a74 <__multadd>
 8013836:	45a8      	cmp	r8, r5
 8013838:	9001      	str	r0, [sp, #4]
 801383a:	f04f 0300 	mov.w	r3, #0
 801383e:	f04f 020a 	mov.w	r2, #10
 8013842:	4641      	mov	r1, r8
 8013844:	4648      	mov	r0, r9
 8013846:	d107      	bne.n	8013858 <_dtoa_r+0x9e8>
 8013848:	f000 f914 	bl	8013a74 <__multadd>
 801384c:	4680      	mov	r8, r0
 801384e:	4605      	mov	r5, r0
 8013850:	9b05      	ldr	r3, [sp, #20]
 8013852:	3301      	adds	r3, #1
 8013854:	9305      	str	r3, [sp, #20]
 8013856:	e775      	b.n	8013744 <_dtoa_r+0x8d4>
 8013858:	f000 f90c 	bl	8013a74 <__multadd>
 801385c:	4629      	mov	r1, r5
 801385e:	4680      	mov	r8, r0
 8013860:	2300      	movs	r3, #0
 8013862:	220a      	movs	r2, #10
 8013864:	4648      	mov	r0, r9
 8013866:	f000 f905 	bl	8013a74 <__multadd>
 801386a:	4605      	mov	r5, r0
 801386c:	e7f0      	b.n	8013850 <_dtoa_r+0x9e0>
 801386e:	f1bb 0f00 	cmp.w	fp, #0
 8013872:	bfcc      	ite	gt
 8013874:	465e      	movgt	r6, fp
 8013876:	2601      	movle	r6, #1
 8013878:	443e      	add	r6, r7
 801387a:	f04f 0800 	mov.w	r8, #0
 801387e:	9901      	ldr	r1, [sp, #4]
 8013880:	2201      	movs	r2, #1
 8013882:	4648      	mov	r0, r9
 8013884:	f000 faa2 	bl	8013dcc <__lshift>
 8013888:	4621      	mov	r1, r4
 801388a:	9001      	str	r0, [sp, #4]
 801388c:	f000 fb0a 	bl	8013ea4 <__mcmp>
 8013890:	2800      	cmp	r0, #0
 8013892:	dcaf      	bgt.n	80137f4 <_dtoa_r+0x984>
 8013894:	d102      	bne.n	801389c <_dtoa_r+0xa2c>
 8013896:	f01a 0f01 	tst.w	sl, #1
 801389a:	d1ab      	bne.n	80137f4 <_dtoa_r+0x984>
 801389c:	4633      	mov	r3, r6
 801389e:	461e      	mov	r6, r3
 80138a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138a4:	2a30      	cmp	r2, #48	@ 0x30
 80138a6:	d0fa      	beq.n	801389e <_dtoa_r+0xa2e>
 80138a8:	e5bb      	b.n	8013422 <_dtoa_r+0x5b2>
 80138aa:	429f      	cmp	r7, r3
 80138ac:	d1a3      	bne.n	80137f6 <_dtoa_r+0x986>
 80138ae:	9b04      	ldr	r3, [sp, #16]
 80138b0:	3301      	adds	r3, #1
 80138b2:	9304      	str	r3, [sp, #16]
 80138b4:	2331      	movs	r3, #49	@ 0x31
 80138b6:	703b      	strb	r3, [r7, #0]
 80138b8:	e5b3      	b.n	8013422 <_dtoa_r+0x5b2>
 80138ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80138bc:	4f16      	ldr	r7, [pc, #88]	@ (8013918 <_dtoa_r+0xaa8>)
 80138be:	b11b      	cbz	r3, 80138c8 <_dtoa_r+0xa58>
 80138c0:	f107 0308 	add.w	r3, r7, #8
 80138c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80138c6:	6013      	str	r3, [r2, #0]
 80138c8:	4638      	mov	r0, r7
 80138ca:	b011      	add	sp, #68	@ 0x44
 80138cc:	ecbd 8b02 	vpop	{d8}
 80138d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138d4:	9b07      	ldr	r3, [sp, #28]
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	f77f ae36 	ble.w	8013548 <_dtoa_r+0x6d8>
 80138dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138e0:	2001      	movs	r0, #1
 80138e2:	e656      	b.n	8013592 <_dtoa_r+0x722>
 80138e4:	f1bb 0f00 	cmp.w	fp, #0
 80138e8:	f77f aed7 	ble.w	801369a <_dtoa_r+0x82a>
 80138ec:	463e      	mov	r6, r7
 80138ee:	9801      	ldr	r0, [sp, #4]
 80138f0:	4621      	mov	r1, r4
 80138f2:	f7ff fa34 	bl	8012d5e <quorem>
 80138f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80138fa:	f806 ab01 	strb.w	sl, [r6], #1
 80138fe:	1bf2      	subs	r2, r6, r7
 8013900:	4593      	cmp	fp, r2
 8013902:	ddb4      	ble.n	801386e <_dtoa_r+0x9fe>
 8013904:	9901      	ldr	r1, [sp, #4]
 8013906:	2300      	movs	r3, #0
 8013908:	220a      	movs	r2, #10
 801390a:	4648      	mov	r0, r9
 801390c:	f000 f8b2 	bl	8013a74 <__multadd>
 8013910:	9001      	str	r0, [sp, #4]
 8013912:	e7ec      	b.n	80138ee <_dtoa_r+0xa7e>
 8013914:	0801738c 	.word	0x0801738c
 8013918:	08017310 	.word	0x08017310

0801391c <_free_r>:
 801391c:	b538      	push	{r3, r4, r5, lr}
 801391e:	4605      	mov	r5, r0
 8013920:	2900      	cmp	r1, #0
 8013922:	d041      	beq.n	80139a8 <_free_r+0x8c>
 8013924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013928:	1f0c      	subs	r4, r1, #4
 801392a:	2b00      	cmp	r3, #0
 801392c:	bfb8      	it	lt
 801392e:	18e4      	addlt	r4, r4, r3
 8013930:	f7fe fc0e 	bl	8012150 <__malloc_lock>
 8013934:	4a1d      	ldr	r2, [pc, #116]	@ (80139ac <_free_r+0x90>)
 8013936:	6813      	ldr	r3, [r2, #0]
 8013938:	b933      	cbnz	r3, 8013948 <_free_r+0x2c>
 801393a:	6063      	str	r3, [r4, #4]
 801393c:	6014      	str	r4, [r2, #0]
 801393e:	4628      	mov	r0, r5
 8013940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013944:	f7fe bc0a 	b.w	801215c <__malloc_unlock>
 8013948:	42a3      	cmp	r3, r4
 801394a:	d908      	bls.n	801395e <_free_r+0x42>
 801394c:	6820      	ldr	r0, [r4, #0]
 801394e:	1821      	adds	r1, r4, r0
 8013950:	428b      	cmp	r3, r1
 8013952:	bf01      	itttt	eq
 8013954:	6819      	ldreq	r1, [r3, #0]
 8013956:	685b      	ldreq	r3, [r3, #4]
 8013958:	1809      	addeq	r1, r1, r0
 801395a:	6021      	streq	r1, [r4, #0]
 801395c:	e7ed      	b.n	801393a <_free_r+0x1e>
 801395e:	461a      	mov	r2, r3
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	b10b      	cbz	r3, 8013968 <_free_r+0x4c>
 8013964:	42a3      	cmp	r3, r4
 8013966:	d9fa      	bls.n	801395e <_free_r+0x42>
 8013968:	6811      	ldr	r1, [r2, #0]
 801396a:	1850      	adds	r0, r2, r1
 801396c:	42a0      	cmp	r0, r4
 801396e:	d10b      	bne.n	8013988 <_free_r+0x6c>
 8013970:	6820      	ldr	r0, [r4, #0]
 8013972:	4401      	add	r1, r0
 8013974:	1850      	adds	r0, r2, r1
 8013976:	4283      	cmp	r3, r0
 8013978:	6011      	str	r1, [r2, #0]
 801397a:	d1e0      	bne.n	801393e <_free_r+0x22>
 801397c:	6818      	ldr	r0, [r3, #0]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	6053      	str	r3, [r2, #4]
 8013982:	4408      	add	r0, r1
 8013984:	6010      	str	r0, [r2, #0]
 8013986:	e7da      	b.n	801393e <_free_r+0x22>
 8013988:	d902      	bls.n	8013990 <_free_r+0x74>
 801398a:	230c      	movs	r3, #12
 801398c:	602b      	str	r3, [r5, #0]
 801398e:	e7d6      	b.n	801393e <_free_r+0x22>
 8013990:	6820      	ldr	r0, [r4, #0]
 8013992:	1821      	adds	r1, r4, r0
 8013994:	428b      	cmp	r3, r1
 8013996:	bf04      	itt	eq
 8013998:	6819      	ldreq	r1, [r3, #0]
 801399a:	685b      	ldreq	r3, [r3, #4]
 801399c:	6063      	str	r3, [r4, #4]
 801399e:	bf04      	itt	eq
 80139a0:	1809      	addeq	r1, r1, r0
 80139a2:	6021      	streq	r1, [r4, #0]
 80139a4:	6054      	str	r4, [r2, #4]
 80139a6:	e7ca      	b.n	801393e <_free_r+0x22>
 80139a8:	bd38      	pop	{r3, r4, r5, pc}
 80139aa:	bf00      	nop
 80139ac:	24009544 	.word	0x24009544

080139b0 <_Balloc>:
 80139b0:	b570      	push	{r4, r5, r6, lr}
 80139b2:	69c6      	ldr	r6, [r0, #28]
 80139b4:	4604      	mov	r4, r0
 80139b6:	460d      	mov	r5, r1
 80139b8:	b976      	cbnz	r6, 80139d8 <_Balloc+0x28>
 80139ba:	2010      	movs	r0, #16
 80139bc:	f7fe fb1e 	bl	8011ffc <malloc>
 80139c0:	4602      	mov	r2, r0
 80139c2:	61e0      	str	r0, [r4, #28]
 80139c4:	b920      	cbnz	r0, 80139d0 <_Balloc+0x20>
 80139c6:	4b18      	ldr	r3, [pc, #96]	@ (8013a28 <_Balloc+0x78>)
 80139c8:	4818      	ldr	r0, [pc, #96]	@ (8013a2c <_Balloc+0x7c>)
 80139ca:	216b      	movs	r1, #107	@ 0x6b
 80139cc:	f000 fd90 	bl	80144f0 <__assert_func>
 80139d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139d4:	6006      	str	r6, [r0, #0]
 80139d6:	60c6      	str	r6, [r0, #12]
 80139d8:	69e6      	ldr	r6, [r4, #28]
 80139da:	68f3      	ldr	r3, [r6, #12]
 80139dc:	b183      	cbz	r3, 8013a00 <_Balloc+0x50>
 80139de:	69e3      	ldr	r3, [r4, #28]
 80139e0:	68db      	ldr	r3, [r3, #12]
 80139e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80139e6:	b9b8      	cbnz	r0, 8013a18 <_Balloc+0x68>
 80139e8:	2101      	movs	r1, #1
 80139ea:	fa01 f605 	lsl.w	r6, r1, r5
 80139ee:	1d72      	adds	r2, r6, #5
 80139f0:	0092      	lsls	r2, r2, #2
 80139f2:	4620      	mov	r0, r4
 80139f4:	f000 fd9a 	bl	801452c <_calloc_r>
 80139f8:	b160      	cbz	r0, 8013a14 <_Balloc+0x64>
 80139fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80139fe:	e00e      	b.n	8013a1e <_Balloc+0x6e>
 8013a00:	2221      	movs	r2, #33	@ 0x21
 8013a02:	2104      	movs	r1, #4
 8013a04:	4620      	mov	r0, r4
 8013a06:	f000 fd91 	bl	801452c <_calloc_r>
 8013a0a:	69e3      	ldr	r3, [r4, #28]
 8013a0c:	60f0      	str	r0, [r6, #12]
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1e4      	bne.n	80139de <_Balloc+0x2e>
 8013a14:	2000      	movs	r0, #0
 8013a16:	bd70      	pop	{r4, r5, r6, pc}
 8013a18:	6802      	ldr	r2, [r0, #0]
 8013a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a1e:	2300      	movs	r3, #0
 8013a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a24:	e7f7      	b.n	8013a16 <_Balloc+0x66>
 8013a26:	bf00      	nop
 8013a28:	0801731d 	.word	0x0801731d
 8013a2c:	0801739d 	.word	0x0801739d

08013a30 <_Bfree>:
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	69c6      	ldr	r6, [r0, #28]
 8013a34:	4605      	mov	r5, r0
 8013a36:	460c      	mov	r4, r1
 8013a38:	b976      	cbnz	r6, 8013a58 <_Bfree+0x28>
 8013a3a:	2010      	movs	r0, #16
 8013a3c:	f7fe fade 	bl	8011ffc <malloc>
 8013a40:	4602      	mov	r2, r0
 8013a42:	61e8      	str	r0, [r5, #28]
 8013a44:	b920      	cbnz	r0, 8013a50 <_Bfree+0x20>
 8013a46:	4b09      	ldr	r3, [pc, #36]	@ (8013a6c <_Bfree+0x3c>)
 8013a48:	4809      	ldr	r0, [pc, #36]	@ (8013a70 <_Bfree+0x40>)
 8013a4a:	218f      	movs	r1, #143	@ 0x8f
 8013a4c:	f000 fd50 	bl	80144f0 <__assert_func>
 8013a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a54:	6006      	str	r6, [r0, #0]
 8013a56:	60c6      	str	r6, [r0, #12]
 8013a58:	b13c      	cbz	r4, 8013a6a <_Bfree+0x3a>
 8013a5a:	69eb      	ldr	r3, [r5, #28]
 8013a5c:	6862      	ldr	r2, [r4, #4]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a64:	6021      	str	r1, [r4, #0]
 8013a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}
 8013a6c:	0801731d 	.word	0x0801731d
 8013a70:	0801739d 	.word	0x0801739d

08013a74 <__multadd>:
 8013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a78:	690d      	ldr	r5, [r1, #16]
 8013a7a:	4607      	mov	r7, r0
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	461e      	mov	r6, r3
 8013a80:	f101 0c14 	add.w	ip, r1, #20
 8013a84:	2000      	movs	r0, #0
 8013a86:	f8dc 3000 	ldr.w	r3, [ip]
 8013a8a:	b299      	uxth	r1, r3
 8013a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8013a90:	0c1e      	lsrs	r6, r3, #16
 8013a92:	0c0b      	lsrs	r3, r1, #16
 8013a94:	fb02 3306 	mla	r3, r2, r6, r3
 8013a98:	b289      	uxth	r1, r1
 8013a9a:	3001      	adds	r0, #1
 8013a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013aa0:	4285      	cmp	r5, r0
 8013aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8013aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013aaa:	dcec      	bgt.n	8013a86 <__multadd+0x12>
 8013aac:	b30e      	cbz	r6, 8013af2 <__multadd+0x7e>
 8013aae:	68a3      	ldr	r3, [r4, #8]
 8013ab0:	42ab      	cmp	r3, r5
 8013ab2:	dc19      	bgt.n	8013ae8 <__multadd+0x74>
 8013ab4:	6861      	ldr	r1, [r4, #4]
 8013ab6:	4638      	mov	r0, r7
 8013ab8:	3101      	adds	r1, #1
 8013aba:	f7ff ff79 	bl	80139b0 <_Balloc>
 8013abe:	4680      	mov	r8, r0
 8013ac0:	b928      	cbnz	r0, 8013ace <__multadd+0x5a>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8013af8 <__multadd+0x84>)
 8013ac6:	480d      	ldr	r0, [pc, #52]	@ (8013afc <__multadd+0x88>)
 8013ac8:	21ba      	movs	r1, #186	@ 0xba
 8013aca:	f000 fd11 	bl	80144f0 <__assert_func>
 8013ace:	6922      	ldr	r2, [r4, #16]
 8013ad0:	3202      	adds	r2, #2
 8013ad2:	f104 010c 	add.w	r1, r4, #12
 8013ad6:	0092      	lsls	r2, r2, #2
 8013ad8:	300c      	adds	r0, #12
 8013ada:	f7ff f932 	bl	8012d42 <memcpy>
 8013ade:	4621      	mov	r1, r4
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f7ff ffa5 	bl	8013a30 <_Bfree>
 8013ae6:	4644      	mov	r4, r8
 8013ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013aec:	3501      	adds	r5, #1
 8013aee:	615e      	str	r6, [r3, #20]
 8013af0:	6125      	str	r5, [r4, #16]
 8013af2:	4620      	mov	r0, r4
 8013af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013af8:	0801738c 	.word	0x0801738c
 8013afc:	0801739d 	.word	0x0801739d

08013b00 <__hi0bits>:
 8013b00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013b04:	4603      	mov	r3, r0
 8013b06:	bf36      	itet	cc
 8013b08:	0403      	lslcc	r3, r0, #16
 8013b0a:	2000      	movcs	r0, #0
 8013b0c:	2010      	movcc	r0, #16
 8013b0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013b12:	bf3c      	itt	cc
 8013b14:	021b      	lslcc	r3, r3, #8
 8013b16:	3008      	addcc	r0, #8
 8013b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b1c:	bf3c      	itt	cc
 8013b1e:	011b      	lslcc	r3, r3, #4
 8013b20:	3004      	addcc	r0, #4
 8013b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b26:	bf3c      	itt	cc
 8013b28:	009b      	lslcc	r3, r3, #2
 8013b2a:	3002      	addcc	r0, #2
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	db05      	blt.n	8013b3c <__hi0bits+0x3c>
 8013b30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b34:	f100 0001 	add.w	r0, r0, #1
 8013b38:	bf08      	it	eq
 8013b3a:	2020      	moveq	r0, #32
 8013b3c:	4770      	bx	lr

08013b3e <__lo0bits>:
 8013b3e:	6803      	ldr	r3, [r0, #0]
 8013b40:	4602      	mov	r2, r0
 8013b42:	f013 0007 	ands.w	r0, r3, #7
 8013b46:	d00b      	beq.n	8013b60 <__lo0bits+0x22>
 8013b48:	07d9      	lsls	r1, r3, #31
 8013b4a:	d421      	bmi.n	8013b90 <__lo0bits+0x52>
 8013b4c:	0798      	lsls	r0, r3, #30
 8013b4e:	bf49      	itett	mi
 8013b50:	085b      	lsrmi	r3, r3, #1
 8013b52:	089b      	lsrpl	r3, r3, #2
 8013b54:	2001      	movmi	r0, #1
 8013b56:	6013      	strmi	r3, [r2, #0]
 8013b58:	bf5c      	itt	pl
 8013b5a:	6013      	strpl	r3, [r2, #0]
 8013b5c:	2002      	movpl	r0, #2
 8013b5e:	4770      	bx	lr
 8013b60:	b299      	uxth	r1, r3
 8013b62:	b909      	cbnz	r1, 8013b68 <__lo0bits+0x2a>
 8013b64:	0c1b      	lsrs	r3, r3, #16
 8013b66:	2010      	movs	r0, #16
 8013b68:	b2d9      	uxtb	r1, r3
 8013b6a:	b909      	cbnz	r1, 8013b70 <__lo0bits+0x32>
 8013b6c:	3008      	adds	r0, #8
 8013b6e:	0a1b      	lsrs	r3, r3, #8
 8013b70:	0719      	lsls	r1, r3, #28
 8013b72:	bf04      	itt	eq
 8013b74:	091b      	lsreq	r3, r3, #4
 8013b76:	3004      	addeq	r0, #4
 8013b78:	0799      	lsls	r1, r3, #30
 8013b7a:	bf04      	itt	eq
 8013b7c:	089b      	lsreq	r3, r3, #2
 8013b7e:	3002      	addeq	r0, #2
 8013b80:	07d9      	lsls	r1, r3, #31
 8013b82:	d403      	bmi.n	8013b8c <__lo0bits+0x4e>
 8013b84:	085b      	lsrs	r3, r3, #1
 8013b86:	f100 0001 	add.w	r0, r0, #1
 8013b8a:	d003      	beq.n	8013b94 <__lo0bits+0x56>
 8013b8c:	6013      	str	r3, [r2, #0]
 8013b8e:	4770      	bx	lr
 8013b90:	2000      	movs	r0, #0
 8013b92:	4770      	bx	lr
 8013b94:	2020      	movs	r0, #32
 8013b96:	4770      	bx	lr

08013b98 <__i2b>:
 8013b98:	b510      	push	{r4, lr}
 8013b9a:	460c      	mov	r4, r1
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	f7ff ff07 	bl	80139b0 <_Balloc>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	b928      	cbnz	r0, 8013bb2 <__i2b+0x1a>
 8013ba6:	4b05      	ldr	r3, [pc, #20]	@ (8013bbc <__i2b+0x24>)
 8013ba8:	4805      	ldr	r0, [pc, #20]	@ (8013bc0 <__i2b+0x28>)
 8013baa:	f240 1145 	movw	r1, #325	@ 0x145
 8013bae:	f000 fc9f 	bl	80144f0 <__assert_func>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	6144      	str	r4, [r0, #20]
 8013bb6:	6103      	str	r3, [r0, #16]
 8013bb8:	bd10      	pop	{r4, pc}
 8013bba:	bf00      	nop
 8013bbc:	0801738c 	.word	0x0801738c
 8013bc0:	0801739d 	.word	0x0801739d

08013bc4 <__multiply>:
 8013bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc8:	4614      	mov	r4, r2
 8013bca:	690a      	ldr	r2, [r1, #16]
 8013bcc:	6923      	ldr	r3, [r4, #16]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	bfa8      	it	ge
 8013bd2:	4623      	movge	r3, r4
 8013bd4:	460f      	mov	r7, r1
 8013bd6:	bfa4      	itt	ge
 8013bd8:	460c      	movge	r4, r1
 8013bda:	461f      	movge	r7, r3
 8013bdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013be0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013be4:	68a3      	ldr	r3, [r4, #8]
 8013be6:	6861      	ldr	r1, [r4, #4]
 8013be8:	eb0a 0609 	add.w	r6, sl, r9
 8013bec:	42b3      	cmp	r3, r6
 8013bee:	b085      	sub	sp, #20
 8013bf0:	bfb8      	it	lt
 8013bf2:	3101      	addlt	r1, #1
 8013bf4:	f7ff fedc 	bl	80139b0 <_Balloc>
 8013bf8:	b930      	cbnz	r0, 8013c08 <__multiply+0x44>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	4b44      	ldr	r3, [pc, #272]	@ (8013d10 <__multiply+0x14c>)
 8013bfe:	4845      	ldr	r0, [pc, #276]	@ (8013d14 <__multiply+0x150>)
 8013c00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013c04:	f000 fc74 	bl	80144f0 <__assert_func>
 8013c08:	f100 0514 	add.w	r5, r0, #20
 8013c0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c10:	462b      	mov	r3, r5
 8013c12:	2200      	movs	r2, #0
 8013c14:	4543      	cmp	r3, r8
 8013c16:	d321      	bcc.n	8013c5c <__multiply+0x98>
 8013c18:	f107 0114 	add.w	r1, r7, #20
 8013c1c:	f104 0214 	add.w	r2, r4, #20
 8013c20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013c24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013c28:	9302      	str	r3, [sp, #8]
 8013c2a:	1b13      	subs	r3, r2, r4
 8013c2c:	3b15      	subs	r3, #21
 8013c2e:	f023 0303 	bic.w	r3, r3, #3
 8013c32:	3304      	adds	r3, #4
 8013c34:	f104 0715 	add.w	r7, r4, #21
 8013c38:	42ba      	cmp	r2, r7
 8013c3a:	bf38      	it	cc
 8013c3c:	2304      	movcc	r3, #4
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	9b02      	ldr	r3, [sp, #8]
 8013c42:	9103      	str	r1, [sp, #12]
 8013c44:	428b      	cmp	r3, r1
 8013c46:	d80c      	bhi.n	8013c62 <__multiply+0x9e>
 8013c48:	2e00      	cmp	r6, #0
 8013c4a:	dd03      	ble.n	8013c54 <__multiply+0x90>
 8013c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d05b      	beq.n	8013d0c <__multiply+0x148>
 8013c54:	6106      	str	r6, [r0, #16]
 8013c56:	b005      	add	sp, #20
 8013c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5c:	f843 2b04 	str.w	r2, [r3], #4
 8013c60:	e7d8      	b.n	8013c14 <__multiply+0x50>
 8013c62:	f8b1 a000 	ldrh.w	sl, [r1]
 8013c66:	f1ba 0f00 	cmp.w	sl, #0
 8013c6a:	d024      	beq.n	8013cb6 <__multiply+0xf2>
 8013c6c:	f104 0e14 	add.w	lr, r4, #20
 8013c70:	46a9      	mov	r9, r5
 8013c72:	f04f 0c00 	mov.w	ip, #0
 8013c76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c7a:	f8d9 3000 	ldr.w	r3, [r9]
 8013c7e:	fa1f fb87 	uxth.w	fp, r7
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	fb0a 330b 	mla	r3, sl, fp, r3
 8013c88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013c8c:	f8d9 7000 	ldr.w	r7, [r9]
 8013c90:	4463      	add	r3, ip
 8013c92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013c96:	fb0a c70b 	mla	r7, sl, fp, ip
 8013c9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ca4:	4572      	cmp	r2, lr
 8013ca6:	f849 3b04 	str.w	r3, [r9], #4
 8013caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013cae:	d8e2      	bhi.n	8013c76 <__multiply+0xb2>
 8013cb0:	9b01      	ldr	r3, [sp, #4]
 8013cb2:	f845 c003 	str.w	ip, [r5, r3]
 8013cb6:	9b03      	ldr	r3, [sp, #12]
 8013cb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013cbc:	3104      	adds	r1, #4
 8013cbe:	f1b9 0f00 	cmp.w	r9, #0
 8013cc2:	d021      	beq.n	8013d08 <__multiply+0x144>
 8013cc4:	682b      	ldr	r3, [r5, #0]
 8013cc6:	f104 0c14 	add.w	ip, r4, #20
 8013cca:	46ae      	mov	lr, r5
 8013ccc:	f04f 0a00 	mov.w	sl, #0
 8013cd0:	f8bc b000 	ldrh.w	fp, [ip]
 8013cd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013cd8:	fb09 770b 	mla	r7, r9, fp, r7
 8013cdc:	4457      	add	r7, sl
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ce4:	f84e 3b04 	str.w	r3, [lr], #4
 8013ce8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013cec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013cf0:	f8be 3000 	ldrh.w	r3, [lr]
 8013cf4:	fb09 330a 	mla	r3, r9, sl, r3
 8013cf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013cfc:	4562      	cmp	r2, ip
 8013cfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d02:	d8e5      	bhi.n	8013cd0 <__multiply+0x10c>
 8013d04:	9f01      	ldr	r7, [sp, #4]
 8013d06:	51eb      	str	r3, [r5, r7]
 8013d08:	3504      	adds	r5, #4
 8013d0a:	e799      	b.n	8013c40 <__multiply+0x7c>
 8013d0c:	3e01      	subs	r6, #1
 8013d0e:	e79b      	b.n	8013c48 <__multiply+0x84>
 8013d10:	0801738c 	.word	0x0801738c
 8013d14:	0801739d 	.word	0x0801739d

08013d18 <__pow5mult>:
 8013d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d1c:	4615      	mov	r5, r2
 8013d1e:	f012 0203 	ands.w	r2, r2, #3
 8013d22:	4607      	mov	r7, r0
 8013d24:	460e      	mov	r6, r1
 8013d26:	d007      	beq.n	8013d38 <__pow5mult+0x20>
 8013d28:	4c25      	ldr	r4, [pc, #148]	@ (8013dc0 <__pow5mult+0xa8>)
 8013d2a:	3a01      	subs	r2, #1
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d32:	f7ff fe9f 	bl	8013a74 <__multadd>
 8013d36:	4606      	mov	r6, r0
 8013d38:	10ad      	asrs	r5, r5, #2
 8013d3a:	d03d      	beq.n	8013db8 <__pow5mult+0xa0>
 8013d3c:	69fc      	ldr	r4, [r7, #28]
 8013d3e:	b97c      	cbnz	r4, 8013d60 <__pow5mult+0x48>
 8013d40:	2010      	movs	r0, #16
 8013d42:	f7fe f95b 	bl	8011ffc <malloc>
 8013d46:	4602      	mov	r2, r0
 8013d48:	61f8      	str	r0, [r7, #28]
 8013d4a:	b928      	cbnz	r0, 8013d58 <__pow5mult+0x40>
 8013d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8013dc4 <__pow5mult+0xac>)
 8013d4e:	481e      	ldr	r0, [pc, #120]	@ (8013dc8 <__pow5mult+0xb0>)
 8013d50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013d54:	f000 fbcc 	bl	80144f0 <__assert_func>
 8013d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d5c:	6004      	str	r4, [r0, #0]
 8013d5e:	60c4      	str	r4, [r0, #12]
 8013d60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013d64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d68:	b94c      	cbnz	r4, 8013d7e <__pow5mult+0x66>
 8013d6a:	f240 2171 	movw	r1, #625	@ 0x271
 8013d6e:	4638      	mov	r0, r7
 8013d70:	f7ff ff12 	bl	8013b98 <__i2b>
 8013d74:	2300      	movs	r3, #0
 8013d76:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	6003      	str	r3, [r0, #0]
 8013d7e:	f04f 0900 	mov.w	r9, #0
 8013d82:	07eb      	lsls	r3, r5, #31
 8013d84:	d50a      	bpl.n	8013d9c <__pow5mult+0x84>
 8013d86:	4631      	mov	r1, r6
 8013d88:	4622      	mov	r2, r4
 8013d8a:	4638      	mov	r0, r7
 8013d8c:	f7ff ff1a 	bl	8013bc4 <__multiply>
 8013d90:	4631      	mov	r1, r6
 8013d92:	4680      	mov	r8, r0
 8013d94:	4638      	mov	r0, r7
 8013d96:	f7ff fe4b 	bl	8013a30 <_Bfree>
 8013d9a:	4646      	mov	r6, r8
 8013d9c:	106d      	asrs	r5, r5, #1
 8013d9e:	d00b      	beq.n	8013db8 <__pow5mult+0xa0>
 8013da0:	6820      	ldr	r0, [r4, #0]
 8013da2:	b938      	cbnz	r0, 8013db4 <__pow5mult+0x9c>
 8013da4:	4622      	mov	r2, r4
 8013da6:	4621      	mov	r1, r4
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff ff0b 	bl	8013bc4 <__multiply>
 8013dae:	6020      	str	r0, [r4, #0]
 8013db0:	f8c0 9000 	str.w	r9, [r0]
 8013db4:	4604      	mov	r4, r0
 8013db6:	e7e4      	b.n	8013d82 <__pow5mult+0x6a>
 8013db8:	4630      	mov	r0, r6
 8013dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dbe:	bf00      	nop
 8013dc0:	080173f8 	.word	0x080173f8
 8013dc4:	0801731d 	.word	0x0801731d
 8013dc8:	0801739d 	.word	0x0801739d

08013dcc <__lshift>:
 8013dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd0:	460c      	mov	r4, r1
 8013dd2:	6849      	ldr	r1, [r1, #4]
 8013dd4:	6923      	ldr	r3, [r4, #16]
 8013dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013dda:	68a3      	ldr	r3, [r4, #8]
 8013ddc:	4607      	mov	r7, r0
 8013dde:	4691      	mov	r9, r2
 8013de0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013de4:	f108 0601 	add.w	r6, r8, #1
 8013de8:	42b3      	cmp	r3, r6
 8013dea:	db0b      	blt.n	8013e04 <__lshift+0x38>
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7ff fddf 	bl	80139b0 <_Balloc>
 8013df2:	4605      	mov	r5, r0
 8013df4:	b948      	cbnz	r0, 8013e0a <__lshift+0x3e>
 8013df6:	4602      	mov	r2, r0
 8013df8:	4b28      	ldr	r3, [pc, #160]	@ (8013e9c <__lshift+0xd0>)
 8013dfa:	4829      	ldr	r0, [pc, #164]	@ (8013ea0 <__lshift+0xd4>)
 8013dfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013e00:	f000 fb76 	bl	80144f0 <__assert_func>
 8013e04:	3101      	adds	r1, #1
 8013e06:	005b      	lsls	r3, r3, #1
 8013e08:	e7ee      	b.n	8013de8 <__lshift+0x1c>
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	f100 0114 	add.w	r1, r0, #20
 8013e10:	f100 0210 	add.w	r2, r0, #16
 8013e14:	4618      	mov	r0, r3
 8013e16:	4553      	cmp	r3, sl
 8013e18:	db33      	blt.n	8013e82 <__lshift+0xb6>
 8013e1a:	6920      	ldr	r0, [r4, #16]
 8013e1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e20:	f104 0314 	add.w	r3, r4, #20
 8013e24:	f019 091f 	ands.w	r9, r9, #31
 8013e28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e30:	d02b      	beq.n	8013e8a <__lshift+0xbe>
 8013e32:	f1c9 0e20 	rsb	lr, r9, #32
 8013e36:	468a      	mov	sl, r1
 8013e38:	2200      	movs	r2, #0
 8013e3a:	6818      	ldr	r0, [r3, #0]
 8013e3c:	fa00 f009 	lsl.w	r0, r0, r9
 8013e40:	4310      	orrs	r0, r2
 8013e42:	f84a 0b04 	str.w	r0, [sl], #4
 8013e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e4a:	459c      	cmp	ip, r3
 8013e4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013e50:	d8f3      	bhi.n	8013e3a <__lshift+0x6e>
 8013e52:	ebac 0304 	sub.w	r3, ip, r4
 8013e56:	3b15      	subs	r3, #21
 8013e58:	f023 0303 	bic.w	r3, r3, #3
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	f104 0015 	add.w	r0, r4, #21
 8013e62:	4584      	cmp	ip, r0
 8013e64:	bf38      	it	cc
 8013e66:	2304      	movcc	r3, #4
 8013e68:	50ca      	str	r2, [r1, r3]
 8013e6a:	b10a      	cbz	r2, 8013e70 <__lshift+0xa4>
 8013e6c:	f108 0602 	add.w	r6, r8, #2
 8013e70:	3e01      	subs	r6, #1
 8013e72:	4638      	mov	r0, r7
 8013e74:	612e      	str	r6, [r5, #16]
 8013e76:	4621      	mov	r1, r4
 8013e78:	f7ff fdda 	bl	8013a30 <_Bfree>
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e86:	3301      	adds	r3, #1
 8013e88:	e7c5      	b.n	8013e16 <__lshift+0x4a>
 8013e8a:	3904      	subs	r1, #4
 8013e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e94:	459c      	cmp	ip, r3
 8013e96:	d8f9      	bhi.n	8013e8c <__lshift+0xc0>
 8013e98:	e7ea      	b.n	8013e70 <__lshift+0xa4>
 8013e9a:	bf00      	nop
 8013e9c:	0801738c 	.word	0x0801738c
 8013ea0:	0801739d 	.word	0x0801739d

08013ea4 <__mcmp>:
 8013ea4:	690a      	ldr	r2, [r1, #16]
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	6900      	ldr	r0, [r0, #16]
 8013eaa:	1a80      	subs	r0, r0, r2
 8013eac:	b530      	push	{r4, r5, lr}
 8013eae:	d10e      	bne.n	8013ece <__mcmp+0x2a>
 8013eb0:	3314      	adds	r3, #20
 8013eb2:	3114      	adds	r1, #20
 8013eb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013eb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ebc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013ec0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013ec4:	4295      	cmp	r5, r2
 8013ec6:	d003      	beq.n	8013ed0 <__mcmp+0x2c>
 8013ec8:	d205      	bcs.n	8013ed6 <__mcmp+0x32>
 8013eca:	f04f 30ff 	mov.w	r0, #4294967295
 8013ece:	bd30      	pop	{r4, r5, pc}
 8013ed0:	42a3      	cmp	r3, r4
 8013ed2:	d3f3      	bcc.n	8013ebc <__mcmp+0x18>
 8013ed4:	e7fb      	b.n	8013ece <__mcmp+0x2a>
 8013ed6:	2001      	movs	r0, #1
 8013ed8:	e7f9      	b.n	8013ece <__mcmp+0x2a>
	...

08013edc <__mdiff>:
 8013edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee0:	4689      	mov	r9, r1
 8013ee2:	4606      	mov	r6, r0
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4648      	mov	r0, r9
 8013ee8:	4614      	mov	r4, r2
 8013eea:	f7ff ffdb 	bl	8013ea4 <__mcmp>
 8013eee:	1e05      	subs	r5, r0, #0
 8013ef0:	d112      	bne.n	8013f18 <__mdiff+0x3c>
 8013ef2:	4629      	mov	r1, r5
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	f7ff fd5b 	bl	80139b0 <_Balloc>
 8013efa:	4602      	mov	r2, r0
 8013efc:	b928      	cbnz	r0, 8013f0a <__mdiff+0x2e>
 8013efe:	4b3f      	ldr	r3, [pc, #252]	@ (8013ffc <__mdiff+0x120>)
 8013f00:	f240 2137 	movw	r1, #567	@ 0x237
 8013f04:	483e      	ldr	r0, [pc, #248]	@ (8014000 <__mdiff+0x124>)
 8013f06:	f000 faf3 	bl	80144f0 <__assert_func>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f10:	4610      	mov	r0, r2
 8013f12:	b003      	add	sp, #12
 8013f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f18:	bfbc      	itt	lt
 8013f1a:	464b      	movlt	r3, r9
 8013f1c:	46a1      	movlt	r9, r4
 8013f1e:	4630      	mov	r0, r6
 8013f20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f24:	bfba      	itte	lt
 8013f26:	461c      	movlt	r4, r3
 8013f28:	2501      	movlt	r5, #1
 8013f2a:	2500      	movge	r5, #0
 8013f2c:	f7ff fd40 	bl	80139b0 <_Balloc>
 8013f30:	4602      	mov	r2, r0
 8013f32:	b918      	cbnz	r0, 8013f3c <__mdiff+0x60>
 8013f34:	4b31      	ldr	r3, [pc, #196]	@ (8013ffc <__mdiff+0x120>)
 8013f36:	f240 2145 	movw	r1, #581	@ 0x245
 8013f3a:	e7e3      	b.n	8013f04 <__mdiff+0x28>
 8013f3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013f40:	6926      	ldr	r6, [r4, #16]
 8013f42:	60c5      	str	r5, [r0, #12]
 8013f44:	f109 0310 	add.w	r3, r9, #16
 8013f48:	f109 0514 	add.w	r5, r9, #20
 8013f4c:	f104 0e14 	add.w	lr, r4, #20
 8013f50:	f100 0b14 	add.w	fp, r0, #20
 8013f54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013f58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013f5c:	9301      	str	r3, [sp, #4]
 8013f5e:	46d9      	mov	r9, fp
 8013f60:	f04f 0c00 	mov.w	ip, #0
 8013f64:	9b01      	ldr	r3, [sp, #4]
 8013f66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013f6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013f6e:	9301      	str	r3, [sp, #4]
 8013f70:	fa1f f38a 	uxth.w	r3, sl
 8013f74:	4619      	mov	r1, r3
 8013f76:	b283      	uxth	r3, r0
 8013f78:	1acb      	subs	r3, r1, r3
 8013f7a:	0c00      	lsrs	r0, r0, #16
 8013f7c:	4463      	add	r3, ip
 8013f7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013f82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013f8c:	4576      	cmp	r6, lr
 8013f8e:	f849 3b04 	str.w	r3, [r9], #4
 8013f92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f96:	d8e5      	bhi.n	8013f64 <__mdiff+0x88>
 8013f98:	1b33      	subs	r3, r6, r4
 8013f9a:	3b15      	subs	r3, #21
 8013f9c:	f023 0303 	bic.w	r3, r3, #3
 8013fa0:	3415      	adds	r4, #21
 8013fa2:	3304      	adds	r3, #4
 8013fa4:	42a6      	cmp	r6, r4
 8013fa6:	bf38      	it	cc
 8013fa8:	2304      	movcc	r3, #4
 8013faa:	441d      	add	r5, r3
 8013fac:	445b      	add	r3, fp
 8013fae:	461e      	mov	r6, r3
 8013fb0:	462c      	mov	r4, r5
 8013fb2:	4544      	cmp	r4, r8
 8013fb4:	d30e      	bcc.n	8013fd4 <__mdiff+0xf8>
 8013fb6:	f108 0103 	add.w	r1, r8, #3
 8013fba:	1b49      	subs	r1, r1, r5
 8013fbc:	f021 0103 	bic.w	r1, r1, #3
 8013fc0:	3d03      	subs	r5, #3
 8013fc2:	45a8      	cmp	r8, r5
 8013fc4:	bf38      	it	cc
 8013fc6:	2100      	movcc	r1, #0
 8013fc8:	440b      	add	r3, r1
 8013fca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013fce:	b191      	cbz	r1, 8013ff6 <__mdiff+0x11a>
 8013fd0:	6117      	str	r7, [r2, #16]
 8013fd2:	e79d      	b.n	8013f10 <__mdiff+0x34>
 8013fd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8013fd8:	46e6      	mov	lr, ip
 8013fda:	0c08      	lsrs	r0, r1, #16
 8013fdc:	fa1c fc81 	uxtah	ip, ip, r1
 8013fe0:	4471      	add	r1, lr
 8013fe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013fe6:	b289      	uxth	r1, r1
 8013fe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013fec:	f846 1b04 	str.w	r1, [r6], #4
 8013ff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ff4:	e7dd      	b.n	8013fb2 <__mdiff+0xd6>
 8013ff6:	3f01      	subs	r7, #1
 8013ff8:	e7e7      	b.n	8013fca <__mdiff+0xee>
 8013ffa:	bf00      	nop
 8013ffc:	0801738c 	.word	0x0801738c
 8014000:	0801739d 	.word	0x0801739d

08014004 <__d2b>:
 8014004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014008:	460f      	mov	r7, r1
 801400a:	2101      	movs	r1, #1
 801400c:	ec59 8b10 	vmov	r8, r9, d0
 8014010:	4616      	mov	r6, r2
 8014012:	f7ff fccd 	bl	80139b0 <_Balloc>
 8014016:	4604      	mov	r4, r0
 8014018:	b930      	cbnz	r0, 8014028 <__d2b+0x24>
 801401a:	4602      	mov	r2, r0
 801401c:	4b23      	ldr	r3, [pc, #140]	@ (80140ac <__d2b+0xa8>)
 801401e:	4824      	ldr	r0, [pc, #144]	@ (80140b0 <__d2b+0xac>)
 8014020:	f240 310f 	movw	r1, #783	@ 0x30f
 8014024:	f000 fa64 	bl	80144f0 <__assert_func>
 8014028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801402c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014030:	b10d      	cbz	r5, 8014036 <__d2b+0x32>
 8014032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014036:	9301      	str	r3, [sp, #4]
 8014038:	f1b8 0300 	subs.w	r3, r8, #0
 801403c:	d023      	beq.n	8014086 <__d2b+0x82>
 801403e:	4668      	mov	r0, sp
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	f7ff fd7c 	bl	8013b3e <__lo0bits>
 8014046:	e9dd 1200 	ldrd	r1, r2, [sp]
 801404a:	b1d0      	cbz	r0, 8014082 <__d2b+0x7e>
 801404c:	f1c0 0320 	rsb	r3, r0, #32
 8014050:	fa02 f303 	lsl.w	r3, r2, r3
 8014054:	430b      	orrs	r3, r1
 8014056:	40c2      	lsrs	r2, r0
 8014058:	6163      	str	r3, [r4, #20]
 801405a:	9201      	str	r2, [sp, #4]
 801405c:	9b01      	ldr	r3, [sp, #4]
 801405e:	61a3      	str	r3, [r4, #24]
 8014060:	2b00      	cmp	r3, #0
 8014062:	bf0c      	ite	eq
 8014064:	2201      	moveq	r2, #1
 8014066:	2202      	movne	r2, #2
 8014068:	6122      	str	r2, [r4, #16]
 801406a:	b1a5      	cbz	r5, 8014096 <__d2b+0x92>
 801406c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014070:	4405      	add	r5, r0
 8014072:	603d      	str	r5, [r7, #0]
 8014074:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014078:	6030      	str	r0, [r6, #0]
 801407a:	4620      	mov	r0, r4
 801407c:	b003      	add	sp, #12
 801407e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014082:	6161      	str	r1, [r4, #20]
 8014084:	e7ea      	b.n	801405c <__d2b+0x58>
 8014086:	a801      	add	r0, sp, #4
 8014088:	f7ff fd59 	bl	8013b3e <__lo0bits>
 801408c:	9b01      	ldr	r3, [sp, #4]
 801408e:	6163      	str	r3, [r4, #20]
 8014090:	3020      	adds	r0, #32
 8014092:	2201      	movs	r2, #1
 8014094:	e7e8      	b.n	8014068 <__d2b+0x64>
 8014096:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801409a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801409e:	6038      	str	r0, [r7, #0]
 80140a0:	6918      	ldr	r0, [r3, #16]
 80140a2:	f7ff fd2d 	bl	8013b00 <__hi0bits>
 80140a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140aa:	e7e5      	b.n	8014078 <__d2b+0x74>
 80140ac:	0801738c 	.word	0x0801738c
 80140b0:	0801739d 	.word	0x0801739d

080140b4 <__ssputs_r>:
 80140b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b8:	688e      	ldr	r6, [r1, #8]
 80140ba:	461f      	mov	r7, r3
 80140bc:	42be      	cmp	r6, r7
 80140be:	680b      	ldr	r3, [r1, #0]
 80140c0:	4682      	mov	sl, r0
 80140c2:	460c      	mov	r4, r1
 80140c4:	4690      	mov	r8, r2
 80140c6:	d82d      	bhi.n	8014124 <__ssputs_r+0x70>
 80140c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80140cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80140d0:	d026      	beq.n	8014120 <__ssputs_r+0x6c>
 80140d2:	6965      	ldr	r5, [r4, #20]
 80140d4:	6909      	ldr	r1, [r1, #16]
 80140d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140da:	eba3 0901 	sub.w	r9, r3, r1
 80140de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140e2:	1c7b      	adds	r3, r7, #1
 80140e4:	444b      	add	r3, r9
 80140e6:	106d      	asrs	r5, r5, #1
 80140e8:	429d      	cmp	r5, r3
 80140ea:	bf38      	it	cc
 80140ec:	461d      	movcc	r5, r3
 80140ee:	0553      	lsls	r3, r2, #21
 80140f0:	d527      	bpl.n	8014142 <__ssputs_r+0x8e>
 80140f2:	4629      	mov	r1, r5
 80140f4:	f7fd ffac 	bl	8012050 <_malloc_r>
 80140f8:	4606      	mov	r6, r0
 80140fa:	b360      	cbz	r0, 8014156 <__ssputs_r+0xa2>
 80140fc:	6921      	ldr	r1, [r4, #16]
 80140fe:	464a      	mov	r2, r9
 8014100:	f7fe fe1f 	bl	8012d42 <memcpy>
 8014104:	89a3      	ldrh	r3, [r4, #12]
 8014106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801410a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801410e:	81a3      	strh	r3, [r4, #12]
 8014110:	6126      	str	r6, [r4, #16]
 8014112:	6165      	str	r5, [r4, #20]
 8014114:	444e      	add	r6, r9
 8014116:	eba5 0509 	sub.w	r5, r5, r9
 801411a:	6026      	str	r6, [r4, #0]
 801411c:	60a5      	str	r5, [r4, #8]
 801411e:	463e      	mov	r6, r7
 8014120:	42be      	cmp	r6, r7
 8014122:	d900      	bls.n	8014126 <__ssputs_r+0x72>
 8014124:	463e      	mov	r6, r7
 8014126:	6820      	ldr	r0, [r4, #0]
 8014128:	4632      	mov	r2, r6
 801412a:	4641      	mov	r1, r8
 801412c:	f000 f9c6 	bl	80144bc <memmove>
 8014130:	68a3      	ldr	r3, [r4, #8]
 8014132:	1b9b      	subs	r3, r3, r6
 8014134:	60a3      	str	r3, [r4, #8]
 8014136:	6823      	ldr	r3, [r4, #0]
 8014138:	4433      	add	r3, r6
 801413a:	6023      	str	r3, [r4, #0]
 801413c:	2000      	movs	r0, #0
 801413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014142:	462a      	mov	r2, r5
 8014144:	f000 fa18 	bl	8014578 <_realloc_r>
 8014148:	4606      	mov	r6, r0
 801414a:	2800      	cmp	r0, #0
 801414c:	d1e0      	bne.n	8014110 <__ssputs_r+0x5c>
 801414e:	6921      	ldr	r1, [r4, #16]
 8014150:	4650      	mov	r0, sl
 8014152:	f7ff fbe3 	bl	801391c <_free_r>
 8014156:	230c      	movs	r3, #12
 8014158:	f8ca 3000 	str.w	r3, [sl]
 801415c:	89a3      	ldrh	r3, [r4, #12]
 801415e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014162:	81a3      	strh	r3, [r4, #12]
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	e7e9      	b.n	801413e <__ssputs_r+0x8a>
	...

0801416c <_svfiprintf_r>:
 801416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014170:	4698      	mov	r8, r3
 8014172:	898b      	ldrh	r3, [r1, #12]
 8014174:	061b      	lsls	r3, r3, #24
 8014176:	b09d      	sub	sp, #116	@ 0x74
 8014178:	4607      	mov	r7, r0
 801417a:	460d      	mov	r5, r1
 801417c:	4614      	mov	r4, r2
 801417e:	d510      	bpl.n	80141a2 <_svfiprintf_r+0x36>
 8014180:	690b      	ldr	r3, [r1, #16]
 8014182:	b973      	cbnz	r3, 80141a2 <_svfiprintf_r+0x36>
 8014184:	2140      	movs	r1, #64	@ 0x40
 8014186:	f7fd ff63 	bl	8012050 <_malloc_r>
 801418a:	6028      	str	r0, [r5, #0]
 801418c:	6128      	str	r0, [r5, #16]
 801418e:	b930      	cbnz	r0, 801419e <_svfiprintf_r+0x32>
 8014190:	230c      	movs	r3, #12
 8014192:	603b      	str	r3, [r7, #0]
 8014194:	f04f 30ff 	mov.w	r0, #4294967295
 8014198:	b01d      	add	sp, #116	@ 0x74
 801419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801419e:	2340      	movs	r3, #64	@ 0x40
 80141a0:	616b      	str	r3, [r5, #20]
 80141a2:	2300      	movs	r3, #0
 80141a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80141a6:	2320      	movs	r3, #32
 80141a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80141b0:	2330      	movs	r3, #48	@ 0x30
 80141b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014350 <_svfiprintf_r+0x1e4>
 80141b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80141ba:	f04f 0901 	mov.w	r9, #1
 80141be:	4623      	mov	r3, r4
 80141c0:	469a      	mov	sl, r3
 80141c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141c6:	b10a      	cbz	r2, 80141cc <_svfiprintf_r+0x60>
 80141c8:	2a25      	cmp	r2, #37	@ 0x25
 80141ca:	d1f9      	bne.n	80141c0 <_svfiprintf_r+0x54>
 80141cc:	ebba 0b04 	subs.w	fp, sl, r4
 80141d0:	d00b      	beq.n	80141ea <_svfiprintf_r+0x7e>
 80141d2:	465b      	mov	r3, fp
 80141d4:	4622      	mov	r2, r4
 80141d6:	4629      	mov	r1, r5
 80141d8:	4638      	mov	r0, r7
 80141da:	f7ff ff6b 	bl	80140b4 <__ssputs_r>
 80141de:	3001      	adds	r0, #1
 80141e0:	f000 80a7 	beq.w	8014332 <_svfiprintf_r+0x1c6>
 80141e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141e6:	445a      	add	r2, fp
 80141e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80141ea:	f89a 3000 	ldrb.w	r3, [sl]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	f000 809f 	beq.w	8014332 <_svfiprintf_r+0x1c6>
 80141f4:	2300      	movs	r3, #0
 80141f6:	f04f 32ff 	mov.w	r2, #4294967295
 80141fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141fe:	f10a 0a01 	add.w	sl, sl, #1
 8014202:	9304      	str	r3, [sp, #16]
 8014204:	9307      	str	r3, [sp, #28]
 8014206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801420a:	931a      	str	r3, [sp, #104]	@ 0x68
 801420c:	4654      	mov	r4, sl
 801420e:	2205      	movs	r2, #5
 8014210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014214:	484e      	ldr	r0, [pc, #312]	@ (8014350 <_svfiprintf_r+0x1e4>)
 8014216:	f7ec f863 	bl	80002e0 <memchr>
 801421a:	9a04      	ldr	r2, [sp, #16]
 801421c:	b9d8      	cbnz	r0, 8014256 <_svfiprintf_r+0xea>
 801421e:	06d0      	lsls	r0, r2, #27
 8014220:	bf44      	itt	mi
 8014222:	2320      	movmi	r3, #32
 8014224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014228:	0711      	lsls	r1, r2, #28
 801422a:	bf44      	itt	mi
 801422c:	232b      	movmi	r3, #43	@ 0x2b
 801422e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014232:	f89a 3000 	ldrb.w	r3, [sl]
 8014236:	2b2a      	cmp	r3, #42	@ 0x2a
 8014238:	d015      	beq.n	8014266 <_svfiprintf_r+0xfa>
 801423a:	9a07      	ldr	r2, [sp, #28]
 801423c:	4654      	mov	r4, sl
 801423e:	2000      	movs	r0, #0
 8014240:	f04f 0c0a 	mov.w	ip, #10
 8014244:	4621      	mov	r1, r4
 8014246:	f811 3b01 	ldrb.w	r3, [r1], #1
 801424a:	3b30      	subs	r3, #48	@ 0x30
 801424c:	2b09      	cmp	r3, #9
 801424e:	d94b      	bls.n	80142e8 <_svfiprintf_r+0x17c>
 8014250:	b1b0      	cbz	r0, 8014280 <_svfiprintf_r+0x114>
 8014252:	9207      	str	r2, [sp, #28]
 8014254:	e014      	b.n	8014280 <_svfiprintf_r+0x114>
 8014256:	eba0 0308 	sub.w	r3, r0, r8
 801425a:	fa09 f303 	lsl.w	r3, r9, r3
 801425e:	4313      	orrs	r3, r2
 8014260:	9304      	str	r3, [sp, #16]
 8014262:	46a2      	mov	sl, r4
 8014264:	e7d2      	b.n	801420c <_svfiprintf_r+0xa0>
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	1d19      	adds	r1, r3, #4
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	9103      	str	r1, [sp, #12]
 801426e:	2b00      	cmp	r3, #0
 8014270:	bfbb      	ittet	lt
 8014272:	425b      	neglt	r3, r3
 8014274:	f042 0202 	orrlt.w	r2, r2, #2
 8014278:	9307      	strge	r3, [sp, #28]
 801427a:	9307      	strlt	r3, [sp, #28]
 801427c:	bfb8      	it	lt
 801427e:	9204      	strlt	r2, [sp, #16]
 8014280:	7823      	ldrb	r3, [r4, #0]
 8014282:	2b2e      	cmp	r3, #46	@ 0x2e
 8014284:	d10a      	bne.n	801429c <_svfiprintf_r+0x130>
 8014286:	7863      	ldrb	r3, [r4, #1]
 8014288:	2b2a      	cmp	r3, #42	@ 0x2a
 801428a:	d132      	bne.n	80142f2 <_svfiprintf_r+0x186>
 801428c:	9b03      	ldr	r3, [sp, #12]
 801428e:	1d1a      	adds	r2, r3, #4
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	9203      	str	r2, [sp, #12]
 8014294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014298:	3402      	adds	r4, #2
 801429a:	9305      	str	r3, [sp, #20]
 801429c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014360 <_svfiprintf_r+0x1f4>
 80142a0:	7821      	ldrb	r1, [r4, #0]
 80142a2:	2203      	movs	r2, #3
 80142a4:	4650      	mov	r0, sl
 80142a6:	f7ec f81b 	bl	80002e0 <memchr>
 80142aa:	b138      	cbz	r0, 80142bc <_svfiprintf_r+0x150>
 80142ac:	9b04      	ldr	r3, [sp, #16]
 80142ae:	eba0 000a 	sub.w	r0, r0, sl
 80142b2:	2240      	movs	r2, #64	@ 0x40
 80142b4:	4082      	lsls	r2, r0
 80142b6:	4313      	orrs	r3, r2
 80142b8:	3401      	adds	r4, #1
 80142ba:	9304      	str	r3, [sp, #16]
 80142bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142c0:	4824      	ldr	r0, [pc, #144]	@ (8014354 <_svfiprintf_r+0x1e8>)
 80142c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80142c6:	2206      	movs	r2, #6
 80142c8:	f7ec f80a 	bl	80002e0 <memchr>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	d036      	beq.n	801433e <_svfiprintf_r+0x1d2>
 80142d0:	4b21      	ldr	r3, [pc, #132]	@ (8014358 <_svfiprintf_r+0x1ec>)
 80142d2:	bb1b      	cbnz	r3, 801431c <_svfiprintf_r+0x1b0>
 80142d4:	9b03      	ldr	r3, [sp, #12]
 80142d6:	3307      	adds	r3, #7
 80142d8:	f023 0307 	bic.w	r3, r3, #7
 80142dc:	3308      	adds	r3, #8
 80142de:	9303      	str	r3, [sp, #12]
 80142e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142e2:	4433      	add	r3, r6
 80142e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80142e6:	e76a      	b.n	80141be <_svfiprintf_r+0x52>
 80142e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80142ec:	460c      	mov	r4, r1
 80142ee:	2001      	movs	r0, #1
 80142f0:	e7a8      	b.n	8014244 <_svfiprintf_r+0xd8>
 80142f2:	2300      	movs	r3, #0
 80142f4:	3401      	adds	r4, #1
 80142f6:	9305      	str	r3, [sp, #20]
 80142f8:	4619      	mov	r1, r3
 80142fa:	f04f 0c0a 	mov.w	ip, #10
 80142fe:	4620      	mov	r0, r4
 8014300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014304:	3a30      	subs	r2, #48	@ 0x30
 8014306:	2a09      	cmp	r2, #9
 8014308:	d903      	bls.n	8014312 <_svfiprintf_r+0x1a6>
 801430a:	2b00      	cmp	r3, #0
 801430c:	d0c6      	beq.n	801429c <_svfiprintf_r+0x130>
 801430e:	9105      	str	r1, [sp, #20]
 8014310:	e7c4      	b.n	801429c <_svfiprintf_r+0x130>
 8014312:	fb0c 2101 	mla	r1, ip, r1, r2
 8014316:	4604      	mov	r4, r0
 8014318:	2301      	movs	r3, #1
 801431a:	e7f0      	b.n	80142fe <_svfiprintf_r+0x192>
 801431c:	ab03      	add	r3, sp, #12
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	462a      	mov	r2, r5
 8014322:	4b0e      	ldr	r3, [pc, #56]	@ (801435c <_svfiprintf_r+0x1f0>)
 8014324:	a904      	add	r1, sp, #16
 8014326:	4638      	mov	r0, r7
 8014328:	f7fd ffae 	bl	8012288 <_printf_float>
 801432c:	1c42      	adds	r2, r0, #1
 801432e:	4606      	mov	r6, r0
 8014330:	d1d6      	bne.n	80142e0 <_svfiprintf_r+0x174>
 8014332:	89ab      	ldrh	r3, [r5, #12]
 8014334:	065b      	lsls	r3, r3, #25
 8014336:	f53f af2d 	bmi.w	8014194 <_svfiprintf_r+0x28>
 801433a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801433c:	e72c      	b.n	8014198 <_svfiprintf_r+0x2c>
 801433e:	ab03      	add	r3, sp, #12
 8014340:	9300      	str	r3, [sp, #0]
 8014342:	462a      	mov	r2, r5
 8014344:	4b05      	ldr	r3, [pc, #20]	@ (801435c <_svfiprintf_r+0x1f0>)
 8014346:	a904      	add	r1, sp, #16
 8014348:	4638      	mov	r0, r7
 801434a:	f7fe fa25 	bl	8012798 <_printf_i>
 801434e:	e7ed      	b.n	801432c <_svfiprintf_r+0x1c0>
 8014350:	080174f8 	.word	0x080174f8
 8014354:	08017502 	.word	0x08017502
 8014358:	08012289 	.word	0x08012289
 801435c:	080140b5 	.word	0x080140b5
 8014360:	080174fe 	.word	0x080174fe

08014364 <__sflush_r>:
 8014364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801436c:	0716      	lsls	r6, r2, #28
 801436e:	4605      	mov	r5, r0
 8014370:	460c      	mov	r4, r1
 8014372:	d454      	bmi.n	801441e <__sflush_r+0xba>
 8014374:	684b      	ldr	r3, [r1, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	dc02      	bgt.n	8014380 <__sflush_r+0x1c>
 801437a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801437c:	2b00      	cmp	r3, #0
 801437e:	dd48      	ble.n	8014412 <__sflush_r+0xae>
 8014380:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014382:	2e00      	cmp	r6, #0
 8014384:	d045      	beq.n	8014412 <__sflush_r+0xae>
 8014386:	2300      	movs	r3, #0
 8014388:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801438c:	682f      	ldr	r7, [r5, #0]
 801438e:	6a21      	ldr	r1, [r4, #32]
 8014390:	602b      	str	r3, [r5, #0]
 8014392:	d030      	beq.n	80143f6 <__sflush_r+0x92>
 8014394:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014396:	89a3      	ldrh	r3, [r4, #12]
 8014398:	0759      	lsls	r1, r3, #29
 801439a:	d505      	bpl.n	80143a8 <__sflush_r+0x44>
 801439c:	6863      	ldr	r3, [r4, #4]
 801439e:	1ad2      	subs	r2, r2, r3
 80143a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80143a2:	b10b      	cbz	r3, 80143a8 <__sflush_r+0x44>
 80143a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	2300      	movs	r3, #0
 80143aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80143ac:	6a21      	ldr	r1, [r4, #32]
 80143ae:	4628      	mov	r0, r5
 80143b0:	47b0      	blx	r6
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	89a3      	ldrh	r3, [r4, #12]
 80143b6:	d106      	bne.n	80143c6 <__sflush_r+0x62>
 80143b8:	6829      	ldr	r1, [r5, #0]
 80143ba:	291d      	cmp	r1, #29
 80143bc:	d82b      	bhi.n	8014416 <__sflush_r+0xb2>
 80143be:	4a2a      	ldr	r2, [pc, #168]	@ (8014468 <__sflush_r+0x104>)
 80143c0:	410a      	asrs	r2, r1
 80143c2:	07d6      	lsls	r6, r2, #31
 80143c4:	d427      	bmi.n	8014416 <__sflush_r+0xb2>
 80143c6:	2200      	movs	r2, #0
 80143c8:	6062      	str	r2, [r4, #4]
 80143ca:	04d9      	lsls	r1, r3, #19
 80143cc:	6922      	ldr	r2, [r4, #16]
 80143ce:	6022      	str	r2, [r4, #0]
 80143d0:	d504      	bpl.n	80143dc <__sflush_r+0x78>
 80143d2:	1c42      	adds	r2, r0, #1
 80143d4:	d101      	bne.n	80143da <__sflush_r+0x76>
 80143d6:	682b      	ldr	r3, [r5, #0]
 80143d8:	b903      	cbnz	r3, 80143dc <__sflush_r+0x78>
 80143da:	6560      	str	r0, [r4, #84]	@ 0x54
 80143dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80143de:	602f      	str	r7, [r5, #0]
 80143e0:	b1b9      	cbz	r1, 8014412 <__sflush_r+0xae>
 80143e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143e6:	4299      	cmp	r1, r3
 80143e8:	d002      	beq.n	80143f0 <__sflush_r+0x8c>
 80143ea:	4628      	mov	r0, r5
 80143ec:	f7ff fa96 	bl	801391c <_free_r>
 80143f0:	2300      	movs	r3, #0
 80143f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80143f4:	e00d      	b.n	8014412 <__sflush_r+0xae>
 80143f6:	2301      	movs	r3, #1
 80143f8:	4628      	mov	r0, r5
 80143fa:	47b0      	blx	r6
 80143fc:	4602      	mov	r2, r0
 80143fe:	1c50      	adds	r0, r2, #1
 8014400:	d1c9      	bne.n	8014396 <__sflush_r+0x32>
 8014402:	682b      	ldr	r3, [r5, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d0c6      	beq.n	8014396 <__sflush_r+0x32>
 8014408:	2b1d      	cmp	r3, #29
 801440a:	d001      	beq.n	8014410 <__sflush_r+0xac>
 801440c:	2b16      	cmp	r3, #22
 801440e:	d11e      	bne.n	801444e <__sflush_r+0xea>
 8014410:	602f      	str	r7, [r5, #0]
 8014412:	2000      	movs	r0, #0
 8014414:	e022      	b.n	801445c <__sflush_r+0xf8>
 8014416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801441a:	b21b      	sxth	r3, r3
 801441c:	e01b      	b.n	8014456 <__sflush_r+0xf2>
 801441e:	690f      	ldr	r7, [r1, #16]
 8014420:	2f00      	cmp	r7, #0
 8014422:	d0f6      	beq.n	8014412 <__sflush_r+0xae>
 8014424:	0793      	lsls	r3, r2, #30
 8014426:	680e      	ldr	r6, [r1, #0]
 8014428:	bf08      	it	eq
 801442a:	694b      	ldreq	r3, [r1, #20]
 801442c:	600f      	str	r7, [r1, #0]
 801442e:	bf18      	it	ne
 8014430:	2300      	movne	r3, #0
 8014432:	eba6 0807 	sub.w	r8, r6, r7
 8014436:	608b      	str	r3, [r1, #8]
 8014438:	f1b8 0f00 	cmp.w	r8, #0
 801443c:	dde9      	ble.n	8014412 <__sflush_r+0xae>
 801443e:	6a21      	ldr	r1, [r4, #32]
 8014440:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014442:	4643      	mov	r3, r8
 8014444:	463a      	mov	r2, r7
 8014446:	4628      	mov	r0, r5
 8014448:	47b0      	blx	r6
 801444a:	2800      	cmp	r0, #0
 801444c:	dc08      	bgt.n	8014460 <__sflush_r+0xfc>
 801444e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014456:	81a3      	strh	r3, [r4, #12]
 8014458:	f04f 30ff 	mov.w	r0, #4294967295
 801445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014460:	4407      	add	r7, r0
 8014462:	eba8 0800 	sub.w	r8, r8, r0
 8014466:	e7e7      	b.n	8014438 <__sflush_r+0xd4>
 8014468:	dfbffffe 	.word	0xdfbffffe

0801446c <_fflush_r>:
 801446c:	b538      	push	{r3, r4, r5, lr}
 801446e:	690b      	ldr	r3, [r1, #16]
 8014470:	4605      	mov	r5, r0
 8014472:	460c      	mov	r4, r1
 8014474:	b913      	cbnz	r3, 801447c <_fflush_r+0x10>
 8014476:	2500      	movs	r5, #0
 8014478:	4628      	mov	r0, r5
 801447a:	bd38      	pop	{r3, r4, r5, pc}
 801447c:	b118      	cbz	r0, 8014486 <_fflush_r+0x1a>
 801447e:	6a03      	ldr	r3, [r0, #32]
 8014480:	b90b      	cbnz	r3, 8014486 <_fflush_r+0x1a>
 8014482:	f7fe fb35 	bl	8012af0 <__sinit>
 8014486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d0f3      	beq.n	8014476 <_fflush_r+0xa>
 801448e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014490:	07d0      	lsls	r0, r2, #31
 8014492:	d404      	bmi.n	801449e <_fflush_r+0x32>
 8014494:	0599      	lsls	r1, r3, #22
 8014496:	d402      	bmi.n	801449e <_fflush_r+0x32>
 8014498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801449a:	f7fe fc50 	bl	8012d3e <__retarget_lock_acquire_recursive>
 801449e:	4628      	mov	r0, r5
 80144a0:	4621      	mov	r1, r4
 80144a2:	f7ff ff5f 	bl	8014364 <__sflush_r>
 80144a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144a8:	07da      	lsls	r2, r3, #31
 80144aa:	4605      	mov	r5, r0
 80144ac:	d4e4      	bmi.n	8014478 <_fflush_r+0xc>
 80144ae:	89a3      	ldrh	r3, [r4, #12]
 80144b0:	059b      	lsls	r3, r3, #22
 80144b2:	d4e1      	bmi.n	8014478 <_fflush_r+0xc>
 80144b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144b6:	f7fe fc43 	bl	8012d40 <__retarget_lock_release_recursive>
 80144ba:	e7dd      	b.n	8014478 <_fflush_r+0xc>

080144bc <memmove>:
 80144bc:	4288      	cmp	r0, r1
 80144be:	b510      	push	{r4, lr}
 80144c0:	eb01 0402 	add.w	r4, r1, r2
 80144c4:	d902      	bls.n	80144cc <memmove+0x10>
 80144c6:	4284      	cmp	r4, r0
 80144c8:	4623      	mov	r3, r4
 80144ca:	d807      	bhi.n	80144dc <memmove+0x20>
 80144cc:	1e43      	subs	r3, r0, #1
 80144ce:	42a1      	cmp	r1, r4
 80144d0:	d008      	beq.n	80144e4 <memmove+0x28>
 80144d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80144da:	e7f8      	b.n	80144ce <memmove+0x12>
 80144dc:	4402      	add	r2, r0
 80144de:	4601      	mov	r1, r0
 80144e0:	428a      	cmp	r2, r1
 80144e2:	d100      	bne.n	80144e6 <memmove+0x2a>
 80144e4:	bd10      	pop	{r4, pc}
 80144e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80144ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80144ee:	e7f7      	b.n	80144e0 <memmove+0x24>

080144f0 <__assert_func>:
 80144f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144f2:	4614      	mov	r4, r2
 80144f4:	461a      	mov	r2, r3
 80144f6:	4b09      	ldr	r3, [pc, #36]	@ (801451c <__assert_func+0x2c>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4605      	mov	r5, r0
 80144fc:	68d8      	ldr	r0, [r3, #12]
 80144fe:	b954      	cbnz	r4, 8014516 <__assert_func+0x26>
 8014500:	4b07      	ldr	r3, [pc, #28]	@ (8014520 <__assert_func+0x30>)
 8014502:	461c      	mov	r4, r3
 8014504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014508:	9100      	str	r1, [sp, #0]
 801450a:	462b      	mov	r3, r5
 801450c:	4905      	ldr	r1, [pc, #20]	@ (8014524 <__assert_func+0x34>)
 801450e:	f000 f86f 	bl	80145f0 <fiprintf>
 8014512:	f000 f87f 	bl	8014614 <abort>
 8014516:	4b04      	ldr	r3, [pc, #16]	@ (8014528 <__assert_func+0x38>)
 8014518:	e7f4      	b.n	8014504 <__assert_func+0x14>
 801451a:	bf00      	nop
 801451c:	24000138 	.word	0x24000138
 8014520:	0801754e 	.word	0x0801754e
 8014524:	08017520 	.word	0x08017520
 8014528:	08017513 	.word	0x08017513

0801452c <_calloc_r>:
 801452c:	b570      	push	{r4, r5, r6, lr}
 801452e:	fba1 5402 	umull	r5, r4, r1, r2
 8014532:	b93c      	cbnz	r4, 8014544 <_calloc_r+0x18>
 8014534:	4629      	mov	r1, r5
 8014536:	f7fd fd8b 	bl	8012050 <_malloc_r>
 801453a:	4606      	mov	r6, r0
 801453c:	b928      	cbnz	r0, 801454a <_calloc_r+0x1e>
 801453e:	2600      	movs	r6, #0
 8014540:	4630      	mov	r0, r6
 8014542:	bd70      	pop	{r4, r5, r6, pc}
 8014544:	220c      	movs	r2, #12
 8014546:	6002      	str	r2, [r0, #0]
 8014548:	e7f9      	b.n	801453e <_calloc_r+0x12>
 801454a:	462a      	mov	r2, r5
 801454c:	4621      	mov	r1, r4
 801454e:	f7fe fb68 	bl	8012c22 <memset>
 8014552:	e7f5      	b.n	8014540 <_calloc_r+0x14>

08014554 <__ascii_mbtowc>:
 8014554:	b082      	sub	sp, #8
 8014556:	b901      	cbnz	r1, 801455a <__ascii_mbtowc+0x6>
 8014558:	a901      	add	r1, sp, #4
 801455a:	b142      	cbz	r2, 801456e <__ascii_mbtowc+0x1a>
 801455c:	b14b      	cbz	r3, 8014572 <__ascii_mbtowc+0x1e>
 801455e:	7813      	ldrb	r3, [r2, #0]
 8014560:	600b      	str	r3, [r1, #0]
 8014562:	7812      	ldrb	r2, [r2, #0]
 8014564:	1e10      	subs	r0, r2, #0
 8014566:	bf18      	it	ne
 8014568:	2001      	movne	r0, #1
 801456a:	b002      	add	sp, #8
 801456c:	4770      	bx	lr
 801456e:	4610      	mov	r0, r2
 8014570:	e7fb      	b.n	801456a <__ascii_mbtowc+0x16>
 8014572:	f06f 0001 	mvn.w	r0, #1
 8014576:	e7f8      	b.n	801456a <__ascii_mbtowc+0x16>

08014578 <_realloc_r>:
 8014578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457c:	4680      	mov	r8, r0
 801457e:	4615      	mov	r5, r2
 8014580:	460c      	mov	r4, r1
 8014582:	b921      	cbnz	r1, 801458e <_realloc_r+0x16>
 8014584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014588:	4611      	mov	r1, r2
 801458a:	f7fd bd61 	b.w	8012050 <_malloc_r>
 801458e:	b92a      	cbnz	r2, 801459c <_realloc_r+0x24>
 8014590:	f7ff f9c4 	bl	801391c <_free_r>
 8014594:	2400      	movs	r4, #0
 8014596:	4620      	mov	r0, r4
 8014598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801459c:	f000 f841 	bl	8014622 <_malloc_usable_size_r>
 80145a0:	4285      	cmp	r5, r0
 80145a2:	4606      	mov	r6, r0
 80145a4:	d802      	bhi.n	80145ac <_realloc_r+0x34>
 80145a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80145aa:	d8f4      	bhi.n	8014596 <_realloc_r+0x1e>
 80145ac:	4629      	mov	r1, r5
 80145ae:	4640      	mov	r0, r8
 80145b0:	f7fd fd4e 	bl	8012050 <_malloc_r>
 80145b4:	4607      	mov	r7, r0
 80145b6:	2800      	cmp	r0, #0
 80145b8:	d0ec      	beq.n	8014594 <_realloc_r+0x1c>
 80145ba:	42b5      	cmp	r5, r6
 80145bc:	462a      	mov	r2, r5
 80145be:	4621      	mov	r1, r4
 80145c0:	bf28      	it	cs
 80145c2:	4632      	movcs	r2, r6
 80145c4:	f7fe fbbd 	bl	8012d42 <memcpy>
 80145c8:	4621      	mov	r1, r4
 80145ca:	4640      	mov	r0, r8
 80145cc:	f7ff f9a6 	bl	801391c <_free_r>
 80145d0:	463c      	mov	r4, r7
 80145d2:	e7e0      	b.n	8014596 <_realloc_r+0x1e>

080145d4 <__ascii_wctomb>:
 80145d4:	4603      	mov	r3, r0
 80145d6:	4608      	mov	r0, r1
 80145d8:	b141      	cbz	r1, 80145ec <__ascii_wctomb+0x18>
 80145da:	2aff      	cmp	r2, #255	@ 0xff
 80145dc:	d904      	bls.n	80145e8 <__ascii_wctomb+0x14>
 80145de:	228a      	movs	r2, #138	@ 0x8a
 80145e0:	601a      	str	r2, [r3, #0]
 80145e2:	f04f 30ff 	mov.w	r0, #4294967295
 80145e6:	4770      	bx	lr
 80145e8:	700a      	strb	r2, [r1, #0]
 80145ea:	2001      	movs	r0, #1
 80145ec:	4770      	bx	lr
	...

080145f0 <fiprintf>:
 80145f0:	b40e      	push	{r1, r2, r3}
 80145f2:	b503      	push	{r0, r1, lr}
 80145f4:	4601      	mov	r1, r0
 80145f6:	ab03      	add	r3, sp, #12
 80145f8:	4805      	ldr	r0, [pc, #20]	@ (8014610 <fiprintf+0x20>)
 80145fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80145fe:	6800      	ldr	r0, [r0, #0]
 8014600:	9301      	str	r3, [sp, #4]
 8014602:	f000 f83f 	bl	8014684 <_vfiprintf_r>
 8014606:	b002      	add	sp, #8
 8014608:	f85d eb04 	ldr.w	lr, [sp], #4
 801460c:	b003      	add	sp, #12
 801460e:	4770      	bx	lr
 8014610:	24000138 	.word	0x24000138

08014614 <abort>:
 8014614:	b508      	push	{r3, lr}
 8014616:	2006      	movs	r0, #6
 8014618:	f000 fa08 	bl	8014a2c <raise>
 801461c:	2001      	movs	r0, #1
 801461e:	f7ed f8a5 	bl	800176c <_exit>

08014622 <_malloc_usable_size_r>:
 8014622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014626:	1f18      	subs	r0, r3, #4
 8014628:	2b00      	cmp	r3, #0
 801462a:	bfbc      	itt	lt
 801462c:	580b      	ldrlt	r3, [r1, r0]
 801462e:	18c0      	addlt	r0, r0, r3
 8014630:	4770      	bx	lr

08014632 <__sfputc_r>:
 8014632:	6893      	ldr	r3, [r2, #8]
 8014634:	3b01      	subs	r3, #1
 8014636:	2b00      	cmp	r3, #0
 8014638:	b410      	push	{r4}
 801463a:	6093      	str	r3, [r2, #8]
 801463c:	da08      	bge.n	8014650 <__sfputc_r+0x1e>
 801463e:	6994      	ldr	r4, [r2, #24]
 8014640:	42a3      	cmp	r3, r4
 8014642:	db01      	blt.n	8014648 <__sfputc_r+0x16>
 8014644:	290a      	cmp	r1, #10
 8014646:	d103      	bne.n	8014650 <__sfputc_r+0x1e>
 8014648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801464c:	f000 b932 	b.w	80148b4 <__swbuf_r>
 8014650:	6813      	ldr	r3, [r2, #0]
 8014652:	1c58      	adds	r0, r3, #1
 8014654:	6010      	str	r0, [r2, #0]
 8014656:	7019      	strb	r1, [r3, #0]
 8014658:	4608      	mov	r0, r1
 801465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801465e:	4770      	bx	lr

08014660 <__sfputs_r>:
 8014660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014662:	4606      	mov	r6, r0
 8014664:	460f      	mov	r7, r1
 8014666:	4614      	mov	r4, r2
 8014668:	18d5      	adds	r5, r2, r3
 801466a:	42ac      	cmp	r4, r5
 801466c:	d101      	bne.n	8014672 <__sfputs_r+0x12>
 801466e:	2000      	movs	r0, #0
 8014670:	e007      	b.n	8014682 <__sfputs_r+0x22>
 8014672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014676:	463a      	mov	r2, r7
 8014678:	4630      	mov	r0, r6
 801467a:	f7ff ffda 	bl	8014632 <__sfputc_r>
 801467e:	1c43      	adds	r3, r0, #1
 8014680:	d1f3      	bne.n	801466a <__sfputs_r+0xa>
 8014682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014684 <_vfiprintf_r>:
 8014684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014688:	460d      	mov	r5, r1
 801468a:	b09d      	sub	sp, #116	@ 0x74
 801468c:	4614      	mov	r4, r2
 801468e:	4698      	mov	r8, r3
 8014690:	4606      	mov	r6, r0
 8014692:	b118      	cbz	r0, 801469c <_vfiprintf_r+0x18>
 8014694:	6a03      	ldr	r3, [r0, #32]
 8014696:	b90b      	cbnz	r3, 801469c <_vfiprintf_r+0x18>
 8014698:	f7fe fa2a 	bl	8012af0 <__sinit>
 801469c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801469e:	07d9      	lsls	r1, r3, #31
 80146a0:	d405      	bmi.n	80146ae <_vfiprintf_r+0x2a>
 80146a2:	89ab      	ldrh	r3, [r5, #12]
 80146a4:	059a      	lsls	r2, r3, #22
 80146a6:	d402      	bmi.n	80146ae <_vfiprintf_r+0x2a>
 80146a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146aa:	f7fe fb48 	bl	8012d3e <__retarget_lock_acquire_recursive>
 80146ae:	89ab      	ldrh	r3, [r5, #12]
 80146b0:	071b      	lsls	r3, r3, #28
 80146b2:	d501      	bpl.n	80146b8 <_vfiprintf_r+0x34>
 80146b4:	692b      	ldr	r3, [r5, #16]
 80146b6:	b99b      	cbnz	r3, 80146e0 <_vfiprintf_r+0x5c>
 80146b8:	4629      	mov	r1, r5
 80146ba:	4630      	mov	r0, r6
 80146bc:	f000 f938 	bl	8014930 <__swsetup_r>
 80146c0:	b170      	cbz	r0, 80146e0 <_vfiprintf_r+0x5c>
 80146c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80146c4:	07dc      	lsls	r4, r3, #31
 80146c6:	d504      	bpl.n	80146d2 <_vfiprintf_r+0x4e>
 80146c8:	f04f 30ff 	mov.w	r0, #4294967295
 80146cc:	b01d      	add	sp, #116	@ 0x74
 80146ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d2:	89ab      	ldrh	r3, [r5, #12]
 80146d4:	0598      	lsls	r0, r3, #22
 80146d6:	d4f7      	bmi.n	80146c8 <_vfiprintf_r+0x44>
 80146d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146da:	f7fe fb31 	bl	8012d40 <__retarget_lock_release_recursive>
 80146de:	e7f3      	b.n	80146c8 <_vfiprintf_r+0x44>
 80146e0:	2300      	movs	r3, #0
 80146e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80146e4:	2320      	movs	r3, #32
 80146e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80146ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80146ee:	2330      	movs	r3, #48	@ 0x30
 80146f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80148a0 <_vfiprintf_r+0x21c>
 80146f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80146f8:	f04f 0901 	mov.w	r9, #1
 80146fc:	4623      	mov	r3, r4
 80146fe:	469a      	mov	sl, r3
 8014700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014704:	b10a      	cbz	r2, 801470a <_vfiprintf_r+0x86>
 8014706:	2a25      	cmp	r2, #37	@ 0x25
 8014708:	d1f9      	bne.n	80146fe <_vfiprintf_r+0x7a>
 801470a:	ebba 0b04 	subs.w	fp, sl, r4
 801470e:	d00b      	beq.n	8014728 <_vfiprintf_r+0xa4>
 8014710:	465b      	mov	r3, fp
 8014712:	4622      	mov	r2, r4
 8014714:	4629      	mov	r1, r5
 8014716:	4630      	mov	r0, r6
 8014718:	f7ff ffa2 	bl	8014660 <__sfputs_r>
 801471c:	3001      	adds	r0, #1
 801471e:	f000 80a7 	beq.w	8014870 <_vfiprintf_r+0x1ec>
 8014722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014724:	445a      	add	r2, fp
 8014726:	9209      	str	r2, [sp, #36]	@ 0x24
 8014728:	f89a 3000 	ldrb.w	r3, [sl]
 801472c:	2b00      	cmp	r3, #0
 801472e:	f000 809f 	beq.w	8014870 <_vfiprintf_r+0x1ec>
 8014732:	2300      	movs	r3, #0
 8014734:	f04f 32ff 	mov.w	r2, #4294967295
 8014738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801473c:	f10a 0a01 	add.w	sl, sl, #1
 8014740:	9304      	str	r3, [sp, #16]
 8014742:	9307      	str	r3, [sp, #28]
 8014744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014748:	931a      	str	r3, [sp, #104]	@ 0x68
 801474a:	4654      	mov	r4, sl
 801474c:	2205      	movs	r2, #5
 801474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014752:	4853      	ldr	r0, [pc, #332]	@ (80148a0 <_vfiprintf_r+0x21c>)
 8014754:	f7eb fdc4 	bl	80002e0 <memchr>
 8014758:	9a04      	ldr	r2, [sp, #16]
 801475a:	b9d8      	cbnz	r0, 8014794 <_vfiprintf_r+0x110>
 801475c:	06d1      	lsls	r1, r2, #27
 801475e:	bf44      	itt	mi
 8014760:	2320      	movmi	r3, #32
 8014762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014766:	0713      	lsls	r3, r2, #28
 8014768:	bf44      	itt	mi
 801476a:	232b      	movmi	r3, #43	@ 0x2b
 801476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014770:	f89a 3000 	ldrb.w	r3, [sl]
 8014774:	2b2a      	cmp	r3, #42	@ 0x2a
 8014776:	d015      	beq.n	80147a4 <_vfiprintf_r+0x120>
 8014778:	9a07      	ldr	r2, [sp, #28]
 801477a:	4654      	mov	r4, sl
 801477c:	2000      	movs	r0, #0
 801477e:	f04f 0c0a 	mov.w	ip, #10
 8014782:	4621      	mov	r1, r4
 8014784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014788:	3b30      	subs	r3, #48	@ 0x30
 801478a:	2b09      	cmp	r3, #9
 801478c:	d94b      	bls.n	8014826 <_vfiprintf_r+0x1a2>
 801478e:	b1b0      	cbz	r0, 80147be <_vfiprintf_r+0x13a>
 8014790:	9207      	str	r2, [sp, #28]
 8014792:	e014      	b.n	80147be <_vfiprintf_r+0x13a>
 8014794:	eba0 0308 	sub.w	r3, r0, r8
 8014798:	fa09 f303 	lsl.w	r3, r9, r3
 801479c:	4313      	orrs	r3, r2
 801479e:	9304      	str	r3, [sp, #16]
 80147a0:	46a2      	mov	sl, r4
 80147a2:	e7d2      	b.n	801474a <_vfiprintf_r+0xc6>
 80147a4:	9b03      	ldr	r3, [sp, #12]
 80147a6:	1d19      	adds	r1, r3, #4
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	9103      	str	r1, [sp, #12]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	bfbb      	ittet	lt
 80147b0:	425b      	neglt	r3, r3
 80147b2:	f042 0202 	orrlt.w	r2, r2, #2
 80147b6:	9307      	strge	r3, [sp, #28]
 80147b8:	9307      	strlt	r3, [sp, #28]
 80147ba:	bfb8      	it	lt
 80147bc:	9204      	strlt	r2, [sp, #16]
 80147be:	7823      	ldrb	r3, [r4, #0]
 80147c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80147c2:	d10a      	bne.n	80147da <_vfiprintf_r+0x156>
 80147c4:	7863      	ldrb	r3, [r4, #1]
 80147c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80147c8:	d132      	bne.n	8014830 <_vfiprintf_r+0x1ac>
 80147ca:	9b03      	ldr	r3, [sp, #12]
 80147cc:	1d1a      	adds	r2, r3, #4
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	9203      	str	r2, [sp, #12]
 80147d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80147d6:	3402      	adds	r4, #2
 80147d8:	9305      	str	r3, [sp, #20]
 80147da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80148b0 <_vfiprintf_r+0x22c>
 80147de:	7821      	ldrb	r1, [r4, #0]
 80147e0:	2203      	movs	r2, #3
 80147e2:	4650      	mov	r0, sl
 80147e4:	f7eb fd7c 	bl	80002e0 <memchr>
 80147e8:	b138      	cbz	r0, 80147fa <_vfiprintf_r+0x176>
 80147ea:	9b04      	ldr	r3, [sp, #16]
 80147ec:	eba0 000a 	sub.w	r0, r0, sl
 80147f0:	2240      	movs	r2, #64	@ 0x40
 80147f2:	4082      	lsls	r2, r0
 80147f4:	4313      	orrs	r3, r2
 80147f6:	3401      	adds	r4, #1
 80147f8:	9304      	str	r3, [sp, #16]
 80147fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147fe:	4829      	ldr	r0, [pc, #164]	@ (80148a4 <_vfiprintf_r+0x220>)
 8014800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014804:	2206      	movs	r2, #6
 8014806:	f7eb fd6b 	bl	80002e0 <memchr>
 801480a:	2800      	cmp	r0, #0
 801480c:	d03f      	beq.n	801488e <_vfiprintf_r+0x20a>
 801480e:	4b26      	ldr	r3, [pc, #152]	@ (80148a8 <_vfiprintf_r+0x224>)
 8014810:	bb1b      	cbnz	r3, 801485a <_vfiprintf_r+0x1d6>
 8014812:	9b03      	ldr	r3, [sp, #12]
 8014814:	3307      	adds	r3, #7
 8014816:	f023 0307 	bic.w	r3, r3, #7
 801481a:	3308      	adds	r3, #8
 801481c:	9303      	str	r3, [sp, #12]
 801481e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014820:	443b      	add	r3, r7
 8014822:	9309      	str	r3, [sp, #36]	@ 0x24
 8014824:	e76a      	b.n	80146fc <_vfiprintf_r+0x78>
 8014826:	fb0c 3202 	mla	r2, ip, r2, r3
 801482a:	460c      	mov	r4, r1
 801482c:	2001      	movs	r0, #1
 801482e:	e7a8      	b.n	8014782 <_vfiprintf_r+0xfe>
 8014830:	2300      	movs	r3, #0
 8014832:	3401      	adds	r4, #1
 8014834:	9305      	str	r3, [sp, #20]
 8014836:	4619      	mov	r1, r3
 8014838:	f04f 0c0a 	mov.w	ip, #10
 801483c:	4620      	mov	r0, r4
 801483e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014842:	3a30      	subs	r2, #48	@ 0x30
 8014844:	2a09      	cmp	r2, #9
 8014846:	d903      	bls.n	8014850 <_vfiprintf_r+0x1cc>
 8014848:	2b00      	cmp	r3, #0
 801484a:	d0c6      	beq.n	80147da <_vfiprintf_r+0x156>
 801484c:	9105      	str	r1, [sp, #20]
 801484e:	e7c4      	b.n	80147da <_vfiprintf_r+0x156>
 8014850:	fb0c 2101 	mla	r1, ip, r1, r2
 8014854:	4604      	mov	r4, r0
 8014856:	2301      	movs	r3, #1
 8014858:	e7f0      	b.n	801483c <_vfiprintf_r+0x1b8>
 801485a:	ab03      	add	r3, sp, #12
 801485c:	9300      	str	r3, [sp, #0]
 801485e:	462a      	mov	r2, r5
 8014860:	4b12      	ldr	r3, [pc, #72]	@ (80148ac <_vfiprintf_r+0x228>)
 8014862:	a904      	add	r1, sp, #16
 8014864:	4630      	mov	r0, r6
 8014866:	f7fd fd0f 	bl	8012288 <_printf_float>
 801486a:	4607      	mov	r7, r0
 801486c:	1c78      	adds	r0, r7, #1
 801486e:	d1d6      	bne.n	801481e <_vfiprintf_r+0x19a>
 8014870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014872:	07d9      	lsls	r1, r3, #31
 8014874:	d405      	bmi.n	8014882 <_vfiprintf_r+0x1fe>
 8014876:	89ab      	ldrh	r3, [r5, #12]
 8014878:	059a      	lsls	r2, r3, #22
 801487a:	d402      	bmi.n	8014882 <_vfiprintf_r+0x1fe>
 801487c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801487e:	f7fe fa5f 	bl	8012d40 <__retarget_lock_release_recursive>
 8014882:	89ab      	ldrh	r3, [r5, #12]
 8014884:	065b      	lsls	r3, r3, #25
 8014886:	f53f af1f 	bmi.w	80146c8 <_vfiprintf_r+0x44>
 801488a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801488c:	e71e      	b.n	80146cc <_vfiprintf_r+0x48>
 801488e:	ab03      	add	r3, sp, #12
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	462a      	mov	r2, r5
 8014894:	4b05      	ldr	r3, [pc, #20]	@ (80148ac <_vfiprintf_r+0x228>)
 8014896:	a904      	add	r1, sp, #16
 8014898:	4630      	mov	r0, r6
 801489a:	f7fd ff7d 	bl	8012798 <_printf_i>
 801489e:	e7e4      	b.n	801486a <_vfiprintf_r+0x1e6>
 80148a0:	080174f8 	.word	0x080174f8
 80148a4:	08017502 	.word	0x08017502
 80148a8:	08012289 	.word	0x08012289
 80148ac:	08014661 	.word	0x08014661
 80148b0:	080174fe 	.word	0x080174fe

080148b4 <__swbuf_r>:
 80148b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148b6:	460e      	mov	r6, r1
 80148b8:	4614      	mov	r4, r2
 80148ba:	4605      	mov	r5, r0
 80148bc:	b118      	cbz	r0, 80148c6 <__swbuf_r+0x12>
 80148be:	6a03      	ldr	r3, [r0, #32]
 80148c0:	b90b      	cbnz	r3, 80148c6 <__swbuf_r+0x12>
 80148c2:	f7fe f915 	bl	8012af0 <__sinit>
 80148c6:	69a3      	ldr	r3, [r4, #24]
 80148c8:	60a3      	str	r3, [r4, #8]
 80148ca:	89a3      	ldrh	r3, [r4, #12]
 80148cc:	071a      	lsls	r2, r3, #28
 80148ce:	d501      	bpl.n	80148d4 <__swbuf_r+0x20>
 80148d0:	6923      	ldr	r3, [r4, #16]
 80148d2:	b943      	cbnz	r3, 80148e6 <__swbuf_r+0x32>
 80148d4:	4621      	mov	r1, r4
 80148d6:	4628      	mov	r0, r5
 80148d8:	f000 f82a 	bl	8014930 <__swsetup_r>
 80148dc:	b118      	cbz	r0, 80148e6 <__swbuf_r+0x32>
 80148de:	f04f 37ff 	mov.w	r7, #4294967295
 80148e2:	4638      	mov	r0, r7
 80148e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	6922      	ldr	r2, [r4, #16]
 80148ea:	1a98      	subs	r0, r3, r2
 80148ec:	6963      	ldr	r3, [r4, #20]
 80148ee:	b2f6      	uxtb	r6, r6
 80148f0:	4283      	cmp	r3, r0
 80148f2:	4637      	mov	r7, r6
 80148f4:	dc05      	bgt.n	8014902 <__swbuf_r+0x4e>
 80148f6:	4621      	mov	r1, r4
 80148f8:	4628      	mov	r0, r5
 80148fa:	f7ff fdb7 	bl	801446c <_fflush_r>
 80148fe:	2800      	cmp	r0, #0
 8014900:	d1ed      	bne.n	80148de <__swbuf_r+0x2a>
 8014902:	68a3      	ldr	r3, [r4, #8]
 8014904:	3b01      	subs	r3, #1
 8014906:	60a3      	str	r3, [r4, #8]
 8014908:	6823      	ldr	r3, [r4, #0]
 801490a:	1c5a      	adds	r2, r3, #1
 801490c:	6022      	str	r2, [r4, #0]
 801490e:	701e      	strb	r6, [r3, #0]
 8014910:	6962      	ldr	r2, [r4, #20]
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	429a      	cmp	r2, r3
 8014916:	d004      	beq.n	8014922 <__swbuf_r+0x6e>
 8014918:	89a3      	ldrh	r3, [r4, #12]
 801491a:	07db      	lsls	r3, r3, #31
 801491c:	d5e1      	bpl.n	80148e2 <__swbuf_r+0x2e>
 801491e:	2e0a      	cmp	r6, #10
 8014920:	d1df      	bne.n	80148e2 <__swbuf_r+0x2e>
 8014922:	4621      	mov	r1, r4
 8014924:	4628      	mov	r0, r5
 8014926:	f7ff fda1 	bl	801446c <_fflush_r>
 801492a:	2800      	cmp	r0, #0
 801492c:	d0d9      	beq.n	80148e2 <__swbuf_r+0x2e>
 801492e:	e7d6      	b.n	80148de <__swbuf_r+0x2a>

08014930 <__swsetup_r>:
 8014930:	b538      	push	{r3, r4, r5, lr}
 8014932:	4b29      	ldr	r3, [pc, #164]	@ (80149d8 <__swsetup_r+0xa8>)
 8014934:	4605      	mov	r5, r0
 8014936:	6818      	ldr	r0, [r3, #0]
 8014938:	460c      	mov	r4, r1
 801493a:	b118      	cbz	r0, 8014944 <__swsetup_r+0x14>
 801493c:	6a03      	ldr	r3, [r0, #32]
 801493e:	b90b      	cbnz	r3, 8014944 <__swsetup_r+0x14>
 8014940:	f7fe f8d6 	bl	8012af0 <__sinit>
 8014944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014948:	0719      	lsls	r1, r3, #28
 801494a:	d422      	bmi.n	8014992 <__swsetup_r+0x62>
 801494c:	06da      	lsls	r2, r3, #27
 801494e:	d407      	bmi.n	8014960 <__swsetup_r+0x30>
 8014950:	2209      	movs	r2, #9
 8014952:	602a      	str	r2, [r5, #0]
 8014954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014958:	81a3      	strh	r3, [r4, #12]
 801495a:	f04f 30ff 	mov.w	r0, #4294967295
 801495e:	e033      	b.n	80149c8 <__swsetup_r+0x98>
 8014960:	0758      	lsls	r0, r3, #29
 8014962:	d512      	bpl.n	801498a <__swsetup_r+0x5a>
 8014964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014966:	b141      	cbz	r1, 801497a <__swsetup_r+0x4a>
 8014968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801496c:	4299      	cmp	r1, r3
 801496e:	d002      	beq.n	8014976 <__swsetup_r+0x46>
 8014970:	4628      	mov	r0, r5
 8014972:	f7fe ffd3 	bl	801391c <_free_r>
 8014976:	2300      	movs	r3, #0
 8014978:	6363      	str	r3, [r4, #52]	@ 0x34
 801497a:	89a3      	ldrh	r3, [r4, #12]
 801497c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014980:	81a3      	strh	r3, [r4, #12]
 8014982:	2300      	movs	r3, #0
 8014984:	6063      	str	r3, [r4, #4]
 8014986:	6923      	ldr	r3, [r4, #16]
 8014988:	6023      	str	r3, [r4, #0]
 801498a:	89a3      	ldrh	r3, [r4, #12]
 801498c:	f043 0308 	orr.w	r3, r3, #8
 8014990:	81a3      	strh	r3, [r4, #12]
 8014992:	6923      	ldr	r3, [r4, #16]
 8014994:	b94b      	cbnz	r3, 80149aa <__swsetup_r+0x7a>
 8014996:	89a3      	ldrh	r3, [r4, #12]
 8014998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801499c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80149a0:	d003      	beq.n	80149aa <__swsetup_r+0x7a>
 80149a2:	4621      	mov	r1, r4
 80149a4:	4628      	mov	r0, r5
 80149a6:	f000 f883 	bl	8014ab0 <__smakebuf_r>
 80149aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149ae:	f013 0201 	ands.w	r2, r3, #1
 80149b2:	d00a      	beq.n	80149ca <__swsetup_r+0x9a>
 80149b4:	2200      	movs	r2, #0
 80149b6:	60a2      	str	r2, [r4, #8]
 80149b8:	6962      	ldr	r2, [r4, #20]
 80149ba:	4252      	negs	r2, r2
 80149bc:	61a2      	str	r2, [r4, #24]
 80149be:	6922      	ldr	r2, [r4, #16]
 80149c0:	b942      	cbnz	r2, 80149d4 <__swsetup_r+0xa4>
 80149c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80149c6:	d1c5      	bne.n	8014954 <__swsetup_r+0x24>
 80149c8:	bd38      	pop	{r3, r4, r5, pc}
 80149ca:	0799      	lsls	r1, r3, #30
 80149cc:	bf58      	it	pl
 80149ce:	6962      	ldrpl	r2, [r4, #20]
 80149d0:	60a2      	str	r2, [r4, #8]
 80149d2:	e7f4      	b.n	80149be <__swsetup_r+0x8e>
 80149d4:	2000      	movs	r0, #0
 80149d6:	e7f7      	b.n	80149c8 <__swsetup_r+0x98>
 80149d8:	24000138 	.word	0x24000138

080149dc <_raise_r>:
 80149dc:	291f      	cmp	r1, #31
 80149de:	b538      	push	{r3, r4, r5, lr}
 80149e0:	4605      	mov	r5, r0
 80149e2:	460c      	mov	r4, r1
 80149e4:	d904      	bls.n	80149f0 <_raise_r+0x14>
 80149e6:	2316      	movs	r3, #22
 80149e8:	6003      	str	r3, [r0, #0]
 80149ea:	f04f 30ff 	mov.w	r0, #4294967295
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80149f2:	b112      	cbz	r2, 80149fa <_raise_r+0x1e>
 80149f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80149f8:	b94b      	cbnz	r3, 8014a0e <_raise_r+0x32>
 80149fa:	4628      	mov	r0, r5
 80149fc:	f000 f830 	bl	8014a60 <_getpid_r>
 8014a00:	4622      	mov	r2, r4
 8014a02:	4601      	mov	r1, r0
 8014a04:	4628      	mov	r0, r5
 8014a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a0a:	f000 b817 	b.w	8014a3c <_kill_r>
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	d00a      	beq.n	8014a28 <_raise_r+0x4c>
 8014a12:	1c59      	adds	r1, r3, #1
 8014a14:	d103      	bne.n	8014a1e <_raise_r+0x42>
 8014a16:	2316      	movs	r3, #22
 8014a18:	6003      	str	r3, [r0, #0]
 8014a1a:	2001      	movs	r0, #1
 8014a1c:	e7e7      	b.n	80149ee <_raise_r+0x12>
 8014a1e:	2100      	movs	r1, #0
 8014a20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014a24:	4620      	mov	r0, r4
 8014a26:	4798      	blx	r3
 8014a28:	2000      	movs	r0, #0
 8014a2a:	e7e0      	b.n	80149ee <_raise_r+0x12>

08014a2c <raise>:
 8014a2c:	4b02      	ldr	r3, [pc, #8]	@ (8014a38 <raise+0xc>)
 8014a2e:	4601      	mov	r1, r0
 8014a30:	6818      	ldr	r0, [r3, #0]
 8014a32:	f7ff bfd3 	b.w	80149dc <_raise_r>
 8014a36:	bf00      	nop
 8014a38:	24000138 	.word	0x24000138

08014a3c <_kill_r>:
 8014a3c:	b538      	push	{r3, r4, r5, lr}
 8014a3e:	4d07      	ldr	r5, [pc, #28]	@ (8014a5c <_kill_r+0x20>)
 8014a40:	2300      	movs	r3, #0
 8014a42:	4604      	mov	r4, r0
 8014a44:	4608      	mov	r0, r1
 8014a46:	4611      	mov	r1, r2
 8014a48:	602b      	str	r3, [r5, #0]
 8014a4a:	f7ec fe7f 	bl	800174c <_kill>
 8014a4e:	1c43      	adds	r3, r0, #1
 8014a50:	d102      	bne.n	8014a58 <_kill_r+0x1c>
 8014a52:	682b      	ldr	r3, [r5, #0]
 8014a54:	b103      	cbz	r3, 8014a58 <_kill_r+0x1c>
 8014a56:	6023      	str	r3, [r4, #0]
 8014a58:	bd38      	pop	{r3, r4, r5, pc}
 8014a5a:	bf00      	nop
 8014a5c:	24009684 	.word	0x24009684

08014a60 <_getpid_r>:
 8014a60:	f7ec be6c 	b.w	800173c <_getpid>

08014a64 <__swhatbuf_r>:
 8014a64:	b570      	push	{r4, r5, r6, lr}
 8014a66:	460c      	mov	r4, r1
 8014a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a6c:	2900      	cmp	r1, #0
 8014a6e:	b096      	sub	sp, #88	@ 0x58
 8014a70:	4615      	mov	r5, r2
 8014a72:	461e      	mov	r6, r3
 8014a74:	da0d      	bge.n	8014a92 <__swhatbuf_r+0x2e>
 8014a76:	89a3      	ldrh	r3, [r4, #12]
 8014a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014a7c:	f04f 0100 	mov.w	r1, #0
 8014a80:	bf14      	ite	ne
 8014a82:	2340      	movne	r3, #64	@ 0x40
 8014a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014a88:	2000      	movs	r0, #0
 8014a8a:	6031      	str	r1, [r6, #0]
 8014a8c:	602b      	str	r3, [r5, #0]
 8014a8e:	b016      	add	sp, #88	@ 0x58
 8014a90:	bd70      	pop	{r4, r5, r6, pc}
 8014a92:	466a      	mov	r2, sp
 8014a94:	f000 f848 	bl	8014b28 <_fstat_r>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	dbec      	blt.n	8014a76 <__swhatbuf_r+0x12>
 8014a9c:	9901      	ldr	r1, [sp, #4]
 8014a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014aa6:	4259      	negs	r1, r3
 8014aa8:	4159      	adcs	r1, r3
 8014aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014aae:	e7eb      	b.n	8014a88 <__swhatbuf_r+0x24>

08014ab0 <__smakebuf_r>:
 8014ab0:	898b      	ldrh	r3, [r1, #12]
 8014ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ab4:	079d      	lsls	r5, r3, #30
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	460c      	mov	r4, r1
 8014aba:	d507      	bpl.n	8014acc <__smakebuf_r+0x1c>
 8014abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ac0:	6023      	str	r3, [r4, #0]
 8014ac2:	6123      	str	r3, [r4, #16]
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	6163      	str	r3, [r4, #20]
 8014ac8:	b003      	add	sp, #12
 8014aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014acc:	ab01      	add	r3, sp, #4
 8014ace:	466a      	mov	r2, sp
 8014ad0:	f7ff ffc8 	bl	8014a64 <__swhatbuf_r>
 8014ad4:	9f00      	ldr	r7, [sp, #0]
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	4639      	mov	r1, r7
 8014ada:	4630      	mov	r0, r6
 8014adc:	f7fd fab8 	bl	8012050 <_malloc_r>
 8014ae0:	b948      	cbnz	r0, 8014af6 <__smakebuf_r+0x46>
 8014ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ae6:	059a      	lsls	r2, r3, #22
 8014ae8:	d4ee      	bmi.n	8014ac8 <__smakebuf_r+0x18>
 8014aea:	f023 0303 	bic.w	r3, r3, #3
 8014aee:	f043 0302 	orr.w	r3, r3, #2
 8014af2:	81a3      	strh	r3, [r4, #12]
 8014af4:	e7e2      	b.n	8014abc <__smakebuf_r+0xc>
 8014af6:	89a3      	ldrh	r3, [r4, #12]
 8014af8:	6020      	str	r0, [r4, #0]
 8014afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014afe:	81a3      	strh	r3, [r4, #12]
 8014b00:	9b01      	ldr	r3, [sp, #4]
 8014b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014b06:	b15b      	cbz	r3, 8014b20 <__smakebuf_r+0x70>
 8014b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f000 f81d 	bl	8014b4c <_isatty_r>
 8014b12:	b128      	cbz	r0, 8014b20 <__smakebuf_r+0x70>
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	f023 0303 	bic.w	r3, r3, #3
 8014b1a:	f043 0301 	orr.w	r3, r3, #1
 8014b1e:	81a3      	strh	r3, [r4, #12]
 8014b20:	89a3      	ldrh	r3, [r4, #12]
 8014b22:	431d      	orrs	r5, r3
 8014b24:	81a5      	strh	r5, [r4, #12]
 8014b26:	e7cf      	b.n	8014ac8 <__smakebuf_r+0x18>

08014b28 <_fstat_r>:
 8014b28:	b538      	push	{r3, r4, r5, lr}
 8014b2a:	4d07      	ldr	r5, [pc, #28]	@ (8014b48 <_fstat_r+0x20>)
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	4604      	mov	r4, r0
 8014b30:	4608      	mov	r0, r1
 8014b32:	4611      	mov	r1, r2
 8014b34:	602b      	str	r3, [r5, #0]
 8014b36:	f7ec fe69 	bl	800180c <_fstat>
 8014b3a:	1c43      	adds	r3, r0, #1
 8014b3c:	d102      	bne.n	8014b44 <_fstat_r+0x1c>
 8014b3e:	682b      	ldr	r3, [r5, #0]
 8014b40:	b103      	cbz	r3, 8014b44 <_fstat_r+0x1c>
 8014b42:	6023      	str	r3, [r4, #0]
 8014b44:	bd38      	pop	{r3, r4, r5, pc}
 8014b46:	bf00      	nop
 8014b48:	24009684 	.word	0x24009684

08014b4c <_isatty_r>:
 8014b4c:	b538      	push	{r3, r4, r5, lr}
 8014b4e:	4d06      	ldr	r5, [pc, #24]	@ (8014b68 <_isatty_r+0x1c>)
 8014b50:	2300      	movs	r3, #0
 8014b52:	4604      	mov	r4, r0
 8014b54:	4608      	mov	r0, r1
 8014b56:	602b      	str	r3, [r5, #0]
 8014b58:	f7ec fe68 	bl	800182c <_isatty>
 8014b5c:	1c43      	adds	r3, r0, #1
 8014b5e:	d102      	bne.n	8014b66 <_isatty_r+0x1a>
 8014b60:	682b      	ldr	r3, [r5, #0]
 8014b62:	b103      	cbz	r3, 8014b66 <_isatty_r+0x1a>
 8014b64:	6023      	str	r3, [r4, #0]
 8014b66:	bd38      	pop	{r3, r4, r5, pc}
 8014b68:	24009684 	.word	0x24009684
 8014b6c:	00000000 	.word	0x00000000

08014b70 <fmod>:
 8014b70:	b508      	push	{r3, lr}
 8014b72:	ed2d 8b04 	vpush	{d8-d9}
 8014b76:	eeb0 9b40 	vmov.f64	d9, d0
 8014b7a:	eeb0 8b41 	vmov.f64	d8, d1
 8014b7e:	f000 f899 	bl	8014cb4 <__ieee754_fmod>
 8014b82:	eeb4 9b48 	vcmp.f64	d9, d8
 8014b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8a:	d60c      	bvs.n	8014ba6 <fmod+0x36>
 8014b8c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014bb0 <fmod+0x40>
 8014b90:	eeb4 8b49 	vcmp.f64	d8, d9
 8014b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b98:	d105      	bne.n	8014ba6 <fmod+0x36>
 8014b9a:	f7fe f8a5 	bl	8012ce8 <__errno>
 8014b9e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014ba2:	2321      	movs	r3, #33	@ 0x21
 8014ba4:	6003      	str	r3, [r0, #0]
 8014ba6:	ecbd 8b04 	vpop	{d8-d9}
 8014baa:	bd08      	pop	{r3, pc}
 8014bac:	f3af 8000 	nop.w
	...

08014bb8 <sqrt>:
 8014bb8:	b508      	push	{r3, lr}
 8014bba:	ed2d 8b04 	vpush	{d8-d9}
 8014bbe:	eeb0 8b40 	vmov.f64	d8, d0
 8014bc2:	f000 f871 	bl	8014ca8 <__ieee754_sqrt>
 8014bc6:	eeb4 8b48 	vcmp.f64	d8, d8
 8014bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bce:	d60c      	bvs.n	8014bea <sqrt+0x32>
 8014bd0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014bf0 <sqrt+0x38>
 8014bd4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bdc:	d505      	bpl.n	8014bea <sqrt+0x32>
 8014bde:	f7fe f883 	bl	8012ce8 <__errno>
 8014be2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014be6:	2321      	movs	r3, #33	@ 0x21
 8014be8:	6003      	str	r3, [r0, #0]
 8014bea:	ecbd 8b04 	vpop	{d8-d9}
 8014bee:	bd08      	pop	{r3, pc}
	...

08014bf8 <asinf>:
 8014bf8:	b508      	push	{r3, lr}
 8014bfa:	ed2d 8b02 	vpush	{d8}
 8014bfe:	eeb0 8a40 	vmov.f32	s16, s0
 8014c02:	f000 f963 	bl	8014ecc <__ieee754_asinf>
 8014c06:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0e:	eef0 8a40 	vmov.f32	s17, s0
 8014c12:	d615      	bvs.n	8014c40 <asinf+0x48>
 8014c14:	eeb0 0a48 	vmov.f32	s0, s16
 8014c18:	f000 f838 	bl	8014c8c <fabsf>
 8014c1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014c20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c28:	dd0a      	ble.n	8014c40 <asinf+0x48>
 8014c2a:	f7fe f85d 	bl	8012ce8 <__errno>
 8014c2e:	ecbd 8b02 	vpop	{d8}
 8014c32:	2321      	movs	r3, #33	@ 0x21
 8014c34:	6003      	str	r3, [r0, #0]
 8014c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014c3a:	4804      	ldr	r0, [pc, #16]	@ (8014c4c <asinf+0x54>)
 8014c3c:	f000 b82e 	b.w	8014c9c <nanf>
 8014c40:	eeb0 0a68 	vmov.f32	s0, s17
 8014c44:	ecbd 8b02 	vpop	{d8}
 8014c48:	bd08      	pop	{r3, pc}
 8014c4a:	bf00      	nop
 8014c4c:	0801754e 	.word	0x0801754e

08014c50 <sqrtf>:
 8014c50:	b508      	push	{r3, lr}
 8014c52:	ed2d 8b02 	vpush	{d8}
 8014c56:	eeb0 8a40 	vmov.f32	s16, s0
 8014c5a:	f000 f828 	bl	8014cae <__ieee754_sqrtf>
 8014c5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c66:	d60c      	bvs.n	8014c82 <sqrtf+0x32>
 8014c68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014c88 <sqrtf+0x38>
 8014c6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c74:	d505      	bpl.n	8014c82 <sqrtf+0x32>
 8014c76:	f7fe f837 	bl	8012ce8 <__errno>
 8014c7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014c7e:	2321      	movs	r3, #33	@ 0x21
 8014c80:	6003      	str	r3, [r0, #0]
 8014c82:	ecbd 8b02 	vpop	{d8}
 8014c86:	bd08      	pop	{r3, pc}
 8014c88:	00000000 	.word	0x00000000

08014c8c <fabsf>:
 8014c8c:	ee10 3a10 	vmov	r3, s0
 8014c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014c94:	ee00 3a10 	vmov	s0, r3
 8014c98:	4770      	bx	lr
	...

08014c9c <nanf>:
 8014c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014ca4 <nanf+0x8>
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	7fc00000 	.word	0x7fc00000

08014ca8 <__ieee754_sqrt>:
 8014ca8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014cac:	4770      	bx	lr

08014cae <__ieee754_sqrtf>:
 8014cae:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014cb2:	4770      	bx	lr

08014cb4 <__ieee754_fmod>:
 8014cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014cb8:	ed8d 1b00 	vstr	d1, [sp]
 8014cbc:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014cc0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014cc4:	ea56 0307 	orrs.w	r3, r6, r7
 8014cc8:	46b6      	mov	lr, r6
 8014cca:	d00d      	beq.n	8014ce8 <__ieee754_fmod+0x34>
 8014ccc:	ee10 ca90 	vmov	ip, s1
 8014cd0:	4b78      	ldr	r3, [pc, #480]	@ (8014eb4 <__ieee754_fmod+0x200>)
 8014cd2:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014cd6:	4598      	cmp	r8, r3
 8014cd8:	d806      	bhi.n	8014ce8 <__ieee754_fmod+0x34>
 8014cda:	4273      	negs	r3, r6
 8014cdc:	4a76      	ldr	r2, [pc, #472]	@ (8014eb8 <__ieee754_fmod+0x204>)
 8014cde:	4333      	orrs	r3, r6
 8014ce0:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d908      	bls.n	8014cfa <__ieee754_fmod+0x46>
 8014ce8:	ed9d 7b00 	vldr	d7, [sp]
 8014cec:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014cf0:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014cf4:	b003      	add	sp, #12
 8014cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cfa:	ee10 9a10 	vmov	r9, s0
 8014cfe:	45b8      	cmp	r8, r7
 8014d00:	4649      	mov	r1, r9
 8014d02:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014d06:	dc09      	bgt.n	8014d1c <__ieee754_fmod+0x68>
 8014d08:	dbf4      	blt.n	8014cf4 <__ieee754_fmod+0x40>
 8014d0a:	454e      	cmp	r6, r9
 8014d0c:	d8f2      	bhi.n	8014cf4 <__ieee754_fmod+0x40>
 8014d0e:	d105      	bne.n	8014d1c <__ieee754_fmod+0x68>
 8014d10:	4b6a      	ldr	r3, [pc, #424]	@ (8014ebc <__ieee754_fmod+0x208>)
 8014d12:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014d16:	ed93 0b00 	vldr	d0, [r3]
 8014d1a:	e7eb      	b.n	8014cf4 <__ieee754_fmod+0x40>
 8014d1c:	4a66      	ldr	r2, [pc, #408]	@ (8014eb8 <__ieee754_fmod+0x204>)
 8014d1e:	ea1c 0f02 	tst.w	ip, r2
 8014d22:	d14a      	bne.n	8014dba <__ieee754_fmod+0x106>
 8014d24:	f1b8 0f00 	cmp.w	r8, #0
 8014d28:	d13f      	bne.n	8014daa <__ieee754_fmod+0xf6>
 8014d2a:	4865      	ldr	r0, [pc, #404]	@ (8014ec0 <__ieee754_fmod+0x20c>)
 8014d2c:	464b      	mov	r3, r9
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	dc38      	bgt.n	8014da4 <__ieee754_fmod+0xf0>
 8014d32:	4215      	tst	r5, r2
 8014d34:	d150      	bne.n	8014dd8 <__ieee754_fmod+0x124>
 8014d36:	2f00      	cmp	r7, #0
 8014d38:	d147      	bne.n	8014dca <__ieee754_fmod+0x116>
 8014d3a:	4a61      	ldr	r2, [pc, #388]	@ (8014ec0 <__ieee754_fmod+0x20c>)
 8014d3c:	4633      	mov	r3, r6
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	dc40      	bgt.n	8014dc4 <__ieee754_fmod+0x110>
 8014d42:	4b60      	ldr	r3, [pc, #384]	@ (8014ec4 <__ieee754_fmod+0x210>)
 8014d44:	4298      	cmp	r0, r3
 8014d46:	db4b      	blt.n	8014de0 <__ieee754_fmod+0x12c>
 8014d48:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014d50:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8014ec4 <__ieee754_fmod+0x210>
 8014d54:	4562      	cmp	r2, ip
 8014d56:	db58      	blt.n	8014e0a <__ieee754_fmod+0x156>
 8014d58:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014d5c:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014d60:	1a80      	subs	r0, r0, r2
 8014d62:	1b5e      	subs	r6, r3, r5
 8014d64:	eba1 070e 	sub.w	r7, r1, lr
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d164      	bne.n	8014e36 <__ieee754_fmod+0x182>
 8014d6c:	4571      	cmp	r1, lr
 8014d6e:	bf38      	it	cc
 8014d70:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014d74:	2e00      	cmp	r6, #0
 8014d76:	bfa4      	itt	ge
 8014d78:	4639      	movge	r1, r7
 8014d7a:	4633      	movge	r3, r6
 8014d7c:	ea53 0001 	orrs.w	r0, r3, r1
 8014d80:	d0c6      	beq.n	8014d10 <__ieee754_fmod+0x5c>
 8014d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014d86:	db6b      	blt.n	8014e60 <__ieee754_fmod+0x1ac>
 8014d88:	484e      	ldr	r0, [pc, #312]	@ (8014ec4 <__ieee754_fmod+0x210>)
 8014d8a:	4282      	cmp	r2, r0
 8014d8c:	db6e      	blt.n	8014e6c <__ieee754_fmod+0x1b8>
 8014d8e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014d92:	4323      	orrs	r3, r4
 8014d94:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014d98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014d9c:	460c      	mov	r4, r1
 8014d9e:	ec45 4b10 	vmov	d0, r4, r5
 8014da2:	e7a7      	b.n	8014cf4 <__ieee754_fmod+0x40>
 8014da4:	3801      	subs	r0, #1
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	e7c1      	b.n	8014d2e <__ieee754_fmod+0x7a>
 8014daa:	4846      	ldr	r0, [pc, #280]	@ (8014ec4 <__ieee754_fmod+0x210>)
 8014dac:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	ddbe      	ble.n	8014d32 <__ieee754_fmod+0x7e>
 8014db4:	3801      	subs	r0, #1
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	e7fa      	b.n	8014db0 <__ieee754_fmod+0xfc>
 8014dba:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014dbe:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014dc2:	e7b6      	b.n	8014d32 <__ieee754_fmod+0x7e>
 8014dc4:	3a01      	subs	r2, #1
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	e7b9      	b.n	8014d3e <__ieee754_fmod+0x8a>
 8014dca:	4a3e      	ldr	r2, [pc, #248]	@ (8014ec4 <__ieee754_fmod+0x210>)
 8014dcc:	02fb      	lsls	r3, r7, #11
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	ddb7      	ble.n	8014d42 <__ieee754_fmod+0x8e>
 8014dd2:	3a01      	subs	r2, #1
 8014dd4:	005b      	lsls	r3, r3, #1
 8014dd6:	e7fa      	b.n	8014dce <__ieee754_fmod+0x11a>
 8014dd8:	153a      	asrs	r2, r7, #20
 8014dda:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014dde:	e7b0      	b.n	8014d42 <__ieee754_fmod+0x8e>
 8014de0:	eba3 0c00 	sub.w	ip, r3, r0
 8014de4:	f1bc 0f1f 	cmp.w	ip, #31
 8014de8:	dc09      	bgt.n	8014dfe <__ieee754_fmod+0x14a>
 8014dea:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014dee:	fa08 f10c 	lsl.w	r1, r8, ip
 8014df2:	fa29 f303 	lsr.w	r3, r9, r3
 8014df6:	430b      	orrs	r3, r1
 8014df8:	fa09 f10c 	lsl.w	r1, r9, ip
 8014dfc:	e7a8      	b.n	8014d50 <__ieee754_fmod+0x9c>
 8014dfe:	4b32      	ldr	r3, [pc, #200]	@ (8014ec8 <__ieee754_fmod+0x214>)
 8014e00:	1a1b      	subs	r3, r3, r0
 8014e02:	fa09 f303 	lsl.w	r3, r9, r3
 8014e06:	2100      	movs	r1, #0
 8014e08:	e7a2      	b.n	8014d50 <__ieee754_fmod+0x9c>
 8014e0a:	ebac 0c02 	sub.w	ip, ip, r2
 8014e0e:	f1bc 0f1f 	cmp.w	ip, #31
 8014e12:	dc09      	bgt.n	8014e28 <__ieee754_fmod+0x174>
 8014e14:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8014e18:	fa07 f70c 	lsl.w	r7, r7, ip
 8014e1c:	fa26 f505 	lsr.w	r5, r6, r5
 8014e20:	433d      	orrs	r5, r7
 8014e22:	fa06 fe0c 	lsl.w	lr, r6, ip
 8014e26:	e79b      	b.n	8014d60 <__ieee754_fmod+0xac>
 8014e28:	4d27      	ldr	r5, [pc, #156]	@ (8014ec8 <__ieee754_fmod+0x214>)
 8014e2a:	1aad      	subs	r5, r5, r2
 8014e2c:	fa06 f505 	lsl.w	r5, r6, r5
 8014e30:	f04f 0e00 	mov.w	lr, #0
 8014e34:	e794      	b.n	8014d60 <__ieee754_fmod+0xac>
 8014e36:	4571      	cmp	r1, lr
 8014e38:	bf38      	it	cc
 8014e3a:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014e3e:	2e00      	cmp	r6, #0
 8014e40:	da05      	bge.n	8014e4e <__ieee754_fmod+0x19a>
 8014e42:	0fce      	lsrs	r6, r1, #31
 8014e44:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8014e48:	0049      	lsls	r1, r1, #1
 8014e4a:	3801      	subs	r0, #1
 8014e4c:	e789      	b.n	8014d62 <__ieee754_fmod+0xae>
 8014e4e:	ea56 0307 	orrs.w	r3, r6, r7
 8014e52:	f43f af5d 	beq.w	8014d10 <__ieee754_fmod+0x5c>
 8014e56:	0ffb      	lsrs	r3, r7, #31
 8014e58:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014e5c:	0079      	lsls	r1, r7, #1
 8014e5e:	e7f4      	b.n	8014e4a <__ieee754_fmod+0x196>
 8014e60:	0fc8      	lsrs	r0, r1, #31
 8014e62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014e66:	0049      	lsls	r1, r1, #1
 8014e68:	3a01      	subs	r2, #1
 8014e6a:	e78a      	b.n	8014d82 <__ieee754_fmod+0xce>
 8014e6c:	1a80      	subs	r0, r0, r2
 8014e6e:	2814      	cmp	r0, #20
 8014e70:	dc0c      	bgt.n	8014e8c <__ieee754_fmod+0x1d8>
 8014e72:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014e76:	fa03 f202 	lsl.w	r2, r3, r2
 8014e7a:	40c1      	lsrs	r1, r0
 8014e7c:	430a      	orrs	r2, r1
 8014e7e:	4103      	asrs	r3, r0
 8014e80:	ea43 0104 	orr.w	r1, r3, r4
 8014e84:	4610      	mov	r0, r2
 8014e86:	ec41 0b10 	vmov	d0, r0, r1
 8014e8a:	e733      	b.n	8014cf4 <__ieee754_fmod+0x40>
 8014e8c:	281f      	cmp	r0, #31
 8014e8e:	dc07      	bgt.n	8014ea0 <__ieee754_fmod+0x1ec>
 8014e90:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8014e94:	40c1      	lsrs	r1, r0
 8014e96:	fa03 f202 	lsl.w	r2, r3, r2
 8014e9a:	430a      	orrs	r2, r1
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	e7ef      	b.n	8014e80 <__ieee754_fmod+0x1cc>
 8014ea0:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8014ea4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8014ea8:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8014eac:	32e2      	adds	r2, #226	@ 0xe2
 8014eae:	fa43 f202 	asr.w	r2, r3, r2
 8014eb2:	e7f3      	b.n	8014e9c <__ieee754_fmod+0x1e8>
 8014eb4:	7fefffff 	.word	0x7fefffff
 8014eb8:	7ff00000 	.word	0x7ff00000
 8014ebc:	08017650 	.word	0x08017650
 8014ec0:	fffffbed 	.word	0xfffffbed
 8014ec4:	fffffc02 	.word	0xfffffc02
 8014ec8:	fffffbe2 	.word	0xfffffbe2

08014ecc <__ieee754_asinf>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	ee10 5a10 	vmov	r5, s0
 8014ed2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8014ed6:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8014eda:	ed2d 8b04 	vpush	{d8-d9}
 8014ede:	d10c      	bne.n	8014efa <__ieee754_asinf+0x2e>
 8014ee0:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8015058 <__ieee754_asinf+0x18c>
 8014ee4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801505c <__ieee754_asinf+0x190>
 8014ee8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014eec:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef4:	ecbd 8b04 	vpop	{d8-d9}
 8014ef8:	bd38      	pop	{r3, r4, r5, pc}
 8014efa:	d904      	bls.n	8014f06 <__ieee754_asinf+0x3a>
 8014efc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014f00:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014f04:	e7f6      	b.n	8014ef4 <__ieee754_asinf+0x28>
 8014f06:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8014f0a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8014f0e:	d20b      	bcs.n	8014f28 <__ieee754_asinf+0x5c>
 8014f10:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8014f14:	d252      	bcs.n	8014fbc <__ieee754_asinf+0xf0>
 8014f16:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8015060 <__ieee754_asinf+0x194>
 8014f1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014f1e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f26:	dce5      	bgt.n	8014ef4 <__ieee754_asinf+0x28>
 8014f28:	f7ff feb0 	bl	8014c8c <fabsf>
 8014f2c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8014f30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014f34:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f38:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8015064 <__ieee754_asinf+0x198>
 8014f3c:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8015068 <__ieee754_asinf+0x19c>
 8014f40:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801506c <__ieee754_asinf+0x1a0>
 8014f44:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014f48:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8015070 <__ieee754_asinf+0x1a4>
 8014f4c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014f50:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8015074 <__ieee754_asinf+0x1a8>
 8014f54:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014f58:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8015078 <__ieee754_asinf+0x1ac>
 8014f5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014f60:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801507c <__ieee754_asinf+0x1b0>
 8014f64:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014f68:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8015080 <__ieee754_asinf+0x1b4>
 8014f6c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014f70:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8015084 <__ieee754_asinf+0x1b8>
 8014f74:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014f78:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8015088 <__ieee754_asinf+0x1bc>
 8014f7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014f80:	eeb0 0a48 	vmov.f32	s0, s16
 8014f84:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014f88:	f7ff fe91 	bl	8014cae <__ieee754_sqrtf>
 8014f8c:	4b3f      	ldr	r3, [pc, #252]	@ (801508c <__ieee754_asinf+0x1c0>)
 8014f8e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014f92:	429c      	cmp	r4, r3
 8014f94:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014f98:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8014f9c:	d93d      	bls.n	801501a <__ieee754_asinf+0x14e>
 8014f9e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014fa2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8015090 <__ieee754_asinf+0x1c4>
 8014fa6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014faa:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801505c <__ieee754_asinf+0x190>
 8014fae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014fb2:	2d00      	cmp	r5, #0
 8014fb4:	bfd8      	it	le
 8014fb6:	eeb1 0a40 	vnegle.f32	s0, s0
 8014fba:	e79b      	b.n	8014ef4 <__ieee754_asinf+0x28>
 8014fbc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014fc0:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8015068 <__ieee754_asinf+0x19c>
 8014fc4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8015064 <__ieee754_asinf+0x198>
 8014fc8:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801507c <__ieee754_asinf+0x1b0>
 8014fcc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014fd0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8015070 <__ieee754_asinf+0x1a4>
 8014fd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014fd8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8015074 <__ieee754_asinf+0x1a8>
 8014fdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014fe0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8015078 <__ieee754_asinf+0x1ac>
 8014fe4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014fe8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801506c <__ieee754_asinf+0x1a0>
 8014fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014ff0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8015080 <__ieee754_asinf+0x1b4>
 8014ff4:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014ff8:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8015084 <__ieee754_asinf+0x1b8>
 8014ffc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015000:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8015088 <__ieee754_asinf+0x1bc>
 8015004:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015008:	ee27 7a27 	vmul.f32	s14, s14, s15
 801500c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015010:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015014:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015018:	e76c      	b.n	8014ef4 <__ieee754_asinf+0x28>
 801501a:	ee10 3a10 	vmov	r3, s0
 801501e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015022:	f023 030f 	bic.w	r3, r3, #15
 8015026:	ee07 3a10 	vmov	s14, r3
 801502a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801502e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8015032:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015036:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8015058 <__ieee754_asinf+0x18c>
 801503a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801503e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8015094 <__ieee754_asinf+0x1c8>
 8015042:	eee5 7a66 	vfms.f32	s15, s10, s13
 8015046:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801504a:	eeb0 6a40 	vmov.f32	s12, s0
 801504e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015052:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015056:	e7aa      	b.n	8014fae <__ieee754_asinf+0xe2>
 8015058:	b33bbd2e 	.word	0xb33bbd2e
 801505c:	3fc90fdb 	.word	0x3fc90fdb
 8015060:	7149f2ca 	.word	0x7149f2ca
 8015064:	3a4f7f04 	.word	0x3a4f7f04
 8015068:	3811ef08 	.word	0x3811ef08
 801506c:	3e2aaaab 	.word	0x3e2aaaab
 8015070:	bd241146 	.word	0xbd241146
 8015074:	3e4e0aa8 	.word	0x3e4e0aa8
 8015078:	bea6b090 	.word	0xbea6b090
 801507c:	3d9dc62e 	.word	0x3d9dc62e
 8015080:	bf303361 	.word	0xbf303361
 8015084:	4001572d 	.word	0x4001572d
 8015088:	c019d139 	.word	0xc019d139
 801508c:	3f799999 	.word	0x3f799999
 8015090:	333bbd2e 	.word	0x333bbd2e
 8015094:	3f490fdb 	.word	0x3f490fdb

08015098 <_init>:
 8015098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801509a:	bf00      	nop
 801509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801509e:	bc08      	pop	{r3}
 80150a0:	469e      	mov	lr, r3
 80150a2:	4770      	bx	lr

080150a4 <_fini>:
 80150a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150a6:	bf00      	nop
 80150a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150aa:	bc08      	pop	{r3}
 80150ac:	469e      	mov	lr, r3
 80150ae:	4770      	bx	lr
