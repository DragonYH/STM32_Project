
EX_Three_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001500c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b0  080152b0  080152b0  000162b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017860  08017860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017868  08017868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801786c  0801786c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  08017870  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009378  240002fc  08017b6c  000192fc  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24009674  08017b6c  00019674  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a222  00000000  00000000  0001932a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000081cb  00000000  00000000  0005354c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002758  00000000  00000000  0005b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d97  00000000  00000000  0005de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004162c  00000000  00000000  0005fc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037e09  00000000  00000000  000a1233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176e1d  00000000  00000000  000d903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0024fe59  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b388  00000000  00000000  0024ff14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0025b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000005c1  00000000  00000000  0025b313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000058  00000000  00000000  0025b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002fc 	.word	0x240002fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015294 	.word	0x08015294

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000300 	.word	0x24000300
 80002dc:	08015294 	.word	0x08015294

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 fbda 	bl	8012d72 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fe51 	bl	800226c <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 ff16 	bl	8001400 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 ff40 	bl	8002474 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 ff01 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000318 	.word	0x24000318
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f002 f843 	bl	800270c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fd4e 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fd65 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  ad7606_Init();
 80006b0:	f00f ff54 	bl	801055c <ad7606_Init>
  pll_Init_V(&signal_V, 50, 20000);
 80006b4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006b8:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800076c <MX_FREERTOS_Init+0xc0>
 80006bc:	482c      	ldr	r0, [pc, #176]	@ (8000770 <MX_FREERTOS_Init+0xc4>)
 80006be:	f010 fecf 	bl	8011460 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006c2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006c6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800076c <MX_FREERTOS_Init+0xc0>
 80006ca:	482a      	ldr	r0, [pc, #168]	@ (8000774 <MX_FREERTOS_Init+0xc8>)
 80006cc:	f010 ff80 	bl	80115d0 <pll_Init_I>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4829      	ldr	r0, [pc, #164]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 80006d4:	f008 fecc 	bl	8009470 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80006d8:	2104      	movs	r1, #4
 80006da:	4827      	ldr	r0, [pc, #156]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 80006dc:	f008 fec8 	bl	8009470 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80006e0:	2108      	movs	r1, #8
 80006e2:	4825      	ldr	r0, [pc, #148]	@ (8000778 <MX_FREERTOS_Init+0xcc>)
 80006e4:	f008 fec4 	bl	8009470 <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4824      	ldr	r0, [pc, #144]	@ (800077c <MX_FREERTOS_Init+0xd0>)
 80006ec:	f001 fde0 	bl	80022b0 <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 80006f0:	2100      	movs	r1, #0
 80006f2:	4823      	ldr	r0, [pc, #140]	@ (8000780 <MX_FREERTOS_Init+0xd4>)
 80006f4:	f00f ff6c 	bl	80105d0 <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_FREERTOS_Init+0xd8>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4822      	ldr	r0, [pc, #136]	@ (8000788 <MX_FREERTOS_Init+0xdc>)
 80006fe:	f00c fc67 	bl	800cfd0 <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <MX_FREERTOS_Init+0xe0>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 8000708:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <MX_FREERTOS_Init+0xe4>)
 800070a:	2100      	movs	r1, #0
 800070c:	4821      	ldr	r0, [pc, #132]	@ (8000794 <MX_FREERTOS_Init+0xe8>)
 800070e:	f00c fc5f 	bl	800cfd0 <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <MX_FREERTOS_Init+0xec>)
 8000716:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 8000718:	4a20      	ldr	r2, [pc, #128]	@ (800079c <MX_FREERTOS_Init+0xf0>)
 800071a:	2100      	movs	r1, #0
 800071c:	4820      	ldr	r0, [pc, #128]	@ (80007a0 <MX_FREERTOS_Init+0xf4>)
 800071e:	f00c fc57 	bl	800cfd0 <osThreadNew>
 8000722:	4603      	mov	r3, r0
 8000724:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <MX_FREERTOS_Init+0xf8>)
 8000726:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 8000728:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 800072a:	2100      	movs	r1, #0
 800072c:	481f      	ldr	r0, [pc, #124]	@ (80007ac <MX_FREERTOS_Init+0x100>)
 800072e:	f00c fc4f 	bl	800cfd0 <osThreadNew>
 8000732:	4603      	mov	r3, r0
 8000734:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <MX_FREERTOS_Init+0x104>)
 8000736:	6013      	str	r3, [r2, #0]

  /* creation of acVControl */
  acVControlHandle = osThreadNew(StartACVContorl, NULL, &acVControl_attributes);
 8000738:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_FREERTOS_Init+0x108>)
 800073a:	2100      	movs	r1, #0
 800073c:	481e      	ldr	r0, [pc, #120]	@ (80007b8 <MX_FREERTOS_Init+0x10c>)
 800073e:	f00c fc47 	bl	800cfd0 <osThreadNew>
 8000742:	4603      	mov	r3, r0
 8000744:	4a1d      	ldr	r2, [pc, #116]	@ (80007bc <MX_FREERTOS_Init+0x110>)
 8000746:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtect */
  circuitProtectHandle = osThreadNew(StartCircuitProtect, NULL, &circuitProtect_attributes);
 8000748:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <MX_FREERTOS_Init+0x114>)
 800074a:	2100      	movs	r1, #0
 800074c:	481d      	ldr	r0, [pc, #116]	@ (80007c4 <MX_FREERTOS_Init+0x118>)
 800074e:	f00c fc3f 	bl	800cfd0 <osThreadNew>
 8000752:	4603      	mov	r3, r0
 8000754:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_FREERTOS_Init+0x11c>)
 8000756:	6013      	str	r3, [r2, #0]

  /* creation of dcVControl */
  dcVControlHandle = osThreadNew(StartDCVControl, NULL, &dcVControl_attributes);
 8000758:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <MX_FREERTOS_Init+0x120>)
 800075a:	2100      	movs	r1, #0
 800075c:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <MX_FREERTOS_Init+0x124>)
 800075e:	f00c fc37 	bl	800cfd0 <osThreadNew>
 8000762:	4603      	mov	r3, r0
 8000764:	4a1b      	ldr	r2, [pc, #108]	@ (80007d4 <MX_FREERTOS_Init+0x128>)
 8000766:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	42480000 	.word	0x42480000
 8000770:	2400951c 	.word	0x2400951c
 8000774:	24009520 	.word	0x24009520
 8000778:	24000540 	.word	0x24000540
 800077c:	24000318 	.word	0x24000318
 8000780:	2400058c 	.word	0x2400058c
 8000784:	080153cc 	.word	0x080153cc
 8000788:	080007d9 	.word	0x080007d9
 800078c:	2400032c 	.word	0x2400032c
 8000790:	080153f0 	.word	0x080153f0
 8000794:	08000871 	.word	0x08000871
 8000798:	24000330 	.word	0x24000330
 800079c:	08015414 	.word	0x08015414
 80007a0:	0800088d 	.word	0x0800088d
 80007a4:	24000334 	.word	0x24000334
 80007a8:	08015438 	.word	0x08015438
 80007ac:	080008dd 	.word	0x080008dd
 80007b0:	24000338 	.word	0x24000338
 80007b4:	0801545c 	.word	0x0801545c
 80007b8:	080008f5 	.word	0x080008f5
 80007bc:	2400033c 	.word	0x2400033c
 80007c0:	08015480 	.word	0x08015480
 80007c4:	0800090d 	.word	0x0800090d
 80007c8:	24000340 	.word	0x24000340
 80007cc:	080154a4 	.word	0x080154a4
 80007d0:	08000aed 	.word	0x08000aed
 80007d4:	24000344 	.word	0x24000344

080007d8 <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80007e0:	f00f f9a2 	bl	800fb28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    switch (runState)
 80007e4:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <StartStateLED+0x90>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d032      	beq.n	8000854 <StartStateLED+0x7c>
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	dc38      	bgt.n	8000864 <StartStateLED+0x8c>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <StartStateLED+0x24>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d006      	beq.n	8000808 <StartStateLED+0x30>
    case FAULT: // 保护状态
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
      osDelay(100);
      break;
    default:
      break;
 80007fa:	e033      	b.n	8000864 <StartStateLED+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	481a      	ldr	r0, [pc, #104]	@ (800086c <StartStateLED+0x94>)
 8000802:	f002 f933 	bl	8002a6c <HAL_GPIO_WritePin>
      break;
 8000806:	e02e      	b.n	8000866 <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000808:	2101      	movs	r1, #1
 800080a:	4818      	ldr	r0, [pc, #96]	@ (800086c <StartStateLED+0x94>)
 800080c:	f002 f947 	bl	8002a9e <HAL_GPIO_TogglePin>
      osDelay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f00c fc6f 	bl	800d0f4 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000816:	2101      	movs	r1, #1
 8000818:	4814      	ldr	r0, [pc, #80]	@ (800086c <StartStateLED+0x94>)
 800081a:	f002 f940 	bl	8002a9e <HAL_GPIO_TogglePin>
      osDelay(200);
 800081e:	20c8      	movs	r0, #200	@ 0xc8
 8000820:	f00c fc68 	bl	800d0f4 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000824:	2101      	movs	r1, #1
 8000826:	4811      	ldr	r0, [pc, #68]	@ (800086c <StartStateLED+0x94>)
 8000828:	f002 f939 	bl	8002a9e <HAL_GPIO_TogglePin>
      osDelay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f00c fc61 	bl	800d0f4 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000832:	2101      	movs	r1, #1
 8000834:	480d      	ldr	r0, [pc, #52]	@ (800086c <StartStateLED+0x94>)
 8000836:	f002 f932 	bl	8002a9e <HAL_GPIO_TogglePin>
      osDelay(200);
 800083a:	20c8      	movs	r0, #200	@ 0xc8
 800083c:	f00c fc5a 	bl	800d0f4 <osDelay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <StartStateLED+0x94>)
 8000846:	f002 f911 	bl	8002a6c <HAL_GPIO_WritePin>
      osDelay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084e:	f00c fc51 	bl	800d0f4 <osDelay>
      break;
 8000852:	e008      	b.n	8000866 <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000854:	2101      	movs	r1, #1
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <StartStateLED+0x94>)
 8000858:	f002 f921 	bl	8002a9e <HAL_GPIO_TogglePin>
      osDelay(100);
 800085c:	2064      	movs	r0, #100	@ 0x64
 800085e:	f00c fc49 	bl	800d0f4 <osDelay>
      break;
 8000862:	e000      	b.n	8000866 <StartStateLED+0x8e>
      break;
 8000864:	bf00      	nop
    switch (runState)
 8000866:	e7bd      	b.n	80007e4 <StartStateLED+0xc>
 8000868:	24009524 	.word	0x24009524
 800086c:	58022000 	.word	0x58022000

08000870 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  OLED_Init();
 8000878:	f010 faae 	bl	8010dd8 <OLED_Init>
  /* Infinite loop */
  for (;;)
  {
    appOLEDShow();
 800087c:	f000 f96c 	bl	8000b58 <appOLEDShow>
    osDelay(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f00c fc37 	bl	800d0f4 <osDelay>
    appOLEDShow();
 8000886:	bf00      	nop
 8000888:	e7f8      	b.n	800087c <StartOledShow+0xc>
	...

0800088c <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  INA228_config(INA228_0);
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <StartDcSamp+0x44>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f00f ff74 	bl	8010786 <INA228_config>
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <StartDcSamp+0x44>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f010 f81e 	bl	80108e4 <INA228_getVBUS_V>
 80008a8:	eef0 7a40 	vmov.f32	s15, s0
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <StartDcSamp+0x48>)
 80008ae:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <StartDcSamp+0x44>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f010 f898 	bl	80109ec <INA228_getCURRENT_A>
 80008bc:	eef0 7a40 	vmov.f32	s15, s0
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <StartDcSamp+0x4c>)
 80008c2:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f00c fc14 	bl	800d0f4 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 80008cc:	bf00      	nop
 80008ce:	e7e6      	b.n	800089e <StartDcSamp+0x12>
 80008d0:	08016cd8 	.word	0x08016cd8
 80008d4:	24009514 	.word	0x24009514
 80008d8:	24009518 	.word	0x24009518

080008dc <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  for (;;)
  {
#if USER_DEBUG
    appTaskStackShow();
#else
    vTaskDelete(NULL);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f00d fba9 	bl	800e03c <vTaskDelete>
    // uint8_t text[32] = {0};
    // sprintf((char *)text, "x=0,a=%.3f,b=%.3f\r\n", signal_V->basic->input_a, signal_V->basic->park_d);
    // CDC_Transmit_FS(text, 32);
    // memset(text, 0, 32);
#endif
    osDelay(100);
 80008ea:	2064      	movs	r0, #100	@ 0x64
 80008ec:	f00c fc02 	bl	800d0f4 <osDelay>
    vTaskDelete(NULL);
 80008f0:	bf00      	nop
 80008f2:	e7f7      	b.n	80008e4 <StartUsartDebug+0x8>

080008f4 <StartACVContorl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACVContorl */
void StartACVContorl(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartACVContorl */
  /* Infinite loop */
  for (;;)
  {
#if Rectifier_Or_Inverter
    vTaskDelete(NULL);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f00d fb9d 	bl	800e03c <vTaskDelete>
#else
    appACVControl();
#endif
    osDelay(25);
 8000902:	2019      	movs	r0, #25
 8000904:	f00c fbf6 	bl	800d0f4 <osDelay>
    vTaskDelete(NULL);
 8000908:	bf00      	nop
 800090a:	e7f7      	b.n	80008fc <StartACVContorl+0x8>

0800090c <StartCircuitProtect>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCircuitProtect */
void StartCircuitProtect(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCircuitProtect */
  /* Infinite loop */
  for (;;)
  {
    if (U > protection_Udc || I > protection_Idc ||
 8000914:	4b6d      	ldr	r3, [pc, #436]	@ (8000acc <StartCircuitProtect+0x1c0>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8000ad0 <StartCircuitProtect+0x1c4>
 800091e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000926:	dc51      	bgt.n	80009cc <StartCircuitProtect+0xc0>
 8000928:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad4 <StartCircuitProtect+0x1c8>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093a:	dc47      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 800093c:	4b66      	ldr	r3, [pc, #408]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	edd3 7a03 	vldr	s15, [r3, #12]
    if (U > protection_Udc || I > protection_Idc ||
 8000946:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800094a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000952:	dc3b      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000954:	4b61      	ldr	r3, [pc, #388]	@ (8000adc <StartCircuitProtect+0x1d0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	edd3 7a03 	vldr	s15, [r3, #12]
 800095e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	dc2f      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 800096c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	edd3 7a04 	vldr	s15, [r3, #16]
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000976:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800097a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000982:	dc23      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000984:	4b55      	ldr	r3, [pc, #340]	@ (8000adc <StartCircuitProtect+0x1d0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	edd3 7a04 	vldr	s15, [r3, #16]
 800098e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	dc17      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 800099c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	edd3 7a05 	vldr	s15, [r3, #20]
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 80009a6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80009aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009b2:	dc0b      	bgt.n	80009cc <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 80009b4:	4b49      	ldr	r3, [pc, #292]	@ (8000adc <StartCircuitProtect+0x1d0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80009be:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	dd0d      	ble.n	80009e8 <StartCircuitProtect+0xdc>
    {
      runState = FAULT;
 80009cc:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	701a      	strb	r2, [r3, #0]
      osDelay(1000);
 80009d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d6:	f00c fb8d 	bl	800d0f4 <osDelay>
      HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e0:	4840      	ldr	r0, [pc, #256]	@ (8000ae4 <StartCircuitProtect+0x1d8>)
 80009e2:	f002 f843 	bl	8002a6c <HAL_GPIO_WritePin>
 80009e6:	e06c      	b.n	8000ac2 <StartCircuitProtect+0x1b6>
    }
    else if (runState == START &&
 80009e8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d167      	bne.n	8000ac2 <StartCircuitProtect+0x1b6>
             runState != FAULT &&
 80009f2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
    else if (runState == START &&
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d062      	beq.n	8000ac2 <StartCircuitProtect+0x1b6>
             fabs(signal_V->basic->park_q) < 0.02f &&
 80009fc:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000a06:	eef0 7ae7 	vabs.f32	s15, s15
             runState != FAULT &&
 8000a0a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000ae8 <StartCircuitProtect+0x1dc>
 8000a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a16:	d554      	bpl.n	8000ac2 <StartCircuitProtect+0x1b6>
             signal_V->basic->rms_a > 5.f &&
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	edd3 7a03 	vldr	s15, [r3, #12]
             fabs(signal_V->basic->park_q) < 0.02f &&
 8000a22:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a2e:	dd48      	ble.n	8000ac2 <StartCircuitProtect+0x1b6>
             signal_I->basic->rms_a > 0.5f)
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <StartCircuitProtect+0x1d0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	edd3 7a03 	vldr	s15, [r3, #12]
             signal_V->basic->rms_a > 5.f &&
 8000a3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a46:	dd3c      	ble.n	8000ac2 <StartCircuitProtect+0x1b6>
    {
      osDelay(1000); // 延迟时间是否合适需根据具体情况调整
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f00c fb52 	bl	800d0f4 <osDelay>
      // 防止上电瞬间误判
      if (runState == START &&
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d133      	bne.n	8000ac2 <StartCircuitProtect+0x1b6>
          runState != FAULT &&
 8000a5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
      if (runState == START &&
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d02e      	beq.n	8000ac2 <StartCircuitProtect+0x1b6>
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000a6e:	eef0 7ae7 	vabs.f32	s15, s15
          runState != FAULT &&
 8000a72:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000ae8 <StartCircuitProtect+0x1dc>
 8000a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7e:	d520      	bpl.n	8000ac2 <StartCircuitProtect+0x1b6>
          signal_V->basic->rms_a > 5.f &&
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <StartCircuitProtect+0x1cc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	edd3 7a03 	vldr	s15, [r3, #12]
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000a8a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a96:	dd14      	ble.n	8000ac2 <StartCircuitProtect+0x1b6>
          signal_I->basic->rms_a > 0.5f)
 8000a98:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <StartCircuitProtect+0x1d0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	edd3 7a03 	vldr	s15, [r3, #12]
          signal_V->basic->rms_a > 5.f &&
 8000aa2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aae:	dd08      	ble.n	8000ac2 <StartCircuitProtect+0x1b6>
      {
        runState = RUN;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <StartCircuitProtect+0x1d4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <StartCircuitProtect+0x1d8>)
 8000abe:	f001 ffd5 	bl	8002a6c <HAL_GPIO_WritePin>
      }
    }
    osDelay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f00c fb16 	bl	800d0f4 <osDelay>
    if (U > protection_Udc || I > protection_Idc ||
 8000ac8:	e724      	b.n	8000914 <StartCircuitProtect+0x8>
 8000aca:	bf00      	nop
 8000acc:	24009514 	.word	0x24009514
 8000ad0:	42b40000 	.word	0x42b40000
 8000ad4:	24009518 	.word	0x24009518
 8000ad8:	2400951c 	.word	0x2400951c
 8000adc:	24009520 	.word	0x24009520
 8000ae0:	24009524 	.word	0x24009524
 8000ae4:	58020000 	.word	0x58020000
 8000ae8:	3ca3d70a 	.word	0x3ca3d70a

08000aec <StartDCVControl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDCVControl */
void StartDCVControl(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDCVControl */
  static PID pidDCV;
  pid_Init(&pidDCV, 0.1f, 0.01f, 0, 2.5f, 0.5f);
 8000af4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 8000af8:	eef0 1a04 	vmov.f32	s3, #4	@ 0x40200000  2.5
 8000afc:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8000b3c <StartDCVControl+0x50>
 8000b00:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8000b40 <StartDCVControl+0x54>
 8000b04:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000b44 <StartDCVControl+0x58>
 8000b08:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <StartDCVControl+0x5c>)
 8000b0a:	f010 f9eb 	bl	8010ee4 <pid_Init>
  for (;;)
  {
#if !DC_V_Ctrl
    vTaskDelete(NULL);
#else
    pid(&pidDCV, Utarget, U);
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <StartDCVControl+0x60>)
 8000b10:	edd3 7a00 	vldr	s15, [r3]
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <StartDCVControl+0x64>)
 8000b16:	ed93 7a00 	vldr	s14, [r3]
 8000b1a:	eef0 0a47 	vmov.f32	s1, s14
 8000b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b22:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <StartDCVControl+0x5c>)
 8000b24:	f010 fa11 	bl	8010f4a <pid>
    Iref = pidDCV.out;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <StartDCVControl+0x5c>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a09      	ldr	r2, [pc, #36]	@ (8000b54 <StartDCVControl+0x68>)
 8000b2e:	6013      	str	r3, [r2, #0]
#endif
    osDelay(20);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f00c fadf 	bl	800d0f4 <osDelay>
    pid(&pidDCV, Utarget, U);
 8000b36:	bf00      	nop
 8000b38:	e7e9      	b.n	8000b0e <StartDCVControl+0x22>
 8000b3a:	bf00      	nop
 8000b3c:	00000000 	.word	0x00000000
 8000b40:	3c23d70a 	.word	0x3c23d70a
 8000b44:	3dcccccd 	.word	0x3dcccccd
 8000b48:	24000348 	.word	0x24000348
 8000b4c:	2400012c 	.word	0x2400012c
 8000b50:	24009514 	.word	0x24009514
 8000b54:	24000130 	.word	0x24000130

08000b58 <appOLEDShow>:

/**
 * @brief OLED显示
 */
static void appOLEDShow()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af04      	add	r7, sp, #16
  static uint8_t text[32] = {0};
  sprintf((char *)text, "Ua: %5.2f Ub: %5.2f", signal_V->basic->rms_a, signal_V->basic->rms_b);
 8000b5e:	4b70      	ldr	r3, [pc, #448]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	ed8d 7b00 	vstr	d7, [sp]
 8000b7e:	ec53 2b16 	vmov	r2, r3, d6
 8000b82:	4968      	ldr	r1, [pc, #416]	@ (8000d24 <appOLEDShow+0x1cc>)
 8000b84:	4868      	ldr	r0, [pc, #416]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000b86:	f012 f891 	bl	8012cac <siprintf>
  OLED_ShowString(0, 0, text, 12);
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	4a66      	ldr	r2, [pc, #408]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2000      	movs	r0, #0
 8000b92:	f010 f8ed 	bl	8010d70 <OLED_ShowString>
  sprintf((char *)text, "Uc: %5.2f Ia: %5.2f", signal_V->basic->rms_c, signal_I->basic->rms_a);
 8000b96:	4b62      	ldr	r3, [pc, #392]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ba0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ba4:	4b61      	ldr	r3, [pc, #388]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb2:	ed8d 7b00 	vstr	d7, [sp]
 8000bb6:	ec53 2b16 	vmov	r2, r3, d6
 8000bba:	495d      	ldr	r1, [pc, #372]	@ (8000d30 <appOLEDShow+0x1d8>)
 8000bbc:	485a      	ldr	r0, [pc, #360]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000bbe:	f012 f875 	bl	8012cac <siprintf>
  OLED_ShowString(0, 12, text, 12);
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	4a58      	ldr	r2, [pc, #352]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000bc6:	210c      	movs	r1, #12
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f010 f8d1 	bl	8010d70 <OLED_ShowString>
  sprintf((char *)text, "Ib: %5.2f Ic: %5.2f", signal_I->basic->rms_b, signal_I->basic->rms_c);
 8000bce:	4b57      	ldr	r3, [pc, #348]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bdc:	4b53      	ldr	r3, [pc, #332]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000be6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bea:	ed8d 7b00 	vstr	d7, [sp]
 8000bee:	ec53 2b16 	vmov	r2, r3, d6
 8000bf2:	4950      	ldr	r1, [pc, #320]	@ (8000d34 <appOLEDShow+0x1dc>)
 8000bf4:	484c      	ldr	r0, [pc, #304]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000bf6:	f012 f859 	bl	8012cac <siprintf>
  OLED_ShowString(0, 24, text, 12);
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000bfe:	2118      	movs	r1, #24
 8000c00:	2000      	movs	r0, #0
 8000c02:	f010 f8b5 	bl	8010d70 <OLED_ShowString>
  sprintf((char *)text, "U: %5.2f I: %5.2f", U, I);
 8000c06:	4b4c      	ldr	r3, [pc, #304]	@ (8000d38 <appOLEDShow+0x1e0>)
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c10:	4b4a      	ldr	r3, [pc, #296]	@ (8000d3c <appOLEDShow+0x1e4>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1a:	ed8d 7b00 	vstr	d7, [sp]
 8000c1e:	ec53 2b16 	vmov	r2, r3, d6
 8000c22:	4947      	ldr	r1, [pc, #284]	@ (8000d40 <appOLEDShow+0x1e8>)
 8000c24:	4840      	ldr	r0, [pc, #256]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000c26:	f012 f841 	bl	8012cac <siprintf>
  OLED_ShowString(0, 36, text, 12);
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000c2e:	2124      	movs	r1, #36	@ 0x24
 8000c30:	2000      	movs	r0, #0
 8000c32:	f010 f89d 	bl	8010d70 <OLED_ShowString>
  float n = (signal_V->basic->rms_a * signal_I->basic->rms_a + signal_V->basic->rms_b * signal_I->basic->rms_b + signal_V->basic->rms_c * signal_I->basic->rms_c) / (U * I) * 100.f;
 8000c36:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c40:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4e:	4b34      	ldr	r3, [pc, #208]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	edd3 6a04 	vldr	s13, [r3, #16]
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <appOLEDShow+0x1c8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	edd3 6a05 	vldr	s13, [r3, #20]
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c82:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c86:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <appOLEDShow+0x1e0>)
 8000c88:	ed93 7a00 	vldr	s14, [r3]
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <appOLEDShow+0x1e4>)
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c9a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d44 <appOLEDShow+0x1ec>
 8000c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca2:	edc7 7a01 	vstr	s15, [r7, #4]
  if (n > 100.f)
 8000ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000caa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000d44 <appOLEDShow+0x1ec>
 8000cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	dd02      	ble.n	8000cbe <appOLEDShow+0x166>
  {
    n = 100.f;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <appOLEDShow+0x1f0>)
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e009      	b.n	8000cd2 <appOLEDShow+0x17a>
  }
  else if (n < 0.f)
 8000cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d502      	bpl.n	8000cd2 <appOLEDShow+0x17a>
  {
    n = 0.f;
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
  }
  // sprintf((char *)text, "cnt: %4ld n: %5.2f%%", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1), n);
  sprintf((char *)text, "d: %5.3f q: %5.3f %d", signal_I->pid_d->out, signal_I->pid_q->out, runState);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cdc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <appOLEDShow+0x1d4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <appOLEDShow+0x1f4>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	ed8d 7b00 	vstr	d7, [sp]
 8000cfa:	ec53 2b16 	vmov	r2, r3, d6
 8000cfe:	4914      	ldr	r1, [pc, #80]	@ (8000d50 <appOLEDShow+0x1f8>)
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000d02:	f011 ffd3 	bl	8012cac <siprintf>
  OLED_ShowString(0, 48, text, 12);
 8000d06:	230c      	movs	r3, #12
 8000d08:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <appOLEDShow+0x1d0>)
 8000d0a:	2130      	movs	r1, #48	@ 0x30
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f010 f82f 	bl	8010d70 <OLED_ShowString>
  OLED_Refresh();
 8000d12:	f00f febd 	bl	8010a90 <OLED_Refresh>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2400951c 	.word	0x2400951c
 8000d24:	08015304 	.word	0x08015304
 8000d28:	2400036c 	.word	0x2400036c
 8000d2c:	24009520 	.word	0x24009520
 8000d30:	08015318 	.word	0x08015318
 8000d34:	0801532c 	.word	0x0801532c
 8000d38:	24009514 	.word	0x24009514
 8000d3c:	24009518 	.word	0x24009518
 8000d40:	08015340 	.word	0x08015340
 8000d44:	42c80000 	.word	0x42c80000
 8000d48:	42c80000 	.word	0x42c80000
 8000d4c:	24009524 	.word	0x24009524
 8000d50:	08015354 	.word	0x08015354

08000d54 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b73      	ldr	r3, [pc, #460]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a71      	ldr	r2, [pc, #452]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d88:	4b6b      	ldr	r3, [pc, #428]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	4a6a      	ldr	r2, [pc, #424]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d98:	4b67      	ldr	r3, [pc, #412]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b64      	ldr	r3, [pc, #400]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	4a62      	ldr	r2, [pc, #392]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db6:	4b60      	ldr	r3, [pc, #384]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a5b      	ldr	r2, [pc, #364]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b58      	ldr	r3, [pc, #352]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	4b55      	ldr	r3, [pc, #340]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a53      	ldr	r2, [pc, #332]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b51      	ldr	r3, [pc, #324]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e00:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e10:	4b49      	ldr	r3, [pc, #292]	@ (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2120      	movs	r1, #32
 8000e22:	4846      	ldr	r0, [pc, #280]	@ (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e24:	f001 fe22 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4844      	ldr	r0, [pc, #272]	@ (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e2e:	f001 fe1d 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2188      	movs	r1, #136	@ 0x88
 8000e36:	4843      	ldr	r0, [pc, #268]	@ (8000f44 <MX_GPIO_Init+0x1f0>)
 8000e38:	f001 fe18 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e42:	4841      	ldr	r0, [pc, #260]	@ (8000f48 <MX_GPIO_Init+0x1f4>)
 8000e44:	f001 fe12 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	483f      	ldr	r0, [pc, #252]	@ (8000f4c <MX_GPIO_Init+0x1f8>)
 8000e4e:	f001 fe0d 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	483d      	ldr	r0, [pc, #244]	@ (8000f4c <MX_GPIO_Init+0x1f8>)
 8000e58:	f001 fe08 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4832      	ldr	r0, [pc, #200]	@ (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e74:	f001 fc4a 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	482c      	ldr	r0, [pc, #176]	@ (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e90:	f001 fc3c 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000e94:	2388      	movs	r3, #136	@ 0x88
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <MX_GPIO_Init+0x1f0>)
 8000eac:	f001 fc2e 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000eb0:	2340      	movs	r3, #64	@ 0x40
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481f      	ldr	r0, [pc, #124]	@ (8000f44 <MX_GPIO_Init+0x1f0>)
 8000ec6:	f001 fc21 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000eca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <MX_GPIO_Init+0x1f4>)
 8000ee4:	f001 fc12 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <MX_GPIO_Init+0x1f8>)
 8000f00:	f001 fc04 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000f04:	2340      	movs	r3, #64	@ 0x40
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <MX_GPIO_Init+0x1f8>)
 8000f1c:	f001 fbf6 	bl	800270c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	2017      	movs	r0, #23
 8000f26:	f001 f901 	bl	800212c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f2a:	2017      	movs	r0, #23
 8000f2c:	f001 f918 	bl	8002160 <HAL_NVIC_EnableIRQ>

}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	@ 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020400 	.word	0x58020400
 8000f44:	58021800 	.word	0x58021800
 8000f48:	58020000 	.word	0x58020000
 8000f4c:	58022000 	.word	0x58022000

08000f50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_I2C1_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <MX_I2C1_Init+0x7c>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f8c:	f001 fdbc 	bl	8002b08 <HAL_I2C_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f000 fa33 	bl	8001400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000f9e:	f002 fb3f 	bl	8003620 <HAL_I2CEx_ConfigAnalogFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f000 fa2a 	bl	8001400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_I2C1_Init+0x74>)
 8000fb0:	f002 fb81 	bl	80036b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 fa21 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2400038c 	.word	0x2400038c
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	307075b1 	.word	0x307075b1

08000fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	22c0      	movs	r2, #192	@ 0xc0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f011 febe 	bl	8012d72 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a26      	ldr	r2, [pc, #152]	@ (8001094 <HAL_I2C_MspInit+0xc4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d145      	bne.n	800108c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001000:	f04f 0208 	mov.w	r2, #8
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fe94 	bl	8005d44 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001022:	f000 f9ed 	bl	8001400 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001044:	23c0      	movs	r3, #192	@ 0xc0
 8001046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104a:	2312      	movs	r3, #18
 800104c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105c:	2304      	movs	r3, #4
 800105e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800106a:	f001 fb4f 	bl	800270c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800108c:	bf00      	nop
 800108e:	37e8      	adds	r7, #232	@ 0xe8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40005400 	.word	0x40005400
 8001098:	58024400 	.word	0x58024400
 800109c:	58020400 	.word	0x58020400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010a6:	f000 f961 	bl	800136c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80010aa:	4b40      	ldr	r3, [pc, #256]	@ (80011ac <main+0x10c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11b      	bne.n	80010ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010b6:	f3bf 8f4f 	dsb	sy
}
 80010ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010bc:	f3bf 8f6f 	isb	sy
}
 80010c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010c2:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <main+0x10c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010ca:	f3bf 8f4f 	dsb	sy
}
 80010ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010d0:	f3bf 8f6f 	isb	sy
}
 80010d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010d6:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <main+0x10c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a34      	ldr	r2, [pc, #208]	@ (80011ac <main+0x10c>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010e2:	f3bf 8f4f 	dsb	sy
}
 80010e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e8:	f3bf 8f6f 	isb	sy
}
 80010ec:	e000      	b.n	80010f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80010ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80010f0:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <main+0x10c>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d138      	bne.n	800116e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <main+0x10c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001104:	f3bf 8f4f 	dsb	sy
}
 8001108:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <main+0x10c>)
 800110c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001110:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	0b5b      	lsrs	r3, r3, #13
 8001116:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800111a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001124:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	015a      	lsls	r2, r3, #5
 800112a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800112e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001134:	491d      	ldr	r1, [pc, #116]	@ (80011ac <main+0x10c>)
 8001136:	4313      	orrs	r3, r2
 8001138:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ef      	bne.n	8001126 <main+0x86>
    } while(sets-- != 0U);
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	60ba      	str	r2, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e5      	bne.n	800111c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001150:	f3bf 8f4f 	dsb	sy
}
 8001154:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <main+0x10c>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <main+0x10c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	e000      	b.n	8001170 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800116e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f000 fe98 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f81c 	bl	80011b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001178:	f000 f8c8 	bl	800130c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117c:	f7ff fdea 	bl	8000d54 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001180:	f000 f99a 	bl	80014b8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001184:	f000 fd52 	bl	8001c2c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001188:	f7ff fee2 	bl	8000f50 <MX_I2C1_Init>
  MX_TIM1_Init();
 800118c:	f000 fc86 	bl	8001a9c <MX_TIM1_Init>
  MX_DAC1_Init();
 8001190:	f7ff fa0c 	bl	80005ac <MX_DAC1_Init>
  MX_SPI1_Init();
 8001194:	f000 f93a 	bl	800140c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001198:	f00e fcc6 	bl	800fb28 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800119c:	f00b fece 	bl	800cf3c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011a0:	f7ff fa84 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011a4:	f00b feee 	bl	800cf84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <main+0x108>
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09e      	sub	sp, #120	@ 0x78
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ba:	224c      	movs	r2, #76	@ 0x4c
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f011 fdd7 	bl	8012d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f011 fdd0 	bl	8012d72 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f003 fd5a 	bl	8004c8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b48      	ldr	r3, [pc, #288]	@ (8001300 <SystemClock_Config+0x150>)
 80011de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e0:	4a47      	ldr	r2, [pc, #284]	@ (8001300 <SystemClock_Config+0x150>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011e8:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <SystemClock_Config+0x150>)
 80011ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <SystemClock_Config+0x154>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a43      	ldr	r2, [pc, #268]	@ (8001304 <SystemClock_Config+0x154>)
 80011f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <SystemClock_Config+0x154>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800120a:	bf00      	nop
 800120c:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <SystemClock_Config+0x154>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001218:	d1f8      	bne.n	800120c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <SystemClock_Config+0x158>)
 800121c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001220:	4a39      	ldr	r2, [pc, #228]	@ (8001308 <SystemClock_Config+0x158>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <SystemClock_Config+0x158>)
 800122c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <SystemClock_Config+0x154>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a30      	ldr	r2, [pc, #192]	@ (8001304 <SystemClock_Config+0x154>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <SystemClock_Config+0x154>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <SystemClock_Config+0x150>)
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4a2a      	ldr	r2, [pc, #168]	@ (8001300 <SystemClock_Config+0x150>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <SystemClock_Config+0x150>)
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800126a:	bf00      	nop
 800126c:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0x154>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001278:	d1f8      	bne.n	800126c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127a:	2301      	movs	r3, #1
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001288:	2302      	movs	r3, #2
 800128a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800128c:	2305      	movs	r3, #5
 800128e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001290:	23c0      	movs	r3, #192	@ 0xc0
 8001292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001298:	2314      	movs	r3, #20
 800129a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80012a0:	2308      	movs	r3, #8
 80012a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fd35 	bl	8004d20 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80012bc:	f000 f8a0 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	233f      	movs	r3, #63	@ 0x3f
 80012c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2303      	movs	r3, #3
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012cc:	2308      	movs	r3, #8
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012d4:	2340      	movs	r3, #64	@ 0x40
 80012d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012de:	2340      	movs	r3, #64	@ 0x40
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2104      	movs	r1, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f973 	bl	80055d4 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80012f4:	f000 f884 	bl	8001400 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3778      	adds	r7, #120	@ 0x78
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	58000400 	.word	0x58000400
 8001304:	58024800 	.word	0x58024800
 8001308:	58024400 	.word	0x58024400

0800130c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0b0      	sub	sp, #192	@ 0xc0
 8001310:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	22c0      	movs	r2, #192	@ 0xc0
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f011 fd2a 	bl	8012d72 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 800131e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 800132a:	2319      	movs	r3, #25
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800132e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001344:	2300      	movs	r3, #0
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800134c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001350:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fcf5 	bl	8005d44 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001360:	f000 f84e 	bl	8001400 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	37c0      	adds	r7, #192	@ 0xc0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800137e:	f000 fefd 	bl	800217c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001382:	2301      	movs	r3, #1
 8001384:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001386:	2300      	movs	r3, #0
 8001388:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800138a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800138e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001390:	2312      	movs	r3, #18
 8001392:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001394:	2300      	movs	r3, #0
 8001396:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001398:	2301      	movs	r3, #1
 800139a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800139c:	2303      	movs	r3, #3
 800139e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 ff1a 	bl	80021ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 80013bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80013c2:	2310      	movs	r3, #16
 80013c4:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013c6:	463b      	mov	r3, r7
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 ff0f 	bl	80021ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013ce:	2004      	movs	r0, #4
 80013d0:	f000 feec 	bl	80021ac <HAL_MPU_Enable>

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ee:	f000 fd95 	bl	8001f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001000 	.word	0x40001000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <Error_Handler+0x8>

0800140c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001412:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <MX_SPI1_Init+0xa8>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001418:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800141c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001420:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001424:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001428:	2207      	movs	r2, #7
 800142a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800143a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800143e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001460:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_SPI1_Init+0xa4>)
 800149e:	f005 ffbf 	bl	8007420 <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014a8:	f7ff ffaa 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	240003e0 	.word	0x240003e0
 80014b4:	40013000 	.word	0x40013000

080014b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014be:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <MX_SPI2_Init+0xac>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80014ca:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014d4:	220f      	movs	r2, #15
 80014d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80014f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_SPI2_Init+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_SPI2_Init+0xa8>)
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001510:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001518:	2200      	movs	r2, #0
 800151a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800151c:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <MX_SPI2_Init+0xa8>)
 800151e:	2200      	movs	r2, #0
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001524:	2200      	movs	r2, #0
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001528:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <MX_SPI2_Init+0xa8>)
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001530:	2200      	movs	r2, #0
 8001532:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001536:	2200      	movs	r2, #0
 8001538:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_SPI2_Init+0xa8>)
 800153c:	2200      	movs	r2, #0
 800153e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001542:	2200      	movs	r2, #0
 8001544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_SPI2_Init+0xa8>)
 8001548:	2200      	movs	r2, #0
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	@ (8001560 <MX_SPI2_Init+0xa8>)
 800154e:	f005 ff67 	bl	8007420 <HAL_SPI_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001558:	f7ff ff52 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24000468 	.word	0x24000468
 8001564:	40003800 	.word	0x40003800

08001568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a34      	ldr	r2, [pc, #208]	@ (8001658 <HAL_SPI_MspInit+0xf0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12e      	bne.n	80015e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 800158c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001590:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 8001592:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001596:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 800159c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ae:	4a2b      	ldr	r2, [pc, #172]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b8:	4b28      	ldr	r3, [pc, #160]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDIN_Pin;
 80015c6:	23a0      	movs	r3, #160	@ 0xa0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d6:	2305      	movs	r3, #5
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	481f      	ldr	r0, [pc, #124]	@ (8001660 <HAL_SPI_MspInit+0xf8>)
 80015e2:	f001 f893 	bl	800270c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015e6:	e032      	b.n	800164e <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_SPI_MspInit+0xfc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12d      	bne.n	800164e <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f8:	4a18      	ldr	r2, [pc, #96]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_SPI_MspInit+0xf4>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800162e:	2306      	movs	r3, #6
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163e:	2305      	movs	r3, #5
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4807      	ldr	r0, [pc, #28]	@ (8001668 <HAL_SPI_MspInit+0x100>)
 800164a:	f001 f85f 	bl	800270c <HAL_GPIO_Init>
}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	@ 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013000 	.word	0x40013000
 800165c:	58024400 	.word	0x58024400
 8001660:	58020000 	.word	0x58020000
 8001664:	40003800 	.word	0x40003800
 8001668:	58022000 	.word	0x58022000

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_MspInit+0x38>)
 8001674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_MspInit+0x38>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_MspInit+0x38>)
 8001684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	210f      	movs	r1, #15
 8001694:	f06f 0001 	mvn.w	r0, #1
 8001698:	f000 fd48 	bl	800212c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	58024400 	.word	0x58024400

080016a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	@ 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d827      	bhi.n	8001706 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	2036      	movs	r0, #54	@ 0x36
 80016bc:	f000 fd36 	bl	800212c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016c0:	2036      	movs	r0, #54	@ 0x36
 80016c2:	f000 fd4d 	bl	8002160 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80016c6:	4a29      	ldr	r2, [pc, #164]	@ (800176c <HAL_InitTick+0xc4>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016cc:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <HAL_InitTick+0xc8>)
 80016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d2:	4a27      	ldr	r2, [pc, #156]	@ (8001770 <HAL_InitTick+0xc8>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_InitTick+0xc8>)
 80016de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ea:	f107 0210 	add.w	r2, r7, #16
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 fae3 	bl	8005cc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001700:	2b00      	cmp	r3, #0
 8001702:	d106      	bne.n	8001712 <HAL_InitTick+0x6a>
 8001704:	e001      	b.n	800170a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e02b      	b.n	8001762 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800170a:	f004 fac3 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 800170e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001710:	e004      	b.n	800171c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001712:	f004 fabf 	bl	8005c94 <HAL_RCC_GetPCLK1Freq>
 8001716:	4603      	mov	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800171e:	4a15      	ldr	r2, [pc, #84]	@ (8001774 <HAL_InitTick+0xcc>)
 8001720:	fba2 2303 	umull	r2, r3, r2, r3
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	3b01      	subs	r3, #1
 8001728:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_InitTick+0xd0>)
 800172c:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_InitTick+0xd4>)
 800172e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_InitTick+0xd0>)
 8001732:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001736:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001738:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_InitTick+0xd0>)
 800173a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800173c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_InitTick+0xd0>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_InitTick+0xd0>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800174a:	480b      	ldr	r0, [pc, #44]	@ (8001778 <HAL_InitTick+0xd0>)
 800174c:	f006 fcd5 	bl	80080fa <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001756:	4808      	ldr	r0, [pc, #32]	@ (8001778 <HAL_InitTick+0xd0>)
 8001758:	f006 fd26 	bl	80081a8 <HAL_TIM_Base_Start_IT>
 800175c:	4603      	mov	r3, r0
 800175e:	e000      	b.n	8001762 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	3740      	adds	r7, #64	@ 0x40
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24000008 	.word	0x24000008
 8001770:	58024400 	.word	0x58024400
 8001774:	431bde83 	.word	0x431bde83
 8001778:	240004f0 	.word	0x240004f0
 800177c:	40001000 	.word	0x40001000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 80017ba:	2040      	movs	r0, #64	@ 0x40
 80017bc:	f001 f989 	bl	8002ad2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <TIM6_DAC_IRQHandler+0x20>)
 80017ca:	791b      	ldrb	r3, [r3, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80017d2:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <TIM6_DAC_IRQHandler+0x20>)
 80017d4:	f000 fdc3 	bl	800235e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <TIM6_DAC_IRQHandler+0x24>)
 80017da:	f006 fecd 	bl	8008578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000318 	.word	0x24000318
 80017e8:	240004f0 	.word	0x240004f0

080017ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <OTG_FS_IRQHandler+0x10>)
 80017f2:	f002 f8ed 	bl	80039d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2400640c 	.word	0x2400640c

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181a:	f011 fb0d 	bl	8012e38 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001842:	bf00      	nop
 8001844:	e7fd      	b.n	8001842 <_exit+0x12>

08001846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e00a      	b.n	800186e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001858:	f3af 8000 	nop.w
 800185c:	4601      	mov	r1, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	b2ca      	uxtb	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	dbf0      	blt.n	8001858 <_read+0x12>
  }

  return len;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e009      	b.n	80018a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf1      	blt.n	8001892 <_write+0x12>
  }
  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_close>:

int _close(int file)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e0:	605a      	str	r2, [r3, #4]
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_isatty>:

int _isatty(int file)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	@ (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f011 fa72 	bl	8012e38 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	24080000 	.word	0x24080000
 8001980:	00008000 	.word	0x00008000
 8001984:	2400053c 	.word	0x2400053c
 8001988:	24009678 	.word	0x24009678

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <SystemInit+0xe4>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001996:	4a36      	ldr	r2, [pc, #216]	@ (8001a70 <SystemInit+0xe4>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <SystemInit+0xe8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d807      	bhi.n	80019bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ac:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <SystemInit+0xe8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 030f 	bic.w	r3, r3, #15
 80019b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <SystemInit+0xe8>)
 80019b6:	f043 0307 	orr.w	r3, r3, #7
 80019ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <SystemInit+0xec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a78 <SystemInit+0xec>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <SystemInit+0xec>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <SystemInit+0xec>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4929      	ldr	r1, [pc, #164]	@ (8001a78 <SystemInit+0xec>)
 80019d4:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <SystemInit+0xf0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <SystemInit+0xe8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <SystemInit+0xe8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 030f 	bic.w	r3, r3, #15
 80019ee:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <SystemInit+0xe8>)
 80019f0:	f043 0307 	orr.w	r3, r3, #7
 80019f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <SystemInit+0xec>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a78 <SystemInit+0xec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <SystemInit+0xec>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <SystemInit+0xec>)
 8001a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <SystemInit+0xf4>)
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <SystemInit+0xec>)
 8001a10:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <SystemInit+0xf8>)
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <SystemInit+0xec>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	@ (8001a88 <SystemInit+0xfc>)
 8001a18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <SystemInit+0xec>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <SystemInit+0xec>)
 8001a22:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <SystemInit+0xfc>)
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <SystemInit+0xec>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <SystemInit+0xec>)
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <SystemInit+0xfc>)
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <SystemInit+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <SystemInit+0xec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a78 <SystemInit+0xec>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <SystemInit+0xec>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <SystemInit+0x100>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <SystemInit+0x104>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a56:	d202      	bcs.n	8001a5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <SystemInit+0x108>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <SystemInit+0x10c>)
 8001a60:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	52002000 	.word	0x52002000
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a80:	02020200 	.word	0x02020200
 8001a84:	01ff0000 	.word	0x01ff0000
 8001a88:	01010280 	.word	0x01010280
 8001a8c:	5c001000 	.word	0x5c001000
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	51008108 	.word	0x51008108
 8001a98:	52004000 	.word	0x52004000

08001a9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b09a      	sub	sp, #104	@ 0x68
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	222c      	movs	r2, #44	@ 0x2c
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f011 f94b 	bl	8012d72 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001adc:	4b51      	ldr	r3, [pc, #324]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001ade:	4a52      	ldr	r2, [pc, #328]	@ (8001c28 <MX_TIM1_Init+0x18c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae2:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001aea:	2220      	movs	r2, #32
 8001aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001aee:	4b4d      	ldr	r3, [pc, #308]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001af0:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b4b      	ldr	r3, [pc, #300]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afc:	4b49      	ldr	r3, [pc, #292]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b48      	ldr	r3, [pc, #288]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b08:	4846      	ldr	r0, [pc, #280]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b0a:	f006 faf6 	bl	80080fa <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b14:	f7ff fc74 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b22:	4619      	mov	r1, r3
 8001b24:	483f      	ldr	r0, [pc, #252]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b26:	f006 ff43 	bl	80089b0 <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b30:	f7ff fc66 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b34:	483b      	ldr	r0, [pc, #236]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b36:	f006 fbaf 	bl	8008298 <HAL_TIM_PWM_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b40:	f7ff fc5e 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4833      	ldr	r0, [pc, #204]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b58:	f007 fd4c 	bl	80095f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b62:	f7ff fc4d 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b66:	2360      	movs	r3, #96	@ 0x60
 8001b68:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 8001b6a:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4825      	ldr	r0, [pc, #148]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001b8e:	f006 fdfb 	bl	8008788 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b98:	f7ff fc32 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001ba6:	f006 fdef 	bl	8008788 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001bb0:	f7ff fc26 	bl	8001400 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4818      	ldr	r0, [pc, #96]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001bc2:	f006 fde1 	bl	8008788 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001bcc:	f7ff fc18 	bl	8001400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001c06:	f007 fd83 	bl	8009710 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001c10:	f7ff fbf6 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c14:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <MX_TIM1_Init+0x188>)
 8001c16:	f000 f8b9 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001c1a:	bf00      	nop
 8001c1c:	3768      	adds	r7, #104	@ 0x68
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	24000540 	.word	0x24000540
 8001c28:	40010000 	.word	0x40010000

08001c2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08e      	sub	sp, #56	@ 0x38
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c66:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c74:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b27      	ldr	r3, [pc, #156]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c86:	4824      	ldr	r0, [pc, #144]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001c88:	f006 fa37 	bl	80080fa <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c92:	f7ff fbb5 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481d      	ldr	r0, [pc, #116]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001ca4:	f006 fe84 	bl	80089b0 <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cae:	f7ff fba7 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb2:	4819      	ldr	r0, [pc, #100]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001cb4:	f006 faf0 	bl	8008298 <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cbe:	f7ff fb9f 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001cd2:	f007 fc8f 	bl	80095f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cdc:	f7ff fb90 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce0:	2360      	movs	r3, #96	@ 0x60
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001ce4:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4807      	ldr	r0, [pc, #28]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001cfa:	f006 fd45 	bl	8008788 <HAL_TIM_PWM_ConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d04:	f7ff fb7c 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d08:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <MX_TIM2_Init+0xec>)
 8001d0a:	f000 f83f 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001d0e:	bf00      	nop
 8001d10:	3738      	adds	r7, #56	@ 0x38
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2400058c 	.word	0x2400058c

08001d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_TIM_Base_MspInit+0x68>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10f      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d34:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d4c:	e013      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d10e      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_TIM_Base_MspInit+0x6c>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	58024400 	.word	0x58024400

08001d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a25      	ldr	r2, [pc, #148]	@ (8001e40 <HAL_TIM_MspPostInit+0xb4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d120      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001dcc:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4817      	ldr	r0, [pc, #92]	@ (8001e48 <HAL_TIM_MspPostInit+0xbc>)
 8001dea:	f000 fc8f 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dee:	e023      	b.n	8001e38 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df8:	d11e      	bne.n	8001e38 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e00:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_TIM_MspPostInit+0xb8>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <HAL_TIM_MspPostInit+0xc0>)
 8001e34:	f000 fc6a 	bl	800270c <HAL_GPIO_Init>
}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	@ 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40010000 	.word	0x40010000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	58020000 	.word	0x58020000

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e54:	f7ff fd9a 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	@ (8001e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f010 ffe1 	bl	8012e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7ff f90d 	bl	80010a0 <main>
  bx  lr
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e90:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 8001e94:	08017870 	.word	0x08017870
  ldr r2, =_sbss
 8001e98:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 8001e9c:	24009674 	.word	0x24009674

08001ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC3_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f000 f933 	bl	8002116 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb0:	f003 fd46 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_Init+0x68>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	4913      	ldr	r1, [pc, #76]	@ (8001f10 <HAL_Init+0x6c>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <HAL_Init+0x68>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <HAL_Init+0x6c>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <HAL_Init+0x70>)
 8001ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <HAL_Init+0x74>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eee:	2005      	movs	r0, #5
 8001ef0:	f7ff fbda 	bl	80016a8 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e002      	b.n	8001f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001efe:	f7ff fbb5 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	080154c8 	.word	0x080154c8
 8001f14:	24000004 	.word	0x24000004
 8001f18:	24000000 	.word	0x24000000

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2400000c 	.word	0x2400000c
 8001f40:	240005d8 	.word	0x240005d8

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	240005d8 	.word	0x240005d8

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2400000c 	.word	0x2400000c

08001fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fa8:	4b03      	ldr	r3, [pc, #12]	@ (8001fb8 <HAL_GetREVID+0x14>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0c1b      	lsrs	r3, r3, #16
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	5c001000 	.word	0x5c001000

08001fbc <__NVIC_SetPriorityGrouping>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <__NVIC_SetPriorityGrouping+0x40>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	05fa0000 	.word	0x05fa0000

08002004 <__NVIC_GetPriorityGrouping>:
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	@ (8002058 <__NVIC_EnableIRQ+0x38>)
 800203a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	@ (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	@ 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ff4c 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800213a:	f7ff ff63 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800213e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	6978      	ldr	r0, [r7, #20]
 8002146:	f7ff ffb3 	bl	80020b0 <NVIC_EncodePriority>
 800214a:	4602      	mov	r2, r0
 800214c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ff82 	bl	800205c <__NVIC_SetPriority>
}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff56 	bl	8002020 <__NVIC_EnableIRQ>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002180:	f3bf 8f5f 	dmb	sy
}
 8002184:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_MPU_Disable+0x28>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_MPU_Disable+0x28>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002190:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_MPU_Disable+0x2c>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	e000ed90 	.word	0xe000ed90

080021ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021b4:	4a0b      	ldr	r2, [pc, #44]	@ (80021e4 <HAL_MPU_Enable+0x38>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_MPU_Enable+0x3c>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <HAL_MPU_Enable+0x3c>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021ca:	f3bf 8f4f 	dsb	sy
}
 80021ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021d0:	f3bf 8f6f 	isb	sy
}
 80021d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed90 	.word	0xe000ed90
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	785a      	ldrb	r2, [r3, #1]
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_MPU_ConfigRegion+0x7c>)
 80021fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_MPU_ConfigRegion+0x7c>)
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <HAL_MPU_ConfigRegion+0x7c>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002208:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_MPU_ConfigRegion+0x7c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7b1b      	ldrb	r3, [r3, #12]
 8002214:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7adb      	ldrb	r3, [r3, #11]
 800221a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800221c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7a9b      	ldrb	r3, [r3, #10]
 8002222:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7b5b      	ldrb	r3, [r3, #13]
 800222a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800222c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7b9b      	ldrb	r3, [r3, #14]
 8002232:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002234:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7bdb      	ldrb	r3, [r3, #15]
 800223a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800223c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7a5b      	ldrb	r3, [r3, #9]
 8002242:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002244:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7a1b      	ldrb	r3, [r3, #8]
 800224a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800224c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002256:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002258:	6113      	str	r3, [r2, #16]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed90 	.word	0xe000ed90

0800226c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e014      	b.n	80022a8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe f9be 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e046      	b.n	8002352 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	795b      	ldrb	r3, [r3, #5]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_DAC_Start+0x20>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e040      	b.n	8002352 <HAL_DAC_Start+0xa2>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002304:	2b02      	cmp	r3, #2
 8002306:	d11d      	bne.n	8002344 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e014      	b.n	8002344 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2102      	movs	r1, #2
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0202 	orr.w	r2, r2, #2
 8002342:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01d      	beq.n	80023bc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023b4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f851 	bl	800245e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01d      	beq.n	8002402 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d018      	beq.n	8002402 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2204      	movs	r2, #4
 80023d4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80023fa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f97b 	bl	80026f8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800240a:	b480      	push	{r7}
 800240c:	b087      	sub	sp, #28
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e015      	b.n	8002452 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3308      	adds	r3, #8
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	e004      	b.n	8002448 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	3314      	adds	r3, #20
 8002446:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	461a      	mov	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_DAC_ConfigChannel+0x1e>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e12a      	b.n	80026ec <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	795b      	ldrb	r3, [r3, #5]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_DAC_ConfigChannel+0x2e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e124      	b.n	80026ec <HAL_DAC_ConfigChannel+0x278>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2202      	movs	r2, #2
 80024ac:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d17a      	bne.n	80025ac <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80024b6:	f7ff fd45 	bl	8001f44 <HAL_GetTick>
 80024ba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d13d      	bne.n	800253e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024c2:	e018      	b.n	80024f6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024c4:	f7ff fd3e 	bl	8001f44 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d911      	bls.n	80024f6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d8:	4b86      	ldr	r3, [pc, #536]	@ (80026f4 <HAL_DAC_ConfigChannel+0x280>)
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f043 0208 	orr.w	r2, r3, #8
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2203      	movs	r2, #3
 80024f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0fa      	b.n	80026ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fc:	4b7d      	ldr	r3, [pc, #500]	@ (80026f4 <HAL_DAC_ConfigChannel+0x280>)
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1df      	bne.n	80024c4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	6992      	ldr	r2, [r2, #24]
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40
 800250e:	e020      	b.n	8002552 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002510:	f7ff fd18 	bl	8001f44 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d90f      	bls.n	800253e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	da0a      	bge.n	800253e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f043 0208 	orr.w	r2, r3, #8
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2203      	movs	r2, #3
 8002538:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0d6      	b.n	80026ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	2b00      	cmp	r3, #0
 8002546:	dbe3      	blt.n	8002510 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	6992      	ldr	r2, [r2, #24]
 8002550:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	ea02 0103 	and.w	r1, r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	69da      	ldr	r2, [r3, #28]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	21ff      	movs	r1, #255	@ 0xff
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	ea02 0103 	and.w	r1, r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	6a1a      	ldr	r2, [r3, #32]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d11d      	bne.n	80025f0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	221f      	movs	r2, #31
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2207      	movs	r2, #7
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
 8002618:	e00f      	b.n	800263a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d102      	bne.n	8002628 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002622:	2301      	movs	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
 8002626:	e008      	b.n	800263a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002630:	2301      	movs	r3, #1
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	e001      	b.n	800263a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4313      	orrs	r3, r2
 8002644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	22c0      	movs	r2, #192	@ 0xc0
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	@ 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20008000 	.word	0x20008000

080026f8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800271a:	4b89      	ldr	r3, [pc, #548]	@ (8002940 <HAL_GPIO_Init+0x234>)
 800271c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800271e:	e194      	b.n	8002a4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8186 	beq.w	8002a44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d005      	beq.n	8002750 <HAL_GPIO_Init+0x44>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d130      	bne.n	80027b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002786:	2201      	movs	r2, #1
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0201 	and.w	r2, r3, #1
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d017      	beq.n	80027ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d123      	bne.n	8002842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	08da      	lsrs	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3208      	adds	r2, #8
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	220f      	movs	r2, #15
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	69b9      	ldr	r1, [r7, #24]
 800283e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0203 	and.w	r2, r3, #3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80e0 	beq.w	8002a44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002884:	4b2f      	ldr	r3, [pc, #188]	@ (8002944 <HAL_GPIO_Init+0x238>)
 8002886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800288a:	4a2e      	ldr	r2, [pc, #184]	@ (8002944 <HAL_GPIO_Init+0x238>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002894:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_GPIO_Init+0x238>)
 8002896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <HAL_GPIO_Init+0x23c>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a20      	ldr	r2, [pc, #128]	@ (800294c <HAL_GPIO_Init+0x240>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d052      	beq.n	8002974 <HAL_GPIO_Init+0x268>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <HAL_GPIO_Init+0x244>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_GPIO_Init+0x22e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <HAL_GPIO_Init+0x248>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02b      	beq.n	8002936 <HAL_GPIO_Init+0x22a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_GPIO_Init+0x24c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d025      	beq.n	8002932 <HAL_GPIO_Init+0x226>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	@ (800295c <HAL_GPIO_Init+0x250>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <HAL_GPIO_Init+0x222>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002960 <HAL_GPIO_Init+0x254>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d019      	beq.n	800292a <HAL_GPIO_Init+0x21e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002964 <HAL_GPIO_Init+0x258>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_GPIO_Init+0x21a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a19      	ldr	r2, [pc, #100]	@ (8002968 <HAL_GPIO_Init+0x25c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00d      	beq.n	8002922 <HAL_GPIO_Init+0x216>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_GPIO_Init+0x260>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <HAL_GPIO_Init+0x212>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_GPIO_Init+0x264>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_GPIO_Init+0x20e>
 8002916:	2309      	movs	r3, #9
 8002918:	e02d      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800291a:	230a      	movs	r3, #10
 800291c:	e02b      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800291e:	2308      	movs	r3, #8
 8002920:	e029      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 8002922:	2307      	movs	r3, #7
 8002924:	e027      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 8002926:	2306      	movs	r3, #6
 8002928:	e025      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800292a:	2305      	movs	r3, #5
 800292c:	e023      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800292e:	2304      	movs	r3, #4
 8002930:	e021      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 8002932:	2303      	movs	r3, #3
 8002934:	e01f      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 8002936:	2302      	movs	r3, #2
 8002938:	e01d      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800293a:	2301      	movs	r3, #1
 800293c:	e01b      	b.n	8002976 <HAL_GPIO_Init+0x26a>
 800293e:	bf00      	nop
 8002940:	58000080 	.word	0x58000080
 8002944:	58024400 	.word	0x58024400
 8002948:	58000400 	.word	0x58000400
 800294c:	58020000 	.word	0x58020000
 8002950:	58020400 	.word	0x58020400
 8002954:	58020800 	.word	0x58020800
 8002958:	58020c00 	.word	0x58020c00
 800295c:	58021000 	.word	0x58021000
 8002960:	58021400 	.word	0x58021400
 8002964:	58021800 	.word	0x58021800
 8002968:	58021c00 	.word	0x58021c00
 800296c:	58022000 	.word	0x58022000
 8002970:	58022400 	.word	0x58022400
 8002974:	2300      	movs	r3, #0
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002986:	4938      	ldr	r1, [pc, #224]	@ (8002a68 <HAL_GPIO_Init+0x35c>)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f ae63 	bne.w	8002720 <HAL_GPIO_Init+0x14>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	3724      	adds	r7, #36	@ 0x24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	58000400 	.word	0x58000400

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab0:	887a      	ldrh	r2, [r7, #2]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	041a      	lsls	r2, r3, #16
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	400b      	ands	r3, r1
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	619a      	str	r2, [r3, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00f f83b 	bl	8011b74 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e08b      	b.n	8002c32 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe fa4e 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	e006      	b.n	8002b90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d108      	bne.n	8002baa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	e007      	b.n	8002bba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <HAL_I2C_Init+0x134>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	02008000 	.word	0x02008000

08002c40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	460b      	mov	r3, r1
 8002c54:	813b      	strh	r3, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	f040 80f9 	bne.w	8002e5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x34>
 8002c6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0ed      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x4e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0e6      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c96:	f7ff f955 	bl	8001f44 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fac3 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0d1      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2221      	movs	r2, #33	@ 0x21
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	@ 0x40
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce0:	88f8      	ldrh	r0, [r7, #6]
 8002ce2:	893a      	ldrh	r2, [r7, #8]
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4603      	mov	r3, r0
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f9d3 	bl	800309c <I2C_RequestMemoryWrite>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0a9      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2bff      	cmp	r3, #255	@ 0xff
 8002d10:	d90e      	bls.n	8002d30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	22ff      	movs	r2, #255	@ 0xff
 8002d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	8979      	ldrh	r1, [r7, #10]
 8002d20:	2300      	movs	r3, #0
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fc47 	bl	80035bc <I2C_TransferConfig>
 8002d2e:	e00f      	b.n	8002d50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fc36 	bl	80035bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fac6 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e07b      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d034      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x1c8>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d130      	bne.n	8002e08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa3f 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04d      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2bff      	cmp	r3, #255	@ 0xff
 8002dc8:	d90e      	bls.n	8002de8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	22ff      	movs	r2, #255	@ 0xff
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	8979      	ldrh	r1, [r7, #10]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fbeb 	bl	80035bc <I2C_TransferConfig>
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	8979      	ldrh	r1, [r7, #10]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fbda 	bl	80035bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d19e      	bne.n	8002d50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 faac 	bl	8003374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e01a      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_I2C_Mem_Write+0x224>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fe00e800 	.word	0xfe00e800

08002e68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	f040 80fd 	bne.w	800308a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x34>
 8002e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0f1      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Mem_Read+0x4e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e0ea      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ebe:	f7ff f841 	bl	8001f44 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2319      	movs	r3, #25
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f9af 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d5      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2222      	movs	r2, #34	@ 0x22
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2240      	movs	r2, #64	@ 0x40
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f08:	88f8      	ldrh	r0, [r7, #6]
 8002f0a:	893a      	ldrh	r2, [r7, #8]
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4603      	mov	r3, r0
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f913 	bl	8003144 <I2C_RequestMemoryRead>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0ad      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d90e      	bls.n	8002f58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	22ff      	movs	r2, #255	@ 0xff
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	4b52      	ldr	r3, [pc, #328]	@ (8003094 <HAL_I2C_Mem_Read+0x22c>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fb33 	bl	80035bc <I2C_TransferConfig>
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003094 <HAL_I2C_Mem_Read+0x22c>)
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fb22 	bl	80035bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2104      	movs	r1, #4
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f956 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07c      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d034      	beq.n	8003038 <HAL_I2C_Mem_Read+0x1d0>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d130      	bne.n	8003038 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f927 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e04d      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2bff      	cmp	r3, #255	@ 0xff
 8002ff8:	d90e      	bls.n	8003018 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	@ 0xff
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	2300      	movs	r3, #0
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fad3 	bl	80035bc <I2C_TransferConfig>
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	b2da      	uxtb	r2, r3
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fac2 	bl	80035bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d19a      	bne.n	8002f78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f994 	bl	8003374 <I2C_WaitOnSTOPFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e01a      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2220      	movs	r2, #32
 800305c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_I2C_Mem_Read+0x230>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	80002400 	.word	0x80002400
 8003098:	fe00e800 	.word	0xfe00e800

0800309c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <I2C_RequestMemoryWrite+0xa4>)
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fa79 	bl	80035bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	69b9      	ldr	r1, [r7, #24]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f909 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02c      	b.n	8003138 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ee:	e015      	b.n	800311c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8ef 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e012      	b.n	8003138 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003112:	893b      	ldrh	r3, [r7, #8]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2200      	movs	r2, #0
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f884 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	80002000 	.word	0x80002000

08003144 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <I2C_RequestMemoryRead+0xa4>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa26 	bl	80035bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	69b9      	ldr	r1, [r7, #24]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f8b6 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e02c      	b.n	80031de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800318a:	893b      	ldrh	r3, [r7, #8]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28
 8003194:	e015      	b.n	80031c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003196:	893b      	ldrh	r3, [r7, #8]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	b29b      	uxth	r3, r3
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f89c 	bl	80032e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e012      	b.n	80031de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b8:	893b      	ldrh	r3, [r7, #8]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2140      	movs	r1, #64	@ 0x40
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f831 	bl	8003234 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	80002000 	.word	0x80002000

080031ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d103      	bne.n	800320a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d007      	beq.n	8003228 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	619a      	str	r2, [r3, #24]
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003244:	e03b      	b.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8d6 	bl	80033fc <I2C_IsErrorOccurred>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e041      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d02d      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe fe6f 	bl	8001f44 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d122      	bne.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	429a      	cmp	r2, r3
 8003294:	d113      	bne.n	80032be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d0b4      	beq.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032f2:	e033      	b.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f87f 	bl	80033fc <I2C_IsErrorOccurred>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e031      	b.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d025      	beq.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fe fe18 	bl	8001f44 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11a      	bne.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d013      	beq.n	800335c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d1c4      	bne.n	80032f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003380:	e02f      	b.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f838 	bl	80033fc <I2C_IsErrorOccurred>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e02d      	b.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003396:	f7fe fdd5 	bl	8001f44 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d302      	bcc.n	80033ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11a      	bne.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d013      	beq.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d1c8      	bne.n	8003382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d068      	beq.n	80034fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2210      	movs	r2, #16
 800342e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003430:	e049      	b.n	80034c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d045      	beq.n	80034c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fd83 	bl	8001f44 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_IsErrorOccurred+0x54>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13a      	bne.n	80034c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003462:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003472:	d121      	bne.n	80034b8 <I2C_IsErrorOccurred+0xbc>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347a:	d01d      	beq.n	80034b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b20      	cmp	r3, #32
 8003480:	d01a      	beq.n	80034b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003490:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003492:	f7fe fd57 	bl	8001f44 <HAL_GetTick>
 8003496:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003498:	e00e      	b.n	80034b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800349a:	f7fe fd53 	bl	8001f44 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b19      	cmp	r3, #25
 80034a6:	d907      	bls.n	80034b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f043 0320 	orr.w	r3, r3, #32
 80034ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034b6:	e006      	b.n	80034c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d1e9      	bne.n	800349a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d003      	beq.n	80034dc <I2C_IsErrorOccurred+0xe0>
 80034d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0aa      	beq.n	8003432 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800351c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f043 0308 	orr.w	r3, r3, #8
 8003534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800353e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fe3b 	bl	80031ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <I2C_IsErrorOccurred+0x1bc>)
 8003582:	400b      	ands	r3, r1
 8003584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3728      	adds	r7, #40	@ 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	4613      	mov	r3, r2
 80035cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ce:	897b      	ldrh	r3, [r7, #10]
 80035d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d4:	7a7b      	ldrb	r3, [r7, #9]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	0d5b      	lsrs	r3, r3, #21
 80035f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035fa:	4b08      	ldr	r3, [pc, #32]	@ (800361c <I2C_TransferConfig+0x60>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	43db      	mvns	r3, r3
 8003600:	ea02 0103 	and.w	r1, r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	03ff63ff 	.word	0x03ff63ff

08003620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d138      	bne.n	80036a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003640:	2302      	movs	r3, #2
 8003642:	e032      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	@ 0x24
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d139      	bne.n	8003740 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e033      	b.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2224      	movs	r2, #36	@ 0x24
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003708:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af02      	add	r7, sp, #8
 8003754:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0fe      	b.n	800395e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f00c fbb9 	bl	800feec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f006 f9a9 	bl	8009ade <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7c1a      	ldrb	r2, [r3, #16]
 8003794:	f88d 2000 	strb.w	r2, [sp]
 8003798:	3304      	adds	r3, #4
 800379a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800379c:	f006 f87a 	bl	8009894 <USB_CoreInit>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0d5      	b.n	800395e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f006 f9a1 	bl	8009b00 <USB_SetCurrentMode>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0c6      	b.n	800395e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e04a      	b.n	800386c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	3315      	adds	r3, #21
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ea:	7bfa      	ldrb	r2, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3314      	adds	r3, #20
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	b298      	uxth	r0, r3
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	332e      	adds	r3, #46	@ 0x2e
 8003812:	4602      	mov	r2, r0
 8003814:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3318      	adds	r3, #24
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	331c      	adds	r3, #28
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3320      	adds	r3, #32
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3324      	adds	r3, #36	@ 0x24
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	3301      	adds	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	429a      	cmp	r2, r3
 8003874:	d3af      	bcc.n	80037d6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	3301      	adds	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	429a      	cmp	r2, r3
 800390e:	d3b5      	bcc.n	800387c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7c1a      	ldrb	r2, [r3, #16]
 8003918:	f88d 2000 	strb.w	r2, [sp]
 800391c:	3304      	adds	r3, #4
 800391e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003920:	f006 f93a 	bl	8009b98 <USB_DevInit>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e013      	b.n	800395e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7b1b      	ldrb	r3, [r3, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d102      	bne.n	8003952 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f001 f96d 	bl	8004c2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f007 f979 	bl	800ac4e <USB_DevDisconnect>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PCD_Start+0x1c>
 800397e:	2302      	movs	r3, #2
 8003980:	e022      	b.n	80039c8 <HAL_PCD_Start+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f006 f884 	bl	8009abc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f007 f927 	bl	800ac0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b08d      	sub	sp, #52	@ 0x34
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f007 f9e5 	bl	800adb6 <USB_GetMode>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 84b9 	bne.w	8004366 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f007 f949 	bl	800ac90 <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 84af 	beq.w	8004364 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f007 f936 	bl	800ac90 <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 0202 	and.w	r2, r2, #2
 8003a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f007 f924 	bl	800ac90 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d161      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0210 	bic.w	r2, r2, #16
 8003a60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	0c5b      	lsrs	r3, r3, #17
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d124      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d035      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6a38      	ldr	r0, [r7, #32]
 8003aae:	f006 ff5b 	bl	800a968 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003abe:	441a      	add	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad0:	441a      	add	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	615a      	str	r2, [r3, #20]
 8003ad6:	e016      	b.n	8003b06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	0c5b      	lsrs	r3, r3, #17
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2b06      	cmp	r3, #6
 8003ae2:	d110      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aea:	2208      	movs	r2, #8
 8003aec:	4619      	mov	r1, r3
 8003aee:	6a38      	ldr	r0, [r7, #32]
 8003af0:	f006 ff3a 	bl	800a968 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b00:	441a      	add	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0210 	orr.w	r2, r2, #16
 8003b14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f007 f8b8 	bl	800ac90 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b2a:	f040 80a7 	bne.w	8003c7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f007 f8bd 	bl	800acb6 <USB_ReadDevAllOutEpInterrupt>
 8003b3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b3e:	e099      	b.n	8003c74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 808e 	beq.w	8003c68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f007 f8e1 	bl	800ad1e <USB_ReadDevOutEPInterrupt>
 8003b5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	2301      	movs	r3, #1
 8003b78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fecf 	bl	8004920 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 ffa5 	bl	8004af0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d030      	beq.n	8003c2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b80      	cmp	r3, #128	@ 0x80
 8003bd6:	d109      	bne.n	8003bec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	78db      	ldrb	r3, [r3, #3]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d108      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f00c fa8e 	bl	8010138 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c44:	461a      	mov	r2, r3
 8003c46:	2320      	movs	r3, #32
 8003c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f47f af62 	bne.w	8003b40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f007 f805 	bl	800ac90 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c90:	f040 80db 	bne.w	8003e4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f007 f826 	bl	800acea <USB_ReadDevAllInEpInterrupt>
 8003c9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003ca4:	e0cd      	b.n	8003e42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80c2 	beq.w	8003e36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f007 f84c 	bl	800ad5a <USB_ReadDevInEPInterrupt>
 8003cc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d057      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cee:	4013      	ands	r3, r2
 8003cf0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2301      	movs	r3, #1
 8003d02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	799b      	ldrb	r3, [r3, #6]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d132      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3320      	adds	r3, #32
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	331c      	adds	r3, #28
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4419      	add	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3320      	adds	r3, #32
 8003d42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d113      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x3a2>
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3324      	adds	r3, #36	@ 0x24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	f007 f855 	bl	800ae1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f00c f958 	bl	801002e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d94:	461a      	mov	r2, r3
 8003d96:	2308      	movs	r3, #8
 8003d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	2310      	movs	r3, #16
 8003db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2340      	movs	r3, #64	@ 0x40
 8003dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dde:	6a38      	ldr	r0, [r7, #32]
 8003de0:	f006 f838 	bl	8009e54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3310      	adds	r3, #16
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	78db      	ldrb	r3, [r3, #3]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d108      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f00c f9a5 	bl	801015c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2302      	movs	r3, #2
 8003e22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fce8 	bl	8004806 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	3301      	adds	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af2e 	bne.w	8003ca6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 ff1e 	bl	800ac90 <USB_ReadInterrupts>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e5e:	d122      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d108      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e86:	2100      	movs	r1, #0
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fef3 	bl	8004c74 <HAL_PCDEx_LPM_Callback>
 8003e8e:	e002      	b.n	8003e96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f00c f943 	bl	801011c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f006 fef0 	bl	800ac90 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eba:	d112      	bne.n	8003ee2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f00c f8ff 	bl	80100d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f006 fed2 	bl	800ac90 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef6:	d121      	bne.n	8003f3c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f06:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d111      	bne.n	8003f36 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fea0 	bl	8004c74 <HAL_PCDEx_LPM_Callback>
 8003f34:	e002      	b.n	8003f3c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f00c f8ca 	bl	80100d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f006 fea5 	bl	800ac90 <USB_ReadInterrupts>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f50:	f040 80b7 	bne.w	80040c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2110      	movs	r1, #16
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f005 ff70 	bl	8009e54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f78:	e046      	b.n	8004008 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f86:	461a      	mov	r2, r3
 8003f88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fdc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fe0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ffc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004000:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	3301      	adds	r3, #1
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	791b      	ldrb	r3, [r3, #4]
 800400c:	461a      	mov	r2, r3
 800400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004010:	4293      	cmp	r3, r2
 8004012:	d3b2      	bcc.n	8003f7a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004022:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004026:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7bdb      	ldrb	r3, [r3, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d016      	beq.n	800405e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004040:	f043 030b 	orr.w	r3, r3, #11
 8004044:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800404e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004056:	f043 030b 	orr.w	r3, r3, #11
 800405a:	6453      	str	r3, [r2, #68]	@ 0x44
 800405c:	e015      	b.n	800408a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	4619      	mov	r1, r3
 800406e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004072:	4313      	orrs	r3, r2
 8004074:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004084:	f043 030b 	orr.w	r3, r3, #11
 8004088:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004098:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800409c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040ac:	461a      	mov	r2, r3
 80040ae:	f006 feb5 	bl	800ae1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80040c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f006 fde2 	bl	800ac90 <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	d123      	bne.n	8004120 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f006 fe79 	bl	800add4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f005 ff2d 	bl	8009f46 <USB_GetDevSpeed>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681c      	ldr	r4, [r3, #0]
 80040f8:	f001 fd9c 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 80040fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004102:	461a      	mov	r2, r3
 8004104:	4620      	mov	r0, r4
 8004106:	f005 fc37 	bl	8009978 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f00b ffb7 	bl	801007e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f006 fdb3 	bl	800ac90 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d10a      	bne.n	800414a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f00b ff94 	bl	8010062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 0208 	and.w	r2, r2, #8
 8004148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f006 fd9e 	bl	800ac90 <USB_ReadInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d123      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800416a:	2301      	movs	r3, #1
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
 800416e:	e014      	b.n	800419a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fb08 	bl	80047a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	3301      	adds	r3, #1
 8004198:	627b      	str	r3, [r7, #36]	@ 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	791b      	ldrb	r3, [r3, #4]
 800419e:	461a      	mov	r2, r3
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d3e4      	bcc.n	8004170 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f006 fd70 	bl	800ac90 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ba:	d13c      	bne.n	8004236 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041bc:	2301      	movs	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c0:	e02b      	b.n	800421a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3318      	adds	r3, #24
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d115      	bne.n	8004214 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	da12      	bge.n	8004214 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3317      	adds	r3, #23
 80041fe:	2201      	movs	r2, #1
 8004200:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800420a:	b2db      	uxtb	r3, r3
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fac8 	bl	80047a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	461a      	mov	r2, r3
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	4293      	cmp	r3, r2
 8004224:	d3cd      	bcc.n	80041c2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f006 fd28 	bl	800ac90 <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800424a:	d156      	bne.n	80042fa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004250:	e045      	b.n	80042de <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d12e      	bne.n	80042d8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800427a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	da2b      	bge.n	80042d8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800428c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004290:	429a      	cmp	r2, r3
 8004292:	d121      	bne.n	80042d8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042d4:	6053      	str	r3, [r2, #4]
            break;
 80042d6:	e008      	b.n	80042ea <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	3301      	adds	r3, #1
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	791b      	ldrb	r3, [r3, #4]
 80042e2:	461a      	mov	r2, r3
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d3b3      	bcc.n	8004252 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80042f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f006 fcc6 	bl	800ac90 <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430e:	d10a      	bne.n	8004326 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f00b ff35 	bl	8010180 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f006 fcb0 	bl	800ac90 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d115      	bne.n	8004366 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f00b ff25 	bl	801019c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e000      	b.n	8004366 <HAL_PCD_IRQHandler+0x996>
      return;
 8004364:	bf00      	nop
    }
  }
}
 8004366:	3734      	adds	r7, #52	@ 0x34
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}

0800436c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_PCD_SetAddress+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e012      	b.n	80043ac <HAL_PCD_SetAddress+0x40>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f006 fc0f 	bl	800abc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	70fb      	strb	r3, [r7, #3]
 80043c6:	460b      	mov	r3, r1
 80043c8:	803b      	strh	r3, [r7, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da0f      	bge.n	80043fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3310      	adds	r3, #16
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	705a      	strb	r2, [r3, #1]
 80043f8:	e00f      	b.n	800441a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004426:	883a      	ldrh	r2, [r7, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	78ba      	ldrb	r2, [r7, #2]
 8004430:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004444:	78bb      	ldrb	r3, [r7, #2]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d102      	bne.n	8004450 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_PCD_EP_Open+0xaa>
 800445a:	2302      	movs	r3, #2
 800445c:	e00e      	b.n	800447c <HAL_PCD_EP_Open+0xc8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 fd8f 	bl	8009f90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800447a:	7afb      	ldrb	r3, [r7, #11]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004494:	2b00      	cmp	r3, #0
 8004496:	da0f      	bge.n	80044b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 020f 	and.w	r2, r3, #15
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	3310      	adds	r3, #16
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	3304      	adds	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	705a      	strb	r2, [r3, #1]
 80044b6:	e00f      	b.n	80044d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	3304      	adds	r3, #4
 80044d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_PCD_EP_Close+0x6e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e00e      	b.n	8004510 <HAL_PCD_EP_Close+0x8c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	4618      	mov	r0, r3
 8004502:	f005 fdcd 	bl	800a0a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	460b      	mov	r3, r1
 8004526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004528:	7afb      	ldrb	r3, [r7, #11]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	3304      	adds	r3, #4
 8004540:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2200      	movs	r2, #0
 8004558:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	799b      	ldrb	r3, [r3, #6]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	799b      	ldrb	r3, [r3, #6]
 800457c:	461a      	mov	r2, r3
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	f005 fe6a 	bl	800a258 <USB_EPStartXfer>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045b0:	681b      	ldr	r3, [r3, #0]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	460b      	mov	r3, r1
 80045cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	f003 020f 	and.w	r2, r3, #15
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	3310      	adds	r3, #16
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	3304      	adds	r3, #4
 80045e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2201      	movs	r2, #1
 80045fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fe:	7afb      	ldrb	r3, [r7, #11]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	b2da      	uxtb	r2, r3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	799b      	ldrb	r3, [r3, #6]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	799b      	ldrb	r3, [r3, #6]
 8004620:	461a      	mov	r2, r3
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	f005 fe18 	bl	800a258 <USB_EPStartXfer>

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	460b      	mov	r3, r1
 800463c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	7912      	ldrb	r2, [r2, #4]
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e04f      	b.n	80046f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004654:	2b00      	cmp	r3, #0
 8004656:	da0f      	bge.n	8004678 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	3310      	adds	r3, #16
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4413      	add	r3, r2
 800466c:	3304      	adds	r3, #4
 800466e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	705a      	strb	r2, [r3, #1]
 8004676:	e00d      	b.n	8004694 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	3304      	adds	r3, #4
 800468c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_PCD_EP_SetStall+0x82>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e01d      	b.n	80046f0 <HAL_PCD_EP_SetStall+0xbe>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68f9      	ldr	r1, [r7, #12]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f006 f9a8 	bl	800aa18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7999      	ldrb	r1, [r3, #6]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e0:	461a      	mov	r2, r3
 80046e2:	f006 fb9b 	bl	800ae1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004704:	78fb      	ldrb	r3, [r7, #3]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	7912      	ldrb	r2, [r2, #4]
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e042      	b.n	800479c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	da0f      	bge.n	800473e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	3310      	adds	r3, #16
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	3304      	adds	r3, #4
 8004734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	705a      	strb	r2, [r3, #1]
 800473c:	e00f      	b.n	800475e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	3304      	adds	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_PCD_EP_ClrStall+0x86>
 800477a:	2302      	movs	r3, #2
 800477c:	e00e      	b.n	800479c <HAL_PCD_EP_ClrStall+0xa4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	4618      	mov	r0, r3
 800478e:	f006 f9b1 	bl	800aaf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	da0c      	bge.n	80047d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	3310      	adds	r3, #16
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e00c      	b.n	80047ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f005 ffd0 	bl	800a798 <USB_EPStopXfer>
 80047f8:	4603      	mov	r3, r0
 80047fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b08a      	sub	sp, #40	@ 0x28
 800480a:	af02      	add	r7, sp, #8
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	3310      	adds	r3, #16
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d901      	bls.n	800483e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06b      	b.n	8004916 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	429a      	cmp	r2, r3
 8004852:	d902      	bls.n	800485a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3303      	adds	r3, #3
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004862:	e02a      	b.n	80048ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	429a      	cmp	r2, r3
 8004878:	d902      	bls.n	8004880 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	3303      	adds	r3, #3
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68d9      	ldr	r1, [r3, #12]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4603      	mov	r3, r0
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f006 f825 	bl	800a8ec <USB_WritePacket>

    ep->xfer_buff  += len;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	441a      	add	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d809      	bhi.n	80048e4 <PCD_WriteEmptyTxFifo+0xde>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048d8:	429a      	cmp	r2, r3
 80048da:	d203      	bcs.n	80048e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1bf      	bne.n	8004864 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d811      	bhi.n	8004914 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	2201      	movs	r2, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	43db      	mvns	r3, r3
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004910:	4013      	ands	r3, r2
 8004912:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	333c      	adds	r3, #60	@ 0x3c
 8004938:	3304      	adds	r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	799b      	ldrb	r3, [r3, #6]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d17b      	bne.n	8004a4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4a61      	ldr	r2, [pc, #388]	@ (8004ae8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	f240 80b9 	bls.w	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80b3 	beq.w	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004982:	461a      	mov	r2, r3
 8004984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004988:	6093      	str	r3, [r2, #8]
 800498a:	e0a7      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	2320      	movs	r3, #32
 80049a6:	6093      	str	r3, [r2, #8]
 80049a8:	e098      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 8093 	bne.w	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d90f      	bls.n	80049de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049da:	6093      	str	r3, [r2, #8]
 80049dc:	e07e      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d114      	bne.n	8004a40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	f006 f9f6 	bl	800ae1c <USB_EP0_OutStart>
 8004a30:	e006      	b.n	8004a40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f00b fad6 	bl	800fff8 <HAL_PCD_DataOutStageCallback>
 8004a4c:	e046      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d124      	bne.n	8004aa0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a72:	6093      	str	r3, [r2, #8]
 8004a74:	e032      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2320      	movs	r3, #32
 8004a90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f00b faad 	bl	800fff8 <HAL_PCD_DataOutStageCallback>
 8004a9e:	e01d      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d114      	bne.n	8004ad0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2100      	movs	r1, #0
 8004acc:	f006 f9a6 	bl	800ae1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f00b fa8e 	bl	800fff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	4f54300a 	.word	0x4f54300a
 8004aec:	4f54310a 	.word	0x4f54310a

08004af0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	333c      	adds	r3, #60	@ 0x3c
 8004b08:	3304      	adds	r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d90e      	bls.n	8004b44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f00b fa45 	bl	800ffd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8004b78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d90c      	bls.n	8004b6c <PCD_EP_OutSetupPacket_int+0x7c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	799b      	ldrb	r3, [r3, #6]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d108      	bne.n	8004b6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b64:	461a      	mov	r2, r3
 8004b66:	2101      	movs	r1, #1
 8004b68:	f006 f958 	bl	800ae1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	4f54300a 	.word	0x4f54300a

08004b7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d107      	bne.n	8004baa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b9a:	883b      	ldrh	r3, [r7, #0]
 8004b9c:	0419      	lsls	r1, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ba8:	e028      	b.n	8004bfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e00d      	b.n	8004bda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	3340      	adds	r3, #64	@ 0x40
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	7bfa      	ldrb	r2, [r7, #15]
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3ec      	bcc.n	8004bbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004be4:	883b      	ldrh	r3, [r7, #0]
 8004be6:	0418      	lsls	r0, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4302      	orrs	r2, r0
 8004bf4:	3340      	adds	r3, #64	@ 0x40
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	10000003 	.word	0x10000003

08004c74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c94:	4b19      	ldr	r3, [pc, #100]	@ (8004cfc <HAL_PWREx_ConfigSupply+0x70>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ca0:	4b16      	ldr	r3, [pc, #88]	@ (8004cfc <HAL_PWREx_ConfigSupply+0x70>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d001      	beq.n	8004cb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e01f      	b.n	8004cf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e01d      	b.n	8004cf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <HAL_PWREx_ConfigSupply+0x70>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f023 0207 	bic.w	r2, r3, #7
 8004cbe:	490f      	ldr	r1, [pc, #60]	@ (8004cfc <HAL_PWREx_ConfigSupply+0x70>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cc6:	f7fd f93d 	bl	8001f44 <HAL_GetTick>
 8004cca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ccc:	e009      	b.n	8004ce2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cce:	f7fd f939 	bl	8001f44 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004cdc:	d901      	bls.n	8004ce2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e007      	b.n	8004cf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <HAL_PWREx_ConfigSupply+0x70>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cee:	d1ee      	bne.n	8004cce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	58024800 	.word	0x58024800

08004d00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0e:	60d3      	str	r3, [r2, #12]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	58024800 	.word	0x58024800

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	@ 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f000 bc48 	b.w	80055c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8088 	beq.w	8004e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4b99      	ldr	r3, [pc, #612]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d4c:	4b96      	ldr	r3, [pc, #600]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d007      	beq.n	8004d68 <HAL_RCC_OscConfig+0x48>
 8004d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	d111      	bne.n	8004d82 <HAL_RCC_OscConfig+0x62>
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d10c      	bne.n	8004d82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	4b8f      	ldr	r3, [pc, #572]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d06d      	beq.n	8004e50 <HAL_RCC_OscConfig+0x130>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d169      	bne.n	8004e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f000 bc21 	b.w	80055c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x7a>
 8004d8c:	4b86      	ldr	r3, [pc, #536]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a85      	ldr	r2, [pc, #532]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e02e      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x9c>
 8004da2:	4b81      	ldr	r3, [pc, #516]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a80      	ldr	r2, [pc, #512]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b7e      	ldr	r3, [pc, #504]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e01d      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0xc0>
 8004dc6:	4b78      	ldr	r3, [pc, #480]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a77      	ldr	r2, [pc, #476]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4b75      	ldr	r3, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a74      	ldr	r2, [pc, #464]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004de0:	4b71      	ldr	r3, [pc, #452]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a70      	ldr	r2, [pc, #448]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b6e      	ldr	r3, [pc, #440]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd f8a0 	bl	8001f44 <HAL_GetTick>
 8004e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd f89c 	bl	8001f44 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	@ 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e3d4      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0xe8>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd f88c 	bl	8001f44 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd f888 	bl	8001f44 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	@ 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e3c0      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e42:	4b59      	ldr	r3, [pc, #356]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x110>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80ca 	beq.w	8004ff4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e60:	4b51      	ldr	r3, [pc, #324]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_RCC_OscConfig+0x166>
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b18      	cmp	r3, #24
 8004e7a:	d156      	bne.n	8004f2a <HAL_RCC_OscConfig+0x20a>
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d151      	bne.n	8004f2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e86:	4b48      	ldr	r3, [pc, #288]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x17e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e392      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e9e:	4b42      	ldr	r3, [pc, #264]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 0219 	bic.w	r2, r3, #25
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	493f      	ldr	r1, [pc, #252]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f848 	bl	8001f44 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb8:	f7fd f844 	bl	8001f44 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e37c      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eca:	4b37      	ldr	r3, [pc, #220]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed6:	f7fd f865 	bl	8001fa4 <HAL_GetREVID>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d817      	bhi.n	8004f14 <HAL_RCC_OscConfig+0x1f4>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	d108      	bne.n	8004efe <HAL_RCC_OscConfig+0x1de>
 8004eec:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004efa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efc:	e07a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	031b      	lsls	r3, r3, #12
 8004f0c:	4926      	ldr	r1, [pc, #152]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f12:	e06f      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f14:	4b24      	ldr	r3, [pc, #144]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	4921      	ldr	r1, [pc, #132]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	e064      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d047      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 0219 	bic.w	r2, r3, #25
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	491a      	ldr	r1, [pc, #104]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fc fffe 	bl	8001f44 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fc fffa 	bl	8001f44 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e332      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f5e:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6a:	f7fd f81b 	bl	8001fa4 <HAL_GetREVID>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d819      	bhi.n	8004fac <HAL_RCC_OscConfig+0x28c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d108      	bne.n	8004f92 <HAL_RCC_OscConfig+0x272>
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f88:	4a07      	ldr	r2, [pc, #28]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8e:	6053      	str	r3, [r2, #4]
 8004f90:	e030      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
 8004f92:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	031b      	lsls	r3, r3, #12
 8004fa0:	4901      	ldr	r1, [pc, #4]	@ (8004fa8 <HAL_RCC_OscConfig+0x288>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
 8004fa6:	e025      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	4b9a      	ldr	r3, [pc, #616]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	4997      	ldr	r1, [pc, #604]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	604b      	str	r3, [r1, #4]
 8004fc0:	e018      	b.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b95      	ldr	r3, [pc, #596]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a94      	ldr	r2, [pc, #592]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fc ffb9 	bl	8001f44 <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd6:	f7fc ffb5 	bl	8001f44 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e2ed      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fe8:	4b8b      	ldr	r3, [pc, #556]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a9 	beq.w	8005154 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005002:	4b85      	ldr	r3, [pc, #532]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800500a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800500c:	4b82      	ldr	r3, [pc, #520]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d007      	beq.n	8005028 <HAL_RCC_OscConfig+0x308>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b18      	cmp	r3, #24
 800501c:	d13a      	bne.n	8005094 <HAL_RCC_OscConfig+0x374>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d135      	bne.n	8005094 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005028:	4b7b      	ldr	r3, [pc, #492]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCC_OscConfig+0x320>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b80      	cmp	r3, #128	@ 0x80
 800503a:	d001      	beq.n	8005040 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e2c1      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005040:	f7fc ffb0 	bl	8001fa4 <HAL_GetREVID>
 8005044:	4603      	mov	r3, r0
 8005046:	f241 0203 	movw	r2, #4099	@ 0x1003
 800504a:	4293      	cmp	r3, r2
 800504c:	d817      	bhi.n	800507e <HAL_RCC_OscConfig+0x35e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	2b20      	cmp	r3, #32
 8005054:	d108      	bne.n	8005068 <HAL_RCC_OscConfig+0x348>
 8005056:	4b70      	ldr	r3, [pc, #448]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800505e:	4a6e      	ldr	r2, [pc, #440]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005064:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005066:	e075      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005068:	4b6b      	ldr	r3, [pc, #428]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	069b      	lsls	r3, r3, #26
 8005076:	4968      	ldr	r1, [pc, #416]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005078:	4313      	orrs	r3, r2
 800507a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800507c:	e06a      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800507e:	4b66      	ldr	r3, [pc, #408]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	4962      	ldr	r1, [pc, #392]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005092:	e05f      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d042      	beq.n	8005122 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800509c:	4b5e      	ldr	r3, [pc, #376]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80050a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fc ff4c 	bl	8001f44 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050b0:	f7fc ff48 	bl	8001f44 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e280      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050c2:	4b55      	ldr	r3, [pc, #340]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050ce:	f7fc ff69 	bl	8001fa4 <HAL_GetREVID>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050d8:	4293      	cmp	r3, r2
 80050da:	d817      	bhi.n	800510c <HAL_RCC_OscConfig+0x3ec>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d108      	bne.n	80050f6 <HAL_RCC_OscConfig+0x3d6>
 80050e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80050ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050f2:	6053      	str	r3, [r2, #4]
 80050f4:	e02e      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
 80050f6:	4b48      	ldr	r3, [pc, #288]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	069b      	lsls	r3, r3, #26
 8005104:	4944      	ldr	r1, [pc, #272]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
 800510a:	e023      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
 800510c:	4b42      	ldr	r3, [pc, #264]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	493f      	ldr	r1, [pc, #252]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	60cb      	str	r3, [r1, #12]
 8005120:	e018      	b.n	8005154 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005122:	4b3d      	ldr	r3, [pc, #244]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a3c      	ldr	r2, [pc, #240]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fc ff09 	bl	8001f44 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005136:	f7fc ff05 	bl	8001f44 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e23d      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005148:	4b33      	ldr	r3, [pc, #204]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d036      	beq.n	80051ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d019      	beq.n	800519c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800516a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800516c:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fc fee6 	bl	8001f44 <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517c:	f7fc fee2 	bl	8001f44 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e21a      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800518e:	4b22      	ldr	r3, [pc, #136]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 8005190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x45c>
 800519a:	e018      	b.n	80051ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800519c:	4b1e      	ldr	r3, [pc, #120]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800519e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fc fecc 	bl	8001f44 <HAL_GetTick>
 80051ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b0:	f7fc fec8 	bl	8001f44 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e200      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80051c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d039      	beq.n	800524e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01c      	beq.n	800521c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 80051e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051ee:	f7fc fea9 	bl	8001f44 <HAL_GetTick>
 80051f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f6:	f7fc fea5 	bl	8001f44 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1dd      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005208:	4b03      	ldr	r3, [pc, #12]	@ (8005218 <HAL_RCC_OscConfig+0x4f8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
 8005214:	e01b      	b.n	800524e <HAL_RCC_OscConfig+0x52e>
 8005216:	bf00      	nop
 8005218:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800521c:	4b9b      	ldr	r3, [pc, #620]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a9a      	ldr	r2, [pc, #616]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005226:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005228:	f7fc fe8c 	bl	8001f44 <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005230:	f7fc fe88 	bl	8001f44 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1c0      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005242:	4b92      	ldr	r3, [pc, #584]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8081 	beq.w	800535e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800525c:	4b8c      	ldr	r3, [pc, #560]	@ (8005490 <HAL_RCC_OscConfig+0x770>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a8b      	ldr	r2, [pc, #556]	@ (8005490 <HAL_RCC_OscConfig+0x770>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005268:	f7fc fe6c 	bl	8001f44 <HAL_GetTick>
 800526c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7fc fe68 	bl	8001f44 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	@ 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e1a0      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005282:	4b83      	ldr	r3, [pc, #524]	@ (8005490 <HAL_RCC_OscConfig+0x770>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d106      	bne.n	80052a4 <HAL_RCC_OscConfig+0x584>
 8005296:	4b7d      	ldr	r3, [pc, #500]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a7c      	ldr	r2, [pc, #496]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a2:	e02d      	b.n	8005300 <HAL_RCC_OscConfig+0x5e0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10c      	bne.n	80052c6 <HAL_RCC_OscConfig+0x5a6>
 80052ac:	4b77      	ldr	r3, [pc, #476]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4a76      	ldr	r2, [pc, #472]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b8:	4b74      	ldr	r3, [pc, #464]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052bc:	4a73      	ldr	r2, [pc, #460]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052be:	f023 0304 	bic.w	r3, r3, #4
 80052c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c4:	e01c      	b.n	8005300 <HAL_RCC_OscConfig+0x5e0>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x5c8>
 80052ce:	4b6f      	ldr	r3, [pc, #444]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	4a6e      	ldr	r2, [pc, #440]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052d4:	f043 0304 	orr.w	r3, r3, #4
 80052d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052da:	4b6c      	ldr	r3, [pc, #432]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	4a6b      	ldr	r2, [pc, #428]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0x5e0>
 80052e8:	4b68      	ldr	r3, [pc, #416]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a67      	ldr	r2, [pc, #412]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f4:	4b65      	ldr	r3, [pc, #404]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a64      	ldr	r2, [pc, #400]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80052fa:	f023 0304 	bic.w	r3, r3, #4
 80052fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d015      	beq.n	8005334 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fc fe1c 	bl	8001f44 <HAL_GetTick>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530e:	e00a      	b.n	8005326 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005310:	f7fc fe18 	bl	8001f44 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e14e      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005326:	4b59      	ldr	r3, [pc, #356]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0ee      	beq.n	8005310 <HAL_RCC_OscConfig+0x5f0>
 8005332:	e014      	b.n	800535e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fc fe06 	bl	8001f44 <HAL_GetTick>
 8005338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800533a:	e00a      	b.n	8005352 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fc fe02 	bl	8001f44 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e138      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005352:	4b4e      	ldr	r3, [pc, #312]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ee      	bne.n	800533c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 812d 	beq.w	80055c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005368:	4b48      	ldr	r3, [pc, #288]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005370:	2b18      	cmp	r3, #24
 8005372:	f000 80bd 	beq.w	80054f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	2b02      	cmp	r3, #2
 800537c:	f040 809e 	bne.w	80054bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	4b42      	ldr	r3, [pc, #264]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a41      	ldr	r2, [pc, #260]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fc fdda 	bl	8001f44 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005394:	f7fc fdd6 	bl	8001f44 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e10e      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053a6:	4b39      	ldr	r3, [pc, #228]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b2:	4b36      	ldr	r3, [pc, #216]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80053b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053b6:	4b37      	ldr	r3, [pc, #220]	@ (8005494 <HAL_RCC_OscConfig+0x774>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053c2:	0112      	lsls	r2, r2, #4
 80053c4:	430a      	orrs	r2, r1
 80053c6:	4931      	ldr	r1, [pc, #196]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d0:	3b01      	subs	r3, #1
 80053d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053da:	3b01      	subs	r3, #1
 80053dc:	025b      	lsls	r3, r3, #9
 80053de:	b29b      	uxth	r3, r3
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	3b01      	subs	r3, #1
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	3b01      	subs	r3, #1
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053fc:	4923      	ldr	r1, [pc, #140]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005402:	4b22      	ldr	r3, [pc, #136]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800540e:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005412:	4b21      	ldr	r3, [pc, #132]	@ (8005498 <HAL_RCC_OscConfig+0x778>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800541a:	00d2      	lsls	r2, r2, #3
 800541c:	491b      	ldr	r1, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005422:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	f023 020c 	bic.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	4917      	ldr	r1, [pc, #92]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	f023 0202 	bic.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	4912      	ldr	r1, [pc, #72]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005446:	4b11      	ldr	r3, [pc, #68]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	4a10      	ldr	r2, [pc, #64]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005452:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	4a0d      	ldr	r2, [pc, #52]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800546a:	4b08      	ldr	r3, [pc, #32]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a04      	ldr	r2, [pc, #16]	@ (800548c <HAL_RCC_OscConfig+0x76c>)
 800547c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fc fd5f 	bl	8001f44 <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005488:	e011      	b.n	80054ae <HAL_RCC_OscConfig+0x78e>
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400
 8005490:	58024800 	.word	0x58024800
 8005494:	fffffc0c 	.word	0xfffffc0c
 8005498:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fc fd52 	bl	8001f44 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e08a      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ae:	4b47      	ldr	r3, [pc, #284]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x77c>
 80054ba:	e082      	b.n	80055c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b43      	ldr	r3, [pc, #268]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a42      	ldr	r2, [pc, #264]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fc fd3c 	bl	8001f44 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fc fd38 	bl	8001f44 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e070      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054e2:	4b3a      	ldr	r3, [pc, #232]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x7b0>
 80054ee:	e068      	b.n	80055c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054f0:	4b36      	ldr	r3, [pc, #216]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054f6:	4b35      	ldr	r3, [pc, #212]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	2b01      	cmp	r3, #1
 8005502:	d031      	beq.n	8005568 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d12a      	bne.n	8005568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d122      	bne.n	8005568 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d11a      	bne.n	8005568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	0a5b      	lsrs	r3, r3, #9
 8005536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d111      	bne.n	8005568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d108      	bne.n	8005568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e02b      	b.n	80055c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800556c:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 800556e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005570:	08db      	lsrs	r3, r3, #3
 8005572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005576:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d01f      	beq.n	80055c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005582:	4b12      	ldr	r3, [pc, #72]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 8005584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005586:	4a11      	ldr	r2, [pc, #68]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800558e:	f7fc fcd9 	bl	8001f44 <HAL_GetTick>
 8005592:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005594:	bf00      	nop
 8005596:	f7fc fcd5 	bl	8001f44 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	4293      	cmp	r3, r2
 80055a0:	d0f9      	beq.n	8005596 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055a2:	4b0a      	ldr	r3, [pc, #40]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80055a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055a6:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <HAL_RCC_OscConfig+0x8b0>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055ae:	00d2      	lsls	r2, r2, #3
 80055b0:	4906      	ldr	r1, [pc, #24]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	4a04      	ldr	r2, [pc, #16]	@ (80055cc <HAL_RCC_OscConfig+0x8ac>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	@ 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	58024400 	.word	0x58024400
 80055d0:	ffff0007 	.word	0xffff0007

080055d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e19c      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b87      	ldr	r3, [pc, #540]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 020f 	bic.w	r2, r3, #15
 80055fe:	4985      	ldr	r1, [pc, #532]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b83      	ldr	r3, [pc, #524]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e184      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	4b7b      	ldr	r3, [pc, #492]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005634:	4b78      	ldr	r3, [pc, #480]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	4975      	ldr	r1, [pc, #468]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005642:	4313      	orrs	r3, r2
 8005644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	4b70      	ldr	r3, [pc, #448]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800565e:	429a      	cmp	r2, r3
 8005660:	d908      	bls.n	8005674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005662:	4b6d      	ldr	r3, [pc, #436]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	496a      	ldr	r1, [pc, #424]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005670:	4313      	orrs	r3, r2
 8005672:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	4b64      	ldr	r3, [pc, #400]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800568c:	429a      	cmp	r2, r3
 800568e:	d908      	bls.n	80056a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005690:	4b61      	ldr	r3, [pc, #388]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	495e      	ldr	r1, [pc, #376]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	4b59      	ldr	r3, [pc, #356]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d908      	bls.n	80056d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056be:	4b56      	ldr	r3, [pc, #344]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4953      	ldr	r1, [pc, #332]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d908      	bls.n	80056fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f023 020f 	bic.w	r2, r3, #15
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4947      	ldr	r1, [pc, #284]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d055      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800570a:	4b43      	ldr	r3, [pc, #268]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4940      	ldr	r1, [pc, #256]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005718:	4313      	orrs	r3, r2
 800571a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d107      	bne.n	8005734 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005724:	4b3c      	ldr	r3, [pc, #240]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d121      	bne.n	8005774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0f6      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b03      	cmp	r3, #3
 800573a:	d107      	bne.n	800574c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800573c:	4b36      	ldr	r3, [pc, #216]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d115      	bne.n	8005774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0ea      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005754:	4b30      	ldr	r3, [pc, #192]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d109      	bne.n	8005774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0de      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005764:	4b2c      	ldr	r3, [pc, #176]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0d6      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005774:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f023 0207 	bic.w	r2, r3, #7
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4925      	ldr	r1, [pc, #148]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 8005782:	4313      	orrs	r3, r2
 8005784:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005786:	f7fc fbdd 	bl	8001f44 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578c:	e00a      	b.n	80057a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578e:	f7fc fbd9 	bl	8001f44 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0be      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d1eb      	bne.n	800578e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	4b14      	ldr	r3, [pc, #80]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d208      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d2:	4b11      	ldr	r3, [pc, #68]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f023 020f 	bic.w	r2, r3, #15
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	490e      	ldr	r1, [pc, #56]	@ (8005818 <HAL_RCC_ClockConfig+0x244>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d214      	bcs.n	800581c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 020f 	bic.w	r2, r3, #15
 80057fa:	4906      	ldr	r1, [pc, #24]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <HAL_RCC_ClockConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d005      	beq.n	800581c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e086      	b.n	8005922 <HAL_RCC_ClockConfig+0x34e>
 8005814:	52002000 	.word	0x52002000
 8005818:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	4b3f      	ldr	r3, [pc, #252]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005834:	429a      	cmp	r2, r3
 8005836:	d208      	bcs.n	800584a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005838:	4b3c      	ldr	r3, [pc, #240]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4939      	ldr	r1, [pc, #228]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 8005846:	4313      	orrs	r3, r2
 8005848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	4b34      	ldr	r3, [pc, #208]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005862:	429a      	cmp	r2, r3
 8005864:	d208      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005866:	4b31      	ldr	r3, [pc, #196]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	492e      	ldr	r1, [pc, #184]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 8005874:	4313      	orrs	r3, r2
 8005876:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	4b28      	ldr	r3, [pc, #160]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005890:	429a      	cmp	r2, r3
 8005892:	d208      	bcs.n	80058a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005894:	4b25      	ldr	r3, [pc, #148]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	4922      	ldr	r1, [pc, #136]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	4b1d      	ldr	r3, [pc, #116]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058be:	429a      	cmp	r2, r3
 80058c0:	d208      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058c2:	4b1a      	ldr	r3, [pc, #104]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4917      	ldr	r1, [pc, #92]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058d4:	f000 f834 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b14      	ldr	r3, [pc, #80]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	4912      	ldr	r1, [pc, #72]	@ (8005930 <HAL_RCC_ClockConfig+0x35c>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058f2:	4b0e      	ldr	r3, [pc, #56]	@ (800592c <HAL_RCC_ClockConfig+0x358>)
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005930 <HAL_RCC_ClockConfig+0x35c>)
 80058fc:	5cd3      	ldrb	r3, [r2, r3]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	4a0a      	ldr	r2, [pc, #40]	@ (8005934 <HAL_RCC_ClockConfig+0x360>)
 800590a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800590c:	4a0a      	ldr	r2, [pc, #40]	@ (8005938 <HAL_RCC_ClockConfig+0x364>)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <HAL_RCC_ClockConfig+0x368>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fb fec6 	bl	80016a8 <HAL_InitTick>
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
 8005930:	080154c8 	.word	0x080154c8
 8005934:	24000004 	.word	0x24000004
 8005938:	24000000 	.word	0x24000000
 800593c:	24000008 	.word	0x24000008

08005940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005946:	4bb3      	ldr	r3, [pc, #716]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800594e:	2b18      	cmp	r3, #24
 8005950:	f200 8155 	bhi.w	8005bfe <HAL_RCC_GetSysClockFreq+0x2be>
 8005954:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	080059c1 	.word	0x080059c1
 8005960:	08005bff 	.word	0x08005bff
 8005964:	08005bff 	.word	0x08005bff
 8005968:	08005bff 	.word	0x08005bff
 800596c:	08005bff 	.word	0x08005bff
 8005970:	08005bff 	.word	0x08005bff
 8005974:	08005bff 	.word	0x08005bff
 8005978:	08005bff 	.word	0x08005bff
 800597c:	080059e7 	.word	0x080059e7
 8005980:	08005bff 	.word	0x08005bff
 8005984:	08005bff 	.word	0x08005bff
 8005988:	08005bff 	.word	0x08005bff
 800598c:	08005bff 	.word	0x08005bff
 8005990:	08005bff 	.word	0x08005bff
 8005994:	08005bff 	.word	0x08005bff
 8005998:	08005bff 	.word	0x08005bff
 800599c:	080059ed 	.word	0x080059ed
 80059a0:	08005bff 	.word	0x08005bff
 80059a4:	08005bff 	.word	0x08005bff
 80059a8:	08005bff 	.word	0x08005bff
 80059ac:	08005bff 	.word	0x08005bff
 80059b0:	08005bff 	.word	0x08005bff
 80059b4:	08005bff 	.word	0x08005bff
 80059b8:	08005bff 	.word	0x08005bff
 80059bc:	080059f3 	.word	0x080059f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c0:	4b94      	ldr	r3, [pc, #592]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d009      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059cc:	4b91      	ldr	r3, [pc, #580]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	4a90      	ldr	r2, [pc, #576]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
 80059dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059de:	e111      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e2:	61bb      	str	r3, [r7, #24]
      break;
 80059e4:	e10e      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059e6:	4b8d      	ldr	r3, [pc, #564]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059e8:	61bb      	str	r3, [r7, #24]
      break;
 80059ea:	e10b      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059ee:	61bb      	str	r3, [r7, #24]
      break;
 80059f0:	e108      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059f2:	4b88      	ldr	r3, [pc, #544]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059fc:	4b85      	ldr	r3, [pc, #532]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a08:	4b82      	ldr	r3, [pc, #520]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a12:	4b80      	ldr	r3, [pc, #512]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80e1 	beq.w	8005bf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	f000 8083 	beq.w	8005b44 <HAL_RCC_GetSysClockFreq+0x204>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	f200 80a1 	bhi.w	8005b88 <HAL_RCC_GetSysClockFreq+0x248>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x114>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d056      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a52:	e099      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a54:	4b6f      	ldr	r3, [pc, #444]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d02d      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a60:	4b6c      	ldr	r3, [pc, #432]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	08db      	lsrs	r3, r3, #3
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b62      	ldr	r3, [pc, #392]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005aba:	e087      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b51      	ldr	r3, [pc, #324]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afe:	e065      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b40      	ldr	r3, [pc, #256]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b42:	e043      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b2f      	ldr	r3, [pc, #188]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b86:	e021      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bcc:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	0a5b      	lsrs	r3, r3, #9
 8005bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf0:	ee17 3a90 	vmov	r3, s15
 8005bf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bf6:	e005      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61bb      	str	r3, [r7, #24]
      break;
 8005bfc:	e002      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005bfe:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c00:	61bb      	str	r3, [r7, #24]
      break;
 8005c02:	bf00      	nop
  }

  return sysclockfreq;
 8005c04:	69bb      	ldr	r3, [r7, #24]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3724      	adds	r7, #36	@ 0x24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	03d09000 	.word	0x03d09000
 8005c1c:	003d0900 	.word	0x003d0900
 8005c20:	017d7840 	.word	0x017d7840
 8005c24:	46000000 	.word	0x46000000
 8005c28:	4c742400 	.word	0x4c742400
 8005c2c:	4a742400 	.word	0x4a742400
 8005c30:	4bbebc20 	.word	0x4bbebc20

08005c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c3a:	f7ff fe81 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	490f      	ldr	r1, [pc, #60]	@ (8005c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c4c:	5ccb      	ldrb	r3, [r1, r3]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c58:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	4a07      	ldr	r2, [pc, #28]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005c70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c72:	4a07      	ldr	r2, [pc, #28]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c78:	4b04      	ldr	r3, [pc, #16]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	58024400 	.word	0x58024400
 8005c88:	080154c8 	.word	0x080154c8
 8005c8c:	24000004 	.word	0x24000004
 8005c90:	24000000 	.word	0x24000000

08005c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c98:	f7ff ffcc 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4904      	ldr	r1, [pc, #16]	@ (8005cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	080154c8 	.word	0x080154c8

08005cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	223f      	movs	r2, #63	@ 0x3f
 8005cce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0207 	and.w	r2, r3, #7
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005cdc:	4b17      	ldr	r3, [pc, #92]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005ce8:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f003 020f 	and.w	r2, r3, #15
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005cf4:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005d00:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005d18:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <HAL_RCC_GetClockConfig+0x7c>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d24:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_RCC_GetClockConfig+0x80>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 020f 	and.w	r2, r3, #15
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	52002000 	.word	0x52002000

08005d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d48:	b0ca      	sub	sp, #296	@ 0x128
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d56:	2300      	movs	r3, #0
 8005d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d68:	2500      	movs	r5, #0
 8005d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8005d6e:	d049      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d7a:	d02f      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d80:	d828      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d86:	d01a      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d8c:	d822      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d96:	d007      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d98:	e01c      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9a:	4bb8      	ldr	r3, [pc, #736]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	4ab7      	ldr	r2, [pc, #732]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005da6:	e01a      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	3308      	adds	r3, #8
 8005dae:	2102      	movs	r1, #2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 f9d1 	bl	8007158 <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00f      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc2:	3328      	adds	r3, #40	@ 0x28
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fa78 	bl	80072bc <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005de6:	4ba5      	ldr	r3, [pc, #660]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df4:	4aa1      	ldr	r2, [pc, #644]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df6:	430b      	orrs	r3, r1
 8005df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dfa:	e003      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	ea58 0309 	orrs.w	r3, r8, r9
 8005e18:	d047      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d82a      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e41 	.word	0x08005e41
 8005e30:	08005e4f 	.word	0x08005e4f
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e83 	.word	0x08005e83
 8005e3c:	08005e83 	.word	0x08005e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b8e      	ldr	r3, [pc, #568]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a8d      	ldr	r2, [pc, #564]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e4c:	e01a      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3308      	adds	r3, #8
 8005e54:	2100      	movs	r1, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f97e 	bl	8007158 <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e62:	e00f      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	3328      	adds	r3, #40	@ 0x28
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 fa25 	bl	80072bc <RCCEx_PLL3_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e78:	e004      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e80:	e000      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e90:	f023 0107 	bic.w	r1, r3, #7
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9a:	4a78      	ldr	r2, [pc, #480]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005eb6:	f04f 0b00 	mov.w	fp, #0
 8005eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ebe:	d04c      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eca:	d030      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed0:	d829      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed4:	d02d      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed8:	d825      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005eda:	2b80      	cmp	r3, #128	@ 0x80
 8005edc:	d018      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ede:	2b80      	cmp	r3, #128	@ 0x80
 8005ee0:	d821      	bhi.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d007      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005eea:	e01c      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eec:	4b63      	ldr	r3, [pc, #396]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef0:	4a62      	ldr	r2, [pc, #392]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ef8:	e01c      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	3308      	adds	r3, #8
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f928 	bl	8007158 <RCCEx_PLL2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005f0e:	e011      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	3328      	adds	r3, #40	@ 0x28
 8005f16:	2100      	movs	r1, #0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f9cf 	bl	80072bc <RCCEx_PLL3_Config>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005f24:	e006      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f50:	e003      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005f66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f74:	460b      	mov	r3, r1
 8005f76:	4313      	orrs	r3, r2
 8005f78:	d053      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f86:	d035      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f8c:	d82e      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f92:	d031      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f98:	d828      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f9e:	d01a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fa4:	d822      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fae:	d007      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005fb0:	e01c      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb2:	4b32      	ldr	r3, [pc, #200]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	4a31      	ldr	r2, [pc, #196]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e01c      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f8c5 	bl	8007158 <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e011      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fda:	3328      	adds	r3, #40	@ 0x28
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 f96c 	bl	80072bc <RCCEx_PLL3_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fea:	e006      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ff2:	e002      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006002:	4b1e      	ldr	r3, [pc, #120]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006012:	4a1a      	ldr	r2, [pc, #104]	@ (800607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6593      	str	r3, [r2, #88]	@ 0x58
 8006018:	e003      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800602e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006032:	2300      	movs	r3, #0
 8006034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006038:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d056      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800604a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800604e:	d038      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006054:	d831      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800605a:	d034      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800605c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006060:	d82b      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006066:	d01d      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606c:	d825      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006078:	e01f      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006080:	4ba2      	ldr	r3, [pc, #648]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	4aa1      	ldr	r2, [pc, #644]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800608c:	e01c      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	3308      	adds	r3, #8
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f85e 	bl	8007158 <RCCEx_PLL2_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060a2:	e011      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a8:	3328      	adds	r3, #40	@ 0x28
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 f905 	bl	80072bc <RCCEx_PLL3_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060d0:	4b8e      	ldr	r3, [pc, #568]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060e0:	4a8a      	ldr	r2, [pc, #552]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e6:	e003      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d03a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006116:	2b30      	cmp	r3, #48	@ 0x30
 8006118:	d01f      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800611a:	2b30      	cmp	r3, #48	@ 0x30
 800611c:	d819      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800611e:	2b20      	cmp	r3, #32
 8006120:	d00c      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006122:	2b20      	cmp	r3, #32
 8006124:	d815      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d019      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800612a:	2b10      	cmp	r3, #16
 800612c:	d111      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612e:	4b77      	ldr	r3, [pc, #476]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	4a76      	ldr	r2, [pc, #472]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800613a:	e011      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	3308      	adds	r3, #8
 8006142:	2102      	movs	r1, #2
 8006144:	4618      	mov	r0, r3
 8006146:	f001 f807 	bl	8007158 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006150:	e006      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006158:	e002      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800615a:	bf00      	nop
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006168:	4b68      	ldr	r3, [pc, #416]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006176:	4a65      	ldr	r2, [pc, #404]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006178:	430b      	orrs	r3, r1
 800617a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800619c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d051      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b0:	d035      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80061b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b6:	d82e      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80061b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061bc:	d031      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80061be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c2:	d828      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80061c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c8:	d01a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80061ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ce:	d822      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d8:	d007      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80061da:	e01c      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061dc:	4b4b      	ldr	r3, [pc, #300]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	4a4a      	ldr	r2, [pc, #296]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061e8:	e01c      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	3308      	adds	r3, #8
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 ffb0 	bl	8007158 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061fe:	e011      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006204:	3328      	adds	r3, #40	@ 0x28
 8006206:	2100      	movs	r1, #0
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f857 	bl	80072bc <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006214:	e006      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800622c:	4b37      	ldr	r3, [pc, #220]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800622e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006230:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623a:	4a34      	ldr	r2, [pc, #208]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800623c:	430b      	orrs	r3, r1
 800623e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006240:	e003      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800625a:	2300      	movs	r3, #0
 800625c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006260:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d056      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006274:	d033      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800627a:	d82c      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800627c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006280:	d02f      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006286:	d826      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800628c:	d02b      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800628e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006292:	d820      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006298:	d012      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800629a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629e:	d81a      	bhi.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d022      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80062a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a8:	d115      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3308      	adds	r3, #8
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 ff50 	bl	8007158 <RCCEx_PLL2_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062be:	e015      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	3328      	adds	r3, #40	@ 0x28
 80062c6:	2101      	movs	r1, #1
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fff7 	bl	80072bc <RCCEx_PLL3_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062d4:	e00a      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062de:	bf00      	nop
 80062e0:	e004      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062e2:	bf00      	nop
 80062e4:	e002      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80062ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062f4:	4b05      	ldr	r3, [pc, #20]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006302:	4a02      	ldr	r2, [pc, #8]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006304:	430b      	orrs	r3, r1
 8006306:	6513      	str	r3, [r2, #80]	@ 0x50
 8006308:	e006      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800630a:	bf00      	nop
 800630c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800632e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d055      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006344:	d033      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800634a:	d82c      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006350:	d02f      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006356:	d826      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800635c:	d02b      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800635e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006362:	d820      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006368:	d012      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636e:	d81a      	bhi.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d022      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006378:	d115      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3308      	adds	r3, #8
 8006380:	2101      	movs	r1, #1
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fee8 	bl	8007158 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800638e:	e015      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	3328      	adds	r3, #40	@ 0x28
 8006396:	2101      	movs	r1, #1
 8006398:	4618      	mov	r0, r3
 800639a:	f000 ff8f 	bl	80072bc <RCCEx_PLL3_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063a4:	e00a      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063ae:	bf00      	nop
 80063b0:	e004      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063c4:	4ba3      	ldr	r3, [pc, #652]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d037      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800640e:	d00e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006414:	d816      	bhi.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d018      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800641a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800641e:	d111      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006420:	4b8c      	ldr	r3, [pc, #560]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	4a8b      	ldr	r2, [pc, #556]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800642c:	e00f      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006432:	3308      	adds	r3, #8
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fe8e 	bl	8007158 <RCCEx_PLL2_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006442:	e004      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006456:	4b7f      	ldr	r3, [pc, #508]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a7b      	ldr	r2, [pc, #492]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006466:	430b      	orrs	r3, r1
 8006468:	6513      	str	r3, [r2, #80]	@ 0x50
 800646a:	e003      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006484:	2300      	movs	r3, #0
 8006486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800648a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d039      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649a:	2b03      	cmp	r3, #3
 800649c:	d81c      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800649e:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064e1 	.word	0x080064e1
 80064a8:	080064b5 	.word	0x080064b5
 80064ac:	080064c3 	.word	0x080064c3
 80064b0:	080064e1 	.word	0x080064e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b4:	4b67      	ldr	r3, [pc, #412]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b8:	4a66      	ldr	r2, [pc, #408]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064c0:	e00f      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c6:	3308      	adds	r3, #8
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fe44 	bl	8007158 <RCCEx_PLL2_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ee:	f023 0103 	bic.w	r1, r3, #3
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f8:	4a56      	ldr	r2, [pc, #344]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800651e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	f000 809f 	beq.w	8006668 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800652a:	4b4b      	ldr	r3, [pc, #300]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4a      	ldr	r2, [pc, #296]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006536:	f7fb fd05 	bl	8001f44 <HAL_GetTick>
 800653a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800653e:	e00b      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006540:	f7fb fd00 	bl	8001f44 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b64      	cmp	r3, #100	@ 0x64
 800654e:	d903      	bls.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006556:	e005      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006558:	4b3f      	ldr	r3, [pc, #252]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0ed      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006568:	2b00      	cmp	r3, #0
 800656a:	d179      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800656c:	4b39      	ldr	r3, [pc, #228]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800656e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006578:	4053      	eors	r3, r2
 800657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657e:	2b00      	cmp	r3, #0
 8006580:	d015      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006582:	4b34      	ldr	r3, [pc, #208]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800658e:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006592:	4a30      	ldr	r2, [pc, #192]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006598:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800659a:	4b2e      	ldr	r3, [pc, #184]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659e:	4a2d      	ldr	r2, [pc, #180]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ba:	d118      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fb fcc2 	bl	8001f44 <HAL_GetTick>
 80065c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065c4:	e00d      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fb fcbd 	bl	8001f44 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80065d0:	1ad2      	subs	r2, r2, r3
 80065d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d903      	bls.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80065e0:	e005      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0eb      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d129      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006606:	d10e      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006608:	4b12      	ldr	r3, [pc, #72]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006618:	091a      	lsrs	r2, r3, #4
 800661a:	4b10      	ldr	r3, [pc, #64]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800661c:	4013      	ands	r3, r2
 800661e:	4a0d      	ldr	r2, [pc, #52]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006620:	430b      	orrs	r3, r1
 8006622:	6113      	str	r3, [r2, #16]
 8006624:	e005      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006626:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4a0a      	ldr	r2, [pc, #40]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800662c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006630:	6113      	str	r3, [r2, #16]
 8006632:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006634:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800663e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006642:	4a04      	ldr	r2, [pc, #16]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006644:	430b      	orrs	r3, r1
 8006646:	6713      	str	r3, [r2, #112]	@ 0x70
 8006648:	e00e      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800664e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006652:	e009      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006654:	58024400 	.word	0x58024400
 8006658:	58024800 	.word	0x58024800
 800665c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f002 0301 	and.w	r3, r2, #1
 8006674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006678:	2300      	movs	r3, #0
 800667a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800667e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	f000 8089 	beq.w	800679c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006690:	2b28      	cmp	r3, #40	@ 0x28
 8006692:	d86b      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	08006775 	.word	0x08006775
 80066a0:	0800676d 	.word	0x0800676d
 80066a4:	0800676d 	.word	0x0800676d
 80066a8:	0800676d 	.word	0x0800676d
 80066ac:	0800676d 	.word	0x0800676d
 80066b0:	0800676d 	.word	0x0800676d
 80066b4:	0800676d 	.word	0x0800676d
 80066b8:	0800676d 	.word	0x0800676d
 80066bc:	08006741 	.word	0x08006741
 80066c0:	0800676d 	.word	0x0800676d
 80066c4:	0800676d 	.word	0x0800676d
 80066c8:	0800676d 	.word	0x0800676d
 80066cc:	0800676d 	.word	0x0800676d
 80066d0:	0800676d 	.word	0x0800676d
 80066d4:	0800676d 	.word	0x0800676d
 80066d8:	0800676d 	.word	0x0800676d
 80066dc:	08006757 	.word	0x08006757
 80066e0:	0800676d 	.word	0x0800676d
 80066e4:	0800676d 	.word	0x0800676d
 80066e8:	0800676d 	.word	0x0800676d
 80066ec:	0800676d 	.word	0x0800676d
 80066f0:	0800676d 	.word	0x0800676d
 80066f4:	0800676d 	.word	0x0800676d
 80066f8:	0800676d 	.word	0x0800676d
 80066fc:	08006775 	.word	0x08006775
 8006700:	0800676d 	.word	0x0800676d
 8006704:	0800676d 	.word	0x0800676d
 8006708:	0800676d 	.word	0x0800676d
 800670c:	0800676d 	.word	0x0800676d
 8006710:	0800676d 	.word	0x0800676d
 8006714:	0800676d 	.word	0x0800676d
 8006718:	0800676d 	.word	0x0800676d
 800671c:	08006775 	.word	0x08006775
 8006720:	0800676d 	.word	0x0800676d
 8006724:	0800676d 	.word	0x0800676d
 8006728:	0800676d 	.word	0x0800676d
 800672c:	0800676d 	.word	0x0800676d
 8006730:	0800676d 	.word	0x0800676d
 8006734:	0800676d 	.word	0x0800676d
 8006738:	0800676d 	.word	0x0800676d
 800673c:	08006775 	.word	0x08006775
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	3308      	adds	r3, #8
 8006746:	2101      	movs	r1, #1
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fd05 	bl	8007158 <RCCEx_PLL2_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006754:	e00f      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	3328      	adds	r3, #40	@ 0x28
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fdac 	bl	80072bc <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800677e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006782:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800678c:	4abb      	ldr	r2, [pc, #748]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800678e:	430b      	orrs	r3, r1
 8006790:	6553      	str	r3, [r2, #84]	@ 0x54
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 0302 	and.w	r3, r2, #2
 80067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067ac:	2300      	movs	r3, #0
 80067ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d041      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d824      	bhi.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80067c6:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067cc:	08006819 	.word	0x08006819
 80067d0:	080067e5 	.word	0x080067e5
 80067d4:	080067fb 	.word	0x080067fb
 80067d8:	08006819 	.word	0x08006819
 80067dc:	08006819 	.word	0x08006819
 80067e0:	08006819 	.word	0x08006819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	3308      	adds	r3, #8
 80067ea:	2101      	movs	r1, #1
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fcb3 	bl	8007158 <RCCEx_PLL2_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067f8:	e00f      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	3328      	adds	r3, #40	@ 0x28
 8006800:	2101      	movs	r1, #1
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fd5a 	bl	80072bc <RCCEx_PLL3_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006822:	4b96      	ldr	r3, [pc, #600]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	f023 0107 	bic.w	r1, r3, #7
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006830:	4a92      	ldr	r2, [pc, #584]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6553      	str	r3, [r2, #84]	@ 0x54
 8006836:	e003      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f002 0304 	and.w	r3, r2, #4
 800684c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006856:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d044      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006868:	2b05      	cmp	r3, #5
 800686a:	d825      	bhi.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800686c:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068c1 	.word	0x080068c1
 8006878:	0800688d 	.word	0x0800688d
 800687c:	080068a3 	.word	0x080068a3
 8006880:	080068c1 	.word	0x080068c1
 8006884:	080068c1 	.word	0x080068c1
 8006888:	080068c1 	.word	0x080068c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	3308      	adds	r3, #8
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fc5f 	bl	8007158 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068a0:	e00f      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	3328      	adds	r3, #40	@ 0x28
 80068a8:	2101      	movs	r1, #1
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fd06 	bl	80072bc <RCCEx_PLL3_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068ca:	4b6c      	ldr	r3, [pc, #432]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ce:	f023 0107 	bic.w	r1, r3, #7
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068da:	4a68      	ldr	r2, [pc, #416]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f002 0320 	and.w	r3, r2, #32
 80068f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068fa:	2300      	movs	r3, #0
 80068fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006904:	460b      	mov	r3, r1
 8006906:	4313      	orrs	r3, r2
 8006908:	d055      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006916:	d033      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800691c:	d82c      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006922:	d02f      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006928:	d826      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800692a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800692e:	d02b      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006934:	d820      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693a:	d012      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800693c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006940:	d81a      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d022      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694a:	d115      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	3308      	adds	r3, #8
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbff 	bl	8007158 <RCCEx_PLL2_Config>
 800695a:	4603      	mov	r3, r0
 800695c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006960:	e015      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	3328      	adds	r3, #40	@ 0x28
 8006968:	2102      	movs	r1, #2
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fca6 	bl	80072bc <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006976:	e00a      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800697e:	e006      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006980:	bf00      	nop
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006984:	bf00      	nop
 8006986:	e002      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006988:	bf00      	nop
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006996:	4b39      	ldr	r3, [pc, #228]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	4a35      	ldr	r2, [pc, #212]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4313      	orrs	r3, r2
 80069d4:	d058      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069e2:	d033      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80069e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069e8:	d82c      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ee:	d02f      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f4:	d826      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069fa:	d02b      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80069fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a00:	d820      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a06:	d012      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0c:	d81a      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d022      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a16:	d115      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fb99 	bl	8007158 <RCCEx_PLL2_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a2c:	e015      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a32:	3328      	adds	r3, #40	@ 0x28
 8006a34:	2102      	movs	r1, #2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fc40 	bl	80072bc <RCCEx_PLL3_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a42:	e00a      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a4a:	e006      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a4c:	bf00      	nop
 8006a4e:	e004      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a50:	bf00      	nop
 8006a52:	e002      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10e      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a62:	4b06      	ldr	r3, [pc, #24]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a72:	4a02      	ldr	r2, [pc, #8]	@ (8006a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a78:	e006      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d055      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ab0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ab4:	d033      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006ab6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006aba:	d82c      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac0:	d02f      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac6:	d826      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ac8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006acc:	d02b      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006ace:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ad2:	d820      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ad8:	d012      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ade:	d81a      	bhi.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d022      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ae8:	d115      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aee:	3308      	adds	r3, #8
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fb30 	bl	8007158 <RCCEx_PLL2_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006afe:	e015      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	3328      	adds	r3, #40	@ 0x28
 8006b06:	2102      	movs	r1, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fbd7 	bl	80072bc <RCCEx_PLL3_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b14:	e00a      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b1e:	bf00      	nop
 8006b20:	e004      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b22:	bf00      	nop
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b34:	4ba1      	ldr	r3, [pc, #644]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b44:	4a9d      	ldr	r2, [pc, #628]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4a:	e003      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f002 0308 	and.w	r3, r2, #8
 8006b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d01e      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b80:	d10c      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	3328      	adds	r3, #40	@ 0x28
 8006b88:	2102      	movs	r1, #2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fb96 	bl	80072bc <RCCEx_PLL3_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b9c:	4b87      	ldr	r3, [pc, #540]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bac:	4a83      	ldr	r2, [pc, #524]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f002 0310 	and.w	r3, r2, #16
 8006bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	d01e      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bde:	d10c      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	3328      	adds	r3, #40	@ 0x28
 8006be6:	2102      	movs	r1, #2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fb67 	bl	80072bc <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bfa:	4b70      	ldr	r3, [pc, #448]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d03e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c42:	d81b      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d00b      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006c4e:	e015      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c54:	3308      	adds	r3, #8
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fa7d 	bl	8007158 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c64:	e00f      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6a:	3328      	adds	r3, #40	@ 0x28
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fb24 	bl	80072bc <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c9e:	4a47      	ldr	r2, [pc, #284]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d03b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cdc:	d818      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006cea:	e011      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b33      	ldr	r3, [pc, #204]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a32      	ldr	r2, [pc, #200]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cf8:	e00f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2101      	movs	r1, #1
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fada 	bl	80072bc <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d22:	4b26      	ldr	r3, [pc, #152]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d38:	e003      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d50:	2300      	movs	r3, #0
 8006d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	d034      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6c:	d007      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006d6e:	e011      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	3308      	adds	r3, #8
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9e6 	bl	8007158 <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db2:	4a02      	ldr	r2, [pc, #8]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006db8:	e006      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fa65 	bl	80072bc <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d038      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e26:	d018      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2c:	d811      	bhi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e32:	d014      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e38:	d80b      	bhi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e42:	d106      	bne.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e44:	4bc3      	ldr	r3, [pc, #780]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	4ac2      	ldr	r2, [pc, #776]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e50:	e008      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e58:	e004      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e5a:	bf00      	nop
 8006e5c:	e002      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10b      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ea8:	4baa      	ldr	r3, [pc, #680]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb6:	4aa7      	ldr	r2, [pc, #668]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eca:	2300      	movs	r3, #0
 8006ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	d00a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006ee8:	4a9a      	ldr	r2, [pc, #616]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006efc:	2300      	movs	r3, #0
 8006efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f04:	460b      	mov	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f0a:	4b92      	ldr	r3, [pc, #584]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f18:	4a8e      	ldr	r2, [pc, #568]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f34:	460b      	mov	r3, r1
 8006f36:	4313      	orrs	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f3a:	4b86      	ldr	r3, [pc, #536]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	4a85      	ldr	r2, [pc, #532]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f44:	6113      	str	r3, [r2, #16]
 8006f46:	4b83      	ldr	r3, [pc, #524]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f48:	6919      	ldr	r1, [r3, #16]
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f52:	4a80      	ldr	r2, [pc, #512]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f66:	2300      	movs	r3, #0
 8006f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f74:	4b77      	ldr	r3, [pc, #476]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f82:	4a74      	ldr	r2, [pc, #464]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f84:	430b      	orrs	r3, r1
 8006f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	d00a      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fb4:	4a67      	ldr	r2, [pc, #412]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d011      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	3308      	adds	r3, #8
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f8ba 	bl	8007158 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	2100      	movs	r1, #0
 8007004:	6239      	str	r1, [r7, #32]
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
 800700c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d011      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	3308      	adds	r3, #8
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f89a 	bl	8007158 <RCCEx_PLL2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800702a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	2100      	movs	r1, #0
 8007044:	61b9      	str	r1, [r7, #24]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007050:	460b      	mov	r3, r1
 8007052:	4313      	orrs	r3, r2
 8007054:	d011      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	3308      	adds	r3, #8
 800705c:	2102      	movs	r1, #2
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f87a 	bl	8007158 <RCCEx_PLL2_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	2100      	movs	r1, #0
 8007084:	6139      	str	r1, [r7, #16]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d011      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709a:	3328      	adds	r3, #40	@ 0x28
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f90c 	bl	80072bc <RCCEx_PLL3_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	2100      	movs	r1, #0
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070d0:	460b      	mov	r3, r1
 80070d2:	4313      	orrs	r3, r2
 80070d4:	d011      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070da:	3328      	adds	r3, #40	@ 0x28
 80070dc:	2101      	movs	r1, #1
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f8ec 	bl	80072bc <RCCEx_PLL3_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	2100      	movs	r1, #0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007110:	460b      	mov	r3, r1
 8007112:	4313      	orrs	r3, r2
 8007114:	d011      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	3328      	adds	r3, #40	@ 0x28
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f8cc 	bl	80072bc <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800713a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800714e:	46bd      	mov	sp, r7
 8007150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007154:	58024400 	.word	0x58024400

08007158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007166:	4b53      	ldr	r3, [pc, #332]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	2b03      	cmp	r3, #3
 8007170:	d101      	bne.n	8007176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e099      	b.n	80072aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007176:	4b4f      	ldr	r3, [pc, #316]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a4e      	ldr	r2, [pc, #312]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800717c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007182:	f7fa fedf 	bl	8001f44 <HAL_GetTick>
 8007186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007188:	e008      	b.n	800719c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800718a:	f7fa fedb 	bl	8001f44 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e086      	b.n	80072aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800719c:	4b45      	ldr	r3, [pc, #276]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071a8:	4b42      	ldr	r3, [pc, #264]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	493f      	ldr	r1, [pc, #252]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	025b      	lsls	r3, r3, #9
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071ec:	4931      	ldr	r1, [pc, #196]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80071f2:	4b30      	ldr	r3, [pc, #192]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	492d      	ldr	r1, [pc, #180]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007200:	4313      	orrs	r3, r2
 8007202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007204:	4b2b      	ldr	r3, [pc, #172]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	f023 0220 	bic.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	4928      	ldr	r1, [pc, #160]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007212:	4313      	orrs	r3, r2
 8007214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007216:	4b27      	ldr	r3, [pc, #156]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	4a26      	ldr	r2, [pc, #152]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800721c:	f023 0310 	bic.w	r3, r3, #16
 8007220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007222:	4b24      	ldr	r3, [pc, #144]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007226:	4b24      	ldr	r3, [pc, #144]	@ (80072b8 <RCCEx_PLL2_Config+0x160>)
 8007228:	4013      	ands	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	69d2      	ldr	r2, [r2, #28]
 800722e:	00d2      	lsls	r2, r2, #3
 8007230:	4920      	ldr	r1, [pc, #128]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007232:	4313      	orrs	r3, r2
 8007234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007236:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	4a1e      	ldr	r2, [pc, #120]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800723c:	f043 0310 	orr.w	r3, r3, #16
 8007240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007248:	4b1a      	ldr	r3, [pc, #104]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	4a19      	ldr	r2, [pc, #100]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800724e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007254:	e00f      	b.n	8007276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800725c:	4b15      	ldr	r3, [pc, #84]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	4a14      	ldr	r2, [pc, #80]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007268:	e005      	b.n	8007276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800726a:	4b12      	ldr	r3, [pc, #72]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800726c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726e:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007276:	4b0f      	ldr	r3, [pc, #60]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a0e      	ldr	r2, [pc, #56]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800727c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007282:	f7fa fe5f 	bl	8001f44 <HAL_GetTick>
 8007286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007288:	e008      	b.n	800729c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800728a:	f7fa fe5b 	bl	8001f44 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e006      	b.n	80072aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <RCCEx_PLL2_Config+0x15c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
 80072b8:	ffff0007 	.word	0xffff0007

080072bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072ca:	4b53      	ldr	r3, [pc, #332]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d101      	bne.n	80072da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e099      	b.n	800740e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80072da:	4b4f      	ldr	r3, [pc, #316]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4e      	ldr	r2, [pc, #312]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80072e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e6:	f7fa fe2d 	bl	8001f44 <HAL_GetTick>
 80072ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ec:	e008      	b.n	8007300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072ee:	f7fa fe29 	bl	8001f44 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e086      	b.n	800740e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007300:	4b45      	ldr	r3, [pc, #276]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800730c:	4b42      	ldr	r3, [pc, #264]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	051b      	lsls	r3, r3, #20
 800731a:	493f      	ldr	r1, [pc, #252]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	3b01      	subs	r3, #1
 8007330:	025b      	lsls	r3, r3, #9
 8007332:	b29b      	uxth	r3, r3
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	3b01      	subs	r3, #1
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	3b01      	subs	r3, #1
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007350:	4931      	ldr	r1, [pc, #196]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007352:	4313      	orrs	r3, r2
 8007354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007356:	4b30      	ldr	r3, [pc, #192]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	492d      	ldr	r1, [pc, #180]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007364:	4313      	orrs	r3, r2
 8007366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007368:	4b2b      	ldr	r3, [pc, #172]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	4928      	ldr	r1, [pc, #160]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800737a:	4b27      	ldr	r3, [pc, #156]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	4a26      	ldr	r2, [pc, #152]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007386:	4b24      	ldr	r3, [pc, #144]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800738a:	4b24      	ldr	r3, [pc, #144]	@ (800741c <RCCEx_PLL3_Config+0x160>)
 800738c:	4013      	ands	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	69d2      	ldr	r2, [r2, #28]
 8007392:	00d2      	lsls	r2, r2, #3
 8007394:	4920      	ldr	r1, [pc, #128]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800739a:	4b1f      	ldr	r3, [pc, #124]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 800739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739e:	4a1e      	ldr	r2, [pc, #120]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	4a19      	ldr	r2, [pc, #100]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073b8:	e00f      	b.n	80073da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d106      	bne.n	80073ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073c0:	4b15      	ldr	r3, [pc, #84]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073cc:	e005      	b.n	80073da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073ce:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a11      	ldr	r2, [pc, #68]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80073da:	4b0f      	ldr	r3, [pc, #60]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a0e      	ldr	r2, [pc, #56]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e6:	f7fa fdad 	bl	8001f44 <HAL_GetTick>
 80073ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073ec:	e008      	b.n	8007400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073ee:	f7fa fda9 	bl	8001f44 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e006      	b.n	800740e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007400:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <RCCEx_PLL3_Config+0x15c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	58024400 	.word	0x58024400
 800741c:	ffff0007 	.word	0xffff0007

08007420 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e10f      	b.n	8007652 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a87      	ldr	r2, [pc, #540]	@ (800765c <HAL_SPI_Init+0x23c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00f      	beq.n	8007462 <HAL_SPI_Init+0x42>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a86      	ldr	r2, [pc, #536]	@ (8007660 <HAL_SPI_Init+0x240>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00a      	beq.n	8007462 <HAL_SPI_Init+0x42>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a84      	ldr	r2, [pc, #528]	@ (8007664 <HAL_SPI_Init+0x244>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d005      	beq.n	8007462 <HAL_SPI_Init+0x42>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b0f      	cmp	r3, #15
 800745c:	d901      	bls.n	8007462 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0f7      	b.n	8007652 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fe2e 	bl	80080c4 <SPI_GetPacketSize>
 8007468:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a7b      	ldr	r2, [pc, #492]	@ (800765c <HAL_SPI_Init+0x23c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00c      	beq.n	800748e <HAL_SPI_Init+0x6e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a79      	ldr	r2, [pc, #484]	@ (8007660 <HAL_SPI_Init+0x240>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d007      	beq.n	800748e <HAL_SPI_Init+0x6e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a78      	ldr	r2, [pc, #480]	@ (8007664 <HAL_SPI_Init+0x244>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d002      	beq.n	800748e <HAL_SPI_Init+0x6e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b08      	cmp	r3, #8
 800748c:	d811      	bhi.n	80074b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007492:	4a72      	ldr	r2, [pc, #456]	@ (800765c <HAL_SPI_Init+0x23c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d009      	beq.n	80074ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a70      	ldr	r2, [pc, #448]	@ (8007660 <HAL_SPI_Init+0x240>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d004      	beq.n	80074ac <HAL_SPI_Init+0x8c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a6f      	ldr	r2, [pc, #444]	@ (8007664 <HAL_SPI_Init+0x244>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d104      	bne.n	80074b6 <HAL_SPI_Init+0x96>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b10      	cmp	r3, #16
 80074b0:	d901      	bls.n	80074b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e0cd      	b.n	8007652 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa f84c 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80074f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074fc:	d119      	bne.n	8007532 <HAL_SPI_Init+0x112>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007506:	d103      	bne.n	8007510 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10c      	bne.n	8007532 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800751c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007520:	d107      	bne.n	8007532 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007530:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00f      	beq.n	800755e <HAL_SPI_Init+0x13e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d90b      	bls.n	800755e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e007      	b.n	800756e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800756c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	431a      	orrs	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	ea42 0103 	orr.w	r1, r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ce:	ea42 0103 	orr.w	r1, r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d113      	bne.n	800760e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800760c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40013000 	.word	0x40013000
 8007660:	40003800 	.word	0x40003800
 8007664:	40003c00 	.word	0x40003c00

08007668 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3320      	adds	r3, #32
 800767e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007680:	f7fa fc60 	bl	8001f44 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d001      	beq.n	8007696 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
 8007694:	e1d1      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_SPI_Transmit+0x3a>
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e1c9      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_SPI_Transmit+0x4c>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e1c2      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2203      	movs	r2, #3
 80076c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800770c:	d108      	bne.n	8007720 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e009      	b.n	8007734 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007732:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	4b96      	ldr	r3, [pc, #600]	@ (8007994 <HAL_SPI_Transmit+0x32c>)
 800773c:	4013      	ands	r3, r2
 800773e:	88f9      	ldrh	r1, [r7, #6]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	430b      	orrs	r3, r1
 8007746:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007760:	d107      	bne.n	8007772 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d947      	bls.n	800780a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800777a:	e03f      	b.n	80077fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b02      	cmp	r3, #2
 8007788:	d114      	bne.n	80077b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077b2:	e023      	b.n	80077fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b4:	f7fa fbc6 	bl	8001f44 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d803      	bhi.n	80077cc <HAL_SPI_Transmit+0x164>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d102      	bne.n	80077d2 <HAL_SPI_Transmit+0x16a>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d114      	bne.n	80077fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fba8 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e11e      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1b9      	bne.n	800777c <HAL_SPI_Transmit+0x114>
 8007808:	e0f1      	b.n	80079ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2b07      	cmp	r3, #7
 8007810:	f240 80e6 	bls.w	80079e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007814:	e05d      	b.n	80078d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b02      	cmp	r3, #2
 8007822:	d132      	bne.n	800788a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	d918      	bls.n	8007862 <HAL_SPI_Transmit+0x1fa>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d014      	beq.n	8007862 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b02      	subs	r3, #2
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007860:	e037      	b.n	80078d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007870:	1c9a      	adds	r2, r3, #2
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007888:	e023      	b.n	80078d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800788a:	f7fa fb5b 	bl	8001f44 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d803      	bhi.n	80078a2 <HAL_SPI_Transmit+0x23a>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d102      	bne.n	80078a8 <HAL_SPI_Transmit+0x240>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d114      	bne.n	80078d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 fb3d 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e0b3      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d19b      	bne.n	8007816 <HAL_SPI_Transmit+0x1ae>
 80078de:	e086      	b.n	80079ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d154      	bne.n	8007998 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d918      	bls.n	800792c <HAL_SPI_Transmit+0x2c4>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d914      	bls.n	800792c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b04      	subs	r3, #4
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800792a:	e059      	b.n	80079e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d917      	bls.n	8007968 <HAL_SPI_Transmit+0x300>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007944:	881a      	ldrh	r2, [r3, #0]
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b02      	subs	r3, #2
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007966:	e03b      	b.n	80079e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3320      	adds	r3, #32
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007992:	e025      	b.n	80079e0 <HAL_SPI_Transmit+0x378>
 8007994:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007998:	f7fa fad4 	bl	8001f44 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <HAL_SPI_Transmit+0x348>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Transmit+0x34e>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d114      	bne.n	80079e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fab6 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e02c      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af79 	bne.w	80078e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	2108      	movs	r1, #8
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fb35 	bl	8008068 <SPI_WaitOnFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d007      	beq.n	8007a14 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a0a:	f043 0220 	orr.w	r2, r3, #32
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fa87 	bl	8007f28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007a38:	2300      	movs	r3, #0
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop

08007a44 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	4613      	mov	r3, r2
 8007a52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3330      	adds	r3, #48	@ 0x30
 8007a66:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a68:	f7fa fa6c 	bl	8001f44 <HAL_GetTick>
 8007a6c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d001      	beq.n	8007a7e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e250      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_SPI_Receive+0x46>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e248      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_SPI_Receive+0x58>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e241      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	88fa      	ldrh	r2, [r7, #6]
 8007abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007af4:	d108      	bne.n	8007b08 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e009      	b.n	8007b1c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007b1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	4b95      	ldr	r3, [pc, #596]	@ (8007d78 <HAL_SPI_Receive+0x334>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	88f9      	ldrh	r1, [r7, #6]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b48:	d107      	bne.n	8007b5a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d96c      	bls.n	8007c3c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007b62:	e064      	b.n	8007c2e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d114      	bne.n	8007ba4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b84:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ba2:	e044      	b.n	8007c2e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	8bfa      	ldrh	r2, [r7, #30]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d919      	bls.n	8007be6 <HAL_SPI_Receive+0x1a2>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d014      	beq.n	8007be6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007bc6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bcc:	1d1a      	adds	r2, r3, #4
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007be4:	e023      	b.n	8007c2e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007be6:	f7fa f9ad 	bl	8001f44 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d803      	bhi.n	8007bfe <HAL_SPI_Receive+0x1ba>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfc:	d102      	bne.n	8007c04 <HAL_SPI_Receive+0x1c0>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d114      	bne.n	8007c2e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f98f 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e178      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d194      	bne.n	8007b64 <HAL_SPI_Receive+0x120>
 8007c3a:	e15e      	b.n	8007efa <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b07      	cmp	r3, #7
 8007c42:	f240 8153 	bls.w	8007eec <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007c46:	e08f      	b.n	8007d68 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d114      	bne.n	8007c88 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	8812      	ldrh	r2, [r2, #0]
 8007c66:	b292      	uxth	r2, r2
 8007c68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c6e:	1c9a      	adds	r2, r3, #2
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c86:	e06f      	b.n	8007d68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	8bfa      	ldrh	r2, [r7, #30]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d924      	bls.n	8007ce0 <HAL_SPI_Receive+0x29c>
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01f      	beq.n	8007ce0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	8812      	ldrh	r2, [r2, #0]
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cb0:	1c9a      	adds	r2, r3, #2
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	8812      	ldrh	r2, [r2, #0]
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b02      	subs	r3, #2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cde:	e043      	b.n	8007d68 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d119      	bne.n	8007d20 <HAL_SPI_Receive+0x2dc>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d014      	beq.n	8007d20 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	8812      	ldrh	r2, [r2, #0]
 8007cfe:	b292      	uxth	r2, r2
 8007d00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d06:	1c9a      	adds	r2, r3, #2
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d1e:	e023      	b.n	8007d68 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d20:	f7fa f910 	bl	8001f44 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d803      	bhi.n	8007d38 <HAL_SPI_Receive+0x2f4>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d102      	bne.n	8007d3e <HAL_SPI_Receive+0x2fa>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d114      	bne.n	8007d68 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f8f2 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e0db      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f af69 	bne.w	8007c48 <HAL_SPI_Receive+0x204>
 8007d76:	e0c0      	b.n	8007efa <HAL_SPI_Receive+0x4b6>
 8007d78:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d117      	bne.n	8007dc2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007dc0:	e094      	b.n	8007eec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	8bfa      	ldrh	r2, [r7, #30]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d946      	bls.n	8007e5e <HAL_SPI_Receive+0x41a>
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d041      	beq.n	8007e5e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e02:	7812      	ldrb	r2, [r2, #0]
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b04      	subs	r3, #4
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e5c:	e046      	b.n	8007eec <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d81c      	bhi.n	8007ea4 <HAL_SPI_Receive+0x460>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ea2:	e023      	b.n	8007eec <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ea4:	f7fa f84e 	bl	8001f44 <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d803      	bhi.n	8007ebc <HAL_SPI_Receive+0x478>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d102      	bne.n	8007ec2 <HAL_SPI_Receive+0x47e>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d114      	bne.n	8007eec <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f830 	bl	8007f28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e019      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f47f af41 	bne.w	8007d7c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f814 	bl	8007f28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
  }
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0210 	orr.w	r2, r2, #16
 8007f56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6919      	ldr	r1, [r3, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b3c      	ldr	r3, [pc, #240]	@ (8008064 <SPI_CloseTransfer+0x13c>)
 8007f74:	400b      	ands	r3, r1
 8007f76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007f86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d014      	beq.n	8007fbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00f      	beq.n	8007fbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0220 	orr.w	r2, r2, #32
 8007fbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d014      	beq.n	8007ff4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00f      	beq.n	8007ff4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fda:	f043 0204 	orr.w	r2, r3, #4
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ff2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008004:	f043 0201 	orr.w	r2, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800801c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00f      	beq.n	8008048 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800802e:	f043 0208 	orr.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008046:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	fffffc90 	.word	0xfffffc90

08008068 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008078:	e010      	b.n	800809c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800807a:	f7f9 ff63 	bl	8001f44 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d803      	bhi.n	8008092 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d102      	bne.n	8008098 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e00f      	b.n	80080bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d0df      	beq.n	800807a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3307      	adds	r3, #7
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e049      	b.n	80081a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7f9 fdfb 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3304      	adds	r3, #4
 8008136:	4619      	mov	r1, r3
 8008138:	4610      	mov	r0, r2
 800813a:	f000 fd59 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d001      	beq.n	80081c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e054      	b.n	800826a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a26      	ldr	r2, [pc, #152]	@ (8008278 <HAL_TIM_Base_Start_IT+0xd0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ea:	d01d      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a22      	ldr	r2, [pc, #136]	@ (800827c <HAL_TIM_Base_Start_IT+0xd4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a21      	ldr	r2, [pc, #132]	@ (8008280 <HAL_TIM_Base_Start_IT+0xd8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1f      	ldr	r2, [pc, #124]	@ (8008284 <HAL_TIM_Base_Start_IT+0xdc>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1e      	ldr	r2, [pc, #120]	@ (8008288 <HAL_TIM_Base_Start_IT+0xe0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1c      	ldr	r2, [pc, #112]	@ (800828c <HAL_TIM_Base_Start_IT+0xe4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x80>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a1b      	ldr	r2, [pc, #108]	@ (8008290 <HAL_TIM_Base_Start_IT+0xe8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d115      	bne.n	8008254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	4b19      	ldr	r3, [pc, #100]	@ (8008294 <HAL_TIM_Base_Start_IT+0xec>)
 8008230:	4013      	ands	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b06      	cmp	r3, #6
 8008238:	d015      	beq.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008240:	d011      	beq.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0201 	orr.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008252:	e008      	b.n	8008266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	e000      	b.n	8008268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40010000 	.word	0x40010000
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40000c00 	.word	0x40000c00
 8008288:	40010400 	.word	0x40010400
 800828c:	40001800 	.word	0x40001800
 8008290:	40014000 	.word	0x40014000
 8008294:	00010007 	.word	0x00010007

08008298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e049      	b.n	800833e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f841 	bl	8008346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 fc8a 	bl	8008bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_TIM_PWM_Start+0x24>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	bf14      	ite	ne
 8008378:	2301      	movne	r3, #1
 800837a:	2300      	moveq	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e03c      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d109      	bne.n	800839a <HAL_TIM_PWM_Start+0x3e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	bf14      	ite	ne
 8008392:	2301      	movne	r3, #1
 8008394:	2300      	moveq	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	e02f      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d109      	bne.n	80083b4 <HAL_TIM_PWM_Start+0x58>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e022      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b0c      	cmp	r3, #12
 80083b8:	d109      	bne.n	80083ce <HAL_TIM_PWM_Start+0x72>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	2300      	moveq	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	e015      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d109      	bne.n	80083e8 <HAL_TIM_PWM_Start+0x8c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	e008      	b.n	80083fa <HAL_TIM_PWM_Start+0x9e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	bf14      	ite	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	2300      	moveq	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e0a1      	b.n	8008546 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_TIM_PWM_Start+0xb6>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008410:	e023      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b04      	cmp	r3, #4
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0xc6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008420:	e01b      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b08      	cmp	r3, #8
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xd6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008430:	e013      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b0c      	cmp	r3, #12
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xe6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008440:	e00b      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b10      	cmp	r3, #16
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xf6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008450:	e003      	b.n	800845a <HAL_TIM_PWM_Start+0xfe>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2201      	movs	r2, #1
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 ffde 	bl	8009424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a38      	ldr	r2, [pc, #224]	@ (8008550 <HAL_TIM_PWM_Start+0x1f4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a37      	ldr	r2, [pc, #220]	@ (8008554 <HAL_TIM_PWM_Start+0x1f8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00e      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a35      	ldr	r2, [pc, #212]	@ (8008558 <HAL_TIM_PWM_Start+0x1fc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a34      	ldr	r2, [pc, #208]	@ (800855c <HAL_TIM_PWM_Start+0x200>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <HAL_TIM_PWM_Start+0x13e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a32      	ldr	r2, [pc, #200]	@ (8008560 <HAL_TIM_PWM_Start+0x204>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_TIM_PWM_Start+0x142>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <HAL_TIM_PWM_Start+0x144>
 800849e:	2300      	movs	r3, #0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a25      	ldr	r2, [pc, #148]	@ (8008550 <HAL_TIM_PWM_Start+0x1f4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d022      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084c6:	d01d      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a25      	ldr	r2, [pc, #148]	@ (8008564 <HAL_TIM_PWM_Start+0x208>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d018      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a24      	ldr	r2, [pc, #144]	@ (8008568 <HAL_TIM_PWM_Start+0x20c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a22      	ldr	r2, [pc, #136]	@ (800856c <HAL_TIM_PWM_Start+0x210>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00e      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008554 <HAL_TIM_PWM_Start+0x1f8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d009      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008570 <HAL_TIM_PWM_Start+0x214>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d004      	beq.n	8008504 <HAL_TIM_PWM_Start+0x1a8>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <HAL_TIM_PWM_Start+0x1fc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d115      	bne.n	8008530 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	4b1a      	ldr	r3, [pc, #104]	@ (8008574 <HAL_TIM_PWM_Start+0x218>)
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b06      	cmp	r3, #6
 8008514:	d015      	beq.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851c:	d011      	beq.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852e:	e008      	b.n	8008542 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e000      	b.n	8008544 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400
 8008558:	40014000 	.word	0x40014000
 800855c:	40014400 	.word	0x40014400
 8008560:	40014800 	.word	0x40014800
 8008564:	40000400 	.word	0x40000400
 8008568:	40000800 	.word	0x40000800
 800856c:	40000c00 	.word	0x40000c00
 8008570:	40001800 	.word	0x40001800
 8008574:	00010007 	.word	0x00010007

08008578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d020      	beq.n	80085dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01b      	beq.n	80085dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0202 	mvn.w	r2, #2
 80085ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 faf6 	bl	8008bb4 <HAL_TIM_IC_CaptureCallback>
 80085c8:	e005      	b.n	80085d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fae8 	bl	8008ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 faf9 	bl	8008bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d020      	beq.n	8008628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01b      	beq.n	8008628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0204 	mvn.w	r2, #4
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fad0 	bl	8008bb4 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fac2 	bl	8008ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fad3 	bl	8008bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d020      	beq.n	8008674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01b      	beq.n	8008674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0208 	mvn.w	r2, #8
 8008644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2204      	movs	r2, #4
 800864a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 faaa 	bl	8008bb4 <HAL_TIM_IC_CaptureCallback>
 8008660:	e005      	b.n	800866e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa9c 	bl	8008ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 faad 	bl	8008bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 0310 	and.w	r3, r3, #16
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01b      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0210 	mvn.w	r2, #16
 8008690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2208      	movs	r2, #8
 8008696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa84 	bl	8008bb4 <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa76 	bl	8008ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa87 	bl	8008bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0201 	mvn.w	r2, #1
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7f8 fe7c 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00c      	beq.n	8008712 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 f887 	bl	8009820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00c      	beq.n	8008736 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800872e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f87f 	bl	8009834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa41 	bl	8008bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00c      	beq.n	800877e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f06f 0220 	mvn.w	r2, #32
 8008776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 f847 	bl	800980c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d101      	bne.n	80087a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087a2:	2302      	movs	r3, #2
 80087a4:	e0ff      	b.n	80089a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b14      	cmp	r3, #20
 80087b2:	f200 80f0 	bhi.w	8008996 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008811 	.word	0x08008811
 80087c0:	08008997 	.word	0x08008997
 80087c4:	08008997 	.word	0x08008997
 80087c8:	08008997 	.word	0x08008997
 80087cc:	08008851 	.word	0x08008851
 80087d0:	08008997 	.word	0x08008997
 80087d4:	08008997 	.word	0x08008997
 80087d8:	08008997 	.word	0x08008997
 80087dc:	08008893 	.word	0x08008893
 80087e0:	08008997 	.word	0x08008997
 80087e4:	08008997 	.word	0x08008997
 80087e8:	08008997 	.word	0x08008997
 80087ec:	080088d3 	.word	0x080088d3
 80087f0:	08008997 	.word	0x08008997
 80087f4:	08008997 	.word	0x08008997
 80087f8:	08008997 	.word	0x08008997
 80087fc:	08008915 	.word	0x08008915
 8008800:	08008997 	.word	0x08008997
 8008804:	08008997 	.word	0x08008997
 8008808:	08008997 	.word	0x08008997
 800880c:	08008955 	.word	0x08008955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fa90 	bl	8008d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0208 	orr.w	r2, r2, #8
 800882a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0204 	bic.w	r2, r2, #4
 800883a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6999      	ldr	r1, [r3, #24]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691a      	ldr	r2, [r3, #16]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	619a      	str	r2, [r3, #24]
      break;
 800884e:	e0a5      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68b9      	ldr	r1, [r7, #8]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fb00 	bl	8008e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800886a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800887a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6999      	ldr	r1, [r3, #24]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	021a      	lsls	r2, r3, #8
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	619a      	str	r2, [r3, #24]
      break;
 8008890:	e084      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fb69 	bl	8008f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0208 	orr.w	r2, r2, #8
 80088ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0204 	bic.w	r2, r2, #4
 80088bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69d9      	ldr	r1, [r3, #28]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	61da      	str	r2, [r3, #28]
      break;
 80088d0:	e064      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 fbd1 	bl	8009080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69d9      	ldr	r1, [r3, #28]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	021a      	lsls	r2, r3, #8
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	61da      	str	r2, [r3, #28]
      break;
 8008912:	e043      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fc1a 	bl	8009154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0208 	orr.w	r2, r2, #8
 800892e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0204 	bic.w	r2, r2, #4
 800893e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008952:	e023      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fc5e 	bl	800921c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800896e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800897e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	021a      	lsls	r2, r3, #8
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008994:	e002      	b.n	800899c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
      break;
 800899a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_TIM_ConfigClockSource+0x1c>
 80089c8:	2302      	movs	r3, #2
 80089ca:	e0dc      	b.n	8008b86 <HAL_TIM_ConfigClockSource+0x1d6>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008b90 <HAL_TIM_ConfigClockSource+0x1e0>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a64      	ldr	r2, [pc, #400]	@ (8008b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	f000 80a9 	beq.w	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a08:	4a62      	ldr	r2, [pc, #392]	@ (8008b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	f200 80ae 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a10:	4a61      	ldr	r2, [pc, #388]	@ (8008b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	f000 80a1 	beq.w	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a18:	4a5f      	ldr	r2, [pc, #380]	@ (8008b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	f200 80a6 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a20:	4a5e      	ldr	r2, [pc, #376]	@ (8008b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	f000 8099 	beq.w	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a28:	4a5c      	ldr	r2, [pc, #368]	@ (8008b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	f200 809e 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a34:	f000 8091 	beq.w	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a3c:	f200 8096 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a44:	f000 8089 	beq.w	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a4c:	f200 808e 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a54:	d03e      	beq.n	8008ad4 <HAL_TIM_ConfigClockSource+0x124>
 8008a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a5a:	f200 8087 	bhi.w	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a62:	f000 8086 	beq.w	8008b72 <HAL_TIM_ConfigClockSource+0x1c2>
 8008a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a6a:	d87f      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a6c:	2b70      	cmp	r3, #112	@ 0x70
 8008a6e:	d01a      	beq.n	8008aa6 <HAL_TIM_ConfigClockSource+0xf6>
 8008a70:	2b70      	cmp	r3, #112	@ 0x70
 8008a72:	d87b      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a74:	2b60      	cmp	r3, #96	@ 0x60
 8008a76:	d050      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x16a>
 8008a78:	2b60      	cmp	r3, #96	@ 0x60
 8008a7a:	d877      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a7c:	2b50      	cmp	r3, #80	@ 0x50
 8008a7e:	d03c      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x14a>
 8008a80:	2b50      	cmp	r3, #80	@ 0x50
 8008a82:	d873      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a84:	2b40      	cmp	r3, #64	@ 0x40
 8008a86:	d058      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x18a>
 8008a88:	2b40      	cmp	r3, #64	@ 0x40
 8008a8a:	d86f      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a8c:	2b30      	cmp	r3, #48	@ 0x30
 8008a8e:	d064      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a90:	2b30      	cmp	r3, #48	@ 0x30
 8008a92:	d86b      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d060      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d867      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05c      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008aa0:	2b10      	cmp	r3, #16
 8008aa2:	d05a      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x1aa>
 8008aa4:	e062      	b.n	8008b6c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ab6:	f000 fc95 	bl	80093e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	609a      	str	r2, [r3, #8]
      break;
 8008ad2:	e04f      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ae4:	f000 fc7e 	bl	80093e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008af6:	609a      	str	r2, [r3, #8]
      break;
 8008af8:	e03c      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b06:	461a      	mov	r2, r3
 8008b08:	f000 fbee 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2150      	movs	r1, #80	@ 0x50
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fc48 	bl	80093a8 <TIM_ITRx_SetConfig>
      break;
 8008b18:	e02c      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b26:	461a      	mov	r2, r3
 8008b28:	f000 fc0d 	bl	8009346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2160      	movs	r1, #96	@ 0x60
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fc38 	bl	80093a8 <TIM_ITRx_SetConfig>
      break;
 8008b38:	e01c      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b46:	461a      	mov	r2, r3
 8008b48:	f000 fbce 	bl	80092e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2140      	movs	r1, #64	@ 0x40
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fc28 	bl	80093a8 <TIM_ITRx_SetConfig>
      break;
 8008b58:	e00c      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f000 fc1f 	bl	80093a8 <TIM_ITRx_SetConfig>
      break;
 8008b6a:	e003      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b70:	e000      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	ffceff88 	.word	0xffceff88
 8008b94:	00100040 	.word	0x00100040
 8008b98:	00100030 	.word	0x00100030
 8008b9c:	00100020 	.word	0x00100020

08008ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a46      	ldr	r2, [pc, #280]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c0e:	d00f      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a43      	ldr	r2, [pc, #268]	@ (8008d20 <TIM_Base_SetConfig+0x130>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a42      	ldr	r2, [pc, #264]	@ (8008d24 <TIM_Base_SetConfig+0x134>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a41      	ldr	r2, [pc, #260]	@ (8008d28 <TIM_Base_SetConfig+0x138>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a40      	ldr	r2, [pc, #256]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d108      	bne.n	8008c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a35      	ldr	r2, [pc, #212]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d01f      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c50:	d01b      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a32      	ldr	r2, [pc, #200]	@ (8008d20 <TIM_Base_SetConfig+0x130>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d017      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a31      	ldr	r2, [pc, #196]	@ (8008d24 <TIM_Base_SetConfig+0x134>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d013      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a30      	ldr	r2, [pc, #192]	@ (8008d28 <TIM_Base_SetConfig+0x138>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00f      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00b      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2e      	ldr	r2, [pc, #184]	@ (8008d30 <TIM_Base_SetConfig+0x140>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d007      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d34 <TIM_Base_SetConfig+0x144>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d003      	beq.n	8008c8a <TIM_Base_SetConfig+0x9a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2c      	ldr	r2, [pc, #176]	@ (8008d38 <TIM_Base_SetConfig+0x148>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d108      	bne.n	8008c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a16      	ldr	r2, [pc, #88]	@ (8008d1c <TIM_Base_SetConfig+0x12c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00f      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <TIM_Base_SetConfig+0x13c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00b      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a17      	ldr	r2, [pc, #92]	@ (8008d30 <TIM_Base_SetConfig+0x140>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d007      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <TIM_Base_SetConfig+0x144>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_Base_SetConfig+0xf8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <TIM_Base_SetConfig+0x148>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d103      	bne.n	8008cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d105      	bne.n	8008d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f023 0201 	bic.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]
  }
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40014400 	.word	0x40014400
 8008d38:	40014800 	.word	0x40014800

08008d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f023 0201 	bic.w	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4b37      	ldr	r3, [pc, #220]	@ (8008e44 <TIM_OC1_SetConfig+0x108>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0303 	bic.w	r3, r3, #3
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 0302 	bic.w	r3, r3, #2
 8008d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a2d      	ldr	r2, [pc, #180]	@ (8008e48 <TIM_OC1_SetConfig+0x10c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00f      	beq.n	8008db8 <TIM_OC1_SetConfig+0x7c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008e4c <TIM_OC1_SetConfig+0x110>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <TIM_OC1_SetConfig+0x7c>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a2b      	ldr	r2, [pc, #172]	@ (8008e50 <TIM_OC1_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d007      	beq.n	8008db8 <TIM_OC1_SetConfig+0x7c>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a2a      	ldr	r2, [pc, #168]	@ (8008e54 <TIM_OC1_SetConfig+0x118>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_OC1_SetConfig+0x7c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a29      	ldr	r2, [pc, #164]	@ (8008e58 <TIM_OC1_SetConfig+0x11c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d10c      	bne.n	8008dd2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f023 0308 	bic.w	r3, r3, #8
 8008dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 0304 	bic.w	r3, r3, #4
 8008dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e48 <TIM_OC1_SetConfig+0x10c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00f      	beq.n	8008dfa <TIM_OC1_SetConfig+0xbe>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8008e4c <TIM_OC1_SetConfig+0x110>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00b      	beq.n	8008dfa <TIM_OC1_SetConfig+0xbe>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e50 <TIM_OC1_SetConfig+0x114>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d007      	beq.n	8008dfa <TIM_OC1_SetConfig+0xbe>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a19      	ldr	r2, [pc, #100]	@ (8008e54 <TIM_OC1_SetConfig+0x118>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d003      	beq.n	8008dfa <TIM_OC1_SetConfig+0xbe>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a18      	ldr	r2, [pc, #96]	@ (8008e58 <TIM_OC1_SetConfig+0x11c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d111      	bne.n	8008e1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	621a      	str	r2, [r3, #32]
}
 8008e38:	bf00      	nop
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	fffeff8f 	.word	0xfffeff8f
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40010400 	.word	0x40010400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800

08008e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f023 0210 	bic.w	r2, r3, #16
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4b34      	ldr	r3, [pc, #208]	@ (8008f58 <TIM_OC2_SetConfig+0xfc>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f023 0320 	bic.w	r3, r3, #32
 8008ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a29      	ldr	r2, [pc, #164]	@ (8008f5c <TIM_OC2_SetConfig+0x100>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d003      	beq.n	8008ec4 <TIM_OC2_SetConfig+0x68>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a28      	ldr	r2, [pc, #160]	@ (8008f60 <TIM_OC2_SetConfig+0x104>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d10d      	bne.n	8008ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ede:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f5c <TIM_OC2_SetConfig+0x100>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00f      	beq.n	8008f08 <TIM_OC2_SetConfig+0xac>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <TIM_OC2_SetConfig+0x104>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00b      	beq.n	8008f08 <TIM_OC2_SetConfig+0xac>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <TIM_OC2_SetConfig+0x108>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d007      	beq.n	8008f08 <TIM_OC2_SetConfig+0xac>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a1b      	ldr	r2, [pc, #108]	@ (8008f68 <TIM_OC2_SetConfig+0x10c>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_OC2_SetConfig+0xac>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1a      	ldr	r2, [pc, #104]	@ (8008f6c <TIM_OC2_SetConfig+0x110>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d113      	bne.n	8008f30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	621a      	str	r2, [r3, #32]
}
 8008f4a:	bf00      	nop
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	feff8fff 	.word	0xfeff8fff
 8008f5c:	40010000 	.word	0x40010000
 8008f60:	40010400 	.word	0x40010400
 8008f64:	40014000 	.word	0x40014000
 8008f68:	40014400 	.word	0x40014400
 8008f6c:	40014800 	.word	0x40014800

08008f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4b33      	ldr	r3, [pc, #204]	@ (8009068 <TIM_OC3_SetConfig+0xf8>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0303 	bic.w	r3, r3, #3
 8008fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a28      	ldr	r2, [pc, #160]	@ (800906c <TIM_OC3_SetConfig+0xfc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC3_SetConfig+0x66>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a27      	ldr	r2, [pc, #156]	@ (8009070 <TIM_OC3_SetConfig+0x100>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d10d      	bne.n	8008ff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800906c <TIM_OC3_SetConfig+0xfc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00f      	beq.n	800901a <TIM_OC3_SetConfig+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8009070 <TIM_OC3_SetConfig+0x100>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00b      	beq.n	800901a <TIM_OC3_SetConfig+0xaa>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a1b      	ldr	r2, [pc, #108]	@ (8009074 <TIM_OC3_SetConfig+0x104>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d007      	beq.n	800901a <TIM_OC3_SetConfig+0xaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a1a      	ldr	r2, [pc, #104]	@ (8009078 <TIM_OC3_SetConfig+0x108>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_OC3_SetConfig+0xaa>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a19      	ldr	r2, [pc, #100]	@ (800907c <TIM_OC3_SetConfig+0x10c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d113      	bne.n	8009042 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	621a      	str	r2, [r3, #32]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	fffeff8f 	.word	0xfffeff8f
 800906c:	40010000 	.word	0x40010000
 8009070:	40010400 	.word	0x40010400
 8009074:	40014000 	.word	0x40014000
 8009078:	40014400 	.word	0x40014400
 800907c:	40014800 	.word	0x40014800

08009080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4b24      	ldr	r3, [pc, #144]	@ (800913c <TIM_OC4_SetConfig+0xbc>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	031b      	lsls	r3, r3, #12
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a19      	ldr	r2, [pc, #100]	@ (8009140 <TIM_OC4_SetConfig+0xc0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00f      	beq.n	8009100 <TIM_OC4_SetConfig+0x80>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a18      	ldr	r2, [pc, #96]	@ (8009144 <TIM_OC4_SetConfig+0xc4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00b      	beq.n	8009100 <TIM_OC4_SetConfig+0x80>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <TIM_OC4_SetConfig+0xc8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d007      	beq.n	8009100 <TIM_OC4_SetConfig+0x80>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a16      	ldr	r2, [pc, #88]	@ (800914c <TIM_OC4_SetConfig+0xcc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d003      	beq.n	8009100 <TIM_OC4_SetConfig+0x80>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a15      	ldr	r2, [pc, #84]	@ (8009150 <TIM_OC4_SetConfig+0xd0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d109      	bne.n	8009114 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	019b      	lsls	r3, r3, #6
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	621a      	str	r2, [r3, #32]
}
 800912e:	bf00      	nop
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	feff8fff 	.word	0xfeff8fff
 8009140:	40010000 	.word	0x40010000
 8009144:	40010400 	.word	0x40010400
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	4b21      	ldr	r3, [pc, #132]	@ (8009204 <TIM_OC5_SetConfig+0xb0>)
 8009180:	4013      	ands	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009194:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	041b      	lsls	r3, r3, #16
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <TIM_OC5_SetConfig+0xb4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00f      	beq.n	80091ca <TIM_OC5_SetConfig+0x76>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a17      	ldr	r2, [pc, #92]	@ (800920c <TIM_OC5_SetConfig+0xb8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00b      	beq.n	80091ca <TIM_OC5_SetConfig+0x76>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a16      	ldr	r2, [pc, #88]	@ (8009210 <TIM_OC5_SetConfig+0xbc>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d007      	beq.n	80091ca <TIM_OC5_SetConfig+0x76>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a15      	ldr	r2, [pc, #84]	@ (8009214 <TIM_OC5_SetConfig+0xc0>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d003      	beq.n	80091ca <TIM_OC5_SetConfig+0x76>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a14      	ldr	r2, [pc, #80]	@ (8009218 <TIM_OC5_SetConfig+0xc4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d109      	bne.n	80091de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	621a      	str	r2, [r3, #32]
}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	fffeff8f 	.word	0xfffeff8f
 8009208:	40010000 	.word	0x40010000
 800920c:	40010400 	.word	0x40010400
 8009210:	40014000 	.word	0x40014000
 8009214:	40014400 	.word	0x40014400
 8009218:	40014800 	.word	0x40014800

0800921c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	4b22      	ldr	r3, [pc, #136]	@ (80092d0 <TIM_OC6_SetConfig+0xb4>)
 8009248:	4013      	ands	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800925e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	051b      	lsls	r3, r3, #20
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4313      	orrs	r3, r2
 800926a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a19      	ldr	r2, [pc, #100]	@ (80092d4 <TIM_OC6_SetConfig+0xb8>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00f      	beq.n	8009294 <TIM_OC6_SetConfig+0x78>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a18      	ldr	r2, [pc, #96]	@ (80092d8 <TIM_OC6_SetConfig+0xbc>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00b      	beq.n	8009294 <TIM_OC6_SetConfig+0x78>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a17      	ldr	r2, [pc, #92]	@ (80092dc <TIM_OC6_SetConfig+0xc0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d007      	beq.n	8009294 <TIM_OC6_SetConfig+0x78>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a16      	ldr	r2, [pc, #88]	@ (80092e0 <TIM_OC6_SetConfig+0xc4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d003      	beq.n	8009294 <TIM_OC6_SetConfig+0x78>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a15      	ldr	r2, [pc, #84]	@ (80092e4 <TIM_OC6_SetConfig+0xc8>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d109      	bne.n	80092a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800929a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	029b      	lsls	r3, r3, #10
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	621a      	str	r2, [r3, #32]
}
 80092c2:	bf00      	nop
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	feff8fff 	.word	0xfeff8fff
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010400 	.word	0x40010400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	f023 0201 	bic.w	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4313      	orrs	r3, r2
 800931c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f023 030a 	bic.w	r3, r3, #10
 8009324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	621a      	str	r2, [r3, #32]
}
 800933a:	bf00      	nop
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009346:	b480      	push	{r7}
 8009348:	b087      	sub	sp, #28
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	f023 0210 	bic.w	r2, r3, #16
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	031b      	lsls	r3, r3, #12
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	4313      	orrs	r3, r2
 800938c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	621a      	str	r2, [r3, #32]
}
 800939a:	bf00      	nop
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4b09      	ldr	r3, [pc, #36]	@ (80093e0 <TIM_ITRx_SetConfig+0x38>)
 80093bc:	4013      	ands	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f043 0307 	orr.w	r3, r3, #7
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	609a      	str	r2, [r3, #8]
}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	ffcfff8f 	.word	0xffcfff8f

080093e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	021a      	lsls	r2, r3, #8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	431a      	orrs	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4313      	orrs	r3, r2
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	609a      	str	r2, [r3, #8]
}
 8009418:	bf00      	nop
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 031f 	and.w	r3, r3, #31
 8009436:	2201      	movs	r2, #1
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	43db      	mvns	r3, r3
 8009446:	401a      	ands	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a1a      	ldr	r2, [r3, #32]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	fa01 f303 	lsl.w	r3, r1, r3
 800945c:	431a      	orrs	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <HAL_TIMEx_PWMN_Start+0x24>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	bf14      	ite	ne
 800948c:	2301      	movne	r3, #1
 800948e:	2300      	moveq	r3, #0
 8009490:	b2db      	uxtb	r3, r3
 8009492:	e022      	b.n	80094da <HAL_TIMEx_PWMN_Start+0x6a>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b04      	cmp	r3, #4
 8009498:	d109      	bne.n	80094ae <HAL_TIMEx_PWMN_Start+0x3e>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	bf14      	ite	ne
 80094a6:	2301      	movne	r3, #1
 80094a8:	2300      	moveq	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	e015      	b.n	80094da <HAL_TIMEx_PWMN_Start+0x6a>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d109      	bne.n	80094c8 <HAL_TIMEx_PWMN_Start+0x58>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	bf14      	ite	ne
 80094c0:	2301      	movne	r3, #1
 80094c2:	2300      	moveq	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	e008      	b.n	80094da <HAL_TIMEx_PWMN_Start+0x6a>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	bf14      	ite	ne
 80094d4:	2301      	movne	r3, #1
 80094d6:	2300      	moveq	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e073      	b.n	80095ca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d104      	bne.n	80094f2 <HAL_TIMEx_PWMN_Start+0x82>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094f0:	e013      	b.n	800951a <HAL_TIMEx_PWMN_Start+0xaa>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d104      	bne.n	8009502 <HAL_TIMEx_PWMN_Start+0x92>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009500:	e00b      	b.n	800951a <HAL_TIMEx_PWMN_Start+0xaa>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b08      	cmp	r3, #8
 8009506:	d104      	bne.n	8009512 <HAL_TIMEx_PWMN_Start+0xa2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009510:	e003      	b.n	800951a <HAL_TIMEx_PWMN_Start+0xaa>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2202      	movs	r2, #2
 8009516:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2204      	movs	r2, #4
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f990 	bl	8009848 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009536:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a25      	ldr	r2, [pc, #148]	@ (80095d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d022      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800954a:	d01d      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a21      	ldr	r2, [pc, #132]	@ (80095d8 <HAL_TIMEx_PWMN_Start+0x168>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d018      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a20      	ldr	r2, [pc, #128]	@ (80095dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d013      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1e      	ldr	r2, [pc, #120]	@ (80095e0 <HAL_TIMEx_PWMN_Start+0x170>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00e      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <HAL_TIMEx_PWMN_Start+0x174>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d009      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1b      	ldr	r2, [pc, #108]	@ (80095e8 <HAL_TIMEx_PWMN_Start+0x178>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d004      	beq.n	8009588 <HAL_TIMEx_PWMN_Start+0x118>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1a      	ldr	r2, [pc, #104]	@ (80095ec <HAL_TIMEx_PWMN_Start+0x17c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d115      	bne.n	80095b4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	4b18      	ldr	r3, [pc, #96]	@ (80095f0 <HAL_TIMEx_PWMN_Start+0x180>)
 8009590:	4013      	ands	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b06      	cmp	r3, #6
 8009598:	d015      	beq.n	80095c6 <HAL_TIMEx_PWMN_Start+0x156>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095a0:	d011      	beq.n	80095c6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0201 	orr.w	r2, r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b2:	e008      	b.n	80095c6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	e000      	b.n	80095c8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40010000 	.word	0x40010000
 80095d8:	40000400 	.word	0x40000400
 80095dc:	40000800 	.word	0x40000800
 80095e0:	40000c00 	.word	0x40000c00
 80095e4:	40010400 	.word	0x40010400
 80095e8:	40001800 	.word	0x40001800
 80095ec:	40014000 	.word	0x40014000
 80095f0:	00010007 	.word	0x00010007

080095f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009608:	2302      	movs	r3, #2
 800960a:	e06d      	b.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a30      	ldr	r2, [pc, #192]	@ (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d004      	beq.n	8009640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a2f      	ldr	r2, [pc, #188]	@ (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d108      	bne.n	8009652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a20      	ldr	r2, [pc, #128]	@ (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d022      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800967e:	d01d      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1d      	ldr	r2, [pc, #116]	@ (80096fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d018      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1c      	ldr	r2, [pc, #112]	@ (8009700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d013      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1a      	ldr	r2, [pc, #104]	@ (8009704 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00e      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a15      	ldr	r2, [pc, #84]	@ (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d009      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a16      	ldr	r2, [pc, #88]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d004      	beq.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a15      	ldr	r2, [pc, #84]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d10c      	bne.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	40010000 	.word	0x40010000
 80096f8:	40010400 	.word	0x40010400
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40001800 	.word	0x40001800
 800970c:	40014000 	.word	0x40014000

08009710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009728:	2302      	movs	r3, #2
 800972a:	e065      	b.n	80097f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	4313      	orrs	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	041b      	lsls	r3, r3, #16
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a16      	ldr	r2, [pc, #88]	@ (8009804 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d004      	beq.n	80097ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a14      	ldr	r2, [pc, #80]	@ (8009808 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d115      	bne.n	80097e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c4:	051b      	lsls	r3, r3, #20
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40010000 	.word	0x40010000
 8009808:	40010400 	.word	0x40010400

0800980c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	2204      	movs	r2, #4
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	43db      	mvns	r3, r3
 800986a:	401a      	ands	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1a      	ldr	r2, [r3, #32]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f003 030f 	and.w	r3, r3, #15
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	fa01 f303 	lsl.w	r3, r1, r3
 8009880:	431a      	orrs	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009894:	b084      	sub	sp, #16
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	f107 001c 	add.w	r0, r7, #28
 80098a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d121      	bne.n	80098f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	4b2c      	ldr	r3, [pc, #176]	@ (8009970 <USB_CoreInit+0xdc>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d105      	bne.n	80098e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 faf6 	bl	800aed8 <USB_CoreReset>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e01b      	b.n	800992a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 faea 	bl	800aed8 <USB_CoreReset>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009908:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800990c:	2b00      	cmp	r3, #0
 800990e:	d106      	bne.n	800991e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009914:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	639a      	str	r2, [r3, #56]	@ 0x38
 800991c:	e005      	b.n	800992a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800992a:	7fbb      	ldrb	r3, [r7, #30]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d116      	bne.n	800995e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009934:	b29a      	uxth	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800993e:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <USB_CoreInit+0xe0>)
 8009940:	4313      	orrs	r3, r2
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f043 0206 	orr.w	r2, r3, #6
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f043 0220 	orr.w	r2, r3, #32
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800996a:	b004      	add	sp, #16
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	ffbdffbf 	.word	0xffbdffbf
 8009974:	03ee0000 	.word	0x03ee0000

08009978 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d165      	bne.n	8009a58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4a41      	ldr	r2, [pc, #260]	@ (8009a94 <USB_SetTurnaroundTime+0x11c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d906      	bls.n	80099a2 <USB_SetTurnaroundTime+0x2a>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a40      	ldr	r2, [pc, #256]	@ (8009a98 <USB_SetTurnaroundTime+0x120>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d202      	bcs.n	80099a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800999c:	230f      	movs	r3, #15
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e062      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009a98 <USB_SetTurnaroundTime+0x120>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d306      	bcc.n	80099b8 <USB_SetTurnaroundTime+0x40>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a3b      	ldr	r2, [pc, #236]	@ (8009a9c <USB_SetTurnaroundTime+0x124>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d202      	bcs.n	80099b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80099b2:	230e      	movs	r3, #14
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e057      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4a38      	ldr	r2, [pc, #224]	@ (8009a9c <USB_SetTurnaroundTime+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d306      	bcc.n	80099ce <USB_SetTurnaroundTime+0x56>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4a37      	ldr	r2, [pc, #220]	@ (8009aa0 <USB_SetTurnaroundTime+0x128>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d202      	bcs.n	80099ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80099c8:	230d      	movs	r3, #13
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e04c      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a33      	ldr	r2, [pc, #204]	@ (8009aa0 <USB_SetTurnaroundTime+0x128>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d306      	bcc.n	80099e4 <USB_SetTurnaroundTime+0x6c>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	4a32      	ldr	r2, [pc, #200]	@ (8009aa4 <USB_SetTurnaroundTime+0x12c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d802      	bhi.n	80099e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099de:	230c      	movs	r3, #12
 80099e0:	617b      	str	r3, [r7, #20]
 80099e2:	e041      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4a2f      	ldr	r2, [pc, #188]	@ (8009aa4 <USB_SetTurnaroundTime+0x12c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d906      	bls.n	80099fa <USB_SetTurnaroundTime+0x82>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4a2e      	ldr	r2, [pc, #184]	@ (8009aa8 <USB_SetTurnaroundTime+0x130>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d802      	bhi.n	80099fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099f4:	230b      	movs	r3, #11
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e036      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa8 <USB_SetTurnaroundTime+0x130>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d906      	bls.n	8009a10 <USB_SetTurnaroundTime+0x98>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	4a29      	ldr	r2, [pc, #164]	@ (8009aac <USB_SetTurnaroundTime+0x134>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d802      	bhi.n	8009a10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a0a:	230a      	movs	r3, #10
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e02b      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4a26      	ldr	r2, [pc, #152]	@ (8009aac <USB_SetTurnaroundTime+0x134>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d906      	bls.n	8009a26 <USB_SetTurnaroundTime+0xae>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4a25      	ldr	r2, [pc, #148]	@ (8009ab0 <USB_SetTurnaroundTime+0x138>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d202      	bcs.n	8009a26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a20:	2309      	movs	r3, #9
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	e020      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4a21      	ldr	r2, [pc, #132]	@ (8009ab0 <USB_SetTurnaroundTime+0x138>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d306      	bcc.n	8009a3c <USB_SetTurnaroundTime+0xc4>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	4a20      	ldr	r2, [pc, #128]	@ (8009ab4 <USB_SetTurnaroundTime+0x13c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d802      	bhi.n	8009a3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a36:	2308      	movs	r3, #8
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	e015      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab4 <USB_SetTurnaroundTime+0x13c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d906      	bls.n	8009a52 <USB_SetTurnaroundTime+0xda>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab8 <USB_SetTurnaroundTime+0x140>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d202      	bcs.n	8009a52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a4c:	2307      	movs	r3, #7
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e00a      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a52:	2306      	movs	r3, #6
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	e007      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a5e:	2309      	movs	r3, #9
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e001      	b.n	8009a68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a64:	2309      	movs	r3, #9
 8009a66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a80:	431a      	orrs	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	00d8acbf 	.word	0x00d8acbf
 8009a98:	00e4e1c0 	.word	0x00e4e1c0
 8009a9c:	00f42400 	.word	0x00f42400
 8009aa0:	01067380 	.word	0x01067380
 8009aa4:	011a499f 	.word	0x011a499f
 8009aa8:	01312cff 	.word	0x01312cff
 8009aac:	014ca43f 	.word	0x014ca43f
 8009ab0:	016e3600 	.word	0x016e3600
 8009ab4:	01a6ab1f 	.word	0x01a6ab1f
 8009ab8:	01e84800 	.word	0x01e84800

08009abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f043 0201 	orr.w	r2, r3, #1
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d115      	bne.n	8009b4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b2e:	200a      	movs	r0, #10
 8009b30:	f7f8 fa14 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	330a      	adds	r3, #10
 8009b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 f93b 	bl	800adb6 <USB_GetMode>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d01e      	beq.n	8009b84 <USB_SetCurrentMode+0x84>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b4a:	d9f0      	bls.n	8009b2e <USB_SetCurrentMode+0x2e>
 8009b4c:	e01a      	b.n	8009b84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d115      	bne.n	8009b80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b60:	200a      	movs	r0, #10
 8009b62:	f7f8 f9fb 	bl	8001f5c <HAL_Delay>
      ms += 10U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	330a      	adds	r3, #10
 8009b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 f922 	bl	800adb6 <USB_GetMode>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <USB_SetCurrentMode+0x84>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b7c:	d9f0      	bls.n	8009b60 <USB_SetCurrentMode+0x60>
 8009b7e:	e001      	b.n	8009b84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e005      	b.n	8009b90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b88:	d101      	bne.n	8009b8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b98:	b084      	sub	sp, #16
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	e009      	b.n	8009bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	3340      	adds	r3, #64	@ 0x40
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	613b      	str	r3, [r7, #16]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b0e      	cmp	r3, #14
 8009bd0:	d9f2      	bls.n	8009bb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009bd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d11c      	bne.n	8009c14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009be8:	f043 0302 	orr.w	r3, r3, #2
 8009bec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e005      	b.n	8009c20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c26:	461a      	mov	r2, r3
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d10d      	bne.n	8009c50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f968 	bl	8009f14 <USB_SetDevSpeed>
 8009c44:	e008      	b.n	8009c58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c46:	2101      	movs	r1, #1
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f963 	bl	8009f14 <USB_SetDevSpeed>
 8009c4e:	e003      	b.n	8009c58 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c50:	2103      	movs	r1, #3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f95e 	bl	8009f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009c58:	2110      	movs	r1, #16
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f8fa 	bl	8009e54 <USB_FlushTxFifo>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f924 	bl	8009eb8 <USB_FlushRxFifo>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c80:	461a      	mov	r2, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c98:	461a      	mov	r2, r3
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	e043      	b.n	8009d2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cba:	d118      	bne.n	8009cee <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	e013      	b.n	8009d00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	e008      	b.n	8009d00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d30:	461a      	mov	r2, r3
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d3b5      	bcc.n	8009ca4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	e043      	b.n	8009dc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d54:	d118      	bne.n	8009d88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	e013      	b.n	8009d9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e008      	b.n	8009d9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d94:	461a      	mov	r2, r3
 8009d96:	2300      	movs	r3, #0
 8009d98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da6:	461a      	mov	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db8:	461a      	mov	r2, r3
 8009dba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	613b      	str	r3, [r7, #16]
 8009dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009dca:	461a      	mov	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d3b5      	bcc.n	8009d3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009de4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009df2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009df4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d105      	bne.n	8009e08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	f043 0210 	orr.w	r2, r3, #16
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009e4c <USB_DevInit+0x2b4>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	f043 0208 	orr.w	r2, r3, #8
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d105      	bne.n	8009e3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	699a      	ldr	r2, [r3, #24]
 8009e34:	4b06      	ldr	r3, [pc, #24]	@ (8009e50 <USB_DevInit+0x2b8>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e48:	b004      	add	sp, #16
 8009e4a:	4770      	bx	lr
 8009e4c:	803c3800 	.word	0x803c3800
 8009e50:	40000004 	.word	0x40000004

08009e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e6e:	d901      	bls.n	8009e74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e01b      	b.n	8009eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	daf2      	bge.n	8009e62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	019b      	lsls	r3, r3, #6
 8009e84:	f043 0220 	orr.w	r2, r3, #32
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e98:	d901      	bls.n	8009e9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e006      	b.n	8009eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	d0f0      	beq.n	8009e8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ed0:	d901      	bls.n	8009ed6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e018      	b.n	8009f08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	daf2      	bge.n	8009ec4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2210      	movs	r2, #16
 8009ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ef4:	d901      	bls.n	8009efa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e006      	b.n	8009f08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b10      	cmp	r3, #16
 8009f04:	d0f0      	beq.n	8009ee8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f34:	4313      	orrs	r3, r2
 8009f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b087      	sub	sp, #28
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 0306 	and.w	r3, r3, #6
 8009f5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009f66:	2300      	movs	r3, #0
 8009f68:	75fb      	strb	r3, [r7, #23]
 8009f6a:	e00a      	b.n	8009f82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d002      	beq.n	8009f78 <USB_GetDevSpeed+0x32>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b06      	cmp	r3, #6
 8009f76:	d102      	bne.n	8009f7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	75fb      	strb	r3, [r7, #23]
 8009f7c:	e001      	b.n	8009f82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009f7e:	230f      	movs	r3, #15
 8009f80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d139      	bne.n	800a020 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	68f9      	ldr	r1, [r7, #12]
 8009fc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d153      	bne.n	800a08c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	791b      	ldrb	r3, [r3, #4]
 8009ffe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a000:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	059b      	lsls	r3, r3, #22
 800a006:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a008:	431a      	orrs	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	0159      	lsls	r1, r3, #5
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	440b      	add	r3, r1
 800a012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a016:	4619      	mov	r1, r3
 800a018:	4b20      	ldr	r3, [pc, #128]	@ (800a09c <USB_ActivateEndpoint+0x10c>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	600b      	str	r3, [r1, #0]
 800a01e:	e035      	b.n	800a08c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f303 	lsl.w	r3, r1, r3
 800a036:	041b      	lsls	r3, r3, #16
 800a038:	68f9      	ldr	r1, [r7, #12]
 800a03a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a03e:	4313      	orrs	r3, r2
 800a040:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d119      	bne.n	800a08c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	791b      	ldrb	r3, [r3, #4]
 800a072:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a074:	430b      	orrs	r3, r1
 800a076:	431a      	orrs	r2, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	0159      	lsls	r1, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	440b      	add	r3, r1
 800a080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a084:	4619      	mov	r1, r3
 800a086:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <USB_ActivateEndpoint+0x10c>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	10008000 	.word	0x10008000

0800a0a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d161      	bne.n	800a180 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0d2:	d11f      	bne.n	800a114 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a10e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a11a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	2101      	movs	r1, #1
 800a126:	fa01 f303 	lsl.w	r3, r1, r3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	43db      	mvns	r3, r3
 800a12e:	68f9      	ldr	r1, [r7, #12]
 800a130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a134:	4013      	ands	r3, r2
 800a136:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	2101      	movs	r1, #1
 800a14a:	fa01 f303 	lsl.w	r3, r1, r3
 800a14e:	b29b      	uxth	r3, r3
 800a150:	43db      	mvns	r3, r3
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a158:	4013      	ands	r3, r2
 800a15a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	0159      	lsls	r1, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	440b      	add	r3, r1
 800a172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a176:	4619      	mov	r1, r3
 800a178:	4b35      	ldr	r3, [pc, #212]	@ (800a250 <USB_DeactivateEndpoint+0x1b0>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	600b      	str	r3, [r1, #0]
 800a17e:	e060      	b.n	800a242 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a192:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a196:	d11f      	bne.n	800a1d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f003 030f 	and.w	r3, r3, #15
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ee:	041b      	lsls	r3, r3, #16
 800a1f0:	43db      	mvns	r3, r3
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a202:	69da      	ldr	r2, [r3, #28]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	2101      	movs	r1, #1
 800a20e:	fa01 f303 	lsl.w	r3, r1, r3
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	43db      	mvns	r3, r3
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a21c:	4013      	ands	r3, r2
 800a21e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	0159      	lsls	r1, r3, #5
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	440b      	add	r3, r1
 800a236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23a:	4619      	mov	r1, r3
 800a23c:	4b05      	ldr	r3, [pc, #20]	@ (800a254 <USB_DeactivateEndpoint+0x1b4>)
 800a23e:	4013      	ands	r3, r2
 800a240:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	ec337800 	.word	0xec337800
 800a254:	eff37800 	.word	0xeff37800

0800a258 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	@ 0x28
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	785b      	ldrb	r3, [r3, #1]
 800a274:	2b01      	cmp	r3, #1
 800a276:	f040 8181 	bne.w	800a57c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d132      	bne.n	800a2e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	0159      	lsls	r1, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	440b      	add	r3, r1
 800a298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29c:	4619      	mov	r1, r3
 800a29e:	4ba5      	ldr	r3, [pc, #660]	@ (800a534 <USB_EPStartXfer+0x2dc>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	0159      	lsls	r1, r3, #5
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	440b      	add	r3, r1
 800a2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4b95      	ldr	r3, [pc, #596]	@ (800a538 <USB_EPStartXfer+0x2e0>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]
 800a2e6:	e092      	b.n	800a40e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f4:	691a      	ldr	r2, [r3, #16]
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	0159      	lsls	r1, r3, #5
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	440b      	add	r3, r1
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a302:	4619      	mov	r1, r3
 800a304:	4b8c      	ldr	r3, [pc, #560]	@ (800a538 <USB_EPStartXfer+0x2e0>)
 800a306:	4013      	ands	r3, r2
 800a308:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	0159      	lsls	r1, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	440b      	add	r3, r1
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	4619      	mov	r1, r3
 800a326:	4b83      	ldr	r3, [pc, #524]	@ (800a534 <USB_EPStartXfer+0x2dc>)
 800a328:	4013      	ands	r3, r2
 800a32a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d11a      	bne.n	800a368 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d903      	bls.n	800a346 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a364:	6113      	str	r3, [r2, #16]
 800a366:	e01b      	b.n	800a3a0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a374:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6919      	ldr	r1, [r3, #16]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	440b      	add	r3, r1
 800a380:	1e59      	subs	r1, r3, #1
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	fbb1 f3f3 	udiv	r3, r1, r3
 800a38a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a38c:	4b6b      	ldr	r3, [pc, #428]	@ (800a53c <USB_EPStartXfer+0x2e4>)
 800a38e:	400b      	ands	r3, r1
 800a390:	69b9      	ldr	r1, [r7, #24]
 800a392:	0148      	lsls	r0, r1, #5
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	4401      	add	r1, r0
 800a398:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a39c:	4313      	orrs	r3, r2
 800a39e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ac:	691a      	ldr	r2, [r3, #16]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3b6:	69b9      	ldr	r1, [r7, #24]
 800a3b8:	0148      	lsls	r0, r1, #5
 800a3ba:	69f9      	ldr	r1, [r7, #28]
 800a3bc:	4401      	add	r1, r0
 800a3be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	791b      	ldrb	r3, [r3, #4]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d11f      	bne.n	800a40e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a3ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	0151      	lsls	r1, r2, #5
 800a400:	69fa      	ldr	r2, [r7, #28]
 800a402:	440a      	add	r2, r1
 800a404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a408:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a40c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d14b      	bne.n	800a4ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d009      	beq.n	800a430 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	791b      	ldrb	r3, [r3, #4]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d128      	bne.n	800a48a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d110      	bne.n	800a46a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69ba      	ldr	r2, [r7, #24]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a462:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	e00f      	b.n	800a48a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	69fa      	ldr	r2, [r7, #28]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a488:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	69fa      	ldr	r2, [r7, #28]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	e16a      	b.n	800a782 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a4ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	791b      	ldrb	r3, [r3, #4]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d015      	beq.n	800a500 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8152 	beq.w	800a782 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	634b      	str	r3, [r1, #52]	@ 0x34
 800a4fe:	e140      	b.n	800a782 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d117      	bne.n	800a540 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a52a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e016      	b.n	800a560 <USB_EPStartXfer+0x308>
 800a532:	bf00      	nop
 800a534:	e007ffff 	.word	0xe007ffff
 800a538:	fff80000 	.word	0xfff80000
 800a53c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a55a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a55e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68d9      	ldr	r1, [r3, #12]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	781a      	ldrb	r2, [r3, #0]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	b298      	uxth	r0, r3
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4603      	mov	r3, r0
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 f9b9 	bl	800a8ec <USB_WritePacket>
 800a57a:	e102      	b.n	800a782 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	0159      	lsls	r1, r3, #5
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	440b      	add	r3, r1
 800a592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a596:	4619      	mov	r1, r3
 800a598:	4b7c      	ldr	r3, [pc, #496]	@ (800a78c <USB_EPStartXfer+0x534>)
 800a59a:	4013      	ands	r3, r2
 800a59c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	0159      	lsls	r1, r3, #5
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4b75      	ldr	r3, [pc, #468]	@ (800a790 <USB_EPStartXfer+0x538>)
 800a5bc:	4013      	ands	r3, r2
 800a5be:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d12f      	bne.n	800a626 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ea:	691a      	ldr	r2, [r3, #16]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5f4:	69b9      	ldr	r1, [r7, #24]
 800a5f6:	0148      	lsls	r0, r1, #5
 800a5f8:	69f9      	ldr	r1, [r7, #28]
 800a5fa:	4401      	add	r1, r0
 800a5fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a600:	4313      	orrs	r3, r2
 800a602:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a61e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a622:	6113      	str	r3, [r2, #16]
 800a624:	e05f      	b.n	800a6e6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d123      	bne.n	800a676 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a644:	69b9      	ldr	r1, [r7, #24]
 800a646:	0148      	lsls	r0, r1, #5
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	4401      	add	r1, r0
 800a64c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	0151      	lsls	r1, r2, #5
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	440a      	add	r2, r1
 800a66a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a672:	6113      	str	r3, [r2, #16]
 800a674:	e037      	b.n	800a6e6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	691a      	ldr	r2, [r3, #16]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	4413      	add	r3, r2
 800a680:	1e5a      	subs	r2, r3, #1
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	8afa      	ldrh	r2, [r7, #22]
 800a692:	fb03 f202 	mul.w	r2, r3, r2
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a6:	691a      	ldr	r2, [r3, #16]
 800a6a8:	8afb      	ldrh	r3, [r7, #22]
 800a6aa:	04d9      	lsls	r1, r3, #19
 800a6ac:	4b39      	ldr	r3, [pc, #228]	@ (800a794 <USB_EPStartXfer+0x53c>)
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	69b9      	ldr	r1, [r7, #24]
 800a6b2:	0148      	lsls	r0, r1, #5
 800a6b4:	69f9      	ldr	r1, [r7, #28]
 800a6b6:	4401      	add	r1, r0
 800a6b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	015a      	lsls	r2, r3, #5
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6cc:	691a      	ldr	r2, [r3, #16]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d6:	69b9      	ldr	r1, [r7, #24]
 800a6d8:	0148      	lsls	r0, r1, #5
 800a6da:	69f9      	ldr	r1, [r7, #28]
 800a6dc:	4401      	add	r1, r0
 800a6de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d10d      	bne.n	800a708 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d009      	beq.n	800a708 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	68d9      	ldr	r1, [r3, #12]
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a704:	460a      	mov	r2, r1
 800a706:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	791b      	ldrb	r3, [r3, #4]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d128      	bne.n	800a762 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d110      	bne.n	800a742 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	e00f      	b.n	800a762 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a75c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a760:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	440a      	add	r2, r1
 800a778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a77c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a780:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	fff80000 	.word	0xfff80000
 800a790:	e007ffff 	.word	0xe007ffff
 800a794:	1ff80000 	.word	0x1ff80000

0800a798 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a798:	b480      	push	{r7}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d14a      	bne.n	800a84c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7ce:	f040 8086 	bne.w	800a8de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	7812      	ldrb	r2, [r2, #0]
 800a7e6:	0151      	lsls	r1, r2, #5
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	440a      	add	r2, r1
 800a7ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a7f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	7812      	ldrb	r2, [r2, #0]
 800a80a:	0151      	lsls	r1, r2, #5
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	440a      	add	r2, r1
 800a810:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a818:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a826:	4293      	cmp	r3, r2
 800a828:	d902      	bls.n	800a830 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	75fb      	strb	r3, [r7, #23]
          break;
 800a82e:	e056      	b.n	800a8de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	015a      	lsls	r2, r3, #5
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	4413      	add	r3, r2
 800a83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a848:	d0e7      	beq.n	800a81a <USB_EPStopXfer+0x82>
 800a84a:	e048      	b.n	800a8de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	4413      	add	r3, r2
 800a856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a864:	d13b      	bne.n	800a8de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	7812      	ldrb	r2, [r2, #0]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a884:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a888:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	7812      	ldrb	r2, [r2, #0]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d902      	bls.n	800a8c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8c2:	e00c      	b.n	800a8de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8dc:	d0e7      	beq.n	800a8ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b089      	sub	sp, #36	@ 0x24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	71fb      	strb	r3, [r7, #7]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a90a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d123      	bne.n	800a95a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a912:	88bb      	ldrh	r3, [r7, #4]
 800a914:	3303      	adds	r3, #3
 800a916:	089b      	lsrs	r3, r3, #2
 800a918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	61bb      	str	r3, [r7, #24]
 800a91e:	e018      	b.n	800a952 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a920:	79fb      	ldrb	r3, [r7, #7]
 800a922:	031a      	lsls	r2, r3, #12
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	4413      	add	r3, r2
 800a928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a92c:	461a      	mov	r2, r3
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	3301      	adds	r3, #1
 800a938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	3301      	adds	r3, #1
 800a944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	3301      	adds	r3, #1
 800a94a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	3301      	adds	r3, #1
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	d3e2      	bcc.n	800a920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3724      	adds	r7, #36	@ 0x24
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a968:	b480      	push	{r7}
 800a96a:	b08b      	sub	sp, #44	@ 0x2c
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	4613      	mov	r3, r2
 800a974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a97e:	88fb      	ldrh	r3, [r7, #6]
 800a980:	089b      	lsrs	r3, r3, #2
 800a982:	b29b      	uxth	r3, r3
 800a984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a98e:	2300      	movs	r3, #0
 800a990:	623b      	str	r3, [r7, #32]
 800a992:	e014      	b.n	800a9be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	623b      	str	r3, [r7, #32]
 800a9be:	6a3a      	ldr	r2, [r7, #32]
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d3e6      	bcc.n	800a994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a9c6:	8bfb      	ldrh	r3, [r7, #30]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01e      	beq.n	800aa0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f107 0310 	add.w	r3, r7, #16
 800a9dc:	6812      	ldr	r2, [r2, #0]
 800a9de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	701a      	strb	r2, [r3, #0]
      i++;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a9fe:	8bfb      	ldrh	r3, [r7, #30]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa04:	8bfb      	ldrh	r3, [r7, #30]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1ea      	bne.n	800a9e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	372c      	adds	r7, #44	@ 0x2c
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d12c      	bne.n	800aa8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	db12      	blt.n	800aa6c <USB_EPSetStall+0x54>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00f      	beq.n	800aa6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aa6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	e02b      	b.n	800aae6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	db12      	blt.n	800aac6 <USB_EPSetStall+0xae>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00f      	beq.n	800aac6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aac4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	0151      	lsls	r1, r2, #5
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	440a      	add	r2, r1
 800aadc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aae4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d128      	bne.n	800ab62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	791b      	ldrb	r3, [r3, #4]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d003      	beq.n	800ab40 <USB_EPClearStall+0x4c>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	791b      	ldrb	r3, [r3, #4]
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d138      	bne.n	800abb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	e027      	b.n	800abb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	0151      	lsls	r1, r2, #5
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	440a      	add	r2, r1
 800ab78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d003      	beq.n	800ab92 <USB_EPClearStall+0x9e>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	791b      	ldrb	r3, [r3, #4]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d10f      	bne.n	800abb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	0151      	lsls	r1, r2, #5
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	440a      	add	r2, r1
 800aba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800abe2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800abf4:	68f9      	ldr	r1, [r7, #12]
 800abf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abfa:	4313      	orrs	r3, r2
 800abfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac3a:	f023 0302 	bic.w	r3, r3, #2
 800ac3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac68:	f023 0303 	bic.w	r3, r3, #3
 800ac6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac7c:	f043 0302 	orr.w	r3, r3, #2
 800ac80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	4013      	ands	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	4013      	ands	r3, r2
 800acd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	0c1b      	lsrs	r3, r3, #16
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	b29b      	uxth	r3, r3
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4013      	ands	r3, r2
 800ad4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b087      	sub	sp, #28
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8a:	01db      	lsls	r3, r3, #7
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4013      	ands	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ada8:	68bb      	ldr	r3, [r7, #8]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f003 0301 	and.w	r3, r3, #1
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adee:	4619      	mov	r1, r3
 800adf0:	4b09      	ldr	r3, [pc, #36]	@ (800ae18 <USB_ActivateSetup+0x44>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	fffff800 	.word	0xfffff800

0800ae1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	460b      	mov	r3, r1
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	333c      	adds	r3, #60	@ 0x3c
 800ae32:	3304      	adds	r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	4a26      	ldr	r2, [pc, #152]	@ (800aed4 <USB_EP0_OutStart+0xb8>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d90a      	bls.n	800ae56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae50:	d101      	bne.n	800ae56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e037      	b.n	800aec6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	2300      	movs	r3, #0
 800ae60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae84:	f043 0318 	orr.w	r3, r3, #24
 800ae88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ae9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d10f      	bne.n	800aec4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeaa:	461a      	mov	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aebe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aec2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	4f54300a 	.word	0x4f54300a

0800aed8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aef0:	d901      	bls.n	800aef6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e01b      	b.n	800af2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	daf2      	bge.n	800aee4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	f043 0201 	orr.w	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3301      	adds	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af1a:	d901      	bls.n	800af20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e006      	b.n	800af2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d0f0      	beq.n	800af0e <USB_CoreReset+0x36>

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
	...

0800af3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af4c:	f005 fac2 	bl	80104d4 <USBD_static_malloc>
 800af50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32b0      	adds	r2, #176	@ 0xb0
 800af62:	2100      	movs	r1, #0
 800af64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af68:	2302      	movs	r3, #2
 800af6a:	e0d4      	b.n	800b116 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af70:	2100      	movs	r1, #0
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f007 fefd 	bl	8012d72 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	32b0      	adds	r2, #176	@ 0xb0
 800af82:	68f9      	ldr	r1, [r7, #12]
 800af84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	32b0      	adds	r2, #176	@ 0xb0
 800af92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	7c1b      	ldrb	r3, [r3, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d138      	bne.n	800b016 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afa4:	4b5e      	ldr	r3, [pc, #376]	@ (800b120 <USBD_CDC_Init+0x1e4>)
 800afa6:	7819      	ldrb	r1, [r3, #0]
 800afa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afac:	2202      	movs	r2, #2
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f005 f96d 	bl	801028e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afb4:	4b5a      	ldr	r3, [pc, #360]	@ (800b120 <USBD_CDC_Init+0x1e4>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f003 020f 	and.w	r2, r3, #15
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	3324      	adds	r3, #36	@ 0x24
 800afca:	2201      	movs	r2, #1
 800afcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afce:	4b55      	ldr	r3, [pc, #340]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800afd0:	7819      	ldrb	r1, [r3, #0]
 800afd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afd6:	2202      	movs	r2, #2
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f005 f958 	bl	801028e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afde:	4b51      	ldr	r3, [pc, #324]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	f003 020f 	and.w	r2, r3, #15
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aff6:	2201      	movs	r2, #1
 800aff8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800affa:	4b4b      	ldr	r3, [pc, #300]	@ (800b128 <USBD_CDC_Init+0x1ec>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	f003 020f 	and.w	r2, r3, #15
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	3326      	adds	r3, #38	@ 0x26
 800b010:	2210      	movs	r2, #16
 800b012:	801a      	strh	r2, [r3, #0]
 800b014:	e035      	b.n	800b082 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b016:	4b42      	ldr	r3, [pc, #264]	@ (800b120 <USBD_CDC_Init+0x1e4>)
 800b018:	7819      	ldrb	r1, [r3, #0]
 800b01a:	2340      	movs	r3, #64	@ 0x40
 800b01c:	2202      	movs	r2, #2
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f005 f935 	bl	801028e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b024:	4b3e      	ldr	r3, [pc, #248]	@ (800b120 <USBD_CDC_Init+0x1e4>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 020f 	and.w	r2, r3, #15
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	3324      	adds	r3, #36	@ 0x24
 800b03a:	2201      	movs	r2, #1
 800b03c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b03e:	4b39      	ldr	r3, [pc, #228]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800b040:	7819      	ldrb	r1, [r3, #0]
 800b042:	2340      	movs	r3, #64	@ 0x40
 800b044:	2202      	movs	r2, #2
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f005 f921 	bl	801028e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b04c:	4b35      	ldr	r3, [pc, #212]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	f003 020f 	and.w	r2, r3, #15
 800b054:	6879      	ldr	r1, [r7, #4]
 800b056:	4613      	mov	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	440b      	add	r3, r1
 800b060:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b064:	2201      	movs	r2, #1
 800b066:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b068:	4b2f      	ldr	r3, [pc, #188]	@ (800b128 <USBD_CDC_Init+0x1ec>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 020f 	and.w	r2, r3, #15
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	3326      	adds	r3, #38	@ 0x26
 800b07e:	2210      	movs	r2, #16
 800b080:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b082:	4b29      	ldr	r3, [pc, #164]	@ (800b128 <USBD_CDC_Init+0x1ec>)
 800b084:	7819      	ldrb	r1, [r3, #0]
 800b086:	2308      	movs	r3, #8
 800b088:	2203      	movs	r2, #3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f005 f8ff 	bl	801028e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b090:	4b25      	ldr	r3, [pc, #148]	@ (800b128 <USBD_CDC_Init+0x1ec>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 020f 	and.w	r2, r3, #15
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	4613      	mov	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	3324      	adds	r3, #36	@ 0x24
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	33b0      	adds	r3, #176	@ 0xb0
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	e018      	b.n	800b116 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800b0ee:	7819      	ldrb	r1, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f005 f9b6 	bl	801046c <USBD_LL_PrepareReceive>
 800b100:	e008      	b.n	800b114 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b102:	4b08      	ldr	r3, [pc, #32]	@ (800b124 <USBD_CDC_Init+0x1e8>)
 800b104:	7819      	ldrb	r1, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b10c:	2340      	movs	r3, #64	@ 0x40
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f005 f9ac 	bl	801046c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24000097 	.word	0x24000097
 800b124:	24000098 	.word	0x24000098
 800b128:	24000099 	.word	0x24000099

0800b12c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b138:	4b3a      	ldr	r3, [pc, #232]	@ (800b224 <USBD_CDC_DeInit+0xf8>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f005 f8cb 	bl	80102da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b144:	4b37      	ldr	r3, [pc, #220]	@ (800b224 <USBD_CDC_DeInit+0xf8>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 020f 	and.w	r2, r3, #15
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	440b      	add	r3, r1
 800b158:	3324      	adds	r3, #36	@ 0x24
 800b15a:	2200      	movs	r2, #0
 800b15c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b15e:	4b32      	ldr	r3, [pc, #200]	@ (800b228 <USBD_CDC_DeInit+0xfc>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f005 f8b8 	bl	80102da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b16a:	4b2f      	ldr	r3, [pc, #188]	@ (800b228 <USBD_CDC_DeInit+0xfc>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	f003 020f 	and.w	r2, r3, #15
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b182:	2200      	movs	r2, #0
 800b184:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b186:	4b29      	ldr	r3, [pc, #164]	@ (800b22c <USBD_CDC_DeInit+0x100>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f005 f8a4 	bl	80102da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b192:	4b26      	ldr	r3, [pc, #152]	@ (800b22c <USBD_CDC_DeInit+0x100>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f003 020f 	and.w	r2, r3, #15
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	4613      	mov	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	4413      	add	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	440b      	add	r3, r1
 800b1a6:	3324      	adds	r3, #36	@ 0x24
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1ac:	4b1f      	ldr	r3, [pc, #124]	@ (800b22c <USBD_CDC_DeInit+0x100>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	f003 020f 	and.w	r2, r3, #15
 800b1b4:	6879      	ldr	r1, [r7, #4]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	440b      	add	r3, r1
 800b1c0:	3326      	adds	r3, #38	@ 0x26
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	32b0      	adds	r2, #176	@ 0xb0
 800b1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d01f      	beq.n	800b218 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	33b0      	adds	r3, #176	@ 0xb0
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	32b0      	adds	r2, #176	@ 0xb0
 800b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f005 f978 	bl	80104f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32b0      	adds	r2, #176	@ 0xb0
 800b20a:	2100      	movs	r1, #0
 800b20c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	24000097 	.word	0x24000097
 800b228:	24000098 	.word	0x24000098
 800b22c:	24000099 	.word	0x24000099

0800b230 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	32b0      	adds	r2, #176	@ 0xb0
 800b244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b248:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e0bf      	b.n	800b3e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d050      	beq.n	800b30e <USBD_CDC_Setup+0xde>
 800b26c:	2b20      	cmp	r3, #32
 800b26e:	f040 80af 	bne.w	800b3d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	88db      	ldrh	r3, [r3, #6]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d03a      	beq.n	800b2f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	da1b      	bge.n	800b2bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	33b0      	adds	r3, #176	@ 0xb0
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b29a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	88d2      	ldrh	r2, [r2, #6]
 800b2a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	88db      	ldrh	r3, [r3, #6]
 800b2a6:	2b07      	cmp	r3, #7
 800b2a8:	bf28      	it	cs
 800b2aa:	2307      	movcs	r3, #7
 800b2ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	89fa      	ldrh	r2, [r7, #14]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f001 fd7d 	bl	800cdb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2ba:	e090      	b.n	800b3de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	785a      	ldrb	r2, [r3, #1]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	88db      	ldrh	r3, [r3, #6]
 800b2ca:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2cc:	d803      	bhi.n	800b2d6 <USBD_CDC_Setup+0xa6>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	88db      	ldrh	r3, [r3, #6]
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	e000      	b.n	800b2d8 <USBD_CDC_Setup+0xa8>
 800b2d6:	2240      	movs	r2, #64	@ 0x40
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2de:	6939      	ldr	r1, [r7, #16]
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f001 fd8f 	bl	800ce0c <USBD_CtlPrepareRx>
      break;
 800b2ee:	e076      	b.n	800b3de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	33b0      	adds	r3, #176	@ 0xb0
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	7850      	ldrb	r0, [r2, #1]
 800b306:	2200      	movs	r2, #0
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	4798      	blx	r3
      break;
 800b30c:	e067      	b.n	800b3de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	2b0b      	cmp	r3, #11
 800b314:	d851      	bhi.n	800b3ba <USBD_CDC_Setup+0x18a>
 800b316:	a201      	add	r2, pc, #4	@ (adr r2, 800b31c <USBD_CDC_Setup+0xec>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b34d 	.word	0x0800b34d
 800b320:	0800b3c9 	.word	0x0800b3c9
 800b324:	0800b3bb 	.word	0x0800b3bb
 800b328:	0800b3bb 	.word	0x0800b3bb
 800b32c:	0800b3bb 	.word	0x0800b3bb
 800b330:	0800b3bb 	.word	0x0800b3bb
 800b334:	0800b3bb 	.word	0x0800b3bb
 800b338:	0800b3bb 	.word	0x0800b3bb
 800b33c:	0800b3bb 	.word	0x0800b3bb
 800b340:	0800b3bb 	.word	0x0800b3bb
 800b344:	0800b377 	.word	0x0800b377
 800b348:	0800b3a1 	.word	0x0800b3a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b03      	cmp	r3, #3
 800b356:	d107      	bne.n	800b368 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b358:	f107 030a 	add.w	r3, r7, #10
 800b35c:	2202      	movs	r2, #2
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 fd27 	bl	800cdb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b366:	e032      	b.n	800b3ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fca5 	bl	800ccba <USBD_CtlError>
            ret = USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	75fb      	strb	r3, [r7, #23]
          break;
 800b374:	e02b      	b.n	800b3ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d107      	bne.n	800b392 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b382:	f107 030d 	add.w	r3, r7, #13
 800b386:	2201      	movs	r2, #1
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fd12 	bl	800cdb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b390:	e01d      	b.n	800b3ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fc90 	bl	800ccba <USBD_CtlError>
            ret = USBD_FAIL;
 800b39a:	2303      	movs	r3, #3
 800b39c:	75fb      	strb	r3, [r7, #23]
          break;
 800b39e:	e016      	b.n	800b3ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d00f      	beq.n	800b3cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fc83 	bl	800ccba <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b4:	2303      	movs	r3, #3
 800b3b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3b8:	e008      	b.n	800b3cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f001 fc7c 	bl	800ccba <USBD_CtlError>
          ret = USBD_FAIL;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b3c6:	e002      	b.n	800b3ce <USBD_CDC_Setup+0x19e>
          break;
 800b3c8:	bf00      	nop
 800b3ca:	e008      	b.n	800b3de <USBD_CDC_Setup+0x1ae>
          break;
 800b3cc:	bf00      	nop
      }
      break;
 800b3ce:	e006      	b.n	800b3de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fc71 	bl	800ccba <USBD_CtlError>
      ret = USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	75fb      	strb	r3, [r7, #23]
      break;
 800b3dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32b0      	adds	r2, #176	@ 0xb0
 800b406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b40e:	2303      	movs	r3, #3
 800b410:	e065      	b.n	800b4de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	32b0      	adds	r2, #176	@ 0xb0
 800b41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b420:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b422:	78fb      	ldrb	r3, [r7, #3]
 800b424:	f003 020f 	and.w	r2, r3, #15
 800b428:	6879      	ldr	r1, [r7, #4]
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	440b      	add	r3, r1
 800b434:	3318      	adds	r3, #24
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d02f      	beq.n	800b49c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	f003 020f 	and.w	r2, r3, #15
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	3318      	adds	r3, #24
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	f003 010f 	and.w	r1, r3, #15
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	460b      	mov	r3, r1
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	440b      	add	r3, r1
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4403      	add	r3, r0
 800b464:	331c      	adds	r3, #28
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	fbb2 f1f3 	udiv	r1, r2, r3
 800b46c:	fb01 f303 	mul.w	r3, r1, r3
 800b470:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b472:	2b00      	cmp	r3, #0
 800b474:	d112      	bne.n	800b49c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b476:	78fb      	ldrb	r3, [r7, #3]
 800b478:	f003 020f 	and.w	r2, r3, #15
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	3318      	adds	r3, #24
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b48e:	78f9      	ldrb	r1, [r7, #3]
 800b490:	2300      	movs	r3, #0
 800b492:	2200      	movs	r2, #0
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f004 ffc8 	bl	801042a <USBD_LL_Transmit>
 800b49a:	e01f      	b.n	800b4dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	33b0      	adds	r3, #176	@ 0xb0
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d010      	beq.n	800b4dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	33b0      	adds	r3, #176	@ 0xb0
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4d8:	78fa      	ldrb	r2, [r7, #3]
 800b4da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	32b0      	adds	r2, #176	@ 0xb0
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	32b0      	adds	r2, #176	@ 0xb0
 800b50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b514:	2303      	movs	r3, #3
 800b516:	e01a      	b.n	800b54e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f004 ffc6 	bl	80104ae <USBD_LL_GetRxDataSize>
 800b522:	4602      	mov	r2, r0
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	33b0      	adds	r3, #176	@ 0xb0
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b548:	4611      	mov	r1, r2
 800b54a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	32b0      	adds	r2, #176	@ 0xb0
 800b568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b574:	2303      	movs	r3, #3
 800b576:	e024      	b.n	800b5c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	33b0      	adds	r3, #176	@ 0xb0
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d019      	beq.n	800b5c0 <USBD_CDC_EP0_RxReady+0x6a>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b592:	2bff      	cmp	r3, #255	@ 0xff
 800b594:	d014      	beq.n	800b5c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	33b0      	adds	r3, #176	@ 0xb0
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	22ff      	movs	r2, #255	@ 0xff
 800b5bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5d4:	2182      	movs	r1, #130	@ 0x82
 800b5d6:	4818      	ldr	r0, [pc, #96]	@ (800b638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5d8:	f000 fd0f 	bl	800bffa <USBD_GetEpDesc>
 800b5dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5de:	2101      	movs	r1, #1
 800b5e0:	4815      	ldr	r0, [pc, #84]	@ (800b638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5e2:	f000 fd0a 	bl	800bffa <USBD_GetEpDesc>
 800b5e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5e8:	2181      	movs	r1, #129	@ 0x81
 800b5ea:	4813      	ldr	r0, [pc, #76]	@ (800b638 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5ec:	f000 fd05 	bl	800bffa <USBD_GetEpDesc>
 800b5f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	2210      	movs	r2, #16
 800b5fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d006      	beq.n	800b612 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2200      	movs	r2, #0
 800b608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b60c:	711a      	strb	r2, [r3, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d006      	beq.n	800b626 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b620:	711a      	strb	r2, [r3, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2243      	movs	r2, #67	@ 0x43
 800b62a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b62c:	4b02      	ldr	r3, [pc, #8]	@ (800b638 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	24000054 	.word	0x24000054

0800b63c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b644:	2182      	movs	r1, #130	@ 0x82
 800b646:	4818      	ldr	r0, [pc, #96]	@ (800b6a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b648:	f000 fcd7 	bl	800bffa <USBD_GetEpDesc>
 800b64c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b64e:	2101      	movs	r1, #1
 800b650:	4815      	ldr	r0, [pc, #84]	@ (800b6a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b652:	f000 fcd2 	bl	800bffa <USBD_GetEpDesc>
 800b656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b658:	2181      	movs	r1, #129	@ 0x81
 800b65a:	4813      	ldr	r0, [pc, #76]	@ (800b6a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b65c:	f000 fccd 	bl	800bffa <USBD_GetEpDesc>
 800b660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2210      	movs	r2, #16
 800b66c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d006      	beq.n	800b682 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	2200      	movs	r2, #0
 800b678:	711a      	strb	r2, [r3, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f042 0202 	orr.w	r2, r2, #2
 800b680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d006      	beq.n	800b696 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	711a      	strb	r2, [r3, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f042 0202 	orr.w	r2, r2, #2
 800b694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2243      	movs	r2, #67	@ 0x43
 800b69a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b69c:	4b02      	ldr	r3, [pc, #8]	@ (800b6a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	24000054 	.word	0x24000054

0800b6ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6b4:	2182      	movs	r1, #130	@ 0x82
 800b6b6:	4818      	ldr	r0, [pc, #96]	@ (800b718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6b8:	f000 fc9f 	bl	800bffa <USBD_GetEpDesc>
 800b6bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4815      	ldr	r0, [pc, #84]	@ (800b718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6c2:	f000 fc9a 	bl	800bffa <USBD_GetEpDesc>
 800b6c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6c8:	2181      	movs	r1, #129	@ 0x81
 800b6ca:	4813      	ldr	r0, [pc, #76]	@ (800b718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6cc:	f000 fc95 	bl	800bffa <USBD_GetEpDesc>
 800b6d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2210      	movs	r2, #16
 800b6dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d006      	beq.n	800b6f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ec:	711a      	strb	r2, [r3, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d006      	beq.n	800b706 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b700:	711a      	strb	r2, [r3, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2243      	movs	r2, #67	@ 0x43
 800b70a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b70c:	4b02      	ldr	r3, [pc, #8]	@ (800b718 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	24000054 	.word	0x24000054

0800b71c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	220a      	movs	r2, #10
 800b728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b72a:	4b03      	ldr	r3, [pc, #12]	@ (800b738 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	24000010 	.word	0x24000010

0800b73c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e009      	b.n	800b764 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	33b0      	adds	r3, #176	@ 0xb0
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	32b0      	adds	r2, #176	@ 0xb0
 800b786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b792:	2303      	movs	r3, #3
 800b794:	e008      	b.n	800b7a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	371c      	adds	r7, #28
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	32b0      	adds	r2, #176	@ 0xb0
 800b7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e004      	b.n	800b7e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	32b0      	adds	r2, #176	@ 0xb0
 800b802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b806:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32b0      	adds	r2, #176	@ 0xb0
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e018      	b.n	800b850 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	7c1b      	ldrb	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10a      	bne.n	800b83c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b826:	4b0c      	ldr	r3, [pc, #48]	@ (800b858 <USBD_CDC_ReceivePacket+0x68>)
 800b828:	7819      	ldrb	r1, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f004 fe19 	bl	801046c <USBD_LL_PrepareReceive>
 800b83a:	e008      	b.n	800b84e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b83c:	4b06      	ldr	r3, [pc, #24]	@ (800b858 <USBD_CDC_ReceivePacket+0x68>)
 800b83e:	7819      	ldrb	r1, [r3, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b846:	2340      	movs	r3, #64	@ 0x40
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f004 fe0f 	bl	801046c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	24000098 	.word	0x24000098

0800b85c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b870:	2303      	movs	r3, #3
 800b872:	e01f      	b.n	800b8b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2200      	movs	r2, #0
 800b888:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d003      	beq.n	800b89a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	79fa      	ldrb	r2, [r7, #7]
 800b8a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f004 fc85 	bl	80101b8 <USBD_LL_Init>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e025      	b.n	800b920 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	32ae      	adds	r2, #174	@ 0xae
 800b8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00f      	beq.n	800b910 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	32ae      	adds	r2, #174	@ 0xae
 800b8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b900:	f107 020e 	add.w	r2, r7, #14
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
 800b908:	4602      	mov	r2, r0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f004 fc91 	bl	8010258 <USBD_LL_Start>
 800b936:	4603      	mov	r3, r0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	78fa      	ldrb	r2, [r7, #3]
 800b97a:	4611      	mov	r1, r2
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	4798      	blx	r3
 800b980:	4603      	mov	r3, r0
 800b982:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b984:	7bfb      	ldrb	r3, [r7, #15]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	78fa      	ldrb	r2, [r7, #3]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f001 f936 	bl	800cc46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9f6:	f003 031f 	and.w	r3, r3, #31
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d01a      	beq.n	800ba34 <USBD_LL_SetupStage+0x72>
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d822      	bhi.n	800ba48 <USBD_LL_SetupStage+0x86>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <USBD_LL_SetupStage+0x4a>
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d00a      	beq.n	800ba20 <USBD_LL_SetupStage+0x5e>
 800ba0a:	e01d      	b.n	800ba48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fb63 	bl	800c0e0 <USBD_StdDevReq>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1e:	e020      	b.n	800ba62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fbcb 	bl	800c1c4 <USBD_StdItfReq>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
      break;
 800ba32:	e016      	b.n	800ba62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fc2d 	bl	800c29c <USBD_StdEPReq>
 800ba42:	4603      	mov	r3, r0
 800ba44:	73fb      	strb	r3, [r7, #15]
      break;
 800ba46:	e00c      	b.n	800ba62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f004 fc5e 	bl	8010318 <USBD_LL_StallEP>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba60:	bf00      	nop
  }

  return ret;
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	460b      	mov	r3, r1
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba7e:	7afb      	ldrb	r3, [r7, #11]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d16e      	bne.n	800bb62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	f040 8098 	bne.w	800bbc8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d913      	bls.n	800bacc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	1ad2      	subs	r2, r2, r3
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	4293      	cmp	r3, r2
 800babc:	bf28      	it	cs
 800babe:	4613      	movcs	r3, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f001 f9be 	bl	800ce46 <USBD_CtlContinueRx>
 800baca:	e07d      	b.n	800bbc8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bad2:	f003 031f 	and.w	r3, r3, #31
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d014      	beq.n	800bb04 <USBD_LL_DataOutStage+0x98>
 800bada:	2b02      	cmp	r3, #2
 800badc:	d81d      	bhi.n	800bb1a <USBD_LL_DataOutStage+0xae>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <USBD_LL_DataOutStage+0x7c>
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d003      	beq.n	800baee <USBD_LL_DataOutStage+0x82>
 800bae6:	e018      	b.n	800bb1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	75bb      	strb	r3, [r7, #22]
            break;
 800baec:	e018      	b.n	800bb20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	4619      	mov	r1, r3
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fa64 	bl	800bfc6 <USBD_CoreFindIF>
 800bafe:	4603      	mov	r3, r0
 800bb00:	75bb      	strb	r3, [r7, #22]
            break;
 800bb02:	e00d      	b.n	800bb20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 fa66 	bl	800bfe0 <USBD_CoreFindEP>
 800bb14:	4603      	mov	r3, r0
 800bb16:	75bb      	strb	r3, [r7, #22]
            break;
 800bb18:	e002      	b.n	800bb20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	75bb      	strb	r3, [r7, #22]
            break;
 800bb1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb20:	7dbb      	ldrb	r3, [r7, #22]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d119      	bne.n	800bb5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d113      	bne.n	800bb5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb32:	7dba      	ldrb	r2, [r7, #22]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	32ae      	adds	r2, #174	@ 0xae
 800bb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00b      	beq.n	800bb5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb42:	7dba      	ldrb	r2, [r7, #22]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb4a:	7dba      	ldrb	r2, [r7, #22]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	32ae      	adds	r2, #174	@ 0xae
 800bb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f001 f984 	bl	800ce68 <USBD_CtlSendStatus>
 800bb60:	e032      	b.n	800bbc8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 fa37 	bl	800bfe0 <USBD_CoreFindEP>
 800bb72:	4603      	mov	r3, r0
 800bb74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb76:	7dbb      	ldrb	r3, [r7, #22]
 800bb78:	2bff      	cmp	r3, #255	@ 0xff
 800bb7a:	d025      	beq.n	800bbc8 <USBD_LL_DataOutStage+0x15c>
 800bb7c:	7dbb      	ldrb	r3, [r7, #22]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d122      	bne.n	800bbc8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d117      	bne.n	800bbbe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb8e:	7dba      	ldrb	r2, [r7, #22]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	32ae      	adds	r2, #174	@ 0xae
 800bb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00f      	beq.n	800bbbe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb9e:	7dba      	ldrb	r2, [r7, #22]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bba6:	7dba      	ldrb	r2, [r7, #22]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	32ae      	adds	r2, #174	@ 0xae
 800bbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	7afa      	ldrb	r2, [r7, #11]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	e000      	b.n	800bbca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b086      	sub	sp, #24
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d16f      	bne.n	800bcc6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3314      	adds	r3, #20
 800bbea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d15a      	bne.n	800bcac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	689a      	ldr	r2, [r3, #8]
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d914      	bls.n	800bc2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	689a      	ldr	r2, [r3, #8]
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	1ad2      	subs	r2, r2, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	461a      	mov	r2, r3
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f001 f8e6 	bl	800cdea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2200      	movs	r2, #0
 800bc22:	2100      	movs	r1, #0
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f004 fc21 	bl	801046c <USBD_LL_PrepareReceive>
 800bc2a:	e03f      	b.n	800bcac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d11c      	bne.n	800bc72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d316      	bcc.n	800bc72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d20f      	bcs.n	800bc72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc52:	2200      	movs	r2, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f001 f8c7 	bl	800cdea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc64:	2300      	movs	r3, #0
 800bc66:	2200      	movs	r2, #0
 800bc68:	2100      	movs	r1, #0
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f004 fbfe 	bl	801046c <USBD_LL_PrepareReceive>
 800bc70:	e01c      	b.n	800bcac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d10f      	bne.n	800bc9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc9e:	2180      	movs	r1, #128	@ 0x80
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f004 fb39 	bl	8010318 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f001 f8f1 	bl	800ce8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d03a      	beq.n	800bd2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f7ff fe42 	bl	800b940 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bcc4:	e032      	b.n	800bd2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bcc6:	7afb      	ldrb	r3, [r7, #11]
 800bcc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 f985 	bl	800bfe0 <USBD_CoreFindEP>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2bff      	cmp	r3, #255	@ 0xff
 800bcde:	d025      	beq.n	800bd2c <USBD_LL_DataInStage+0x15a>
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d122      	bne.n	800bd2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d11c      	bne.n	800bd2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcf2:	7dfa      	ldrb	r2, [r7, #23]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	32ae      	adds	r2, #174	@ 0xae
 800bcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d014      	beq.n	800bd2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd02:	7dfa      	ldrb	r2, [r7, #23]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd0a:	7dfa      	ldrb	r2, [r7, #23]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	32ae      	adds	r2, #174	@ 0xae
 800bd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	7afa      	ldrb	r2, [r7, #11]
 800bd18:	4611      	mov	r1, r2
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	4798      	blx	r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd22:	7dbb      	ldrb	r3, [r7, #22]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd28:	7dbb      	ldrb	r3, [r7, #22]
 800bd2a:	e000      	b.n	800bd2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d014      	beq.n	800bd9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00e      	beq.n	800bd9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6852      	ldr	r2, [r2, #4]
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4798      	blx	r3
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd9c:	2340      	movs	r3, #64	@ 0x40
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2100      	movs	r1, #0
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f004 fa73 	bl	801028e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2240      	movs	r2, #64	@ 0x40
 800bdb4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdb8:	2340      	movs	r3, #64	@ 0x40
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2180      	movs	r1, #128	@ 0x80
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f004 fa65 	bl	801028e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2240      	movs	r2, #64	@ 0x40
 800bdce:	621a      	str	r2, [r3, #32]

  return ret;
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	78fa      	ldrb	r2, [r7, #3]
 800bdea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b083      	sub	sp, #12
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d006      	beq.n	800be1c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be14:	b2da      	uxtb	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2204      	movs	r2, #4
 800be20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b04      	cmp	r3, #4
 800be44:	d106      	bne.n	800be54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b082      	sub	sp, #8
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b03      	cmp	r3, #3
 800be74:	d110      	bne.n	800be98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d005      	beq.n	800be98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be92:	69db      	ldr	r3, [r3, #28]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	460b      	mov	r3, r1
 800beac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	32ae      	adds	r2, #174	@ 0xae
 800beb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e01c      	b.n	800befe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b03      	cmp	r3, #3
 800bece:	d115      	bne.n	800befc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32ae      	adds	r2, #174	@ 0xae
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	32ae      	adds	r2, #174	@ 0xae
 800beee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef2:	6a1b      	ldr	r3, [r3, #32]
 800bef4:	78fa      	ldrb	r2, [r7, #3]
 800bef6:	4611      	mov	r1, r2
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	32ae      	adds	r2, #174	@ 0xae
 800bf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e01c      	b.n	800bf62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d115      	bne.n	800bf60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	32ae      	adds	r2, #174	@ 0xae
 800bf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00b      	beq.n	800bf60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	32ae      	adds	r2, #174	@ 0xae
 800bf52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf58:	78fa      	ldrb	r2, [r7, #3]
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b083      	sub	sp, #12
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00e      	beq.n	800bfbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	6852      	ldr	r2, [r2, #4]
 800bfaa:	b2d2      	uxtb	r2, r2
 800bfac:	4611      	mov	r1, r2
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	4798      	blx	r3
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr

0800bffa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	460b      	mov	r3, r1
 800c004:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	885b      	ldrh	r3, [r3, #2]
 800c016:	b29b      	uxth	r3, r3
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d91f      	bls.n	800c060 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c026:	e013      	b.n	800c050 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c028:	f107 030a 	add.w	r3, r7, #10
 800c02c:	4619      	mov	r1, r3
 800c02e:	6978      	ldr	r0, [r7, #20]
 800c030:	f000 f81b 	bl	800c06a <USBD_GetNextDesc>
 800c034:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	d108      	bne.n	800c050 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	789b      	ldrb	r3, [r3, #2]
 800c046:	78fa      	ldrb	r2, [r7, #3]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d008      	beq.n	800c05e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	885b      	ldrh	r3, [r3, #2]
 800c054:	b29a      	uxth	r2, r3
 800c056:	897b      	ldrh	r3, [r7, #10]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d8e5      	bhi.n	800c028 <USBD_GetEpDesc+0x2e>
 800c05c:	e000      	b.n	800c060 <USBD_GetEpDesc+0x66>
          break;
 800c05e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c060:	693b      	ldr	r3, [r7, #16]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b085      	sub	sp, #20
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	7812      	ldrb	r2, [r2, #0]
 800c080:	4413      	add	r3, r2
 800c082:	b29a      	uxth	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4413      	add	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c094:	68fb      	ldr	r3, [r7, #12]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b087      	sub	sp, #28
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0c0:	8a3b      	ldrh	r3, [r7, #16]
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	b21a      	sxth	r2, r3
 800c0c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	b21b      	sxth	r3, r3
 800c0ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0d0:	89fb      	ldrh	r3, [r7, #14]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	371c      	adds	r7, #28
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0f6:	2b40      	cmp	r3, #64	@ 0x40
 800c0f8:	d005      	beq.n	800c106 <USBD_StdDevReq+0x26>
 800c0fa:	2b40      	cmp	r3, #64	@ 0x40
 800c0fc:	d857      	bhi.n	800c1ae <USBD_StdDevReq+0xce>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00f      	beq.n	800c122 <USBD_StdDevReq+0x42>
 800c102:	2b20      	cmp	r3, #32
 800c104:	d153      	bne.n	800c1ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	32ae      	adds	r2, #174	@ 0xae
 800c110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	4798      	blx	r3
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]
      break;
 800c120:	e04a      	b.n	800c1b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	785b      	ldrb	r3, [r3, #1]
 800c126:	2b09      	cmp	r3, #9
 800c128:	d83b      	bhi.n	800c1a2 <USBD_StdDevReq+0xc2>
 800c12a:	a201      	add	r2, pc, #4	@ (adr r2, 800c130 <USBD_StdDevReq+0x50>)
 800c12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c130:	0800c185 	.word	0x0800c185
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c1a3 	.word	0x0800c1a3
 800c13c:	0800c18f 	.word	0x0800c18f
 800c140:	0800c1a3 	.word	0x0800c1a3
 800c144:	0800c163 	.word	0x0800c163
 800c148:	0800c159 	.word	0x0800c159
 800c14c:	0800c1a3 	.word	0x0800c1a3
 800c150:	0800c17b 	.word	0x0800c17b
 800c154:	0800c16d 	.word	0x0800c16d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa3c 	bl	800c5d8 <USBD_GetDescriptor>
          break;
 800c160:	e024      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fbcb 	bl	800c900 <USBD_SetAddress>
          break;
 800c16a:	e01f      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fc0a 	bl	800c988 <USBD_SetConfig>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
          break;
 800c178:	e018      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fcad 	bl	800cadc <USBD_GetConfig>
          break;
 800c182:	e013      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fcde 	bl	800cb48 <USBD_GetStatus>
          break;
 800c18c:	e00e      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fd0d 	bl	800cbb0 <USBD_SetFeature>
          break;
 800c196:	e009      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fd31 	bl	800cc02 <USBD_ClrFeature>
          break;
 800c1a0:	e004      	b.n	800c1ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fd88 	bl	800ccba <USBD_CtlError>
          break;
 800c1aa:	bf00      	nop
      }
      break;
 800c1ac:	e004      	b.n	800c1b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fd82 	bl	800ccba <USBD_CtlError>
      break;
 800c1b6:	bf00      	nop
  }

  return ret;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop

0800c1c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1da:	2b40      	cmp	r3, #64	@ 0x40
 800c1dc:	d005      	beq.n	800c1ea <USBD_StdItfReq+0x26>
 800c1de:	2b40      	cmp	r3, #64	@ 0x40
 800c1e0:	d852      	bhi.n	800c288 <USBD_StdItfReq+0xc4>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d001      	beq.n	800c1ea <USBD_StdItfReq+0x26>
 800c1e6:	2b20      	cmp	r3, #32
 800c1e8:	d14e      	bne.n	800c288 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d840      	bhi.n	800c27a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	889b      	ldrh	r3, [r3, #4]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d836      	bhi.n	800c270 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	889b      	ldrh	r3, [r3, #4]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7ff fedb 	bl	800bfc6 <USBD_CoreFindIF>
 800c210:	4603      	mov	r3, r0
 800c212:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2bff      	cmp	r3, #255	@ 0xff
 800c218:	d01d      	beq.n	800c256 <USBD_StdItfReq+0x92>
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d11a      	bne.n	800c256 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c220:	7bba      	ldrb	r2, [r7, #14]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32ae      	adds	r2, #174	@ 0xae
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00f      	beq.n	800c250 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c230:	7bba      	ldrb	r2, [r7, #14]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c238:	7bba      	ldrb	r2, [r7, #14]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	32ae      	adds	r2, #174	@ 0xae
 800c23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	4798      	blx	r3
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c24e:	e004      	b.n	800c25a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c250:	2303      	movs	r3, #3
 800c252:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c254:	e001      	b.n	800c25a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c256:	2303      	movs	r3, #3
 800c258:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	88db      	ldrh	r3, [r3, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d110      	bne.n	800c284 <USBD_StdItfReq+0xc0>
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10d      	bne.n	800c284 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fdfd 	bl	800ce68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c26e:	e009      	b.n	800c284 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fd21 	bl	800ccba <USBD_CtlError>
          break;
 800c278:	e004      	b.n	800c284 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fd1c 	bl	800ccba <USBD_CtlError>
          break;
 800c282:	e000      	b.n	800c286 <USBD_StdItfReq+0xc2>
          break;
 800c284:	bf00      	nop
      }
      break;
 800c286:	e004      	b.n	800c292 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fd15 	bl	800ccba <USBD_CtlError>
      break;
 800c290:	bf00      	nop
  }

  return ret;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	889b      	ldrh	r3, [r3, #4]
 800c2ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2b8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ba:	d007      	beq.n	800c2cc <USBD_StdEPReq+0x30>
 800c2bc:	2b40      	cmp	r3, #64	@ 0x40
 800c2be:	f200 817f 	bhi.w	800c5c0 <USBD_StdEPReq+0x324>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d02a      	beq.n	800c31c <USBD_StdEPReq+0x80>
 800c2c6:	2b20      	cmp	r3, #32
 800c2c8:	f040 817a 	bne.w	800c5c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff fe85 	bl	800bfe0 <USBD_CoreFindEP>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2da:	7b7b      	ldrb	r3, [r7, #13]
 800c2dc:	2bff      	cmp	r3, #255	@ 0xff
 800c2de:	f000 8174 	beq.w	800c5ca <USBD_StdEPReq+0x32e>
 800c2e2:	7b7b      	ldrb	r3, [r7, #13]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 8170 	bne.w	800c5ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2ea:	7b7a      	ldrb	r2, [r7, #13]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2f2:	7b7a      	ldrb	r2, [r7, #13]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	32ae      	adds	r2, #174	@ 0xae
 800c2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 8163 	beq.w	800c5ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c304:	7b7a      	ldrb	r2, [r7, #13]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c31a:	e156      	b.n	800c5ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	785b      	ldrb	r3, [r3, #1]
 800c320:	2b03      	cmp	r3, #3
 800c322:	d008      	beq.n	800c336 <USBD_StdEPReq+0x9a>
 800c324:	2b03      	cmp	r3, #3
 800c326:	f300 8145 	bgt.w	800c5b4 <USBD_StdEPReq+0x318>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 809b 	beq.w	800c466 <USBD_StdEPReq+0x1ca>
 800c330:	2b01      	cmp	r3, #1
 800c332:	d03c      	beq.n	800c3ae <USBD_StdEPReq+0x112>
 800c334:	e13e      	b.n	800c5b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d002      	beq.n	800c348 <USBD_StdEPReq+0xac>
 800c342:	2b03      	cmp	r3, #3
 800c344:	d016      	beq.n	800c374 <USBD_StdEPReq+0xd8>
 800c346:	e02c      	b.n	800c3a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00d      	beq.n	800c36a <USBD_StdEPReq+0xce>
 800c34e:	7bbb      	ldrb	r3, [r7, #14]
 800c350:	2b80      	cmp	r3, #128	@ 0x80
 800c352:	d00a      	beq.n	800c36a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f003 ffdd 	bl	8010318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c35e:	2180      	movs	r1, #128	@ 0x80
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f003 ffd9 	bl	8010318 <USBD_LL_StallEP>
 800c366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c368:	e020      	b.n	800c3ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fca4 	bl	800ccba <USBD_CtlError>
              break;
 800c372:	e01b      	b.n	800c3ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	885b      	ldrh	r3, [r3, #2]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10e      	bne.n	800c39a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00b      	beq.n	800c39a <USBD_StdEPReq+0xfe>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b80      	cmp	r3, #128	@ 0x80
 800c386:	d008      	beq.n	800c39a <USBD_StdEPReq+0xfe>
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	88db      	ldrh	r3, [r3, #6]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d104      	bne.n	800c39a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f003 ffbf 	bl	8010318 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fd64 	bl	800ce68 <USBD_CtlSendStatus>

              break;
 800c3a0:	e004      	b.n	800c3ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fc88 	bl	800ccba <USBD_CtlError>
              break;
 800c3aa:	bf00      	nop
          }
          break;
 800c3ac:	e107      	b.n	800c5be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d002      	beq.n	800c3c0 <USBD_StdEPReq+0x124>
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d016      	beq.n	800c3ec <USBD_StdEPReq+0x150>
 800c3be:	e04b      	b.n	800c458 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3c0:	7bbb      	ldrb	r3, [r7, #14]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00d      	beq.n	800c3e2 <USBD_StdEPReq+0x146>
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	2b80      	cmp	r3, #128	@ 0x80
 800c3ca:	d00a      	beq.n	800c3e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f003 ffa1 	bl	8010318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3d6:	2180      	movs	r1, #128	@ 0x80
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f003 ff9d 	bl	8010318 <USBD_LL_StallEP>
 800c3de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3e0:	e040      	b.n	800c464 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fc68 	bl	800ccba <USBD_CtlError>
              break;
 800c3ea:	e03b      	b.n	800c464 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	885b      	ldrh	r3, [r3, #2]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d136      	bne.n	800c462 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3f4:	7bbb      	ldrb	r3, [r7, #14]
 800c3f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3fe:	7bbb      	ldrb	r3, [r7, #14]
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f003 ffa7 	bl	8010356 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fd2d 	bl	800ce68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff fde4 	bl	800bfe0 <USBD_CoreFindEP>
 800c418:	4603      	mov	r3, r0
 800c41a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c41c:	7b7b      	ldrb	r3, [r7, #13]
 800c41e:	2bff      	cmp	r3, #255	@ 0xff
 800c420:	d01f      	beq.n	800c462 <USBD_StdEPReq+0x1c6>
 800c422:	7b7b      	ldrb	r3, [r7, #13]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d11c      	bne.n	800c462 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c428:	7b7a      	ldrb	r2, [r7, #13]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c430:	7b7a      	ldrb	r2, [r7, #13]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	32ae      	adds	r2, #174	@ 0xae
 800c436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d010      	beq.n	800c462 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c440:	7b7a      	ldrb	r2, [r7, #13]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	32ae      	adds	r2, #174	@ 0xae
 800c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	4798      	blx	r3
 800c452:	4603      	mov	r3, r0
 800c454:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c456:	e004      	b.n	800c462 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fc2d 	bl	800ccba <USBD_CtlError>
              break;
 800c460:	e000      	b.n	800c464 <USBD_StdEPReq+0x1c8>
              break;
 800c462:	bf00      	nop
          }
          break;
 800c464:	e0ab      	b.n	800c5be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d002      	beq.n	800c478 <USBD_StdEPReq+0x1dc>
 800c472:	2b03      	cmp	r3, #3
 800c474:	d032      	beq.n	800c4dc <USBD_StdEPReq+0x240>
 800c476:	e097      	b.n	800c5a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d007      	beq.n	800c48e <USBD_StdEPReq+0x1f2>
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	2b80      	cmp	r3, #128	@ 0x80
 800c482:	d004      	beq.n	800c48e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fc17 	bl	800ccba <USBD_CtlError>
                break;
 800c48c:	e091      	b.n	800c5b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c48e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c492:	2b00      	cmp	r3, #0
 800c494:	da0b      	bge.n	800c4ae <USBD_StdEPReq+0x212>
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	3310      	adds	r3, #16
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	e00b      	b.n	800c4c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fc6d 	bl	800cdb4 <USBD_CtlSendData>
              break;
 800c4da:	e06a      	b.n	800c5b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	da11      	bge.n	800c508 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	f003 020f 	and.w	r2, r3, #15
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	3324      	adds	r3, #36	@ 0x24
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d117      	bne.n	800c52e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fbda 	bl	800ccba <USBD_CtlError>
                  break;
 800c506:	e054      	b.n	800c5b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	f003 020f 	and.w	r2, r3, #15
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	440b      	add	r3, r1
 800c51a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d104      	bne.n	800c52e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fbc7 	bl	800ccba <USBD_CtlError>
                  break;
 800c52c:	e041      	b.n	800c5b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c52e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c532:	2b00      	cmp	r3, #0
 800c534:	da0b      	bge.n	800c54e <USBD_StdEPReq+0x2b2>
 800c536:	7bbb      	ldrb	r3, [r7, #14]
 800c538:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	3310      	adds	r3, #16
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	4413      	add	r3, r2
 800c54a:	3304      	adds	r3, #4
 800c54c:	e00b      	b.n	800c566 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	4413      	add	r3, r2
 800c564:	3304      	adds	r3, #4
 800c566:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c568:	7bbb      	ldrb	r3, [r7, #14]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <USBD_StdEPReq+0x2d8>
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	2b80      	cmp	r3, #128	@ 0x80
 800c572:	d103      	bne.n	800c57c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	e00e      	b.n	800c59a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f003 ff07 	bl	8010394 <USBD_LL_IsStallEP>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2201      	movs	r2, #1
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	e002      	b.n	800c59a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2202      	movs	r2, #2
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fc07 	bl	800cdb4 <USBD_CtlSendData>
              break;
 800c5a6:	e004      	b.n	800c5b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fb85 	bl	800ccba <USBD_CtlError>
              break;
 800c5b0:	bf00      	nop
          }
          break;
 800c5b2:	e004      	b.n	800c5be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fb7f 	bl	800ccba <USBD_CtlError>
          break;
 800c5bc:	bf00      	nop
      }
      break;
 800c5be:	e005      	b.n	800c5cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fb79 	bl	800ccba <USBD_CtlError>
      break;
 800c5c8:	e000      	b.n	800c5cc <USBD_StdEPReq+0x330>
      break;
 800c5ca:	bf00      	nop
  }

  return ret;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	0a1b      	lsrs	r3, r3, #8
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	2b0e      	cmp	r3, #14
 800c5fa:	f200 8152 	bhi.w	800c8a2 <USBD_GetDescriptor+0x2ca>
 800c5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c604 <USBD_GetDescriptor+0x2c>)
 800c600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c604:	0800c675 	.word	0x0800c675
 800c608:	0800c68d 	.word	0x0800c68d
 800c60c:	0800c6cd 	.word	0x0800c6cd
 800c610:	0800c8a3 	.word	0x0800c8a3
 800c614:	0800c8a3 	.word	0x0800c8a3
 800c618:	0800c843 	.word	0x0800c843
 800c61c:	0800c86f 	.word	0x0800c86f
 800c620:	0800c8a3 	.word	0x0800c8a3
 800c624:	0800c8a3 	.word	0x0800c8a3
 800c628:	0800c8a3 	.word	0x0800c8a3
 800c62c:	0800c8a3 	.word	0x0800c8a3
 800c630:	0800c8a3 	.word	0x0800c8a3
 800c634:	0800c8a3 	.word	0x0800c8a3
 800c638:	0800c8a3 	.word	0x0800c8a3
 800c63c:	0800c641 	.word	0x0800c641
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c646:	69db      	ldr	r3, [r3, #28]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	7c12      	ldrb	r2, [r2, #16]
 800c658:	f107 0108 	add.w	r1, r7, #8
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c662:	e126      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fb27 	bl	800ccba <USBD_CtlError>
        err++;
 800c66c:	7afb      	ldrb	r3, [r7, #11]
 800c66e:	3301      	adds	r3, #1
 800c670:	72fb      	strb	r3, [r7, #11]
      break;
 800c672:	e11e      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	7c12      	ldrb	r2, [r2, #16]
 800c680:	f107 0108 	add.w	r1, r7, #8
 800c684:	4610      	mov	r0, r2
 800c686:	4798      	blx	r3
 800c688:	60f8      	str	r0, [r7, #12]
      break;
 800c68a:	e112      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7c1b      	ldrb	r3, [r3, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10d      	bne.n	800c6b0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c69c:	f107 0208 	add.w	r2, r7, #8
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c6ae:	e100      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b8:	f107 0208 	add.w	r2, r7, #8
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4798      	blx	r3
 800c6c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	701a      	strb	r2, [r3, #0]
      break;
 800c6ca:	e0f2      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	885b      	ldrh	r3, [r3, #2]
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b05      	cmp	r3, #5
 800c6d4:	f200 80ac 	bhi.w	800c830 <USBD_GetDescriptor+0x258>
 800c6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <USBD_GetDescriptor+0x108>)
 800c6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6de:	bf00      	nop
 800c6e0:	0800c6f9 	.word	0x0800c6f9
 800c6e4:	0800c72d 	.word	0x0800c72d
 800c6e8:	0800c761 	.word	0x0800c761
 800c6ec:	0800c795 	.word	0x0800c795
 800c6f0:	0800c7c9 	.word	0x0800c7c9
 800c6f4:	0800c7fd 	.word	0x0800c7fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00b      	beq.n	800c71c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	7c12      	ldrb	r2, [r2, #16]
 800c710:	f107 0108 	add.w	r1, r7, #8
 800c714:	4610      	mov	r0, r2
 800c716:	4798      	blx	r3
 800c718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c71a:	e091      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 facb 	bl	800ccba <USBD_CtlError>
            err++;
 800c724:	7afb      	ldrb	r3, [r7, #11]
 800c726:	3301      	adds	r3, #1
 800c728:	72fb      	strb	r3, [r7, #11]
          break;
 800c72a:	e089      	b.n	800c840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00b      	beq.n	800c750 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	7c12      	ldrb	r2, [r2, #16]
 800c744:	f107 0108 	add.w	r1, r7, #8
 800c748:	4610      	mov	r0, r2
 800c74a:	4798      	blx	r3
 800c74c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c74e:	e077      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 fab1 	bl	800ccba <USBD_CtlError>
            err++;
 800c758:	7afb      	ldrb	r3, [r7, #11]
 800c75a:	3301      	adds	r3, #1
 800c75c:	72fb      	strb	r3, [r7, #11]
          break;
 800c75e:	e06f      	b.n	800c840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00b      	beq.n	800c784 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	7c12      	ldrb	r2, [r2, #16]
 800c778:	f107 0108 	add.w	r1, r7, #8
 800c77c:	4610      	mov	r0, r2
 800c77e:	4798      	blx	r3
 800c780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c782:	e05d      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fa97 	bl	800ccba <USBD_CtlError>
            err++;
 800c78c:	7afb      	ldrb	r3, [r7, #11]
 800c78e:	3301      	adds	r3, #1
 800c790:	72fb      	strb	r3, [r7, #11]
          break;
 800c792:	e055      	b.n	800c840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00b      	beq.n	800c7b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	7c12      	ldrb	r2, [r2, #16]
 800c7ac:	f107 0108 	add.w	r1, r7, #8
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	4798      	blx	r3
 800c7b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7b6:	e043      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fa7d 	bl	800ccba <USBD_CtlError>
            err++;
 800c7c0:	7afb      	ldrb	r3, [r7, #11]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7c6:	e03b      	b.n	800c840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	7c12      	ldrb	r2, [r2, #16]
 800c7e0:	f107 0108 	add.w	r1, r7, #8
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4798      	blx	r3
 800c7e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7ea:	e029      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa63 	bl	800ccba <USBD_CtlError>
            err++;
 800c7f4:	7afb      	ldrb	r3, [r7, #11]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c7fa:	e021      	b.n	800c840 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00b      	beq.n	800c820 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	7c12      	ldrb	r2, [r2, #16]
 800c814:	f107 0108 	add.w	r1, r7, #8
 800c818:	4610      	mov	r0, r2
 800c81a:	4798      	blx	r3
 800c81c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81e:	e00f      	b.n	800c840 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fa49 	bl	800ccba <USBD_CtlError>
            err++;
 800c828:	7afb      	ldrb	r3, [r7, #11]
 800c82a:	3301      	adds	r3, #1
 800c82c:	72fb      	strb	r3, [r7, #11]
          break;
 800c82e:	e007      	b.n	800c840 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 fa41 	bl	800ccba <USBD_CtlError>
          err++;
 800c838:	7afb      	ldrb	r3, [r7, #11]
 800c83a:	3301      	adds	r3, #1
 800c83c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c83e:	bf00      	nop
      }
      break;
 800c840:	e037      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	7c1b      	ldrb	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c852:	f107 0208 	add.w	r2, r7, #8
 800c856:	4610      	mov	r0, r2
 800c858:	4798      	blx	r3
 800c85a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c85c:	e029      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fa2a 	bl	800ccba <USBD_CtlError>
        err++;
 800c866:	7afb      	ldrb	r3, [r7, #11]
 800c868:	3301      	adds	r3, #1
 800c86a:	72fb      	strb	r3, [r7, #11]
      break;
 800c86c:	e021      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	7c1b      	ldrb	r3, [r3, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10d      	bne.n	800c892 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c87e:	f107 0208 	add.w	r2, r7, #8
 800c882:	4610      	mov	r0, r2
 800c884:	4798      	blx	r3
 800c886:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	2207      	movs	r2, #7
 800c88e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c890:	e00f      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fa10 	bl	800ccba <USBD_CtlError>
        err++;
 800c89a:	7afb      	ldrb	r3, [r7, #11]
 800c89c:	3301      	adds	r3, #1
 800c89e:	72fb      	strb	r3, [r7, #11]
      break;
 800c8a0:	e007      	b.n	800c8b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fa08 	bl	800ccba <USBD_CtlError>
      err++;
 800c8aa:	7afb      	ldrb	r3, [r7, #11]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	72fb      	strb	r3, [r7, #11]
      break;
 800c8b0:	bf00      	nop
  }

  if (err != 0U)
 800c8b2:	7afb      	ldrb	r3, [r7, #11]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d11e      	bne.n	800c8f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	88db      	ldrh	r3, [r3, #6]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d016      	beq.n	800c8ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c8c0:	893b      	ldrh	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00e      	beq.n	800c8e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	88da      	ldrh	r2, [r3, #6]
 800c8ca:	893b      	ldrh	r3, [r7, #8]
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	bf28      	it	cs
 800c8d0:	4613      	movcs	r3, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c8d6:	893b      	ldrh	r3, [r7, #8]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	68f9      	ldr	r1, [r7, #12]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fa69 	bl	800cdb4 <USBD_CtlSendData>
 800c8e2:	e009      	b.n	800c8f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f9e7 	bl	800ccba <USBD_CtlError>
 800c8ec:	e004      	b.n	800c8f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 faba 	bl	800ce68 <USBD_CtlSendStatus>
 800c8f4:	e000      	b.n	800c8f8 <USBD_GetDescriptor+0x320>
    return;
 800c8f6:	bf00      	nop
  }
}
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop

0800c900 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	889b      	ldrh	r3, [r3, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d131      	bne.n	800c976 <USBD_SetAddress+0x76>
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	88db      	ldrh	r3, [r3, #6]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d12d      	bne.n	800c976 <USBD_SetAddress+0x76>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	885b      	ldrh	r3, [r3, #2]
 800c91e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c920:	d829      	bhi.n	800c976 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	b2db      	uxtb	r3, r3
 800c928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c92c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b03      	cmp	r3, #3
 800c938:	d104      	bne.n	800c944 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f9bc 	bl	800ccba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c942:	e01d      	b.n	800c980 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7bfa      	ldrb	r2, [r7, #15]
 800c948:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	4619      	mov	r1, r3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f003 fd4b 	bl	80103ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fa86 	bl	800ce68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d004      	beq.n	800c96c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2202      	movs	r2, #2
 800c966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c96a:	e009      	b.n	800c980 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c974:	e004      	b.n	800c980 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f99e 	bl	800ccba <USBD_CtlError>
  }
}
 800c97e:	bf00      	nop
 800c980:	bf00      	nop
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	885b      	ldrh	r3, [r3, #2]
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	4b4e      	ldr	r3, [pc, #312]	@ (800cad8 <USBD_SetConfig+0x150>)
 800c99e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c9a0:	4b4d      	ldr	r3, [pc, #308]	@ (800cad8 <USBD_SetConfig+0x150>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d905      	bls.n	800c9b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f985 	bl	800ccba <USBD_CtlError>
    return USBD_FAIL;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e08c      	b.n	800cace <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d002      	beq.n	800c9c6 <USBD_SetConfig+0x3e>
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d029      	beq.n	800ca18 <USBD_SetConfig+0x90>
 800c9c4:	e075      	b.n	800cab2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c9c6:	4b44      	ldr	r3, [pc, #272]	@ (800cad8 <USBD_SetConfig+0x150>)
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d020      	beq.n	800ca10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c9ce:	4b42      	ldr	r3, [pc, #264]	@ (800cad8 <USBD_SetConfig+0x150>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9d8:	4b3f      	ldr	r3, [pc, #252]	@ (800cad8 <USBD_SetConfig+0x150>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	4619      	mov	r1, r3
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7fe ffb9 	bl	800b956 <USBD_SetClassConfig>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d008      	beq.n	800ca00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f962 	bl	800ccba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9fe:	e065      	b.n	800cacc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fa31 	bl	800ce68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2203      	movs	r2, #3
 800ca0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ca0e:	e05d      	b.n	800cacc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fa29 	bl	800ce68 <USBD_CtlSendStatus>
      break;
 800ca16:	e059      	b.n	800cacc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ca18:	4b2f      	ldr	r3, [pc, #188]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d112      	bne.n	800ca46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2202      	movs	r2, #2
 800ca24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ca28:	4b2b      	ldr	r3, [pc, #172]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca32:	4b29      	ldr	r3, [pc, #164]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7fe ffa8 	bl	800b98e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fa12 	bl	800ce68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca44:	e042      	b.n	800cacc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca46:	4b24      	ldr	r3, [pc, #144]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d02a      	beq.n	800caaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7fe ff96 	bl	800b98e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca62:	4b1d      	ldr	r3, [pc, #116]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca6c:	4b1a      	ldr	r3, [pc, #104]	@ (800cad8 <USBD_SetConfig+0x150>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7fe ff6f 	bl	800b956 <USBD_SetClassConfig>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00f      	beq.n	800caa2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f918 	bl	800ccba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7fe ff7b 	bl	800b98e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800caa0:	e014      	b.n	800cacc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f9e0 	bl	800ce68 <USBD_CtlSendStatus>
      break;
 800caa8:	e010      	b.n	800cacc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f9dc 	bl	800ce68 <USBD_CtlSendStatus>
      break;
 800cab0:	e00c      	b.n	800cacc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f900 	bl	800ccba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800caba:	4b07      	ldr	r3, [pc, #28]	@ (800cad8 <USBD_SetConfig+0x150>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	4619      	mov	r1, r3
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7fe ff64 	bl	800b98e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cac6:	2303      	movs	r3, #3
 800cac8:	73fb      	strb	r3, [r7, #15]
      break;
 800caca:	bf00      	nop
  }

  return ret;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	240005dc 	.word	0x240005dc

0800cadc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	88db      	ldrh	r3, [r3, #6]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d004      	beq.n	800caf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f8e2 	bl	800ccba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800caf6:	e023      	b.n	800cb40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	dc02      	bgt.n	800cb0a <USBD_GetConfig+0x2e>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dc03      	bgt.n	800cb10 <USBD_GetConfig+0x34>
 800cb08:	e015      	b.n	800cb36 <USBD_GetConfig+0x5a>
 800cb0a:	2b03      	cmp	r3, #3
 800cb0c:	d00b      	beq.n	800cb26 <USBD_GetConfig+0x4a>
 800cb0e:	e012      	b.n	800cb36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3308      	adds	r3, #8
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f948 	bl	800cdb4 <USBD_CtlSendData>
        break;
 800cb24:	e00c      	b.n	800cb40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	3304      	adds	r3, #4
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f940 	bl	800cdb4 <USBD_CtlSendData>
        break;
 800cb34:	e004      	b.n	800cb40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cb36:	6839      	ldr	r1, [r7, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f8be 	bl	800ccba <USBD_CtlError>
        break;
 800cb3e:	bf00      	nop
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d81e      	bhi.n	800cb9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	88db      	ldrh	r3, [r3, #6]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d004      	beq.n	800cb72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb68:	6839      	ldr	r1, [r7, #0]
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f8a5 	bl	800ccba <USBD_CtlError>
        break;
 800cb70:	e01a      	b.n	800cba8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	f043 0202 	orr.w	r2, r3, #2
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	330c      	adds	r3, #12
 800cb92:	2202      	movs	r2, #2
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f90c 	bl	800cdb4 <USBD_CtlSendData>
      break;
 800cb9c:	e004      	b.n	800cba8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f88a 	bl	800ccba <USBD_CtlError>
      break;
 800cba6:	bf00      	nop
  }
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d107      	bne.n	800cbd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f94c 	bl	800ce68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cbd0:	e013      	b.n	800cbfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	885b      	ldrh	r3, [r3, #2]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d10b      	bne.n	800cbf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	889b      	ldrh	r3, [r3, #4]
 800cbde:	0a1b      	lsrs	r3, r3, #8
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f93c 	bl	800ce68 <USBD_CtlSendStatus>
}
 800cbf0:	e003      	b.n	800cbfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f860 	bl	800ccba <USBD_CtlError>
}
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	3b01      	subs	r3, #1
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d80b      	bhi.n	800cc32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	885b      	ldrh	r3, [r3, #2]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d10c      	bne.n	800cc3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f91c 	bl	800ce68 <USBD_CtlSendStatus>
      }
      break;
 800cc30:	e004      	b.n	800cc3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f840 	bl	800ccba <USBD_CtlError>
      break;
 800cc3a:	e000      	b.n	800cc3e <USBD_ClrFeature+0x3c>
      break;
 800cc3c:	bf00      	nop
  }
}
 800cc3e:	bf00      	nop
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b084      	sub	sp, #16
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	781a      	ldrb	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	781a      	ldrb	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff fa16 	bl	800c0a2 <SWAPBYTE>
 800cc76:	4603      	mov	r3, r0
 800cc78:	461a      	mov	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3301      	adds	r3, #1
 800cc82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3301      	adds	r3, #1
 800cc88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fa09 	bl	800c0a2 <SWAPBYTE>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3301      	adds	r3, #1
 800cca2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff f9fc 	bl	800c0a2 <SWAPBYTE>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	461a      	mov	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	80da      	strh	r2, [r3, #6]
}
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccc4:	2180      	movs	r1, #128	@ 0x80
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f003 fb26 	bl	8010318 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cccc:	2100      	movs	r1, #0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f003 fb22 	bl	8010318 <USBD_LL_StallEP>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cce8:	2300      	movs	r3, #0
 800ccea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d042      	beq.n	800cd78 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ccf6:	6938      	ldr	r0, [r7, #16]
 800ccf8:	f000 f842 	bl	800cd80 <USBD_GetLen>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	3301      	adds	r3, #1
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd06:	d808      	bhi.n	800cd1a <USBD_GetString+0x3e>
 800cd08:	6938      	ldr	r0, [r7, #16]
 800cd0a:	f000 f839 	bl	800cd80 <USBD_GetLen>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	3301      	adds	r3, #1
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	e001      	b.n	800cd1e <USBD_GetString+0x42>
 800cd1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	4413      	add	r3, r2
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	7812      	ldrb	r2, [r2, #0]
 800cd2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	3301      	adds	r3, #1
 800cd32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	4413      	add	r3, r2
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	3301      	adds	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cd44:	e013      	b.n	800cd6e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	7812      	ldrb	r2, [r2, #0]
 800cd50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	3301      	adds	r3, #1
 800cd56:	613b      	str	r3, [r7, #16]
    idx++;
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	4413      	add	r3, r2
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1e7      	bne.n	800cd46 <USBD_GetString+0x6a>
 800cd76:	e000      	b.n	800cd7a <USBD_GetString+0x9e>
    return;
 800cd78:	bf00      	nop
  }
}
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd90:	e005      	b.n	800cd9e <USBD_GetLen+0x1e>
  {
    len++;
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	3301      	adds	r3, #1
 800cd96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1f5      	bne.n	800cd92 <USBD_GetLen+0x12>
  }

  return len;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	2100      	movs	r1, #0
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f003 fb25 	bl	801042a <USBD_LL_Transmit>

  return USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	60b9      	str	r1, [r7, #8]
 800cdf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f003 fb14 	bl	801042a <USBD_LL_Transmit>

  return USBD_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	2100      	movs	r1, #0
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f003 fb18 	bl	801046c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	2100      	movs	r1, #0
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f003 fb07 	bl	801046c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2204      	movs	r2, #4
 800ce74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce78:	2300      	movs	r3, #0
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f003 fad3 	bl	801042a <USBD_LL_Transmit>

  return USBD_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b082      	sub	sp, #8
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2205      	movs	r2, #5
 800ce9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce9e:	2300      	movs	r3, #0
 800cea0:	2200      	movs	r2, #0
 800cea2:	2100      	movs	r1, #0
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f003 fae1 	bl	801046c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <__NVIC_SetPriority>:
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	4603      	mov	r3, r0
 800cebc:	6039      	str	r1, [r7, #0]
 800cebe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	db0a      	blt.n	800cede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	490c      	ldr	r1, [pc, #48]	@ (800cf00 <__NVIC_SetPriority+0x4c>)
 800cece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ced2:	0112      	lsls	r2, r2, #4
 800ced4:	b2d2      	uxtb	r2, r2
 800ced6:	440b      	add	r3, r1
 800ced8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cedc:	e00a      	b.n	800cef4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	4908      	ldr	r1, [pc, #32]	@ (800cf04 <__NVIC_SetPriority+0x50>)
 800cee4:	88fb      	ldrh	r3, [r7, #6]
 800cee6:	f003 030f 	and.w	r3, r3, #15
 800ceea:	3b04      	subs	r3, #4
 800ceec:	0112      	lsls	r2, r2, #4
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	440b      	add	r3, r1
 800cef2:	761a      	strb	r2, [r3, #24]
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	e000e100 	.word	0xe000e100
 800cf04:	e000ed00 	.word	0xe000ed00

0800cf08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cf0c:	4b05      	ldr	r3, [pc, #20]	@ (800cf24 <SysTick_Handler+0x1c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cf10:	f001 fd8c 	bl	800ea2c <xTaskGetSchedulerState>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d001      	beq.n	800cf1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cf1a:	f002 fb85 	bl	800f628 <xPortSysTickHandler>
  }
}
 800cf1e:	bf00      	nop
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	e000e010 	.word	0xe000e010

0800cf28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	f06f 0004 	mvn.w	r0, #4
 800cf32:	f7ff ffbf 	bl	800ceb4 <__NVIC_SetPriority>
#endif
}
 800cf36:	bf00      	nop
 800cf38:	bd80      	pop	{r7, pc}
	...

0800cf3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf42:	f3ef 8305 	mrs	r3, IPSR
 800cf46:	603b      	str	r3, [r7, #0]
  return(result);
 800cf48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf4e:	f06f 0305 	mvn.w	r3, #5
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	e00c      	b.n	800cf70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf56:	4b0a      	ldr	r3, [pc, #40]	@ (800cf80 <osKernelInitialize+0x44>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d105      	bne.n	800cf6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf5e:	4b08      	ldr	r3, [pc, #32]	@ (800cf80 <osKernelInitialize+0x44>)
 800cf60:	2201      	movs	r2, #1
 800cf62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	607b      	str	r3, [r7, #4]
 800cf68:	e002      	b.n	800cf70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf70:	687b      	ldr	r3, [r7, #4]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	240005e0 	.word	0x240005e0

0800cf84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf8a:	f3ef 8305 	mrs	r3, IPSR
 800cf8e:	603b      	str	r3, [r7, #0]
  return(result);
 800cf90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d003      	beq.n	800cf9e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf96:	f06f 0305 	mvn.w	r3, #5
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	e010      	b.n	800cfc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfcc <osKernelStart+0x48>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d109      	bne.n	800cfba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cfa6:	f7ff ffbf 	bl	800cf28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cfaa:	4b08      	ldr	r3, [pc, #32]	@ (800cfcc <osKernelStart+0x48>)
 800cfac:	2202      	movs	r2, #2
 800cfae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cfb0:	f001 f8ee 	bl	800e190 <vTaskStartScheduler>
      stat = osOK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	607b      	str	r3, [r7, #4]
 800cfb8:	e002      	b.n	800cfc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cfba:	f04f 33ff 	mov.w	r3, #4294967295
 800cfbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cfc0:	687b      	ldr	r3, [r7, #4]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	240005e0 	.word	0x240005e0

0800cfd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08e      	sub	sp, #56	@ 0x38
 800cfd4:	af04      	add	r7, sp, #16
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfe0:	f3ef 8305 	mrs	r3, IPSR
 800cfe4:	617b      	str	r3, [r7, #20]
  return(result);
 800cfe6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d17e      	bne.n	800d0ea <osThreadNew+0x11a>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d07b      	beq.n	800d0ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cff2:	2380      	movs	r3, #128	@ 0x80
 800cff4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cff6:	2318      	movs	r3, #24
 800cff8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cffe:	f04f 33ff 	mov.w	r3, #4294967295
 800d002:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d045      	beq.n	800d096 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <osThreadNew+0x48>
        name = attr->name;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	699b      	ldr	r3, [r3, #24]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d008      	beq.n	800d03e <osThreadNew+0x6e>
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2b38      	cmp	r3, #56	@ 0x38
 800d030:	d805      	bhi.n	800d03e <osThreadNew+0x6e>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <osThreadNew+0x72>
        return (NULL);
 800d03e:	2300      	movs	r3, #0
 800d040:	e054      	b.n	800d0ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d003      	beq.n	800d052 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	089b      	lsrs	r3, r3, #2
 800d050:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00e      	beq.n	800d078 <osThreadNew+0xa8>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	2b5b      	cmp	r3, #91	@ 0x5b
 800d060:	d90a      	bls.n	800d078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <osThreadNew+0xa8>
        mem = 1;
 800d072:	2301      	movs	r3, #1
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	e010      	b.n	800d09a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10c      	bne.n	800d09a <osThreadNew+0xca>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d108      	bne.n	800d09a <osThreadNew+0xca>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d104      	bne.n	800d09a <osThreadNew+0xca>
          mem = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	61bb      	str	r3, [r7, #24]
 800d094:	e001      	b.n	800d09a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d110      	bne.n	800d0c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d0a8:	9202      	str	r2, [sp, #8]
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	6a3a      	ldr	r2, [r7, #32]
 800d0b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 fe1a 	bl	800dcf0 <xTaskCreateStatic>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	613b      	str	r3, [r7, #16]
 800d0c0:	e013      	b.n	800d0ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d110      	bne.n	800d0ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	f107 0310 	add.w	r3, r7, #16
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f000 fe68 	bl	800ddb0 <xTaskCreate>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d001      	beq.n	800d0ea <osThreadNew+0x11a>
            hTask = NULL;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0ea:	693b      	ldr	r3, [r7, #16]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3728      	adds	r7, #40	@ 0x28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0fc:	f3ef 8305 	mrs	r3, IPSR
 800d100:	60bb      	str	r3, [r7, #8]
  return(result);
 800d102:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <osDelay+0x1c>
    stat = osErrorISR;
 800d108:	f06f 0305 	mvn.w	r3, #5
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	e007      	b.n	800d120 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d110:	2300      	movs	r3, #0
 800d112:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f001 f802 	bl	800e124 <vTaskDelay>
    }
  }

  return (stat);
 800d120:	68fb      	ldr	r3, [r7, #12]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	4a07      	ldr	r2, [pc, #28]	@ (800d158 <vApplicationGetIdleTaskMemory+0x2c>)
 800d13c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	4a06      	ldr	r2, [pc, #24]	@ (800d15c <vApplicationGetIdleTaskMemory+0x30>)
 800d142:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2280      	movs	r2, #128	@ 0x80
 800d148:	601a      	str	r2, [r3, #0]
}
 800d14a:	bf00      	nop
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	240005e4 	.word	0x240005e4
 800d15c:	24000640 	.word	0x24000640

0800d160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	4a07      	ldr	r2, [pc, #28]	@ (800d18c <vApplicationGetTimerTaskMemory+0x2c>)
 800d170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	4a06      	ldr	r2, [pc, #24]	@ (800d190 <vApplicationGetTimerTaskMemory+0x30>)
 800d176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d17e:	601a      	str	r2, [r3, #0]
}
 800d180:	bf00      	nop
 800d182:	3714      	adds	r7, #20
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	24000840 	.word	0x24000840
 800d190:	2400089c 	.word	0x2400089c

0800d194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f103 0208 	add.w	r2, r3, #8
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f103 0208 	add.w	r2, r3, #8
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f103 0208 	add.w	r2, r3, #8
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1e2:	bf00      	nop
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b085      	sub	sp, #20
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	689a      	ldr	r2, [r3, #8]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	601a      	str	r2, [r3, #0]
}
 800d22a:	bf00      	nop
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d236:	b480      	push	{r7}
 800d238:	b085      	sub	sp, #20
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d103      	bne.n	800d256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	e00c      	b.n	800d270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3308      	adds	r3, #8
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	e002      	b.n	800d264 <vListInsert+0x2e>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d2f6      	bcs.n	800d25e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	601a      	str	r2, [r3, #0]
}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6892      	ldr	r2, [r2, #8]
 800d2be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	6852      	ldr	r2, [r2, #4]
 800d2c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d103      	bne.n	800d2dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	689a      	ldr	r2, [r3, #8]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	1e5a      	subs	r2, r3, #1
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10b      	bne.n	800d328 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	e7fd      	b.n	800d324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d328:	f002 f8ee 	bl	800f508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d334:	68f9      	ldr	r1, [r7, #12]
 800d336:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d338:	fb01 f303 	mul.w	r3, r1, r3
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d358:	3b01      	subs	r3, #1
 800d35a:	68f9      	ldr	r1, [r7, #12]
 800d35c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d35e:	fb01 f303 	mul.w	r3, r1, r3
 800d362:	441a      	add	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	22ff      	movs	r2, #255	@ 0xff
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	22ff      	movs	r2, #255	@ 0xff
 800d374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d114      	bne.n	800d3a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d01a      	beq.n	800d3bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3310      	adds	r3, #16
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 f98e 	bl	800e6ac <xTaskRemoveFromEventList>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d012      	beq.n	800d3bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d396:	4b0d      	ldr	r3, [pc, #52]	@ (800d3cc <xQueueGenericReset+0xd0>)
 800d398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	e009      	b.n	800d3bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3310      	adds	r3, #16
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff fef1 	bl	800d194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	3324      	adds	r3, #36	@ 0x24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff feec 	bl	800d194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3bc:	f002 f8d6 	bl	800f56c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3c0:	2301      	movs	r3, #1
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	e000ed04 	.word	0xe000ed04

0800d3d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b08e      	sub	sp, #56	@ 0x38
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10b      	bne.n	800d3fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3f6:	bf00      	nop
 800d3f8:	bf00      	nop
 800d3fa:	e7fd      	b.n	800d3f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10b      	bne.n	800d41a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	e7fd      	b.n	800d416 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <xQueueGenericCreateStatic+0x56>
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <xQueueGenericCreateStatic+0x5a>
 800d426:	2301      	movs	r3, #1
 800d428:	e000      	b.n	800d42c <xQueueGenericCreateStatic+0x5c>
 800d42a:	2300      	movs	r3, #0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10b      	bne.n	800d448 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	623b      	str	r3, [r7, #32]
}
 800d442:	bf00      	nop
 800d444:	bf00      	nop
 800d446:	e7fd      	b.n	800d444 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <xQueueGenericCreateStatic+0x84>
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <xQueueGenericCreateStatic+0x88>
 800d454:	2301      	movs	r3, #1
 800d456:	e000      	b.n	800d45a <xQueueGenericCreateStatic+0x8a>
 800d458:	2300      	movs	r3, #0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10b      	bne.n	800d476 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	61fb      	str	r3, [r7, #28]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d476:	2350      	movs	r3, #80	@ 0x50
 800d478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b50      	cmp	r3, #80	@ 0x50
 800d47e:	d00b      	beq.n	800d498 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	61bb      	str	r3, [r7, #24]
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d498:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00d      	beq.n	800d4c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	68b9      	ldr	r1, [r7, #8]
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 f805 	bl	800d4ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3730      	adds	r7, #48	@ 0x30
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b084      	sub	sp, #16
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	60f8      	str	r0, [r7, #12]
 800d4d2:	60b9      	str	r1, [r7, #8]
 800d4d4:	607a      	str	r2, [r7, #4]
 800d4d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d103      	bne.n	800d4e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	69ba      	ldr	r2, [r7, #24]
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	e002      	b.n	800d4ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	69b8      	ldr	r0, [r7, #24]
 800d4fc:	f7ff fefe 	bl	800d2fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	78fa      	ldrb	r2, [r7, #3]
 800d504:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d508:	bf00      	nop
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08e      	sub	sp, #56	@ 0x38
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d51e:	2300      	movs	r3, #0
 800d520:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10b      	bne.n	800d544 <xQueueGenericSend+0x34>
	__asm volatile
 800d52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d53e:	bf00      	nop
 800d540:	bf00      	nop
 800d542:	e7fd      	b.n	800d540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d103      	bne.n	800d552 <xQueueGenericSend+0x42>
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <xQueueGenericSend+0x46>
 800d552:	2301      	movs	r3, #1
 800d554:	e000      	b.n	800d558 <xQueueGenericSend+0x48>
 800d556:	2300      	movs	r3, #0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d10b      	bne.n	800d574 <xQueueGenericSend+0x64>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	e7fd      	b.n	800d570 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d103      	bne.n	800d582 <xQueueGenericSend+0x72>
 800d57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d101      	bne.n	800d586 <xQueueGenericSend+0x76>
 800d582:	2301      	movs	r3, #1
 800d584:	e000      	b.n	800d588 <xQueueGenericSend+0x78>
 800d586:	2300      	movs	r3, #0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10b      	bne.n	800d5a4 <xQueueGenericSend+0x94>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	623b      	str	r3, [r7, #32]
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5a4:	f001 fa42 	bl	800ea2c <xTaskGetSchedulerState>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d102      	bne.n	800d5b4 <xQueueGenericSend+0xa4>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <xQueueGenericSend+0xa8>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e000      	b.n	800d5ba <xQueueGenericSend+0xaa>
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <xQueueGenericSend+0xc6>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	61fb      	str	r3, [r7, #28]
}
 800d5d0:	bf00      	nop
 800d5d2:	bf00      	nop
 800d5d4:	e7fd      	b.n	800d5d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5d6:	f001 ff97 	bl	800f508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d302      	bcc.n	800d5ec <xQueueGenericSend+0xdc>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d129      	bne.n	800d640 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5f2:	f000 fa0f 	bl	800da14 <prvCopyDataToQueue>
 800d5f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d010      	beq.n	800d622 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d602:	3324      	adds	r3, #36	@ 0x24
 800d604:	4618      	mov	r0, r3
 800d606:	f001 f851 	bl	800e6ac <xTaskRemoveFromEventList>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d013      	beq.n	800d638 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d610:	4b3f      	ldr	r3, [pc, #252]	@ (800d710 <xQueueGenericSend+0x200>)
 800d612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	e00a      	b.n	800d638 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d007      	beq.n	800d638 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d628:	4b39      	ldr	r3, [pc, #228]	@ (800d710 <xQueueGenericSend+0x200>)
 800d62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d62e:	601a      	str	r2, [r3, #0]
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d638:	f001 ff98 	bl	800f56c <vPortExitCritical>
				return pdPASS;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e063      	b.n	800d708 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d103      	bne.n	800d64e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d646:	f001 ff91 	bl	800f56c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	e05c      	b.n	800d708 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d654:	f107 0314 	add.w	r3, r7, #20
 800d658:	4618      	mov	r0, r3
 800d65a:	f001 f88b 	bl	800e774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d65e:	2301      	movs	r3, #1
 800d660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d662:	f001 ff83 	bl	800f56c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d666:	f000 fdfb 	bl	800e260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d66a:	f001 ff4d 	bl	800f508 <vPortEnterCritical>
 800d66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d674:	b25b      	sxtb	r3, r3
 800d676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67a:	d103      	bne.n	800d684 <xQueueGenericSend+0x174>
 800d67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d68a:	b25b      	sxtb	r3, r3
 800d68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d690:	d103      	bne.n	800d69a <xQueueGenericSend+0x18a>
 800d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d69a:	f001 ff67 	bl	800f56c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d69e:	1d3a      	adds	r2, r7, #4
 800d6a0:	f107 0314 	add.w	r3, r7, #20
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f001 f87a 	bl	800e7a0 <xTaskCheckForTimeOut>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d124      	bne.n	800d6fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d6b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6b4:	f000 faa6 	bl	800dc04 <prvIsQueueFull>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d018      	beq.n	800d6f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c0:	3310      	adds	r3, #16
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 ff9e 	bl	800e608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ce:	f000 fa31 	bl	800db34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6d2:	f000 fdd3 	bl	800e27c <xTaskResumeAll>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f47f af7c 	bne.w	800d5d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d6de:	4b0c      	ldr	r3, [pc, #48]	@ (800d710 <xQueueGenericSend+0x200>)
 800d6e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	e772      	b.n	800d5d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6f2:	f000 fa1f 	bl	800db34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6f6:	f000 fdc1 	bl	800e27c <xTaskResumeAll>
 800d6fa:	e76c      	b.n	800d5d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6fe:	f000 fa19 	bl	800db34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d702:	f000 fdbb 	bl	800e27c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3738      	adds	r7, #56	@ 0x38
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	e000ed04 	.word	0xe000ed04

0800d714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b090      	sub	sp, #64	@ 0x40
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10b      	bne.n	800d744 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	e7fd      	b.n	800d740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d103      	bne.n	800d752 <xQueueGenericSendFromISR+0x3e>
 800d74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <xQueueGenericSendFromISR+0x42>
 800d752:	2301      	movs	r3, #1
 800d754:	e000      	b.n	800d758 <xQueueGenericSendFromISR+0x44>
 800d756:	2300      	movs	r3, #0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10b      	bne.n	800d774 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d76e:	bf00      	nop
 800d770:	bf00      	nop
 800d772:	e7fd      	b.n	800d770 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d103      	bne.n	800d782 <xQueueGenericSendFromISR+0x6e>
 800d77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <xQueueGenericSendFromISR+0x72>
 800d782:	2301      	movs	r3, #1
 800d784:	e000      	b.n	800d788 <xQueueGenericSendFromISR+0x74>
 800d786:	2300      	movs	r3, #0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d10b      	bne.n	800d7a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	623b      	str	r3, [r7, #32]
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7a4:	f001 ff90 	bl	800f6c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d7a8:	f3ef 8211 	mrs	r2, BASEPRI
 800d7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	61fa      	str	r2, [r7, #28]
 800d7be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d302      	bcc.n	800d7d6 <xQueueGenericSendFromISR+0xc2>
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d12f      	bne.n	800d836 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	68b9      	ldr	r1, [r7, #8]
 800d7ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7ec:	f000 f912 	bl	800da14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f8:	d112      	bne.n	800d820 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d016      	beq.n	800d830 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	3324      	adds	r3, #36	@ 0x24
 800d806:	4618      	mov	r0, r3
 800d808:	f000 ff50 	bl	800e6ac <xTaskRemoveFromEventList>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00e      	beq.n	800d830 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00b      	beq.n	800d830 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e007      	b.n	800d830 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d824:	3301      	adds	r3, #1
 800d826:	b2db      	uxtb	r3, r3
 800d828:	b25a      	sxtb	r2, r3
 800d82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d830:	2301      	movs	r3, #1
 800d832:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d834:	e001      	b.n	800d83a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d836:	2300      	movs	r3, #0
 800d838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d83c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3740      	adds	r7, #64	@ 0x40
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08c      	sub	sp, #48	@ 0x30
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d85c:	2300      	movs	r3, #0
 800d85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10b      	bne.n	800d882 <xQueueReceive+0x32>
	__asm volatile
 800d86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	623b      	str	r3, [r7, #32]
}
 800d87c:	bf00      	nop
 800d87e:	bf00      	nop
 800d880:	e7fd      	b.n	800d87e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <xQueueReceive+0x40>
 800d888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d101      	bne.n	800d894 <xQueueReceive+0x44>
 800d890:	2301      	movs	r3, #1
 800d892:	e000      	b.n	800d896 <xQueueReceive+0x46>
 800d894:	2300      	movs	r3, #0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10b      	bne.n	800d8b2 <xQueueReceive+0x62>
	__asm volatile
 800d89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d89e:	f383 8811 	msr	BASEPRI, r3
 800d8a2:	f3bf 8f6f 	isb	sy
 800d8a6:	f3bf 8f4f 	dsb	sy
 800d8aa:	61fb      	str	r3, [r7, #28]
}
 800d8ac:	bf00      	nop
 800d8ae:	bf00      	nop
 800d8b0:	e7fd      	b.n	800d8ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8b2:	f001 f8bb 	bl	800ea2c <xTaskGetSchedulerState>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <xQueueReceive+0x72>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <xQueueReceive+0x76>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <xQueueReceive+0x78>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10b      	bne.n	800d8e4 <xQueueReceive+0x94>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	61bb      	str	r3, [r7, #24]
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8e4:	f001 fe10 	bl	800f508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01f      	beq.n	800d934 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8f4:	68b9      	ldr	r1, [r7, #8]
 800d8f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8f8:	f000 f8f6 	bl	800dae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	1e5a      	subs	r2, r3, #1
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00f      	beq.n	800d92c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90e:	3310      	adds	r3, #16
 800d910:	4618      	mov	r0, r3
 800d912:	f000 fecb 	bl	800e6ac <xTaskRemoveFromEventList>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d007      	beq.n	800d92c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d91c:	4b3c      	ldr	r3, [pc, #240]	@ (800da10 <xQueueReceive+0x1c0>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d92c:	f001 fe1e 	bl	800f56c <vPortExitCritical>
				return pdPASS;
 800d930:	2301      	movs	r3, #1
 800d932:	e069      	b.n	800da08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d103      	bne.n	800d942 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d93a:	f001 fe17 	bl	800f56c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d93e:	2300      	movs	r3, #0
 800d940:	e062      	b.n	800da08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d106      	bne.n	800d956 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d948:	f107 0310 	add.w	r3, r7, #16
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 ff11 	bl	800e774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d952:	2301      	movs	r3, #1
 800d954:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d956:	f001 fe09 	bl	800f56c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d95a:	f000 fc81 	bl	800e260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d95e:	f001 fdd3 	bl	800f508 <vPortEnterCritical>
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d968:	b25b      	sxtb	r3, r3
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d103      	bne.n	800d978 <xQueueReceive+0x128>
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	2200      	movs	r2, #0
 800d974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d97e:	b25b      	sxtb	r3, r3
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d984:	d103      	bne.n	800d98e <xQueueReceive+0x13e>
 800d986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d98e:	f001 fded 	bl	800f56c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d992:	1d3a      	adds	r2, r7, #4
 800d994:	f107 0310 	add.w	r3, r7, #16
 800d998:	4611      	mov	r1, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 ff00 	bl	800e7a0 <xTaskCheckForTimeOut>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d123      	bne.n	800d9ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9a8:	f000 f916 	bl	800dbd8 <prvIsQueueEmpty>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d017      	beq.n	800d9e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b4:	3324      	adds	r3, #36	@ 0x24
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 fe24 	bl	800e608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c2:	f000 f8b7 	bl	800db34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9c6:	f000 fc59 	bl	800e27c <xTaskResumeAll>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d189      	bne.n	800d8e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d9d0:	4b0f      	ldr	r3, [pc, #60]	@ (800da10 <xQueueReceive+0x1c0>)
 800d9d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	e780      	b.n	800d8e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9e4:	f000 f8a6 	bl	800db34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9e8:	f000 fc48 	bl	800e27c <xTaskResumeAll>
 800d9ec:	e77a      	b.n	800d8e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9f0:	f000 f8a0 	bl	800db34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9f4:	f000 fc42 	bl	800e27c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9fa:	f000 f8ed 	bl	800dbd8 <prvIsQueueEmpty>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	f43f af6f 	beq.w	800d8e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3730      	adds	r7, #48	@ 0x30
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	e000ed04 	.word	0xe000ed04

0800da14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da20:	2300      	movs	r3, #0
 800da22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10d      	bne.n	800da4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d14d      	bne.n	800dad6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	4618      	mov	r0, r3
 800da40:	f001 f812 	bl	800ea68 <xTaskPriorityDisinherit>
 800da44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2200      	movs	r2, #0
 800da4a:	609a      	str	r2, [r3, #8]
 800da4c:	e043      	b.n	800dad6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d119      	bne.n	800da88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6858      	ldr	r0, [r3, #4]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5c:	461a      	mov	r2, r3
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	f005 fa17 	bl	8012e92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6c:	441a      	add	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d32b      	bcc.n	800dad6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	605a      	str	r2, [r3, #4]
 800da86:	e026      	b.n	800dad6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	68d8      	ldr	r0, [r3, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da90:	461a      	mov	r2, r3
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	f005 f9fd 	bl	8012e92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa0:	425b      	negs	r3, r3
 800daa2:	441a      	add	r2, r3
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d207      	bcs.n	800dac4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	425b      	negs	r3, r3
 800dabe:	441a      	add	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d105      	bne.n	800dad6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	3b01      	subs	r3, #1
 800dad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dade:	697b      	ldr	r3, [r7, #20]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d018      	beq.n	800db2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db02:	441a      	add	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68da      	ldr	r2, [r3, #12]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	429a      	cmp	r2, r3
 800db12:	d303      	bcc.n	800db1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68d9      	ldr	r1, [r3, #12]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db24:	461a      	mov	r2, r3
 800db26:	6838      	ldr	r0, [r7, #0]
 800db28:	f005 f9b3 	bl	8012e92 <memcpy>
	}
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db3c:	f001 fce4 	bl	800f508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db48:	e011      	b.n	800db6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d012      	beq.n	800db78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	3324      	adds	r3, #36	@ 0x24
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fda8 	bl	800e6ac <xTaskRemoveFromEventList>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db62:	f000 fe81 	bl	800e868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	3b01      	subs	r3, #1
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db72:	2b00      	cmp	r3, #0
 800db74:	dce9      	bgt.n	800db4a <prvUnlockQueue+0x16>
 800db76:	e000      	b.n	800db7a <prvUnlockQueue+0x46>
					break;
 800db78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	22ff      	movs	r2, #255	@ 0xff
 800db7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db82:	f001 fcf3 	bl	800f56c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db86:	f001 fcbf 	bl	800f508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db92:	e011      	b.n	800dbb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d012      	beq.n	800dbc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3310      	adds	r3, #16
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 fd83 	bl	800e6ac <xTaskRemoveFromEventList>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbac:	f000 fe5c 	bl	800e868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dce9      	bgt.n	800db94 <prvUnlockQueue+0x60>
 800dbc0:	e000      	b.n	800dbc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	22ff      	movs	r2, #255	@ 0xff
 800dbc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dbcc:	f001 fcce 	bl	800f56c <vPortExitCritical>
}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbe0:	f001 fc92 	bl	800f508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d102      	bne.n	800dbf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dbec:	2301      	movs	r3, #1
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e001      	b.n	800dbf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbf6:	f001 fcb9 	bl	800f56c <vPortExitCritical>

	return xReturn;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc0c:	f001 fc7c 	bl	800f508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d102      	bne.n	800dc22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e001      	b.n	800dc26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc26:	f001 fca1 	bl	800f56c <vPortExitCritical>

	return xReturn;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e014      	b.n	800dc6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc44:	4a0f      	ldr	r2, [pc, #60]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10b      	bne.n	800dc68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc50:	490c      	ldr	r1, [pc, #48]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800dc84 <vQueueAddToRegistry+0x50>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc66:	e006      	b.n	800dc76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	d9e7      	bls.n	800dc44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	24000c9c 	.word	0x24000c9c

0800dc88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc98:	f001 fc36 	bl	800f508 <vPortEnterCritical>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dca2:	b25b      	sxtb	r3, r3
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d103      	bne.n	800dcb2 <vQueueWaitForMessageRestricted+0x2a>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcb8:	b25b      	sxtb	r3, r3
 800dcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcbe:	d103      	bne.n	800dcc8 <vQueueWaitForMessageRestricted+0x40>
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcc8:	f001 fc50 	bl	800f56c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d106      	bne.n	800dce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3324      	adds	r3, #36	@ 0x24
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fcb9 	bl	800e654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dce2:	6978      	ldr	r0, [r7, #20]
 800dce4:	f7ff ff26 	bl	800db34 <prvUnlockQueue>
	}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08e      	sub	sp, #56	@ 0x38
 800dcf4:	af04      	add	r7, sp, #16
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10b      	bne.n	800dd1c <xTaskCreateStatic+0x2c>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	623b      	str	r3, [r7, #32]
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10b      	bne.n	800dd3a <xTaskCreateStatic+0x4a>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	61fb      	str	r3, [r7, #28]
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd3a:	235c      	movs	r3, #92	@ 0x5c
 800dd3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd42:	d00b      	beq.n	800dd5c <xTaskCreateStatic+0x6c>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	61bb      	str	r3, [r7, #24]
}
 800dd56:	bf00      	nop
 800dd58:	bf00      	nop
 800dd5a:	e7fd      	b.n	800dd58 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd5c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01e      	beq.n	800dda2 <xTaskCreateStatic+0xb2>
 800dd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01b      	beq.n	800dda2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd72:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd76:	2202      	movs	r2, #2
 800dd78:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9303      	str	r3, [sp, #12]
 800dd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	f107 0314 	add.w	r3, r7, #20
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f850 	bl	800de3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd9c:	f000 f8de 	bl	800df5c <prvAddNewTaskToReadyList>
 800dda0:	e001      	b.n	800dda6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dda6:	697b      	ldr	r3, [r7, #20]
	}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3728      	adds	r7, #40	@ 0x28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b08c      	sub	sp, #48	@ 0x30
 800ddb4:	af04      	add	r7, sp, #16
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	603b      	str	r3, [r7, #0]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ddc0:	88fb      	ldrh	r3, [r7, #6]
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 fcc1 	bl	800f74c <pvPortMalloc>
 800ddca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddd2:	205c      	movs	r0, #92	@ 0x5c
 800ddd4:	f001 fcba 	bl	800f74c <pvPortMalloc>
 800ddd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	631a      	str	r2, [r3, #48]	@ 0x30
 800dde6:	e005      	b.n	800ddf4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dde8:	6978      	ldr	r0, [r7, #20]
 800ddea:	f001 fd7d 	bl	800f8e8 <vPortFree>
 800ddee:	e001      	b.n	800ddf4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d017      	beq.n	800de2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de02:	88fa      	ldrh	r2, [r7, #6]
 800de04:	2300      	movs	r3, #0
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f000 f80e 	bl	800de3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de1e:	69f8      	ldr	r0, [r7, #28]
 800de20:	f000 f89c 	bl	800df5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de24:	2301      	movs	r3, #1
 800de26:	61bb      	str	r3, [r7, #24]
 800de28:	e002      	b.n	800de30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de2a:	f04f 33ff 	mov.w	r3, #4294967295
 800de2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de30:	69bb      	ldr	r3, [r7, #24]
	}
 800de32:	4618      	mov	r0, r3
 800de34:	3720      	adds	r7, #32
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b088      	sub	sp, #32
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800de48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	461a      	mov	r2, r3
 800de52:	21a5      	movs	r1, #165	@ 0xa5
 800de54:	f004 ff8d 	bl	8012d72 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800de62:	440b      	add	r3, r1
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4413      	add	r3, r2
 800de68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	f023 0307 	bic.w	r3, r3, #7
 800de70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	f003 0307 	and.w	r3, r3, #7
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00b      	beq.n	800de94 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800de7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	617b      	str	r3, [r7, #20]
}
 800de8e:	bf00      	nop
 800de90:	bf00      	nop
 800de92:	e7fd      	b.n	800de90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d01f      	beq.n	800deda <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de9a:	2300      	movs	r3, #0
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	e012      	b.n	800dec6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	4413      	add	r3, r2
 800dea6:	7819      	ldrb	r1, [r3, #0]
 800dea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	4413      	add	r3, r2
 800deae:	3334      	adds	r3, #52	@ 0x34
 800deb0:	460a      	mov	r2, r1
 800deb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	4413      	add	r3, r2
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	3301      	adds	r3, #1
 800dec4:	61fb      	str	r3, [r7, #28]
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	2b0f      	cmp	r3, #15
 800deca:	d9e9      	bls.n	800dea0 <prvInitialiseNewTask+0x66>
 800decc:	e000      	b.n	800ded0 <prvInitialiseNewTask+0x96>
			{
				break;
 800dece:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ded0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ded8:	e003      	b.n	800dee2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800deda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee4:	2b37      	cmp	r3, #55	@ 0x37
 800dee6:	d901      	bls.n	800deec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dee8:	2337      	movs	r3, #55	@ 0x37
 800deea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800def0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800def2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800def6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800def8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defa:	2200      	movs	r2, #0
 800defc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	3304      	adds	r3, #4
 800df02:	4618      	mov	r0, r3
 800df04:	f7ff f966 	bl	800d1d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0a:	3318      	adds	r3, #24
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff f961 	bl	800d1d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df2a:	2200      	movs	r2, #0
 800df2c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df30:	2200      	movs	r2, #0
 800df32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df36:	683a      	ldr	r2, [r7, #0]
 800df38:	68f9      	ldr	r1, [r7, #12]
 800df3a:	69b8      	ldr	r0, [r7, #24]
 800df3c:	f001 f9b2 	bl	800f2a4 <pxPortInitialiseStack>
 800df40:	4602      	mov	r2, r0
 800df42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df52:	bf00      	nop
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
	...

0800df5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df64:	f001 fad0 	bl	800f508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df68:	4b2d      	ldr	r3, [pc, #180]	@ (800e020 <prvAddNewTaskToReadyList+0xc4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3301      	adds	r3, #1
 800df6e:	4a2c      	ldr	r2, [pc, #176]	@ (800e020 <prvAddNewTaskToReadyList+0xc4>)
 800df70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df72:	4b2c      	ldr	r3, [pc, #176]	@ (800e024 <prvAddNewTaskToReadyList+0xc8>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d109      	bne.n	800df8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df7a:	4a2a      	ldr	r2, [pc, #168]	@ (800e024 <prvAddNewTaskToReadyList+0xc8>)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df80:	4b27      	ldr	r3, [pc, #156]	@ (800e020 <prvAddNewTaskToReadyList+0xc4>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d110      	bne.n	800dfaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df88:	f000 fc92 	bl	800e8b0 <prvInitialiseTaskLists>
 800df8c:	e00d      	b.n	800dfaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df8e:	4b26      	ldr	r3, [pc, #152]	@ (800e028 <prvAddNewTaskToReadyList+0xcc>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df96:	4b23      	ldr	r3, [pc, #140]	@ (800e024 <prvAddNewTaskToReadyList+0xc8>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d802      	bhi.n	800dfaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfa4:	4a1f      	ldr	r2, [pc, #124]	@ (800e024 <prvAddNewTaskToReadyList+0xc8>)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfaa:	4b20      	ldr	r3, [pc, #128]	@ (800e02c <prvAddNewTaskToReadyList+0xd0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	4a1e      	ldr	r2, [pc, #120]	@ (800e02c <prvAddNewTaskToReadyList+0xd0>)
 800dfb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dfb4:	4b1d      	ldr	r3, [pc, #116]	@ (800e02c <prvAddNewTaskToReadyList+0xd0>)
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfc0:	4b1b      	ldr	r3, [pc, #108]	@ (800e030 <prvAddNewTaskToReadyList+0xd4>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d903      	bls.n	800dfd0 <prvAddNewTaskToReadyList+0x74>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfcc:	4a18      	ldr	r2, [pc, #96]	@ (800e030 <prvAddNewTaskToReadyList+0xd4>)
 800dfce:	6013      	str	r3, [r2, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4a15      	ldr	r2, [pc, #84]	@ (800e034 <prvAddNewTaskToReadyList+0xd8>)
 800dfde:	441a      	add	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4610      	mov	r0, r2
 800dfe8:	f7ff f901 	bl	800d1ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfec:	f001 fabe 	bl	800f56c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dff0:	4b0d      	ldr	r3, [pc, #52]	@ (800e028 <prvAddNewTaskToReadyList+0xcc>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00e      	beq.n	800e016 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dff8:	4b0a      	ldr	r3, [pc, #40]	@ (800e024 <prvAddNewTaskToReadyList+0xc8>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e002:	429a      	cmp	r2, r3
 800e004:	d207      	bcs.n	800e016 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e006:	4b0c      	ldr	r3, [pc, #48]	@ (800e038 <prvAddNewTaskToReadyList+0xdc>)
 800e008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e016:	bf00      	nop
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	240011b0 	.word	0x240011b0
 800e024:	24000cdc 	.word	0x24000cdc
 800e028:	240011bc 	.word	0x240011bc
 800e02c:	240011cc 	.word	0x240011cc
 800e030:	240011b8 	.word	0x240011b8
 800e034:	24000ce0 	.word	0x24000ce0
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e044:	f001 fa60 	bl	800f508 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d102      	bne.n	800e054 <vTaskDelete+0x18>
 800e04e:	4b2d      	ldr	r3, [pc, #180]	@ (800e104 <vTaskDelete+0xc8>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	e000      	b.n	800e056 <vTaskDelete+0x1a>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	3304      	adds	r3, #4
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff f923 	bl	800d2a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3318      	adds	r3, #24
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff f91a 	bl	800d2a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e074:	4b24      	ldr	r3, [pc, #144]	@ (800e108 <vTaskDelete+0xcc>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3301      	adds	r3, #1
 800e07a:	4a23      	ldr	r2, [pc, #140]	@ (800e108 <vTaskDelete+0xcc>)
 800e07c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e07e:	4b21      	ldr	r3, [pc, #132]	@ (800e104 <vTaskDelete+0xc8>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	429a      	cmp	r2, r3
 800e086:	d10b      	bne.n	800e0a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3304      	adds	r3, #4
 800e08c:	4619      	mov	r1, r3
 800e08e:	481f      	ldr	r0, [pc, #124]	@ (800e10c <vTaskDelete+0xd0>)
 800e090:	f7ff f8ad 	bl	800d1ee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e094:	4b1e      	ldr	r3, [pc, #120]	@ (800e110 <vTaskDelete+0xd4>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	4a1d      	ldr	r2, [pc, #116]	@ (800e110 <vTaskDelete+0xd4>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	e009      	b.n	800e0b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e0a0:	4b1c      	ldr	r3, [pc, #112]	@ (800e114 <vTaskDelete+0xd8>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	4a1b      	ldr	r2, [pc, #108]	@ (800e114 <vTaskDelete+0xd8>)
 800e0a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fc6e 	bl	800e98c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e0b0:	f000 fc9c 	bl	800e9ec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e0b4:	f001 fa5a 	bl	800f56c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e0b8:	4b17      	ldr	r3, [pc, #92]	@ (800e118 <vTaskDelete+0xdc>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d01c      	beq.n	800e0fa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e0c0:	4b10      	ldr	r3, [pc, #64]	@ (800e104 <vTaskDelete+0xc8>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d117      	bne.n	800e0fa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e0ca:	4b14      	ldr	r3, [pc, #80]	@ (800e11c <vTaskDelete+0xe0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00b      	beq.n	800e0ea <vTaskDelete+0xae>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	60bb      	str	r3, [r7, #8]
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop
 800e0e8:	e7fd      	b.n	800e0e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e120 <vTaskDelete+0xe4>)
 800e0ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0f0:	601a      	str	r2, [r3, #0]
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0fa:	bf00      	nop
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	24000cdc 	.word	0x24000cdc
 800e108:	240011cc 	.word	0x240011cc
 800e10c:	24001184 	.word	0x24001184
 800e110:	24001198 	.word	0x24001198
 800e114:	240011b0 	.word	0x240011b0
 800e118:	240011bc 	.word	0x240011bc
 800e11c:	240011d8 	.word	0x240011d8
 800e120:	e000ed04 	.word	0xe000ed04

0800e124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e12c:	2300      	movs	r3, #0
 800e12e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d018      	beq.n	800e168 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e136:	4b14      	ldr	r3, [pc, #80]	@ (800e188 <vTaskDelay+0x64>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00b      	beq.n	800e156 <vTaskDelay+0x32>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	60bb      	str	r3, [r7, #8]
}
 800e150:	bf00      	nop
 800e152:	bf00      	nop
 800e154:	e7fd      	b.n	800e152 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e156:	f000 f883 	bl	800e260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e15a:	2100      	movs	r1, #0
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 fcf3 	bl	800eb48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e162:	f000 f88b 	bl	800e27c <xTaskResumeAll>
 800e166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d107      	bne.n	800e17e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e16e:	4b07      	ldr	r3, [pc, #28]	@ (800e18c <vTaskDelay+0x68>)
 800e170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	240011d8 	.word	0x240011d8
 800e18c:	e000ed04 	.word	0xe000ed04

0800e190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b08a      	sub	sp, #40	@ 0x28
 800e194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e196:	2300      	movs	r3, #0
 800e198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e19e:	463a      	mov	r2, r7
 800e1a0:	1d39      	adds	r1, r7, #4
 800e1a2:	f107 0308 	add.w	r3, r7, #8
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fe ffc0 	bl	800d12c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	9202      	str	r2, [sp, #8]
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	460a      	mov	r2, r1
 800e1be:	4922      	ldr	r1, [pc, #136]	@ (800e248 <vTaskStartScheduler+0xb8>)
 800e1c0:	4822      	ldr	r0, [pc, #136]	@ (800e24c <vTaskStartScheduler+0xbc>)
 800e1c2:	f7ff fd95 	bl	800dcf0 <xTaskCreateStatic>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	4a21      	ldr	r2, [pc, #132]	@ (800e250 <vTaskStartScheduler+0xc0>)
 800e1ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1cc:	4b20      	ldr	r3, [pc, #128]	@ (800e250 <vTaskStartScheduler+0xc0>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	617b      	str	r3, [r7, #20]
 800e1d8:	e001      	b.n	800e1de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d102      	bne.n	800e1ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1e4:	f000 fd04 	bl	800ebf0 <xTimerCreateTimerTask>
 800e1e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d116      	bne.n	800e21e <vTaskStartScheduler+0x8e>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	613b      	str	r3, [r7, #16]
}
 800e202:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e204:	4b13      	ldr	r3, [pc, #76]	@ (800e254 <vTaskStartScheduler+0xc4>)
 800e206:	f04f 32ff 	mov.w	r2, #4294967295
 800e20a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e20c:	4b12      	ldr	r3, [pc, #72]	@ (800e258 <vTaskStartScheduler+0xc8>)
 800e20e:	2201      	movs	r2, #1
 800e210:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e212:	4b12      	ldr	r3, [pc, #72]	@ (800e25c <vTaskStartScheduler+0xcc>)
 800e214:	2200      	movs	r2, #0
 800e216:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e218:	f001 f8d2 	bl	800f3c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e21c:	e00f      	b.n	800e23e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e224:	d10b      	bne.n	800e23e <vTaskStartScheduler+0xae>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22a:	f383 8811 	msr	BASEPRI, r3
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	60fb      	str	r3, [r7, #12]
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	e7fd      	b.n	800e23a <vTaskStartScheduler+0xaa>
}
 800e23e:	bf00      	nop
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	0801536c 	.word	0x0801536c
 800e24c:	0800e881 	.word	0x0800e881
 800e250:	240011d4 	.word	0x240011d4
 800e254:	240011d0 	.word	0x240011d0
 800e258:	240011bc 	.word	0x240011bc
 800e25c:	240011b4 	.word	0x240011b4

0800e260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e260:	b480      	push	{r7}
 800e262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e264:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <vTaskSuspendAll+0x18>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	3301      	adds	r3, #1
 800e26a:	4a03      	ldr	r2, [pc, #12]	@ (800e278 <vTaskSuspendAll+0x18>)
 800e26c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e26e:	bf00      	nop
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	240011d8 	.word	0x240011d8

0800e27c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e286:	2300      	movs	r3, #0
 800e288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e28a:	4b42      	ldr	r3, [pc, #264]	@ (800e394 <xTaskResumeAll+0x118>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xTaskResumeAll+0x2e>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	603b      	str	r3, [r7, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2aa:	f001 f92d 	bl	800f508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2ae:	4b39      	ldr	r3, [pc, #228]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	4a37      	ldr	r2, [pc, #220]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2b8:	4b36      	ldr	r3, [pc, #216]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d162      	bne.n	800e386 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2c0:	4b35      	ldr	r3, [pc, #212]	@ (800e398 <xTaskResumeAll+0x11c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d05e      	beq.n	800e386 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2c8:	e02f      	b.n	800e32a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ca:	4b34      	ldr	r3, [pc, #208]	@ (800e39c <xTaskResumeAll+0x120>)
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3318      	adds	r3, #24
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe ffe6 	bl	800d2a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe ffe1 	bl	800d2a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ea:	4b2d      	ldr	r3, [pc, #180]	@ (800e3a0 <xTaskResumeAll+0x124>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d903      	bls.n	800e2fa <xTaskResumeAll+0x7e>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e3a0 <xTaskResumeAll+0x124>)
 800e2f8:	6013      	str	r3, [r2, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fe:	4613      	mov	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4a27      	ldr	r2, [pc, #156]	@ (800e3a4 <xTaskResumeAll+0x128>)
 800e308:	441a      	add	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fe ff6c 	bl	800d1ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e31a:	4b23      	ldr	r3, [pc, #140]	@ (800e3a8 <xTaskResumeAll+0x12c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	429a      	cmp	r2, r3
 800e322:	d302      	bcc.n	800e32a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e324:	4b21      	ldr	r3, [pc, #132]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e326:	2201      	movs	r2, #1
 800e328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e32a:	4b1c      	ldr	r3, [pc, #112]	@ (800e39c <xTaskResumeAll+0x120>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1cb      	bne.n	800e2ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e338:	f000 fb58 	bl	800e9ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e33c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3b0 <xTaskResumeAll+0x134>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d010      	beq.n	800e36a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e348:	f000 f846 	bl	800e3d8 <xTaskIncrementTick>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e352:	4b16      	ldr	r3, [pc, #88]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e354:	2201      	movs	r2, #1
 800e356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	3b01      	subs	r3, #1
 800e35c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f1      	bne.n	800e348 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e364:	4b12      	ldr	r3, [pc, #72]	@ (800e3b0 <xTaskResumeAll+0x134>)
 800e366:	2200      	movs	r2, #0
 800e368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e36a:	4b10      	ldr	r3, [pc, #64]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d009      	beq.n	800e386 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e372:	2301      	movs	r3, #1
 800e374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <xTaskResumeAll+0x138>)
 800e378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e386:	f001 f8f1 	bl	800f56c <vPortExitCritical>

	return xAlreadyYielded;
 800e38a:	68bb      	ldr	r3, [r7, #8]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	240011d8 	.word	0x240011d8
 800e398:	240011b0 	.word	0x240011b0
 800e39c:	24001170 	.word	0x24001170
 800e3a0:	240011b8 	.word	0x240011b8
 800e3a4:	24000ce0 	.word	0x24000ce0
 800e3a8:	24000cdc 	.word	0x24000cdc
 800e3ac:	240011c4 	.word	0x240011c4
 800e3b0:	240011c0 	.word	0x240011c0
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3be:	4b05      	ldr	r3, [pc, #20]	@ (800e3d4 <xTaskGetTickCount+0x1c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3c4:	687b      	ldr	r3, [r7, #4]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	240011b4 	.word	0x240011b4

0800e3d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e2:	4b4f      	ldr	r3, [pc, #316]	@ (800e520 <xTaskIncrementTick+0x148>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f040 8090 	bne.w	800e50c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3ec:	4b4d      	ldr	r3, [pc, #308]	@ (800e524 <xTaskIncrementTick+0x14c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3f4:	4a4b      	ldr	r2, [pc, #300]	@ (800e524 <xTaskIncrementTick+0x14c>)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d121      	bne.n	800e444 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e400:	4b49      	ldr	r3, [pc, #292]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00b      	beq.n	800e422 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	603b      	str	r3, [r7, #0]
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	e7fd      	b.n	800e41e <xTaskIncrementTick+0x46>
 800e422:	4b41      	ldr	r3, [pc, #260]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	4b40      	ldr	r3, [pc, #256]	@ (800e52c <xTaskIncrementTick+0x154>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a3e      	ldr	r2, [pc, #248]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	4a3e      	ldr	r2, [pc, #248]	@ (800e52c <xTaskIncrementTick+0x154>)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	4b3e      	ldr	r3, [pc, #248]	@ (800e530 <xTaskIncrementTick+0x158>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3301      	adds	r3, #1
 800e43c:	4a3c      	ldr	r2, [pc, #240]	@ (800e530 <xTaskIncrementTick+0x158>)
 800e43e:	6013      	str	r3, [r2, #0]
 800e440:	f000 fad4 	bl	800e9ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e444:	4b3b      	ldr	r3, [pc, #236]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d349      	bcc.n	800e4e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e44e:	4b36      	ldr	r3, [pc, #216]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d104      	bne.n	800e462 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e458:	4b36      	ldr	r3, [pc, #216]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	601a      	str	r2, [r3, #0]
					break;
 800e460:	e03f      	b.n	800e4e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e462:	4b31      	ldr	r3, [pc, #196]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	429a      	cmp	r2, r3
 800e478:	d203      	bcs.n	800e482 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e47a:	4a2e      	ldr	r2, [pc, #184]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e480:	e02f      	b.n	800e4e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	3304      	adds	r3, #4
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe ff0e 	bl	800d2a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3318      	adds	r3, #24
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fe ff05 	bl	800d2a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a2:	4b25      	ldr	r3, [pc, #148]	@ (800e538 <xTaskIncrementTick+0x160>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d903      	bls.n	800e4b2 <xTaskIncrementTick+0xda>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ae:	4a22      	ldr	r2, [pc, #136]	@ (800e538 <xTaskIncrementTick+0x160>)
 800e4b0:	6013      	str	r3, [r2, #0]
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4a1f      	ldr	r2, [pc, #124]	@ (800e53c <xTaskIncrementTick+0x164>)
 800e4c0:	441a      	add	r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	f7fe fe90 	bl	800d1ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e540 <xTaskIncrementTick+0x168>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d3b8      	bcc.n	800e44e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e0:	e7b5      	b.n	800e44e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4e2:	4b17      	ldr	r3, [pc, #92]	@ (800e540 <xTaskIncrementTick+0x168>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e8:	4914      	ldr	r1, [pc, #80]	@ (800e53c <xTaskIncrementTick+0x164>)
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	440b      	add	r3, r1
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d901      	bls.n	800e4fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4fe:	4b11      	ldr	r3, [pc, #68]	@ (800e544 <xTaskIncrementTick+0x16c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d007      	beq.n	800e516 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e506:	2301      	movs	r3, #1
 800e508:	617b      	str	r3, [r7, #20]
 800e50a:	e004      	b.n	800e516 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e50c:	4b0e      	ldr	r3, [pc, #56]	@ (800e548 <xTaskIncrementTick+0x170>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3301      	adds	r3, #1
 800e512:	4a0d      	ldr	r2, [pc, #52]	@ (800e548 <xTaskIncrementTick+0x170>)
 800e514:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e516:	697b      	ldr	r3, [r7, #20]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	240011d8 	.word	0x240011d8
 800e524:	240011b4 	.word	0x240011b4
 800e528:	24001168 	.word	0x24001168
 800e52c:	2400116c 	.word	0x2400116c
 800e530:	240011c8 	.word	0x240011c8
 800e534:	240011d0 	.word	0x240011d0
 800e538:	240011b8 	.word	0x240011b8
 800e53c:	24000ce0 	.word	0x24000ce0
 800e540:	24000cdc 	.word	0x24000cdc
 800e544:	240011c4 	.word	0x240011c4
 800e548:	240011c0 	.word	0x240011c0

0800e54c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e552:	4b28      	ldr	r3, [pc, #160]	@ (800e5f4 <vTaskSwitchContext+0xa8>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e55a:	4b27      	ldr	r3, [pc, #156]	@ (800e5f8 <vTaskSwitchContext+0xac>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e560:	e042      	b.n	800e5e8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e562:	4b25      	ldr	r3, [pc, #148]	@ (800e5f8 <vTaskSwitchContext+0xac>)
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e568:	4b24      	ldr	r3, [pc, #144]	@ (800e5fc <vTaskSwitchContext+0xb0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	e011      	b.n	800e594 <vTaskSwitchContext+0x48>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10b      	bne.n	800e58e <vTaskSwitchContext+0x42>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	607b      	str	r3, [r7, #4]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <vTaskSwitchContext+0x3e>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3b01      	subs	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	491a      	ldr	r1, [pc, #104]	@ (800e600 <vTaskSwitchContext+0xb4>)
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	440b      	add	r3, r1
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0e3      	beq.n	800e570 <vTaskSwitchContext+0x24>
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4a13      	ldr	r2, [pc, #76]	@ (800e600 <vTaskSwitchContext+0xb4>)
 800e5b4:	4413      	add	r3, r2
 800e5b6:	60bb      	str	r3, [r7, #8]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	605a      	str	r2, [r3, #4]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d104      	bne.n	800e5d8 <vTaskSwitchContext+0x8c>
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	605a      	str	r2, [r3, #4]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	4a09      	ldr	r2, [pc, #36]	@ (800e604 <vTaskSwitchContext+0xb8>)
 800e5e0:	6013      	str	r3, [r2, #0]
 800e5e2:	4a06      	ldr	r2, [pc, #24]	@ (800e5fc <vTaskSwitchContext+0xb0>)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6013      	str	r3, [r2, #0]
}
 800e5e8:	bf00      	nop
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	240011d8 	.word	0x240011d8
 800e5f8:	240011c4 	.word	0x240011c4
 800e5fc:	240011b8 	.word	0x240011b8
 800e600:	24000ce0 	.word	0x24000ce0
 800e604:	24000cdc 	.word	0x24000cdc

0800e608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10b      	bne.n	800e630 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60fb      	str	r3, [r7, #12]
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	e7fd      	b.n	800e62c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e630:	4b07      	ldr	r3, [pc, #28]	@ (800e650 <vTaskPlaceOnEventList+0x48>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3318      	adds	r3, #24
 800e636:	4619      	mov	r1, r3
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7fe fdfc 	bl	800d236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e63e:	2101      	movs	r1, #1
 800e640:	6838      	ldr	r0, [r7, #0]
 800e642:	f000 fa81 	bl	800eb48 <prvAddCurrentTaskToDelayedList>
}
 800e646:	bf00      	nop
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	24000cdc 	.word	0x24000cdc

0800e654 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10b      	bne.n	800e67e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	617b      	str	r3, [r7, #20]
}
 800e678:	bf00      	nop
 800e67a:	bf00      	nop
 800e67c:	e7fd      	b.n	800e67a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e67e:	4b0a      	ldr	r3, [pc, #40]	@ (800e6a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3318      	adds	r3, #24
 800e684:	4619      	mov	r1, r3
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe fdb1 	bl	800d1ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d002      	beq.n	800e698 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e692:	f04f 33ff 	mov.w	r3, #4294967295
 800e696:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e698:	6879      	ldr	r1, [r7, #4]
 800e69a:	68b8      	ldr	r0, [r7, #8]
 800e69c:	f000 fa54 	bl	800eb48 <prvAddCurrentTaskToDelayedList>
	}
 800e6a0:	bf00      	nop
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	24000cdc 	.word	0x24000cdc

0800e6ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b086      	sub	sp, #24
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60fb      	str	r3, [r7, #12]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	3318      	adds	r3, #24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe fde2 	bl	800d2a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e75c <xTaskRemoveFromEventList+0xb0>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d11d      	bne.n	800e728 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe fdd9 	bl	800d2a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fa:	4b19      	ldr	r3, [pc, #100]	@ (800e760 <xTaskRemoveFromEventList+0xb4>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d903      	bls.n	800e70a <xTaskRemoveFromEventList+0x5e>
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e706:	4a16      	ldr	r2, [pc, #88]	@ (800e760 <xTaskRemoveFromEventList+0xb4>)
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70e:	4613      	mov	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	009b      	lsls	r3, r3, #2
 800e716:	4a13      	ldr	r2, [pc, #76]	@ (800e764 <xTaskRemoveFromEventList+0xb8>)
 800e718:	441a      	add	r2, r3
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	3304      	adds	r3, #4
 800e71e:	4619      	mov	r1, r3
 800e720:	4610      	mov	r0, r2
 800e722:	f7fe fd64 	bl	800d1ee <vListInsertEnd>
 800e726:	e005      	b.n	800e734 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	3318      	adds	r3, #24
 800e72c:	4619      	mov	r1, r3
 800e72e:	480e      	ldr	r0, [pc, #56]	@ (800e768 <xTaskRemoveFromEventList+0xbc>)
 800e730:	f7fe fd5d 	bl	800d1ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e738:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <xTaskRemoveFromEventList+0xc0>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73e:	429a      	cmp	r2, r3
 800e740:	d905      	bls.n	800e74e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e746:	4b0a      	ldr	r3, [pc, #40]	@ (800e770 <xTaskRemoveFromEventList+0xc4>)
 800e748:	2201      	movs	r2, #1
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	e001      	b.n	800e752 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e74e:	2300      	movs	r3, #0
 800e750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e752:	697b      	ldr	r3, [r7, #20]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	240011d8 	.word	0x240011d8
 800e760:	240011b8 	.word	0x240011b8
 800e764:	24000ce0 	.word	0x24000ce0
 800e768:	24001170 	.word	0x24001170
 800e76c:	24000cdc 	.word	0x24000cdc
 800e770:	240011c4 	.word	0x240011c4

0800e774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e77c:	4b06      	ldr	r3, [pc, #24]	@ (800e798 <vTaskInternalSetTimeOutState+0x24>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e784:	4b05      	ldr	r3, [pc, #20]	@ (800e79c <vTaskInternalSetTimeOutState+0x28>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	240011c8 	.word	0x240011c8
 800e79c:	240011b4 	.word	0x240011b4

0800e7a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b088      	sub	sp, #32
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10b      	bne.n	800e7c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	613b      	str	r3, [r7, #16]
}
 800e7c2:	bf00      	nop
 800e7c4:	bf00      	nop
 800e7c6:	e7fd      	b.n	800e7c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10b      	bne.n	800e7e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	60fb      	str	r3, [r7, #12]
}
 800e7e0:	bf00      	nop
 800e7e2:	bf00      	nop
 800e7e4:	e7fd      	b.n	800e7e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e7e6:	f000 fe8f 	bl	800f508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800e860 <xTaskCheckForTimeOut+0xc0>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d102      	bne.n	800e80a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e804:	2300      	movs	r3, #0
 800e806:	61fb      	str	r3, [r7, #28]
 800e808:	e023      	b.n	800e852 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	4b15      	ldr	r3, [pc, #84]	@ (800e864 <xTaskCheckForTimeOut+0xc4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429a      	cmp	r2, r3
 800e814:	d007      	beq.n	800e826 <xTaskCheckForTimeOut+0x86>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d302      	bcc.n	800e826 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e820:	2301      	movs	r3, #1
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	e015      	b.n	800e852 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d20b      	bcs.n	800e848 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ff99 	bl	800e774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e842:	2300      	movs	r3, #0
 800e844:	61fb      	str	r3, [r7, #28]
 800e846:	e004      	b.n	800e852 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e84e:	2301      	movs	r3, #1
 800e850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e852:	f000 fe8b 	bl	800f56c <vPortExitCritical>

	return xReturn;
 800e856:	69fb      	ldr	r3, [r7, #28]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	240011b4 	.word	0x240011b4
 800e864:	240011c8 	.word	0x240011c8

0800e868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e86c:	4b03      	ldr	r3, [pc, #12]	@ (800e87c <vTaskMissedYield+0x14>)
 800e86e:	2201      	movs	r2, #1
 800e870:	601a      	str	r2, [r3, #0]
}
 800e872:	bf00      	nop
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	240011c4 	.word	0x240011c4

0800e880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e888:	f000 f852 	bl	800e930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e88c:	4b06      	ldr	r3, [pc, #24]	@ (800e8a8 <prvIdleTask+0x28>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d9f9      	bls.n	800e888 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e894:	4b05      	ldr	r3, [pc, #20]	@ (800e8ac <prvIdleTask+0x2c>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8a4:	e7f0      	b.n	800e888 <prvIdleTask+0x8>
 800e8a6:	bf00      	nop
 800e8a8:	24000ce0 	.word	0x24000ce0
 800e8ac:	e000ed04 	.word	0xe000ed04

0800e8b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	607b      	str	r3, [r7, #4]
 800e8ba:	e00c      	b.n	800e8d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4a12      	ldr	r2, [pc, #72]	@ (800e910 <prvInitialiseTaskLists+0x60>)
 800e8c8:	4413      	add	r3, r2
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fe fc62 	bl	800d194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	607b      	str	r3, [r7, #4]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b37      	cmp	r3, #55	@ 0x37
 800e8da:	d9ef      	bls.n	800e8bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8dc:	480d      	ldr	r0, [pc, #52]	@ (800e914 <prvInitialiseTaskLists+0x64>)
 800e8de:	f7fe fc59 	bl	800d194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8e2:	480d      	ldr	r0, [pc, #52]	@ (800e918 <prvInitialiseTaskLists+0x68>)
 800e8e4:	f7fe fc56 	bl	800d194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8e8:	480c      	ldr	r0, [pc, #48]	@ (800e91c <prvInitialiseTaskLists+0x6c>)
 800e8ea:	f7fe fc53 	bl	800d194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8ee:	480c      	ldr	r0, [pc, #48]	@ (800e920 <prvInitialiseTaskLists+0x70>)
 800e8f0:	f7fe fc50 	bl	800d194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8f4:	480b      	ldr	r0, [pc, #44]	@ (800e924 <prvInitialiseTaskLists+0x74>)
 800e8f6:	f7fe fc4d 	bl	800d194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e928 <prvInitialiseTaskLists+0x78>)
 800e8fc:	4a05      	ldr	r2, [pc, #20]	@ (800e914 <prvInitialiseTaskLists+0x64>)
 800e8fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e900:	4b0a      	ldr	r3, [pc, #40]	@ (800e92c <prvInitialiseTaskLists+0x7c>)
 800e902:	4a05      	ldr	r2, [pc, #20]	@ (800e918 <prvInitialiseTaskLists+0x68>)
 800e904:	601a      	str	r2, [r3, #0]
}
 800e906:	bf00      	nop
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	24000ce0 	.word	0x24000ce0
 800e914:	24001140 	.word	0x24001140
 800e918:	24001154 	.word	0x24001154
 800e91c:	24001170 	.word	0x24001170
 800e920:	24001184 	.word	0x24001184
 800e924:	2400119c 	.word	0x2400119c
 800e928:	24001168 	.word	0x24001168
 800e92c:	2400116c 	.word	0x2400116c

0800e930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e936:	e019      	b.n	800e96c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e938:	f000 fde6 	bl	800f508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e93c:	4b10      	ldr	r3, [pc, #64]	@ (800e980 <prvCheckTasksWaitingTermination+0x50>)
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	3304      	adds	r3, #4
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe fcad 	bl	800d2a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e94e:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <prvCheckTasksWaitingTermination+0x54>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3b01      	subs	r3, #1
 800e954:	4a0b      	ldr	r2, [pc, #44]	@ (800e984 <prvCheckTasksWaitingTermination+0x54>)
 800e956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e958:	4b0b      	ldr	r3, [pc, #44]	@ (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3b01      	subs	r3, #1
 800e95e:	4a0a      	ldr	r2, [pc, #40]	@ (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e962:	f000 fe03 	bl	800f56c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f810 	bl	800e98c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e96c:	4b06      	ldr	r3, [pc, #24]	@ (800e988 <prvCheckTasksWaitingTermination+0x58>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e1      	bne.n	800e938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	24001184 	.word	0x24001184
 800e984:	240011b0 	.word	0x240011b0
 800e988:	24001198 	.word	0x24001198

0800e98c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d108      	bne.n	800e9b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 ffa0 	bl	800f8e8 <vPortFree>
				vPortFree( pxTCB );
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 ff9d 	bl	800f8e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9ae:	e019      	b.n	800e9e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d103      	bne.n	800e9c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 ff94 	bl	800f8e8 <vPortFree>
	}
 800e9c0:	e010      	b.n	800e9e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d00b      	beq.n	800e9e4 <prvDeleteTCB+0x58>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	60fb      	str	r3, [r7, #12]
}
 800e9de:	bf00      	nop
 800e9e0:	bf00      	nop
 800e9e2:	e7fd      	b.n	800e9e0 <prvDeleteTCB+0x54>
	}
 800e9e4:	bf00      	nop
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800ea24 <prvResetNextTaskUnblockTime+0x38>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d104      	bne.n	800ea06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ea28 <prvResetNextTaskUnblockTime+0x3c>)
 800e9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ea02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea04:	e008      	b.n	800ea18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea06:	4b07      	ldr	r3, [pc, #28]	@ (800ea24 <prvResetNextTaskUnblockTime+0x38>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	4a04      	ldr	r2, [pc, #16]	@ (800ea28 <prvResetNextTaskUnblockTime+0x3c>)
 800ea16:	6013      	str	r3, [r2, #0]
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	24001168 	.word	0x24001168
 800ea28:	240011d0 	.word	0x240011d0

0800ea2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea32:	4b0b      	ldr	r3, [pc, #44]	@ (800ea60 <xTaskGetSchedulerState+0x34>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d102      	bne.n	800ea40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	607b      	str	r3, [r7, #4]
 800ea3e:	e008      	b.n	800ea52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea40:	4b08      	ldr	r3, [pc, #32]	@ (800ea64 <xTaskGetSchedulerState+0x38>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d102      	bne.n	800ea4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	607b      	str	r3, [r7, #4]
 800ea4c:	e001      	b.n	800ea52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea52:	687b      	ldr	r3, [r7, #4]
	}
 800ea54:	4618      	mov	r0, r3
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr
 800ea60:	240011bc 	.word	0x240011bc
 800ea64:	240011d8 	.word	0x240011d8

0800ea68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ea74:	2300      	movs	r3, #0
 800ea76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d058      	beq.n	800eb30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ea7e:	4b2f      	ldr	r3, [pc, #188]	@ (800eb3c <xTaskPriorityDisinherit+0xd4>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d00b      	beq.n	800eaa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	60fb      	str	r3, [r7, #12]
}
 800ea9a:	bf00      	nop
 800ea9c:	bf00      	nop
 800ea9e:	e7fd      	b.n	800ea9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10b      	bne.n	800eac0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaac:	f383 8811 	msr	BASEPRI, r3
 800eab0:	f3bf 8f6f 	isb	sy
 800eab4:	f3bf 8f4f 	dsb	sy
 800eab8:	60bb      	str	r3, [r7, #8]
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	e7fd      	b.n	800eabc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eac4:	1e5a      	subs	r2, r3, #1
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d02c      	beq.n	800eb30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d128      	bne.n	800eb30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	3304      	adds	r3, #4
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fe fbe0 	bl	800d2a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb00:	4b0f      	ldr	r3, [pc, #60]	@ (800eb40 <xTaskPriorityDisinherit+0xd8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d903      	bls.n	800eb10 <xTaskPriorityDisinherit+0xa8>
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb0c:	4a0c      	ldr	r2, [pc, #48]	@ (800eb40 <xTaskPriorityDisinherit+0xd8>)
 800eb0e:	6013      	str	r3, [r2, #0]
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb14:	4613      	mov	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	4413      	add	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4a09      	ldr	r2, [pc, #36]	@ (800eb44 <xTaskPriorityDisinherit+0xdc>)
 800eb1e:	441a      	add	r2, r3
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	3304      	adds	r3, #4
 800eb24:	4619      	mov	r1, r3
 800eb26:	4610      	mov	r0, r2
 800eb28:	f7fe fb61 	bl	800d1ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb30:	697b      	ldr	r3, [r7, #20]
	}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	24000cdc 	.word	0x24000cdc
 800eb40:	240011b8 	.word	0x240011b8
 800eb44:	24000ce0 	.word	0x24000ce0

0800eb48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eb52:	4b21      	ldr	r3, [pc, #132]	@ (800ebd8 <prvAddCurrentTaskToDelayedList+0x90>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb58:	4b20      	ldr	r3, [pc, #128]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fe fba2 	bl	800d2a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6a:	d10a      	bne.n	800eb82 <prvAddCurrentTaskToDelayedList+0x3a>
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb72:	4b1a      	ldr	r3, [pc, #104]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4819      	ldr	r0, [pc, #100]	@ (800ebe0 <prvAddCurrentTaskToDelayedList+0x98>)
 800eb7c:	f7fe fb37 	bl	800d1ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb80:	e026      	b.n	800ebd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4413      	add	r3, r2
 800eb88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb8a:	4b14      	ldr	r3, [pc, #80]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d209      	bcs.n	800ebae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb9a:	4b12      	ldr	r3, [pc, #72]	@ (800ebe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x94>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3304      	adds	r3, #4
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	f7fe fb45 	bl	800d236 <vListInsert>
}
 800ebac:	e010      	b.n	800ebd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebae:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x94>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7fe fb3b 	bl	800d236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ebc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ebec <prvAddCurrentTaskToDelayedList+0xa4>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d202      	bcs.n	800ebd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ebca:	4a08      	ldr	r2, [pc, #32]	@ (800ebec <prvAddCurrentTaskToDelayedList+0xa4>)
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	6013      	str	r3, [r2, #0]
}
 800ebd0:	bf00      	nop
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	240011b4 	.word	0x240011b4
 800ebdc:	24000cdc 	.word	0x24000cdc
 800ebe0:	2400119c 	.word	0x2400119c
 800ebe4:	2400116c 	.word	0x2400116c
 800ebe8:	24001168 	.word	0x24001168
 800ebec:	240011d0 	.word	0x240011d0

0800ebf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08a      	sub	sp, #40	@ 0x28
 800ebf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ebfa:	f000 fb13 	bl	800f224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ebfe:	4b1d      	ldr	r3, [pc, #116]	@ (800ec74 <xTimerCreateTimerTask+0x84>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d021      	beq.n	800ec4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec06:	2300      	movs	r3, #0
 800ec08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec0e:	1d3a      	adds	r2, r7, #4
 800ec10:	f107 0108 	add.w	r1, r7, #8
 800ec14:	f107 030c 	add.w	r3, r7, #12
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fe faa1 	bl	800d160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	9202      	str	r2, [sp, #8]
 800ec26:	9301      	str	r3, [sp, #4]
 800ec28:	2302      	movs	r3, #2
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	460a      	mov	r2, r1
 800ec30:	4911      	ldr	r1, [pc, #68]	@ (800ec78 <xTimerCreateTimerTask+0x88>)
 800ec32:	4812      	ldr	r0, [pc, #72]	@ (800ec7c <xTimerCreateTimerTask+0x8c>)
 800ec34:	f7ff f85c 	bl	800dcf0 <xTaskCreateStatic>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	4a11      	ldr	r2, [pc, #68]	@ (800ec80 <xTimerCreateTimerTask+0x90>)
 800ec3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ec3e:	4b10      	ldr	r3, [pc, #64]	@ (800ec80 <xTimerCreateTimerTask+0x90>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ec46:	2301      	movs	r3, #1
 800ec48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10b      	bne.n	800ec68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	613b      	str	r3, [r7, #16]
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	e7fd      	b.n	800ec64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ec68:	697b      	ldr	r3, [r7, #20]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	2400120c 	.word	0x2400120c
 800ec78:	08015374 	.word	0x08015374
 800ec7c:	0800edbd 	.word	0x0800edbd
 800ec80:	24001210 	.word	0x24001210

0800ec84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	@ 0x28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10b      	bne.n	800ecb4 <xTimerGenericCommand+0x30>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	623b      	str	r3, [r7, #32]
}
 800ecae:	bf00      	nop
 800ecb0:	bf00      	nop
 800ecb2:	e7fd      	b.n	800ecb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ecb4:	4b19      	ldr	r3, [pc, #100]	@ (800ed1c <xTimerGenericCommand+0x98>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d02a      	beq.n	800ed12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b05      	cmp	r3, #5
 800eccc:	dc18      	bgt.n	800ed00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ecce:	f7ff fead 	bl	800ea2c <xTaskGetSchedulerState>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d109      	bne.n	800ecec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ecd8:	4b10      	ldr	r3, [pc, #64]	@ (800ed1c <xTimerGenericCommand+0x98>)
 800ecda:	6818      	ldr	r0, [r3, #0]
 800ecdc:	f107 0110 	add.w	r1, r7, #16
 800ece0:	2300      	movs	r3, #0
 800ece2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ece4:	f7fe fc14 	bl	800d510 <xQueueGenericSend>
 800ece8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ecea:	e012      	b.n	800ed12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ecec:	4b0b      	ldr	r3, [pc, #44]	@ (800ed1c <xTimerGenericCommand+0x98>)
 800ecee:	6818      	ldr	r0, [r3, #0]
 800ecf0:	f107 0110 	add.w	r1, r7, #16
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f7fe fc0a 	bl	800d510 <xQueueGenericSend>
 800ecfc:	6278      	str	r0, [r7, #36]	@ 0x24
 800ecfe:	e008      	b.n	800ed12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed00:	4b06      	ldr	r3, [pc, #24]	@ (800ed1c <xTimerGenericCommand+0x98>)
 800ed02:	6818      	ldr	r0, [r3, #0]
 800ed04:	f107 0110 	add.w	r1, r7, #16
 800ed08:	2300      	movs	r3, #0
 800ed0a:	683a      	ldr	r2, [r7, #0]
 800ed0c:	f7fe fd02 	bl	800d714 <xQueueGenericSendFromISR>
 800ed10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3728      	adds	r7, #40	@ 0x28
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	2400120c 	.word	0x2400120c

0800ed20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af02      	add	r7, sp, #8
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed2a:	4b23      	ldr	r3, [pc, #140]	@ (800edb8 <prvProcessExpiredTimer+0x98>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	3304      	adds	r3, #4
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fe fab5 	bl	800d2a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d023      	beq.n	800ed94 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	699a      	ldr	r2, [r3, #24]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	18d1      	adds	r1, r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	683a      	ldr	r2, [r7, #0]
 800ed58:	6978      	ldr	r0, [r7, #20]
 800ed5a:	f000 f8d5 	bl	800ef08 <prvInsertTimerInActiveList>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d020      	beq.n	800eda6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed64:	2300      	movs	r3, #0
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	2300      	movs	r3, #0
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	6978      	ldr	r0, [r7, #20]
 800ed70:	f7ff ff88 	bl	800ec84 <xTimerGenericCommand>
 800ed74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d114      	bne.n	800eda6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	60fb      	str	r3, [r7, #12]
}
 800ed8e:	bf00      	nop
 800ed90:	bf00      	nop
 800ed92:	e7fd      	b.n	800ed90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed9a:	f023 0301 	bic.w	r3, r3, #1
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	6978      	ldr	r0, [r7, #20]
 800edac:	4798      	blx	r3
}
 800edae:	bf00      	nop
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	24001204 	.word	0x24001204

0800edbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800edc4:	f107 0308 	add.w	r3, r7, #8
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 f859 	bl	800ee80 <prvGetNextExpireTime>
 800edce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	4619      	mov	r1, r3
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 f805 	bl	800ede4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800edda:	f000 f8d7 	bl	800ef8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800edde:	bf00      	nop
 800ede0:	e7f0      	b.n	800edc4 <prvTimerTask+0x8>
	...

0800ede4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800edee:	f7ff fa37 	bl	800e260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 f866 	bl	800eec8 <prvSampleTimeNow>
 800edfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d130      	bne.n	800ee66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10a      	bne.n	800ee20 <prvProcessTimerOrBlockTask+0x3c>
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d806      	bhi.n	800ee20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee12:	f7ff fa33 	bl	800e27c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee16:	68f9      	ldr	r1, [r7, #12]
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7ff ff81 	bl	800ed20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee1e:	e024      	b.n	800ee6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d008      	beq.n	800ee38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee26:	4b13      	ldr	r3, [pc, #76]	@ (800ee74 <prvProcessTimerOrBlockTask+0x90>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <prvProcessTimerOrBlockTask+0x50>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e000      	b.n	800ee36 <prvProcessTimerOrBlockTask+0x52>
 800ee34:	2300      	movs	r3, #0
 800ee36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee38:	4b0f      	ldr	r3, [pc, #60]	@ (800ee78 <prvProcessTimerOrBlockTask+0x94>)
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	4619      	mov	r1, r3
 800ee46:	f7fe ff1f 	bl	800dc88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ee4a:	f7ff fa17 	bl	800e27c <xTaskResumeAll>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10a      	bne.n	800ee6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ee54:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <prvProcessTimerOrBlockTask+0x98>)
 800ee56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee5a:	601a      	str	r2, [r3, #0]
 800ee5c:	f3bf 8f4f 	dsb	sy
 800ee60:	f3bf 8f6f 	isb	sy
}
 800ee64:	e001      	b.n	800ee6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ee66:	f7ff fa09 	bl	800e27c <xTaskResumeAll>
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	24001208 	.word	0x24001208
 800ee78:	2400120c 	.word	0x2400120c
 800ee7c:	e000ed04 	.word	0xe000ed04

0800ee80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee88:	4b0e      	ldr	r3, [pc, #56]	@ (800eec4 <prvGetNextExpireTime+0x44>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <prvGetNextExpireTime+0x16>
 800ee92:	2201      	movs	r2, #1
 800ee94:	e000      	b.n	800ee98 <prvGetNextExpireTime+0x18>
 800ee96:	2200      	movs	r2, #0
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d105      	bne.n	800eeb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eea4:	4b07      	ldr	r3, [pc, #28]	@ (800eec4 <prvGetNextExpireTime+0x44>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	60fb      	str	r3, [r7, #12]
 800eeae:	e001      	b.n	800eeb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3714      	adds	r7, #20
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	24001204 	.word	0x24001204

0800eec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eed0:	f7ff fa72 	bl	800e3b8 <xTaskGetTickCount>
 800eed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eed6:	4b0b      	ldr	r3, [pc, #44]	@ (800ef04 <prvSampleTimeNow+0x3c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d205      	bcs.n	800eeec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eee0:	f000 f93a 	bl	800f158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	e002      	b.n	800eef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eef2:	4a04      	ldr	r2, [pc, #16]	@ (800ef04 <prvSampleTimeNow+0x3c>)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eef8:	68fb      	ldr	r3, [r7, #12]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	24001214 	.word	0x24001214

0800ef08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b086      	sub	sp, #24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
 800ef14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d812      	bhi.n	800ef54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	1ad2      	subs	r2, r2, r3
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d302      	bcc.n	800ef42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	e01b      	b.n	800ef7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef42:	4b10      	ldr	r3, [pc, #64]	@ (800ef84 <prvInsertTimerInActiveList+0x7c>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	f7fe f972 	bl	800d236 <vListInsert>
 800ef52:	e012      	b.n	800ef7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d206      	bcs.n	800ef6a <prvInsertTimerInActiveList+0x62>
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d302      	bcc.n	800ef6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ef64:	2301      	movs	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	e007      	b.n	800ef7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef6a:	4b07      	ldr	r3, [pc, #28]	@ (800ef88 <prvInsertTimerInActiveList+0x80>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7fe f95e 	bl	800d236 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ef7a:	697b      	ldr	r3, [r7, #20]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3718      	adds	r7, #24
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	24001208 	.word	0x24001208
 800ef88:	24001204 	.word	0x24001204

0800ef8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b08e      	sub	sp, #56	@ 0x38
 800ef90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef92:	e0ce      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	da19      	bge.n	800efce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ef9a:	1d3b      	adds	r3, r7, #4
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800efa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10b      	bne.n	800efbe <prvProcessReceivedCommands+0x32>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	61fb      	str	r3, [r7, #28]
}
 800efb8:	bf00      	nop
 800efba:	bf00      	nop
 800efbc:	e7fd      	b.n	800efba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800efbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efc4:	6850      	ldr	r0, [r2, #4]
 800efc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efc8:	6892      	ldr	r2, [r2, #8]
 800efca:	4611      	mov	r1, r2
 800efcc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f2c0 80ae 	blt.w	800f132 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800efda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efdc:	695b      	ldr	r3, [r3, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d004      	beq.n	800efec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe4:	3304      	adds	r3, #4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe f95e 	bl	800d2a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efec:	463b      	mov	r3, r7
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ff6a 	bl	800eec8 <prvSampleTimeNow>
 800eff4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b09      	cmp	r3, #9
 800effa:	f200 8097 	bhi.w	800f12c <prvProcessReceivedCommands+0x1a0>
 800effe:	a201      	add	r2, pc, #4	@ (adr r2, 800f004 <prvProcessReceivedCommands+0x78>)
 800f000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f004:	0800f02d 	.word	0x0800f02d
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f02d 	.word	0x0800f02d
 800f010:	0800f0a3 	.word	0x0800f0a3
 800f014:	0800f0b7 	.word	0x0800f0b7
 800f018:	0800f103 	.word	0x0800f103
 800f01c:	0800f02d 	.word	0x0800f02d
 800f020:	0800f02d 	.word	0x0800f02d
 800f024:	0800f0a3 	.word	0x0800f0a3
 800f028:	0800f0b7 	.word	0x0800f0b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f02e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f032:	f043 0301 	orr.w	r3, r3, #1
 800f036:	b2da      	uxtb	r2, r3
 800f038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f042:	699b      	ldr	r3, [r3, #24]
 800f044:	18d1      	adds	r1, r2, r3
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f04a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f04c:	f7ff ff5c 	bl	800ef08 <prvInsertTimerInActiveList>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d06c      	beq.n	800f130 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f05c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f064:	f003 0304 	and.w	r3, r3, #4
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d061      	beq.n	800f130 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f070:	699b      	ldr	r3, [r3, #24]
 800f072:	441a      	add	r2, r3
 800f074:	2300      	movs	r3, #0
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	2300      	movs	r3, #0
 800f07a:	2100      	movs	r1, #0
 800f07c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f07e:	f7ff fe01 	bl	800ec84 <xTimerGenericCommand>
 800f082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d152      	bne.n	800f130 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f08e:	f383 8811 	msr	BASEPRI, r3
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	61bb      	str	r3, [r7, #24]
}
 800f09c:	bf00      	nop
 800f09e:	bf00      	nop
 800f0a0:	e7fd      	b.n	800f09e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0a8:	f023 0301 	bic.w	r3, r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f0b4:	e03d      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0bc:	f043 0301 	orr.w	r3, r3, #1
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d0:	699b      	ldr	r3, [r3, #24]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10b      	bne.n	800f0ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	617b      	str	r3, [r7, #20]
}
 800f0e8:	bf00      	nop
 800f0ea:	bf00      	nop
 800f0ec:	e7fd      	b.n	800f0ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f0:	699a      	ldr	r2, [r3, #24]
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	18d1      	adds	r1, r2, r3
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0fc:	f7ff ff04 	bl	800ef08 <prvInsertTimerInActiveList>
					break;
 800f100:	e017      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f112:	f000 fbe9 	bl	800f8e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f116:	e00c      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f11e:	f023 0301 	bic.w	r3, r3, #1
 800f122:	b2da      	uxtb	r2, r3
 800f124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f12a:	e002      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f12c:	bf00      	nop
 800f12e:	e000      	b.n	800f132 <prvProcessReceivedCommands+0x1a6>
					break;
 800f130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f132:	4b08      	ldr	r3, [pc, #32]	@ (800f154 <prvProcessReceivedCommands+0x1c8>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	1d39      	adds	r1, r7, #4
 800f138:	2200      	movs	r2, #0
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7fe fb88 	bl	800d850 <xQueueReceive>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	f47f af26 	bne.w	800ef94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	3730      	adds	r7, #48	@ 0x30
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	2400120c 	.word	0x2400120c

0800f158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b088      	sub	sp, #32
 800f15c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f15e:	e049      	b.n	800f1f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f160:	4b2e      	ldr	r3, [pc, #184]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f16a:	4b2c      	ldr	r3, [pc, #176]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3304      	adds	r3, #4
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe f895 	bl	800d2a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6a1b      	ldr	r3, [r3, #32]
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f18c:	f003 0304 	and.w	r3, r3, #4
 800f190:	2b00      	cmp	r3, #0
 800f192:	d02f      	beq.n	800f1f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	699b      	ldr	r3, [r3, #24]
 800f198:	693a      	ldr	r2, [r7, #16]
 800f19a:	4413      	add	r3, r2
 800f19c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d90e      	bls.n	800f1c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68ba      	ldr	r2, [r7, #8]
 800f1aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1b2:	4b1a      	ldr	r3, [pc, #104]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4610      	mov	r0, r2
 800f1be:	f7fe f83a 	bl	800d236 <vListInsert>
 800f1c2:	e017      	b.n	800f1f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f7ff fd58 	bl	800ec84 <xTimerGenericCommand>
 800f1d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10b      	bne.n	800f1f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e0:	f383 8811 	msr	BASEPRI, r3
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	603b      	str	r3, [r7, #0]
}
 800f1ee:	bf00      	nop
 800f1f0:	bf00      	nop
 800f1f2:	e7fd      	b.n	800f1f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1f4:	4b09      	ldr	r3, [pc, #36]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1b0      	bne.n	800f160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f1fe:	4b07      	ldr	r3, [pc, #28]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f204:	4b06      	ldr	r3, [pc, #24]	@ (800f220 <prvSwitchTimerLists+0xc8>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a04      	ldr	r2, [pc, #16]	@ (800f21c <prvSwitchTimerLists+0xc4>)
 800f20a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f20c:	4a04      	ldr	r2, [pc, #16]	@ (800f220 <prvSwitchTimerLists+0xc8>)
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	6013      	str	r3, [r2, #0]
}
 800f212:	bf00      	nop
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	24001204 	.word	0x24001204
 800f220:	24001208 	.word	0x24001208

0800f224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f22a:	f000 f96d 	bl	800f508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f22e:	4b15      	ldr	r3, [pc, #84]	@ (800f284 <prvCheckForValidListAndQueue+0x60>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d120      	bne.n	800f278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f236:	4814      	ldr	r0, [pc, #80]	@ (800f288 <prvCheckForValidListAndQueue+0x64>)
 800f238:	f7fd ffac 	bl	800d194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f23c:	4813      	ldr	r0, [pc, #76]	@ (800f28c <prvCheckForValidListAndQueue+0x68>)
 800f23e:	f7fd ffa9 	bl	800d194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f242:	4b13      	ldr	r3, [pc, #76]	@ (800f290 <prvCheckForValidListAndQueue+0x6c>)
 800f244:	4a10      	ldr	r2, [pc, #64]	@ (800f288 <prvCheckForValidListAndQueue+0x64>)
 800f246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f248:	4b12      	ldr	r3, [pc, #72]	@ (800f294 <prvCheckForValidListAndQueue+0x70>)
 800f24a:	4a10      	ldr	r2, [pc, #64]	@ (800f28c <prvCheckForValidListAndQueue+0x68>)
 800f24c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f24e:	2300      	movs	r3, #0
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	4b11      	ldr	r3, [pc, #68]	@ (800f298 <prvCheckForValidListAndQueue+0x74>)
 800f254:	4a11      	ldr	r2, [pc, #68]	@ (800f29c <prvCheckForValidListAndQueue+0x78>)
 800f256:	2110      	movs	r1, #16
 800f258:	200a      	movs	r0, #10
 800f25a:	f7fe f8b9 	bl	800d3d0 <xQueueGenericCreateStatic>
 800f25e:	4603      	mov	r3, r0
 800f260:	4a08      	ldr	r2, [pc, #32]	@ (800f284 <prvCheckForValidListAndQueue+0x60>)
 800f262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f264:	4b07      	ldr	r3, [pc, #28]	@ (800f284 <prvCheckForValidListAndQueue+0x60>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d005      	beq.n	800f278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f26c:	4b05      	ldr	r3, [pc, #20]	@ (800f284 <prvCheckForValidListAndQueue+0x60>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	490b      	ldr	r1, [pc, #44]	@ (800f2a0 <prvCheckForValidListAndQueue+0x7c>)
 800f272:	4618      	mov	r0, r3
 800f274:	f7fe fcde 	bl	800dc34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f278:	f000 f978 	bl	800f56c <vPortExitCritical>
}
 800f27c:	bf00      	nop
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	2400120c 	.word	0x2400120c
 800f288:	240011dc 	.word	0x240011dc
 800f28c:	240011f0 	.word	0x240011f0
 800f290:	24001204 	.word	0x24001204
 800f294:	24001208 	.word	0x24001208
 800f298:	240012b8 	.word	0x240012b8
 800f29c:	24001218 	.word	0x24001218
 800f2a0:	0801537c 	.word	0x0801537c

0800f2a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	3b04      	subs	r3, #4
 800f2b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3b04      	subs	r3, #4
 800f2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f023 0201 	bic.w	r2, r3, #1
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3b04      	subs	r3, #4
 800f2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2d4:	4a0c      	ldr	r2, [pc, #48]	@ (800f308 <pxPortInitialiseStack+0x64>)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	3b14      	subs	r3, #20
 800f2de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3b04      	subs	r3, #4
 800f2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f06f 0202 	mvn.w	r2, #2
 800f2f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3b20      	subs	r3, #32
 800f2f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	0800f30d 	.word	0x0800f30d

0800f30c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f316:	4b13      	ldr	r3, [pc, #76]	@ (800f364 <prvTaskExitError+0x58>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31e:	d00b      	beq.n	800f338 <prvTaskExitError+0x2c>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	60fb      	str	r3, [r7, #12]
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	e7fd      	b.n	800f334 <prvTaskExitError+0x28>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	60bb      	str	r3, [r7, #8]
}
 800f34a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f34c:	bf00      	nop
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d0fc      	beq.n	800f34e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop
 800f358:	3714      	adds	r7, #20
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	2400009c 	.word	0x2400009c
	...

0800f370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f370:	4b07      	ldr	r3, [pc, #28]	@ (800f390 <pxCurrentTCBConst2>)
 800f372:	6819      	ldr	r1, [r3, #0]
 800f374:	6808      	ldr	r0, [r1, #0]
 800f376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37a:	f380 8809 	msr	PSP, r0
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f04f 0000 	mov.w	r0, #0
 800f386:	f380 8811 	msr	BASEPRI, r0
 800f38a:	4770      	bx	lr
 800f38c:	f3af 8000 	nop.w

0800f390 <pxCurrentTCBConst2>:
 800f390:	24000cdc 	.word	0x24000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f394:	bf00      	nop
 800f396:	bf00      	nop

0800f398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f398:	4808      	ldr	r0, [pc, #32]	@ (800f3bc <prvPortStartFirstTask+0x24>)
 800f39a:	6800      	ldr	r0, [r0, #0]
 800f39c:	6800      	ldr	r0, [r0, #0]
 800f39e:	f380 8808 	msr	MSP, r0
 800f3a2:	f04f 0000 	mov.w	r0, #0
 800f3a6:	f380 8814 	msr	CONTROL, r0
 800f3aa:	b662      	cpsie	i
 800f3ac:	b661      	cpsie	f
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	f3bf 8f6f 	isb	sy
 800f3b6:	df00      	svc	0
 800f3b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3ba:	bf00      	nop
 800f3bc:	e000ed08 	.word	0xe000ed08

0800f3c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f3c6:	4b47      	ldr	r3, [pc, #284]	@ (800f4e4 <xPortStartScheduler+0x124>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a47      	ldr	r2, [pc, #284]	@ (800f4e8 <xPortStartScheduler+0x128>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d10b      	bne.n	800f3e8 <xPortStartScheduler+0x28>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	613b      	str	r3, [r7, #16]
}
 800f3e2:	bf00      	nop
 800f3e4:	bf00      	nop
 800f3e6:	e7fd      	b.n	800f3e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f3e8:	4b3e      	ldr	r3, [pc, #248]	@ (800f4e4 <xPortStartScheduler+0x124>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	4a3f      	ldr	r2, [pc, #252]	@ (800f4ec <xPortStartScheduler+0x12c>)
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	d10b      	bne.n	800f40a <xPortStartScheduler+0x4a>
	__asm volatile
 800f3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	60fb      	str	r3, [r7, #12]
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop
 800f408:	e7fd      	b.n	800f406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f40a:	4b39      	ldr	r3, [pc, #228]	@ (800f4f0 <xPortStartScheduler+0x130>)
 800f40c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	b2db      	uxtb	r3, r3
 800f414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	22ff      	movs	r2, #255	@ 0xff
 800f41a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	b2db      	uxtb	r3, r3
 800f422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f424:	78fb      	ldrb	r3, [r7, #3]
 800f426:	b2db      	uxtb	r3, r3
 800f428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f42c:	b2da      	uxtb	r2, r3
 800f42e:	4b31      	ldr	r3, [pc, #196]	@ (800f4f4 <xPortStartScheduler+0x134>)
 800f430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f432:	4b31      	ldr	r3, [pc, #196]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f434:	2207      	movs	r2, #7
 800f436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f438:	e009      	b.n	800f44e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f43a:	4b2f      	ldr	r3, [pc, #188]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	3b01      	subs	r3, #1
 800f440:	4a2d      	ldr	r2, [pc, #180]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f444:	78fb      	ldrb	r3, [r7, #3]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f44e:	78fb      	ldrb	r3, [r7, #3]
 800f450:	b2db      	uxtb	r3, r3
 800f452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f456:	2b80      	cmp	r3, #128	@ 0x80
 800f458:	d0ef      	beq.n	800f43a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f45a:	4b27      	ldr	r3, [pc, #156]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f1c3 0307 	rsb	r3, r3, #7
 800f462:	2b04      	cmp	r3, #4
 800f464:	d00b      	beq.n	800f47e <xPortStartScheduler+0xbe>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	60bb      	str	r3, [r7, #8]
}
 800f478:	bf00      	nop
 800f47a:	bf00      	nop
 800f47c:	e7fd      	b.n	800f47a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f47e:	4b1e      	ldr	r3, [pc, #120]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	021b      	lsls	r3, r3, #8
 800f484:	4a1c      	ldr	r2, [pc, #112]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f488:	4b1b      	ldr	r3, [pc, #108]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f490:	4a19      	ldr	r2, [pc, #100]	@ (800f4f8 <xPortStartScheduler+0x138>)
 800f492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	b2da      	uxtb	r2, r3
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f49c:	4b17      	ldr	r3, [pc, #92]	@ (800f4fc <xPortStartScheduler+0x13c>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a16      	ldr	r2, [pc, #88]	@ (800f4fc <xPortStartScheduler+0x13c>)
 800f4a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f4a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f4a8:	4b14      	ldr	r3, [pc, #80]	@ (800f4fc <xPortStartScheduler+0x13c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a13      	ldr	r2, [pc, #76]	@ (800f4fc <xPortStartScheduler+0x13c>)
 800f4ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f4b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f4b4:	f000 f8da 	bl	800f66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f4b8:	4b11      	ldr	r3, [pc, #68]	@ (800f500 <xPortStartScheduler+0x140>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f4be:	f000 f8f9 	bl	800f6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4c2:	4b10      	ldr	r3, [pc, #64]	@ (800f504 <xPortStartScheduler+0x144>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a0f      	ldr	r2, [pc, #60]	@ (800f504 <xPortStartScheduler+0x144>)
 800f4c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f4cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f4ce:	f7ff ff63 	bl	800f398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f4d2:	f7ff f83b 	bl	800e54c <vTaskSwitchContext>
	prvTaskExitError();
 800f4d6:	f7ff ff19 	bl	800f30c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3718      	adds	r7, #24
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	e000ed00 	.word	0xe000ed00
 800f4e8:	410fc271 	.word	0x410fc271
 800f4ec:	410fc270 	.word	0x410fc270
 800f4f0:	e000e400 	.word	0xe000e400
 800f4f4:	24001308 	.word	0x24001308
 800f4f8:	2400130c 	.word	0x2400130c
 800f4fc:	e000ed20 	.word	0xe000ed20
 800f500:	2400009c 	.word	0x2400009c
 800f504:	e000ef34 	.word	0xe000ef34

0800f508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
	__asm volatile
 800f50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f512:	f383 8811 	msr	BASEPRI, r3
 800f516:	f3bf 8f6f 	isb	sy
 800f51a:	f3bf 8f4f 	dsb	sy
 800f51e:	607b      	str	r3, [r7, #4]
}
 800f520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f522:	4b10      	ldr	r3, [pc, #64]	@ (800f564 <vPortEnterCritical+0x5c>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3301      	adds	r3, #1
 800f528:	4a0e      	ldr	r2, [pc, #56]	@ (800f564 <vPortEnterCritical+0x5c>)
 800f52a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f52c:	4b0d      	ldr	r3, [pc, #52]	@ (800f564 <vPortEnterCritical+0x5c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d110      	bne.n	800f556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f534:	4b0c      	ldr	r3, [pc, #48]	@ (800f568 <vPortEnterCritical+0x60>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00b      	beq.n	800f556 <vPortEnterCritical+0x4e>
	__asm volatile
 800f53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f542:	f383 8811 	msr	BASEPRI, r3
 800f546:	f3bf 8f6f 	isb	sy
 800f54a:	f3bf 8f4f 	dsb	sy
 800f54e:	603b      	str	r3, [r7, #0]
}
 800f550:	bf00      	nop
 800f552:	bf00      	nop
 800f554:	e7fd      	b.n	800f552 <vPortEnterCritical+0x4a>
	}
}
 800f556:	bf00      	nop
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	2400009c 	.word	0x2400009c
 800f568:	e000ed04 	.word	0xe000ed04

0800f56c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f572:	4b12      	ldr	r3, [pc, #72]	@ (800f5bc <vPortExitCritical+0x50>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d10b      	bne.n	800f592 <vPortExitCritical+0x26>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	607b      	str	r3, [r7, #4]
}
 800f58c:	bf00      	nop
 800f58e:	bf00      	nop
 800f590:	e7fd      	b.n	800f58e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f592:	4b0a      	ldr	r3, [pc, #40]	@ (800f5bc <vPortExitCritical+0x50>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3b01      	subs	r3, #1
 800f598:	4a08      	ldr	r2, [pc, #32]	@ (800f5bc <vPortExitCritical+0x50>)
 800f59a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f59c:	4b07      	ldr	r3, [pc, #28]	@ (800f5bc <vPortExitCritical+0x50>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d105      	bne.n	800f5b0 <vPortExitCritical+0x44>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	f383 8811 	msr	BASEPRI, r3
}
 800f5ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	2400009c 	.word	0x2400009c

0800f5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f5c0:	f3ef 8009 	mrs	r0, PSP
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	4b15      	ldr	r3, [pc, #84]	@ (800f620 <pxCurrentTCBConst>)
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	f01e 0f10 	tst.w	lr, #16
 800f5d0:	bf08      	it	eq
 800f5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5da:	6010      	str	r0, [r2, #0]
 800f5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f5e4:	f380 8811 	msr	BASEPRI, r0
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f7fe ffac 	bl	800e54c <vTaskSwitchContext>
 800f5f4:	f04f 0000 	mov.w	r0, #0
 800f5f8:	f380 8811 	msr	BASEPRI, r0
 800f5fc:	bc09      	pop	{r0, r3}
 800f5fe:	6819      	ldr	r1, [r3, #0]
 800f600:	6808      	ldr	r0, [r1, #0]
 800f602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f606:	f01e 0f10 	tst.w	lr, #16
 800f60a:	bf08      	it	eq
 800f60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f610:	f380 8809 	msr	PSP, r0
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	f3af 8000 	nop.w

0800f620 <pxCurrentTCBConst>:
 800f620:	24000cdc 	.word	0x24000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f624:	bf00      	nop
 800f626:	bf00      	nop

0800f628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
	__asm volatile
 800f62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	607b      	str	r3, [r7, #4]
}
 800f640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f642:	f7fe fec9 	bl	800e3d8 <xTaskIncrementTick>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f64c:	4b06      	ldr	r3, [pc, #24]	@ (800f668 <xPortSysTickHandler+0x40>)
 800f64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	2300      	movs	r3, #0
 800f656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	f383 8811 	msr	BASEPRI, r3
}
 800f65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f660:	bf00      	nop
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	e000ed04 	.word	0xe000ed04

0800f66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f670:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a0 <vPortSetupTimerInterrupt+0x34>)
 800f672:	2200      	movs	r2, #0
 800f674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f676:	4b0b      	ldr	r3, [pc, #44]	@ (800f6a4 <vPortSetupTimerInterrupt+0x38>)
 800f678:	2200      	movs	r2, #0
 800f67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f67c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a8 <vPortSetupTimerInterrupt+0x3c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a0a      	ldr	r2, [pc, #40]	@ (800f6ac <vPortSetupTimerInterrupt+0x40>)
 800f682:	fba2 2303 	umull	r2, r3, r2, r3
 800f686:	099b      	lsrs	r3, r3, #6
 800f688:	4a09      	ldr	r2, [pc, #36]	@ (800f6b0 <vPortSetupTimerInterrupt+0x44>)
 800f68a:	3b01      	subs	r3, #1
 800f68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f68e:	4b04      	ldr	r3, [pc, #16]	@ (800f6a0 <vPortSetupTimerInterrupt+0x34>)
 800f690:	2207      	movs	r2, #7
 800f692:	601a      	str	r2, [r3, #0]
}
 800f694:	bf00      	nop
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	e000e010 	.word	0xe000e010
 800f6a4:	e000e018 	.word	0xe000e018
 800f6a8:	24000000 	.word	0x24000000
 800f6ac:	10624dd3 	.word	0x10624dd3
 800f6b0:	e000e014 	.word	0xe000e014

0800f6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f6c4 <vPortEnableVFP+0x10>
 800f6b8:	6801      	ldr	r1, [r0, #0]
 800f6ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f6be:	6001      	str	r1, [r0, #0]
 800f6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f6c2:	bf00      	nop
 800f6c4:	e000ed88 	.word	0xe000ed88

0800f6c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f6ce:	f3ef 8305 	mrs	r3, IPSR
 800f6d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	2b0f      	cmp	r3, #15
 800f6d8:	d915      	bls.n	800f706 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6da:	4a18      	ldr	r2, [pc, #96]	@ (800f73c <vPortValidateInterruptPriority+0x74>)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6e4:	4b16      	ldr	r3, [pc, #88]	@ (800f740 <vPortValidateInterruptPriority+0x78>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	7afa      	ldrb	r2, [r7, #11]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d20b      	bcs.n	800f706 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	607b      	str	r3, [r7, #4]
}
 800f700:	bf00      	nop
 800f702:	bf00      	nop
 800f704:	e7fd      	b.n	800f702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f706:	4b0f      	ldr	r3, [pc, #60]	@ (800f744 <vPortValidateInterruptPriority+0x7c>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f70e:	4b0e      	ldr	r3, [pc, #56]	@ (800f748 <vPortValidateInterruptPriority+0x80>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	429a      	cmp	r2, r3
 800f714:	d90b      	bls.n	800f72e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71a:	f383 8811 	msr	BASEPRI, r3
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	603b      	str	r3, [r7, #0]
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	e7fd      	b.n	800f72a <vPortValidateInterruptPriority+0x62>
	}
 800f72e:	bf00      	nop
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	e000e3f0 	.word	0xe000e3f0
 800f740:	24001308 	.word	0x24001308
 800f744:	e000ed0c 	.word	0xe000ed0c
 800f748:	2400130c 	.word	0x2400130c

0800f74c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	@ 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f758:	f7fe fd82 	bl	800e260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f75c:	4b5c      	ldr	r3, [pc, #368]	@ (800f8d0 <pvPortMalloc+0x184>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d101      	bne.n	800f768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f764:	f000 f924 	bl	800f9b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f768:	4b5a      	ldr	r3, [pc, #360]	@ (800f8d4 <pvPortMalloc+0x188>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4013      	ands	r3, r2
 800f770:	2b00      	cmp	r3, #0
 800f772:	f040 8095 	bne.w	800f8a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d01e      	beq.n	800f7ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f77c:	2208      	movs	r2, #8
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4413      	add	r3, r2
 800f782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f003 0307 	and.w	r3, r3, #7
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d015      	beq.n	800f7ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f023 0307 	bic.w	r3, r3, #7
 800f794:	3308      	adds	r3, #8
 800f796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f003 0307 	and.w	r3, r3, #7
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00b      	beq.n	800f7ba <pvPortMalloc+0x6e>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	617b      	str	r3, [r7, #20]
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop
 800f7b8:	e7fd      	b.n	800f7b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d06f      	beq.n	800f8a0 <pvPortMalloc+0x154>
 800f7c0:	4b45      	ldr	r3, [pc, #276]	@ (800f8d8 <pvPortMalloc+0x18c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d86a      	bhi.n	800f8a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f7ca:	4b44      	ldr	r3, [pc, #272]	@ (800f8dc <pvPortMalloc+0x190>)
 800f7cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f7ce:	4b43      	ldr	r3, [pc, #268]	@ (800f8dc <pvPortMalloc+0x190>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7d4:	e004      	b.n	800f7e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d903      	bls.n	800f7f2 <pvPortMalloc+0xa6>
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1f1      	bne.n	800f7d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f7f2:	4b37      	ldr	r3, [pc, #220]	@ (800f8d0 <pvPortMalloc+0x184>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d051      	beq.n	800f8a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2208      	movs	r2, #8
 800f802:	4413      	add	r3, r2
 800f804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	6a3b      	ldr	r3, [r7, #32]
 800f80c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f810:	685a      	ldr	r2, [r3, #4]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	1ad2      	subs	r2, r2, r3
 800f816:	2308      	movs	r3, #8
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d920      	bls.n	800f860 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f81e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4413      	add	r3, r2
 800f824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	f003 0307 	and.w	r3, r3, #7
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00b      	beq.n	800f848 <pvPortMalloc+0xfc>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	613b      	str	r3, [r7, #16]
}
 800f842:	bf00      	nop
 800f844:	bf00      	nop
 800f846:	e7fd      	b.n	800f844 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	1ad2      	subs	r2, r2, r3
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f85a:	69b8      	ldr	r0, [r7, #24]
 800f85c:	f000 f90a 	bl	800fa74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f860:	4b1d      	ldr	r3, [pc, #116]	@ (800f8d8 <pvPortMalloc+0x18c>)
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	4a1b      	ldr	r2, [pc, #108]	@ (800f8d8 <pvPortMalloc+0x18c>)
 800f86c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f86e:	4b1a      	ldr	r3, [pc, #104]	@ (800f8d8 <pvPortMalloc+0x18c>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e0 <pvPortMalloc+0x194>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	429a      	cmp	r2, r3
 800f878:	d203      	bcs.n	800f882 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f87a:	4b17      	ldr	r3, [pc, #92]	@ (800f8d8 <pvPortMalloc+0x18c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	4a18      	ldr	r2, [pc, #96]	@ (800f8e0 <pvPortMalloc+0x194>)
 800f880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f884:	685a      	ldr	r2, [r3, #4]
 800f886:	4b13      	ldr	r3, [pc, #76]	@ (800f8d4 <pvPortMalloc+0x188>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	431a      	orrs	r2, r3
 800f88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f892:	2200      	movs	r2, #0
 800f894:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f896:	4b13      	ldr	r3, [pc, #76]	@ (800f8e4 <pvPortMalloc+0x198>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3301      	adds	r3, #1
 800f89c:	4a11      	ldr	r2, [pc, #68]	@ (800f8e4 <pvPortMalloc+0x198>)
 800f89e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f8a0:	f7fe fcec 	bl	800e27c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	f003 0307 	and.w	r3, r3, #7
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00b      	beq.n	800f8c6 <pvPortMalloc+0x17a>
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	60fb      	str	r3, [r7, #12]
}
 800f8c0:	bf00      	nop
 800f8c2:	bf00      	nop
 800f8c4:	e7fd      	b.n	800f8c2 <pvPortMalloc+0x176>
	return pvReturn;
 800f8c6:	69fb      	ldr	r3, [r7, #28]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3728      	adds	r7, #40	@ 0x28
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	24004f18 	.word	0x24004f18
 800f8d4:	24004f2c 	.word	0x24004f2c
 800f8d8:	24004f1c 	.word	0x24004f1c
 800f8dc:	24004f10 	.word	0x24004f10
 800f8e0:	24004f20 	.word	0x24004f20
 800f8e4:	24004f24 	.word	0x24004f24

0800f8e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d04f      	beq.n	800f99a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f8fa:	2308      	movs	r3, #8
 800f8fc:	425b      	negs	r3, r3
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	4413      	add	r3, r2
 800f902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	685a      	ldr	r2, [r3, #4]
 800f90c:	4b25      	ldr	r3, [pc, #148]	@ (800f9a4 <vPortFree+0xbc>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4013      	ands	r3, r2
 800f912:	2b00      	cmp	r3, #0
 800f914:	d10b      	bne.n	800f92e <vPortFree+0x46>
	__asm volatile
 800f916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	60fb      	str	r3, [r7, #12]
}
 800f928:	bf00      	nop
 800f92a:	bf00      	nop
 800f92c:	e7fd      	b.n	800f92a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00b      	beq.n	800f94e <vPortFree+0x66>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60bb      	str	r3, [r7, #8]
}
 800f948:	bf00      	nop
 800f94a:	bf00      	nop
 800f94c:	e7fd      	b.n	800f94a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	685a      	ldr	r2, [r3, #4]
 800f952:	4b14      	ldr	r3, [pc, #80]	@ (800f9a4 <vPortFree+0xbc>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4013      	ands	r3, r2
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d01e      	beq.n	800f99a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11a      	bne.n	800f99a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a4 <vPortFree+0xbc>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	43db      	mvns	r3, r3
 800f96e:	401a      	ands	r2, r3
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f974:	f7fe fc74 	bl	800e260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	685a      	ldr	r2, [r3, #4]
 800f97c:	4b0a      	ldr	r3, [pc, #40]	@ (800f9a8 <vPortFree+0xc0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4413      	add	r3, r2
 800f982:	4a09      	ldr	r2, [pc, #36]	@ (800f9a8 <vPortFree+0xc0>)
 800f984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f986:	6938      	ldr	r0, [r7, #16]
 800f988:	f000 f874 	bl	800fa74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f98c:	4b07      	ldr	r3, [pc, #28]	@ (800f9ac <vPortFree+0xc4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	3301      	adds	r3, #1
 800f992:	4a06      	ldr	r2, [pc, #24]	@ (800f9ac <vPortFree+0xc4>)
 800f994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f996:	f7fe fc71 	bl	800e27c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f99a:	bf00      	nop
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	24004f2c 	.word	0x24004f2c
 800f9a8:	24004f1c 	.word	0x24004f1c
 800f9ac:	24004f28 	.word	0x24004f28

0800f9b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f9b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f9ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f9bc:	4b27      	ldr	r3, [pc, #156]	@ (800fa5c <prvHeapInit+0xac>)
 800f9be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f003 0307 	and.w	r3, r3, #7
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d00c      	beq.n	800f9e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	3307      	adds	r3, #7
 800f9ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f023 0307 	bic.w	r3, r3, #7
 800f9d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	4a1f      	ldr	r2, [pc, #124]	@ (800fa5c <prvHeapInit+0xac>)
 800f9e0:	4413      	add	r3, r2
 800f9e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800fa60 <prvHeapInit+0xb0>)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f9ee:	4b1c      	ldr	r3, [pc, #112]	@ (800fa60 <prvHeapInit+0xb0>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f9fc:	2208      	movs	r2, #8
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	1a9b      	subs	r3, r3, r2
 800fa02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f023 0307 	bic.w	r3, r3, #7
 800fa0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4a15      	ldr	r2, [pc, #84]	@ (800fa64 <prvHeapInit+0xb4>)
 800fa10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fa12:	4b14      	ldr	r3, [pc, #80]	@ (800fa64 <prvHeapInit+0xb4>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2200      	movs	r2, #0
 800fa18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fa1a:	4b12      	ldr	r3, [pc, #72]	@ (800fa64 <prvHeapInit+0xb4>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	1ad2      	subs	r2, r2, r3
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa30:	4b0c      	ldr	r3, [pc, #48]	@ (800fa64 <prvHeapInit+0xb4>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	4a0a      	ldr	r2, [pc, #40]	@ (800fa68 <prvHeapInit+0xb8>)
 800fa3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	4a09      	ldr	r2, [pc, #36]	@ (800fa6c <prvHeapInit+0xbc>)
 800fa46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa48:	4b09      	ldr	r3, [pc, #36]	@ (800fa70 <prvHeapInit+0xc0>)
 800fa4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fa4e:	601a      	str	r2, [r3, #0]
}
 800fa50:	bf00      	nop
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	24001310 	.word	0x24001310
 800fa60:	24004f10 	.word	0x24004f10
 800fa64:	24004f18 	.word	0x24004f18
 800fa68:	24004f20 	.word	0x24004f20
 800fa6c:	24004f1c 	.word	0x24004f1c
 800fa70:	24004f2c 	.word	0x24004f2c

0800fa74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa7c:	4b28      	ldr	r3, [pc, #160]	@ (800fb20 <prvInsertBlockIntoFreeList+0xac>)
 800fa7e:	60fb      	str	r3, [r7, #12]
 800fa80:	e002      	b.n	800fa88 <prvInsertBlockIntoFreeList+0x14>
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d8f7      	bhi.n	800fa82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d108      	bne.n	800fab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	685a      	ldr	r2, [r3, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	441a      	add	r2, r3
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	441a      	add	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d118      	bne.n	800fafc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	4b15      	ldr	r3, [pc, #84]	@ (800fb24 <prvInsertBlockIntoFreeList+0xb0>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d00d      	beq.n	800faf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	441a      	add	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	e008      	b.n	800fb04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800faf2:	4b0c      	ldr	r3, [pc, #48]	@ (800fb24 <prvInsertBlockIntoFreeList+0xb0>)
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	e003      	b.n	800fb04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d002      	beq.n	800fb12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb12:	bf00      	nop
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	24004f10 	.word	0x24004f10
 800fb24:	24004f18 	.word	0x24004f18

0800fb28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	4913      	ldr	r1, [pc, #76]	@ (800fb7c <MX_USB_DEVICE_Init+0x54>)
 800fb30:	4813      	ldr	r0, [pc, #76]	@ (800fb80 <MX_USB_DEVICE_Init+0x58>)
 800fb32:	f7fb fe93 	bl	800b85c <USBD_Init>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fb3c:	f7f1 fc60 	bl	8001400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fb40:	4910      	ldr	r1, [pc, #64]	@ (800fb84 <MX_USB_DEVICE_Init+0x5c>)
 800fb42:	480f      	ldr	r0, [pc, #60]	@ (800fb80 <MX_USB_DEVICE_Init+0x58>)
 800fb44:	f7fb feba 	bl	800b8bc <USBD_RegisterClass>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fb4e:	f7f1 fc57 	bl	8001400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fb52:	490d      	ldr	r1, [pc, #52]	@ (800fb88 <MX_USB_DEVICE_Init+0x60>)
 800fb54:	480a      	ldr	r0, [pc, #40]	@ (800fb80 <MX_USB_DEVICE_Init+0x58>)
 800fb56:	f7fb fdf1 	bl	800b73c <USBD_CDC_RegisterInterface>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fb60:	f7f1 fc4e 	bl	8001400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fb64:	4806      	ldr	r0, [pc, #24]	@ (800fb80 <MX_USB_DEVICE_Init+0x58>)
 800fb66:	f7fb fedf 	bl	800b928 <USBD_Start>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fb70:	f7f1 fc46 	bl	8001400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fb74:	f7f5 f8c4 	bl	8004d00 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fb78:	bf00      	nop
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	240000b4 	.word	0x240000b4
 800fb80:	24004f30 	.word	0x24004f30
 800fb84:	2400001c 	.word	0x2400001c
 800fb88:	240000a0 	.word	0x240000a0

0800fb8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fb90:	2200      	movs	r2, #0
 800fb92:	4905      	ldr	r1, [pc, #20]	@ (800fba8 <CDC_Init_FS+0x1c>)
 800fb94:	4805      	ldr	r0, [pc, #20]	@ (800fbac <CDC_Init_FS+0x20>)
 800fb96:	f7fb fdeb 	bl	800b770 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fb9a:	4905      	ldr	r1, [pc, #20]	@ (800fbb0 <CDC_Init_FS+0x24>)
 800fb9c:	4803      	ldr	r0, [pc, #12]	@ (800fbac <CDC_Init_FS+0x20>)
 800fb9e:	f7fb fe09 	bl	800b7b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fba2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	24005a0c 	.word	0x24005a0c
 800fbac:	24004f30 	.word	0x24004f30
 800fbb0:	2400520c 	.word	0x2400520c

0800fbb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fbb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	4603      	mov	r3, r0
 800fbcc:	6039      	str	r1, [r7, #0]
 800fbce:	71fb      	strb	r3, [r7, #7]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fbd4:	79fb      	ldrb	r3, [r7, #7]
 800fbd6:	2b23      	cmp	r3, #35	@ 0x23
 800fbd8:	d84a      	bhi.n	800fc70 <CDC_Control_FS+0xac>
 800fbda:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe0 <CDC_Control_FS+0x1c>)
 800fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe0:	0800fc71 	.word	0x0800fc71
 800fbe4:	0800fc71 	.word	0x0800fc71
 800fbe8:	0800fc71 	.word	0x0800fc71
 800fbec:	0800fc71 	.word	0x0800fc71
 800fbf0:	0800fc71 	.word	0x0800fc71
 800fbf4:	0800fc71 	.word	0x0800fc71
 800fbf8:	0800fc71 	.word	0x0800fc71
 800fbfc:	0800fc71 	.word	0x0800fc71
 800fc00:	0800fc71 	.word	0x0800fc71
 800fc04:	0800fc71 	.word	0x0800fc71
 800fc08:	0800fc71 	.word	0x0800fc71
 800fc0c:	0800fc71 	.word	0x0800fc71
 800fc10:	0800fc71 	.word	0x0800fc71
 800fc14:	0800fc71 	.word	0x0800fc71
 800fc18:	0800fc71 	.word	0x0800fc71
 800fc1c:	0800fc71 	.word	0x0800fc71
 800fc20:	0800fc71 	.word	0x0800fc71
 800fc24:	0800fc71 	.word	0x0800fc71
 800fc28:	0800fc71 	.word	0x0800fc71
 800fc2c:	0800fc71 	.word	0x0800fc71
 800fc30:	0800fc71 	.word	0x0800fc71
 800fc34:	0800fc71 	.word	0x0800fc71
 800fc38:	0800fc71 	.word	0x0800fc71
 800fc3c:	0800fc71 	.word	0x0800fc71
 800fc40:	0800fc71 	.word	0x0800fc71
 800fc44:	0800fc71 	.word	0x0800fc71
 800fc48:	0800fc71 	.word	0x0800fc71
 800fc4c:	0800fc71 	.word	0x0800fc71
 800fc50:	0800fc71 	.word	0x0800fc71
 800fc54:	0800fc71 	.word	0x0800fc71
 800fc58:	0800fc71 	.word	0x0800fc71
 800fc5c:	0800fc71 	.word	0x0800fc71
 800fc60:	0800fc71 	.word	0x0800fc71
 800fc64:	0800fc71 	.word	0x0800fc71
 800fc68:	0800fc71 	.word	0x0800fc71
 800fc6c:	0800fc71 	.word	0x0800fc71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fc70:	bf00      	nop
  }

  return (USBD_OK);
 800fc72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	370c      	adds	r7, #12
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr

0800fc80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fc8a:	6879      	ldr	r1, [r7, #4]
 800fc8c:	4805      	ldr	r0, [pc, #20]	@ (800fca4 <CDC_Receive_FS+0x24>)
 800fc8e:	f7fb fd91 	bl	800b7b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fc92:	4804      	ldr	r0, [pc, #16]	@ (800fca4 <CDC_Receive_FS+0x24>)
 800fc94:	f7fb fdac 	bl	800b7f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fc98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	24004f30 	.word	0x24004f30

0800fca8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	371c      	adds	r7, #28
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
	...

0800fccc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	6039      	str	r1, [r7, #0]
 800fcd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2212      	movs	r2, #18
 800fcdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fcde:	4b03      	ldr	r3, [pc, #12]	@ (800fcec <USBD_FS_DeviceDescriptor+0x20>)
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	240000d4 	.word	0x240000d4

0800fcf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	6039      	str	r1, [r7, #0]
 800fcfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2204      	movs	r2, #4
 800fd00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fd02:	4b03      	ldr	r3, [pc, #12]	@ (800fd10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	240000e8 	.word	0x240000e8

0800fd14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	6039      	str	r1, [r7, #0]
 800fd1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d105      	bne.n	800fd32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	4907      	ldr	r1, [pc, #28]	@ (800fd48 <USBD_FS_ProductStrDescriptor+0x34>)
 800fd2a:	4808      	ldr	r0, [pc, #32]	@ (800fd4c <USBD_FS_ProductStrDescriptor+0x38>)
 800fd2c:	f7fc ffd6 	bl	800ccdc <USBD_GetString>
 800fd30:	e004      	b.n	800fd3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fd32:	683a      	ldr	r2, [r7, #0]
 800fd34:	4904      	ldr	r1, [pc, #16]	@ (800fd48 <USBD_FS_ProductStrDescriptor+0x34>)
 800fd36:	4805      	ldr	r0, [pc, #20]	@ (800fd4c <USBD_FS_ProductStrDescriptor+0x38>)
 800fd38:	f7fc ffd0 	bl	800ccdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd3c:	4b02      	ldr	r3, [pc, #8]	@ (800fd48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	2400620c 	.word	0x2400620c
 800fd4c:	08015384 	.word	0x08015384

0800fd50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	4603      	mov	r3, r0
 800fd58:	6039      	str	r1, [r7, #0]
 800fd5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	4904      	ldr	r1, [pc, #16]	@ (800fd70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fd60:	4804      	ldr	r0, [pc, #16]	@ (800fd74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fd62:	f7fc ffbb 	bl	800ccdc <USBD_GetString>
  return USBD_StrDesc;
 800fd66:	4b02      	ldr	r3, [pc, #8]	@ (800fd70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	2400620c 	.word	0x2400620c
 800fd74:	0801539c 	.word	0x0801539c

0800fd78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	4603      	mov	r3, r0
 800fd80:	6039      	str	r1, [r7, #0]
 800fd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	221a      	movs	r2, #26
 800fd88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fd8a:	f000 f843 	bl	800fe14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fd8e:	4b02      	ldr	r3, [pc, #8]	@ (800fd98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	240000ec 	.word	0x240000ec

0800fd9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	6039      	str	r1, [r7, #0]
 800fda6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fda8:	79fb      	ldrb	r3, [r7, #7]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d105      	bne.n	800fdba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	4907      	ldr	r1, [pc, #28]	@ (800fdd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdb2:	4808      	ldr	r0, [pc, #32]	@ (800fdd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdb4:	f7fc ff92 	bl	800ccdc <USBD_GetString>
 800fdb8:	e004      	b.n	800fdc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	4904      	ldr	r1, [pc, #16]	@ (800fdd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fdbe:	4805      	ldr	r0, [pc, #20]	@ (800fdd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fdc0:	f7fc ff8c 	bl	800ccdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdc4:	4b02      	ldr	r3, [pc, #8]	@ (800fdd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	2400620c 	.word	0x2400620c
 800fdd4:	080153b0 	.word	0x080153b0

0800fdd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	6039      	str	r1, [r7, #0]
 800fde2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fde4:	79fb      	ldrb	r3, [r7, #7]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d105      	bne.n	800fdf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	4907      	ldr	r1, [pc, #28]	@ (800fe0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fdee:	4808      	ldr	r0, [pc, #32]	@ (800fe10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fdf0:	f7fc ff74 	bl	800ccdc <USBD_GetString>
 800fdf4:	e004      	b.n	800fe00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	4904      	ldr	r1, [pc, #16]	@ (800fe0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fdfa:	4805      	ldr	r0, [pc, #20]	@ (800fe10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fdfc:	f7fc ff6e 	bl	800ccdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe00:	4b02      	ldr	r3, [pc, #8]	@ (800fe0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	2400620c 	.word	0x2400620c
 800fe10:	080153bc 	.word	0x080153bc

0800fe14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fe1a:	4b0f      	ldr	r3, [pc, #60]	@ (800fe58 <Get_SerialNum+0x44>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fe20:	4b0e      	ldr	r3, [pc, #56]	@ (800fe5c <Get_SerialNum+0x48>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fe26:	4b0e      	ldr	r3, [pc, #56]	@ (800fe60 <Get_SerialNum+0x4c>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4413      	add	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fe3a:	2208      	movs	r2, #8
 800fe3c:	4909      	ldr	r1, [pc, #36]	@ (800fe64 <Get_SerialNum+0x50>)
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f000 f814 	bl	800fe6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fe44:	2204      	movs	r2, #4
 800fe46:	4908      	ldr	r1, [pc, #32]	@ (800fe68 <Get_SerialNum+0x54>)
 800fe48:	68b8      	ldr	r0, [r7, #8]
 800fe4a:	f000 f80f 	bl	800fe6c <IntToUnicode>
  }
}
 800fe4e:	bf00      	nop
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	1ff1e800 	.word	0x1ff1e800
 800fe5c:	1ff1e804 	.word	0x1ff1e804
 800fe60:	1ff1e808 	.word	0x1ff1e808
 800fe64:	240000ee 	.word	0x240000ee
 800fe68:	240000fe 	.word	0x240000fe

0800fe6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b087      	sub	sp, #28
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	4613      	mov	r3, r2
 800fe78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fe7e:	2300      	movs	r3, #0
 800fe80:	75fb      	strb	r3, [r7, #23]
 800fe82:	e027      	b.n	800fed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	0f1b      	lsrs	r3, r3, #28
 800fe88:	2b09      	cmp	r3, #9
 800fe8a:	d80b      	bhi.n	800fea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	0f1b      	lsrs	r3, r3, #28
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	005b      	lsls	r3, r3, #1
 800fe96:	4619      	mov	r1, r3
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	440b      	add	r3, r1
 800fe9c:	3230      	adds	r2, #48	@ 0x30
 800fe9e:	b2d2      	uxtb	r2, r2
 800fea0:	701a      	strb	r2, [r3, #0]
 800fea2:	e00a      	b.n	800feba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	0f1b      	lsrs	r3, r3, #28
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4619      	mov	r1, r3
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	440b      	add	r3, r1
 800feb4:	3237      	adds	r2, #55	@ 0x37
 800feb6:	b2d2      	uxtb	r2, r2
 800feb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	011b      	lsls	r3, r3, #4
 800febe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	3301      	adds	r3, #1
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	4413      	add	r3, r2
 800feca:	2200      	movs	r2, #0
 800fecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fece:	7dfb      	ldrb	r3, [r7, #23]
 800fed0:	3301      	adds	r3, #1
 800fed2:	75fb      	strb	r3, [r7, #23]
 800fed4:	7dfa      	ldrb	r2, [r7, #23]
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d3d3      	bcc.n	800fe84 <IntToUnicode+0x18>
  }
}
 800fedc:	bf00      	nop
 800fede:	bf00      	nop
 800fee0:	371c      	adds	r7, #28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
	...

0800feec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b0ba      	sub	sp, #232	@ 0xe8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fef4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]
 800fefc:	605a      	str	r2, [r3, #4]
 800fefe:	609a      	str	r2, [r3, #8]
 800ff00:	60da      	str	r2, [r3, #12]
 800ff02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ff04:	f107 0310 	add.w	r3, r7, #16
 800ff08:	22c0      	movs	r2, #192	@ 0xc0
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f002 ff30 	bl	8012d72 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4a2c      	ldr	r2, [pc, #176]	@ (800ffc8 <HAL_PCD_MspInit+0xdc>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d151      	bne.n	800ffc0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ff1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ff20:	f04f 0300 	mov.w	r3, #0
 800ff24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ff28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ff2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ff30:	f107 0310 	add.w	r3, r7, #16
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f5 ff05 	bl	8005d44 <HAL_RCCEx_PeriphCLKConfig>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ff40:	f7f1 fa5e 	bl	8001400 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ff44:	f7f4 fedc 	bl	8004d00 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ff48:	4b20      	ldr	r3, [pc, #128]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ff4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff4e:	4a1f      	ldr	r2, [pc, #124]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ff50:	f043 0301 	orr.w	r3, r3, #1
 800ff54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ff58:	4b1c      	ldr	r3, [pc, #112]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ff5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ff5e:	f003 0301 	and.w	r3, r3, #1
 800ff62:	60fb      	str	r3, [r7, #12]
 800ff64:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ff66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ff6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff6e:	2302      	movs	r3, #2
 800ff70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff74:	2300      	movs	r3, #0
 800ff76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800ff80:	230a      	movs	r3, #10
 800ff82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	4810      	ldr	r0, [pc, #64]	@ (800ffd0 <HAL_PCD_MspInit+0xe4>)
 800ff8e:	f7f2 fbbd 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ff92:	4b0e      	ldr	r3, [pc, #56]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ff94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff98:	4a0c      	ldr	r2, [pc, #48]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ff9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ff9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ffa2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffcc <HAL_PCD_MspInit+0xe0>)
 800ffa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ffa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffac:	60bb      	str	r3, [r7, #8]
 800ffae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	2105      	movs	r1, #5
 800ffb4:	2065      	movs	r0, #101	@ 0x65
 800ffb6:	f7f2 f8b9 	bl	800212c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ffba:	2065      	movs	r0, #101	@ 0x65
 800ffbc:	f7f2 f8d0 	bl	8002160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ffc0:	bf00      	nop
 800ffc2:	37e8      	adds	r7, #232	@ 0xe8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	40080000 	.word	0x40080000
 800ffcc:	58024400 	.word	0x58024400
 800ffd0:	58020000 	.word	0x58020000

0800ffd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ffe8:	4619      	mov	r1, r3
 800ffea:	4610      	mov	r0, r2
 800ffec:	f7fb fce9 	bl	800b9c2 <USBD_LL_SetupStage>
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801000a:	78fa      	ldrb	r2, [r7, #3]
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	4613      	mov	r3, r2
 8010010:	00db      	lsls	r3, r3, #3
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	440b      	add	r3, r1
 8010018:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	78fb      	ldrb	r3, [r7, #3]
 8010020:	4619      	mov	r1, r3
 8010022:	f7fb fd23 	bl	800ba6c <USBD_LL_DataOutStage>
}
 8010026:	bf00      	nop
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b082      	sub	sp, #8
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
 8010036:	460b      	mov	r3, r1
 8010038:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010040:	78fa      	ldrb	r2, [r7, #3]
 8010042:	6879      	ldr	r1, [r7, #4]
 8010044:	4613      	mov	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	4413      	add	r3, r2
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	440b      	add	r3, r1
 801004e:	3320      	adds	r3, #32
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	78fb      	ldrb	r3, [r7, #3]
 8010054:	4619      	mov	r1, r3
 8010056:	f7fb fdbc 	bl	800bbd2 <USBD_LL_DataInStage>
}
 801005a:	bf00      	nop
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010070:	4618      	mov	r0, r3
 8010072:	f7fb fef6 	bl	800be62 <USBD_LL_SOF>
}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010086:	2301      	movs	r3, #1
 8010088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	79db      	ldrb	r3, [r3, #7]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d102      	bne.n	8010098 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]
 8010096:	e008      	b.n	80100aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	79db      	ldrb	r3, [r3, #7]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d102      	bne.n	80100a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80100a0:	2301      	movs	r3, #1
 80100a2:	73fb      	strb	r3, [r7, #15]
 80100a4:	e001      	b.n	80100aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80100a6:	f7f1 f9ab 	bl	8001400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100b0:	7bfa      	ldrb	r2, [r7, #15]
 80100b2:	4611      	mov	r1, r2
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fb fe90 	bl	800bdda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fb fe38 	bl	800bd36 <USBD_LL_Reset>
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
	...

080100d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fb fe8b 	bl	800bdfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	6812      	ldr	r2, [r2, #0]
 80100f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	7adb      	ldrb	r3, [r3, #11]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d005      	beq.n	8010110 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010104:	4b04      	ldr	r3, [pc, #16]	@ (8010118 <HAL_PCD_SuspendCallback+0x48>)
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	4a03      	ldr	r2, [pc, #12]	@ (8010118 <HAL_PCD_SuspendCallback+0x48>)
 801010a:	f043 0306 	orr.w	r3, r3, #6
 801010e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	e000ed00 	.word	0xe000ed00

0801011c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801012a:	4618      	mov	r0, r3
 801012c:	f7fb fe81 	bl	800be32 <USBD_LL_Resume>
}
 8010130:	bf00      	nop
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	460b      	mov	r3, r1
 8010142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801014a:	78fa      	ldrb	r2, [r7, #3]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7fb fed9 	bl	800bf06 <USBD_LL_IsoOUTIncomplete>
}
 8010154:	bf00      	nop
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801016e:	78fa      	ldrb	r2, [r7, #3]
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f7fb fe95 	bl	800bea2 <USBD_LL_IsoINIncomplete>
}
 8010178:	bf00      	nop
 801017a:	3708      	adds	r7, #8
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801018e:	4618      	mov	r0, r3
 8010190:	f7fb feeb 	bl	800bf6a <USBD_LL_DevConnected>
}
 8010194:	bf00      	nop
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb fee8 	bl	800bf80 <USBD_LL_DevDisconnected>
}
 80101b0:	bf00      	nop
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d13e      	bne.n	8010246 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80101c8:	4a21      	ldr	r2, [pc, #132]	@ (8010250 <USBD_LL_Init+0x98>)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a1f      	ldr	r2, [pc, #124]	@ (8010250 <USBD_LL_Init+0x98>)
 80101d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80101d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010250 <USBD_LL_Init+0x98>)
 80101da:	4a1e      	ldr	r2, [pc, #120]	@ (8010254 <USBD_LL_Init+0x9c>)
 80101dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80101de:	4b1c      	ldr	r3, [pc, #112]	@ (8010250 <USBD_LL_Init+0x98>)
 80101e0:	2209      	movs	r2, #9
 80101e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80101e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010250 <USBD_LL_Init+0x98>)
 80101e6:	2202      	movs	r2, #2
 80101e8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80101ea:	4b19      	ldr	r3, [pc, #100]	@ (8010250 <USBD_LL_Init+0x98>)
 80101ec:	2200      	movs	r2, #0
 80101ee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80101f0:	4b17      	ldr	r3, [pc, #92]	@ (8010250 <USBD_LL_Init+0x98>)
 80101f2:	2202      	movs	r2, #2
 80101f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80101f6:	4b16      	ldr	r3, [pc, #88]	@ (8010250 <USBD_LL_Init+0x98>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80101fc:	4b14      	ldr	r3, [pc, #80]	@ (8010250 <USBD_LL_Init+0x98>)
 80101fe:	2200      	movs	r2, #0
 8010200:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010202:	4b13      	ldr	r3, [pc, #76]	@ (8010250 <USBD_LL_Init+0x98>)
 8010204:	2200      	movs	r2, #0
 8010206:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010208:	4b11      	ldr	r3, [pc, #68]	@ (8010250 <USBD_LL_Init+0x98>)
 801020a:	2200      	movs	r2, #0
 801020c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801020e:	4b10      	ldr	r3, [pc, #64]	@ (8010250 <USBD_LL_Init+0x98>)
 8010210:	2200      	movs	r2, #0
 8010212:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010214:	4b0e      	ldr	r3, [pc, #56]	@ (8010250 <USBD_LL_Init+0x98>)
 8010216:	2200      	movs	r2, #0
 8010218:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801021a:	480d      	ldr	r0, [pc, #52]	@ (8010250 <USBD_LL_Init+0x98>)
 801021c:	f7f3 fa97 	bl	800374e <HAL_PCD_Init>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010226:	f7f1 f8eb 	bl	8001400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801022a:	2180      	movs	r1, #128	@ 0x80
 801022c:	4808      	ldr	r0, [pc, #32]	@ (8010250 <USBD_LL_Init+0x98>)
 801022e:	f7f4 fcec 	bl	8004c0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010232:	2240      	movs	r2, #64	@ 0x40
 8010234:	2100      	movs	r1, #0
 8010236:	4806      	ldr	r0, [pc, #24]	@ (8010250 <USBD_LL_Init+0x98>)
 8010238:	f7f4 fca0 	bl	8004b7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801023c:	2280      	movs	r2, #128	@ 0x80
 801023e:	2101      	movs	r1, #1
 8010240:	4803      	ldr	r0, [pc, #12]	@ (8010250 <USBD_LL_Init+0x98>)
 8010242:	f7f4 fc9b 	bl	8004b7c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	2400640c 	.word	0x2400640c
 8010254:	40080000 	.word	0x40080000

08010258 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010260:	2300      	movs	r3, #0
 8010262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010264:	2300      	movs	r3, #0
 8010266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801026e:	4618      	mov	r0, r3
 8010270:	f7f3 fb79 	bl	8003966 <HAL_PCD_Start>
 8010274:	4603      	mov	r3, r0
 8010276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010278:	7bfb      	ldrb	r3, [r7, #15]
 801027a:	4618      	mov	r0, r3
 801027c:	f000 f942 	bl	8010504 <USBD_Get_USB_Status>
 8010280:	4603      	mov	r3, r0
 8010282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010284:	7bbb      	ldrb	r3, [r7, #14]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b084      	sub	sp, #16
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	4608      	mov	r0, r1
 8010298:	4611      	mov	r1, r2
 801029a:	461a      	mov	r2, r3
 801029c:	4603      	mov	r3, r0
 801029e:	70fb      	strb	r3, [r7, #3]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70bb      	strb	r3, [r7, #2]
 80102a4:	4613      	mov	r3, r2
 80102a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102a8:	2300      	movs	r3, #0
 80102aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80102b6:	78bb      	ldrb	r3, [r7, #2]
 80102b8:	883a      	ldrh	r2, [r7, #0]
 80102ba:	78f9      	ldrb	r1, [r7, #3]
 80102bc:	f7f4 f87a 	bl	80043b4 <HAL_PCD_EP_Open>
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102c4:	7bfb      	ldrb	r3, [r7, #15]
 80102c6:	4618      	mov	r0, r3
 80102c8:	f000 f91c 	bl	8010504 <USBD_Get_USB_Status>
 80102cc:	4603      	mov	r3, r0
 80102ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b084      	sub	sp, #16
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	460b      	mov	r3, r1
 80102e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102e6:	2300      	movs	r3, #0
 80102e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102f4:	78fa      	ldrb	r2, [r7, #3]
 80102f6:	4611      	mov	r1, r2
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7f4 f8c3 	bl	8004484 <HAL_PCD_EP_Close>
 80102fe:	4603      	mov	r3, r0
 8010300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010302:	7bfb      	ldrb	r3, [r7, #15]
 8010304:	4618      	mov	r0, r3
 8010306:	f000 f8fd 	bl	8010504 <USBD_Get_USB_Status>
 801030a:	4603      	mov	r3, r0
 801030c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801030e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	460b      	mov	r3, r1
 8010322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010324:	2300      	movs	r3, #0
 8010326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010332:	78fa      	ldrb	r2, [r7, #3]
 8010334:	4611      	mov	r1, r2
 8010336:	4618      	mov	r0, r3
 8010338:	f7f4 f97b 	bl	8004632 <HAL_PCD_EP_SetStall>
 801033c:	4603      	mov	r3, r0
 801033e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010340:	7bfb      	ldrb	r3, [r7, #15]
 8010342:	4618      	mov	r0, r3
 8010344:	f000 f8de 	bl	8010504 <USBD_Get_USB_Status>
 8010348:	4603      	mov	r3, r0
 801034a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801034c:	7bbb      	ldrb	r3, [r7, #14]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b084      	sub	sp, #16
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	460b      	mov	r3, r1
 8010360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010362:	2300      	movs	r3, #0
 8010364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010366:	2300      	movs	r3, #0
 8010368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010370:	78fa      	ldrb	r2, [r7, #3]
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f7f4 f9bf 	bl	80046f8 <HAL_PCD_EP_ClrStall>
 801037a:	4603      	mov	r3, r0
 801037c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801037e:	7bfb      	ldrb	r3, [r7, #15]
 8010380:	4618      	mov	r0, r3
 8010382:	f000 f8bf 	bl	8010504 <USBD_Get_USB_Status>
 8010386:	4603      	mov	r3, r0
 8010388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801038a:	7bbb      	ldrb	r3, [r7, #14]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	da0b      	bge.n	80103c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80103b0:	78fb      	ldrb	r3, [r7, #3]
 80103b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80103b6:	68f9      	ldr	r1, [r7, #12]
 80103b8:	4613      	mov	r3, r2
 80103ba:	00db      	lsls	r3, r3, #3
 80103bc:	4413      	add	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	440b      	add	r3, r1
 80103c2:	3316      	adds	r3, #22
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	e00b      	b.n	80103e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80103ce:	68f9      	ldr	r1, [r7, #12]
 80103d0:	4613      	mov	r3, r2
 80103d2:	00db      	lsls	r3, r3, #3
 80103d4:	4413      	add	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	440b      	add	r3, r1
 80103da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80103de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr

080103ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103f8:	2300      	movs	r3, #0
 80103fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010406:	78fa      	ldrb	r2, [r7, #3]
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7f3 ffae 	bl	800436c <HAL_PCD_SetAddress>
 8010410:	4603      	mov	r3, r0
 8010412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010414:	7bfb      	ldrb	r3, [r7, #15]
 8010416:	4618      	mov	r0, r3
 8010418:	f000 f874 	bl	8010504 <USBD_Get_USB_Status>
 801041c:	4603      	mov	r3, r0
 801041e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010420:	7bbb      	ldrb	r3, [r7, #14]
}
 8010422:	4618      	mov	r0, r3
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}

0801042a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801042a:	b580      	push	{r7, lr}
 801042c:	b086      	sub	sp, #24
 801042e:	af00      	add	r7, sp, #0
 8010430:	60f8      	str	r0, [r7, #12]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	603b      	str	r3, [r7, #0]
 8010436:	460b      	mov	r3, r1
 8010438:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801043a:	2300      	movs	r3, #0
 801043c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010448:	7af9      	ldrb	r1, [r7, #11]
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	f7f4 f8b6 	bl	80045be <HAL_PCD_EP_Transmit>
 8010452:	4603      	mov	r3, r0
 8010454:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010456:	7dfb      	ldrb	r3, [r7, #23]
 8010458:	4618      	mov	r0, r3
 801045a:	f000 f853 	bl	8010504 <USBD_Get_USB_Status>
 801045e:	4603      	mov	r3, r0
 8010460:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010462:	7dbb      	ldrb	r3, [r7, #22]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3718      	adds	r7, #24
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b086      	sub	sp, #24
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	607a      	str	r2, [r7, #4]
 8010476:	603b      	str	r3, [r7, #0]
 8010478:	460b      	mov	r3, r1
 801047a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801047c:	2300      	movs	r3, #0
 801047e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010480:	2300      	movs	r3, #0
 8010482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801048a:	7af9      	ldrb	r1, [r7, #11]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	f7f4 f842 	bl	8004518 <HAL_PCD_EP_Receive>
 8010494:	4603      	mov	r3, r0
 8010496:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010498:	7dfb      	ldrb	r3, [r7, #23]
 801049a:	4618      	mov	r0, r3
 801049c:	f000 f832 	bl	8010504 <USBD_Get_USB_Status>
 80104a0:	4603      	mov	r3, r0
 80104a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3718      	adds	r7, #24
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ae:	b580      	push	{r7, lr}
 80104b0:	b082      	sub	sp, #8
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	6078      	str	r0, [r7, #4]
 80104b6:	460b      	mov	r3, r1
 80104b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104c0:	78fa      	ldrb	r2, [r7, #3]
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7f4 f862 	bl	800458e <HAL_PCD_EP_GetRxCount>
 80104ca:	4603      	mov	r3, r0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80104dc:	4b03      	ldr	r3, [pc, #12]	@ (80104ec <USBD_static_malloc+0x18>)
}
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	240068f0 	.word	0x240068f0

080104f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	4603      	mov	r3, r0
 801050c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010512:	79fb      	ldrb	r3, [r7, #7]
 8010514:	2b03      	cmp	r3, #3
 8010516:	d817      	bhi.n	8010548 <USBD_Get_USB_Status+0x44>
 8010518:	a201      	add	r2, pc, #4	@ (adr r2, 8010520 <USBD_Get_USB_Status+0x1c>)
 801051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801051e:	bf00      	nop
 8010520:	08010531 	.word	0x08010531
 8010524:	08010537 	.word	0x08010537
 8010528:	0801053d 	.word	0x0801053d
 801052c:	08010543 	.word	0x08010543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73fb      	strb	r3, [r7, #15]
    break;
 8010534:	e00b      	b.n	801054e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010536:	2303      	movs	r3, #3
 8010538:	73fb      	strb	r3, [r7, #15]
    break;
 801053a:	e008      	b.n	801054e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801053c:	2301      	movs	r3, #1
 801053e:	73fb      	strb	r3, [r7, #15]
    break;
 8010540:	e005      	b.n	801054e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010542:	2303      	movs	r3, #3
 8010544:	73fb      	strb	r3, [r7, #15]
    break;
 8010546:	e002      	b.n	801054e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010548:	2303      	movs	r3, #3
 801054a:	73fb      	strb	r3, [r7, #15]
    break;
 801054c:	bf00      	nop
  }
  return usb_status;
 801054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3714      	adds	r7, #20
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr

0801055c <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 8010560:	2200      	movs	r2, #0
 8010562:	2108      	movs	r1, #8
 8010564:	480a      	ldr	r0, [pc, #40]	@ (8010590 <ad7606_Init+0x34>)
 8010566:	f7f2 fa81 	bl	8002a6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 801056a:	2001      	movs	r0, #1
 801056c:	f7f1 fcf6 	bl	8001f5c <HAL_Delay>
    AD7606_RST_SET();
 8010570:	2201      	movs	r2, #1
 8010572:	2108      	movs	r1, #8
 8010574:	4806      	ldr	r0, [pc, #24]	@ (8010590 <ad7606_Init+0x34>)
 8010576:	f7f2 fa79 	bl	8002a6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 801057a:	2001      	movs	r0, #1
 801057c:	f7f1 fcee 	bl	8001f5c <HAL_Delay>
    AD7606_RST_RESET();
 8010580:	2200      	movs	r2, #0
 8010582:	2108      	movs	r1, #8
 8010584:	4802      	ldr	r0, [pc, #8]	@ (8010590 <ad7606_Init+0x34>)
 8010586:	f7f2 fa71 	bl	8002a6c <HAL_GPIO_WritePin>
}
 801058a:	bf00      	nop
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	58021800 	.word	0x58021800

08010594 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	4613      	mov	r3, r2
 80105a0:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 80105a2:	2200      	movs	r2, #0
 80105a4:	2180      	movs	r1, #128	@ 0x80
 80105a6:	4809      	ldr	r0, [pc, #36]	@ (80105cc <ad7606_Read+0x38>)
 80105a8:	f7f2 fa60 	bl	8002a6c <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 80105ac:	88fa      	ldrh	r2, [r7, #6]
 80105ae:	2364      	movs	r3, #100	@ 0x64
 80105b0:	68b9      	ldr	r1, [r7, #8]
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7f7 fa46 	bl	8007a44 <HAL_SPI_Receive>
    AD7606_CS_SET();
 80105b8:	2201      	movs	r2, #1
 80105ba:	2180      	movs	r1, #128	@ 0x80
 80105bc:	4803      	ldr	r0, [pc, #12]	@ (80105cc <ad7606_Read+0x38>)
 80105be:	f7f2 fa55 	bl	8002a6c <HAL_GPIO_WritePin>
}
 80105c2:	bf00      	nop
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	58021800 	.word	0x58021800

080105d0 <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7f7 febd 	bl	800835c <HAL_TIM_PWM_Start>
}
 80105e2:	bf00      	nop
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	460b      	mov	r3, r1
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 80105fa:	2300      	movs	r3, #0
 80105fc:	617b      	str	r3, [r7, #20]
 80105fe:	e03d      	b.n	801067c <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	4413      	add	r3, r2
 8010608:	f9b3 3000 	ldrsh.w	r3, [r3]
 801060c:	2b00      	cmp	r3, #0
 801060e:	da0f      	bge.n	8010630 <ad7606_Convert+0x44>
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	4413      	add	r3, r2
 8010618:	f9b3 3000 	ldrsh.w	r3, [r3]
 801061c:	b29b      	uxth	r3, r3
 801061e:	425b      	negs	r3, r3
 8010620:	b29b      	uxth	r3, r3
 8010622:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010626:	b29b      	uxth	r3, r3
 8010628:	425b      	negs	r3, r3
 801062a:	b29b      	uxth	r3, r3
 801062c:	b21b      	sxth	r3, r3
 801062e:	e005      	b.n	801063c <ad7606_Convert+0x50>
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	005b      	lsls	r3, r3, #1
 8010634:	68fa      	ldr	r2, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801063c:	697a      	ldr	r2, [r7, #20]
 801063e:	0052      	lsls	r2, r2, #1
 8010640:	68f9      	ldr	r1, [r7, #12]
 8010642:	440a      	add	r2, r1
 8010644:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	4413      	add	r3, r2
 801064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010652:	ee07 3a90 	vmov	s15, r3
 8010656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801065a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801065e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	4413      	add	r3, r2
 801066a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8010694 <ad7606_Convert+0xa8>
 801066e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010672:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	3301      	adds	r3, #1
 801067a:	617b      	str	r3, [r7, #20]
 801067c:	897b      	ldrh	r3, [r7, #10]
 801067e:	697a      	ldr	r2, [r7, #20]
 8010680:	429a      	cmp	r2, r3
 8010682:	dbbd      	blt.n	8010600 <ad7606_Convert+0x14>
    }
}
 8010684:	bf00      	nop
 8010686:	bf00      	nop
 8010688:	371c      	adds	r7, #28
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop
 8010694:	47000000 	.word	0x47000000

08010698 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 8010698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801069c:	b087      	sub	sp, #28
 801069e:	af00      	add	r7, sp, #0
 80106a0:	60f8      	str	r0, [r7, #12]
 80106a2:	460b      	mov	r3, r1
 80106a4:	607a      	str	r2, [r7, #4]
 80106a6:	817b      	strh	r3, [r7, #10]
 80106a8:	466b      	mov	r3, sp
 80106aa:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 80106ac:	8979      	ldrh	r1, [r7, #10]
 80106ae:	460b      	mov	r3, r1
 80106b0:	3b01      	subs	r3, #1
 80106b2:	617b      	str	r3, [r7, #20]
 80106b4:	b28b      	uxth	r3, r1
 80106b6:	2200      	movs	r2, #0
 80106b8:	4698      	mov	r8, r3
 80106ba:	4691      	mov	r9, r2
 80106bc:	f04f 0200 	mov.w	r2, #0
 80106c0:	f04f 0300 	mov.w	r3, #0
 80106c4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80106c8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80106cc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80106d0:	b28b      	uxth	r3, r1
 80106d2:	2200      	movs	r2, #0
 80106d4:	461c      	mov	r4, r3
 80106d6:	4615      	mov	r5, r2
 80106d8:	f04f 0200 	mov.w	r2, #0
 80106dc:	f04f 0300 	mov.w	r3, #0
 80106e0:	012b      	lsls	r3, r5, #4
 80106e2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80106e6:	0122      	lsls	r2, r4, #4
 80106e8:	460b      	mov	r3, r1
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	3307      	adds	r3, #7
 80106ee:	08db      	lsrs	r3, r3, #3
 80106f0:	00db      	lsls	r3, r3, #3
 80106f2:	ebad 0d03 	sub.w	sp, sp, r3
 80106f6:	466b      	mov	r3, sp
 80106f8:	3301      	adds	r3, #1
 80106fa:	085b      	lsrs	r3, r3, #1
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 8010700:	897b      	ldrh	r3, [r7, #10]
 8010702:	461a      	mov	r2, r3
 8010704:	6939      	ldr	r1, [r7, #16]
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7ff ff44 	bl	8010594 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 801070c:	897b      	ldrh	r3, [r7, #10]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	4619      	mov	r1, r3
 8010712:	6938      	ldr	r0, [r7, #16]
 8010714:	f7ff ff6a 	bl	80105ec <ad7606_Convert>
 8010718:	46b5      	mov	sp, r6
}
 801071a:	bf00      	nop
 801071c:	371c      	adds	r7, #28
 801071e:	46bd      	mov	sp, r7
 8010720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010724 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b088      	sub	sp, #32
 8010728:	af04      	add	r7, sp, #16
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	460b      	mov	r3, r1
 801072e:	70fb      	strb	r3, [r7, #3]
 8010730:	4613      	mov	r3, r2
 8010732:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010734:	2300      	movs	r3, #0
 8010736:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010738:	883b      	ldrh	r3, [r7, #0]
 801073a:	0a1b      	lsrs	r3, r3, #8
 801073c:	b29b      	uxth	r3, r3
 801073e:	b2db      	uxtb	r3, r3
 8010740:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 8010742:	883b      	ldrh	r3, [r7, #0]
 8010744:	b2db      	uxtb	r3, r3
 8010746:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	69d8      	ldr	r0, [r3, #28]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010752:	4619      	mov	r1, r3
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	b29a      	uxth	r2, r3
 8010758:	2364      	movs	r3, #100	@ 0x64
 801075a:	9302      	str	r3, [sp, #8]
 801075c:	2302      	movs	r3, #2
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	f107 030c 	add.w	r3, r7, #12
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	2301      	movs	r3, #1
 8010768:	f7f2 fa6a 	bl	8002c40 <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 801076c:	78fb      	ldrb	r3, [r7, #3]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d105      	bne.n	801077e <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 8010772:	883b      	ldrh	r3, [r7, #0]
 8010774:	f003 0310 	and.w	r3, r3, #16
 8010778:	b29a      	uxth	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	82da      	strh	r2, [r3, #22]
	}
}
 801077e:	bf00      	nop
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b082      	sub	sp, #8
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	461a      	mov	r2, r3
 8010794:	2100      	movs	r1, #0
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff ffc4 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	885b      	ldrh	r3, [r3, #2]
 80107a0:	461a      	mov	r2, r3
 80107a2:	2101      	movs	r1, #1
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7ff ffbd 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	889b      	ldrh	r3, [r3, #4]
 80107ae:	461a      	mov	r2, r3
 80107b0:	2102      	movs	r1, #2
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7ff ffb6 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	88db      	ldrh	r3, [r3, #6]
 80107bc:	461a      	mov	r2, r3
 80107be:	2103      	movs	r1, #3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff ffaf 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	891b      	ldrh	r3, [r3, #8]
 80107ca:	461a      	mov	r2, r3
 80107cc:	210b      	movs	r1, #11
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7ff ffa8 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	895b      	ldrh	r3, [r3, #10]
 80107d8:	461a      	mov	r2, r3
 80107da:	210c      	movs	r1, #12
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffa1 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	899b      	ldrh	r3, [r3, #12]
 80107e6:	461a      	mov	r2, r3
 80107e8:	210d      	movs	r1, #13
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ff ff9a 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	89db      	ldrh	r3, [r3, #14]
 80107f4:	461a      	mov	r2, r3
 80107f6:	210e      	movs	r1, #14
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ff93 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	8a1b      	ldrh	r3, [r3, #16]
 8010802:	461a      	mov	r2, r3
 8010804:	210f      	movs	r1, #15
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff ff8c 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	8a5b      	ldrh	r3, [r3, #18]
 8010810:	461a      	mov	r2, r3
 8010812:	2110      	movs	r1, #16
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff ff85 	bl	8010724 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	8a9b      	ldrh	r3, [r3, #20]
 801081e:	461a      	mov	r2, r3
 8010820:	2111      	movs	r1, #17
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff ff7e 	bl	8010724 <INA228_writeReg>
}
 8010828:	bf00      	nop
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 8010830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010834:	b08c      	sub	sp, #48	@ 0x30
 8010836:	af04      	add	r7, sp, #16
 8010838:	6078      	str	r0, [r7, #4]
 801083a:	460b      	mov	r3, r1
 801083c:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801083e:	2300      	movs	r3, #0
 8010840:	60fb      	str	r3, [r7, #12]
 8010842:	2300      	movs	r3, #0
 8010844:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 3020 	ldrb.w	r3, [r3, #32]
 801084c:	4618      	mov	r0, r3
 801084e:	78fb      	ldrb	r3, [r7, #3]
 8010850:	b29a      	uxth	r2, r3
 8010852:	78fb      	ldrb	r3, [r7, #3]
 8010854:	4921      	ldr	r1, [pc, #132]	@ (80108dc <INA228_readReg+0xac>)
 8010856:	5ccb      	ldrb	r3, [r1, r3]
 8010858:	4619      	mov	r1, r3
 801085a:	2364      	movs	r3, #100	@ 0x64
 801085c:	9302      	str	r3, [sp, #8]
 801085e:	9101      	str	r1, [sp, #4]
 8010860:	f107 030c 	add.w	r3, r7, #12
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	2301      	movs	r3, #1
 8010868:	4601      	mov	r1, r0
 801086a:	481d      	ldr	r0, [pc, #116]	@ (80108e0 <INA228_readReg+0xb0>)
 801086c:	f7f2 fafc 	bl	8002e68 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 8010870:	7b3b      	ldrb	r3, [r7, #12]
 8010872:	b2db      	uxtb	r3, r3
 8010874:	2200      	movs	r2, #0
 8010876:	469a      	mov	sl, r3
 8010878:	4693      	mov	fp, r2
 801087a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 801087e:	2301      	movs	r3, #1
 8010880:	617b      	str	r3, [r7, #20]
 8010882:	e01b      	b.n	80108bc <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 8010884:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010888:	f04f 0200 	mov.w	r2, #0
 801088c:	f04f 0300 	mov.w	r3, #0
 8010890:	020b      	lsls	r3, r1, #8
 8010892:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010896:	0202      	lsls	r2, r0, #8
 8010898:	f107 000c 	add.w	r0, r7, #12
 801089c:	6979      	ldr	r1, [r7, #20]
 801089e:	4401      	add	r1, r0
 80108a0:	7809      	ldrb	r1, [r1, #0]
 80108a2:	b2c9      	uxtb	r1, r1
 80108a4:	2000      	movs	r0, #0
 80108a6:	460c      	mov	r4, r1
 80108a8:	4605      	mov	r5, r0
 80108aa:	ea42 0804 	orr.w	r8, r2, r4
 80108ae:	ea43 0905 	orr.w	r9, r3, r5
 80108b2:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	3301      	adds	r3, #1
 80108ba:	617b      	str	r3, [r7, #20]
 80108bc:	78fb      	ldrb	r3, [r7, #3]
 80108be:	4a07      	ldr	r2, [pc, #28]	@ (80108dc <INA228_readReg+0xac>)
 80108c0:	5cd3      	ldrb	r3, [r2, r3]
 80108c2:	461a      	mov	r2, r3
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	4293      	cmp	r3, r2
 80108c8:	dbdc      	blt.n	8010884 <INA228_readReg+0x54>
	}

	return value;
 80108ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80108ce:	4610      	mov	r0, r2
 80108d0:	4619      	mov	r1, r3
 80108d2:	3720      	adds	r7, #32
 80108d4:	46bd      	mov	sp, r7
 80108d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108da:	bf00      	nop
 80108dc:	080154d8 	.word	0x080154d8
 80108e0:	2400038c 	.word	0x2400038c

080108e4 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b086      	sub	sp, #24
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 80108ec:	2105      	movs	r1, #5
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff ff9e 	bl	8010830 <INA228_readReg>
 80108f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 80108f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108fc:	f04f 0200 	mov.w	r2, #0
 8010900:	f04f 0300 	mov.w	r3, #0
 8010904:	0902      	lsrs	r2, r0, #4
 8010906:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801090a:	090b      	lsrs	r3, r1, #4
 801090c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 8010910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010914:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010918:	f173 0300 	sbcs.w	r3, r3, #0
 801091c:	d30c      	bcc.n	8010938 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 801091e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010922:	f7ef fdfd 	bl	8000520 <__aeabi_ul2f>
 8010926:	ee07 0a10 	vmov	s14, r0
 801092a:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801096c <INA228_getVBUS_V+0x88>
 801092e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010932:	edc7 7a05 	vstr	s15, [r7, #20]
 8010936:	e005      	b.n	8010944 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801093c:	f7ef fdf0 	bl	8000520 <__aeabi_ul2f>
 8010940:	4603      	mov	r3, r0
 8010942:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010944:	edd7 7a05 	vldr	s15, [r7, #20]
 8010948:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8010970 <INA228_getVBUS_V+0x8c>
 801094c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010950:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8010974 <INA228_getVBUS_V+0x90>
 8010954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010958:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	ee07 3a90 	vmov	s15, r3
}
 8010962:	eeb0 0a67 	vmov.f32	s0, s15
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	49800000 	.word	0x49800000
 8010970:	43435000 	.word	0x43435000
 8010974:	49742400 	.word	0x49742400

08010978 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 8010980:	2107      	movs	r1, #7
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff ff54 	bl	8010830 <INA228_readReg>
 8010988:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 801098c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010990:	f04f 0200 	mov.w	r2, #0
 8010994:	f04f 0300 	mov.w	r3, #0
 8010998:	0902      	lsrs	r2, r0, #4
 801099a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801099e:	090b      	lsrs	r3, r1, #4
 80109a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 80109a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80109a8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 80109ac:	f173 0300 	sbcs.w	r3, r3, #0
 80109b0:	d30c      	bcc.n	80109cc <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 80109b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80109b6:	f7ef fdb3 	bl	8000520 <__aeabi_ul2f>
 80109ba:	ee07 0a10 	vmov	s14, r0
 80109be:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80109e8 <INA228_getCURRENT_signedLSB+0x70>
 80109c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109c6:	edc7 7a05 	vstr	s15, [r7, #20]
 80109ca:	e005      	b.n	80109d8 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 80109cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80109d0:	f7ef fda6 	bl	8000520 <__aeabi_ul2f>
 80109d4:	4603      	mov	r3, r0
 80109d6:	617b      	str	r3, [r7, #20]
	}

	return data;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	ee07 3a90 	vmov	s15, r3
}
 80109de:	eeb0 0a67 	vmov.f32	s0, s15
 80109e2:	3718      	adds	r7, #24
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	49800000 	.word	0x49800000

080109ec <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff ffbf 	bl	8010978 <INA228_getCURRENT_signedLSB>
 80109fa:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	edd3 7a06 	vldr	s15, [r3, #24]
 8010a04:	ed97 7a03 	vldr	s14, [r7, #12]
 8010a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a0c:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	ee07 3a90 	vmov	s15, r3
}
 8010a16:	eeb0 0a67 	vmov.f32	s0, s15
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	460a      	mov	r2, r1
 8010a2a:	71fb      	strb	r3, [r7, #7]
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 8010a30:	1dfb      	adds	r3, r7, #7
 8010a32:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010a34:	79bb      	ldrb	r3, [r7, #6]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d005      	beq.n	8010a46 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	2140      	movs	r1, #64	@ 0x40
 8010a3e:	4811      	ldr	r0, [pc, #68]	@ (8010a84 <OLED_WR_Byte+0x64>)
 8010a40:	f7f2 f814 	bl	8002a6c <HAL_GPIO_WritePin>
 8010a44:	e004      	b.n	8010a50 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010a46:	2200      	movs	r2, #0
 8010a48:	2140      	movs	r1, #64	@ 0x40
 8010a4a:	480e      	ldr	r0, [pc, #56]	@ (8010a84 <OLED_WR_Byte+0x64>)
 8010a4c:	f7f2 f80e 	bl	8002a6c <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8010a50:	2200      	movs	r2, #0
 8010a52:	2102      	movs	r1, #2
 8010a54:	480c      	ldr	r0, [pc, #48]	@ (8010a88 <OLED_WR_Byte+0x68>)
 8010a56:	f7f2 f809 	bl	8002a6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010a5a:	23c8      	movs	r3, #200	@ 0xc8
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	68f9      	ldr	r1, [r7, #12]
 8010a60:	480a      	ldr	r0, [pc, #40]	@ (8010a8c <OLED_WR_Byte+0x6c>)
 8010a62:	f7f6 fe01 	bl	8007668 <HAL_SPI_Transmit>

	OLED_CS_Set();
 8010a66:	2201      	movs	r2, #1
 8010a68:	2102      	movs	r1, #2
 8010a6a:	4807      	ldr	r0, [pc, #28]	@ (8010a88 <OLED_WR_Byte+0x68>)
 8010a6c:	f7f1 fffe 	bl	8002a6c <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8010a70:	2201      	movs	r2, #1
 8010a72:	2140      	movs	r1, #64	@ 0x40
 8010a74:	4803      	ldr	r0, [pc, #12]	@ (8010a84 <OLED_WR_Byte+0x64>)
 8010a76:	f7f1 fff9 	bl	8002a6c <HAL_GPIO_WritePin>
}
 8010a7a:	bf00      	nop
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	58022000 	.word	0x58022000
 8010a88:	58020400 	.word	0x58020400
 8010a8c:	240003e0 	.word	0x240003e0

08010a90 <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010a96:	2300      	movs	r3, #0
 8010a98:	71fb      	strb	r3, [r7, #7]
 8010a9a:	e026      	b.n	8010aea <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	3b50      	subs	r3, #80	@ 0x50
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff ffbb 	bl	8010a20 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8010aaa:	2100      	movs	r1, #0
 8010aac:	2000      	movs	r0, #0
 8010aae:	f7ff ffb7 	bl	8010a20 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	2010      	movs	r0, #16
 8010ab6:	f7ff ffb3 	bl	8010a20 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010aba:	2300      	movs	r3, #0
 8010abc:	71bb      	strb	r3, [r7, #6]
 8010abe:	e00d      	b.n	8010adc <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8010ac0:	79ba      	ldrb	r2, [r7, #6]
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
 8010ac4:	490d      	ldr	r1, [pc, #52]	@ (8010afc <OLED_Refresh+0x6c>)
 8010ac6:	00d2      	lsls	r2, r2, #3
 8010ac8:	440a      	add	r2, r1
 8010aca:	4413      	add	r3, r2
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	2101      	movs	r1, #1
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff ffa5 	bl	8010a20 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010ad6:	79bb      	ldrb	r3, [r7, #6]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	71bb      	strb	r3, [r7, #6]
 8010adc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	daed      	bge.n	8010ac0 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010ae4:	79fb      	ldrb	r3, [r7, #7]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	71fb      	strb	r3, [r7, #7]
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	2b07      	cmp	r3, #7
 8010aee:	d9d5      	bls.n	8010a9c <OLED_Refresh+0xc>
	}
}
 8010af0:	bf00      	nop
 8010af2:	bf00      	nop
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	24006b10 	.word	0x24006b10

08010b00 <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010b06:	2300      	movs	r3, #0
 8010b08:	71fb      	strb	r3, [r7, #7]
 8010b0a:	e014      	b.n	8010b36 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	71bb      	strb	r3, [r7, #6]
 8010b10:	e00a      	b.n	8010b28 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 8010b12:	79ba      	ldrb	r2, [r7, #6]
 8010b14:	79fb      	ldrb	r3, [r7, #7]
 8010b16:	490c      	ldr	r1, [pc, #48]	@ (8010b48 <OLED_Clear+0x48>)
 8010b18:	00d2      	lsls	r2, r2, #3
 8010b1a:	440a      	add	r2, r1
 8010b1c:	4413      	add	r3, r2
 8010b1e:	2200      	movs	r2, #0
 8010b20:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8010b22:	79bb      	ldrb	r3, [r7, #6]
 8010b24:	3301      	adds	r3, #1
 8010b26:	71bb      	strb	r3, [r7, #6]
 8010b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	daf0      	bge.n	8010b12 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8010b30:	79fb      	ldrb	r3, [r7, #7]
 8010b32:	3301      	adds	r3, #1
 8010b34:	71fb      	strb	r3, [r7, #7]
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	2b07      	cmp	r3, #7
 8010b3a:	d9e7      	bls.n	8010b0c <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010b3c:	f7ff ffa8 	bl	8010a90 <OLED_Refresh>
}
 8010b40:	bf00      	nop
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	24006b10 	.word	0x24006b10

08010b4c <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	4603      	mov	r3, r0
 8010b54:	460a      	mov	r2, r1
 8010b56:	71fb      	strb	r3, [r7, #7]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010b5c:	79bb      	ldrb	r3, [r7, #6]
 8010b5e:	08db      	lsrs	r3, r3, #3
 8010b60:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010b62:	79bb      	ldrb	r3, [r7, #6]
 8010b64:	f003 0307 	and.w	r3, r3, #7
 8010b68:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b72:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010b74:	79fa      	ldrb	r2, [r7, #7]
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	490a      	ldr	r1, [pc, #40]	@ (8010ba4 <OLED_DrawPoint+0x58>)
 8010b7a:	00d2      	lsls	r2, r2, #3
 8010b7c:	440a      	add	r2, r1
 8010b7e:	4413      	add	r3, r2
 8010b80:	7818      	ldrb	r0, [r3, #0]
 8010b82:	79fa      	ldrb	r2, [r7, #7]
 8010b84:	7bfb      	ldrb	r3, [r7, #15]
 8010b86:	7b79      	ldrb	r1, [r7, #13]
 8010b88:	4301      	orrs	r1, r0
 8010b8a:	b2c8      	uxtb	r0, r1
 8010b8c:	4905      	ldr	r1, [pc, #20]	@ (8010ba4 <OLED_DrawPoint+0x58>)
 8010b8e:	00d2      	lsls	r2, r2, #3
 8010b90:	440a      	add	r2, r1
 8010b92:	4413      	add	r3, r2
 8010b94:	4602      	mov	r2, r0
 8010b96:	701a      	strb	r2, [r3, #0]
}
 8010b98:	bf00      	nop
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	24006b10 	.word	0x24006b10

08010ba8 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	460a      	mov	r2, r1
 8010bb2:	71fb      	strb	r3, [r7, #7]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010bb8:	79bb      	ldrb	r3, [r7, #6]
 8010bba:	08db      	lsrs	r3, r3, #3
 8010bbc:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010bbe:	79bb      	ldrb	r3, [r7, #6]
 8010bc0:	f003 0307 	and.w	r3, r3, #7
 8010bc4:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010bc6:	7bbb      	ldrb	r3, [r7, #14]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	fa02 f303 	lsl.w	r3, r2, r3
 8010bce:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010bd0:	79fa      	ldrb	r2, [r7, #7]
 8010bd2:	7bfb      	ldrb	r3, [r7, #15]
 8010bd4:	491b      	ldr	r1, [pc, #108]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010bd6:	00d2      	lsls	r2, r2, #3
 8010bd8:	440a      	add	r2, r1
 8010bda:	4413      	add	r3, r2
 8010bdc:	7819      	ldrb	r1, [r3, #0]
 8010bde:	79fa      	ldrb	r2, [r7, #7]
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	43c9      	mvns	r1, r1
 8010be4:	b2c8      	uxtb	r0, r1
 8010be6:	4917      	ldr	r1, [pc, #92]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010be8:	00d2      	lsls	r2, r2, #3
 8010bea:	440a      	add	r2, r1
 8010bec:	4413      	add	r3, r2
 8010bee:	4602      	mov	r2, r0
 8010bf0:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 8010bf2:	79fa      	ldrb	r2, [r7, #7]
 8010bf4:	7bfb      	ldrb	r3, [r7, #15]
 8010bf6:	4913      	ldr	r1, [pc, #76]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010bf8:	00d2      	lsls	r2, r2, #3
 8010bfa:	440a      	add	r2, r1
 8010bfc:	4413      	add	r3, r2
 8010bfe:	7818      	ldrb	r0, [r3, #0]
 8010c00:	79fa      	ldrb	r2, [r7, #7]
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	7b79      	ldrb	r1, [r7, #13]
 8010c06:	4301      	orrs	r1, r0
 8010c08:	b2c8      	uxtb	r0, r1
 8010c0a:	490e      	ldr	r1, [pc, #56]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010c0c:	00d2      	lsls	r2, r2, #3
 8010c0e:	440a      	add	r2, r1
 8010c10:	4413      	add	r3, r2
 8010c12:	4602      	mov	r2, r0
 8010c14:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010c16:	79fa      	ldrb	r2, [r7, #7]
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	490a      	ldr	r1, [pc, #40]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010c1c:	00d2      	lsls	r2, r2, #3
 8010c1e:	440a      	add	r2, r1
 8010c20:	4413      	add	r3, r2
 8010c22:	7819      	ldrb	r1, [r3, #0]
 8010c24:	79fa      	ldrb	r2, [r7, #7]
 8010c26:	7bfb      	ldrb	r3, [r7, #15]
 8010c28:	43c9      	mvns	r1, r1
 8010c2a:	b2c8      	uxtb	r0, r1
 8010c2c:	4905      	ldr	r1, [pc, #20]	@ (8010c44 <OLED_ClearPoint+0x9c>)
 8010c2e:	00d2      	lsls	r2, r2, #3
 8010c30:	440a      	add	r2, r1
 8010c32:	4413      	add	r3, r2
 8010c34:	4602      	mov	r2, r0
 8010c36:	701a      	strb	r2, [r3, #0]
}
 8010c38:	bf00      	nop
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr
 8010c44:	24006b10 	.word	0x24006b10

08010c48 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010c48:	b590      	push	{r4, r7, lr}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	4604      	mov	r4, r0
 8010c50:	4608      	mov	r0, r1
 8010c52:	4611      	mov	r1, r2
 8010c54:	461a      	mov	r2, r3
 8010c56:	4623      	mov	r3, r4
 8010c58:	71fb      	strb	r3, [r7, #7]
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	71bb      	strb	r3, [r7, #6]
 8010c5e:	460b      	mov	r3, r1
 8010c60:	717b      	strb	r3, [r7, #5]
 8010c62:	4613      	mov	r3, r2
 8010c64:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010c66:	79bb      	ldrb	r3, [r7, #6]
 8010c68:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010c6a:	793b      	ldrb	r3, [r7, #4]
 8010c6c:	08db      	lsrs	r3, r3, #3
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	461a      	mov	r2, r3
 8010c72:	793b      	ldrb	r3, [r7, #4]
 8010c74:	f003 0307 	and.w	r3, r3, #7
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	bf14      	ite	ne
 8010c7e:	2301      	movne	r3, #1
 8010c80:	2300      	moveq	r3, #0
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	4413      	add	r3, r2
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	793b      	ldrb	r3, [r7, #4]
 8010c8a:	085b      	lsrs	r3, r3, #1
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	fb12 f303 	smulbb	r3, r2, r3
 8010c92:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010c94:	797b      	ldrb	r3, [r7, #5]
 8010c96:	3b20      	subs	r3, #32
 8010c98:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	73fb      	strb	r3, [r7, #15]
 8010c9e:	e057      	b.n	8010d50 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 8010ca0:	793b      	ldrb	r3, [r7, #4]
 8010ca2:	2b0c      	cmp	r3, #12
 8010ca4:	d10b      	bne.n	8010cbe <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010ca6:	7aba      	ldrb	r2, [r7, #10]
 8010ca8:	7bf9      	ldrb	r1, [r7, #15]
 8010caa:	482e      	ldr	r0, [pc, #184]	@ (8010d64 <OLED_ShowChar+0x11c>)
 8010cac:	4613      	mov	r3, r2
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	4413      	add	r3, r2
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4403      	add	r3, r0
 8010cb6:	440b      	add	r3, r1
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	737b      	strb	r3, [r7, #13]
 8010cbc:	e019      	b.n	8010cf2 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 8010cbe:	793b      	ldrb	r3, [r7, #4]
 8010cc0:	2b10      	cmp	r3, #16
 8010cc2:	d108      	bne.n	8010cd6 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010cc4:	7aba      	ldrb	r2, [r7, #10]
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	4927      	ldr	r1, [pc, #156]	@ (8010d68 <OLED_ShowChar+0x120>)
 8010cca:	0112      	lsls	r2, r2, #4
 8010ccc:	440a      	add	r2, r1
 8010cce:	4413      	add	r3, r2
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	737b      	strb	r3, [r7, #13]
 8010cd4:	e00d      	b.n	8010cf2 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010cd6:	793b      	ldrb	r3, [r7, #4]
 8010cd8:	2b18      	cmp	r3, #24
 8010cda:	d13e      	bne.n	8010d5a <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010cdc:	7aba      	ldrb	r2, [r7, #10]
 8010cde:	7bf9      	ldrb	r1, [r7, #15]
 8010ce0:	4822      	ldr	r0, [pc, #136]	@ (8010d6c <OLED_ShowChar+0x124>)
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4403      	add	r3, r0
 8010cec:	440b      	add	r3, r1
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	73bb      	strb	r3, [r7, #14]
 8010cf6:	e025      	b.n	8010d44 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010cf8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	da06      	bge.n	8010d0e <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010d00:	79ba      	ldrb	r2, [r7, #6]
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	4611      	mov	r1, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff ff20 	bl	8010b4c <OLED_DrawPoint>
 8010d0c:	e005      	b.n	8010d1a <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010d0e:	79ba      	ldrb	r2, [r7, #6]
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	4611      	mov	r1, r2
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7ff ff47 	bl	8010ba8 <OLED_ClearPoint>
			temp <<= 1;
 8010d1a:	7b7b      	ldrb	r3, [r7, #13]
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	737b      	strb	r3, [r7, #13]
			y++;
 8010d20:	79bb      	ldrb	r3, [r7, #6]
 8010d22:	3301      	adds	r3, #1
 8010d24:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010d26:	79ba      	ldrb	r2, [r7, #6]
 8010d28:	7b3b      	ldrb	r3, [r7, #12]
 8010d2a:	1ad2      	subs	r2, r2, r3
 8010d2c:	793b      	ldrb	r3, [r7, #4]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d105      	bne.n	8010d3e <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010d32:	7b3b      	ldrb	r3, [r7, #12]
 8010d34:	71bb      	strb	r3, [r7, #6]
				x++;
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	71fb      	strb	r3, [r7, #7]
				break;
 8010d3c:	e005      	b.n	8010d4a <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010d3e:	7bbb      	ldrb	r3, [r7, #14]
 8010d40:	3301      	adds	r3, #1
 8010d42:	73bb      	strb	r3, [r7, #14]
 8010d44:	7bbb      	ldrb	r3, [r7, #14]
 8010d46:	2b07      	cmp	r3, #7
 8010d48:	d9d6      	bls.n	8010cf8 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	73fb      	strb	r3, [r7, #15]
 8010d50:	7bfa      	ldrb	r2, [r7, #15]
 8010d52:	7afb      	ldrb	r3, [r7, #11]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d3a3      	bcc.n	8010ca0 <OLED_ShowChar+0x58>
 8010d58:	e000      	b.n	8010d5c <OLED_ShowChar+0x114>
			return;
 8010d5a:	bf00      	nop
			}
		}
	}
}
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd90      	pop	{r4, r7, pc}
 8010d62:	bf00      	nop
 8010d64:	08015518 	.word	0x08015518
 8010d68:	0801598c 	.word	0x0801598c
 8010d6c:	08015f7c 	.word	0x08015f7c

08010d70 <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	603a      	str	r2, [r7, #0]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	71fb      	strb	r3, [r7, #7]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	71bb      	strb	r3, [r7, #6]
 8010d82:	4613      	mov	r3, r2
 8010d84:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010d86:	e01b      	b.n	8010dc0 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	781a      	ldrb	r2, [r3, #0]
 8010d8c:	797b      	ldrb	r3, [r7, #5]
 8010d8e:	79b9      	ldrb	r1, [r7, #6]
 8010d90:	79f8      	ldrb	r0, [r7, #7]
 8010d92:	f7ff ff59 	bl	8010c48 <OLED_ShowChar>
		x += size1 / 2;
 8010d96:	797b      	ldrb	r3, [r7, #5]
 8010d98:	085b      	lsrs	r3, r3, #1
 8010d9a:	b2da      	uxtb	r2, r3
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	4413      	add	r3, r2
 8010da0:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010da2:	79fa      	ldrb	r2, [r7, #7]
 8010da4:	797b      	ldrb	r3, [r7, #5]
 8010da6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010daa:	429a      	cmp	r2, r3
 8010dac:	dd05      	ble.n	8010dba <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010dae:	2302      	movs	r3, #2
 8010db0:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010db2:	79ba      	ldrb	r2, [r7, #6]
 8010db4:	797b      	ldrb	r3, [r7, #5]
 8010db6:	4413      	add	r3, r2
 8010db8:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b1f      	cmp	r3, #31
 8010dc6:	d903      	bls.n	8010dd0 <OLED_ShowString+0x60>
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	2b7e      	cmp	r3, #126	@ 0x7e
 8010dce:	d9db      	bls.n	8010d88 <OLED_ShowString+0x18>
	}
}
 8010dd0:	bf00      	nop
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2120      	movs	r1, #32
 8010de0:	483f      	ldr	r0, [pc, #252]	@ (8010ee0 <OLED_Init+0x108>)
 8010de2:	f7f1 fe43 	bl	8002a6c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010de6:	20c8      	movs	r0, #200	@ 0xc8
 8010de8:	f7f1 f8b8 	bl	8001f5c <HAL_Delay>
	OLED_RES_Set();
 8010dec:	2201      	movs	r2, #1
 8010dee:	2120      	movs	r1, #32
 8010df0:	483b      	ldr	r0, [pc, #236]	@ (8010ee0 <OLED_Init+0x108>)
 8010df2:	f7f1 fe3b 	bl	8002a6c <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010df6:	2100      	movs	r1, #0
 8010df8:	20ae      	movs	r0, #174	@ 0xae
 8010dfa:	f7ff fe11 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010dfe:	2100      	movs	r1, #0
 8010e00:	2000      	movs	r0, #0
 8010e02:	f7ff fe0d 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010e06:	2100      	movs	r1, #0
 8010e08:	2010      	movs	r0, #16
 8010e0a:	f7ff fe09 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010e0e:	2100      	movs	r1, #0
 8010e10:	2040      	movs	r0, #64	@ 0x40
 8010e12:	f7ff fe05 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010e16:	2100      	movs	r1, #0
 8010e18:	2081      	movs	r0, #129	@ 0x81
 8010e1a:	f7ff fe01 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010e1e:	2100      	movs	r1, #0
 8010e20:	20cf      	movs	r0, #207	@ 0xcf
 8010e22:	f7ff fdfd 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010e26:	2100      	movs	r1, #0
 8010e28:	20a1      	movs	r0, #161	@ 0xa1
 8010e2a:	f7ff fdf9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010e2e:	2100      	movs	r1, #0
 8010e30:	20c8      	movs	r0, #200	@ 0xc8
 8010e32:	f7ff fdf5 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010e36:	2100      	movs	r1, #0
 8010e38:	20a6      	movs	r0, #166	@ 0xa6
 8010e3a:	f7ff fdf1 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010e3e:	2100      	movs	r1, #0
 8010e40:	20a8      	movs	r0, #168	@ 0xa8
 8010e42:	f7ff fded 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010e46:	2100      	movs	r1, #0
 8010e48:	203f      	movs	r0, #63	@ 0x3f
 8010e4a:	f7ff fde9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010e4e:	2100      	movs	r1, #0
 8010e50:	20d3      	movs	r0, #211	@ 0xd3
 8010e52:	f7ff fde5 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010e56:	2100      	movs	r1, #0
 8010e58:	2000      	movs	r0, #0
 8010e5a:	f7ff fde1 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010e5e:	2100      	movs	r1, #0
 8010e60:	20d5      	movs	r0, #213	@ 0xd5
 8010e62:	f7ff fddd 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010e66:	2100      	movs	r1, #0
 8010e68:	2080      	movs	r0, #128	@ 0x80
 8010e6a:	f7ff fdd9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010e6e:	2100      	movs	r1, #0
 8010e70:	20d9      	movs	r0, #217	@ 0xd9
 8010e72:	f7ff fdd5 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010e76:	2100      	movs	r1, #0
 8010e78:	20f1      	movs	r0, #241	@ 0xf1
 8010e7a:	f7ff fdd1 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010e7e:	2100      	movs	r1, #0
 8010e80:	20da      	movs	r0, #218	@ 0xda
 8010e82:	f7ff fdcd 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010e86:	2100      	movs	r1, #0
 8010e88:	2012      	movs	r0, #18
 8010e8a:	f7ff fdc9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010e8e:	2100      	movs	r1, #0
 8010e90:	20db      	movs	r0, #219	@ 0xdb
 8010e92:	f7ff fdc5 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010e96:	2100      	movs	r1, #0
 8010e98:	2040      	movs	r0, #64	@ 0x40
 8010e9a:	f7ff fdc1 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010e9e:	2100      	movs	r1, #0
 8010ea0:	2020      	movs	r0, #32
 8010ea2:	f7ff fdbd 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	2002      	movs	r0, #2
 8010eaa:	f7ff fdb9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010eae:	2100      	movs	r1, #0
 8010eb0:	208d      	movs	r0, #141	@ 0x8d
 8010eb2:	f7ff fdb5 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	2014      	movs	r0, #20
 8010eba:	f7ff fdb1 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	20a4      	movs	r0, #164	@ 0xa4
 8010ec2:	f7ff fdad 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8010ec6:	2100      	movs	r1, #0
 8010ec8:	20a6      	movs	r0, #166	@ 0xa6
 8010eca:	f7ff fda9 	bl	8010a20 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 8010ece:	2100      	movs	r1, #0
 8010ed0:	20af      	movs	r0, #175	@ 0xaf
 8010ed2:	f7ff fda5 	bl	8010a20 <OLED_WR_Byte>
	OLED_Clear();
 8010ed6:	f7ff fe13 	bl	8010b00 <OLED_Clear>
}
 8010eda:	bf00      	nop
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	58020800 	.word	0x58020800

08010ee4 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b087      	sub	sp, #28
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6178      	str	r0, [r7, #20]
 8010eec:	ed87 0a04 	vstr	s0, [r7, #16]
 8010ef0:	edc7 0a03 	vstr	s1, [r7, #12]
 8010ef4:	ed87 1a02 	vstr	s2, [r7, #8]
 8010ef8:	edc7 1a01 	vstr	s3, [r7, #4]
 8010efc:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	693a      	ldr	r2, [r7, #16]
 8010f04:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	f04f 0200 	mov.w	r2, #0
 8010f24:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	f04f 0200 	mov.w	r2, #0
 8010f2c:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	f04f 0200 	mov.w	r2, #0
 8010f34:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	f04f 0200 	mov.w	r2, #0
 8010f3c:	619a      	str	r2, [r3, #24]
}
 8010f3e:	bf00      	nop
 8010f40:	371c      	adds	r7, #28
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	ed2d 8b02 	vpush	{d8}
 8010f50:	b084      	sub	sp, #16
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	60f8      	str	r0, [r7, #12]
 8010f56:	ed87 0a02 	vstr	s0, [r7, #8]
 8010f5a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 8010f5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8010f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	ed93 7a06 	vldr	s14, [r3, #24]
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	edd3 6a00 	vldr	s13, [r3]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	ed93 6a03 	vldr	s12, [r3, #12]
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	edd3 7a04 	vldr	s15, [r3, #16]
 8010f88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8010f8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	ed93 6a01 	vldr	s12, [r3, #4]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010fa0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	ed93 6a02 	vldr	s12, [r3, #8]
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	edd3 5a03 	vldr	s11, [r3, #12]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8010fb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010fba:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8010fc4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8010fc8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	691a      	ldr	r2, [r3, #16]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	611a      	str	r2, [r3, #16]
	// 输出限幅
	pid->out = fminf(pid->Max, fmaxf(pid->out, pid->Min));
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	ed93 8a07 	vldr	s16, [r3, #28]
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	edd3 7a06 	vldr	s15, [r3, #24]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	ed93 7a08 	vldr	s14, [r3, #32]
 8010ffc:	eef0 0a47 	vmov.f32	s1, s14
 8011000:	eeb0 0a67 	vmov.f32	s0, s15
 8011004:	f003 fef8 	bl	8014df8 <fmaxf>
 8011008:	eef0 7a40 	vmov.f32	s15, s0
 801100c:	eef0 0a67 	vmov.f32	s1, s15
 8011010:	eeb0 0a48 	vmov.f32	s0, s16
 8011014:	f003 ff0d 	bl	8014e32 <fminf>
 8011018:	eef0 7a40 	vmov.f32	s15, s0
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8011022:	bf00      	nop
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	ecbd 8b02 	vpop	{d8}
 801102c:	bd80      	pop	{r7, pc}
	...

08011030 <svpwm_Control>:
#if Rectifier_Or_Inverter
void svpwm_Control(pll_Signal_I *signal)
#else
void svpwm_Control(pll_Signal_V *signal)
#endif
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b08e      	sub	sp, #56	@ 0x38
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
    // 计算中间变量
    float Ts = signal->basic->Ts;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801103e:	62bb      	str	r3, [r7, #40]	@ 0x28
#if Rectifier_Or_Inverter
    float Ualpha = signal->park_inv_alpha;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	627b      	str	r3, [r7, #36]	@ 0x24
    float Ubeta = signal->park_inv_beta;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	623b      	str	r3, [r7, #32]
#else
    float Ualpha = M * signal->basic->clarke_alpha;
    float Ubeta = M * signal->basic->clarke_beta;
#endif

    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 801104c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011050:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80112e4 <svpwm_Control+0x2b4>
 8011054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011058:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011060:	edc7 7a07 	vstr	s15, [r7, #28]
    float Ubeta_ = Ubeta * Ts;
 8011064:	ed97 7a08 	vldr	s14, [r7, #32]
 8011068:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011070:	edc7 7a06 	vstr	s15, [r7, #24]

    // 计算XYZ
    float X = Ubeta_;
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	617b      	str	r3, [r7, #20]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 8011078:	edd7 7a07 	vldr	s15, [r7, #28]
 801107c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011080:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011084:	edd7 7a06 	vldr	s15, [r7, #24]
 8011088:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801108c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011094:	edc7 7a04 	vstr	s15, [r7, #16]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 8011098:	edd7 7a06 	vldr	s15, [r7, #24]
 801109c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80110a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80110a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80110a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80110ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110b4:	edc7 7a03 	vstr	s15, [r7, #12]

    // 通过XYZ做扇区判断
    uint8_t sector = Sector_Detection(X, Y, Z);
 80110b8:	ed97 1a03 	vldr	s2, [r7, #12]
 80110bc:	edd7 0a04 	vldr	s1, [r7, #16]
 80110c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80110c4:	f000 f910 	bl	80112e8 <Sector_Detection>
 80110c8:	4603      	mov	r3, r0
 80110ca:	72fb      	strb	r3, [r7, #11]

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 80110cc:	f04f 0300 	mov.w	r3, #0
 80110d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80110d2:	f04f 0300 	mov.w	r3, #0
 80110d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80110d8:	f04f 0300 	mov.w	r3, #0
 80110dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    switch (sector)
 80110de:	7afb      	ldrb	r3, [r7, #11]
 80110e0:	3b01      	subs	r3, #1
 80110e2:	2b05      	cmp	r3, #5
 80110e4:	f200 80f0 	bhi.w	80112c8 <svpwm_Control+0x298>
 80110e8:	a201      	add	r2, pc, #4	@ (adr r2, 80110f0 <svpwm_Control+0xc0>)
 80110ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ee:	bf00      	nop
 80110f0:	08011109 	.word	0x08011109
 80110f4:	08011153 	.word	0x08011153
 80110f8:	0801119d 	.word	0x0801119d
 80110fc:	080111e7 	.word	0x080111e7
 8011100:	08011231 	.word	0x08011231
 8011104:	0801127f 	.word	0x0801127f
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 8011108:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801110c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011110:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011114:	edd7 6a05 	vldr	s13, [r7, #20]
 8011118:	edd7 7a03 	vldr	s15, [r7, #12]
 801111c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011120:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011124:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011128:	ee77 7a27 	vadd.f32	s15, s14, s15
 801112c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 8011130:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011134:	edd7 7a03 	vldr	s15, [r7, #12]
 8011138:	ee77 7a27 	vadd.f32	s15, s14, s15
 801113c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 8011140:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011144:	edd7 7a05 	vldr	s15, [r7, #20]
 8011148:	ee77 7a67 	vsub.f32	s15, s14, s15
 801114c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 8011150:	e0ba      	b.n	80112c8 <svpwm_Control+0x298>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 8011152:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011156:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801115a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801115e:	edd7 6a03 	vldr	s13, [r7, #12]
 8011162:	edd7 7a04 	vldr	s15, [r7, #16]
 8011166:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801116a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801116e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011176:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 801117a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801117e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011186:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 801118a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801118e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011196:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 801119a:	e095      	b.n	80112c8 <svpwm_Control+0x298>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 801119c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80111ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80111b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111b4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80111b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80111bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111c0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 80111c4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80111c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80111cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 80111d4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80111d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80111dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111e0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 80111e4:	e070      	b.n	80112c8 <svpwm_Control+0x298>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 80111e6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80111f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80111fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80111fe:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011202:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011206:	ee77 7a27 	vadd.f32	s15, s14, s15
 801120a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 801120e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011212:	edd7 7a05 	vldr	s15, [r7, #20]
 8011216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801121a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 801121e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011222:	edd7 7a03 	vldr	s15, [r7, #12]
 8011226:	ee77 7a67 	vsub.f32	s15, s14, s15
 801122a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 801122e:	e04b      	b.n	80112c8 <svpwm_Control+0x298>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 8011230:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011234:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011238:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801123c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011240:	eef1 6a67 	vneg.f32	s13, s15
 8011244:	edd7 7a03 	vldr	s15, [r7, #12]
 8011248:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801124c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011250:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011258:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 801125c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011260:	edd7 7a04 	vldr	s15, [r7, #16]
 8011264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011268:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 801126c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011270:	edd7 7a03 	vldr	s15, [r7, #12]
 8011274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011278:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 801127c:	e024      	b.n	80112c8 <svpwm_Control+0x298>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 801127e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011282:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011286:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801128a:	edd7 6a04 	vldr	s13, [r7, #16]
 801128e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011292:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011296:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801129a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 80112a6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80112aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80112ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112b2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 80112b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80112ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80112be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112c2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 80112c6:	bf00      	nop
    }

    Duty_Calculation(Ta, Tb, Tc, Ts);
 80112c8:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 80112cc:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 80112d0:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 80112d4:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80112d8:	f000 f84a 	bl	8011370 <Duty_Calculation>
}
 80112dc:	bf00      	nop
 80112de:	3738      	adds	r7, #56	@ 0x38
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	3fddb3d7 	.word	0x3fddb3d7

080112e8 <Sector_Detection>:

/**
 * @brief  扇区判断
 */
static uint8_t Sector_Detection(float X, float Y, float Z)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b087      	sub	sp, #28
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80112f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80112f6:	ed87 1a01 	vstr	s2, [r7, #4]
    uint8_t sector = 0;
 80112fa:	2300      	movs	r3, #0
 80112fc:	75fb      	strb	r3, [r7, #23]
    if (Y < 0)
 80112fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8011302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130a:	d515      	bpl.n	8011338 <Sector_Detection+0x50>
    {
        if (Z < 0)
 801130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011318:	d502      	bpl.n	8011320 <Sector_Detection+0x38>
            sector = 5;
 801131a:	2305      	movs	r3, #5
 801131c:	75fb      	strb	r3, [r7, #23]
 801131e:	e020      	b.n	8011362 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 4 : 3;
 8011320:	edd7 7a03 	vldr	s15, [r7, #12]
 8011324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	d501      	bpl.n	8011332 <Sector_Detection+0x4a>
 801132e:	2304      	movs	r3, #4
 8011330:	e000      	b.n	8011334 <Sector_Detection+0x4c>
 8011332:	2303      	movs	r3, #3
 8011334:	75fb      	strb	r3, [r7, #23]
 8011336:	e014      	b.n	8011362 <Sector_Detection+0x7a>
    }
    else
    {
        if (Z > 0)
 8011338:	edd7 7a01 	vldr	s15, [r7, #4]
 801133c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011344:	dd02      	ble.n	801134c <Sector_Detection+0x64>
            sector = 2;
 8011346:	2302      	movs	r3, #2
 8011348:	75fb      	strb	r3, [r7, #23]
 801134a:	e00a      	b.n	8011362 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 6 : 1;
 801134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011358:	d501      	bpl.n	801135e <Sector_Detection+0x76>
 801135a:	2306      	movs	r3, #6
 801135c:	e000      	b.n	8011360 <Sector_Detection+0x78>
 801135e:	2301      	movs	r3, #1
 8011360:	75fb      	strb	r3, [r7, #23]
    }
    return sector;
 8011362:	7dfb      	ldrb	r3, [r7, #23]
}
 8011364:	4618      	mov	r0, r3
 8011366:	371c      	adds	r7, #28
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr

08011370 <Duty_Calculation>:

/**
 * @brief  计算并输出占空比
 */
static void Duty_Calculation(float Ta, float Tb, float Tc, float Ts)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b088      	sub	sp, #32
 8011374:	af00      	add	r7, sp, #0
 8011376:	ed87 0a03 	vstr	s0, [r7, #12]
 801137a:	edc7 0a02 	vstr	s1, [r7, #8]
 801137e:	ed87 1a01 	vstr	s2, [r7, #4]
 8011382:	edc7 1a00 	vstr	s3, [r7]
    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 8011386:	edd7 6a03 	vldr	s13, [r7, #12]
 801138a:	ed97 7a00 	vldr	s14, [r7]
 801138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011392:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011454 <Duty_Calculation+0xe4>
 8011396:	ee67 7a87 	vmul.f32	s15, s15, s14
 801139a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801139e:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80113a2:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 80113a4:	edd7 6a02 	vldr	s13, [r7, #8]
 80113a8:	ed97 7a00 	vldr	s14, [r7]
 80113ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113b0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8011454 <Duty_Calculation+0xe4>
 80113b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113bc:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80113c0:	617b      	str	r3, [r7, #20]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 80113c2:	edd7 6a01 	vldr	s13, [r7, #4]
 80113c6:	ed97 7a00 	vldr	s14, [r7]
 80113ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113ce:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8011454 <Duty_Calculation+0xe4>
 80113d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80113da:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80113de:	61bb      	str	r3, [r7, #24]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 80113e0:	2300      	movs	r3, #0
 80113e2:	61fb      	str	r3, [r7, #28]
 80113e4:	e026      	b.n	8011434 <Duty_Calculation+0xc4>
    {
        ccr[i] = fminf(TIM_PERIOD, fmaxf(0, ccr[i]));
 80113e6:	69fb      	ldr	r3, [r7, #28]
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	3320      	adds	r3, #32
 80113ec:	443b      	add	r3, r7
 80113ee:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80113f2:	ee07 3a90 	vmov	s15, r3
 80113f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113fa:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8011458 <Duty_Calculation+0xe8>
 80113fe:	eeb0 0a67 	vmov.f32	s0, s15
 8011402:	f003 fcf9 	bl	8014df8 <fmaxf>
 8011406:	eef0 7a40 	vmov.f32	s15, s0
 801140a:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011454 <Duty_Calculation+0xe4>
 801140e:	eeb0 0a67 	vmov.f32	s0, s15
 8011412:	f003 fd0e 	bl	8014e32 <fminf>
 8011416:	eef0 7a40 	vmov.f32	s15, s0
 801141a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801141e:	ee17 2a90 	vmov	r2, s15
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	3320      	adds	r3, #32
 8011428:	443b      	add	r3, r7
 801142a:	f843 2c10 	str.w	r2, [r3, #-16]
    for (int i = 0; i < 3; ++i)
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	3301      	adds	r3, #1
 8011432:	61fb      	str	r3, [r7, #28]
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	2b02      	cmp	r3, #2
 8011438:	ddd5      	ble.n	80113e6 <Duty_Calculation+0x76>
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 801143a:	4a08      	ldr	r2, [pc, #32]	@ (801145c <Duty_Calculation+0xec>)
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 8011440:	4a06      	ldr	r2, [pc, #24]	@ (801145c <Duty_Calculation+0xec>)
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 8011446:	4a05      	ldr	r2, [pc, #20]	@ (801145c <Duty_Calculation+0xec>)
 8011448:	69bb      	ldr	r3, [r7, #24]
 801144a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 801144c:	bf00      	nop
 801144e:	3720      	adds	r7, #32
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	45bb7800 	.word	0x45bb7800
 8011458:	00000000 	.word	0x00000000
 801145c:	40010000 	.word	0x40010000

08011460 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 8011460:	b590      	push	{r4, r7, lr}
 8011462:	b087      	sub	sp, #28
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	ed87 0a02 	vstr	s0, [r7, #8]
 801146c:	460b      	mov	r3, r1
 801146e:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 8011470:	200c      	movs	r0, #12
 8011472:	f000 fe6b 	bl	801214c <malloc>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681c      	ldr	r4, [r3, #0]
 8011482:	2030      	movs	r0, #48	@ 0x30
 8011484:	f000 fe62 	bl	801214c <malloc>
 8011488:	4603      	mov	r3, r0
 801148a:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681c      	ldr	r4, [r3, #0]
 8011490:	2024      	movs	r0, #36	@ 0x24
 8011492:	f000 fe5b 	bl	801214c <malloc>
 8011496:	4603      	mov	r3, r0
 8011498:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f04f 0200 	mov.w	r2, #0
 80114a4:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f04f 0200 	mov.w	r2, #0
 80114b0:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f04f 0200 	mov.w	r2, #0
 80114bc:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f04f 0200 	mov.w	r2, #0
 80114c8:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f04f 0200 	mov.w	r2, #0
 80114d4:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f04f 0200 	mov.w	r2, #0
 80114e0:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f04f 0200 	mov.w	r2, #0
 80114ec:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	f04f 0200 	mov.w	r2, #0
 80114f8:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f04f 0200 	mov.w	r2, #0
 8011504:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f04f 0200 	mov.w	r2, #0
 8011510:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->theta = 0.f;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f04f 0200 	mov.w	r2, #0
 801151a:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	edd7 7a02 	vldr	s15, [r7, #8]
 8011526:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80115c0 <pll_Init_V+0x160>
 801152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801152e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 8011532:	88fb      	ldrh	r3, [r7, #6]
 8011534:	ee07 3a90 	vmov	s15, r3
 8011538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801154a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011566:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 801156a:	edd7 7a05 	vldr	s15, [r7, #20]
 801156e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011572:	eeb0 0b47 	vmov.f64	d0, d7
 8011576:	f003 fbc7 	bl	8014d08 <sqrt>
 801157a:	eeb0 7b40 	vmov.f64	d7, d0
 801157e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80115b8 <pll_Init_V+0x158>
 8011582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011586:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801158a:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 80115c4 <pll_Init_V+0x164>
 8011598:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 80115c8 <pll_Init_V+0x168>
 801159c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 80115cc <pll_Init_V+0x16c>
 80115a0:	edd7 0a05 	vldr	s1, [r7, #20]
 80115a4:	ed97 0a04 	vldr	s0, [r7, #16]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7ff fc9b 	bl	8010ee4 <pid_Init>
}
 80115ae:	bf00      	nop
 80115b0:	371c      	adds	r7, #28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd90      	pop	{r4, r7, pc}
 80115b6:	bf00      	nop
 80115b8:	667f3bcd 	.word	0x667f3bcd
 80115bc:	3ff6a09e 	.word	0x3ff6a09e
 80115c0:	40c90fdb 	.word	0x40c90fdb
 80115c4:	c27b53d2 	.word	0xc27b53d2
 80115c8:	431d1463 	.word	0x431d1463
 80115cc:	00000000 	.word	0x00000000

080115d0 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 80115d0:	b590      	push	{r4, r7, lr}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80115dc:	460b      	mov	r3, r1
 80115de:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 80115e0:	201c      	movs	r0, #28
 80115e2:	f000 fdb3 	bl	801214c <malloc>
 80115e6:	4603      	mov	r3, r0
 80115e8:	461a      	mov	r2, r3
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681c      	ldr	r4, [r3, #0]
 80115f2:	2030      	movs	r0, #48	@ 0x30
 80115f4:	f000 fdaa 	bl	801214c <malloc>
 80115f8:	4603      	mov	r3, r0
 80115fa:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681c      	ldr	r4, [r3, #0]
 8011600:	2024      	movs	r0, #36	@ 0x24
 8011602:	f000 fda3 	bl	801214c <malloc>
 8011606:	4603      	mov	r3, r0
 8011608:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	681c      	ldr	r4, [r3, #0]
 801160e:	2024      	movs	r0, #36	@ 0x24
 8011610:	f000 fd9c 	bl	801214c <malloc>
 8011614:	4603      	mov	r3, r0
 8011616:	61a3      	str	r3, [r4, #24]
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f04f 0200 	mov.w	r2, #0
 8011622:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f04f 0200 	mov.w	r2, #0
 801162e:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f04f 0200 	mov.w	r2, #0
 801163a:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f04f 0200 	mov.w	r2, #0
 8011646:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f04f 0200 	mov.w	r2, #0
 8011652:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f04f 0200 	mov.w	r2, #0
 801165e:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f04f 0200 	mov.w	r2, #0
 801166a:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f04f 0200 	mov.w	r2, #0
 8011676:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f04f 0200 	mov.w	r2, #0
 8011682:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f04f 0200 	mov.w	r2, #0
 801168e:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->park_inv_alpha = 0.f;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f04f 0200 	mov.w	r2, #0
 8011698:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	f04f 0200 	mov.w	r2, #0
 80116a2:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80116ae:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011730 <pll_Init_I+0x160>
 80116b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 80116ba:	88fb      	ldrh	r3, [r7, #6]
 80116bc:	ee07 3a90 	vmov	s15, r3
 80116c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116d2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    (*signal)->CorL = 0;   // 0:感性 1:容性
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2200      	movs	r2, #0
 80116dc:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; // 1mH
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4a14      	ldr	r2, [pc, #80]	@ (8011734 <pll_Init_I+0x164>)
 80116e4:	611a      	str	r2, [r3, #16]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 1.8f, 0.03f, 0, 0.2f, -0.4f);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	695b      	ldr	r3, [r3, #20]
 80116ec:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8011738 <pll_Init_I+0x168>
 80116f0:	eddf 1a12 	vldr	s3, [pc, #72]	@ 801173c <pll_Init_I+0x16c>
 80116f4:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8011740 <pll_Init_I+0x170>
 80116f8:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8011744 <pll_Init_I+0x174>
 80116fc:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8011748 <pll_Init_I+0x178>
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff fbef 	bl	8010ee4 <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.03f, 0, 0.2f, -0.2f);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	699b      	ldr	r3, [r3, #24]
 801170c:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 801174c <pll_Init_I+0x17c>
 8011710:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 801173c <pll_Init_I+0x16c>
 8011714:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8011740 <pll_Init_I+0x170>
 8011718:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8011744 <pll_Init_I+0x174>
 801171c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8011748 <pll_Init_I+0x178>
 8011720:	4618      	mov	r0, r3
 8011722:	f7ff fbdf 	bl	8010ee4 <pid_Init>
}
 8011726:	bf00      	nop
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	bd90      	pop	{r4, r7, pc}
 801172e:	bf00      	nop
 8011730:	40c90fdb 	.word	0x40c90fdb
 8011734:	3a83126f 	.word	0x3a83126f
 8011738:	becccccd 	.word	0xbecccccd
 801173c:	3e4ccccd 	.word	0x3e4ccccd
 8011740:	00000000 	.word	0x00000000
 8011744:	3cf5c28f 	.word	0x3cf5c28f
 8011748:	3fe66666 	.word	0x3fe66666
 801174c:	be4ccccd 	.word	0xbe4ccccd

08011750 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 8011750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011754:	ed2d 8b02 	vpush	{d8}
 8011758:	b088      	sub	sp, #32
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    pll_Clarke(signal_V->basic);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4618      	mov	r0, r3
 8011764:	f000 f9d4 	bl	8011b10 <pll_Clarke>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	69de      	ldr	r6, [r3, #28]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f103 0520 	add.w	r5, r3, #32
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	edd3 7a01 	vldr	s15, [r3, #4]
 801178c:	eeb0 0a67 	vmov.f32	s0, s15
 8011790:	f000 fc4c 	bl	801202c <arm_sin_f32>
 8011794:	eeb0 8a40 	vmov.f32	s16, s0
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	edd3 7a01 	vldr	s15, [r3, #4]
 801179e:	eeb0 0a67 	vmov.f32	s0, s15
 80117a2:	f000 fc89 	bl	80120b8 <arm_cos_f32>
 80117a6:	eef0 7a40 	vmov.f32	s15, s0
 80117aa:	f8c7 801c 	str.w	r8, [r7, #28]
 80117ae:	61be      	str	r6, [r7, #24]
 80117b0:	617d      	str	r5, [r7, #20]
 80117b2:	613c      	str	r4, [r7, #16]
 80117b4:	ed87 8a03 	vstr	s16, [r7, #12]
 80117b8:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80117bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80117c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80117c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117c8:	edd7 6a06 	vldr	s13, [r7, #24]
 80117cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80117d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 80117de:	edd7 7a07 	vldr	s15, [r7, #28]
 80117e2:	eeb1 7a67 	vneg.f32	s14, s15
 80117e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80117ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80117f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80117f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	edc3 7a00 	vstr	s15, [r3]
  }
 8011804:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	689a      	ldr	r2, [r3, #8]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011812:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8011890 <pll_Control_V+0x140>
 8011816:	eeb0 0a67 	vmov.f32	s0, s15
 801181a:	4610      	mov	r0, r2
 801181c:	f7ff fb95 	bl	8010f4a <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	ed93 7a01 	vldr	s14, [r3, #4]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	edd3 6a06 	vldr	s13, [r3, #24]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011836:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011846:	ee77 7a27 	vadd.f32	s15, s14, s15
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	edd3 7a01 	vldr	s15, [r3, #4]
 8011856:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801185a:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 8011888 <pll_Control_V+0x138>
 801185e:	eeb0 0b47 	vmov.f64	d0, d7
 8011862:	f003 fa2d 	bl	8014cc0 <fmod>
 8011866:	eeb0 7b40 	vmov.f64	d7, d0
 801186a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8011874:	bf00      	nop
 8011876:	3720      	adds	r7, #32
 8011878:	46bd      	mov	sp, r7
 801187a:	ecbd 8b02 	vpop	{d8}
 801187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011882:	bf00      	nop
 8011884:	f3af 8000 	nop.w
 8011888:	60000000 	.word	0x60000000
 801188c:	401921fb 	.word	0x401921fb
 8011890:	00000000 	.word	0x00000000

08011894 <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 8011894:	b590      	push	{r4, r7, lr}
 8011896:	b099      	sub	sp, #100	@ 0x64
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	ed87 0a01 	vstr	s0, [r7, #4]
 80118a2:	edc7 0a00 	vstr	s1, [r7]
    // 先对信号进行clarke变换
    pll_Clarke(signal_I->basic);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f000 f930 	bl	8011b10 <pll_Clarke>
    // 在电压的系上得出电流的dq值
    float sinTheta = arm_sin_f32(signal_V->theta);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80118b6:	eeb0 0a67 	vmov.f32	s0, s15
 80118ba:	f000 fbb7 	bl	801202c <arm_sin_f32>
 80118be:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80118c8:	eeb0 0a67 	vmov.f32	s0, s15
 80118cc:	f000 fbf4 	bl	80120b8 <arm_cos_f32>
 80118d0:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	6998      	ldr	r0, [r3, #24]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	69d9      	ldr	r1, [r3, #28]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f103 0220 	add.w	r2, r3, #32
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3324      	adds	r3, #36	@ 0x24
 80118ee:	6438      	str	r0, [r7, #64]	@ 0x40
 80118f0:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80118f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80118f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80118f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80118fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 80118fe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011902:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011906:	ee27 7a27 	vmul.f32	s14, s14, s15
 801190a:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 801190e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011916:	ee77 7a27 	vadd.f32	s15, s14, s15
 801191a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191c:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011920:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8011924:	eeb1 7a67 	vneg.f32	s14, s15
 8011928:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801192c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011930:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011934:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801193c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011942:	edc3 7a00 	vstr	s15, [r3]
  }
 8011946:	bf00      	nop
    // PI控制
    float PFTheta = asinf(PF);
 8011948:	ed97 0a00 	vldr	s0, [r7]
 801194c:	f003 f9fc 	bl	8014d48 <asinf>
 8011950:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 8011954:	edd7 7a01 	vldr	s15, [r7, #4]
 8011958:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8011b00 <pll_Control_I+0x26c>
 801195c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011960:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8011b04 <pll_Control_I+0x270>
 8011964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011968:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	695c      	ldr	r4, [r3, #20]
 8011970:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011974:	f000 fb5a 	bl	801202c <arm_sin_f32>
 8011978:	eeb0 7a40 	vmov.f32	s14, s0
 801197c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8011980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	ed93 7a08 	vldr	s14, [r3, #32]
 801198c:	eef0 0a47 	vmov.f32	s1, s14
 8011990:	eeb0 0a67 	vmov.f32	s0, s15
 8011994:	4620      	mov	r0, r4
 8011996:	f7ff fad8 	bl	8010f4a <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 801199a:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 801199e:	f000 fb8b 	bl	80120b8 <arm_cos_f32>
 80119a2:	eeb0 7a40 	vmov.f32	s14, s0
 80119a6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80119aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	7b1b      	ldrb	r3, [r3, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d002      	beq.n	80119bc <pll_Control_I+0x128>
 80119b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80119ba:	e001      	b.n	80119c0 <pll_Control_I+0x12c>
 80119bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80119c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119c4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); // 电流相位
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	699a      	ldr	r2, [r3, #24]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80119d4:	eef0 0a67 	vmov.f32	s1, s15
 80119d8:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80119dc:	4610      	mov	r0, r2
 80119de:	f7ff fab4 	bl	8010f4a <pid>
    // 解耦调制
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	695b      	ldr	r3, [r3, #20]
 80119ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80119f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011a06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8011a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a18:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	699b      	ldr	r3, [r3, #24]
 8011a28:	edd3 7a06 	vldr	s15, [r3, #24]
 8011a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	edd3 6a08 	vldr	s13, [r3, #32]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011a40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	edd3 7a04 	vldr	s15, [r3, #16]
 8011a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a52:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // 限幅
    Uabd = fmaxf(-0.95f, fminf(0.95f, Uabd));
 8011a56:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8011b08 <pll_Control_I+0x274>
 8011a5a:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8011a5e:	f003 f9e8 	bl	8014e32 <fminf>
 8011a62:	eef0 7a40 	vmov.f32	s15, s0
 8011a66:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8011b0c <pll_Control_I+0x278>
 8011a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011a6e:	f003 f9c3 	bl	8014df8 <fmaxf>
 8011a72:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    Uabq = fmaxf(-0.95f, fminf(0.95f, Uabq));
 8011a76:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8011b08 <pll_Control_I+0x274>
 8011a7a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8011a7e:	f003 f9d8 	bl	8014e32 <fminf>
 8011a82:	eef0 7a40 	vmov.f32	s15, s0
 8011a86:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8011b0c <pll_Control_I+0x278>
 8011a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8011a8e:	f003 f9b3 	bl	8014df8 <fmaxf>
 8011a92:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	1d1a      	adds	r2, r3, #4
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3308      	adds	r3, #8
 8011a9e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011aa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8011aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011aa4:	6279      	str	r1, [r7, #36]	@ 0x24
 8011aa6:	623a      	str	r2, [r7, #32]
 8011aa8:	61fb      	str	r3, [r7, #28]
 8011aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011aac:	61bb      	str	r3, [r7, #24]
 8011aae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ab0:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011ab2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011ab6:	edd7 7a05 	vldr	s15, [r7, #20]
 8011aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011abe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011ac2:	edd7 7a06 	vldr	s15, [r7, #24]
 8011ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ace:	6a3b      	ldr	r3, [r7, #32]
 8011ad0:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8011ad4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011ad8:	edd7 7a06 	vldr	s15, [r7, #24]
 8011adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ae0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8011ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	edc3 7a00 	vstr	s15, [r3]
  }
 8011af6:	bf00      	nop
}
 8011af8:	bf00      	nop
 8011afa:	3764      	adds	r7, #100	@ 0x64
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd90      	pop	{r4, r7, pc}
 8011b00:	3fb4fdf4 	.word	0x3fb4fdf4
 8011b04:	4107be77 	.word	0x4107be77
 8011b08:	3f733333 	.word	0x3f733333
 8011b0c:	bf733333 	.word	0xbf733333

08011b10 <pll_Clarke>:
/**
 * @brief clarke变换
 * @param basic 信号基本变量指针
 */
static void pll_Clarke(pll_Signal_Basic *basic)
{
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
    basic->clarke_alpha = (2.f * basic->input_a - basic->input_b - basic->input_c) / 3.f;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	edd3 7a00 	vldr	s15, [r3]
 8011b1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8011b28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b36:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	edc3 7a06 	vstr	s15, [r3, #24]
    basic->clarke_beta = 0.57735026f * (basic->input_b - basic->input_c);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b54:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8011b70 <pll_Clarke+0x60>
 8011b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8011b62:	bf00      	nop
 8011b64:	370c      	adds	r7, #12
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop
 8011b70:	3f13cd3a 	.word	0x3f13cd3a

08011b74 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011b7e:	88fb      	ldrh	r3, [r7, #6]
 8011b80:	2b40      	cmp	r3, #64	@ 0x40
 8011b82:	d13b      	bne.n	8011bfc <HAL_GPIO_EXTI_Callback+0x88>
    {
        getVoltageCurrent();     // 获取电压电流
 8011b84:	f000 f958 	bl	8011e38 <getVoltageCurrent>
        calcEffectiveValue();    // 计算有效值
 8011b88:	f000 f84a 	bl	8011c20 <calcEffectiveValue>
        normalize();             // 标幺化
 8011b8c:	f000 f8f0 	bl	8011d70 <normalize>
        pll_Control_V(signal_V); // 锁相控制
 8011b90:	4b1c      	ldr	r3, [pc, #112]	@ (8011c04 <HAL_GPIO_EXTI_Callback+0x90>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff fddb 	bl	8011750 <pll_Control_V>

#if Rectifier_Or_Inverter
        // 电流内环控制
        if (runState == RUN)
 8011b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8011c08 <HAL_GPIO_EXTI_Callback+0x94>)
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d10e      	bne.n	8011bc2 <HAL_GPIO_EXTI_Callback+0x4e>
            pll_Control_I(signal_I, signal_V, Iref, 1.f);
 8011ba4:	4b19      	ldr	r3, [pc, #100]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x98>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4a16      	ldr	r2, [pc, #88]	@ (8011c04 <HAL_GPIO_EXTI_Callback+0x90>)
 8011baa:	6812      	ldr	r2, [r2, #0]
 8011bac:	4918      	ldr	r1, [pc, #96]	@ (8011c10 <HAL_GPIO_EXTI_Callback+0x9c>)
 8011bae:	edd1 7a00 	vldr	s15, [r1]
 8011bb2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8011bba:	4611      	mov	r1, r2
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7ff fe69 	bl	8011894 <pll_Control_I>
#endif

        svpwm_Control(signal_I); // svpwm调制
 8011bc2:	4b12      	ldr	r3, [pc, #72]	@ (8011c0c <HAL_GPIO_EXTI_Callback+0x98>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff fa32 	bl	8011030 <svpwm_Control>

        // DAC输出
        // uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f);
        uint32_t dacValue = (uint32_t)(signal_V->basic->input_a * 2000.f + 2048.f);
 8011bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8011c04 <HAL_GPIO_EXTI_Callback+0x90>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	edd3 7a00 	vldr	s15, [r3]
 8011bd6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011c14 <HAL_GPIO_EXTI_Callback+0xa0>
 8011bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011bde:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011c18 <HAL_GPIO_EXTI_Callback+0xa4>
 8011be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011bea:	ee17 3a90 	vmov	r3, s15
 8011bee:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	4809      	ldr	r0, [pc, #36]	@ (8011c1c <HAL_GPIO_EXTI_Callback+0xa8>)
 8011bf8:	f7f0 fc07 	bl	800240a <HAL_DAC_SetValue>
    }
}
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	2400951c 	.word	0x2400951c
 8011c08:	24009524 	.word	0x24009524
 8011c0c:	24009520 	.word	0x24009520
 8011c10:	24000130 	.word	0x24000130
 8011c14:	44fa0000 	.word	0x44fa0000
 8011c18:	45000000 	.word	0x45000000
 8011c1c:	24000318 	.word	0x24000318

08011c20 <calcEffectiveValue>:

/**
 * @brief  计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	af00      	add	r7, sp, #0
    static float V_rms_c[400] = {0};
    static float I_rms_a[400] = {0};
    static float I_rms_b[400] = {0};
    static float I_rms_c[400] = {0};

    V_rms_a[cnt] = signal_V->basic->input_a;
 8011c24:	4b49      	ldr	r3, [pc, #292]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a49      	ldr	r2, [pc, #292]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011c2c:	8812      	ldrh	r2, [r2, #0]
 8011c2e:	b292      	uxth	r2, r2
 8011c30:	4610      	mov	r0, r2
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	4947      	ldr	r1, [pc, #284]	@ (8011d54 <calcEffectiveValue+0x134>)
 8011c36:	0083      	lsls	r3, r0, #2
 8011c38:	440b      	add	r3, r1
 8011c3a:	601a      	str	r2, [r3, #0]
    V_rms_b[cnt] = signal_V->basic->input_b;
 8011c3c:	4b43      	ldr	r3, [pc, #268]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4a43      	ldr	r2, [pc, #268]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011c44:	8812      	ldrh	r2, [r2, #0]
 8011c46:	b292      	uxth	r2, r2
 8011c48:	4610      	mov	r0, r2
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	4942      	ldr	r1, [pc, #264]	@ (8011d58 <calcEffectiveValue+0x138>)
 8011c4e:	0083      	lsls	r3, r0, #2
 8011c50:	440b      	add	r3, r1
 8011c52:	601a      	str	r2, [r3, #0]
    V_rms_c[cnt] = signal_V->basic->input_c;
 8011c54:	4b3d      	ldr	r3, [pc, #244]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011c5c:	8812      	ldrh	r2, [r2, #0]
 8011c5e:	b292      	uxth	r2, r2
 8011c60:	4610      	mov	r0, r2
 8011c62:	689a      	ldr	r2, [r3, #8]
 8011c64:	493d      	ldr	r1, [pc, #244]	@ (8011d5c <calcEffectiveValue+0x13c>)
 8011c66:	0083      	lsls	r3, r0, #2
 8011c68:	440b      	add	r3, r1
 8011c6a:	601a      	str	r2, [r3, #0]
    I_rms_a[cnt] = signal_I->basic->input_a;
 8011c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	4a37      	ldr	r2, [pc, #220]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011c74:	8812      	ldrh	r2, [r2, #0]
 8011c76:	b292      	uxth	r2, r2
 8011c78:	4610      	mov	r0, r2
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	4939      	ldr	r1, [pc, #228]	@ (8011d64 <calcEffectiveValue+0x144>)
 8011c7e:	0083      	lsls	r3, r0, #2
 8011c80:	440b      	add	r3, r1
 8011c82:	601a      	str	r2, [r3, #0]
    I_rms_b[cnt] = signal_I->basic->input_b;
 8011c84:	4b36      	ldr	r3, [pc, #216]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a31      	ldr	r2, [pc, #196]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011c8c:	8812      	ldrh	r2, [r2, #0]
 8011c8e:	b292      	uxth	r2, r2
 8011c90:	4610      	mov	r0, r2
 8011c92:	685a      	ldr	r2, [r3, #4]
 8011c94:	4934      	ldr	r1, [pc, #208]	@ (8011d68 <calcEffectiveValue+0x148>)
 8011c96:	0083      	lsls	r3, r0, #2
 8011c98:	440b      	add	r3, r1
 8011c9a:	601a      	str	r2, [r3, #0]
    I_rms_c[cnt] = signal_I->basic->input_c;
 8011c9c:	4b30      	ldr	r3, [pc, #192]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011ca4:	8812      	ldrh	r2, [r2, #0]
 8011ca6:	b292      	uxth	r2, r2
 8011ca8:	4610      	mov	r0, r2
 8011caa:	689a      	ldr	r2, [r3, #8]
 8011cac:	492f      	ldr	r1, [pc, #188]	@ (8011d6c <calcEffectiveValue+0x14c>)
 8011cae:	0083      	lsls	r3, r0, #2
 8011cb0:	440b      	add	r3, r1
 8011cb2:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 8011cb4:	4b26      	ldr	r3, [pc, #152]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011cb6:	881b      	ldrh	r3, [r3, #0]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	3301      	adds	r3, #1
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	4a24      	ldr	r2, [pc, #144]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	8011      	strh	r1, [r2, #0]
 8011cc4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8011cc8:	d13e      	bne.n	8011d48 <calcEffectiveValue+0x128>
    {
        cnt = 0;
 8011cca:	4b21      	ldr	r3, [pc, #132]	@ (8011d50 <calcEffectiveValue+0x130>)
 8011ccc:	2200      	movs	r2, #0
 8011cce:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(V_rms_a, 400, &signal_V->basic->rms_a);
 8011cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	330c      	adds	r3, #12
 8011cd8:	461a      	mov	r2, r3
 8011cda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011cde:	481d      	ldr	r0, [pc, #116]	@ (8011d54 <calcEffectiveValue+0x134>)
 8011ce0:	f000 f93c 	bl	8011f5c <arm_rms_f32>
        arm_rms_f32(V_rms_b, 400, &signal_V->basic->rms_b);
 8011ce4:	4b19      	ldr	r3, [pc, #100]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3310      	adds	r3, #16
 8011cec:	461a      	mov	r2, r3
 8011cee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011cf2:	4819      	ldr	r0, [pc, #100]	@ (8011d58 <calcEffectiveValue+0x138>)
 8011cf4:	f000 f932 	bl	8011f5c <arm_rms_f32>
        arm_rms_f32(V_rms_c, 400, &signal_V->basic->rms_c);
 8011cf8:	4b14      	ldr	r3, [pc, #80]	@ (8011d4c <calcEffectiveValue+0x12c>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3314      	adds	r3, #20
 8011d00:	461a      	mov	r2, r3
 8011d02:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011d06:	4815      	ldr	r0, [pc, #84]	@ (8011d5c <calcEffectiveValue+0x13c>)
 8011d08:	f000 f928 	bl	8011f5c <arm_rms_f32>
        arm_rms_f32(I_rms_a, 400, &signal_I->basic->rms_a);
 8011d0c:	4b14      	ldr	r3, [pc, #80]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	330c      	adds	r3, #12
 8011d14:	461a      	mov	r2, r3
 8011d16:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011d1a:	4812      	ldr	r0, [pc, #72]	@ (8011d64 <calcEffectiveValue+0x144>)
 8011d1c:	f000 f91e 	bl	8011f5c <arm_rms_f32>
        arm_rms_f32(I_rms_b, 400, &signal_I->basic->rms_b);
 8011d20:	4b0f      	ldr	r3, [pc, #60]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	3310      	adds	r3, #16
 8011d28:	461a      	mov	r2, r3
 8011d2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011d2e:	480e      	ldr	r0, [pc, #56]	@ (8011d68 <calcEffectiveValue+0x148>)
 8011d30:	f000 f914 	bl	8011f5c <arm_rms_f32>
        arm_rms_f32(I_rms_c, 400, &signal_I->basic->rms_c);
 8011d34:	4b0a      	ldr	r3, [pc, #40]	@ (8011d60 <calcEffectiveValue+0x140>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	3314      	adds	r3, #20
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011d42:	480a      	ldr	r0, [pc, #40]	@ (8011d6c <calcEffectiveValue+0x14c>)
 8011d44:	f000 f90a 	bl	8011f5c <arm_rms_f32>
    }
}
 8011d48:	bf00      	nop
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	2400951c 	.word	0x2400951c
 8011d50:	24006f90 	.word	0x24006f90
 8011d54:	24006f94 	.word	0x24006f94
 8011d58:	240075d4 	.word	0x240075d4
 8011d5c:	24007c14 	.word	0x24007c14
 8011d60:	24009520 	.word	0x24009520
 8011d64:	24008254 	.word	0x24008254
 8011d68:	24008894 	.word	0x24008894
 8011d6c:	24008ed4 	.word	0x24008ed4

08011d70 <normalize>:

/**
 * @brief  标幺化
 */
static void normalize(void)
{
 8011d70:	b480      	push	{r7}
 8011d72:	af00      	add	r7, sp, #0
    signal_V->basic->input_a /= Ubase;
 8011d74:	4b2c      	ldr	r3, [pc, #176]	@ (8011e28 <normalize+0xb8>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	ed93 7a00 	vldr	s14, [r3]
 8011d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8011e28 <normalize+0xb8>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011e2c <normalize+0xbc>
 8011d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d8c:	edc3 7a00 	vstr	s15, [r3]
    signal_V->basic->input_b /= Ubase;
 8011d90:	4b25      	ldr	r3, [pc, #148]	@ (8011e28 <normalize+0xb8>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d9a:	4b23      	ldr	r3, [pc, #140]	@ (8011e28 <normalize+0xb8>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8011e2c <normalize+0xbc>
 8011da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011da8:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->basic->input_c /= Ubase;
 8011dac:	4b1e      	ldr	r3, [pc, #120]	@ (8011e28 <normalize+0xb8>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	ed93 7a02 	vldr	s14, [r3, #8]
 8011db6:	4b1c      	ldr	r3, [pc, #112]	@ (8011e28 <normalize+0xb8>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8011e2c <normalize+0xbc>
 8011dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011dc4:	edc3 7a02 	vstr	s15, [r3, #8]
    signal_I->basic->input_a /= Ibase;
 8011dc8:	4b19      	ldr	r3, [pc, #100]	@ (8011e30 <normalize+0xc0>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	ed93 7a00 	vldr	s14, [r3]
 8011dd2:	4b17      	ldr	r3, [pc, #92]	@ (8011e30 <normalize+0xc0>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8011e34 <normalize+0xc4>
 8011ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011de0:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input_b /= Ibase;
 8011de4:	4b12      	ldr	r3, [pc, #72]	@ (8011e30 <normalize+0xc0>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	ed93 7a01 	vldr	s14, [r3, #4]
 8011dee:	4b10      	ldr	r3, [pc, #64]	@ (8011e30 <normalize+0xc0>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8011e34 <normalize+0xc4>
 8011df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011dfc:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->basic->input_c /= Ibase;
 8011e00:	4b0b      	ldr	r3, [pc, #44]	@ (8011e30 <normalize+0xc0>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	ed93 7a02 	vldr	s14, [r3, #8]
 8011e0a:	4b09      	ldr	r3, [pc, #36]	@ (8011e30 <normalize+0xc0>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8011e34 <normalize+0xc4>
 8011e14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e18:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011e1c:	bf00      	nop
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop
 8011e28:	2400951c 	.word	0x2400951c
 8011e2c:	41a9ae15 	.word	0x41a9ae15
 8011e30:	24009520 	.word	0x24009520
 8011e34:	4107be77 	.word	0x4107be77

08011e38 <getVoltageCurrent>:

/**
 * @brief  获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b092      	sub	sp, #72	@ 0x48
 8011e3c:	af00      	add	r7, sp, #0
    // 读取AD7606数据
    float adcValue[8] = {0};
 8011e3e:	1d3b      	adds	r3, r7, #4
 8011e40:	2220      	movs	r2, #32
 8011e42:	2100      	movs	r1, #0
 8011e44:	4618      	mov	r0, r3
 8011e46:	f000 ff94 	bl	8012d72 <memset>
    ad7606_GetValue(&hspi2, 7, adcValue);
 8011e4a:	1d3b      	adds	r3, r7, #4
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	2107      	movs	r1, #7
 8011e50:	4839      	ldr	r0, [pc, #228]	@ (8011f38 <getVoltageCurrent+0x100>)
 8011e52:	f7fe fc21 	bl	8010698 <ad7606_GetValue>

    // 处理电压数据，将线电压转为相电压
    float Uab = adcValue[2];
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	647b      	str	r3, [r7, #68]	@ 0x44
    float Ubc = adcValue[4];
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	643b      	str	r3, [r7, #64]	@ 0x40
    float Uca = adcValue[6];
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float samp_Va = 38.334749f * (Uab - Uca) / 3.f;
 8011e62:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8011e66:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8011e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e6e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011f3c <getVoltageCurrent+0x104>
 8011e72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e76:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e7e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float samp_Vb = 38.527397f * (Ubc - Uab) / 3.f;
 8011e82:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011e86:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8011e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e8e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8011f40 <getVoltageCurrent+0x108>
 8011e92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e96:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e9e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float samp_Vc = 38.525180f * (Uca - Ubc) / 3.f;
 8011ea2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011ea6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8011eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011eae:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8011f44 <getVoltageCurrent+0x10c>
 8011eb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011eb6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ebe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // 处理电流数据
    float samp_Ia = adcValue[1] * 2.178571f;
 8011ec2:	edd7 7a02 	vldr	s15, [r7, #8]
 8011ec6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011f48 <getVoltageCurrent+0x110>
 8011eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ece:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float samp_Ib = adcValue[3] * 2.250774f;
 8011ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8011ed6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8011f4c <getVoltageCurrent+0x114>
 8011eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ede:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float samp_Ic = adcValue[5] * 2.172956f;
 8011ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8011ee6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8011f50 <getVoltageCurrent+0x118>
 8011eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011eee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    signal_V->basic->input_a = samp_Va;
 8011ef2:	4b18      	ldr	r3, [pc, #96]	@ (8011f54 <getVoltageCurrent+0x11c>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011efa:	601a      	str	r2, [r3, #0]
    signal_V->basic->input_b = samp_Vb;
 8011efc:	4b15      	ldr	r3, [pc, #84]	@ (8011f54 <getVoltageCurrent+0x11c>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f04:	605a      	str	r2, [r3, #4]
    signal_V->basic->input_c = samp_Vc;
 8011f06:	4b13      	ldr	r3, [pc, #76]	@ (8011f54 <getVoltageCurrent+0x11c>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f0e:	609a      	str	r2, [r3, #8]
    signal_I->basic->input_a = samp_Ia;
 8011f10:	4b11      	ldr	r3, [pc, #68]	@ (8011f58 <getVoltageCurrent+0x120>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f18:	601a      	str	r2, [r3, #0]
    signal_I->basic->input_b = samp_Ib;
 8011f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8011f58 <getVoltageCurrent+0x120>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f22:	605a      	str	r2, [r3, #4]
    signal_I->basic->input_c = samp_Ic;
 8011f24:	4b0c      	ldr	r3, [pc, #48]	@ (8011f58 <getVoltageCurrent+0x120>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f2c:	609a      	str	r2, [r3, #8]
}
 8011f2e:	bf00      	nop
 8011f30:	3748      	adds	r7, #72	@ 0x48
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	24000468 	.word	0x24000468
 8011f3c:	421956c8 	.word	0x421956c8
 8011f40:	421a1c0e 	.word	0x421a1c0e
 8011f44:	421a19c9 	.word	0x421a19c9
 8011f48:	400b6db5 	.word	0x400b6db5
 8011f4c:	40100cae 	.word	0x40100cae
 8011f50:	400b11b6 	.word	0x400b11b6
 8011f54:	2400951c 	.word	0x2400951c
 8011f58:	24009520 	.word	0x24009520

08011f5c <arm_rms_f32>:
 8011f5c:	b530      	push	{r4, r5, lr}
 8011f5e:	088d      	lsrs	r5, r1, #2
 8011f60:	ed2d 8b02 	vpush	{d8}
 8011f64:	b083      	sub	sp, #12
 8011f66:	d054      	beq.n	8012012 <arm_rms_f32+0xb6>
 8011f68:	f100 0310 	add.w	r3, r0, #16
 8011f6c:	462c      	mov	r4, r5
 8011f6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8012028 <arm_rms_f32+0xcc>
 8011f72:	ed53 6a04 	vldr	s13, [r3, #-16]
 8011f76:	3c01      	subs	r4, #1
 8011f78:	ed13 7a03 	vldr	s14, [r3, #-12]
 8011f7c:	f103 0310 	add.w	r3, r3, #16
 8011f80:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011f84:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8011f88:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011f8c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8011f90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f94:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011f98:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011f9c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011fa4:	ee76 5a27 	vadd.f32	s11, s12, s15
 8011fa8:	d1e3      	bne.n	8011f72 <arm_rms_f32+0x16>
 8011faa:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8011fae:	f011 0303 	ands.w	r3, r1, #3
 8011fb2:	d015      	beq.n	8011fe0 <arm_rms_f32+0x84>
 8011fb4:	edd0 7a00 	vldr	s15, [r0]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fbe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011fc2:	d00d      	beq.n	8011fe0 <arm_rms_f32+0x84>
 8011fc4:	edd0 7a01 	vldr	s15, [r0, #4]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fce:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011fd2:	d005      	beq.n	8011fe0 <arm_rms_f32+0x84>
 8011fd4:	edd0 7a02 	vldr	s15, [r0, #8]
 8011fd8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fdc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8011fe0:	ee07 1a90 	vmov	s15, r1
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fea:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 8011fee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff6:	db0f      	blt.n	8012018 <arm_rms_f32+0xbc>
 8011ff8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011ffc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8012000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012004:	d40a      	bmi.n	801201c <arm_rms_f32+0xc0>
 8012006:	ed82 8a00 	vstr	s16, [r2]
 801200a:	b003      	add	sp, #12
 801200c:	ecbd 8b02 	vpop	{d8}
 8012010:	bd30      	pop	{r4, r5, pc}
 8012012:	eddf 5a05 	vldr	s11, [pc, #20]	@ 8012028 <arm_rms_f32+0xcc>
 8012016:	e7ca      	b.n	8011fae <arm_rms_f32+0x52>
 8012018:	6013      	str	r3, [r2, #0]
 801201a:	e7f6      	b.n	801200a <arm_rms_f32+0xae>
 801201c:	9201      	str	r2, [sp, #4]
 801201e:	f002 febf 	bl	8014da0 <sqrtf>
 8012022:	9a01      	ldr	r2, [sp, #4]
 8012024:	e7ef      	b.n	8012006 <arm_rms_f32+0xaa>
 8012026:	bf00      	nop
 8012028:	00000000 	.word	0x00000000

0801202c <arm_sin_f32>:
 801202c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80120ac <arm_sin_f32+0x80>
 8012030:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012034:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012038:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801203c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012040:	d504      	bpl.n	801204c <arm_sin_f32+0x20>
 8012042:	ee17 3a90 	vmov	r3, s15
 8012046:	3b01      	subs	r3, #1
 8012048:	ee07 3a90 	vmov	s15, r3
 801204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012050:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80120b0 <arm_sin_f32+0x84>
 8012054:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801205c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8012060:	ee17 3a10 	vmov	r3, s14
 8012064:	b29b      	uxth	r3, r3
 8012066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801206a:	d21a      	bcs.n	80120a2 <arm_sin_f32+0x76>
 801206c:	ee07 3a10 	vmov	s14, r3
 8012070:	1c59      	adds	r1, r3, #1
 8012072:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012076:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801207a:	4a0e      	ldr	r2, [pc, #56]	@ (80120b4 <arm_sin_f32+0x88>)
 801207c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012084:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012088:	ee30 0a67 	vsub.f32	s0, s0, s15
 801208c:	edd3 6a00 	vldr	s13, [r3]
 8012090:	ed92 7a00 	vldr	s14, [r2]
 8012094:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012098:	ee67 7a87 	vmul.f32	s15, s15, s14
 801209c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80120a0:	4770      	bx	lr
 80120a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80120a6:	2101      	movs	r1, #1
 80120a8:	2300      	movs	r3, #0
 80120aa:	e7e6      	b.n	801207a <arm_sin_f32+0x4e>
 80120ac:	3e22f983 	.word	0x3e22f983
 80120b0:	44000000 	.word	0x44000000
 80120b4:	08016cdc 	.word	0x08016cdc

080120b8 <arm_cos_f32>:
 80120b8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012140 <arm_cos_f32+0x88>
 80120bc:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80120c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80120c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80120c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80120cc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80120d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d4:	d504      	bpl.n	80120e0 <arm_cos_f32+0x28>
 80120d6:	ee17 3a90 	vmov	r3, s15
 80120da:	3b01      	subs	r3, #1
 80120dc:	ee07 3a90 	vmov	s15, r3
 80120e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120e4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012144 <arm_cos_f32+0x8c>
 80120e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80120ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120f0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80120f4:	ee17 3a10 	vmov	r3, s14
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120fe:	d21a      	bcs.n	8012136 <arm_cos_f32+0x7e>
 8012100:	ee07 3a10 	vmov	s14, r3
 8012104:	1c59      	adds	r1, r3, #1
 8012106:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801210a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801210e:	4a0e      	ldr	r2, [pc, #56]	@ (8012148 <arm_cos_f32+0x90>)
 8012110:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012118:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801211c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012120:	edd3 6a00 	vldr	s13, [r3]
 8012124:	ed92 7a00 	vldr	s14, [r2]
 8012128:	ee20 0a26 	vmul.f32	s0, s0, s13
 801212c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012130:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012134:	4770      	bx	lr
 8012136:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801213a:	2101      	movs	r1, #1
 801213c:	2300      	movs	r3, #0
 801213e:	e7e6      	b.n	801210e <arm_cos_f32+0x56>
 8012140:	3e22f983 	.word	0x3e22f983
 8012144:	44000000 	.word	0x44000000
 8012148:	08016cdc 	.word	0x08016cdc

0801214c <malloc>:
 801214c:	4b02      	ldr	r3, [pc, #8]	@ (8012158 <malloc+0xc>)
 801214e:	4601      	mov	r1, r0
 8012150:	6818      	ldr	r0, [r3, #0]
 8012152:	f000 b825 	b.w	80121a0 <_malloc_r>
 8012156:	bf00      	nop
 8012158:	24000140 	.word	0x24000140

0801215c <sbrk_aligned>:
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	4e0f      	ldr	r6, [pc, #60]	@ (801219c <sbrk_aligned+0x40>)
 8012160:	460c      	mov	r4, r1
 8012162:	6831      	ldr	r1, [r6, #0]
 8012164:	4605      	mov	r5, r0
 8012166:	b911      	cbnz	r1, 801216e <sbrk_aligned+0x12>
 8012168:	f000 fe44 	bl	8012df4 <_sbrk_r>
 801216c:	6030      	str	r0, [r6, #0]
 801216e:	4621      	mov	r1, r4
 8012170:	4628      	mov	r0, r5
 8012172:	f000 fe3f 	bl	8012df4 <_sbrk_r>
 8012176:	1c43      	adds	r3, r0, #1
 8012178:	d103      	bne.n	8012182 <sbrk_aligned+0x26>
 801217a:	f04f 34ff 	mov.w	r4, #4294967295
 801217e:	4620      	mov	r0, r4
 8012180:	bd70      	pop	{r4, r5, r6, pc}
 8012182:	1cc4      	adds	r4, r0, #3
 8012184:	f024 0403 	bic.w	r4, r4, #3
 8012188:	42a0      	cmp	r0, r4
 801218a:	d0f8      	beq.n	801217e <sbrk_aligned+0x22>
 801218c:	1a21      	subs	r1, r4, r0
 801218e:	4628      	mov	r0, r5
 8012190:	f000 fe30 	bl	8012df4 <_sbrk_r>
 8012194:	3001      	adds	r0, #1
 8012196:	d1f2      	bne.n	801217e <sbrk_aligned+0x22>
 8012198:	e7ef      	b.n	801217a <sbrk_aligned+0x1e>
 801219a:	bf00      	nop
 801219c:	24009528 	.word	0x24009528

080121a0 <_malloc_r>:
 80121a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a4:	1ccd      	adds	r5, r1, #3
 80121a6:	f025 0503 	bic.w	r5, r5, #3
 80121aa:	3508      	adds	r5, #8
 80121ac:	2d0c      	cmp	r5, #12
 80121ae:	bf38      	it	cc
 80121b0:	250c      	movcc	r5, #12
 80121b2:	2d00      	cmp	r5, #0
 80121b4:	4606      	mov	r6, r0
 80121b6:	db01      	blt.n	80121bc <_malloc_r+0x1c>
 80121b8:	42a9      	cmp	r1, r5
 80121ba:	d904      	bls.n	80121c6 <_malloc_r+0x26>
 80121bc:	230c      	movs	r3, #12
 80121be:	6033      	str	r3, [r6, #0]
 80121c0:	2000      	movs	r0, #0
 80121c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801229c <_malloc_r+0xfc>
 80121ca:	f000 f869 	bl	80122a0 <__malloc_lock>
 80121ce:	f8d8 3000 	ldr.w	r3, [r8]
 80121d2:	461c      	mov	r4, r3
 80121d4:	bb44      	cbnz	r4, 8012228 <_malloc_r+0x88>
 80121d6:	4629      	mov	r1, r5
 80121d8:	4630      	mov	r0, r6
 80121da:	f7ff ffbf 	bl	801215c <sbrk_aligned>
 80121de:	1c43      	adds	r3, r0, #1
 80121e0:	4604      	mov	r4, r0
 80121e2:	d158      	bne.n	8012296 <_malloc_r+0xf6>
 80121e4:	f8d8 4000 	ldr.w	r4, [r8]
 80121e8:	4627      	mov	r7, r4
 80121ea:	2f00      	cmp	r7, #0
 80121ec:	d143      	bne.n	8012276 <_malloc_r+0xd6>
 80121ee:	2c00      	cmp	r4, #0
 80121f0:	d04b      	beq.n	801228a <_malloc_r+0xea>
 80121f2:	6823      	ldr	r3, [r4, #0]
 80121f4:	4639      	mov	r1, r7
 80121f6:	4630      	mov	r0, r6
 80121f8:	eb04 0903 	add.w	r9, r4, r3
 80121fc:	f000 fdfa 	bl	8012df4 <_sbrk_r>
 8012200:	4581      	cmp	r9, r0
 8012202:	d142      	bne.n	801228a <_malloc_r+0xea>
 8012204:	6821      	ldr	r1, [r4, #0]
 8012206:	1a6d      	subs	r5, r5, r1
 8012208:	4629      	mov	r1, r5
 801220a:	4630      	mov	r0, r6
 801220c:	f7ff ffa6 	bl	801215c <sbrk_aligned>
 8012210:	3001      	adds	r0, #1
 8012212:	d03a      	beq.n	801228a <_malloc_r+0xea>
 8012214:	6823      	ldr	r3, [r4, #0]
 8012216:	442b      	add	r3, r5
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	f8d8 3000 	ldr.w	r3, [r8]
 801221e:	685a      	ldr	r2, [r3, #4]
 8012220:	bb62      	cbnz	r2, 801227c <_malloc_r+0xdc>
 8012222:	f8c8 7000 	str.w	r7, [r8]
 8012226:	e00f      	b.n	8012248 <_malloc_r+0xa8>
 8012228:	6822      	ldr	r2, [r4, #0]
 801222a:	1b52      	subs	r2, r2, r5
 801222c:	d420      	bmi.n	8012270 <_malloc_r+0xd0>
 801222e:	2a0b      	cmp	r2, #11
 8012230:	d917      	bls.n	8012262 <_malloc_r+0xc2>
 8012232:	1961      	adds	r1, r4, r5
 8012234:	42a3      	cmp	r3, r4
 8012236:	6025      	str	r5, [r4, #0]
 8012238:	bf18      	it	ne
 801223a:	6059      	strne	r1, [r3, #4]
 801223c:	6863      	ldr	r3, [r4, #4]
 801223e:	bf08      	it	eq
 8012240:	f8c8 1000 	streq.w	r1, [r8]
 8012244:	5162      	str	r2, [r4, r5]
 8012246:	604b      	str	r3, [r1, #4]
 8012248:	4630      	mov	r0, r6
 801224a:	f000 f82f 	bl	80122ac <__malloc_unlock>
 801224e:	f104 000b 	add.w	r0, r4, #11
 8012252:	1d23      	adds	r3, r4, #4
 8012254:	f020 0007 	bic.w	r0, r0, #7
 8012258:	1ac2      	subs	r2, r0, r3
 801225a:	bf1c      	itt	ne
 801225c:	1a1b      	subne	r3, r3, r0
 801225e:	50a3      	strne	r3, [r4, r2]
 8012260:	e7af      	b.n	80121c2 <_malloc_r+0x22>
 8012262:	6862      	ldr	r2, [r4, #4]
 8012264:	42a3      	cmp	r3, r4
 8012266:	bf0c      	ite	eq
 8012268:	f8c8 2000 	streq.w	r2, [r8]
 801226c:	605a      	strne	r2, [r3, #4]
 801226e:	e7eb      	b.n	8012248 <_malloc_r+0xa8>
 8012270:	4623      	mov	r3, r4
 8012272:	6864      	ldr	r4, [r4, #4]
 8012274:	e7ae      	b.n	80121d4 <_malloc_r+0x34>
 8012276:	463c      	mov	r4, r7
 8012278:	687f      	ldr	r7, [r7, #4]
 801227a:	e7b6      	b.n	80121ea <_malloc_r+0x4a>
 801227c:	461a      	mov	r2, r3
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	42a3      	cmp	r3, r4
 8012282:	d1fb      	bne.n	801227c <_malloc_r+0xdc>
 8012284:	2300      	movs	r3, #0
 8012286:	6053      	str	r3, [r2, #4]
 8012288:	e7de      	b.n	8012248 <_malloc_r+0xa8>
 801228a:	230c      	movs	r3, #12
 801228c:	6033      	str	r3, [r6, #0]
 801228e:	4630      	mov	r0, r6
 8012290:	f000 f80c 	bl	80122ac <__malloc_unlock>
 8012294:	e794      	b.n	80121c0 <_malloc_r+0x20>
 8012296:	6005      	str	r5, [r0, #0]
 8012298:	e7d6      	b.n	8012248 <_malloc_r+0xa8>
 801229a:	bf00      	nop
 801229c:	2400952c 	.word	0x2400952c

080122a0 <__malloc_lock>:
 80122a0:	4801      	ldr	r0, [pc, #4]	@ (80122a8 <__malloc_lock+0x8>)
 80122a2:	f000 bdf4 	b.w	8012e8e <__retarget_lock_acquire_recursive>
 80122a6:	bf00      	nop
 80122a8:	24009670 	.word	0x24009670

080122ac <__malloc_unlock>:
 80122ac:	4801      	ldr	r0, [pc, #4]	@ (80122b4 <__malloc_unlock+0x8>)
 80122ae:	f000 bdef 	b.w	8012e90 <__retarget_lock_release_recursive>
 80122b2:	bf00      	nop
 80122b4:	24009670 	.word	0x24009670

080122b8 <__cvt>:
 80122b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ba:	ed2d 8b02 	vpush	{d8}
 80122be:	eeb0 8b40 	vmov.f64	d8, d0
 80122c2:	b085      	sub	sp, #20
 80122c4:	4617      	mov	r7, r2
 80122c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80122c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80122ca:	ee18 2a90 	vmov	r2, s17
 80122ce:	f025 0520 	bic.w	r5, r5, #32
 80122d2:	2a00      	cmp	r2, #0
 80122d4:	bfb6      	itet	lt
 80122d6:	222d      	movlt	r2, #45	@ 0x2d
 80122d8:	2200      	movge	r2, #0
 80122da:	eeb1 8b40 	vneglt.f64	d8, d0
 80122de:	2d46      	cmp	r5, #70	@ 0x46
 80122e0:	460c      	mov	r4, r1
 80122e2:	701a      	strb	r2, [r3, #0]
 80122e4:	d004      	beq.n	80122f0 <__cvt+0x38>
 80122e6:	2d45      	cmp	r5, #69	@ 0x45
 80122e8:	d100      	bne.n	80122ec <__cvt+0x34>
 80122ea:	3401      	adds	r4, #1
 80122ec:	2102      	movs	r1, #2
 80122ee:	e000      	b.n	80122f2 <__cvt+0x3a>
 80122f0:	2103      	movs	r1, #3
 80122f2:	ab03      	add	r3, sp, #12
 80122f4:	9301      	str	r3, [sp, #4]
 80122f6:	ab02      	add	r3, sp, #8
 80122f8:	9300      	str	r3, [sp, #0]
 80122fa:	4622      	mov	r2, r4
 80122fc:	4633      	mov	r3, r6
 80122fe:	eeb0 0b48 	vmov.f64	d0, d8
 8012302:	f000 fe5d 	bl	8012fc0 <_dtoa_r>
 8012306:	2d47      	cmp	r5, #71	@ 0x47
 8012308:	d114      	bne.n	8012334 <__cvt+0x7c>
 801230a:	07fb      	lsls	r3, r7, #31
 801230c:	d50a      	bpl.n	8012324 <__cvt+0x6c>
 801230e:	1902      	adds	r2, r0, r4
 8012310:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012318:	bf08      	it	eq
 801231a:	9203      	streq	r2, [sp, #12]
 801231c:	2130      	movs	r1, #48	@ 0x30
 801231e:	9b03      	ldr	r3, [sp, #12]
 8012320:	4293      	cmp	r3, r2
 8012322:	d319      	bcc.n	8012358 <__cvt+0xa0>
 8012324:	9b03      	ldr	r3, [sp, #12]
 8012326:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012328:	1a1b      	subs	r3, r3, r0
 801232a:	6013      	str	r3, [r2, #0]
 801232c:	b005      	add	sp, #20
 801232e:	ecbd 8b02 	vpop	{d8}
 8012332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012334:	2d46      	cmp	r5, #70	@ 0x46
 8012336:	eb00 0204 	add.w	r2, r0, r4
 801233a:	d1e9      	bne.n	8012310 <__cvt+0x58>
 801233c:	7803      	ldrb	r3, [r0, #0]
 801233e:	2b30      	cmp	r3, #48	@ 0x30
 8012340:	d107      	bne.n	8012352 <__cvt+0x9a>
 8012342:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234a:	bf1c      	itt	ne
 801234c:	f1c4 0401 	rsbne	r4, r4, #1
 8012350:	6034      	strne	r4, [r6, #0]
 8012352:	6833      	ldr	r3, [r6, #0]
 8012354:	441a      	add	r2, r3
 8012356:	e7db      	b.n	8012310 <__cvt+0x58>
 8012358:	1c5c      	adds	r4, r3, #1
 801235a:	9403      	str	r4, [sp, #12]
 801235c:	7019      	strb	r1, [r3, #0]
 801235e:	e7de      	b.n	801231e <__cvt+0x66>

08012360 <__exponent>:
 8012360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012362:	2900      	cmp	r1, #0
 8012364:	bfba      	itte	lt
 8012366:	4249      	neglt	r1, r1
 8012368:	232d      	movlt	r3, #45	@ 0x2d
 801236a:	232b      	movge	r3, #43	@ 0x2b
 801236c:	2909      	cmp	r1, #9
 801236e:	7002      	strb	r2, [r0, #0]
 8012370:	7043      	strb	r3, [r0, #1]
 8012372:	dd29      	ble.n	80123c8 <__exponent+0x68>
 8012374:	f10d 0307 	add.w	r3, sp, #7
 8012378:	461d      	mov	r5, r3
 801237a:	270a      	movs	r7, #10
 801237c:	461a      	mov	r2, r3
 801237e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012382:	fb07 1416 	mls	r4, r7, r6, r1
 8012386:	3430      	adds	r4, #48	@ 0x30
 8012388:	f802 4c01 	strb.w	r4, [r2, #-1]
 801238c:	460c      	mov	r4, r1
 801238e:	2c63      	cmp	r4, #99	@ 0x63
 8012390:	f103 33ff 	add.w	r3, r3, #4294967295
 8012394:	4631      	mov	r1, r6
 8012396:	dcf1      	bgt.n	801237c <__exponent+0x1c>
 8012398:	3130      	adds	r1, #48	@ 0x30
 801239a:	1e94      	subs	r4, r2, #2
 801239c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80123a0:	1c41      	adds	r1, r0, #1
 80123a2:	4623      	mov	r3, r4
 80123a4:	42ab      	cmp	r3, r5
 80123a6:	d30a      	bcc.n	80123be <__exponent+0x5e>
 80123a8:	f10d 0309 	add.w	r3, sp, #9
 80123ac:	1a9b      	subs	r3, r3, r2
 80123ae:	42ac      	cmp	r4, r5
 80123b0:	bf88      	it	hi
 80123b2:	2300      	movhi	r3, #0
 80123b4:	3302      	adds	r3, #2
 80123b6:	4403      	add	r3, r0
 80123b8:	1a18      	subs	r0, r3, r0
 80123ba:	b003      	add	sp, #12
 80123bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80123c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80123c6:	e7ed      	b.n	80123a4 <__exponent+0x44>
 80123c8:	2330      	movs	r3, #48	@ 0x30
 80123ca:	3130      	adds	r1, #48	@ 0x30
 80123cc:	7083      	strb	r3, [r0, #2]
 80123ce:	70c1      	strb	r1, [r0, #3]
 80123d0:	1d03      	adds	r3, r0, #4
 80123d2:	e7f1      	b.n	80123b8 <__exponent+0x58>
 80123d4:	0000      	movs	r0, r0
	...

080123d8 <_printf_float>:
 80123d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123dc:	b08d      	sub	sp, #52	@ 0x34
 80123de:	460c      	mov	r4, r1
 80123e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80123e4:	4616      	mov	r6, r2
 80123e6:	461f      	mov	r7, r3
 80123e8:	4605      	mov	r5, r0
 80123ea:	f000 fccb 	bl	8012d84 <_localeconv_r>
 80123ee:	f8d0 b000 	ldr.w	fp, [r0]
 80123f2:	4658      	mov	r0, fp
 80123f4:	f7ed ffc4 	bl	8000380 <strlen>
 80123f8:	2300      	movs	r3, #0
 80123fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80123fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012400:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012404:	6822      	ldr	r2, [r4, #0]
 8012406:	9005      	str	r0, [sp, #20]
 8012408:	3307      	adds	r3, #7
 801240a:	f023 0307 	bic.w	r3, r3, #7
 801240e:	f103 0108 	add.w	r1, r3, #8
 8012412:	f8c8 1000 	str.w	r1, [r8]
 8012416:	ed93 0b00 	vldr	d0, [r3]
 801241a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012678 <_printf_float+0x2a0>
 801241e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012422:	eeb4 7b46 	vcmp.f64	d7, d6
 8012426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801242e:	dd24      	ble.n	801247a <_printf_float+0xa2>
 8012430:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012438:	d502      	bpl.n	8012440 <_printf_float+0x68>
 801243a:	232d      	movs	r3, #45	@ 0x2d
 801243c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012440:	498f      	ldr	r1, [pc, #572]	@ (8012680 <_printf_float+0x2a8>)
 8012442:	4b90      	ldr	r3, [pc, #576]	@ (8012684 <_printf_float+0x2ac>)
 8012444:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012448:	bf94      	ite	ls
 801244a:	4688      	movls	r8, r1
 801244c:	4698      	movhi	r8, r3
 801244e:	f022 0204 	bic.w	r2, r2, #4
 8012452:	2303      	movs	r3, #3
 8012454:	6123      	str	r3, [r4, #16]
 8012456:	6022      	str	r2, [r4, #0]
 8012458:	f04f 0a00 	mov.w	sl, #0
 801245c:	9700      	str	r7, [sp, #0]
 801245e:	4633      	mov	r3, r6
 8012460:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012462:	4621      	mov	r1, r4
 8012464:	4628      	mov	r0, r5
 8012466:	f000 f9d1 	bl	801280c <_printf_common>
 801246a:	3001      	adds	r0, #1
 801246c:	f040 8089 	bne.w	8012582 <_printf_float+0x1aa>
 8012470:	f04f 30ff 	mov.w	r0, #4294967295
 8012474:	b00d      	add	sp, #52	@ 0x34
 8012476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247a:	eeb4 0b40 	vcmp.f64	d0, d0
 801247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012482:	d709      	bvc.n	8012498 <_printf_float+0xc0>
 8012484:	ee10 3a90 	vmov	r3, s1
 8012488:	2b00      	cmp	r3, #0
 801248a:	bfbc      	itt	lt
 801248c:	232d      	movlt	r3, #45	@ 0x2d
 801248e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012492:	497d      	ldr	r1, [pc, #500]	@ (8012688 <_printf_float+0x2b0>)
 8012494:	4b7d      	ldr	r3, [pc, #500]	@ (801268c <_printf_float+0x2b4>)
 8012496:	e7d5      	b.n	8012444 <_printf_float+0x6c>
 8012498:	6863      	ldr	r3, [r4, #4]
 801249a:	1c59      	adds	r1, r3, #1
 801249c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80124a0:	d139      	bne.n	8012516 <_printf_float+0x13e>
 80124a2:	2306      	movs	r3, #6
 80124a4:	6063      	str	r3, [r4, #4]
 80124a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80124aa:	2300      	movs	r3, #0
 80124ac:	6022      	str	r2, [r4, #0]
 80124ae:	9303      	str	r3, [sp, #12]
 80124b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80124b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80124b6:	ab09      	add	r3, sp, #36	@ 0x24
 80124b8:	9300      	str	r3, [sp, #0]
 80124ba:	6861      	ldr	r1, [r4, #4]
 80124bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80124c0:	4628      	mov	r0, r5
 80124c2:	f7ff fef9 	bl	80122b8 <__cvt>
 80124c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80124ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80124cc:	4680      	mov	r8, r0
 80124ce:	d129      	bne.n	8012524 <_printf_float+0x14c>
 80124d0:	1cc8      	adds	r0, r1, #3
 80124d2:	db02      	blt.n	80124da <_printf_float+0x102>
 80124d4:	6863      	ldr	r3, [r4, #4]
 80124d6:	4299      	cmp	r1, r3
 80124d8:	dd41      	ble.n	801255e <_printf_float+0x186>
 80124da:	f1a9 0902 	sub.w	r9, r9, #2
 80124de:	fa5f f989 	uxtb.w	r9, r9
 80124e2:	3901      	subs	r1, #1
 80124e4:	464a      	mov	r2, r9
 80124e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80124ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80124ec:	f7ff ff38 	bl	8012360 <__exponent>
 80124f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124f2:	1813      	adds	r3, r2, r0
 80124f4:	2a01      	cmp	r2, #1
 80124f6:	4682      	mov	sl, r0
 80124f8:	6123      	str	r3, [r4, #16]
 80124fa:	dc02      	bgt.n	8012502 <_printf_float+0x12a>
 80124fc:	6822      	ldr	r2, [r4, #0]
 80124fe:	07d2      	lsls	r2, r2, #31
 8012500:	d501      	bpl.n	8012506 <_printf_float+0x12e>
 8012502:	3301      	adds	r3, #1
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801250a:	2b00      	cmp	r3, #0
 801250c:	d0a6      	beq.n	801245c <_printf_float+0x84>
 801250e:	232d      	movs	r3, #45	@ 0x2d
 8012510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012514:	e7a2      	b.n	801245c <_printf_float+0x84>
 8012516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801251a:	d1c4      	bne.n	80124a6 <_printf_float+0xce>
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1c2      	bne.n	80124a6 <_printf_float+0xce>
 8012520:	2301      	movs	r3, #1
 8012522:	e7bf      	b.n	80124a4 <_printf_float+0xcc>
 8012524:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012528:	d9db      	bls.n	80124e2 <_printf_float+0x10a>
 801252a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801252e:	d118      	bne.n	8012562 <_printf_float+0x18a>
 8012530:	2900      	cmp	r1, #0
 8012532:	6863      	ldr	r3, [r4, #4]
 8012534:	dd0b      	ble.n	801254e <_printf_float+0x176>
 8012536:	6121      	str	r1, [r4, #16]
 8012538:	b913      	cbnz	r3, 8012540 <_printf_float+0x168>
 801253a:	6822      	ldr	r2, [r4, #0]
 801253c:	07d0      	lsls	r0, r2, #31
 801253e:	d502      	bpl.n	8012546 <_printf_float+0x16e>
 8012540:	3301      	adds	r3, #1
 8012542:	440b      	add	r3, r1
 8012544:	6123      	str	r3, [r4, #16]
 8012546:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012548:	f04f 0a00 	mov.w	sl, #0
 801254c:	e7db      	b.n	8012506 <_printf_float+0x12e>
 801254e:	b913      	cbnz	r3, 8012556 <_printf_float+0x17e>
 8012550:	6822      	ldr	r2, [r4, #0]
 8012552:	07d2      	lsls	r2, r2, #31
 8012554:	d501      	bpl.n	801255a <_printf_float+0x182>
 8012556:	3302      	adds	r3, #2
 8012558:	e7f4      	b.n	8012544 <_printf_float+0x16c>
 801255a:	2301      	movs	r3, #1
 801255c:	e7f2      	b.n	8012544 <_printf_float+0x16c>
 801255e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012564:	4299      	cmp	r1, r3
 8012566:	db05      	blt.n	8012574 <_printf_float+0x19c>
 8012568:	6823      	ldr	r3, [r4, #0]
 801256a:	6121      	str	r1, [r4, #16]
 801256c:	07d8      	lsls	r0, r3, #31
 801256e:	d5ea      	bpl.n	8012546 <_printf_float+0x16e>
 8012570:	1c4b      	adds	r3, r1, #1
 8012572:	e7e7      	b.n	8012544 <_printf_float+0x16c>
 8012574:	2900      	cmp	r1, #0
 8012576:	bfd4      	ite	le
 8012578:	f1c1 0202 	rsble	r2, r1, #2
 801257c:	2201      	movgt	r2, #1
 801257e:	4413      	add	r3, r2
 8012580:	e7e0      	b.n	8012544 <_printf_float+0x16c>
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	055a      	lsls	r2, r3, #21
 8012586:	d407      	bmi.n	8012598 <_printf_float+0x1c0>
 8012588:	6923      	ldr	r3, [r4, #16]
 801258a:	4642      	mov	r2, r8
 801258c:	4631      	mov	r1, r6
 801258e:	4628      	mov	r0, r5
 8012590:	47b8      	blx	r7
 8012592:	3001      	adds	r0, #1
 8012594:	d12a      	bne.n	80125ec <_printf_float+0x214>
 8012596:	e76b      	b.n	8012470 <_printf_float+0x98>
 8012598:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801259c:	f240 80e0 	bls.w	8012760 <_printf_float+0x388>
 80125a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80125a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	d133      	bne.n	8012616 <_printf_float+0x23e>
 80125ae:	4a38      	ldr	r2, [pc, #224]	@ (8012690 <_printf_float+0x2b8>)
 80125b0:	2301      	movs	r3, #1
 80125b2:	4631      	mov	r1, r6
 80125b4:	4628      	mov	r0, r5
 80125b6:	47b8      	blx	r7
 80125b8:	3001      	adds	r0, #1
 80125ba:	f43f af59 	beq.w	8012470 <_printf_float+0x98>
 80125be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80125c2:	4543      	cmp	r3, r8
 80125c4:	db02      	blt.n	80125cc <_printf_float+0x1f4>
 80125c6:	6823      	ldr	r3, [r4, #0]
 80125c8:	07d8      	lsls	r0, r3, #31
 80125ca:	d50f      	bpl.n	80125ec <_printf_float+0x214>
 80125cc:	9b05      	ldr	r3, [sp, #20]
 80125ce:	465a      	mov	r2, fp
 80125d0:	4631      	mov	r1, r6
 80125d2:	4628      	mov	r0, r5
 80125d4:	47b8      	blx	r7
 80125d6:	3001      	adds	r0, #1
 80125d8:	f43f af4a 	beq.w	8012470 <_printf_float+0x98>
 80125dc:	f04f 0900 	mov.w	r9, #0
 80125e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80125e4:	f104 0a1a 	add.w	sl, r4, #26
 80125e8:	45c8      	cmp	r8, r9
 80125ea:	dc09      	bgt.n	8012600 <_printf_float+0x228>
 80125ec:	6823      	ldr	r3, [r4, #0]
 80125ee:	079b      	lsls	r3, r3, #30
 80125f0:	f100 8107 	bmi.w	8012802 <_printf_float+0x42a>
 80125f4:	68e0      	ldr	r0, [r4, #12]
 80125f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125f8:	4298      	cmp	r0, r3
 80125fa:	bfb8      	it	lt
 80125fc:	4618      	movlt	r0, r3
 80125fe:	e739      	b.n	8012474 <_printf_float+0x9c>
 8012600:	2301      	movs	r3, #1
 8012602:	4652      	mov	r2, sl
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	f43f af30 	beq.w	8012470 <_printf_float+0x98>
 8012610:	f109 0901 	add.w	r9, r9, #1
 8012614:	e7e8      	b.n	80125e8 <_printf_float+0x210>
 8012616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	dc3b      	bgt.n	8012694 <_printf_float+0x2bc>
 801261c:	4a1c      	ldr	r2, [pc, #112]	@ (8012690 <_printf_float+0x2b8>)
 801261e:	2301      	movs	r3, #1
 8012620:	4631      	mov	r1, r6
 8012622:	4628      	mov	r0, r5
 8012624:	47b8      	blx	r7
 8012626:	3001      	adds	r0, #1
 8012628:	f43f af22 	beq.w	8012470 <_printf_float+0x98>
 801262c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012630:	ea59 0303 	orrs.w	r3, r9, r3
 8012634:	d102      	bne.n	801263c <_printf_float+0x264>
 8012636:	6823      	ldr	r3, [r4, #0]
 8012638:	07d9      	lsls	r1, r3, #31
 801263a:	d5d7      	bpl.n	80125ec <_printf_float+0x214>
 801263c:	9b05      	ldr	r3, [sp, #20]
 801263e:	465a      	mov	r2, fp
 8012640:	4631      	mov	r1, r6
 8012642:	4628      	mov	r0, r5
 8012644:	47b8      	blx	r7
 8012646:	3001      	adds	r0, #1
 8012648:	f43f af12 	beq.w	8012470 <_printf_float+0x98>
 801264c:	f04f 0a00 	mov.w	sl, #0
 8012650:	f104 0b1a 	add.w	fp, r4, #26
 8012654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012656:	425b      	negs	r3, r3
 8012658:	4553      	cmp	r3, sl
 801265a:	dc01      	bgt.n	8012660 <_printf_float+0x288>
 801265c:	464b      	mov	r3, r9
 801265e:	e794      	b.n	801258a <_printf_float+0x1b2>
 8012660:	2301      	movs	r3, #1
 8012662:	465a      	mov	r2, fp
 8012664:	4631      	mov	r1, r6
 8012666:	4628      	mov	r0, r5
 8012668:	47b8      	blx	r7
 801266a:	3001      	adds	r0, #1
 801266c:	f43f af00 	beq.w	8012470 <_printf_float+0x98>
 8012670:	f10a 0a01 	add.w	sl, sl, #1
 8012674:	e7ee      	b.n	8012654 <_printf_float+0x27c>
 8012676:	bf00      	nop
 8012678:	ffffffff 	.word	0xffffffff
 801267c:	7fefffff 	.word	0x7fefffff
 8012680:	080174e0 	.word	0x080174e0
 8012684:	080174e4 	.word	0x080174e4
 8012688:	080174e8 	.word	0x080174e8
 801268c:	080174ec 	.word	0x080174ec
 8012690:	080174f0 	.word	0x080174f0
 8012694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012696:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801269a:	4553      	cmp	r3, sl
 801269c:	bfa8      	it	ge
 801269e:	4653      	movge	r3, sl
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	4699      	mov	r9, r3
 80126a4:	dc37      	bgt.n	8012716 <_printf_float+0x33e>
 80126a6:	2300      	movs	r3, #0
 80126a8:	9307      	str	r3, [sp, #28]
 80126aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126ae:	f104 021a 	add.w	r2, r4, #26
 80126b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80126b4:	9907      	ldr	r1, [sp, #28]
 80126b6:	9306      	str	r3, [sp, #24]
 80126b8:	eba3 0309 	sub.w	r3, r3, r9
 80126bc:	428b      	cmp	r3, r1
 80126be:	dc31      	bgt.n	8012724 <_printf_float+0x34c>
 80126c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126c2:	459a      	cmp	sl, r3
 80126c4:	dc3b      	bgt.n	801273e <_printf_float+0x366>
 80126c6:	6823      	ldr	r3, [r4, #0]
 80126c8:	07da      	lsls	r2, r3, #31
 80126ca:	d438      	bmi.n	801273e <_printf_float+0x366>
 80126cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126ce:	ebaa 0903 	sub.w	r9, sl, r3
 80126d2:	9b06      	ldr	r3, [sp, #24]
 80126d4:	ebaa 0303 	sub.w	r3, sl, r3
 80126d8:	4599      	cmp	r9, r3
 80126da:	bfa8      	it	ge
 80126dc:	4699      	movge	r9, r3
 80126de:	f1b9 0f00 	cmp.w	r9, #0
 80126e2:	dc34      	bgt.n	801274e <_printf_float+0x376>
 80126e4:	f04f 0800 	mov.w	r8, #0
 80126e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126ec:	f104 0b1a 	add.w	fp, r4, #26
 80126f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126f2:	ebaa 0303 	sub.w	r3, sl, r3
 80126f6:	eba3 0309 	sub.w	r3, r3, r9
 80126fa:	4543      	cmp	r3, r8
 80126fc:	f77f af76 	ble.w	80125ec <_printf_float+0x214>
 8012700:	2301      	movs	r3, #1
 8012702:	465a      	mov	r2, fp
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	f43f aeb0 	beq.w	8012470 <_printf_float+0x98>
 8012710:	f108 0801 	add.w	r8, r8, #1
 8012714:	e7ec      	b.n	80126f0 <_printf_float+0x318>
 8012716:	4642      	mov	r2, r8
 8012718:	4631      	mov	r1, r6
 801271a:	4628      	mov	r0, r5
 801271c:	47b8      	blx	r7
 801271e:	3001      	adds	r0, #1
 8012720:	d1c1      	bne.n	80126a6 <_printf_float+0x2ce>
 8012722:	e6a5      	b.n	8012470 <_printf_float+0x98>
 8012724:	2301      	movs	r3, #1
 8012726:	4631      	mov	r1, r6
 8012728:	4628      	mov	r0, r5
 801272a:	9206      	str	r2, [sp, #24]
 801272c:	47b8      	blx	r7
 801272e:	3001      	adds	r0, #1
 8012730:	f43f ae9e 	beq.w	8012470 <_printf_float+0x98>
 8012734:	9b07      	ldr	r3, [sp, #28]
 8012736:	9a06      	ldr	r2, [sp, #24]
 8012738:	3301      	adds	r3, #1
 801273a:	9307      	str	r3, [sp, #28]
 801273c:	e7b9      	b.n	80126b2 <_printf_float+0x2da>
 801273e:	9b05      	ldr	r3, [sp, #20]
 8012740:	465a      	mov	r2, fp
 8012742:	4631      	mov	r1, r6
 8012744:	4628      	mov	r0, r5
 8012746:	47b8      	blx	r7
 8012748:	3001      	adds	r0, #1
 801274a:	d1bf      	bne.n	80126cc <_printf_float+0x2f4>
 801274c:	e690      	b.n	8012470 <_printf_float+0x98>
 801274e:	9a06      	ldr	r2, [sp, #24]
 8012750:	464b      	mov	r3, r9
 8012752:	4442      	add	r2, r8
 8012754:	4631      	mov	r1, r6
 8012756:	4628      	mov	r0, r5
 8012758:	47b8      	blx	r7
 801275a:	3001      	adds	r0, #1
 801275c:	d1c2      	bne.n	80126e4 <_printf_float+0x30c>
 801275e:	e687      	b.n	8012470 <_printf_float+0x98>
 8012760:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012764:	f1b9 0f01 	cmp.w	r9, #1
 8012768:	dc01      	bgt.n	801276e <_printf_float+0x396>
 801276a:	07db      	lsls	r3, r3, #31
 801276c:	d536      	bpl.n	80127dc <_printf_float+0x404>
 801276e:	2301      	movs	r3, #1
 8012770:	4642      	mov	r2, r8
 8012772:	4631      	mov	r1, r6
 8012774:	4628      	mov	r0, r5
 8012776:	47b8      	blx	r7
 8012778:	3001      	adds	r0, #1
 801277a:	f43f ae79 	beq.w	8012470 <_printf_float+0x98>
 801277e:	9b05      	ldr	r3, [sp, #20]
 8012780:	465a      	mov	r2, fp
 8012782:	4631      	mov	r1, r6
 8012784:	4628      	mov	r0, r5
 8012786:	47b8      	blx	r7
 8012788:	3001      	adds	r0, #1
 801278a:	f43f ae71 	beq.w	8012470 <_printf_float+0x98>
 801278e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801279a:	f109 39ff 	add.w	r9, r9, #4294967295
 801279e:	d018      	beq.n	80127d2 <_printf_float+0x3fa>
 80127a0:	464b      	mov	r3, r9
 80127a2:	f108 0201 	add.w	r2, r8, #1
 80127a6:	4631      	mov	r1, r6
 80127a8:	4628      	mov	r0, r5
 80127aa:	47b8      	blx	r7
 80127ac:	3001      	adds	r0, #1
 80127ae:	d10c      	bne.n	80127ca <_printf_float+0x3f2>
 80127b0:	e65e      	b.n	8012470 <_printf_float+0x98>
 80127b2:	2301      	movs	r3, #1
 80127b4:	465a      	mov	r2, fp
 80127b6:	4631      	mov	r1, r6
 80127b8:	4628      	mov	r0, r5
 80127ba:	47b8      	blx	r7
 80127bc:	3001      	adds	r0, #1
 80127be:	f43f ae57 	beq.w	8012470 <_printf_float+0x98>
 80127c2:	f108 0801 	add.w	r8, r8, #1
 80127c6:	45c8      	cmp	r8, r9
 80127c8:	dbf3      	blt.n	80127b2 <_printf_float+0x3da>
 80127ca:	4653      	mov	r3, sl
 80127cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80127d0:	e6dc      	b.n	801258c <_printf_float+0x1b4>
 80127d2:	f04f 0800 	mov.w	r8, #0
 80127d6:	f104 0b1a 	add.w	fp, r4, #26
 80127da:	e7f4      	b.n	80127c6 <_printf_float+0x3ee>
 80127dc:	2301      	movs	r3, #1
 80127de:	4642      	mov	r2, r8
 80127e0:	e7e1      	b.n	80127a6 <_printf_float+0x3ce>
 80127e2:	2301      	movs	r3, #1
 80127e4:	464a      	mov	r2, r9
 80127e6:	4631      	mov	r1, r6
 80127e8:	4628      	mov	r0, r5
 80127ea:	47b8      	blx	r7
 80127ec:	3001      	adds	r0, #1
 80127ee:	f43f ae3f 	beq.w	8012470 <_printf_float+0x98>
 80127f2:	f108 0801 	add.w	r8, r8, #1
 80127f6:	68e3      	ldr	r3, [r4, #12]
 80127f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80127fa:	1a5b      	subs	r3, r3, r1
 80127fc:	4543      	cmp	r3, r8
 80127fe:	dcf0      	bgt.n	80127e2 <_printf_float+0x40a>
 8012800:	e6f8      	b.n	80125f4 <_printf_float+0x21c>
 8012802:	f04f 0800 	mov.w	r8, #0
 8012806:	f104 0919 	add.w	r9, r4, #25
 801280a:	e7f4      	b.n	80127f6 <_printf_float+0x41e>

0801280c <_printf_common>:
 801280c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012810:	4616      	mov	r6, r2
 8012812:	4698      	mov	r8, r3
 8012814:	688a      	ldr	r2, [r1, #8]
 8012816:	690b      	ldr	r3, [r1, #16]
 8012818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801281c:	4293      	cmp	r3, r2
 801281e:	bfb8      	it	lt
 8012820:	4613      	movlt	r3, r2
 8012822:	6033      	str	r3, [r6, #0]
 8012824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012828:	4607      	mov	r7, r0
 801282a:	460c      	mov	r4, r1
 801282c:	b10a      	cbz	r2, 8012832 <_printf_common+0x26>
 801282e:	3301      	adds	r3, #1
 8012830:	6033      	str	r3, [r6, #0]
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	0699      	lsls	r1, r3, #26
 8012836:	bf42      	ittt	mi
 8012838:	6833      	ldrmi	r3, [r6, #0]
 801283a:	3302      	addmi	r3, #2
 801283c:	6033      	strmi	r3, [r6, #0]
 801283e:	6825      	ldr	r5, [r4, #0]
 8012840:	f015 0506 	ands.w	r5, r5, #6
 8012844:	d106      	bne.n	8012854 <_printf_common+0x48>
 8012846:	f104 0a19 	add.w	sl, r4, #25
 801284a:	68e3      	ldr	r3, [r4, #12]
 801284c:	6832      	ldr	r2, [r6, #0]
 801284e:	1a9b      	subs	r3, r3, r2
 8012850:	42ab      	cmp	r3, r5
 8012852:	dc26      	bgt.n	80128a2 <_printf_common+0x96>
 8012854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012858:	6822      	ldr	r2, [r4, #0]
 801285a:	3b00      	subs	r3, #0
 801285c:	bf18      	it	ne
 801285e:	2301      	movne	r3, #1
 8012860:	0692      	lsls	r2, r2, #26
 8012862:	d42b      	bmi.n	80128bc <_printf_common+0xb0>
 8012864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012868:	4641      	mov	r1, r8
 801286a:	4638      	mov	r0, r7
 801286c:	47c8      	blx	r9
 801286e:	3001      	adds	r0, #1
 8012870:	d01e      	beq.n	80128b0 <_printf_common+0xa4>
 8012872:	6823      	ldr	r3, [r4, #0]
 8012874:	6922      	ldr	r2, [r4, #16]
 8012876:	f003 0306 	and.w	r3, r3, #6
 801287a:	2b04      	cmp	r3, #4
 801287c:	bf02      	ittt	eq
 801287e:	68e5      	ldreq	r5, [r4, #12]
 8012880:	6833      	ldreq	r3, [r6, #0]
 8012882:	1aed      	subeq	r5, r5, r3
 8012884:	68a3      	ldr	r3, [r4, #8]
 8012886:	bf0c      	ite	eq
 8012888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801288c:	2500      	movne	r5, #0
 801288e:	4293      	cmp	r3, r2
 8012890:	bfc4      	itt	gt
 8012892:	1a9b      	subgt	r3, r3, r2
 8012894:	18ed      	addgt	r5, r5, r3
 8012896:	2600      	movs	r6, #0
 8012898:	341a      	adds	r4, #26
 801289a:	42b5      	cmp	r5, r6
 801289c:	d11a      	bne.n	80128d4 <_printf_common+0xc8>
 801289e:	2000      	movs	r0, #0
 80128a0:	e008      	b.n	80128b4 <_printf_common+0xa8>
 80128a2:	2301      	movs	r3, #1
 80128a4:	4652      	mov	r2, sl
 80128a6:	4641      	mov	r1, r8
 80128a8:	4638      	mov	r0, r7
 80128aa:	47c8      	blx	r9
 80128ac:	3001      	adds	r0, #1
 80128ae:	d103      	bne.n	80128b8 <_printf_common+0xac>
 80128b0:	f04f 30ff 	mov.w	r0, #4294967295
 80128b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b8:	3501      	adds	r5, #1
 80128ba:	e7c6      	b.n	801284a <_printf_common+0x3e>
 80128bc:	18e1      	adds	r1, r4, r3
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	2030      	movs	r0, #48	@ 0x30
 80128c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80128c6:	4422      	add	r2, r4
 80128c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80128cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80128d0:	3302      	adds	r3, #2
 80128d2:	e7c7      	b.n	8012864 <_printf_common+0x58>
 80128d4:	2301      	movs	r3, #1
 80128d6:	4622      	mov	r2, r4
 80128d8:	4641      	mov	r1, r8
 80128da:	4638      	mov	r0, r7
 80128dc:	47c8      	blx	r9
 80128de:	3001      	adds	r0, #1
 80128e0:	d0e6      	beq.n	80128b0 <_printf_common+0xa4>
 80128e2:	3601      	adds	r6, #1
 80128e4:	e7d9      	b.n	801289a <_printf_common+0x8e>
	...

080128e8 <_printf_i>:
 80128e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128ec:	7e0f      	ldrb	r7, [r1, #24]
 80128ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80128f0:	2f78      	cmp	r7, #120	@ 0x78
 80128f2:	4691      	mov	r9, r2
 80128f4:	4680      	mov	r8, r0
 80128f6:	460c      	mov	r4, r1
 80128f8:	469a      	mov	sl, r3
 80128fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80128fe:	d807      	bhi.n	8012910 <_printf_i+0x28>
 8012900:	2f62      	cmp	r7, #98	@ 0x62
 8012902:	d80a      	bhi.n	801291a <_printf_i+0x32>
 8012904:	2f00      	cmp	r7, #0
 8012906:	f000 80d2 	beq.w	8012aae <_printf_i+0x1c6>
 801290a:	2f58      	cmp	r7, #88	@ 0x58
 801290c:	f000 80b9 	beq.w	8012a82 <_printf_i+0x19a>
 8012910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012918:	e03a      	b.n	8012990 <_printf_i+0xa8>
 801291a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801291e:	2b15      	cmp	r3, #21
 8012920:	d8f6      	bhi.n	8012910 <_printf_i+0x28>
 8012922:	a101      	add	r1, pc, #4	@ (adr r1, 8012928 <_printf_i+0x40>)
 8012924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012928:	08012981 	.word	0x08012981
 801292c:	08012995 	.word	0x08012995
 8012930:	08012911 	.word	0x08012911
 8012934:	08012911 	.word	0x08012911
 8012938:	08012911 	.word	0x08012911
 801293c:	08012911 	.word	0x08012911
 8012940:	08012995 	.word	0x08012995
 8012944:	08012911 	.word	0x08012911
 8012948:	08012911 	.word	0x08012911
 801294c:	08012911 	.word	0x08012911
 8012950:	08012911 	.word	0x08012911
 8012954:	08012a95 	.word	0x08012a95
 8012958:	080129bf 	.word	0x080129bf
 801295c:	08012a4f 	.word	0x08012a4f
 8012960:	08012911 	.word	0x08012911
 8012964:	08012911 	.word	0x08012911
 8012968:	08012ab7 	.word	0x08012ab7
 801296c:	08012911 	.word	0x08012911
 8012970:	080129bf 	.word	0x080129bf
 8012974:	08012911 	.word	0x08012911
 8012978:	08012911 	.word	0x08012911
 801297c:	08012a57 	.word	0x08012a57
 8012980:	6833      	ldr	r3, [r6, #0]
 8012982:	1d1a      	adds	r2, r3, #4
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	6032      	str	r2, [r6, #0]
 8012988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801298c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012990:	2301      	movs	r3, #1
 8012992:	e09d      	b.n	8012ad0 <_printf_i+0x1e8>
 8012994:	6833      	ldr	r3, [r6, #0]
 8012996:	6820      	ldr	r0, [r4, #0]
 8012998:	1d19      	adds	r1, r3, #4
 801299a:	6031      	str	r1, [r6, #0]
 801299c:	0606      	lsls	r6, r0, #24
 801299e:	d501      	bpl.n	80129a4 <_printf_i+0xbc>
 80129a0:	681d      	ldr	r5, [r3, #0]
 80129a2:	e003      	b.n	80129ac <_printf_i+0xc4>
 80129a4:	0645      	lsls	r5, r0, #25
 80129a6:	d5fb      	bpl.n	80129a0 <_printf_i+0xb8>
 80129a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80129ac:	2d00      	cmp	r5, #0
 80129ae:	da03      	bge.n	80129b8 <_printf_i+0xd0>
 80129b0:	232d      	movs	r3, #45	@ 0x2d
 80129b2:	426d      	negs	r5, r5
 80129b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129b8:	4859      	ldr	r0, [pc, #356]	@ (8012b20 <_printf_i+0x238>)
 80129ba:	230a      	movs	r3, #10
 80129bc:	e011      	b.n	80129e2 <_printf_i+0xfa>
 80129be:	6821      	ldr	r1, [r4, #0]
 80129c0:	6833      	ldr	r3, [r6, #0]
 80129c2:	0608      	lsls	r0, r1, #24
 80129c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80129c8:	d402      	bmi.n	80129d0 <_printf_i+0xe8>
 80129ca:	0649      	lsls	r1, r1, #25
 80129cc:	bf48      	it	mi
 80129ce:	b2ad      	uxthmi	r5, r5
 80129d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80129d2:	4853      	ldr	r0, [pc, #332]	@ (8012b20 <_printf_i+0x238>)
 80129d4:	6033      	str	r3, [r6, #0]
 80129d6:	bf14      	ite	ne
 80129d8:	230a      	movne	r3, #10
 80129da:	2308      	moveq	r3, #8
 80129dc:	2100      	movs	r1, #0
 80129de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80129e2:	6866      	ldr	r6, [r4, #4]
 80129e4:	60a6      	str	r6, [r4, #8]
 80129e6:	2e00      	cmp	r6, #0
 80129e8:	bfa2      	ittt	ge
 80129ea:	6821      	ldrge	r1, [r4, #0]
 80129ec:	f021 0104 	bicge.w	r1, r1, #4
 80129f0:	6021      	strge	r1, [r4, #0]
 80129f2:	b90d      	cbnz	r5, 80129f8 <_printf_i+0x110>
 80129f4:	2e00      	cmp	r6, #0
 80129f6:	d04b      	beq.n	8012a90 <_printf_i+0x1a8>
 80129f8:	4616      	mov	r6, r2
 80129fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80129fe:	fb03 5711 	mls	r7, r3, r1, r5
 8012a02:	5dc7      	ldrb	r7, [r0, r7]
 8012a04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012a08:	462f      	mov	r7, r5
 8012a0a:	42bb      	cmp	r3, r7
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	d9f4      	bls.n	80129fa <_printf_i+0x112>
 8012a10:	2b08      	cmp	r3, #8
 8012a12:	d10b      	bne.n	8012a2c <_printf_i+0x144>
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	07df      	lsls	r7, r3, #31
 8012a18:	d508      	bpl.n	8012a2c <_printf_i+0x144>
 8012a1a:	6923      	ldr	r3, [r4, #16]
 8012a1c:	6861      	ldr	r1, [r4, #4]
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	bfde      	ittt	le
 8012a22:	2330      	movle	r3, #48	@ 0x30
 8012a24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012a28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012a2c:	1b92      	subs	r2, r2, r6
 8012a2e:	6122      	str	r2, [r4, #16]
 8012a30:	f8cd a000 	str.w	sl, [sp]
 8012a34:	464b      	mov	r3, r9
 8012a36:	aa03      	add	r2, sp, #12
 8012a38:	4621      	mov	r1, r4
 8012a3a:	4640      	mov	r0, r8
 8012a3c:	f7ff fee6 	bl	801280c <_printf_common>
 8012a40:	3001      	adds	r0, #1
 8012a42:	d14a      	bne.n	8012ada <_printf_i+0x1f2>
 8012a44:	f04f 30ff 	mov.w	r0, #4294967295
 8012a48:	b004      	add	sp, #16
 8012a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	f043 0320 	orr.w	r3, r3, #32
 8012a54:	6023      	str	r3, [r4, #0]
 8012a56:	4833      	ldr	r0, [pc, #204]	@ (8012b24 <_printf_i+0x23c>)
 8012a58:	2778      	movs	r7, #120	@ 0x78
 8012a5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012a5e:	6823      	ldr	r3, [r4, #0]
 8012a60:	6831      	ldr	r1, [r6, #0]
 8012a62:	061f      	lsls	r7, r3, #24
 8012a64:	f851 5b04 	ldr.w	r5, [r1], #4
 8012a68:	d402      	bmi.n	8012a70 <_printf_i+0x188>
 8012a6a:	065f      	lsls	r7, r3, #25
 8012a6c:	bf48      	it	mi
 8012a6e:	b2ad      	uxthmi	r5, r5
 8012a70:	6031      	str	r1, [r6, #0]
 8012a72:	07d9      	lsls	r1, r3, #31
 8012a74:	bf44      	itt	mi
 8012a76:	f043 0320 	orrmi.w	r3, r3, #32
 8012a7a:	6023      	strmi	r3, [r4, #0]
 8012a7c:	b11d      	cbz	r5, 8012a86 <_printf_i+0x19e>
 8012a7e:	2310      	movs	r3, #16
 8012a80:	e7ac      	b.n	80129dc <_printf_i+0xf4>
 8012a82:	4827      	ldr	r0, [pc, #156]	@ (8012b20 <_printf_i+0x238>)
 8012a84:	e7e9      	b.n	8012a5a <_printf_i+0x172>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	f023 0320 	bic.w	r3, r3, #32
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	e7f6      	b.n	8012a7e <_printf_i+0x196>
 8012a90:	4616      	mov	r6, r2
 8012a92:	e7bd      	b.n	8012a10 <_printf_i+0x128>
 8012a94:	6833      	ldr	r3, [r6, #0]
 8012a96:	6825      	ldr	r5, [r4, #0]
 8012a98:	6961      	ldr	r1, [r4, #20]
 8012a9a:	1d18      	adds	r0, r3, #4
 8012a9c:	6030      	str	r0, [r6, #0]
 8012a9e:	062e      	lsls	r6, r5, #24
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	d501      	bpl.n	8012aa8 <_printf_i+0x1c0>
 8012aa4:	6019      	str	r1, [r3, #0]
 8012aa6:	e002      	b.n	8012aae <_printf_i+0x1c6>
 8012aa8:	0668      	lsls	r0, r5, #25
 8012aaa:	d5fb      	bpl.n	8012aa4 <_printf_i+0x1bc>
 8012aac:	8019      	strh	r1, [r3, #0]
 8012aae:	2300      	movs	r3, #0
 8012ab0:	6123      	str	r3, [r4, #16]
 8012ab2:	4616      	mov	r6, r2
 8012ab4:	e7bc      	b.n	8012a30 <_printf_i+0x148>
 8012ab6:	6833      	ldr	r3, [r6, #0]
 8012ab8:	1d1a      	adds	r2, r3, #4
 8012aba:	6032      	str	r2, [r6, #0]
 8012abc:	681e      	ldr	r6, [r3, #0]
 8012abe:	6862      	ldr	r2, [r4, #4]
 8012ac0:	2100      	movs	r1, #0
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7ed fc0c 	bl	80002e0 <memchr>
 8012ac8:	b108      	cbz	r0, 8012ace <_printf_i+0x1e6>
 8012aca:	1b80      	subs	r0, r0, r6
 8012acc:	6060      	str	r0, [r4, #4]
 8012ace:	6863      	ldr	r3, [r4, #4]
 8012ad0:	6123      	str	r3, [r4, #16]
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ad8:	e7aa      	b.n	8012a30 <_printf_i+0x148>
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	4632      	mov	r2, r6
 8012ade:	4649      	mov	r1, r9
 8012ae0:	4640      	mov	r0, r8
 8012ae2:	47d0      	blx	sl
 8012ae4:	3001      	adds	r0, #1
 8012ae6:	d0ad      	beq.n	8012a44 <_printf_i+0x15c>
 8012ae8:	6823      	ldr	r3, [r4, #0]
 8012aea:	079b      	lsls	r3, r3, #30
 8012aec:	d413      	bmi.n	8012b16 <_printf_i+0x22e>
 8012aee:	68e0      	ldr	r0, [r4, #12]
 8012af0:	9b03      	ldr	r3, [sp, #12]
 8012af2:	4298      	cmp	r0, r3
 8012af4:	bfb8      	it	lt
 8012af6:	4618      	movlt	r0, r3
 8012af8:	e7a6      	b.n	8012a48 <_printf_i+0x160>
 8012afa:	2301      	movs	r3, #1
 8012afc:	4632      	mov	r2, r6
 8012afe:	4649      	mov	r1, r9
 8012b00:	4640      	mov	r0, r8
 8012b02:	47d0      	blx	sl
 8012b04:	3001      	adds	r0, #1
 8012b06:	d09d      	beq.n	8012a44 <_printf_i+0x15c>
 8012b08:	3501      	adds	r5, #1
 8012b0a:	68e3      	ldr	r3, [r4, #12]
 8012b0c:	9903      	ldr	r1, [sp, #12]
 8012b0e:	1a5b      	subs	r3, r3, r1
 8012b10:	42ab      	cmp	r3, r5
 8012b12:	dcf2      	bgt.n	8012afa <_printf_i+0x212>
 8012b14:	e7eb      	b.n	8012aee <_printf_i+0x206>
 8012b16:	2500      	movs	r5, #0
 8012b18:	f104 0619 	add.w	r6, r4, #25
 8012b1c:	e7f5      	b.n	8012b0a <_printf_i+0x222>
 8012b1e:	bf00      	nop
 8012b20:	080174f2 	.word	0x080174f2
 8012b24:	08017503 	.word	0x08017503

08012b28 <std>:
 8012b28:	2300      	movs	r3, #0
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8012b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b36:	6083      	str	r3, [r0, #8]
 8012b38:	8181      	strh	r1, [r0, #12]
 8012b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b3c:	81c2      	strh	r2, [r0, #14]
 8012b3e:	6183      	str	r3, [r0, #24]
 8012b40:	4619      	mov	r1, r3
 8012b42:	2208      	movs	r2, #8
 8012b44:	305c      	adds	r0, #92	@ 0x5c
 8012b46:	f000 f914 	bl	8012d72 <memset>
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b80 <std+0x58>)
 8012b4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b84 <std+0x5c>)
 8012b50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b52:	4b0d      	ldr	r3, [pc, #52]	@ (8012b88 <std+0x60>)
 8012b54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b56:	4b0d      	ldr	r3, [pc, #52]	@ (8012b8c <std+0x64>)
 8012b58:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b90 <std+0x68>)
 8012b5c:	6224      	str	r4, [r4, #32]
 8012b5e:	429c      	cmp	r4, r3
 8012b60:	d006      	beq.n	8012b70 <std+0x48>
 8012b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b66:	4294      	cmp	r4, r2
 8012b68:	d002      	beq.n	8012b70 <std+0x48>
 8012b6a:	33d0      	adds	r3, #208	@ 0xd0
 8012b6c:	429c      	cmp	r4, r3
 8012b6e:	d105      	bne.n	8012b7c <std+0x54>
 8012b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b78:	f000 b988 	b.w	8012e8c <__retarget_lock_init_recursive>
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	bf00      	nop
 8012b80:	08012ced 	.word	0x08012ced
 8012b84:	08012d0f 	.word	0x08012d0f
 8012b88:	08012d47 	.word	0x08012d47
 8012b8c:	08012d6b 	.word	0x08012d6b
 8012b90:	24009530 	.word	0x24009530

08012b94 <stdio_exit_handler>:
 8012b94:	4a02      	ldr	r2, [pc, #8]	@ (8012ba0 <stdio_exit_handler+0xc>)
 8012b96:	4903      	ldr	r1, [pc, #12]	@ (8012ba4 <stdio_exit_handler+0x10>)
 8012b98:	4803      	ldr	r0, [pc, #12]	@ (8012ba8 <stdio_exit_handler+0x14>)
 8012b9a:	f000 b869 	b.w	8012c70 <_fwalk_sglue>
 8012b9e:	bf00      	nop
 8012ba0:	24000134 	.word	0x24000134
 8012ba4:	080145bd 	.word	0x080145bd
 8012ba8:	24000144 	.word	0x24000144

08012bac <cleanup_stdio>:
 8012bac:	6841      	ldr	r1, [r0, #4]
 8012bae:	4b0c      	ldr	r3, [pc, #48]	@ (8012be0 <cleanup_stdio+0x34>)
 8012bb0:	4299      	cmp	r1, r3
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	d001      	beq.n	8012bbc <cleanup_stdio+0x10>
 8012bb8:	f001 fd00 	bl	80145bc <_fflush_r>
 8012bbc:	68a1      	ldr	r1, [r4, #8]
 8012bbe:	4b09      	ldr	r3, [pc, #36]	@ (8012be4 <cleanup_stdio+0x38>)
 8012bc0:	4299      	cmp	r1, r3
 8012bc2:	d002      	beq.n	8012bca <cleanup_stdio+0x1e>
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f001 fcf9 	bl	80145bc <_fflush_r>
 8012bca:	68e1      	ldr	r1, [r4, #12]
 8012bcc:	4b06      	ldr	r3, [pc, #24]	@ (8012be8 <cleanup_stdio+0x3c>)
 8012bce:	4299      	cmp	r1, r3
 8012bd0:	d004      	beq.n	8012bdc <cleanup_stdio+0x30>
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bd8:	f001 bcf0 	b.w	80145bc <_fflush_r>
 8012bdc:	bd10      	pop	{r4, pc}
 8012bde:	bf00      	nop
 8012be0:	24009530 	.word	0x24009530
 8012be4:	24009598 	.word	0x24009598
 8012be8:	24009600 	.word	0x24009600

08012bec <global_stdio_init.part.0>:
 8012bec:	b510      	push	{r4, lr}
 8012bee:	4b0b      	ldr	r3, [pc, #44]	@ (8012c1c <global_stdio_init.part.0+0x30>)
 8012bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8012c20 <global_stdio_init.part.0+0x34>)
 8012bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8012c24 <global_stdio_init.part.0+0x38>)
 8012bf4:	601a      	str	r2, [r3, #0]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2104      	movs	r1, #4
 8012bfc:	f7ff ff94 	bl	8012b28 <std>
 8012c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012c04:	2201      	movs	r2, #1
 8012c06:	2109      	movs	r1, #9
 8012c08:	f7ff ff8e 	bl	8012b28 <std>
 8012c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012c10:	2202      	movs	r2, #2
 8012c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c16:	2112      	movs	r1, #18
 8012c18:	f7ff bf86 	b.w	8012b28 <std>
 8012c1c:	24009668 	.word	0x24009668
 8012c20:	24009530 	.word	0x24009530
 8012c24:	08012b95 	.word	0x08012b95

08012c28 <__sfp_lock_acquire>:
 8012c28:	4801      	ldr	r0, [pc, #4]	@ (8012c30 <__sfp_lock_acquire+0x8>)
 8012c2a:	f000 b930 	b.w	8012e8e <__retarget_lock_acquire_recursive>
 8012c2e:	bf00      	nop
 8012c30:	24009671 	.word	0x24009671

08012c34 <__sfp_lock_release>:
 8012c34:	4801      	ldr	r0, [pc, #4]	@ (8012c3c <__sfp_lock_release+0x8>)
 8012c36:	f000 b92b 	b.w	8012e90 <__retarget_lock_release_recursive>
 8012c3a:	bf00      	nop
 8012c3c:	24009671 	.word	0x24009671

08012c40 <__sinit>:
 8012c40:	b510      	push	{r4, lr}
 8012c42:	4604      	mov	r4, r0
 8012c44:	f7ff fff0 	bl	8012c28 <__sfp_lock_acquire>
 8012c48:	6a23      	ldr	r3, [r4, #32]
 8012c4a:	b11b      	cbz	r3, 8012c54 <__sinit+0x14>
 8012c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c50:	f7ff bff0 	b.w	8012c34 <__sfp_lock_release>
 8012c54:	4b04      	ldr	r3, [pc, #16]	@ (8012c68 <__sinit+0x28>)
 8012c56:	6223      	str	r3, [r4, #32]
 8012c58:	4b04      	ldr	r3, [pc, #16]	@ (8012c6c <__sinit+0x2c>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1f5      	bne.n	8012c4c <__sinit+0xc>
 8012c60:	f7ff ffc4 	bl	8012bec <global_stdio_init.part.0>
 8012c64:	e7f2      	b.n	8012c4c <__sinit+0xc>
 8012c66:	bf00      	nop
 8012c68:	08012bad 	.word	0x08012bad
 8012c6c:	24009668 	.word	0x24009668

08012c70 <_fwalk_sglue>:
 8012c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c74:	4607      	mov	r7, r0
 8012c76:	4688      	mov	r8, r1
 8012c78:	4614      	mov	r4, r2
 8012c7a:	2600      	movs	r6, #0
 8012c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c80:	f1b9 0901 	subs.w	r9, r9, #1
 8012c84:	d505      	bpl.n	8012c92 <_fwalk_sglue+0x22>
 8012c86:	6824      	ldr	r4, [r4, #0]
 8012c88:	2c00      	cmp	r4, #0
 8012c8a:	d1f7      	bne.n	8012c7c <_fwalk_sglue+0xc>
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c92:	89ab      	ldrh	r3, [r5, #12]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d907      	bls.n	8012ca8 <_fwalk_sglue+0x38>
 8012c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	d003      	beq.n	8012ca8 <_fwalk_sglue+0x38>
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	4638      	mov	r0, r7
 8012ca4:	47c0      	blx	r8
 8012ca6:	4306      	orrs	r6, r0
 8012ca8:	3568      	adds	r5, #104	@ 0x68
 8012caa:	e7e9      	b.n	8012c80 <_fwalk_sglue+0x10>

08012cac <siprintf>:
 8012cac:	b40e      	push	{r1, r2, r3}
 8012cae:	b500      	push	{lr}
 8012cb0:	b09c      	sub	sp, #112	@ 0x70
 8012cb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8012cb4:	9002      	str	r0, [sp, #8]
 8012cb6:	9006      	str	r0, [sp, #24]
 8012cb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012cbc:	4809      	ldr	r0, [pc, #36]	@ (8012ce4 <siprintf+0x38>)
 8012cbe:	9107      	str	r1, [sp, #28]
 8012cc0:	9104      	str	r1, [sp, #16]
 8012cc2:	4909      	ldr	r1, [pc, #36]	@ (8012ce8 <siprintf+0x3c>)
 8012cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cc8:	9105      	str	r1, [sp, #20]
 8012cca:	6800      	ldr	r0, [r0, #0]
 8012ccc:	9301      	str	r3, [sp, #4]
 8012cce:	a902      	add	r1, sp, #8
 8012cd0:	f001 faf4 	bl	80142bc <_svfiprintf_r>
 8012cd4:	9b02      	ldr	r3, [sp, #8]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	701a      	strb	r2, [r3, #0]
 8012cda:	b01c      	add	sp, #112	@ 0x70
 8012cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ce0:	b003      	add	sp, #12
 8012ce2:	4770      	bx	lr
 8012ce4:	24000140 	.word	0x24000140
 8012ce8:	ffff0208 	.word	0xffff0208

08012cec <__sread>:
 8012cec:	b510      	push	{r4, lr}
 8012cee:	460c      	mov	r4, r1
 8012cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf4:	f000 f86c 	bl	8012dd0 <_read_r>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	bfab      	itete	ge
 8012cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8012d00:	181b      	addge	r3, r3, r0
 8012d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d06:	bfac      	ite	ge
 8012d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012d0a:	81a3      	strhlt	r3, [r4, #12]
 8012d0c:	bd10      	pop	{r4, pc}

08012d0e <__swrite>:
 8012d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d12:	461f      	mov	r7, r3
 8012d14:	898b      	ldrh	r3, [r1, #12]
 8012d16:	05db      	lsls	r3, r3, #23
 8012d18:	4605      	mov	r5, r0
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	4616      	mov	r6, r2
 8012d1e:	d505      	bpl.n	8012d2c <__swrite+0x1e>
 8012d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d24:	2302      	movs	r3, #2
 8012d26:	2200      	movs	r2, #0
 8012d28:	f000 f840 	bl	8012dac <_lseek_r>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	4632      	mov	r2, r6
 8012d3a:	463b      	mov	r3, r7
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d42:	f000 b867 	b.w	8012e14 <_write_r>

08012d46 <__sseek>:
 8012d46:	b510      	push	{r4, lr}
 8012d48:	460c      	mov	r4, r1
 8012d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d4e:	f000 f82d 	bl	8012dac <_lseek_r>
 8012d52:	1c43      	adds	r3, r0, #1
 8012d54:	89a3      	ldrh	r3, [r4, #12]
 8012d56:	bf15      	itete	ne
 8012d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d62:	81a3      	strheq	r3, [r4, #12]
 8012d64:	bf18      	it	ne
 8012d66:	81a3      	strhne	r3, [r4, #12]
 8012d68:	bd10      	pop	{r4, pc}

08012d6a <__sclose>:
 8012d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6e:	f000 b80d 	b.w	8012d8c <_close_r>

08012d72 <memset>:
 8012d72:	4402      	add	r2, r0
 8012d74:	4603      	mov	r3, r0
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d100      	bne.n	8012d7c <memset+0xa>
 8012d7a:	4770      	bx	lr
 8012d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8012d80:	e7f9      	b.n	8012d76 <memset+0x4>
	...

08012d84 <_localeconv_r>:
 8012d84:	4800      	ldr	r0, [pc, #0]	@ (8012d88 <_localeconv_r+0x4>)
 8012d86:	4770      	bx	lr
 8012d88:	24000280 	.word	0x24000280

08012d8c <_close_r>:
 8012d8c:	b538      	push	{r3, r4, r5, lr}
 8012d8e:	4d06      	ldr	r5, [pc, #24]	@ (8012da8 <_close_r+0x1c>)
 8012d90:	2300      	movs	r3, #0
 8012d92:	4604      	mov	r4, r0
 8012d94:	4608      	mov	r0, r1
 8012d96:	602b      	str	r3, [r5, #0]
 8012d98:	f7ee fd8e 	bl	80018b8 <_close>
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	d102      	bne.n	8012da6 <_close_r+0x1a>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	b103      	cbz	r3, 8012da6 <_close_r+0x1a>
 8012da4:	6023      	str	r3, [r4, #0]
 8012da6:	bd38      	pop	{r3, r4, r5, pc}
 8012da8:	2400966c 	.word	0x2400966c

08012dac <_lseek_r>:
 8012dac:	b538      	push	{r3, r4, r5, lr}
 8012dae:	4d07      	ldr	r5, [pc, #28]	@ (8012dcc <_lseek_r+0x20>)
 8012db0:	4604      	mov	r4, r0
 8012db2:	4608      	mov	r0, r1
 8012db4:	4611      	mov	r1, r2
 8012db6:	2200      	movs	r2, #0
 8012db8:	602a      	str	r2, [r5, #0]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	f7ee fda3 	bl	8001906 <_lseek>
 8012dc0:	1c43      	adds	r3, r0, #1
 8012dc2:	d102      	bne.n	8012dca <_lseek_r+0x1e>
 8012dc4:	682b      	ldr	r3, [r5, #0]
 8012dc6:	b103      	cbz	r3, 8012dca <_lseek_r+0x1e>
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	2400966c 	.word	0x2400966c

08012dd0 <_read_r>:
 8012dd0:	b538      	push	{r3, r4, r5, lr}
 8012dd2:	4d07      	ldr	r5, [pc, #28]	@ (8012df0 <_read_r+0x20>)
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	4608      	mov	r0, r1
 8012dd8:	4611      	mov	r1, r2
 8012dda:	2200      	movs	r2, #0
 8012ddc:	602a      	str	r2, [r5, #0]
 8012dde:	461a      	mov	r2, r3
 8012de0:	f7ee fd31 	bl	8001846 <_read>
 8012de4:	1c43      	adds	r3, r0, #1
 8012de6:	d102      	bne.n	8012dee <_read_r+0x1e>
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	b103      	cbz	r3, 8012dee <_read_r+0x1e>
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	bd38      	pop	{r3, r4, r5, pc}
 8012df0:	2400966c 	.word	0x2400966c

08012df4 <_sbrk_r>:
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	4d06      	ldr	r5, [pc, #24]	@ (8012e10 <_sbrk_r+0x1c>)
 8012df8:	2300      	movs	r3, #0
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	4608      	mov	r0, r1
 8012dfe:	602b      	str	r3, [r5, #0]
 8012e00:	f7ee fd8e 	bl	8001920 <_sbrk>
 8012e04:	1c43      	adds	r3, r0, #1
 8012e06:	d102      	bne.n	8012e0e <_sbrk_r+0x1a>
 8012e08:	682b      	ldr	r3, [r5, #0]
 8012e0a:	b103      	cbz	r3, 8012e0e <_sbrk_r+0x1a>
 8012e0c:	6023      	str	r3, [r4, #0]
 8012e0e:	bd38      	pop	{r3, r4, r5, pc}
 8012e10:	2400966c 	.word	0x2400966c

08012e14 <_write_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	4d07      	ldr	r5, [pc, #28]	@ (8012e34 <_write_r+0x20>)
 8012e18:	4604      	mov	r4, r0
 8012e1a:	4608      	mov	r0, r1
 8012e1c:	4611      	mov	r1, r2
 8012e1e:	2200      	movs	r2, #0
 8012e20:	602a      	str	r2, [r5, #0]
 8012e22:	461a      	mov	r2, r3
 8012e24:	f7ee fd2c 	bl	8001880 <_write>
 8012e28:	1c43      	adds	r3, r0, #1
 8012e2a:	d102      	bne.n	8012e32 <_write_r+0x1e>
 8012e2c:	682b      	ldr	r3, [r5, #0]
 8012e2e:	b103      	cbz	r3, 8012e32 <_write_r+0x1e>
 8012e30:	6023      	str	r3, [r4, #0]
 8012e32:	bd38      	pop	{r3, r4, r5, pc}
 8012e34:	2400966c 	.word	0x2400966c

08012e38 <__errno>:
 8012e38:	4b01      	ldr	r3, [pc, #4]	@ (8012e40 <__errno+0x8>)
 8012e3a:	6818      	ldr	r0, [r3, #0]
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop
 8012e40:	24000140 	.word	0x24000140

08012e44 <__libc_init_array>:
 8012e44:	b570      	push	{r4, r5, r6, lr}
 8012e46:	4d0d      	ldr	r5, [pc, #52]	@ (8012e7c <__libc_init_array+0x38>)
 8012e48:	4c0d      	ldr	r4, [pc, #52]	@ (8012e80 <__libc_init_array+0x3c>)
 8012e4a:	1b64      	subs	r4, r4, r5
 8012e4c:	10a4      	asrs	r4, r4, #2
 8012e4e:	2600      	movs	r6, #0
 8012e50:	42a6      	cmp	r6, r4
 8012e52:	d109      	bne.n	8012e68 <__libc_init_array+0x24>
 8012e54:	4d0b      	ldr	r5, [pc, #44]	@ (8012e84 <__libc_init_array+0x40>)
 8012e56:	4c0c      	ldr	r4, [pc, #48]	@ (8012e88 <__libc_init_array+0x44>)
 8012e58:	f002 fa1c 	bl	8015294 <_init>
 8012e5c:	1b64      	subs	r4, r4, r5
 8012e5e:	10a4      	asrs	r4, r4, #2
 8012e60:	2600      	movs	r6, #0
 8012e62:	42a6      	cmp	r6, r4
 8012e64:	d105      	bne.n	8012e72 <__libc_init_array+0x2e>
 8012e66:	bd70      	pop	{r4, r5, r6, pc}
 8012e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e6c:	4798      	blx	r3
 8012e6e:	3601      	adds	r6, #1
 8012e70:	e7ee      	b.n	8012e50 <__libc_init_array+0xc>
 8012e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e76:	4798      	blx	r3
 8012e78:	3601      	adds	r6, #1
 8012e7a:	e7f2      	b.n	8012e62 <__libc_init_array+0x1e>
 8012e7c:	08017868 	.word	0x08017868
 8012e80:	08017868 	.word	0x08017868
 8012e84:	08017868 	.word	0x08017868
 8012e88:	0801786c 	.word	0x0801786c

08012e8c <__retarget_lock_init_recursive>:
 8012e8c:	4770      	bx	lr

08012e8e <__retarget_lock_acquire_recursive>:
 8012e8e:	4770      	bx	lr

08012e90 <__retarget_lock_release_recursive>:
 8012e90:	4770      	bx	lr

08012e92 <memcpy>:
 8012e92:	440a      	add	r2, r1
 8012e94:	4291      	cmp	r1, r2
 8012e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e9a:	d100      	bne.n	8012e9e <memcpy+0xc>
 8012e9c:	4770      	bx	lr
 8012e9e:	b510      	push	{r4, lr}
 8012ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ea8:	4291      	cmp	r1, r2
 8012eaa:	d1f9      	bne.n	8012ea0 <memcpy+0xe>
 8012eac:	bd10      	pop	{r4, pc}

08012eae <quorem>:
 8012eae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb2:	6903      	ldr	r3, [r0, #16]
 8012eb4:	690c      	ldr	r4, [r1, #16]
 8012eb6:	42a3      	cmp	r3, r4
 8012eb8:	4607      	mov	r7, r0
 8012eba:	db7e      	blt.n	8012fba <quorem+0x10c>
 8012ebc:	3c01      	subs	r4, #1
 8012ebe:	f101 0814 	add.w	r8, r1, #20
 8012ec2:	00a3      	lsls	r3, r4, #2
 8012ec4:	f100 0514 	add.w	r5, r0, #20
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ece:	9301      	str	r3, [sp, #4]
 8012ed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	429a      	cmp	r2, r3
 8012edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ee4:	d32e      	bcc.n	8012f44 <quorem+0x96>
 8012ee6:	f04f 0a00 	mov.w	sl, #0
 8012eea:	46c4      	mov	ip, r8
 8012eec:	46ae      	mov	lr, r5
 8012eee:	46d3      	mov	fp, sl
 8012ef0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012ef4:	b298      	uxth	r0, r3
 8012ef6:	fb06 a000 	mla	r0, r6, r0, sl
 8012efa:	0c02      	lsrs	r2, r0, #16
 8012efc:	0c1b      	lsrs	r3, r3, #16
 8012efe:	fb06 2303 	mla	r3, r6, r3, r2
 8012f02:	f8de 2000 	ldr.w	r2, [lr]
 8012f06:	b280      	uxth	r0, r0
 8012f08:	b292      	uxth	r2, r2
 8012f0a:	1a12      	subs	r2, r2, r0
 8012f0c:	445a      	add	r2, fp
 8012f0e:	f8de 0000 	ldr.w	r0, [lr]
 8012f12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012f1c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012f20:	b292      	uxth	r2, r2
 8012f22:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012f26:	45e1      	cmp	r9, ip
 8012f28:	f84e 2b04 	str.w	r2, [lr], #4
 8012f2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012f30:	d2de      	bcs.n	8012ef0 <quorem+0x42>
 8012f32:	9b00      	ldr	r3, [sp, #0]
 8012f34:	58eb      	ldr	r3, [r5, r3]
 8012f36:	b92b      	cbnz	r3, 8012f44 <quorem+0x96>
 8012f38:	9b01      	ldr	r3, [sp, #4]
 8012f3a:	3b04      	subs	r3, #4
 8012f3c:	429d      	cmp	r5, r3
 8012f3e:	461a      	mov	r2, r3
 8012f40:	d32f      	bcc.n	8012fa2 <quorem+0xf4>
 8012f42:	613c      	str	r4, [r7, #16]
 8012f44:	4638      	mov	r0, r7
 8012f46:	f001 f855 	bl	8013ff4 <__mcmp>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	db25      	blt.n	8012f9a <quorem+0xec>
 8012f4e:	4629      	mov	r1, r5
 8012f50:	2000      	movs	r0, #0
 8012f52:	f858 2b04 	ldr.w	r2, [r8], #4
 8012f56:	f8d1 c000 	ldr.w	ip, [r1]
 8012f5a:	fa1f fe82 	uxth.w	lr, r2
 8012f5e:	fa1f f38c 	uxth.w	r3, ip
 8012f62:	eba3 030e 	sub.w	r3, r3, lr
 8012f66:	4403      	add	r3, r0
 8012f68:	0c12      	lsrs	r2, r2, #16
 8012f6a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012f6e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f78:	45c1      	cmp	r9, r8
 8012f7a:	f841 3b04 	str.w	r3, [r1], #4
 8012f7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012f82:	d2e6      	bcs.n	8012f52 <quorem+0xa4>
 8012f84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012f88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012f8c:	b922      	cbnz	r2, 8012f98 <quorem+0xea>
 8012f8e:	3b04      	subs	r3, #4
 8012f90:	429d      	cmp	r5, r3
 8012f92:	461a      	mov	r2, r3
 8012f94:	d30b      	bcc.n	8012fae <quorem+0x100>
 8012f96:	613c      	str	r4, [r7, #16]
 8012f98:	3601      	adds	r6, #1
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	b003      	add	sp, #12
 8012f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa2:	6812      	ldr	r2, [r2, #0]
 8012fa4:	3b04      	subs	r3, #4
 8012fa6:	2a00      	cmp	r2, #0
 8012fa8:	d1cb      	bne.n	8012f42 <quorem+0x94>
 8012faa:	3c01      	subs	r4, #1
 8012fac:	e7c6      	b.n	8012f3c <quorem+0x8e>
 8012fae:	6812      	ldr	r2, [r2, #0]
 8012fb0:	3b04      	subs	r3, #4
 8012fb2:	2a00      	cmp	r2, #0
 8012fb4:	d1ef      	bne.n	8012f96 <quorem+0xe8>
 8012fb6:	3c01      	subs	r4, #1
 8012fb8:	e7ea      	b.n	8012f90 <quorem+0xe2>
 8012fba:	2000      	movs	r0, #0
 8012fbc:	e7ee      	b.n	8012f9c <quorem+0xee>
	...

08012fc0 <_dtoa_r>:
 8012fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc4:	ed2d 8b02 	vpush	{d8}
 8012fc8:	69c7      	ldr	r7, [r0, #28]
 8012fca:	b091      	sub	sp, #68	@ 0x44
 8012fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012fd0:	ec55 4b10 	vmov	r4, r5, d0
 8012fd4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012fd6:	9107      	str	r1, [sp, #28]
 8012fd8:	4681      	mov	r9, r0
 8012fda:	9209      	str	r2, [sp, #36]	@ 0x24
 8012fdc:	930d      	str	r3, [sp, #52]	@ 0x34
 8012fde:	b97f      	cbnz	r7, 8013000 <_dtoa_r+0x40>
 8012fe0:	2010      	movs	r0, #16
 8012fe2:	f7ff f8b3 	bl	801214c <malloc>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	f8c9 001c 	str.w	r0, [r9, #28]
 8012fec:	b920      	cbnz	r0, 8012ff8 <_dtoa_r+0x38>
 8012fee:	4ba0      	ldr	r3, [pc, #640]	@ (8013270 <_dtoa_r+0x2b0>)
 8012ff0:	21ef      	movs	r1, #239	@ 0xef
 8012ff2:	48a0      	ldr	r0, [pc, #640]	@ (8013274 <_dtoa_r+0x2b4>)
 8012ff4:	f001 fb24 	bl	8014640 <__assert_func>
 8012ff8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012ffc:	6007      	str	r7, [r0, #0]
 8012ffe:	60c7      	str	r7, [r0, #12]
 8013000:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013004:	6819      	ldr	r1, [r3, #0]
 8013006:	b159      	cbz	r1, 8013020 <_dtoa_r+0x60>
 8013008:	685a      	ldr	r2, [r3, #4]
 801300a:	604a      	str	r2, [r1, #4]
 801300c:	2301      	movs	r3, #1
 801300e:	4093      	lsls	r3, r2
 8013010:	608b      	str	r3, [r1, #8]
 8013012:	4648      	mov	r0, r9
 8013014:	f000 fdb4 	bl	8013b80 <_Bfree>
 8013018:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801301c:	2200      	movs	r2, #0
 801301e:	601a      	str	r2, [r3, #0]
 8013020:	1e2b      	subs	r3, r5, #0
 8013022:	bfbb      	ittet	lt
 8013024:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013028:	9303      	strlt	r3, [sp, #12]
 801302a:	2300      	movge	r3, #0
 801302c:	2201      	movlt	r2, #1
 801302e:	bfac      	ite	ge
 8013030:	6033      	strge	r3, [r6, #0]
 8013032:	6032      	strlt	r2, [r6, #0]
 8013034:	4b90      	ldr	r3, [pc, #576]	@ (8013278 <_dtoa_r+0x2b8>)
 8013036:	9e03      	ldr	r6, [sp, #12]
 8013038:	43b3      	bics	r3, r6
 801303a:	d110      	bne.n	801305e <_dtoa_r+0x9e>
 801303c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801303e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013042:	6013      	str	r3, [r2, #0]
 8013044:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013048:	4323      	orrs	r3, r4
 801304a:	f000 84de 	beq.w	8013a0a <_dtoa_r+0xa4a>
 801304e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013050:	4f8a      	ldr	r7, [pc, #552]	@ (801327c <_dtoa_r+0x2bc>)
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 84e0 	beq.w	8013a18 <_dtoa_r+0xa58>
 8013058:	1cfb      	adds	r3, r7, #3
 801305a:	f000 bcdb 	b.w	8013a14 <_dtoa_r+0xa54>
 801305e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013062:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306a:	d10a      	bne.n	8013082 <_dtoa_r+0xc2>
 801306c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801306e:	2301      	movs	r3, #1
 8013070:	6013      	str	r3, [r2, #0]
 8013072:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013074:	b113      	cbz	r3, 801307c <_dtoa_r+0xbc>
 8013076:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013078:	4b81      	ldr	r3, [pc, #516]	@ (8013280 <_dtoa_r+0x2c0>)
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	4f81      	ldr	r7, [pc, #516]	@ (8013284 <_dtoa_r+0x2c4>)
 801307e:	f000 bccb 	b.w	8013a18 <_dtoa_r+0xa58>
 8013082:	aa0e      	add	r2, sp, #56	@ 0x38
 8013084:	a90f      	add	r1, sp, #60	@ 0x3c
 8013086:	4648      	mov	r0, r9
 8013088:	eeb0 0b48 	vmov.f64	d0, d8
 801308c:	f001 f862 	bl	8014154 <__d2b>
 8013090:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013096:	9001      	str	r0, [sp, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d045      	beq.n	8013128 <_dtoa_r+0x168>
 801309c:	eeb0 7b48 	vmov.f64	d7, d8
 80130a0:	ee18 1a90 	vmov	r1, s17
 80130a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80130a8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80130ac:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80130b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80130b4:	2500      	movs	r5, #0
 80130b6:	ee07 1a90 	vmov	s15, r1
 80130ba:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80130be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013258 <_dtoa_r+0x298>
 80130c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80130c6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013260 <_dtoa_r+0x2a0>
 80130ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80130ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013268 <_dtoa_r+0x2a8>
 80130d2:	ee07 3a90 	vmov	s15, r3
 80130d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80130da:	eeb0 7b46 	vmov.f64	d7, d6
 80130de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80130e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80130e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	ee16 8a90 	vmov	r8, s13
 80130f2:	d508      	bpl.n	8013106 <_dtoa_r+0x146>
 80130f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80130f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80130fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013100:	bf18      	it	ne
 8013102:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013106:	f1b8 0f16 	cmp.w	r8, #22
 801310a:	d82b      	bhi.n	8013164 <_dtoa_r+0x1a4>
 801310c:	495e      	ldr	r1, [pc, #376]	@ (8013288 <_dtoa_r+0x2c8>)
 801310e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013112:	ed91 7b00 	vldr	d7, [r1]
 8013116:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311e:	d501      	bpl.n	8013124 <_dtoa_r+0x164>
 8013120:	f108 38ff 	add.w	r8, r8, #4294967295
 8013124:	2100      	movs	r1, #0
 8013126:	e01e      	b.n	8013166 <_dtoa_r+0x1a6>
 8013128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801312a:	4413      	add	r3, r2
 801312c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013130:	2920      	cmp	r1, #32
 8013132:	bfc1      	itttt	gt
 8013134:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013138:	408e      	lslgt	r6, r1
 801313a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801313e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013142:	bfd6      	itet	le
 8013144:	f1c1 0120 	rsble	r1, r1, #32
 8013148:	4331      	orrgt	r1, r6
 801314a:	fa04 f101 	lslle.w	r1, r4, r1
 801314e:	ee07 1a90 	vmov	s15, r1
 8013152:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013156:	3b01      	subs	r3, #1
 8013158:	ee17 1a90 	vmov	r1, s15
 801315c:	2501      	movs	r5, #1
 801315e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013162:	e7a8      	b.n	80130b6 <_dtoa_r+0xf6>
 8013164:	2101      	movs	r1, #1
 8013166:	1ad2      	subs	r2, r2, r3
 8013168:	1e53      	subs	r3, r2, #1
 801316a:	9306      	str	r3, [sp, #24]
 801316c:	bf45      	ittet	mi
 801316e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013172:	9305      	strmi	r3, [sp, #20]
 8013174:	2300      	movpl	r3, #0
 8013176:	2300      	movmi	r3, #0
 8013178:	bf4c      	ite	mi
 801317a:	9306      	strmi	r3, [sp, #24]
 801317c:	9305      	strpl	r3, [sp, #20]
 801317e:	f1b8 0f00 	cmp.w	r8, #0
 8013182:	910c      	str	r1, [sp, #48]	@ 0x30
 8013184:	db18      	blt.n	80131b8 <_dtoa_r+0x1f8>
 8013186:	9b06      	ldr	r3, [sp, #24]
 8013188:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801318c:	4443      	add	r3, r8
 801318e:	9306      	str	r3, [sp, #24]
 8013190:	2300      	movs	r3, #0
 8013192:	9a07      	ldr	r2, [sp, #28]
 8013194:	2a09      	cmp	r2, #9
 8013196:	d849      	bhi.n	801322c <_dtoa_r+0x26c>
 8013198:	2a05      	cmp	r2, #5
 801319a:	bfc4      	itt	gt
 801319c:	3a04      	subgt	r2, #4
 801319e:	9207      	strgt	r2, [sp, #28]
 80131a0:	9a07      	ldr	r2, [sp, #28]
 80131a2:	f1a2 0202 	sub.w	r2, r2, #2
 80131a6:	bfcc      	ite	gt
 80131a8:	2400      	movgt	r4, #0
 80131aa:	2401      	movle	r4, #1
 80131ac:	2a03      	cmp	r2, #3
 80131ae:	d848      	bhi.n	8013242 <_dtoa_r+0x282>
 80131b0:	e8df f002 	tbb	[pc, r2]
 80131b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80131b8:	9b05      	ldr	r3, [sp, #20]
 80131ba:	2200      	movs	r2, #0
 80131bc:	eba3 0308 	sub.w	r3, r3, r8
 80131c0:	9305      	str	r3, [sp, #20]
 80131c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80131c4:	f1c8 0300 	rsb	r3, r8, #0
 80131c8:	e7e3      	b.n	8013192 <_dtoa_r+0x1d2>
 80131ca:	2200      	movs	r2, #0
 80131cc:	9208      	str	r2, [sp, #32]
 80131ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131d0:	2a00      	cmp	r2, #0
 80131d2:	dc39      	bgt.n	8013248 <_dtoa_r+0x288>
 80131d4:	f04f 0b01 	mov.w	fp, #1
 80131d8:	46da      	mov	sl, fp
 80131da:	465a      	mov	r2, fp
 80131dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80131e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80131e4:	2100      	movs	r1, #0
 80131e6:	2004      	movs	r0, #4
 80131e8:	f100 0614 	add.w	r6, r0, #20
 80131ec:	4296      	cmp	r6, r2
 80131ee:	d930      	bls.n	8013252 <_dtoa_r+0x292>
 80131f0:	6079      	str	r1, [r7, #4]
 80131f2:	4648      	mov	r0, r9
 80131f4:	9304      	str	r3, [sp, #16]
 80131f6:	f000 fc83 	bl	8013b00 <_Balloc>
 80131fa:	9b04      	ldr	r3, [sp, #16]
 80131fc:	4607      	mov	r7, r0
 80131fe:	2800      	cmp	r0, #0
 8013200:	d146      	bne.n	8013290 <_dtoa_r+0x2d0>
 8013202:	4b22      	ldr	r3, [pc, #136]	@ (801328c <_dtoa_r+0x2cc>)
 8013204:	4602      	mov	r2, r0
 8013206:	f240 11af 	movw	r1, #431	@ 0x1af
 801320a:	e6f2      	b.n	8012ff2 <_dtoa_r+0x32>
 801320c:	2201      	movs	r2, #1
 801320e:	e7dd      	b.n	80131cc <_dtoa_r+0x20c>
 8013210:	2200      	movs	r2, #0
 8013212:	9208      	str	r2, [sp, #32]
 8013214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013216:	eb08 0b02 	add.w	fp, r8, r2
 801321a:	f10b 0a01 	add.w	sl, fp, #1
 801321e:	4652      	mov	r2, sl
 8013220:	2a01      	cmp	r2, #1
 8013222:	bfb8      	it	lt
 8013224:	2201      	movlt	r2, #1
 8013226:	e7db      	b.n	80131e0 <_dtoa_r+0x220>
 8013228:	2201      	movs	r2, #1
 801322a:	e7f2      	b.n	8013212 <_dtoa_r+0x252>
 801322c:	2401      	movs	r4, #1
 801322e:	2200      	movs	r2, #0
 8013230:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013234:	f04f 3bff 	mov.w	fp, #4294967295
 8013238:	2100      	movs	r1, #0
 801323a:	46da      	mov	sl, fp
 801323c:	2212      	movs	r2, #18
 801323e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013240:	e7ce      	b.n	80131e0 <_dtoa_r+0x220>
 8013242:	2201      	movs	r2, #1
 8013244:	9208      	str	r2, [sp, #32]
 8013246:	e7f5      	b.n	8013234 <_dtoa_r+0x274>
 8013248:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801324c:	46da      	mov	sl, fp
 801324e:	465a      	mov	r2, fp
 8013250:	e7c6      	b.n	80131e0 <_dtoa_r+0x220>
 8013252:	3101      	adds	r1, #1
 8013254:	0040      	lsls	r0, r0, #1
 8013256:	e7c7      	b.n	80131e8 <_dtoa_r+0x228>
 8013258:	636f4361 	.word	0x636f4361
 801325c:	3fd287a7 	.word	0x3fd287a7
 8013260:	8b60c8b3 	.word	0x8b60c8b3
 8013264:	3fc68a28 	.word	0x3fc68a28
 8013268:	509f79fb 	.word	0x509f79fb
 801326c:	3fd34413 	.word	0x3fd34413
 8013270:	08017521 	.word	0x08017521
 8013274:	08017538 	.word	0x08017538
 8013278:	7ff00000 	.word	0x7ff00000
 801327c:	0801751d 	.word	0x0801751d
 8013280:	080174f1 	.word	0x080174f1
 8013284:	080174f0 	.word	0x080174f0
 8013288:	08017630 	.word	0x08017630
 801328c:	08017590 	.word	0x08017590
 8013290:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013294:	f1ba 0f0e 	cmp.w	sl, #14
 8013298:	6010      	str	r0, [r2, #0]
 801329a:	d86f      	bhi.n	801337c <_dtoa_r+0x3bc>
 801329c:	2c00      	cmp	r4, #0
 801329e:	d06d      	beq.n	801337c <_dtoa_r+0x3bc>
 80132a0:	f1b8 0f00 	cmp.w	r8, #0
 80132a4:	f340 80c2 	ble.w	801342c <_dtoa_r+0x46c>
 80132a8:	4aca      	ldr	r2, [pc, #808]	@ (80135d4 <_dtoa_r+0x614>)
 80132aa:	f008 010f 	and.w	r1, r8, #15
 80132ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80132b2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80132b6:	ed92 7b00 	vldr	d7, [r2]
 80132ba:	ea4f 1128 	mov.w	r1, r8, asr #4
 80132be:	f000 80a9 	beq.w	8013414 <_dtoa_r+0x454>
 80132c2:	4ac5      	ldr	r2, [pc, #788]	@ (80135d8 <_dtoa_r+0x618>)
 80132c4:	ed92 6b08 	vldr	d6, [r2, #32]
 80132c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80132cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80132d0:	f001 010f 	and.w	r1, r1, #15
 80132d4:	2203      	movs	r2, #3
 80132d6:	48c0      	ldr	r0, [pc, #768]	@ (80135d8 <_dtoa_r+0x618>)
 80132d8:	2900      	cmp	r1, #0
 80132da:	f040 809d 	bne.w	8013418 <_dtoa_r+0x458>
 80132de:	ed9d 6b02 	vldr	d6, [sp, #8]
 80132e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80132e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80132ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80132f0:	2900      	cmp	r1, #0
 80132f2:	f000 80c1 	beq.w	8013478 <_dtoa_r+0x4b8>
 80132f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80132fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80132fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013302:	f140 80b9 	bpl.w	8013478 <_dtoa_r+0x4b8>
 8013306:	f1ba 0f00 	cmp.w	sl, #0
 801330a:	f000 80b5 	beq.w	8013478 <_dtoa_r+0x4b8>
 801330e:	f1bb 0f00 	cmp.w	fp, #0
 8013312:	dd31      	ble.n	8013378 <_dtoa_r+0x3b8>
 8013314:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013318:	ee27 7b06 	vmul.f64	d7, d7, d6
 801331c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013320:	f108 31ff 	add.w	r1, r8, #4294967295
 8013324:	9104      	str	r1, [sp, #16]
 8013326:	3201      	adds	r2, #1
 8013328:	465c      	mov	r4, fp
 801332a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801332e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013332:	ee07 2a90 	vmov	s15, r2
 8013336:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801333a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801333e:	ee15 2a90 	vmov	r2, s11
 8013342:	ec51 0b15 	vmov	r0, r1, d5
 8013346:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801334a:	2c00      	cmp	r4, #0
 801334c:	f040 8098 	bne.w	8013480 <_dtoa_r+0x4c0>
 8013350:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013354:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013358:	ec41 0b17 	vmov	d7, r0, r1
 801335c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013364:	f300 8261 	bgt.w	801382a <_dtoa_r+0x86a>
 8013368:	eeb1 7b47 	vneg.f64	d7, d7
 801336c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013374:	f100 80f5 	bmi.w	8013562 <_dtoa_r+0x5a2>
 8013378:	ed8d 8b02 	vstr	d8, [sp, #8]
 801337c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801337e:	2a00      	cmp	r2, #0
 8013380:	f2c0 812c 	blt.w	80135dc <_dtoa_r+0x61c>
 8013384:	f1b8 0f0e 	cmp.w	r8, #14
 8013388:	f300 8128 	bgt.w	80135dc <_dtoa_r+0x61c>
 801338c:	4b91      	ldr	r3, [pc, #580]	@ (80135d4 <_dtoa_r+0x614>)
 801338e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013392:	ed93 6b00 	vldr	d6, [r3]
 8013396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013398:	2b00      	cmp	r3, #0
 801339a:	da03      	bge.n	80133a4 <_dtoa_r+0x3e4>
 801339c:	f1ba 0f00 	cmp.w	sl, #0
 80133a0:	f340 80d2 	ble.w	8013548 <_dtoa_r+0x588>
 80133a4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80133a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133ac:	463e      	mov	r6, r7
 80133ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80133b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80133b6:	ee15 3a10 	vmov	r3, s10
 80133ba:	3330      	adds	r3, #48	@ 0x30
 80133bc:	f806 3b01 	strb.w	r3, [r6], #1
 80133c0:	1bf3      	subs	r3, r6, r7
 80133c2:	459a      	cmp	sl, r3
 80133c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80133c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80133cc:	f040 80f8 	bne.w	80135c0 <_dtoa_r+0x600>
 80133d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80133d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80133d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133dc:	f300 80dd 	bgt.w	801359a <_dtoa_r+0x5da>
 80133e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80133e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e8:	d104      	bne.n	80133f4 <_dtoa_r+0x434>
 80133ea:	ee15 3a10 	vmov	r3, s10
 80133ee:	07db      	lsls	r3, r3, #31
 80133f0:	f100 80d3 	bmi.w	801359a <_dtoa_r+0x5da>
 80133f4:	9901      	ldr	r1, [sp, #4]
 80133f6:	4648      	mov	r0, r9
 80133f8:	f000 fbc2 	bl	8013b80 <_Bfree>
 80133fc:	2300      	movs	r3, #0
 80133fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013400:	7033      	strb	r3, [r6, #0]
 8013402:	f108 0301 	add.w	r3, r8, #1
 8013406:	6013      	str	r3, [r2, #0]
 8013408:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801340a:	2b00      	cmp	r3, #0
 801340c:	f000 8304 	beq.w	8013a18 <_dtoa_r+0xa58>
 8013410:	601e      	str	r6, [r3, #0]
 8013412:	e301      	b.n	8013a18 <_dtoa_r+0xa58>
 8013414:	2202      	movs	r2, #2
 8013416:	e75e      	b.n	80132d6 <_dtoa_r+0x316>
 8013418:	07cc      	lsls	r4, r1, #31
 801341a:	d504      	bpl.n	8013426 <_dtoa_r+0x466>
 801341c:	ed90 6b00 	vldr	d6, [r0]
 8013420:	3201      	adds	r2, #1
 8013422:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013426:	1049      	asrs	r1, r1, #1
 8013428:	3008      	adds	r0, #8
 801342a:	e755      	b.n	80132d8 <_dtoa_r+0x318>
 801342c:	d022      	beq.n	8013474 <_dtoa_r+0x4b4>
 801342e:	f1c8 0100 	rsb	r1, r8, #0
 8013432:	4a68      	ldr	r2, [pc, #416]	@ (80135d4 <_dtoa_r+0x614>)
 8013434:	f001 000f 	and.w	r0, r1, #15
 8013438:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801343c:	ed92 7b00 	vldr	d7, [r2]
 8013440:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013448:	4863      	ldr	r0, [pc, #396]	@ (80135d8 <_dtoa_r+0x618>)
 801344a:	1109      	asrs	r1, r1, #4
 801344c:	2400      	movs	r4, #0
 801344e:	2202      	movs	r2, #2
 8013450:	b929      	cbnz	r1, 801345e <_dtoa_r+0x49e>
 8013452:	2c00      	cmp	r4, #0
 8013454:	f43f af49 	beq.w	80132ea <_dtoa_r+0x32a>
 8013458:	ed8d 7b02 	vstr	d7, [sp, #8]
 801345c:	e745      	b.n	80132ea <_dtoa_r+0x32a>
 801345e:	07ce      	lsls	r6, r1, #31
 8013460:	d505      	bpl.n	801346e <_dtoa_r+0x4ae>
 8013462:	ed90 6b00 	vldr	d6, [r0]
 8013466:	3201      	adds	r2, #1
 8013468:	2401      	movs	r4, #1
 801346a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801346e:	1049      	asrs	r1, r1, #1
 8013470:	3008      	adds	r0, #8
 8013472:	e7ed      	b.n	8013450 <_dtoa_r+0x490>
 8013474:	2202      	movs	r2, #2
 8013476:	e738      	b.n	80132ea <_dtoa_r+0x32a>
 8013478:	f8cd 8010 	str.w	r8, [sp, #16]
 801347c:	4654      	mov	r4, sl
 801347e:	e754      	b.n	801332a <_dtoa_r+0x36a>
 8013480:	4a54      	ldr	r2, [pc, #336]	@ (80135d4 <_dtoa_r+0x614>)
 8013482:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013486:	ed12 4b02 	vldr	d4, [r2, #-8]
 801348a:	9a08      	ldr	r2, [sp, #32]
 801348c:	ec41 0b17 	vmov	d7, r0, r1
 8013490:	443c      	add	r4, r7
 8013492:	b34a      	cbz	r2, 80134e8 <_dtoa_r+0x528>
 8013494:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013498:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801349c:	463e      	mov	r6, r7
 801349e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80134a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80134a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80134aa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80134ae:	ee14 2a90 	vmov	r2, s9
 80134b2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80134b6:	3230      	adds	r2, #48	@ 0x30
 80134b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80134bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c4:	f806 2b01 	strb.w	r2, [r6], #1
 80134c8:	d438      	bmi.n	801353c <_dtoa_r+0x57c>
 80134ca:	ee32 5b46 	vsub.f64	d5, d2, d6
 80134ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80134d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d6:	d462      	bmi.n	801359e <_dtoa_r+0x5de>
 80134d8:	42a6      	cmp	r6, r4
 80134da:	f43f af4d 	beq.w	8013378 <_dtoa_r+0x3b8>
 80134de:	ee27 7b03 	vmul.f64	d7, d7, d3
 80134e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80134e6:	e7e0      	b.n	80134aa <_dtoa_r+0x4ea>
 80134e8:	4621      	mov	r1, r4
 80134ea:	463e      	mov	r6, r7
 80134ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 80134f0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80134f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80134f8:	ee14 2a90 	vmov	r2, s9
 80134fc:	3230      	adds	r2, #48	@ 0x30
 80134fe:	f806 2b01 	strb.w	r2, [r6], #1
 8013502:	42a6      	cmp	r6, r4
 8013504:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013508:	ee36 6b45 	vsub.f64	d6, d6, d5
 801350c:	d119      	bne.n	8013542 <_dtoa_r+0x582>
 801350e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013512:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013516:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351e:	dc3e      	bgt.n	801359e <_dtoa_r+0x5de>
 8013520:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013524:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352c:	f57f af24 	bpl.w	8013378 <_dtoa_r+0x3b8>
 8013530:	460e      	mov	r6, r1
 8013532:	3901      	subs	r1, #1
 8013534:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013538:	2b30      	cmp	r3, #48	@ 0x30
 801353a:	d0f9      	beq.n	8013530 <_dtoa_r+0x570>
 801353c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013540:	e758      	b.n	80133f4 <_dtoa_r+0x434>
 8013542:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013546:	e7d5      	b.n	80134f4 <_dtoa_r+0x534>
 8013548:	d10b      	bne.n	8013562 <_dtoa_r+0x5a2>
 801354a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801354e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013552:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355e:	f2c0 8161 	blt.w	8013824 <_dtoa_r+0x864>
 8013562:	2400      	movs	r4, #0
 8013564:	4625      	mov	r5, r4
 8013566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013568:	43db      	mvns	r3, r3
 801356a:	9304      	str	r3, [sp, #16]
 801356c:	463e      	mov	r6, r7
 801356e:	f04f 0800 	mov.w	r8, #0
 8013572:	4621      	mov	r1, r4
 8013574:	4648      	mov	r0, r9
 8013576:	f000 fb03 	bl	8013b80 <_Bfree>
 801357a:	2d00      	cmp	r5, #0
 801357c:	d0de      	beq.n	801353c <_dtoa_r+0x57c>
 801357e:	f1b8 0f00 	cmp.w	r8, #0
 8013582:	d005      	beq.n	8013590 <_dtoa_r+0x5d0>
 8013584:	45a8      	cmp	r8, r5
 8013586:	d003      	beq.n	8013590 <_dtoa_r+0x5d0>
 8013588:	4641      	mov	r1, r8
 801358a:	4648      	mov	r0, r9
 801358c:	f000 faf8 	bl	8013b80 <_Bfree>
 8013590:	4629      	mov	r1, r5
 8013592:	4648      	mov	r0, r9
 8013594:	f000 faf4 	bl	8013b80 <_Bfree>
 8013598:	e7d0      	b.n	801353c <_dtoa_r+0x57c>
 801359a:	f8cd 8010 	str.w	r8, [sp, #16]
 801359e:	4633      	mov	r3, r6
 80135a0:	461e      	mov	r6, r3
 80135a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135a6:	2a39      	cmp	r2, #57	@ 0x39
 80135a8:	d106      	bne.n	80135b8 <_dtoa_r+0x5f8>
 80135aa:	429f      	cmp	r7, r3
 80135ac:	d1f8      	bne.n	80135a0 <_dtoa_r+0x5e0>
 80135ae:	9a04      	ldr	r2, [sp, #16]
 80135b0:	3201      	adds	r2, #1
 80135b2:	9204      	str	r2, [sp, #16]
 80135b4:	2230      	movs	r2, #48	@ 0x30
 80135b6:	703a      	strb	r2, [r7, #0]
 80135b8:	781a      	ldrb	r2, [r3, #0]
 80135ba:	3201      	adds	r2, #1
 80135bc:	701a      	strb	r2, [r3, #0]
 80135be:	e7bd      	b.n	801353c <_dtoa_r+0x57c>
 80135c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80135c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80135c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135cc:	f47f aeef 	bne.w	80133ae <_dtoa_r+0x3ee>
 80135d0:	e710      	b.n	80133f4 <_dtoa_r+0x434>
 80135d2:	bf00      	nop
 80135d4:	08017630 	.word	0x08017630
 80135d8:	08017608 	.word	0x08017608
 80135dc:	9908      	ldr	r1, [sp, #32]
 80135de:	2900      	cmp	r1, #0
 80135e0:	f000 80e3 	beq.w	80137aa <_dtoa_r+0x7ea>
 80135e4:	9907      	ldr	r1, [sp, #28]
 80135e6:	2901      	cmp	r1, #1
 80135e8:	f300 80c8 	bgt.w	801377c <_dtoa_r+0x7bc>
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	f000 80c1 	beq.w	8013774 <_dtoa_r+0x7b4>
 80135f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80135f6:	9e05      	ldr	r6, [sp, #20]
 80135f8:	461c      	mov	r4, r3
 80135fa:	9304      	str	r3, [sp, #16]
 80135fc:	9b05      	ldr	r3, [sp, #20]
 80135fe:	4413      	add	r3, r2
 8013600:	9305      	str	r3, [sp, #20]
 8013602:	9b06      	ldr	r3, [sp, #24]
 8013604:	2101      	movs	r1, #1
 8013606:	4413      	add	r3, r2
 8013608:	4648      	mov	r0, r9
 801360a:	9306      	str	r3, [sp, #24]
 801360c:	f000 fb6c 	bl	8013ce8 <__i2b>
 8013610:	9b04      	ldr	r3, [sp, #16]
 8013612:	4605      	mov	r5, r0
 8013614:	b166      	cbz	r6, 8013630 <_dtoa_r+0x670>
 8013616:	9a06      	ldr	r2, [sp, #24]
 8013618:	2a00      	cmp	r2, #0
 801361a:	dd09      	ble.n	8013630 <_dtoa_r+0x670>
 801361c:	42b2      	cmp	r2, r6
 801361e:	9905      	ldr	r1, [sp, #20]
 8013620:	bfa8      	it	ge
 8013622:	4632      	movge	r2, r6
 8013624:	1a89      	subs	r1, r1, r2
 8013626:	9105      	str	r1, [sp, #20]
 8013628:	9906      	ldr	r1, [sp, #24]
 801362a:	1ab6      	subs	r6, r6, r2
 801362c:	1a8a      	subs	r2, r1, r2
 801362e:	9206      	str	r2, [sp, #24]
 8013630:	b1fb      	cbz	r3, 8013672 <_dtoa_r+0x6b2>
 8013632:	9a08      	ldr	r2, [sp, #32]
 8013634:	2a00      	cmp	r2, #0
 8013636:	f000 80bc 	beq.w	80137b2 <_dtoa_r+0x7f2>
 801363a:	b19c      	cbz	r4, 8013664 <_dtoa_r+0x6a4>
 801363c:	4629      	mov	r1, r5
 801363e:	4622      	mov	r2, r4
 8013640:	4648      	mov	r0, r9
 8013642:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013644:	f000 fc10 	bl	8013e68 <__pow5mult>
 8013648:	9a01      	ldr	r2, [sp, #4]
 801364a:	4601      	mov	r1, r0
 801364c:	4605      	mov	r5, r0
 801364e:	4648      	mov	r0, r9
 8013650:	f000 fb60 	bl	8013d14 <__multiply>
 8013654:	9901      	ldr	r1, [sp, #4]
 8013656:	9004      	str	r0, [sp, #16]
 8013658:	4648      	mov	r0, r9
 801365a:	f000 fa91 	bl	8013b80 <_Bfree>
 801365e:	9a04      	ldr	r2, [sp, #16]
 8013660:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013662:	9201      	str	r2, [sp, #4]
 8013664:	1b1a      	subs	r2, r3, r4
 8013666:	d004      	beq.n	8013672 <_dtoa_r+0x6b2>
 8013668:	9901      	ldr	r1, [sp, #4]
 801366a:	4648      	mov	r0, r9
 801366c:	f000 fbfc 	bl	8013e68 <__pow5mult>
 8013670:	9001      	str	r0, [sp, #4]
 8013672:	2101      	movs	r1, #1
 8013674:	4648      	mov	r0, r9
 8013676:	f000 fb37 	bl	8013ce8 <__i2b>
 801367a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801367c:	4604      	mov	r4, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	f000 81d0 	beq.w	8013a24 <_dtoa_r+0xa64>
 8013684:	461a      	mov	r2, r3
 8013686:	4601      	mov	r1, r0
 8013688:	4648      	mov	r0, r9
 801368a:	f000 fbed 	bl	8013e68 <__pow5mult>
 801368e:	9b07      	ldr	r3, [sp, #28]
 8013690:	2b01      	cmp	r3, #1
 8013692:	4604      	mov	r4, r0
 8013694:	f300 8095 	bgt.w	80137c2 <_dtoa_r+0x802>
 8013698:	9b02      	ldr	r3, [sp, #8]
 801369a:	2b00      	cmp	r3, #0
 801369c:	f040 808b 	bne.w	80137b6 <_dtoa_r+0x7f6>
 80136a0:	9b03      	ldr	r3, [sp, #12]
 80136a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80136a6:	2a00      	cmp	r2, #0
 80136a8:	f040 8087 	bne.w	80137ba <_dtoa_r+0x7fa>
 80136ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80136b0:	0d12      	lsrs	r2, r2, #20
 80136b2:	0512      	lsls	r2, r2, #20
 80136b4:	2a00      	cmp	r2, #0
 80136b6:	f000 8082 	beq.w	80137be <_dtoa_r+0x7fe>
 80136ba:	9b05      	ldr	r3, [sp, #20]
 80136bc:	3301      	adds	r3, #1
 80136be:	9305      	str	r3, [sp, #20]
 80136c0:	9b06      	ldr	r3, [sp, #24]
 80136c2:	3301      	adds	r3, #1
 80136c4:	9306      	str	r3, [sp, #24]
 80136c6:	2301      	movs	r3, #1
 80136c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 81af 	beq.w	8013a30 <_dtoa_r+0xa70>
 80136d2:	6922      	ldr	r2, [r4, #16]
 80136d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80136d8:	6910      	ldr	r0, [r2, #16]
 80136da:	f000 fab9 	bl	8013c50 <__hi0bits>
 80136de:	f1c0 0020 	rsb	r0, r0, #32
 80136e2:	9b06      	ldr	r3, [sp, #24]
 80136e4:	4418      	add	r0, r3
 80136e6:	f010 001f 	ands.w	r0, r0, #31
 80136ea:	d076      	beq.n	80137da <_dtoa_r+0x81a>
 80136ec:	f1c0 0220 	rsb	r2, r0, #32
 80136f0:	2a04      	cmp	r2, #4
 80136f2:	dd69      	ble.n	80137c8 <_dtoa_r+0x808>
 80136f4:	9b05      	ldr	r3, [sp, #20]
 80136f6:	f1c0 001c 	rsb	r0, r0, #28
 80136fa:	4403      	add	r3, r0
 80136fc:	9305      	str	r3, [sp, #20]
 80136fe:	9b06      	ldr	r3, [sp, #24]
 8013700:	4406      	add	r6, r0
 8013702:	4403      	add	r3, r0
 8013704:	9306      	str	r3, [sp, #24]
 8013706:	9b05      	ldr	r3, [sp, #20]
 8013708:	2b00      	cmp	r3, #0
 801370a:	dd05      	ble.n	8013718 <_dtoa_r+0x758>
 801370c:	9901      	ldr	r1, [sp, #4]
 801370e:	461a      	mov	r2, r3
 8013710:	4648      	mov	r0, r9
 8013712:	f000 fc03 	bl	8013f1c <__lshift>
 8013716:	9001      	str	r0, [sp, #4]
 8013718:	9b06      	ldr	r3, [sp, #24]
 801371a:	2b00      	cmp	r3, #0
 801371c:	dd05      	ble.n	801372a <_dtoa_r+0x76a>
 801371e:	4621      	mov	r1, r4
 8013720:	461a      	mov	r2, r3
 8013722:	4648      	mov	r0, r9
 8013724:	f000 fbfa 	bl	8013f1c <__lshift>
 8013728:	4604      	mov	r4, r0
 801372a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801372c:	2b00      	cmp	r3, #0
 801372e:	d056      	beq.n	80137de <_dtoa_r+0x81e>
 8013730:	9801      	ldr	r0, [sp, #4]
 8013732:	4621      	mov	r1, r4
 8013734:	f000 fc5e 	bl	8013ff4 <__mcmp>
 8013738:	2800      	cmp	r0, #0
 801373a:	da50      	bge.n	80137de <_dtoa_r+0x81e>
 801373c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013740:	9304      	str	r3, [sp, #16]
 8013742:	9901      	ldr	r1, [sp, #4]
 8013744:	2300      	movs	r3, #0
 8013746:	220a      	movs	r2, #10
 8013748:	4648      	mov	r0, r9
 801374a:	f000 fa3b 	bl	8013bc4 <__multadd>
 801374e:	9b08      	ldr	r3, [sp, #32]
 8013750:	9001      	str	r0, [sp, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	f000 816e 	beq.w	8013a34 <_dtoa_r+0xa74>
 8013758:	4629      	mov	r1, r5
 801375a:	2300      	movs	r3, #0
 801375c:	220a      	movs	r2, #10
 801375e:	4648      	mov	r0, r9
 8013760:	f000 fa30 	bl	8013bc4 <__multadd>
 8013764:	f1bb 0f00 	cmp.w	fp, #0
 8013768:	4605      	mov	r5, r0
 801376a:	dc64      	bgt.n	8013836 <_dtoa_r+0x876>
 801376c:	9b07      	ldr	r3, [sp, #28]
 801376e:	2b02      	cmp	r3, #2
 8013770:	dc3e      	bgt.n	80137f0 <_dtoa_r+0x830>
 8013772:	e060      	b.n	8013836 <_dtoa_r+0x876>
 8013774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013776:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801377a:	e73c      	b.n	80135f6 <_dtoa_r+0x636>
 801377c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013780:	42a3      	cmp	r3, r4
 8013782:	bfbf      	itttt	lt
 8013784:	1ae2      	sublt	r2, r4, r3
 8013786:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013788:	189b      	addlt	r3, r3, r2
 801378a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801378c:	bfae      	itee	ge
 801378e:	1b1c      	subge	r4, r3, r4
 8013790:	4623      	movlt	r3, r4
 8013792:	2400      	movlt	r4, #0
 8013794:	f1ba 0f00 	cmp.w	sl, #0
 8013798:	bfb5      	itete	lt
 801379a:	9a05      	ldrlt	r2, [sp, #20]
 801379c:	9e05      	ldrge	r6, [sp, #20]
 801379e:	eba2 060a 	sublt.w	r6, r2, sl
 80137a2:	4652      	movge	r2, sl
 80137a4:	bfb8      	it	lt
 80137a6:	2200      	movlt	r2, #0
 80137a8:	e727      	b.n	80135fa <_dtoa_r+0x63a>
 80137aa:	9e05      	ldr	r6, [sp, #20]
 80137ac:	9d08      	ldr	r5, [sp, #32]
 80137ae:	461c      	mov	r4, r3
 80137b0:	e730      	b.n	8013614 <_dtoa_r+0x654>
 80137b2:	461a      	mov	r2, r3
 80137b4:	e758      	b.n	8013668 <_dtoa_r+0x6a8>
 80137b6:	2300      	movs	r3, #0
 80137b8:	e786      	b.n	80136c8 <_dtoa_r+0x708>
 80137ba:	9b02      	ldr	r3, [sp, #8]
 80137bc:	e784      	b.n	80136c8 <_dtoa_r+0x708>
 80137be:	920b      	str	r2, [sp, #44]	@ 0x2c
 80137c0:	e783      	b.n	80136ca <_dtoa_r+0x70a>
 80137c2:	2300      	movs	r3, #0
 80137c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137c6:	e784      	b.n	80136d2 <_dtoa_r+0x712>
 80137c8:	d09d      	beq.n	8013706 <_dtoa_r+0x746>
 80137ca:	9b05      	ldr	r3, [sp, #20]
 80137cc:	321c      	adds	r2, #28
 80137ce:	4413      	add	r3, r2
 80137d0:	9305      	str	r3, [sp, #20]
 80137d2:	9b06      	ldr	r3, [sp, #24]
 80137d4:	4416      	add	r6, r2
 80137d6:	4413      	add	r3, r2
 80137d8:	e794      	b.n	8013704 <_dtoa_r+0x744>
 80137da:	4602      	mov	r2, r0
 80137dc:	e7f5      	b.n	80137ca <_dtoa_r+0x80a>
 80137de:	f1ba 0f00 	cmp.w	sl, #0
 80137e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80137e6:	46d3      	mov	fp, sl
 80137e8:	dc21      	bgt.n	801382e <_dtoa_r+0x86e>
 80137ea:	9b07      	ldr	r3, [sp, #28]
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	dd1e      	ble.n	801382e <_dtoa_r+0x86e>
 80137f0:	f1bb 0f00 	cmp.w	fp, #0
 80137f4:	f47f aeb7 	bne.w	8013566 <_dtoa_r+0x5a6>
 80137f8:	4621      	mov	r1, r4
 80137fa:	465b      	mov	r3, fp
 80137fc:	2205      	movs	r2, #5
 80137fe:	4648      	mov	r0, r9
 8013800:	f000 f9e0 	bl	8013bc4 <__multadd>
 8013804:	4601      	mov	r1, r0
 8013806:	4604      	mov	r4, r0
 8013808:	9801      	ldr	r0, [sp, #4]
 801380a:	f000 fbf3 	bl	8013ff4 <__mcmp>
 801380e:	2800      	cmp	r0, #0
 8013810:	f77f aea9 	ble.w	8013566 <_dtoa_r+0x5a6>
 8013814:	463e      	mov	r6, r7
 8013816:	2331      	movs	r3, #49	@ 0x31
 8013818:	f806 3b01 	strb.w	r3, [r6], #1
 801381c:	9b04      	ldr	r3, [sp, #16]
 801381e:	3301      	adds	r3, #1
 8013820:	9304      	str	r3, [sp, #16]
 8013822:	e6a4      	b.n	801356e <_dtoa_r+0x5ae>
 8013824:	f8cd 8010 	str.w	r8, [sp, #16]
 8013828:	4654      	mov	r4, sl
 801382a:	4625      	mov	r5, r4
 801382c:	e7f2      	b.n	8013814 <_dtoa_r+0x854>
 801382e:	9b08      	ldr	r3, [sp, #32]
 8013830:	2b00      	cmp	r3, #0
 8013832:	f000 8103 	beq.w	8013a3c <_dtoa_r+0xa7c>
 8013836:	2e00      	cmp	r6, #0
 8013838:	dd05      	ble.n	8013846 <_dtoa_r+0x886>
 801383a:	4629      	mov	r1, r5
 801383c:	4632      	mov	r2, r6
 801383e:	4648      	mov	r0, r9
 8013840:	f000 fb6c 	bl	8013f1c <__lshift>
 8013844:	4605      	mov	r5, r0
 8013846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013848:	2b00      	cmp	r3, #0
 801384a:	d058      	beq.n	80138fe <_dtoa_r+0x93e>
 801384c:	6869      	ldr	r1, [r5, #4]
 801384e:	4648      	mov	r0, r9
 8013850:	f000 f956 	bl	8013b00 <_Balloc>
 8013854:	4606      	mov	r6, r0
 8013856:	b928      	cbnz	r0, 8013864 <_dtoa_r+0x8a4>
 8013858:	4b82      	ldr	r3, [pc, #520]	@ (8013a64 <_dtoa_r+0xaa4>)
 801385a:	4602      	mov	r2, r0
 801385c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013860:	f7ff bbc7 	b.w	8012ff2 <_dtoa_r+0x32>
 8013864:	692a      	ldr	r2, [r5, #16]
 8013866:	3202      	adds	r2, #2
 8013868:	0092      	lsls	r2, r2, #2
 801386a:	f105 010c 	add.w	r1, r5, #12
 801386e:	300c      	adds	r0, #12
 8013870:	f7ff fb0f 	bl	8012e92 <memcpy>
 8013874:	2201      	movs	r2, #1
 8013876:	4631      	mov	r1, r6
 8013878:	4648      	mov	r0, r9
 801387a:	f000 fb4f 	bl	8013f1c <__lshift>
 801387e:	1c7b      	adds	r3, r7, #1
 8013880:	9305      	str	r3, [sp, #20]
 8013882:	eb07 030b 	add.w	r3, r7, fp
 8013886:	9309      	str	r3, [sp, #36]	@ 0x24
 8013888:	9b02      	ldr	r3, [sp, #8]
 801388a:	f003 0301 	and.w	r3, r3, #1
 801388e:	46a8      	mov	r8, r5
 8013890:	9308      	str	r3, [sp, #32]
 8013892:	4605      	mov	r5, r0
 8013894:	9b05      	ldr	r3, [sp, #20]
 8013896:	9801      	ldr	r0, [sp, #4]
 8013898:	4621      	mov	r1, r4
 801389a:	f103 3bff 	add.w	fp, r3, #4294967295
 801389e:	f7ff fb06 	bl	8012eae <quorem>
 80138a2:	4641      	mov	r1, r8
 80138a4:	9002      	str	r0, [sp, #8]
 80138a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80138aa:	9801      	ldr	r0, [sp, #4]
 80138ac:	f000 fba2 	bl	8013ff4 <__mcmp>
 80138b0:	462a      	mov	r2, r5
 80138b2:	9006      	str	r0, [sp, #24]
 80138b4:	4621      	mov	r1, r4
 80138b6:	4648      	mov	r0, r9
 80138b8:	f000 fbb8 	bl	801402c <__mdiff>
 80138bc:	68c2      	ldr	r2, [r0, #12]
 80138be:	4606      	mov	r6, r0
 80138c0:	b9fa      	cbnz	r2, 8013902 <_dtoa_r+0x942>
 80138c2:	4601      	mov	r1, r0
 80138c4:	9801      	ldr	r0, [sp, #4]
 80138c6:	f000 fb95 	bl	8013ff4 <__mcmp>
 80138ca:	4602      	mov	r2, r0
 80138cc:	4631      	mov	r1, r6
 80138ce:	4648      	mov	r0, r9
 80138d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80138d2:	f000 f955 	bl	8013b80 <_Bfree>
 80138d6:	9b07      	ldr	r3, [sp, #28]
 80138d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80138da:	9e05      	ldr	r6, [sp, #20]
 80138dc:	ea43 0102 	orr.w	r1, r3, r2
 80138e0:	9b08      	ldr	r3, [sp, #32]
 80138e2:	4319      	orrs	r1, r3
 80138e4:	d10f      	bne.n	8013906 <_dtoa_r+0x946>
 80138e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80138ea:	d028      	beq.n	801393e <_dtoa_r+0x97e>
 80138ec:	9b06      	ldr	r3, [sp, #24]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	dd02      	ble.n	80138f8 <_dtoa_r+0x938>
 80138f2:	9b02      	ldr	r3, [sp, #8]
 80138f4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80138f8:	f88b a000 	strb.w	sl, [fp]
 80138fc:	e639      	b.n	8013572 <_dtoa_r+0x5b2>
 80138fe:	4628      	mov	r0, r5
 8013900:	e7bd      	b.n	801387e <_dtoa_r+0x8be>
 8013902:	2201      	movs	r2, #1
 8013904:	e7e2      	b.n	80138cc <_dtoa_r+0x90c>
 8013906:	9b06      	ldr	r3, [sp, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	db04      	blt.n	8013916 <_dtoa_r+0x956>
 801390c:	9907      	ldr	r1, [sp, #28]
 801390e:	430b      	orrs	r3, r1
 8013910:	9908      	ldr	r1, [sp, #32]
 8013912:	430b      	orrs	r3, r1
 8013914:	d120      	bne.n	8013958 <_dtoa_r+0x998>
 8013916:	2a00      	cmp	r2, #0
 8013918:	ddee      	ble.n	80138f8 <_dtoa_r+0x938>
 801391a:	9901      	ldr	r1, [sp, #4]
 801391c:	2201      	movs	r2, #1
 801391e:	4648      	mov	r0, r9
 8013920:	f000 fafc 	bl	8013f1c <__lshift>
 8013924:	4621      	mov	r1, r4
 8013926:	9001      	str	r0, [sp, #4]
 8013928:	f000 fb64 	bl	8013ff4 <__mcmp>
 801392c:	2800      	cmp	r0, #0
 801392e:	dc03      	bgt.n	8013938 <_dtoa_r+0x978>
 8013930:	d1e2      	bne.n	80138f8 <_dtoa_r+0x938>
 8013932:	f01a 0f01 	tst.w	sl, #1
 8013936:	d0df      	beq.n	80138f8 <_dtoa_r+0x938>
 8013938:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801393c:	d1d9      	bne.n	80138f2 <_dtoa_r+0x932>
 801393e:	2339      	movs	r3, #57	@ 0x39
 8013940:	f88b 3000 	strb.w	r3, [fp]
 8013944:	4633      	mov	r3, r6
 8013946:	461e      	mov	r6, r3
 8013948:	3b01      	subs	r3, #1
 801394a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801394e:	2a39      	cmp	r2, #57	@ 0x39
 8013950:	d053      	beq.n	80139fa <_dtoa_r+0xa3a>
 8013952:	3201      	adds	r2, #1
 8013954:	701a      	strb	r2, [r3, #0]
 8013956:	e60c      	b.n	8013572 <_dtoa_r+0x5b2>
 8013958:	2a00      	cmp	r2, #0
 801395a:	dd07      	ble.n	801396c <_dtoa_r+0x9ac>
 801395c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013960:	d0ed      	beq.n	801393e <_dtoa_r+0x97e>
 8013962:	f10a 0301 	add.w	r3, sl, #1
 8013966:	f88b 3000 	strb.w	r3, [fp]
 801396a:	e602      	b.n	8013572 <_dtoa_r+0x5b2>
 801396c:	9b05      	ldr	r3, [sp, #20]
 801396e:	9a05      	ldr	r2, [sp, #20]
 8013970:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013976:	4293      	cmp	r3, r2
 8013978:	d029      	beq.n	80139ce <_dtoa_r+0xa0e>
 801397a:	9901      	ldr	r1, [sp, #4]
 801397c:	2300      	movs	r3, #0
 801397e:	220a      	movs	r2, #10
 8013980:	4648      	mov	r0, r9
 8013982:	f000 f91f 	bl	8013bc4 <__multadd>
 8013986:	45a8      	cmp	r8, r5
 8013988:	9001      	str	r0, [sp, #4]
 801398a:	f04f 0300 	mov.w	r3, #0
 801398e:	f04f 020a 	mov.w	r2, #10
 8013992:	4641      	mov	r1, r8
 8013994:	4648      	mov	r0, r9
 8013996:	d107      	bne.n	80139a8 <_dtoa_r+0x9e8>
 8013998:	f000 f914 	bl	8013bc4 <__multadd>
 801399c:	4680      	mov	r8, r0
 801399e:	4605      	mov	r5, r0
 80139a0:	9b05      	ldr	r3, [sp, #20]
 80139a2:	3301      	adds	r3, #1
 80139a4:	9305      	str	r3, [sp, #20]
 80139a6:	e775      	b.n	8013894 <_dtoa_r+0x8d4>
 80139a8:	f000 f90c 	bl	8013bc4 <__multadd>
 80139ac:	4629      	mov	r1, r5
 80139ae:	4680      	mov	r8, r0
 80139b0:	2300      	movs	r3, #0
 80139b2:	220a      	movs	r2, #10
 80139b4:	4648      	mov	r0, r9
 80139b6:	f000 f905 	bl	8013bc4 <__multadd>
 80139ba:	4605      	mov	r5, r0
 80139bc:	e7f0      	b.n	80139a0 <_dtoa_r+0x9e0>
 80139be:	f1bb 0f00 	cmp.w	fp, #0
 80139c2:	bfcc      	ite	gt
 80139c4:	465e      	movgt	r6, fp
 80139c6:	2601      	movle	r6, #1
 80139c8:	443e      	add	r6, r7
 80139ca:	f04f 0800 	mov.w	r8, #0
 80139ce:	9901      	ldr	r1, [sp, #4]
 80139d0:	2201      	movs	r2, #1
 80139d2:	4648      	mov	r0, r9
 80139d4:	f000 faa2 	bl	8013f1c <__lshift>
 80139d8:	4621      	mov	r1, r4
 80139da:	9001      	str	r0, [sp, #4]
 80139dc:	f000 fb0a 	bl	8013ff4 <__mcmp>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	dcaf      	bgt.n	8013944 <_dtoa_r+0x984>
 80139e4:	d102      	bne.n	80139ec <_dtoa_r+0xa2c>
 80139e6:	f01a 0f01 	tst.w	sl, #1
 80139ea:	d1ab      	bne.n	8013944 <_dtoa_r+0x984>
 80139ec:	4633      	mov	r3, r6
 80139ee:	461e      	mov	r6, r3
 80139f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80139f4:	2a30      	cmp	r2, #48	@ 0x30
 80139f6:	d0fa      	beq.n	80139ee <_dtoa_r+0xa2e>
 80139f8:	e5bb      	b.n	8013572 <_dtoa_r+0x5b2>
 80139fa:	429f      	cmp	r7, r3
 80139fc:	d1a3      	bne.n	8013946 <_dtoa_r+0x986>
 80139fe:	9b04      	ldr	r3, [sp, #16]
 8013a00:	3301      	adds	r3, #1
 8013a02:	9304      	str	r3, [sp, #16]
 8013a04:	2331      	movs	r3, #49	@ 0x31
 8013a06:	703b      	strb	r3, [r7, #0]
 8013a08:	e5b3      	b.n	8013572 <_dtoa_r+0x5b2>
 8013a0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a0c:	4f16      	ldr	r7, [pc, #88]	@ (8013a68 <_dtoa_r+0xaa8>)
 8013a0e:	b11b      	cbz	r3, 8013a18 <_dtoa_r+0xa58>
 8013a10:	f107 0308 	add.w	r3, r7, #8
 8013a14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013a16:	6013      	str	r3, [r2, #0]
 8013a18:	4638      	mov	r0, r7
 8013a1a:	b011      	add	sp, #68	@ 0x44
 8013a1c:	ecbd 8b02 	vpop	{d8}
 8013a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a24:	9b07      	ldr	r3, [sp, #28]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	f77f ae36 	ble.w	8013698 <_dtoa_r+0x6d8>
 8013a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a30:	2001      	movs	r0, #1
 8013a32:	e656      	b.n	80136e2 <_dtoa_r+0x722>
 8013a34:	f1bb 0f00 	cmp.w	fp, #0
 8013a38:	f77f aed7 	ble.w	80137ea <_dtoa_r+0x82a>
 8013a3c:	463e      	mov	r6, r7
 8013a3e:	9801      	ldr	r0, [sp, #4]
 8013a40:	4621      	mov	r1, r4
 8013a42:	f7ff fa34 	bl	8012eae <quorem>
 8013a46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013a4a:	f806 ab01 	strb.w	sl, [r6], #1
 8013a4e:	1bf2      	subs	r2, r6, r7
 8013a50:	4593      	cmp	fp, r2
 8013a52:	ddb4      	ble.n	80139be <_dtoa_r+0x9fe>
 8013a54:	9901      	ldr	r1, [sp, #4]
 8013a56:	2300      	movs	r3, #0
 8013a58:	220a      	movs	r2, #10
 8013a5a:	4648      	mov	r0, r9
 8013a5c:	f000 f8b2 	bl	8013bc4 <__multadd>
 8013a60:	9001      	str	r0, [sp, #4]
 8013a62:	e7ec      	b.n	8013a3e <_dtoa_r+0xa7e>
 8013a64:	08017590 	.word	0x08017590
 8013a68:	08017514 	.word	0x08017514

08013a6c <_free_r>:
 8013a6c:	b538      	push	{r3, r4, r5, lr}
 8013a6e:	4605      	mov	r5, r0
 8013a70:	2900      	cmp	r1, #0
 8013a72:	d041      	beq.n	8013af8 <_free_r+0x8c>
 8013a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a78:	1f0c      	subs	r4, r1, #4
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	bfb8      	it	lt
 8013a7e:	18e4      	addlt	r4, r4, r3
 8013a80:	f7fe fc0e 	bl	80122a0 <__malloc_lock>
 8013a84:	4a1d      	ldr	r2, [pc, #116]	@ (8013afc <_free_r+0x90>)
 8013a86:	6813      	ldr	r3, [r2, #0]
 8013a88:	b933      	cbnz	r3, 8013a98 <_free_r+0x2c>
 8013a8a:	6063      	str	r3, [r4, #4]
 8013a8c:	6014      	str	r4, [r2, #0]
 8013a8e:	4628      	mov	r0, r5
 8013a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a94:	f7fe bc0a 	b.w	80122ac <__malloc_unlock>
 8013a98:	42a3      	cmp	r3, r4
 8013a9a:	d908      	bls.n	8013aae <_free_r+0x42>
 8013a9c:	6820      	ldr	r0, [r4, #0]
 8013a9e:	1821      	adds	r1, r4, r0
 8013aa0:	428b      	cmp	r3, r1
 8013aa2:	bf01      	itttt	eq
 8013aa4:	6819      	ldreq	r1, [r3, #0]
 8013aa6:	685b      	ldreq	r3, [r3, #4]
 8013aa8:	1809      	addeq	r1, r1, r0
 8013aaa:	6021      	streq	r1, [r4, #0]
 8013aac:	e7ed      	b.n	8013a8a <_free_r+0x1e>
 8013aae:	461a      	mov	r2, r3
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	b10b      	cbz	r3, 8013ab8 <_free_r+0x4c>
 8013ab4:	42a3      	cmp	r3, r4
 8013ab6:	d9fa      	bls.n	8013aae <_free_r+0x42>
 8013ab8:	6811      	ldr	r1, [r2, #0]
 8013aba:	1850      	adds	r0, r2, r1
 8013abc:	42a0      	cmp	r0, r4
 8013abe:	d10b      	bne.n	8013ad8 <_free_r+0x6c>
 8013ac0:	6820      	ldr	r0, [r4, #0]
 8013ac2:	4401      	add	r1, r0
 8013ac4:	1850      	adds	r0, r2, r1
 8013ac6:	4283      	cmp	r3, r0
 8013ac8:	6011      	str	r1, [r2, #0]
 8013aca:	d1e0      	bne.n	8013a8e <_free_r+0x22>
 8013acc:	6818      	ldr	r0, [r3, #0]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	6053      	str	r3, [r2, #4]
 8013ad2:	4408      	add	r0, r1
 8013ad4:	6010      	str	r0, [r2, #0]
 8013ad6:	e7da      	b.n	8013a8e <_free_r+0x22>
 8013ad8:	d902      	bls.n	8013ae0 <_free_r+0x74>
 8013ada:	230c      	movs	r3, #12
 8013adc:	602b      	str	r3, [r5, #0]
 8013ade:	e7d6      	b.n	8013a8e <_free_r+0x22>
 8013ae0:	6820      	ldr	r0, [r4, #0]
 8013ae2:	1821      	adds	r1, r4, r0
 8013ae4:	428b      	cmp	r3, r1
 8013ae6:	bf04      	itt	eq
 8013ae8:	6819      	ldreq	r1, [r3, #0]
 8013aea:	685b      	ldreq	r3, [r3, #4]
 8013aec:	6063      	str	r3, [r4, #4]
 8013aee:	bf04      	itt	eq
 8013af0:	1809      	addeq	r1, r1, r0
 8013af2:	6021      	streq	r1, [r4, #0]
 8013af4:	6054      	str	r4, [r2, #4]
 8013af6:	e7ca      	b.n	8013a8e <_free_r+0x22>
 8013af8:	bd38      	pop	{r3, r4, r5, pc}
 8013afa:	bf00      	nop
 8013afc:	2400952c 	.word	0x2400952c

08013b00 <_Balloc>:
 8013b00:	b570      	push	{r4, r5, r6, lr}
 8013b02:	69c6      	ldr	r6, [r0, #28]
 8013b04:	4604      	mov	r4, r0
 8013b06:	460d      	mov	r5, r1
 8013b08:	b976      	cbnz	r6, 8013b28 <_Balloc+0x28>
 8013b0a:	2010      	movs	r0, #16
 8013b0c:	f7fe fb1e 	bl	801214c <malloc>
 8013b10:	4602      	mov	r2, r0
 8013b12:	61e0      	str	r0, [r4, #28]
 8013b14:	b920      	cbnz	r0, 8013b20 <_Balloc+0x20>
 8013b16:	4b18      	ldr	r3, [pc, #96]	@ (8013b78 <_Balloc+0x78>)
 8013b18:	4818      	ldr	r0, [pc, #96]	@ (8013b7c <_Balloc+0x7c>)
 8013b1a:	216b      	movs	r1, #107	@ 0x6b
 8013b1c:	f000 fd90 	bl	8014640 <__assert_func>
 8013b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b24:	6006      	str	r6, [r0, #0]
 8013b26:	60c6      	str	r6, [r0, #12]
 8013b28:	69e6      	ldr	r6, [r4, #28]
 8013b2a:	68f3      	ldr	r3, [r6, #12]
 8013b2c:	b183      	cbz	r3, 8013b50 <_Balloc+0x50>
 8013b2e:	69e3      	ldr	r3, [r4, #28]
 8013b30:	68db      	ldr	r3, [r3, #12]
 8013b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b36:	b9b8      	cbnz	r0, 8013b68 <_Balloc+0x68>
 8013b38:	2101      	movs	r1, #1
 8013b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8013b3e:	1d72      	adds	r2, r6, #5
 8013b40:	0092      	lsls	r2, r2, #2
 8013b42:	4620      	mov	r0, r4
 8013b44:	f000 fd9a 	bl	801467c <_calloc_r>
 8013b48:	b160      	cbz	r0, 8013b64 <_Balloc+0x64>
 8013b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b4e:	e00e      	b.n	8013b6e <_Balloc+0x6e>
 8013b50:	2221      	movs	r2, #33	@ 0x21
 8013b52:	2104      	movs	r1, #4
 8013b54:	4620      	mov	r0, r4
 8013b56:	f000 fd91 	bl	801467c <_calloc_r>
 8013b5a:	69e3      	ldr	r3, [r4, #28]
 8013b5c:	60f0      	str	r0, [r6, #12]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1e4      	bne.n	8013b2e <_Balloc+0x2e>
 8013b64:	2000      	movs	r0, #0
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	6802      	ldr	r2, [r0, #0]
 8013b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b74:	e7f7      	b.n	8013b66 <_Balloc+0x66>
 8013b76:	bf00      	nop
 8013b78:	08017521 	.word	0x08017521
 8013b7c:	080175a1 	.word	0x080175a1

08013b80 <_Bfree>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	69c6      	ldr	r6, [r0, #28]
 8013b84:	4605      	mov	r5, r0
 8013b86:	460c      	mov	r4, r1
 8013b88:	b976      	cbnz	r6, 8013ba8 <_Bfree+0x28>
 8013b8a:	2010      	movs	r0, #16
 8013b8c:	f7fe fade 	bl	801214c <malloc>
 8013b90:	4602      	mov	r2, r0
 8013b92:	61e8      	str	r0, [r5, #28]
 8013b94:	b920      	cbnz	r0, 8013ba0 <_Bfree+0x20>
 8013b96:	4b09      	ldr	r3, [pc, #36]	@ (8013bbc <_Bfree+0x3c>)
 8013b98:	4809      	ldr	r0, [pc, #36]	@ (8013bc0 <_Bfree+0x40>)
 8013b9a:	218f      	movs	r1, #143	@ 0x8f
 8013b9c:	f000 fd50 	bl	8014640 <__assert_func>
 8013ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ba4:	6006      	str	r6, [r0, #0]
 8013ba6:	60c6      	str	r6, [r0, #12]
 8013ba8:	b13c      	cbz	r4, 8013bba <_Bfree+0x3a>
 8013baa:	69eb      	ldr	r3, [r5, #28]
 8013bac:	6862      	ldr	r2, [r4, #4]
 8013bae:	68db      	ldr	r3, [r3, #12]
 8013bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013bb4:	6021      	str	r1, [r4, #0]
 8013bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
 8013bbc:	08017521 	.word	0x08017521
 8013bc0:	080175a1 	.word	0x080175a1

08013bc4 <__multadd>:
 8013bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc8:	690d      	ldr	r5, [r1, #16]
 8013bca:	4607      	mov	r7, r0
 8013bcc:	460c      	mov	r4, r1
 8013bce:	461e      	mov	r6, r3
 8013bd0:	f101 0c14 	add.w	ip, r1, #20
 8013bd4:	2000      	movs	r0, #0
 8013bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bda:	b299      	uxth	r1, r3
 8013bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8013be0:	0c1e      	lsrs	r6, r3, #16
 8013be2:	0c0b      	lsrs	r3, r1, #16
 8013be4:	fb02 3306 	mla	r3, r2, r6, r3
 8013be8:	b289      	uxth	r1, r1
 8013bea:	3001      	adds	r0, #1
 8013bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013bf0:	4285      	cmp	r5, r0
 8013bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8013bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bfa:	dcec      	bgt.n	8013bd6 <__multadd+0x12>
 8013bfc:	b30e      	cbz	r6, 8013c42 <__multadd+0x7e>
 8013bfe:	68a3      	ldr	r3, [r4, #8]
 8013c00:	42ab      	cmp	r3, r5
 8013c02:	dc19      	bgt.n	8013c38 <__multadd+0x74>
 8013c04:	6861      	ldr	r1, [r4, #4]
 8013c06:	4638      	mov	r0, r7
 8013c08:	3101      	adds	r1, #1
 8013c0a:	f7ff ff79 	bl	8013b00 <_Balloc>
 8013c0e:	4680      	mov	r8, r0
 8013c10:	b928      	cbnz	r0, 8013c1e <__multadd+0x5a>
 8013c12:	4602      	mov	r2, r0
 8013c14:	4b0c      	ldr	r3, [pc, #48]	@ (8013c48 <__multadd+0x84>)
 8013c16:	480d      	ldr	r0, [pc, #52]	@ (8013c4c <__multadd+0x88>)
 8013c18:	21ba      	movs	r1, #186	@ 0xba
 8013c1a:	f000 fd11 	bl	8014640 <__assert_func>
 8013c1e:	6922      	ldr	r2, [r4, #16]
 8013c20:	3202      	adds	r2, #2
 8013c22:	f104 010c 	add.w	r1, r4, #12
 8013c26:	0092      	lsls	r2, r2, #2
 8013c28:	300c      	adds	r0, #12
 8013c2a:	f7ff f932 	bl	8012e92 <memcpy>
 8013c2e:	4621      	mov	r1, r4
 8013c30:	4638      	mov	r0, r7
 8013c32:	f7ff ffa5 	bl	8013b80 <_Bfree>
 8013c36:	4644      	mov	r4, r8
 8013c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c3c:	3501      	adds	r5, #1
 8013c3e:	615e      	str	r6, [r3, #20]
 8013c40:	6125      	str	r5, [r4, #16]
 8013c42:	4620      	mov	r0, r4
 8013c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c48:	08017590 	.word	0x08017590
 8013c4c:	080175a1 	.word	0x080175a1

08013c50 <__hi0bits>:
 8013c50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013c54:	4603      	mov	r3, r0
 8013c56:	bf36      	itet	cc
 8013c58:	0403      	lslcc	r3, r0, #16
 8013c5a:	2000      	movcs	r0, #0
 8013c5c:	2010      	movcc	r0, #16
 8013c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013c62:	bf3c      	itt	cc
 8013c64:	021b      	lslcc	r3, r3, #8
 8013c66:	3008      	addcc	r0, #8
 8013c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c6c:	bf3c      	itt	cc
 8013c6e:	011b      	lslcc	r3, r3, #4
 8013c70:	3004      	addcc	r0, #4
 8013c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c76:	bf3c      	itt	cc
 8013c78:	009b      	lslcc	r3, r3, #2
 8013c7a:	3002      	addcc	r0, #2
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	db05      	blt.n	8013c8c <__hi0bits+0x3c>
 8013c80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013c84:	f100 0001 	add.w	r0, r0, #1
 8013c88:	bf08      	it	eq
 8013c8a:	2020      	moveq	r0, #32
 8013c8c:	4770      	bx	lr

08013c8e <__lo0bits>:
 8013c8e:	6803      	ldr	r3, [r0, #0]
 8013c90:	4602      	mov	r2, r0
 8013c92:	f013 0007 	ands.w	r0, r3, #7
 8013c96:	d00b      	beq.n	8013cb0 <__lo0bits+0x22>
 8013c98:	07d9      	lsls	r1, r3, #31
 8013c9a:	d421      	bmi.n	8013ce0 <__lo0bits+0x52>
 8013c9c:	0798      	lsls	r0, r3, #30
 8013c9e:	bf49      	itett	mi
 8013ca0:	085b      	lsrmi	r3, r3, #1
 8013ca2:	089b      	lsrpl	r3, r3, #2
 8013ca4:	2001      	movmi	r0, #1
 8013ca6:	6013      	strmi	r3, [r2, #0]
 8013ca8:	bf5c      	itt	pl
 8013caa:	6013      	strpl	r3, [r2, #0]
 8013cac:	2002      	movpl	r0, #2
 8013cae:	4770      	bx	lr
 8013cb0:	b299      	uxth	r1, r3
 8013cb2:	b909      	cbnz	r1, 8013cb8 <__lo0bits+0x2a>
 8013cb4:	0c1b      	lsrs	r3, r3, #16
 8013cb6:	2010      	movs	r0, #16
 8013cb8:	b2d9      	uxtb	r1, r3
 8013cba:	b909      	cbnz	r1, 8013cc0 <__lo0bits+0x32>
 8013cbc:	3008      	adds	r0, #8
 8013cbe:	0a1b      	lsrs	r3, r3, #8
 8013cc0:	0719      	lsls	r1, r3, #28
 8013cc2:	bf04      	itt	eq
 8013cc4:	091b      	lsreq	r3, r3, #4
 8013cc6:	3004      	addeq	r0, #4
 8013cc8:	0799      	lsls	r1, r3, #30
 8013cca:	bf04      	itt	eq
 8013ccc:	089b      	lsreq	r3, r3, #2
 8013cce:	3002      	addeq	r0, #2
 8013cd0:	07d9      	lsls	r1, r3, #31
 8013cd2:	d403      	bmi.n	8013cdc <__lo0bits+0x4e>
 8013cd4:	085b      	lsrs	r3, r3, #1
 8013cd6:	f100 0001 	add.w	r0, r0, #1
 8013cda:	d003      	beq.n	8013ce4 <__lo0bits+0x56>
 8013cdc:	6013      	str	r3, [r2, #0]
 8013cde:	4770      	bx	lr
 8013ce0:	2000      	movs	r0, #0
 8013ce2:	4770      	bx	lr
 8013ce4:	2020      	movs	r0, #32
 8013ce6:	4770      	bx	lr

08013ce8 <__i2b>:
 8013ce8:	b510      	push	{r4, lr}
 8013cea:	460c      	mov	r4, r1
 8013cec:	2101      	movs	r1, #1
 8013cee:	f7ff ff07 	bl	8013b00 <_Balloc>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	b928      	cbnz	r0, 8013d02 <__i2b+0x1a>
 8013cf6:	4b05      	ldr	r3, [pc, #20]	@ (8013d0c <__i2b+0x24>)
 8013cf8:	4805      	ldr	r0, [pc, #20]	@ (8013d10 <__i2b+0x28>)
 8013cfa:	f240 1145 	movw	r1, #325	@ 0x145
 8013cfe:	f000 fc9f 	bl	8014640 <__assert_func>
 8013d02:	2301      	movs	r3, #1
 8013d04:	6144      	str	r4, [r0, #20]
 8013d06:	6103      	str	r3, [r0, #16]
 8013d08:	bd10      	pop	{r4, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08017590 	.word	0x08017590
 8013d10:	080175a1 	.word	0x080175a1

08013d14 <__multiply>:
 8013d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d18:	4614      	mov	r4, r2
 8013d1a:	690a      	ldr	r2, [r1, #16]
 8013d1c:	6923      	ldr	r3, [r4, #16]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	bfa8      	it	ge
 8013d22:	4623      	movge	r3, r4
 8013d24:	460f      	mov	r7, r1
 8013d26:	bfa4      	itt	ge
 8013d28:	460c      	movge	r4, r1
 8013d2a:	461f      	movge	r7, r3
 8013d2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013d30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013d34:	68a3      	ldr	r3, [r4, #8]
 8013d36:	6861      	ldr	r1, [r4, #4]
 8013d38:	eb0a 0609 	add.w	r6, sl, r9
 8013d3c:	42b3      	cmp	r3, r6
 8013d3e:	b085      	sub	sp, #20
 8013d40:	bfb8      	it	lt
 8013d42:	3101      	addlt	r1, #1
 8013d44:	f7ff fedc 	bl	8013b00 <_Balloc>
 8013d48:	b930      	cbnz	r0, 8013d58 <__multiply+0x44>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	4b44      	ldr	r3, [pc, #272]	@ (8013e60 <__multiply+0x14c>)
 8013d4e:	4845      	ldr	r0, [pc, #276]	@ (8013e64 <__multiply+0x150>)
 8013d50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013d54:	f000 fc74 	bl	8014640 <__assert_func>
 8013d58:	f100 0514 	add.w	r5, r0, #20
 8013d5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d60:	462b      	mov	r3, r5
 8013d62:	2200      	movs	r2, #0
 8013d64:	4543      	cmp	r3, r8
 8013d66:	d321      	bcc.n	8013dac <__multiply+0x98>
 8013d68:	f107 0114 	add.w	r1, r7, #20
 8013d6c:	f104 0214 	add.w	r2, r4, #20
 8013d70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013d74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013d78:	9302      	str	r3, [sp, #8]
 8013d7a:	1b13      	subs	r3, r2, r4
 8013d7c:	3b15      	subs	r3, #21
 8013d7e:	f023 0303 	bic.w	r3, r3, #3
 8013d82:	3304      	adds	r3, #4
 8013d84:	f104 0715 	add.w	r7, r4, #21
 8013d88:	42ba      	cmp	r2, r7
 8013d8a:	bf38      	it	cc
 8013d8c:	2304      	movcc	r3, #4
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	9b02      	ldr	r3, [sp, #8]
 8013d92:	9103      	str	r1, [sp, #12]
 8013d94:	428b      	cmp	r3, r1
 8013d96:	d80c      	bhi.n	8013db2 <__multiply+0x9e>
 8013d98:	2e00      	cmp	r6, #0
 8013d9a:	dd03      	ble.n	8013da4 <__multiply+0x90>
 8013d9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d05b      	beq.n	8013e5c <__multiply+0x148>
 8013da4:	6106      	str	r6, [r0, #16]
 8013da6:	b005      	add	sp, #20
 8013da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dac:	f843 2b04 	str.w	r2, [r3], #4
 8013db0:	e7d8      	b.n	8013d64 <__multiply+0x50>
 8013db2:	f8b1 a000 	ldrh.w	sl, [r1]
 8013db6:	f1ba 0f00 	cmp.w	sl, #0
 8013dba:	d024      	beq.n	8013e06 <__multiply+0xf2>
 8013dbc:	f104 0e14 	add.w	lr, r4, #20
 8013dc0:	46a9      	mov	r9, r5
 8013dc2:	f04f 0c00 	mov.w	ip, #0
 8013dc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013dca:	f8d9 3000 	ldr.w	r3, [r9]
 8013dce:	fa1f fb87 	uxth.w	fp, r7
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013dd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013ddc:	f8d9 7000 	ldr.w	r7, [r9]
 8013de0:	4463      	add	r3, ip
 8013de2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013de6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013dea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013df4:	4572      	cmp	r2, lr
 8013df6:	f849 3b04 	str.w	r3, [r9], #4
 8013dfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013dfe:	d8e2      	bhi.n	8013dc6 <__multiply+0xb2>
 8013e00:	9b01      	ldr	r3, [sp, #4]
 8013e02:	f845 c003 	str.w	ip, [r5, r3]
 8013e06:	9b03      	ldr	r3, [sp, #12]
 8013e08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013e0c:	3104      	adds	r1, #4
 8013e0e:	f1b9 0f00 	cmp.w	r9, #0
 8013e12:	d021      	beq.n	8013e58 <__multiply+0x144>
 8013e14:	682b      	ldr	r3, [r5, #0]
 8013e16:	f104 0c14 	add.w	ip, r4, #20
 8013e1a:	46ae      	mov	lr, r5
 8013e1c:	f04f 0a00 	mov.w	sl, #0
 8013e20:	f8bc b000 	ldrh.w	fp, [ip]
 8013e24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013e28:	fb09 770b 	mla	r7, r9, fp, r7
 8013e2c:	4457      	add	r7, sl
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013e34:	f84e 3b04 	str.w	r3, [lr], #4
 8013e38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e40:	f8be 3000 	ldrh.w	r3, [lr]
 8013e44:	fb09 330a 	mla	r3, r9, sl, r3
 8013e48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013e4c:	4562      	cmp	r2, ip
 8013e4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e52:	d8e5      	bhi.n	8013e20 <__multiply+0x10c>
 8013e54:	9f01      	ldr	r7, [sp, #4]
 8013e56:	51eb      	str	r3, [r5, r7]
 8013e58:	3504      	adds	r5, #4
 8013e5a:	e799      	b.n	8013d90 <__multiply+0x7c>
 8013e5c:	3e01      	subs	r6, #1
 8013e5e:	e79b      	b.n	8013d98 <__multiply+0x84>
 8013e60:	08017590 	.word	0x08017590
 8013e64:	080175a1 	.word	0x080175a1

08013e68 <__pow5mult>:
 8013e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e6c:	4615      	mov	r5, r2
 8013e6e:	f012 0203 	ands.w	r2, r2, #3
 8013e72:	4607      	mov	r7, r0
 8013e74:	460e      	mov	r6, r1
 8013e76:	d007      	beq.n	8013e88 <__pow5mult+0x20>
 8013e78:	4c25      	ldr	r4, [pc, #148]	@ (8013f10 <__pow5mult+0xa8>)
 8013e7a:	3a01      	subs	r2, #1
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e82:	f7ff fe9f 	bl	8013bc4 <__multadd>
 8013e86:	4606      	mov	r6, r0
 8013e88:	10ad      	asrs	r5, r5, #2
 8013e8a:	d03d      	beq.n	8013f08 <__pow5mult+0xa0>
 8013e8c:	69fc      	ldr	r4, [r7, #28]
 8013e8e:	b97c      	cbnz	r4, 8013eb0 <__pow5mult+0x48>
 8013e90:	2010      	movs	r0, #16
 8013e92:	f7fe f95b 	bl	801214c <malloc>
 8013e96:	4602      	mov	r2, r0
 8013e98:	61f8      	str	r0, [r7, #28]
 8013e9a:	b928      	cbnz	r0, 8013ea8 <__pow5mult+0x40>
 8013e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8013f14 <__pow5mult+0xac>)
 8013e9e:	481e      	ldr	r0, [pc, #120]	@ (8013f18 <__pow5mult+0xb0>)
 8013ea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013ea4:	f000 fbcc 	bl	8014640 <__assert_func>
 8013ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013eac:	6004      	str	r4, [r0, #0]
 8013eae:	60c4      	str	r4, [r0, #12]
 8013eb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013eb8:	b94c      	cbnz	r4, 8013ece <__pow5mult+0x66>
 8013eba:	f240 2171 	movw	r1, #625	@ 0x271
 8013ebe:	4638      	mov	r0, r7
 8013ec0:	f7ff ff12 	bl	8013ce8 <__i2b>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013eca:	4604      	mov	r4, r0
 8013ecc:	6003      	str	r3, [r0, #0]
 8013ece:	f04f 0900 	mov.w	r9, #0
 8013ed2:	07eb      	lsls	r3, r5, #31
 8013ed4:	d50a      	bpl.n	8013eec <__pow5mult+0x84>
 8013ed6:	4631      	mov	r1, r6
 8013ed8:	4622      	mov	r2, r4
 8013eda:	4638      	mov	r0, r7
 8013edc:	f7ff ff1a 	bl	8013d14 <__multiply>
 8013ee0:	4631      	mov	r1, r6
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7ff fe4b 	bl	8013b80 <_Bfree>
 8013eea:	4646      	mov	r6, r8
 8013eec:	106d      	asrs	r5, r5, #1
 8013eee:	d00b      	beq.n	8013f08 <__pow5mult+0xa0>
 8013ef0:	6820      	ldr	r0, [r4, #0]
 8013ef2:	b938      	cbnz	r0, 8013f04 <__pow5mult+0x9c>
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	4621      	mov	r1, r4
 8013ef8:	4638      	mov	r0, r7
 8013efa:	f7ff ff0b 	bl	8013d14 <__multiply>
 8013efe:	6020      	str	r0, [r4, #0]
 8013f00:	f8c0 9000 	str.w	r9, [r0]
 8013f04:	4604      	mov	r4, r0
 8013f06:	e7e4      	b.n	8013ed2 <__pow5mult+0x6a>
 8013f08:	4630      	mov	r0, r6
 8013f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f0e:	bf00      	nop
 8013f10:	080175fc 	.word	0x080175fc
 8013f14:	08017521 	.word	0x08017521
 8013f18:	080175a1 	.word	0x080175a1

08013f1c <__lshift>:
 8013f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f20:	460c      	mov	r4, r1
 8013f22:	6849      	ldr	r1, [r1, #4]
 8013f24:	6923      	ldr	r3, [r4, #16]
 8013f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f2a:	68a3      	ldr	r3, [r4, #8]
 8013f2c:	4607      	mov	r7, r0
 8013f2e:	4691      	mov	r9, r2
 8013f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f34:	f108 0601 	add.w	r6, r8, #1
 8013f38:	42b3      	cmp	r3, r6
 8013f3a:	db0b      	blt.n	8013f54 <__lshift+0x38>
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7ff fddf 	bl	8013b00 <_Balloc>
 8013f42:	4605      	mov	r5, r0
 8013f44:	b948      	cbnz	r0, 8013f5a <__lshift+0x3e>
 8013f46:	4602      	mov	r2, r0
 8013f48:	4b28      	ldr	r3, [pc, #160]	@ (8013fec <__lshift+0xd0>)
 8013f4a:	4829      	ldr	r0, [pc, #164]	@ (8013ff0 <__lshift+0xd4>)
 8013f4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013f50:	f000 fb76 	bl	8014640 <__assert_func>
 8013f54:	3101      	adds	r1, #1
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	e7ee      	b.n	8013f38 <__lshift+0x1c>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	f100 0114 	add.w	r1, r0, #20
 8013f60:	f100 0210 	add.w	r2, r0, #16
 8013f64:	4618      	mov	r0, r3
 8013f66:	4553      	cmp	r3, sl
 8013f68:	db33      	blt.n	8013fd2 <__lshift+0xb6>
 8013f6a:	6920      	ldr	r0, [r4, #16]
 8013f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f70:	f104 0314 	add.w	r3, r4, #20
 8013f74:	f019 091f 	ands.w	r9, r9, #31
 8013f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f80:	d02b      	beq.n	8013fda <__lshift+0xbe>
 8013f82:	f1c9 0e20 	rsb	lr, r9, #32
 8013f86:	468a      	mov	sl, r1
 8013f88:	2200      	movs	r2, #0
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	fa00 f009 	lsl.w	r0, r0, r9
 8013f90:	4310      	orrs	r0, r2
 8013f92:	f84a 0b04 	str.w	r0, [sl], #4
 8013f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f9a:	459c      	cmp	ip, r3
 8013f9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013fa0:	d8f3      	bhi.n	8013f8a <__lshift+0x6e>
 8013fa2:	ebac 0304 	sub.w	r3, ip, r4
 8013fa6:	3b15      	subs	r3, #21
 8013fa8:	f023 0303 	bic.w	r3, r3, #3
 8013fac:	3304      	adds	r3, #4
 8013fae:	f104 0015 	add.w	r0, r4, #21
 8013fb2:	4584      	cmp	ip, r0
 8013fb4:	bf38      	it	cc
 8013fb6:	2304      	movcc	r3, #4
 8013fb8:	50ca      	str	r2, [r1, r3]
 8013fba:	b10a      	cbz	r2, 8013fc0 <__lshift+0xa4>
 8013fbc:	f108 0602 	add.w	r6, r8, #2
 8013fc0:	3e01      	subs	r6, #1
 8013fc2:	4638      	mov	r0, r7
 8013fc4:	612e      	str	r6, [r5, #16]
 8013fc6:	4621      	mov	r1, r4
 8013fc8:	f7ff fdda 	bl	8013b80 <_Bfree>
 8013fcc:	4628      	mov	r0, r5
 8013fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	e7c5      	b.n	8013f66 <__lshift+0x4a>
 8013fda:	3904      	subs	r1, #4
 8013fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013fe4:	459c      	cmp	ip, r3
 8013fe6:	d8f9      	bhi.n	8013fdc <__lshift+0xc0>
 8013fe8:	e7ea      	b.n	8013fc0 <__lshift+0xa4>
 8013fea:	bf00      	nop
 8013fec:	08017590 	.word	0x08017590
 8013ff0:	080175a1 	.word	0x080175a1

08013ff4 <__mcmp>:
 8013ff4:	690a      	ldr	r2, [r1, #16]
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	6900      	ldr	r0, [r0, #16]
 8013ffa:	1a80      	subs	r0, r0, r2
 8013ffc:	b530      	push	{r4, r5, lr}
 8013ffe:	d10e      	bne.n	801401e <__mcmp+0x2a>
 8014000:	3314      	adds	r3, #20
 8014002:	3114      	adds	r1, #20
 8014004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801400c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014014:	4295      	cmp	r5, r2
 8014016:	d003      	beq.n	8014020 <__mcmp+0x2c>
 8014018:	d205      	bcs.n	8014026 <__mcmp+0x32>
 801401a:	f04f 30ff 	mov.w	r0, #4294967295
 801401e:	bd30      	pop	{r4, r5, pc}
 8014020:	42a3      	cmp	r3, r4
 8014022:	d3f3      	bcc.n	801400c <__mcmp+0x18>
 8014024:	e7fb      	b.n	801401e <__mcmp+0x2a>
 8014026:	2001      	movs	r0, #1
 8014028:	e7f9      	b.n	801401e <__mcmp+0x2a>
	...

0801402c <__mdiff>:
 801402c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	4689      	mov	r9, r1
 8014032:	4606      	mov	r6, r0
 8014034:	4611      	mov	r1, r2
 8014036:	4648      	mov	r0, r9
 8014038:	4614      	mov	r4, r2
 801403a:	f7ff ffdb 	bl	8013ff4 <__mcmp>
 801403e:	1e05      	subs	r5, r0, #0
 8014040:	d112      	bne.n	8014068 <__mdiff+0x3c>
 8014042:	4629      	mov	r1, r5
 8014044:	4630      	mov	r0, r6
 8014046:	f7ff fd5b 	bl	8013b00 <_Balloc>
 801404a:	4602      	mov	r2, r0
 801404c:	b928      	cbnz	r0, 801405a <__mdiff+0x2e>
 801404e:	4b3f      	ldr	r3, [pc, #252]	@ (801414c <__mdiff+0x120>)
 8014050:	f240 2137 	movw	r1, #567	@ 0x237
 8014054:	483e      	ldr	r0, [pc, #248]	@ (8014150 <__mdiff+0x124>)
 8014056:	f000 faf3 	bl	8014640 <__assert_func>
 801405a:	2301      	movs	r3, #1
 801405c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014060:	4610      	mov	r0, r2
 8014062:	b003      	add	sp, #12
 8014064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014068:	bfbc      	itt	lt
 801406a:	464b      	movlt	r3, r9
 801406c:	46a1      	movlt	r9, r4
 801406e:	4630      	mov	r0, r6
 8014070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014074:	bfba      	itte	lt
 8014076:	461c      	movlt	r4, r3
 8014078:	2501      	movlt	r5, #1
 801407a:	2500      	movge	r5, #0
 801407c:	f7ff fd40 	bl	8013b00 <_Balloc>
 8014080:	4602      	mov	r2, r0
 8014082:	b918      	cbnz	r0, 801408c <__mdiff+0x60>
 8014084:	4b31      	ldr	r3, [pc, #196]	@ (801414c <__mdiff+0x120>)
 8014086:	f240 2145 	movw	r1, #581	@ 0x245
 801408a:	e7e3      	b.n	8014054 <__mdiff+0x28>
 801408c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014090:	6926      	ldr	r6, [r4, #16]
 8014092:	60c5      	str	r5, [r0, #12]
 8014094:	f109 0310 	add.w	r3, r9, #16
 8014098:	f109 0514 	add.w	r5, r9, #20
 801409c:	f104 0e14 	add.w	lr, r4, #20
 80140a0:	f100 0b14 	add.w	fp, r0, #20
 80140a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80140a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80140ac:	9301      	str	r3, [sp, #4]
 80140ae:	46d9      	mov	r9, fp
 80140b0:	f04f 0c00 	mov.w	ip, #0
 80140b4:	9b01      	ldr	r3, [sp, #4]
 80140b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80140ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80140be:	9301      	str	r3, [sp, #4]
 80140c0:	fa1f f38a 	uxth.w	r3, sl
 80140c4:	4619      	mov	r1, r3
 80140c6:	b283      	uxth	r3, r0
 80140c8:	1acb      	subs	r3, r1, r3
 80140ca:	0c00      	lsrs	r0, r0, #16
 80140cc:	4463      	add	r3, ip
 80140ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80140d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80140dc:	4576      	cmp	r6, lr
 80140de:	f849 3b04 	str.w	r3, [r9], #4
 80140e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140e6:	d8e5      	bhi.n	80140b4 <__mdiff+0x88>
 80140e8:	1b33      	subs	r3, r6, r4
 80140ea:	3b15      	subs	r3, #21
 80140ec:	f023 0303 	bic.w	r3, r3, #3
 80140f0:	3415      	adds	r4, #21
 80140f2:	3304      	adds	r3, #4
 80140f4:	42a6      	cmp	r6, r4
 80140f6:	bf38      	it	cc
 80140f8:	2304      	movcc	r3, #4
 80140fa:	441d      	add	r5, r3
 80140fc:	445b      	add	r3, fp
 80140fe:	461e      	mov	r6, r3
 8014100:	462c      	mov	r4, r5
 8014102:	4544      	cmp	r4, r8
 8014104:	d30e      	bcc.n	8014124 <__mdiff+0xf8>
 8014106:	f108 0103 	add.w	r1, r8, #3
 801410a:	1b49      	subs	r1, r1, r5
 801410c:	f021 0103 	bic.w	r1, r1, #3
 8014110:	3d03      	subs	r5, #3
 8014112:	45a8      	cmp	r8, r5
 8014114:	bf38      	it	cc
 8014116:	2100      	movcc	r1, #0
 8014118:	440b      	add	r3, r1
 801411a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801411e:	b191      	cbz	r1, 8014146 <__mdiff+0x11a>
 8014120:	6117      	str	r7, [r2, #16]
 8014122:	e79d      	b.n	8014060 <__mdiff+0x34>
 8014124:	f854 1b04 	ldr.w	r1, [r4], #4
 8014128:	46e6      	mov	lr, ip
 801412a:	0c08      	lsrs	r0, r1, #16
 801412c:	fa1c fc81 	uxtah	ip, ip, r1
 8014130:	4471      	add	r1, lr
 8014132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014136:	b289      	uxth	r1, r1
 8014138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801413c:	f846 1b04 	str.w	r1, [r6], #4
 8014140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014144:	e7dd      	b.n	8014102 <__mdiff+0xd6>
 8014146:	3f01      	subs	r7, #1
 8014148:	e7e7      	b.n	801411a <__mdiff+0xee>
 801414a:	bf00      	nop
 801414c:	08017590 	.word	0x08017590
 8014150:	080175a1 	.word	0x080175a1

08014154 <__d2b>:
 8014154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014158:	460f      	mov	r7, r1
 801415a:	2101      	movs	r1, #1
 801415c:	ec59 8b10 	vmov	r8, r9, d0
 8014160:	4616      	mov	r6, r2
 8014162:	f7ff fccd 	bl	8013b00 <_Balloc>
 8014166:	4604      	mov	r4, r0
 8014168:	b930      	cbnz	r0, 8014178 <__d2b+0x24>
 801416a:	4602      	mov	r2, r0
 801416c:	4b23      	ldr	r3, [pc, #140]	@ (80141fc <__d2b+0xa8>)
 801416e:	4824      	ldr	r0, [pc, #144]	@ (8014200 <__d2b+0xac>)
 8014170:	f240 310f 	movw	r1, #783	@ 0x30f
 8014174:	f000 fa64 	bl	8014640 <__assert_func>
 8014178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801417c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014180:	b10d      	cbz	r5, 8014186 <__d2b+0x32>
 8014182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	f1b8 0300 	subs.w	r3, r8, #0
 801418c:	d023      	beq.n	80141d6 <__d2b+0x82>
 801418e:	4668      	mov	r0, sp
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	f7ff fd7c 	bl	8013c8e <__lo0bits>
 8014196:	e9dd 1200 	ldrd	r1, r2, [sp]
 801419a:	b1d0      	cbz	r0, 80141d2 <__d2b+0x7e>
 801419c:	f1c0 0320 	rsb	r3, r0, #32
 80141a0:	fa02 f303 	lsl.w	r3, r2, r3
 80141a4:	430b      	orrs	r3, r1
 80141a6:	40c2      	lsrs	r2, r0
 80141a8:	6163      	str	r3, [r4, #20]
 80141aa:	9201      	str	r2, [sp, #4]
 80141ac:	9b01      	ldr	r3, [sp, #4]
 80141ae:	61a3      	str	r3, [r4, #24]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	bf0c      	ite	eq
 80141b4:	2201      	moveq	r2, #1
 80141b6:	2202      	movne	r2, #2
 80141b8:	6122      	str	r2, [r4, #16]
 80141ba:	b1a5      	cbz	r5, 80141e6 <__d2b+0x92>
 80141bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80141c0:	4405      	add	r5, r0
 80141c2:	603d      	str	r5, [r7, #0]
 80141c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80141c8:	6030      	str	r0, [r6, #0]
 80141ca:	4620      	mov	r0, r4
 80141cc:	b003      	add	sp, #12
 80141ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d2:	6161      	str	r1, [r4, #20]
 80141d4:	e7ea      	b.n	80141ac <__d2b+0x58>
 80141d6:	a801      	add	r0, sp, #4
 80141d8:	f7ff fd59 	bl	8013c8e <__lo0bits>
 80141dc:	9b01      	ldr	r3, [sp, #4]
 80141de:	6163      	str	r3, [r4, #20]
 80141e0:	3020      	adds	r0, #32
 80141e2:	2201      	movs	r2, #1
 80141e4:	e7e8      	b.n	80141b8 <__d2b+0x64>
 80141e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80141ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80141ee:	6038      	str	r0, [r7, #0]
 80141f0:	6918      	ldr	r0, [r3, #16]
 80141f2:	f7ff fd2d 	bl	8013c50 <__hi0bits>
 80141f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80141fa:	e7e5      	b.n	80141c8 <__d2b+0x74>
 80141fc:	08017590 	.word	0x08017590
 8014200:	080175a1 	.word	0x080175a1

08014204 <__ssputs_r>:
 8014204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014208:	688e      	ldr	r6, [r1, #8]
 801420a:	461f      	mov	r7, r3
 801420c:	42be      	cmp	r6, r7
 801420e:	680b      	ldr	r3, [r1, #0]
 8014210:	4682      	mov	sl, r0
 8014212:	460c      	mov	r4, r1
 8014214:	4690      	mov	r8, r2
 8014216:	d82d      	bhi.n	8014274 <__ssputs_r+0x70>
 8014218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801421c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014220:	d026      	beq.n	8014270 <__ssputs_r+0x6c>
 8014222:	6965      	ldr	r5, [r4, #20]
 8014224:	6909      	ldr	r1, [r1, #16]
 8014226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801422a:	eba3 0901 	sub.w	r9, r3, r1
 801422e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014232:	1c7b      	adds	r3, r7, #1
 8014234:	444b      	add	r3, r9
 8014236:	106d      	asrs	r5, r5, #1
 8014238:	429d      	cmp	r5, r3
 801423a:	bf38      	it	cc
 801423c:	461d      	movcc	r5, r3
 801423e:	0553      	lsls	r3, r2, #21
 8014240:	d527      	bpl.n	8014292 <__ssputs_r+0x8e>
 8014242:	4629      	mov	r1, r5
 8014244:	f7fd ffac 	bl	80121a0 <_malloc_r>
 8014248:	4606      	mov	r6, r0
 801424a:	b360      	cbz	r0, 80142a6 <__ssputs_r+0xa2>
 801424c:	6921      	ldr	r1, [r4, #16]
 801424e:	464a      	mov	r2, r9
 8014250:	f7fe fe1f 	bl	8012e92 <memcpy>
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801425a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801425e:	81a3      	strh	r3, [r4, #12]
 8014260:	6126      	str	r6, [r4, #16]
 8014262:	6165      	str	r5, [r4, #20]
 8014264:	444e      	add	r6, r9
 8014266:	eba5 0509 	sub.w	r5, r5, r9
 801426a:	6026      	str	r6, [r4, #0]
 801426c:	60a5      	str	r5, [r4, #8]
 801426e:	463e      	mov	r6, r7
 8014270:	42be      	cmp	r6, r7
 8014272:	d900      	bls.n	8014276 <__ssputs_r+0x72>
 8014274:	463e      	mov	r6, r7
 8014276:	6820      	ldr	r0, [r4, #0]
 8014278:	4632      	mov	r2, r6
 801427a:	4641      	mov	r1, r8
 801427c:	f000 f9c6 	bl	801460c <memmove>
 8014280:	68a3      	ldr	r3, [r4, #8]
 8014282:	1b9b      	subs	r3, r3, r6
 8014284:	60a3      	str	r3, [r4, #8]
 8014286:	6823      	ldr	r3, [r4, #0]
 8014288:	4433      	add	r3, r6
 801428a:	6023      	str	r3, [r4, #0]
 801428c:	2000      	movs	r0, #0
 801428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014292:	462a      	mov	r2, r5
 8014294:	f000 fa18 	bl	80146c8 <_realloc_r>
 8014298:	4606      	mov	r6, r0
 801429a:	2800      	cmp	r0, #0
 801429c:	d1e0      	bne.n	8014260 <__ssputs_r+0x5c>
 801429e:	6921      	ldr	r1, [r4, #16]
 80142a0:	4650      	mov	r0, sl
 80142a2:	f7ff fbe3 	bl	8013a6c <_free_r>
 80142a6:	230c      	movs	r3, #12
 80142a8:	f8ca 3000 	str.w	r3, [sl]
 80142ac:	89a3      	ldrh	r3, [r4, #12]
 80142ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142b2:	81a3      	strh	r3, [r4, #12]
 80142b4:	f04f 30ff 	mov.w	r0, #4294967295
 80142b8:	e7e9      	b.n	801428e <__ssputs_r+0x8a>
	...

080142bc <_svfiprintf_r>:
 80142bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c0:	4698      	mov	r8, r3
 80142c2:	898b      	ldrh	r3, [r1, #12]
 80142c4:	061b      	lsls	r3, r3, #24
 80142c6:	b09d      	sub	sp, #116	@ 0x74
 80142c8:	4607      	mov	r7, r0
 80142ca:	460d      	mov	r5, r1
 80142cc:	4614      	mov	r4, r2
 80142ce:	d510      	bpl.n	80142f2 <_svfiprintf_r+0x36>
 80142d0:	690b      	ldr	r3, [r1, #16]
 80142d2:	b973      	cbnz	r3, 80142f2 <_svfiprintf_r+0x36>
 80142d4:	2140      	movs	r1, #64	@ 0x40
 80142d6:	f7fd ff63 	bl	80121a0 <_malloc_r>
 80142da:	6028      	str	r0, [r5, #0]
 80142dc:	6128      	str	r0, [r5, #16]
 80142de:	b930      	cbnz	r0, 80142ee <_svfiprintf_r+0x32>
 80142e0:	230c      	movs	r3, #12
 80142e2:	603b      	str	r3, [r7, #0]
 80142e4:	f04f 30ff 	mov.w	r0, #4294967295
 80142e8:	b01d      	add	sp, #116	@ 0x74
 80142ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ee:	2340      	movs	r3, #64	@ 0x40
 80142f0:	616b      	str	r3, [r5, #20]
 80142f2:	2300      	movs	r3, #0
 80142f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80142f6:	2320      	movs	r3, #32
 80142f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80142fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014300:	2330      	movs	r3, #48	@ 0x30
 8014302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80144a0 <_svfiprintf_r+0x1e4>
 8014306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801430a:	f04f 0901 	mov.w	r9, #1
 801430e:	4623      	mov	r3, r4
 8014310:	469a      	mov	sl, r3
 8014312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014316:	b10a      	cbz	r2, 801431c <_svfiprintf_r+0x60>
 8014318:	2a25      	cmp	r2, #37	@ 0x25
 801431a:	d1f9      	bne.n	8014310 <_svfiprintf_r+0x54>
 801431c:	ebba 0b04 	subs.w	fp, sl, r4
 8014320:	d00b      	beq.n	801433a <_svfiprintf_r+0x7e>
 8014322:	465b      	mov	r3, fp
 8014324:	4622      	mov	r2, r4
 8014326:	4629      	mov	r1, r5
 8014328:	4638      	mov	r0, r7
 801432a:	f7ff ff6b 	bl	8014204 <__ssputs_r>
 801432e:	3001      	adds	r0, #1
 8014330:	f000 80a7 	beq.w	8014482 <_svfiprintf_r+0x1c6>
 8014334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014336:	445a      	add	r2, fp
 8014338:	9209      	str	r2, [sp, #36]	@ 0x24
 801433a:	f89a 3000 	ldrb.w	r3, [sl]
 801433e:	2b00      	cmp	r3, #0
 8014340:	f000 809f 	beq.w	8014482 <_svfiprintf_r+0x1c6>
 8014344:	2300      	movs	r3, #0
 8014346:	f04f 32ff 	mov.w	r2, #4294967295
 801434a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801434e:	f10a 0a01 	add.w	sl, sl, #1
 8014352:	9304      	str	r3, [sp, #16]
 8014354:	9307      	str	r3, [sp, #28]
 8014356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801435a:	931a      	str	r3, [sp, #104]	@ 0x68
 801435c:	4654      	mov	r4, sl
 801435e:	2205      	movs	r2, #5
 8014360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014364:	484e      	ldr	r0, [pc, #312]	@ (80144a0 <_svfiprintf_r+0x1e4>)
 8014366:	f7eb ffbb 	bl	80002e0 <memchr>
 801436a:	9a04      	ldr	r2, [sp, #16]
 801436c:	b9d8      	cbnz	r0, 80143a6 <_svfiprintf_r+0xea>
 801436e:	06d0      	lsls	r0, r2, #27
 8014370:	bf44      	itt	mi
 8014372:	2320      	movmi	r3, #32
 8014374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014378:	0711      	lsls	r1, r2, #28
 801437a:	bf44      	itt	mi
 801437c:	232b      	movmi	r3, #43	@ 0x2b
 801437e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014382:	f89a 3000 	ldrb.w	r3, [sl]
 8014386:	2b2a      	cmp	r3, #42	@ 0x2a
 8014388:	d015      	beq.n	80143b6 <_svfiprintf_r+0xfa>
 801438a:	9a07      	ldr	r2, [sp, #28]
 801438c:	4654      	mov	r4, sl
 801438e:	2000      	movs	r0, #0
 8014390:	f04f 0c0a 	mov.w	ip, #10
 8014394:	4621      	mov	r1, r4
 8014396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801439a:	3b30      	subs	r3, #48	@ 0x30
 801439c:	2b09      	cmp	r3, #9
 801439e:	d94b      	bls.n	8014438 <_svfiprintf_r+0x17c>
 80143a0:	b1b0      	cbz	r0, 80143d0 <_svfiprintf_r+0x114>
 80143a2:	9207      	str	r2, [sp, #28]
 80143a4:	e014      	b.n	80143d0 <_svfiprintf_r+0x114>
 80143a6:	eba0 0308 	sub.w	r3, r0, r8
 80143aa:	fa09 f303 	lsl.w	r3, r9, r3
 80143ae:	4313      	orrs	r3, r2
 80143b0:	9304      	str	r3, [sp, #16]
 80143b2:	46a2      	mov	sl, r4
 80143b4:	e7d2      	b.n	801435c <_svfiprintf_r+0xa0>
 80143b6:	9b03      	ldr	r3, [sp, #12]
 80143b8:	1d19      	adds	r1, r3, #4
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	9103      	str	r1, [sp, #12]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	bfbb      	ittet	lt
 80143c2:	425b      	neglt	r3, r3
 80143c4:	f042 0202 	orrlt.w	r2, r2, #2
 80143c8:	9307      	strge	r3, [sp, #28]
 80143ca:	9307      	strlt	r3, [sp, #28]
 80143cc:	bfb8      	it	lt
 80143ce:	9204      	strlt	r2, [sp, #16]
 80143d0:	7823      	ldrb	r3, [r4, #0]
 80143d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80143d4:	d10a      	bne.n	80143ec <_svfiprintf_r+0x130>
 80143d6:	7863      	ldrb	r3, [r4, #1]
 80143d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80143da:	d132      	bne.n	8014442 <_svfiprintf_r+0x186>
 80143dc:	9b03      	ldr	r3, [sp, #12]
 80143de:	1d1a      	adds	r2, r3, #4
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	9203      	str	r2, [sp, #12]
 80143e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80143e8:	3402      	adds	r4, #2
 80143ea:	9305      	str	r3, [sp, #20]
 80143ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80144b0 <_svfiprintf_r+0x1f4>
 80143f0:	7821      	ldrb	r1, [r4, #0]
 80143f2:	2203      	movs	r2, #3
 80143f4:	4650      	mov	r0, sl
 80143f6:	f7eb ff73 	bl	80002e0 <memchr>
 80143fa:	b138      	cbz	r0, 801440c <_svfiprintf_r+0x150>
 80143fc:	9b04      	ldr	r3, [sp, #16]
 80143fe:	eba0 000a 	sub.w	r0, r0, sl
 8014402:	2240      	movs	r2, #64	@ 0x40
 8014404:	4082      	lsls	r2, r0
 8014406:	4313      	orrs	r3, r2
 8014408:	3401      	adds	r4, #1
 801440a:	9304      	str	r3, [sp, #16]
 801440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014410:	4824      	ldr	r0, [pc, #144]	@ (80144a4 <_svfiprintf_r+0x1e8>)
 8014412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014416:	2206      	movs	r2, #6
 8014418:	f7eb ff62 	bl	80002e0 <memchr>
 801441c:	2800      	cmp	r0, #0
 801441e:	d036      	beq.n	801448e <_svfiprintf_r+0x1d2>
 8014420:	4b21      	ldr	r3, [pc, #132]	@ (80144a8 <_svfiprintf_r+0x1ec>)
 8014422:	bb1b      	cbnz	r3, 801446c <_svfiprintf_r+0x1b0>
 8014424:	9b03      	ldr	r3, [sp, #12]
 8014426:	3307      	adds	r3, #7
 8014428:	f023 0307 	bic.w	r3, r3, #7
 801442c:	3308      	adds	r3, #8
 801442e:	9303      	str	r3, [sp, #12]
 8014430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014432:	4433      	add	r3, r6
 8014434:	9309      	str	r3, [sp, #36]	@ 0x24
 8014436:	e76a      	b.n	801430e <_svfiprintf_r+0x52>
 8014438:	fb0c 3202 	mla	r2, ip, r2, r3
 801443c:	460c      	mov	r4, r1
 801443e:	2001      	movs	r0, #1
 8014440:	e7a8      	b.n	8014394 <_svfiprintf_r+0xd8>
 8014442:	2300      	movs	r3, #0
 8014444:	3401      	adds	r4, #1
 8014446:	9305      	str	r3, [sp, #20]
 8014448:	4619      	mov	r1, r3
 801444a:	f04f 0c0a 	mov.w	ip, #10
 801444e:	4620      	mov	r0, r4
 8014450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014454:	3a30      	subs	r2, #48	@ 0x30
 8014456:	2a09      	cmp	r2, #9
 8014458:	d903      	bls.n	8014462 <_svfiprintf_r+0x1a6>
 801445a:	2b00      	cmp	r3, #0
 801445c:	d0c6      	beq.n	80143ec <_svfiprintf_r+0x130>
 801445e:	9105      	str	r1, [sp, #20]
 8014460:	e7c4      	b.n	80143ec <_svfiprintf_r+0x130>
 8014462:	fb0c 2101 	mla	r1, ip, r1, r2
 8014466:	4604      	mov	r4, r0
 8014468:	2301      	movs	r3, #1
 801446a:	e7f0      	b.n	801444e <_svfiprintf_r+0x192>
 801446c:	ab03      	add	r3, sp, #12
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	462a      	mov	r2, r5
 8014472:	4b0e      	ldr	r3, [pc, #56]	@ (80144ac <_svfiprintf_r+0x1f0>)
 8014474:	a904      	add	r1, sp, #16
 8014476:	4638      	mov	r0, r7
 8014478:	f7fd ffae 	bl	80123d8 <_printf_float>
 801447c:	1c42      	adds	r2, r0, #1
 801447e:	4606      	mov	r6, r0
 8014480:	d1d6      	bne.n	8014430 <_svfiprintf_r+0x174>
 8014482:	89ab      	ldrh	r3, [r5, #12]
 8014484:	065b      	lsls	r3, r3, #25
 8014486:	f53f af2d 	bmi.w	80142e4 <_svfiprintf_r+0x28>
 801448a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801448c:	e72c      	b.n	80142e8 <_svfiprintf_r+0x2c>
 801448e:	ab03      	add	r3, sp, #12
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	462a      	mov	r2, r5
 8014494:	4b05      	ldr	r3, [pc, #20]	@ (80144ac <_svfiprintf_r+0x1f0>)
 8014496:	a904      	add	r1, sp, #16
 8014498:	4638      	mov	r0, r7
 801449a:	f7fe fa25 	bl	80128e8 <_printf_i>
 801449e:	e7ed      	b.n	801447c <_svfiprintf_r+0x1c0>
 80144a0:	080176f8 	.word	0x080176f8
 80144a4:	08017702 	.word	0x08017702
 80144a8:	080123d9 	.word	0x080123d9
 80144ac:	08014205 	.word	0x08014205
 80144b0:	080176fe 	.word	0x080176fe

080144b4 <__sflush_r>:
 80144b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144bc:	0716      	lsls	r6, r2, #28
 80144be:	4605      	mov	r5, r0
 80144c0:	460c      	mov	r4, r1
 80144c2:	d454      	bmi.n	801456e <__sflush_r+0xba>
 80144c4:	684b      	ldr	r3, [r1, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	dc02      	bgt.n	80144d0 <__sflush_r+0x1c>
 80144ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	dd48      	ble.n	8014562 <__sflush_r+0xae>
 80144d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144d2:	2e00      	cmp	r6, #0
 80144d4:	d045      	beq.n	8014562 <__sflush_r+0xae>
 80144d6:	2300      	movs	r3, #0
 80144d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80144dc:	682f      	ldr	r7, [r5, #0]
 80144de:	6a21      	ldr	r1, [r4, #32]
 80144e0:	602b      	str	r3, [r5, #0]
 80144e2:	d030      	beq.n	8014546 <__sflush_r+0x92>
 80144e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80144e6:	89a3      	ldrh	r3, [r4, #12]
 80144e8:	0759      	lsls	r1, r3, #29
 80144ea:	d505      	bpl.n	80144f8 <__sflush_r+0x44>
 80144ec:	6863      	ldr	r3, [r4, #4]
 80144ee:	1ad2      	subs	r2, r2, r3
 80144f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80144f2:	b10b      	cbz	r3, 80144f8 <__sflush_r+0x44>
 80144f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80144f6:	1ad2      	subs	r2, r2, r3
 80144f8:	2300      	movs	r3, #0
 80144fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80144fc:	6a21      	ldr	r1, [r4, #32]
 80144fe:	4628      	mov	r0, r5
 8014500:	47b0      	blx	r6
 8014502:	1c43      	adds	r3, r0, #1
 8014504:	89a3      	ldrh	r3, [r4, #12]
 8014506:	d106      	bne.n	8014516 <__sflush_r+0x62>
 8014508:	6829      	ldr	r1, [r5, #0]
 801450a:	291d      	cmp	r1, #29
 801450c:	d82b      	bhi.n	8014566 <__sflush_r+0xb2>
 801450e:	4a2a      	ldr	r2, [pc, #168]	@ (80145b8 <__sflush_r+0x104>)
 8014510:	410a      	asrs	r2, r1
 8014512:	07d6      	lsls	r6, r2, #31
 8014514:	d427      	bmi.n	8014566 <__sflush_r+0xb2>
 8014516:	2200      	movs	r2, #0
 8014518:	6062      	str	r2, [r4, #4]
 801451a:	04d9      	lsls	r1, r3, #19
 801451c:	6922      	ldr	r2, [r4, #16]
 801451e:	6022      	str	r2, [r4, #0]
 8014520:	d504      	bpl.n	801452c <__sflush_r+0x78>
 8014522:	1c42      	adds	r2, r0, #1
 8014524:	d101      	bne.n	801452a <__sflush_r+0x76>
 8014526:	682b      	ldr	r3, [r5, #0]
 8014528:	b903      	cbnz	r3, 801452c <__sflush_r+0x78>
 801452a:	6560      	str	r0, [r4, #84]	@ 0x54
 801452c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801452e:	602f      	str	r7, [r5, #0]
 8014530:	b1b9      	cbz	r1, 8014562 <__sflush_r+0xae>
 8014532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014536:	4299      	cmp	r1, r3
 8014538:	d002      	beq.n	8014540 <__sflush_r+0x8c>
 801453a:	4628      	mov	r0, r5
 801453c:	f7ff fa96 	bl	8013a6c <_free_r>
 8014540:	2300      	movs	r3, #0
 8014542:	6363      	str	r3, [r4, #52]	@ 0x34
 8014544:	e00d      	b.n	8014562 <__sflush_r+0xae>
 8014546:	2301      	movs	r3, #1
 8014548:	4628      	mov	r0, r5
 801454a:	47b0      	blx	r6
 801454c:	4602      	mov	r2, r0
 801454e:	1c50      	adds	r0, r2, #1
 8014550:	d1c9      	bne.n	80144e6 <__sflush_r+0x32>
 8014552:	682b      	ldr	r3, [r5, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d0c6      	beq.n	80144e6 <__sflush_r+0x32>
 8014558:	2b1d      	cmp	r3, #29
 801455a:	d001      	beq.n	8014560 <__sflush_r+0xac>
 801455c:	2b16      	cmp	r3, #22
 801455e:	d11e      	bne.n	801459e <__sflush_r+0xea>
 8014560:	602f      	str	r7, [r5, #0]
 8014562:	2000      	movs	r0, #0
 8014564:	e022      	b.n	80145ac <__sflush_r+0xf8>
 8014566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801456a:	b21b      	sxth	r3, r3
 801456c:	e01b      	b.n	80145a6 <__sflush_r+0xf2>
 801456e:	690f      	ldr	r7, [r1, #16]
 8014570:	2f00      	cmp	r7, #0
 8014572:	d0f6      	beq.n	8014562 <__sflush_r+0xae>
 8014574:	0793      	lsls	r3, r2, #30
 8014576:	680e      	ldr	r6, [r1, #0]
 8014578:	bf08      	it	eq
 801457a:	694b      	ldreq	r3, [r1, #20]
 801457c:	600f      	str	r7, [r1, #0]
 801457e:	bf18      	it	ne
 8014580:	2300      	movne	r3, #0
 8014582:	eba6 0807 	sub.w	r8, r6, r7
 8014586:	608b      	str	r3, [r1, #8]
 8014588:	f1b8 0f00 	cmp.w	r8, #0
 801458c:	dde9      	ble.n	8014562 <__sflush_r+0xae>
 801458e:	6a21      	ldr	r1, [r4, #32]
 8014590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014592:	4643      	mov	r3, r8
 8014594:	463a      	mov	r2, r7
 8014596:	4628      	mov	r0, r5
 8014598:	47b0      	blx	r6
 801459a:	2800      	cmp	r0, #0
 801459c:	dc08      	bgt.n	80145b0 <__sflush_r+0xfc>
 801459e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145a6:	81a3      	strh	r3, [r4, #12]
 80145a8:	f04f 30ff 	mov.w	r0, #4294967295
 80145ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b0:	4407      	add	r7, r0
 80145b2:	eba8 0800 	sub.w	r8, r8, r0
 80145b6:	e7e7      	b.n	8014588 <__sflush_r+0xd4>
 80145b8:	dfbffffe 	.word	0xdfbffffe

080145bc <_fflush_r>:
 80145bc:	b538      	push	{r3, r4, r5, lr}
 80145be:	690b      	ldr	r3, [r1, #16]
 80145c0:	4605      	mov	r5, r0
 80145c2:	460c      	mov	r4, r1
 80145c4:	b913      	cbnz	r3, 80145cc <_fflush_r+0x10>
 80145c6:	2500      	movs	r5, #0
 80145c8:	4628      	mov	r0, r5
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	b118      	cbz	r0, 80145d6 <_fflush_r+0x1a>
 80145ce:	6a03      	ldr	r3, [r0, #32]
 80145d0:	b90b      	cbnz	r3, 80145d6 <_fflush_r+0x1a>
 80145d2:	f7fe fb35 	bl	8012c40 <__sinit>
 80145d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0f3      	beq.n	80145c6 <_fflush_r+0xa>
 80145de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80145e0:	07d0      	lsls	r0, r2, #31
 80145e2:	d404      	bmi.n	80145ee <_fflush_r+0x32>
 80145e4:	0599      	lsls	r1, r3, #22
 80145e6:	d402      	bmi.n	80145ee <_fflush_r+0x32>
 80145e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145ea:	f7fe fc50 	bl	8012e8e <__retarget_lock_acquire_recursive>
 80145ee:	4628      	mov	r0, r5
 80145f0:	4621      	mov	r1, r4
 80145f2:	f7ff ff5f 	bl	80144b4 <__sflush_r>
 80145f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145f8:	07da      	lsls	r2, r3, #31
 80145fa:	4605      	mov	r5, r0
 80145fc:	d4e4      	bmi.n	80145c8 <_fflush_r+0xc>
 80145fe:	89a3      	ldrh	r3, [r4, #12]
 8014600:	059b      	lsls	r3, r3, #22
 8014602:	d4e1      	bmi.n	80145c8 <_fflush_r+0xc>
 8014604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014606:	f7fe fc43 	bl	8012e90 <__retarget_lock_release_recursive>
 801460a:	e7dd      	b.n	80145c8 <_fflush_r+0xc>

0801460c <memmove>:
 801460c:	4288      	cmp	r0, r1
 801460e:	b510      	push	{r4, lr}
 8014610:	eb01 0402 	add.w	r4, r1, r2
 8014614:	d902      	bls.n	801461c <memmove+0x10>
 8014616:	4284      	cmp	r4, r0
 8014618:	4623      	mov	r3, r4
 801461a:	d807      	bhi.n	801462c <memmove+0x20>
 801461c:	1e43      	subs	r3, r0, #1
 801461e:	42a1      	cmp	r1, r4
 8014620:	d008      	beq.n	8014634 <memmove+0x28>
 8014622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801462a:	e7f8      	b.n	801461e <memmove+0x12>
 801462c:	4402      	add	r2, r0
 801462e:	4601      	mov	r1, r0
 8014630:	428a      	cmp	r2, r1
 8014632:	d100      	bne.n	8014636 <memmove+0x2a>
 8014634:	bd10      	pop	{r4, pc}
 8014636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801463a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801463e:	e7f7      	b.n	8014630 <memmove+0x24>

08014640 <__assert_func>:
 8014640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014642:	4614      	mov	r4, r2
 8014644:	461a      	mov	r2, r3
 8014646:	4b09      	ldr	r3, [pc, #36]	@ (801466c <__assert_func+0x2c>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	4605      	mov	r5, r0
 801464c:	68d8      	ldr	r0, [r3, #12]
 801464e:	b954      	cbnz	r4, 8014666 <__assert_func+0x26>
 8014650:	4b07      	ldr	r3, [pc, #28]	@ (8014670 <__assert_func+0x30>)
 8014652:	461c      	mov	r4, r3
 8014654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014658:	9100      	str	r1, [sp, #0]
 801465a:	462b      	mov	r3, r5
 801465c:	4905      	ldr	r1, [pc, #20]	@ (8014674 <__assert_func+0x34>)
 801465e:	f000 f86f 	bl	8014740 <fiprintf>
 8014662:	f000 f87f 	bl	8014764 <abort>
 8014666:	4b04      	ldr	r3, [pc, #16]	@ (8014678 <__assert_func+0x38>)
 8014668:	e7f4      	b.n	8014654 <__assert_func+0x14>
 801466a:	bf00      	nop
 801466c:	24000140 	.word	0x24000140
 8014670:	0801774e 	.word	0x0801774e
 8014674:	08017720 	.word	0x08017720
 8014678:	08017713 	.word	0x08017713

0801467c <_calloc_r>:
 801467c:	b570      	push	{r4, r5, r6, lr}
 801467e:	fba1 5402 	umull	r5, r4, r1, r2
 8014682:	b93c      	cbnz	r4, 8014694 <_calloc_r+0x18>
 8014684:	4629      	mov	r1, r5
 8014686:	f7fd fd8b 	bl	80121a0 <_malloc_r>
 801468a:	4606      	mov	r6, r0
 801468c:	b928      	cbnz	r0, 801469a <_calloc_r+0x1e>
 801468e:	2600      	movs	r6, #0
 8014690:	4630      	mov	r0, r6
 8014692:	bd70      	pop	{r4, r5, r6, pc}
 8014694:	220c      	movs	r2, #12
 8014696:	6002      	str	r2, [r0, #0]
 8014698:	e7f9      	b.n	801468e <_calloc_r+0x12>
 801469a:	462a      	mov	r2, r5
 801469c:	4621      	mov	r1, r4
 801469e:	f7fe fb68 	bl	8012d72 <memset>
 80146a2:	e7f5      	b.n	8014690 <_calloc_r+0x14>

080146a4 <__ascii_mbtowc>:
 80146a4:	b082      	sub	sp, #8
 80146a6:	b901      	cbnz	r1, 80146aa <__ascii_mbtowc+0x6>
 80146a8:	a901      	add	r1, sp, #4
 80146aa:	b142      	cbz	r2, 80146be <__ascii_mbtowc+0x1a>
 80146ac:	b14b      	cbz	r3, 80146c2 <__ascii_mbtowc+0x1e>
 80146ae:	7813      	ldrb	r3, [r2, #0]
 80146b0:	600b      	str	r3, [r1, #0]
 80146b2:	7812      	ldrb	r2, [r2, #0]
 80146b4:	1e10      	subs	r0, r2, #0
 80146b6:	bf18      	it	ne
 80146b8:	2001      	movne	r0, #1
 80146ba:	b002      	add	sp, #8
 80146bc:	4770      	bx	lr
 80146be:	4610      	mov	r0, r2
 80146c0:	e7fb      	b.n	80146ba <__ascii_mbtowc+0x16>
 80146c2:	f06f 0001 	mvn.w	r0, #1
 80146c6:	e7f8      	b.n	80146ba <__ascii_mbtowc+0x16>

080146c8 <_realloc_r>:
 80146c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146cc:	4680      	mov	r8, r0
 80146ce:	4615      	mov	r5, r2
 80146d0:	460c      	mov	r4, r1
 80146d2:	b921      	cbnz	r1, 80146de <_realloc_r+0x16>
 80146d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146d8:	4611      	mov	r1, r2
 80146da:	f7fd bd61 	b.w	80121a0 <_malloc_r>
 80146de:	b92a      	cbnz	r2, 80146ec <_realloc_r+0x24>
 80146e0:	f7ff f9c4 	bl	8013a6c <_free_r>
 80146e4:	2400      	movs	r4, #0
 80146e6:	4620      	mov	r0, r4
 80146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ec:	f000 f841 	bl	8014772 <_malloc_usable_size_r>
 80146f0:	4285      	cmp	r5, r0
 80146f2:	4606      	mov	r6, r0
 80146f4:	d802      	bhi.n	80146fc <_realloc_r+0x34>
 80146f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80146fa:	d8f4      	bhi.n	80146e6 <_realloc_r+0x1e>
 80146fc:	4629      	mov	r1, r5
 80146fe:	4640      	mov	r0, r8
 8014700:	f7fd fd4e 	bl	80121a0 <_malloc_r>
 8014704:	4607      	mov	r7, r0
 8014706:	2800      	cmp	r0, #0
 8014708:	d0ec      	beq.n	80146e4 <_realloc_r+0x1c>
 801470a:	42b5      	cmp	r5, r6
 801470c:	462a      	mov	r2, r5
 801470e:	4621      	mov	r1, r4
 8014710:	bf28      	it	cs
 8014712:	4632      	movcs	r2, r6
 8014714:	f7fe fbbd 	bl	8012e92 <memcpy>
 8014718:	4621      	mov	r1, r4
 801471a:	4640      	mov	r0, r8
 801471c:	f7ff f9a6 	bl	8013a6c <_free_r>
 8014720:	463c      	mov	r4, r7
 8014722:	e7e0      	b.n	80146e6 <_realloc_r+0x1e>

08014724 <__ascii_wctomb>:
 8014724:	4603      	mov	r3, r0
 8014726:	4608      	mov	r0, r1
 8014728:	b141      	cbz	r1, 801473c <__ascii_wctomb+0x18>
 801472a:	2aff      	cmp	r2, #255	@ 0xff
 801472c:	d904      	bls.n	8014738 <__ascii_wctomb+0x14>
 801472e:	228a      	movs	r2, #138	@ 0x8a
 8014730:	601a      	str	r2, [r3, #0]
 8014732:	f04f 30ff 	mov.w	r0, #4294967295
 8014736:	4770      	bx	lr
 8014738:	700a      	strb	r2, [r1, #0]
 801473a:	2001      	movs	r0, #1
 801473c:	4770      	bx	lr
	...

08014740 <fiprintf>:
 8014740:	b40e      	push	{r1, r2, r3}
 8014742:	b503      	push	{r0, r1, lr}
 8014744:	4601      	mov	r1, r0
 8014746:	ab03      	add	r3, sp, #12
 8014748:	4805      	ldr	r0, [pc, #20]	@ (8014760 <fiprintf+0x20>)
 801474a:	f853 2b04 	ldr.w	r2, [r3], #4
 801474e:	6800      	ldr	r0, [r0, #0]
 8014750:	9301      	str	r3, [sp, #4]
 8014752:	f000 f83f 	bl	80147d4 <_vfiprintf_r>
 8014756:	b002      	add	sp, #8
 8014758:	f85d eb04 	ldr.w	lr, [sp], #4
 801475c:	b003      	add	sp, #12
 801475e:	4770      	bx	lr
 8014760:	24000140 	.word	0x24000140

08014764 <abort>:
 8014764:	b508      	push	{r3, lr}
 8014766:	2006      	movs	r0, #6
 8014768:	f000 fa08 	bl	8014b7c <raise>
 801476c:	2001      	movs	r0, #1
 801476e:	f7ed f85f 	bl	8001830 <_exit>

08014772 <_malloc_usable_size_r>:
 8014772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014776:	1f18      	subs	r0, r3, #4
 8014778:	2b00      	cmp	r3, #0
 801477a:	bfbc      	itt	lt
 801477c:	580b      	ldrlt	r3, [r1, r0]
 801477e:	18c0      	addlt	r0, r0, r3
 8014780:	4770      	bx	lr

08014782 <__sfputc_r>:
 8014782:	6893      	ldr	r3, [r2, #8]
 8014784:	3b01      	subs	r3, #1
 8014786:	2b00      	cmp	r3, #0
 8014788:	b410      	push	{r4}
 801478a:	6093      	str	r3, [r2, #8]
 801478c:	da08      	bge.n	80147a0 <__sfputc_r+0x1e>
 801478e:	6994      	ldr	r4, [r2, #24]
 8014790:	42a3      	cmp	r3, r4
 8014792:	db01      	blt.n	8014798 <__sfputc_r+0x16>
 8014794:	290a      	cmp	r1, #10
 8014796:	d103      	bne.n	80147a0 <__sfputc_r+0x1e>
 8014798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801479c:	f000 b932 	b.w	8014a04 <__swbuf_r>
 80147a0:	6813      	ldr	r3, [r2, #0]
 80147a2:	1c58      	adds	r0, r3, #1
 80147a4:	6010      	str	r0, [r2, #0]
 80147a6:	7019      	strb	r1, [r3, #0]
 80147a8:	4608      	mov	r0, r1
 80147aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <__sfputs_r>:
 80147b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147b2:	4606      	mov	r6, r0
 80147b4:	460f      	mov	r7, r1
 80147b6:	4614      	mov	r4, r2
 80147b8:	18d5      	adds	r5, r2, r3
 80147ba:	42ac      	cmp	r4, r5
 80147bc:	d101      	bne.n	80147c2 <__sfputs_r+0x12>
 80147be:	2000      	movs	r0, #0
 80147c0:	e007      	b.n	80147d2 <__sfputs_r+0x22>
 80147c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147c6:	463a      	mov	r2, r7
 80147c8:	4630      	mov	r0, r6
 80147ca:	f7ff ffda 	bl	8014782 <__sfputc_r>
 80147ce:	1c43      	adds	r3, r0, #1
 80147d0:	d1f3      	bne.n	80147ba <__sfputs_r+0xa>
 80147d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147d4 <_vfiprintf_r>:
 80147d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147d8:	460d      	mov	r5, r1
 80147da:	b09d      	sub	sp, #116	@ 0x74
 80147dc:	4614      	mov	r4, r2
 80147de:	4698      	mov	r8, r3
 80147e0:	4606      	mov	r6, r0
 80147e2:	b118      	cbz	r0, 80147ec <_vfiprintf_r+0x18>
 80147e4:	6a03      	ldr	r3, [r0, #32]
 80147e6:	b90b      	cbnz	r3, 80147ec <_vfiprintf_r+0x18>
 80147e8:	f7fe fa2a 	bl	8012c40 <__sinit>
 80147ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80147ee:	07d9      	lsls	r1, r3, #31
 80147f0:	d405      	bmi.n	80147fe <_vfiprintf_r+0x2a>
 80147f2:	89ab      	ldrh	r3, [r5, #12]
 80147f4:	059a      	lsls	r2, r3, #22
 80147f6:	d402      	bmi.n	80147fe <_vfiprintf_r+0x2a>
 80147f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80147fa:	f7fe fb48 	bl	8012e8e <__retarget_lock_acquire_recursive>
 80147fe:	89ab      	ldrh	r3, [r5, #12]
 8014800:	071b      	lsls	r3, r3, #28
 8014802:	d501      	bpl.n	8014808 <_vfiprintf_r+0x34>
 8014804:	692b      	ldr	r3, [r5, #16]
 8014806:	b99b      	cbnz	r3, 8014830 <_vfiprintf_r+0x5c>
 8014808:	4629      	mov	r1, r5
 801480a:	4630      	mov	r0, r6
 801480c:	f000 f938 	bl	8014a80 <__swsetup_r>
 8014810:	b170      	cbz	r0, 8014830 <_vfiprintf_r+0x5c>
 8014812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014814:	07dc      	lsls	r4, r3, #31
 8014816:	d504      	bpl.n	8014822 <_vfiprintf_r+0x4e>
 8014818:	f04f 30ff 	mov.w	r0, #4294967295
 801481c:	b01d      	add	sp, #116	@ 0x74
 801481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014822:	89ab      	ldrh	r3, [r5, #12]
 8014824:	0598      	lsls	r0, r3, #22
 8014826:	d4f7      	bmi.n	8014818 <_vfiprintf_r+0x44>
 8014828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801482a:	f7fe fb31 	bl	8012e90 <__retarget_lock_release_recursive>
 801482e:	e7f3      	b.n	8014818 <_vfiprintf_r+0x44>
 8014830:	2300      	movs	r3, #0
 8014832:	9309      	str	r3, [sp, #36]	@ 0x24
 8014834:	2320      	movs	r3, #32
 8014836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801483a:	f8cd 800c 	str.w	r8, [sp, #12]
 801483e:	2330      	movs	r3, #48	@ 0x30
 8014840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80149f0 <_vfiprintf_r+0x21c>
 8014844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014848:	f04f 0901 	mov.w	r9, #1
 801484c:	4623      	mov	r3, r4
 801484e:	469a      	mov	sl, r3
 8014850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014854:	b10a      	cbz	r2, 801485a <_vfiprintf_r+0x86>
 8014856:	2a25      	cmp	r2, #37	@ 0x25
 8014858:	d1f9      	bne.n	801484e <_vfiprintf_r+0x7a>
 801485a:	ebba 0b04 	subs.w	fp, sl, r4
 801485e:	d00b      	beq.n	8014878 <_vfiprintf_r+0xa4>
 8014860:	465b      	mov	r3, fp
 8014862:	4622      	mov	r2, r4
 8014864:	4629      	mov	r1, r5
 8014866:	4630      	mov	r0, r6
 8014868:	f7ff ffa2 	bl	80147b0 <__sfputs_r>
 801486c:	3001      	adds	r0, #1
 801486e:	f000 80a7 	beq.w	80149c0 <_vfiprintf_r+0x1ec>
 8014872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014874:	445a      	add	r2, fp
 8014876:	9209      	str	r2, [sp, #36]	@ 0x24
 8014878:	f89a 3000 	ldrb.w	r3, [sl]
 801487c:	2b00      	cmp	r3, #0
 801487e:	f000 809f 	beq.w	80149c0 <_vfiprintf_r+0x1ec>
 8014882:	2300      	movs	r3, #0
 8014884:	f04f 32ff 	mov.w	r2, #4294967295
 8014888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801488c:	f10a 0a01 	add.w	sl, sl, #1
 8014890:	9304      	str	r3, [sp, #16]
 8014892:	9307      	str	r3, [sp, #28]
 8014894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014898:	931a      	str	r3, [sp, #104]	@ 0x68
 801489a:	4654      	mov	r4, sl
 801489c:	2205      	movs	r2, #5
 801489e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148a2:	4853      	ldr	r0, [pc, #332]	@ (80149f0 <_vfiprintf_r+0x21c>)
 80148a4:	f7eb fd1c 	bl	80002e0 <memchr>
 80148a8:	9a04      	ldr	r2, [sp, #16]
 80148aa:	b9d8      	cbnz	r0, 80148e4 <_vfiprintf_r+0x110>
 80148ac:	06d1      	lsls	r1, r2, #27
 80148ae:	bf44      	itt	mi
 80148b0:	2320      	movmi	r3, #32
 80148b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148b6:	0713      	lsls	r3, r2, #28
 80148b8:	bf44      	itt	mi
 80148ba:	232b      	movmi	r3, #43	@ 0x2b
 80148bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80148c0:	f89a 3000 	ldrb.w	r3, [sl]
 80148c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80148c6:	d015      	beq.n	80148f4 <_vfiprintf_r+0x120>
 80148c8:	9a07      	ldr	r2, [sp, #28]
 80148ca:	4654      	mov	r4, sl
 80148cc:	2000      	movs	r0, #0
 80148ce:	f04f 0c0a 	mov.w	ip, #10
 80148d2:	4621      	mov	r1, r4
 80148d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80148d8:	3b30      	subs	r3, #48	@ 0x30
 80148da:	2b09      	cmp	r3, #9
 80148dc:	d94b      	bls.n	8014976 <_vfiprintf_r+0x1a2>
 80148de:	b1b0      	cbz	r0, 801490e <_vfiprintf_r+0x13a>
 80148e0:	9207      	str	r2, [sp, #28]
 80148e2:	e014      	b.n	801490e <_vfiprintf_r+0x13a>
 80148e4:	eba0 0308 	sub.w	r3, r0, r8
 80148e8:	fa09 f303 	lsl.w	r3, r9, r3
 80148ec:	4313      	orrs	r3, r2
 80148ee:	9304      	str	r3, [sp, #16]
 80148f0:	46a2      	mov	sl, r4
 80148f2:	e7d2      	b.n	801489a <_vfiprintf_r+0xc6>
 80148f4:	9b03      	ldr	r3, [sp, #12]
 80148f6:	1d19      	adds	r1, r3, #4
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	9103      	str	r1, [sp, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	bfbb      	ittet	lt
 8014900:	425b      	neglt	r3, r3
 8014902:	f042 0202 	orrlt.w	r2, r2, #2
 8014906:	9307      	strge	r3, [sp, #28]
 8014908:	9307      	strlt	r3, [sp, #28]
 801490a:	bfb8      	it	lt
 801490c:	9204      	strlt	r2, [sp, #16]
 801490e:	7823      	ldrb	r3, [r4, #0]
 8014910:	2b2e      	cmp	r3, #46	@ 0x2e
 8014912:	d10a      	bne.n	801492a <_vfiprintf_r+0x156>
 8014914:	7863      	ldrb	r3, [r4, #1]
 8014916:	2b2a      	cmp	r3, #42	@ 0x2a
 8014918:	d132      	bne.n	8014980 <_vfiprintf_r+0x1ac>
 801491a:	9b03      	ldr	r3, [sp, #12]
 801491c:	1d1a      	adds	r2, r3, #4
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	9203      	str	r2, [sp, #12]
 8014922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014926:	3402      	adds	r4, #2
 8014928:	9305      	str	r3, [sp, #20]
 801492a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014a00 <_vfiprintf_r+0x22c>
 801492e:	7821      	ldrb	r1, [r4, #0]
 8014930:	2203      	movs	r2, #3
 8014932:	4650      	mov	r0, sl
 8014934:	f7eb fcd4 	bl	80002e0 <memchr>
 8014938:	b138      	cbz	r0, 801494a <_vfiprintf_r+0x176>
 801493a:	9b04      	ldr	r3, [sp, #16]
 801493c:	eba0 000a 	sub.w	r0, r0, sl
 8014940:	2240      	movs	r2, #64	@ 0x40
 8014942:	4082      	lsls	r2, r0
 8014944:	4313      	orrs	r3, r2
 8014946:	3401      	adds	r4, #1
 8014948:	9304      	str	r3, [sp, #16]
 801494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801494e:	4829      	ldr	r0, [pc, #164]	@ (80149f4 <_vfiprintf_r+0x220>)
 8014950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014954:	2206      	movs	r2, #6
 8014956:	f7eb fcc3 	bl	80002e0 <memchr>
 801495a:	2800      	cmp	r0, #0
 801495c:	d03f      	beq.n	80149de <_vfiprintf_r+0x20a>
 801495e:	4b26      	ldr	r3, [pc, #152]	@ (80149f8 <_vfiprintf_r+0x224>)
 8014960:	bb1b      	cbnz	r3, 80149aa <_vfiprintf_r+0x1d6>
 8014962:	9b03      	ldr	r3, [sp, #12]
 8014964:	3307      	adds	r3, #7
 8014966:	f023 0307 	bic.w	r3, r3, #7
 801496a:	3308      	adds	r3, #8
 801496c:	9303      	str	r3, [sp, #12]
 801496e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014970:	443b      	add	r3, r7
 8014972:	9309      	str	r3, [sp, #36]	@ 0x24
 8014974:	e76a      	b.n	801484c <_vfiprintf_r+0x78>
 8014976:	fb0c 3202 	mla	r2, ip, r2, r3
 801497a:	460c      	mov	r4, r1
 801497c:	2001      	movs	r0, #1
 801497e:	e7a8      	b.n	80148d2 <_vfiprintf_r+0xfe>
 8014980:	2300      	movs	r3, #0
 8014982:	3401      	adds	r4, #1
 8014984:	9305      	str	r3, [sp, #20]
 8014986:	4619      	mov	r1, r3
 8014988:	f04f 0c0a 	mov.w	ip, #10
 801498c:	4620      	mov	r0, r4
 801498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014992:	3a30      	subs	r2, #48	@ 0x30
 8014994:	2a09      	cmp	r2, #9
 8014996:	d903      	bls.n	80149a0 <_vfiprintf_r+0x1cc>
 8014998:	2b00      	cmp	r3, #0
 801499a:	d0c6      	beq.n	801492a <_vfiprintf_r+0x156>
 801499c:	9105      	str	r1, [sp, #20]
 801499e:	e7c4      	b.n	801492a <_vfiprintf_r+0x156>
 80149a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80149a4:	4604      	mov	r4, r0
 80149a6:	2301      	movs	r3, #1
 80149a8:	e7f0      	b.n	801498c <_vfiprintf_r+0x1b8>
 80149aa:	ab03      	add	r3, sp, #12
 80149ac:	9300      	str	r3, [sp, #0]
 80149ae:	462a      	mov	r2, r5
 80149b0:	4b12      	ldr	r3, [pc, #72]	@ (80149fc <_vfiprintf_r+0x228>)
 80149b2:	a904      	add	r1, sp, #16
 80149b4:	4630      	mov	r0, r6
 80149b6:	f7fd fd0f 	bl	80123d8 <_printf_float>
 80149ba:	4607      	mov	r7, r0
 80149bc:	1c78      	adds	r0, r7, #1
 80149be:	d1d6      	bne.n	801496e <_vfiprintf_r+0x19a>
 80149c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80149c2:	07d9      	lsls	r1, r3, #31
 80149c4:	d405      	bmi.n	80149d2 <_vfiprintf_r+0x1fe>
 80149c6:	89ab      	ldrh	r3, [r5, #12]
 80149c8:	059a      	lsls	r2, r3, #22
 80149ca:	d402      	bmi.n	80149d2 <_vfiprintf_r+0x1fe>
 80149cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149ce:	f7fe fa5f 	bl	8012e90 <__retarget_lock_release_recursive>
 80149d2:	89ab      	ldrh	r3, [r5, #12]
 80149d4:	065b      	lsls	r3, r3, #25
 80149d6:	f53f af1f 	bmi.w	8014818 <_vfiprintf_r+0x44>
 80149da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80149dc:	e71e      	b.n	801481c <_vfiprintf_r+0x48>
 80149de:	ab03      	add	r3, sp, #12
 80149e0:	9300      	str	r3, [sp, #0]
 80149e2:	462a      	mov	r2, r5
 80149e4:	4b05      	ldr	r3, [pc, #20]	@ (80149fc <_vfiprintf_r+0x228>)
 80149e6:	a904      	add	r1, sp, #16
 80149e8:	4630      	mov	r0, r6
 80149ea:	f7fd ff7d 	bl	80128e8 <_printf_i>
 80149ee:	e7e4      	b.n	80149ba <_vfiprintf_r+0x1e6>
 80149f0:	080176f8 	.word	0x080176f8
 80149f4:	08017702 	.word	0x08017702
 80149f8:	080123d9 	.word	0x080123d9
 80149fc:	080147b1 	.word	0x080147b1
 8014a00:	080176fe 	.word	0x080176fe

08014a04 <__swbuf_r>:
 8014a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a06:	460e      	mov	r6, r1
 8014a08:	4614      	mov	r4, r2
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	b118      	cbz	r0, 8014a16 <__swbuf_r+0x12>
 8014a0e:	6a03      	ldr	r3, [r0, #32]
 8014a10:	b90b      	cbnz	r3, 8014a16 <__swbuf_r+0x12>
 8014a12:	f7fe f915 	bl	8012c40 <__sinit>
 8014a16:	69a3      	ldr	r3, [r4, #24]
 8014a18:	60a3      	str	r3, [r4, #8]
 8014a1a:	89a3      	ldrh	r3, [r4, #12]
 8014a1c:	071a      	lsls	r2, r3, #28
 8014a1e:	d501      	bpl.n	8014a24 <__swbuf_r+0x20>
 8014a20:	6923      	ldr	r3, [r4, #16]
 8014a22:	b943      	cbnz	r3, 8014a36 <__swbuf_r+0x32>
 8014a24:	4621      	mov	r1, r4
 8014a26:	4628      	mov	r0, r5
 8014a28:	f000 f82a 	bl	8014a80 <__swsetup_r>
 8014a2c:	b118      	cbz	r0, 8014a36 <__swbuf_r+0x32>
 8014a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8014a32:	4638      	mov	r0, r7
 8014a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	6922      	ldr	r2, [r4, #16]
 8014a3a:	1a98      	subs	r0, r3, r2
 8014a3c:	6963      	ldr	r3, [r4, #20]
 8014a3e:	b2f6      	uxtb	r6, r6
 8014a40:	4283      	cmp	r3, r0
 8014a42:	4637      	mov	r7, r6
 8014a44:	dc05      	bgt.n	8014a52 <__swbuf_r+0x4e>
 8014a46:	4621      	mov	r1, r4
 8014a48:	4628      	mov	r0, r5
 8014a4a:	f7ff fdb7 	bl	80145bc <_fflush_r>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d1ed      	bne.n	8014a2e <__swbuf_r+0x2a>
 8014a52:	68a3      	ldr	r3, [r4, #8]
 8014a54:	3b01      	subs	r3, #1
 8014a56:	60a3      	str	r3, [r4, #8]
 8014a58:	6823      	ldr	r3, [r4, #0]
 8014a5a:	1c5a      	adds	r2, r3, #1
 8014a5c:	6022      	str	r2, [r4, #0]
 8014a5e:	701e      	strb	r6, [r3, #0]
 8014a60:	6962      	ldr	r2, [r4, #20]
 8014a62:	1c43      	adds	r3, r0, #1
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d004      	beq.n	8014a72 <__swbuf_r+0x6e>
 8014a68:	89a3      	ldrh	r3, [r4, #12]
 8014a6a:	07db      	lsls	r3, r3, #31
 8014a6c:	d5e1      	bpl.n	8014a32 <__swbuf_r+0x2e>
 8014a6e:	2e0a      	cmp	r6, #10
 8014a70:	d1df      	bne.n	8014a32 <__swbuf_r+0x2e>
 8014a72:	4621      	mov	r1, r4
 8014a74:	4628      	mov	r0, r5
 8014a76:	f7ff fda1 	bl	80145bc <_fflush_r>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	d0d9      	beq.n	8014a32 <__swbuf_r+0x2e>
 8014a7e:	e7d6      	b.n	8014a2e <__swbuf_r+0x2a>

08014a80 <__swsetup_r>:
 8014a80:	b538      	push	{r3, r4, r5, lr}
 8014a82:	4b29      	ldr	r3, [pc, #164]	@ (8014b28 <__swsetup_r+0xa8>)
 8014a84:	4605      	mov	r5, r0
 8014a86:	6818      	ldr	r0, [r3, #0]
 8014a88:	460c      	mov	r4, r1
 8014a8a:	b118      	cbz	r0, 8014a94 <__swsetup_r+0x14>
 8014a8c:	6a03      	ldr	r3, [r0, #32]
 8014a8e:	b90b      	cbnz	r3, 8014a94 <__swsetup_r+0x14>
 8014a90:	f7fe f8d6 	bl	8012c40 <__sinit>
 8014a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a98:	0719      	lsls	r1, r3, #28
 8014a9a:	d422      	bmi.n	8014ae2 <__swsetup_r+0x62>
 8014a9c:	06da      	lsls	r2, r3, #27
 8014a9e:	d407      	bmi.n	8014ab0 <__swsetup_r+0x30>
 8014aa0:	2209      	movs	r2, #9
 8014aa2:	602a      	str	r2, [r5, #0]
 8014aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8014aae:	e033      	b.n	8014b18 <__swsetup_r+0x98>
 8014ab0:	0758      	lsls	r0, r3, #29
 8014ab2:	d512      	bpl.n	8014ada <__swsetup_r+0x5a>
 8014ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ab6:	b141      	cbz	r1, 8014aca <__swsetup_r+0x4a>
 8014ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014abc:	4299      	cmp	r1, r3
 8014abe:	d002      	beq.n	8014ac6 <__swsetup_r+0x46>
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	f7fe ffd3 	bl	8013a6c <_free_r>
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8014aca:	89a3      	ldrh	r3, [r4, #12]
 8014acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ad0:	81a3      	strh	r3, [r4, #12]
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	6063      	str	r3, [r4, #4]
 8014ad6:	6923      	ldr	r3, [r4, #16]
 8014ad8:	6023      	str	r3, [r4, #0]
 8014ada:	89a3      	ldrh	r3, [r4, #12]
 8014adc:	f043 0308 	orr.w	r3, r3, #8
 8014ae0:	81a3      	strh	r3, [r4, #12]
 8014ae2:	6923      	ldr	r3, [r4, #16]
 8014ae4:	b94b      	cbnz	r3, 8014afa <__swsetup_r+0x7a>
 8014ae6:	89a3      	ldrh	r3, [r4, #12]
 8014ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014af0:	d003      	beq.n	8014afa <__swsetup_r+0x7a>
 8014af2:	4621      	mov	r1, r4
 8014af4:	4628      	mov	r0, r5
 8014af6:	f000 f883 	bl	8014c00 <__smakebuf_r>
 8014afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014afe:	f013 0201 	ands.w	r2, r3, #1
 8014b02:	d00a      	beq.n	8014b1a <__swsetup_r+0x9a>
 8014b04:	2200      	movs	r2, #0
 8014b06:	60a2      	str	r2, [r4, #8]
 8014b08:	6962      	ldr	r2, [r4, #20]
 8014b0a:	4252      	negs	r2, r2
 8014b0c:	61a2      	str	r2, [r4, #24]
 8014b0e:	6922      	ldr	r2, [r4, #16]
 8014b10:	b942      	cbnz	r2, 8014b24 <__swsetup_r+0xa4>
 8014b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b16:	d1c5      	bne.n	8014aa4 <__swsetup_r+0x24>
 8014b18:	bd38      	pop	{r3, r4, r5, pc}
 8014b1a:	0799      	lsls	r1, r3, #30
 8014b1c:	bf58      	it	pl
 8014b1e:	6962      	ldrpl	r2, [r4, #20]
 8014b20:	60a2      	str	r2, [r4, #8]
 8014b22:	e7f4      	b.n	8014b0e <__swsetup_r+0x8e>
 8014b24:	2000      	movs	r0, #0
 8014b26:	e7f7      	b.n	8014b18 <__swsetup_r+0x98>
 8014b28:	24000140 	.word	0x24000140

08014b2c <_raise_r>:
 8014b2c:	291f      	cmp	r1, #31
 8014b2e:	b538      	push	{r3, r4, r5, lr}
 8014b30:	4605      	mov	r5, r0
 8014b32:	460c      	mov	r4, r1
 8014b34:	d904      	bls.n	8014b40 <_raise_r+0x14>
 8014b36:	2316      	movs	r3, #22
 8014b38:	6003      	str	r3, [r0, #0]
 8014b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b3e:	bd38      	pop	{r3, r4, r5, pc}
 8014b40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014b42:	b112      	cbz	r2, 8014b4a <_raise_r+0x1e>
 8014b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b48:	b94b      	cbnz	r3, 8014b5e <_raise_r+0x32>
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f000 f830 	bl	8014bb0 <_getpid_r>
 8014b50:	4622      	mov	r2, r4
 8014b52:	4601      	mov	r1, r0
 8014b54:	4628      	mov	r0, r5
 8014b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b5a:	f000 b817 	b.w	8014b8c <_kill_r>
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d00a      	beq.n	8014b78 <_raise_r+0x4c>
 8014b62:	1c59      	adds	r1, r3, #1
 8014b64:	d103      	bne.n	8014b6e <_raise_r+0x42>
 8014b66:	2316      	movs	r3, #22
 8014b68:	6003      	str	r3, [r0, #0]
 8014b6a:	2001      	movs	r0, #1
 8014b6c:	e7e7      	b.n	8014b3e <_raise_r+0x12>
 8014b6e:	2100      	movs	r1, #0
 8014b70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014b74:	4620      	mov	r0, r4
 8014b76:	4798      	blx	r3
 8014b78:	2000      	movs	r0, #0
 8014b7a:	e7e0      	b.n	8014b3e <_raise_r+0x12>

08014b7c <raise>:
 8014b7c:	4b02      	ldr	r3, [pc, #8]	@ (8014b88 <raise+0xc>)
 8014b7e:	4601      	mov	r1, r0
 8014b80:	6818      	ldr	r0, [r3, #0]
 8014b82:	f7ff bfd3 	b.w	8014b2c <_raise_r>
 8014b86:	bf00      	nop
 8014b88:	24000140 	.word	0x24000140

08014b8c <_kill_r>:
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4d07      	ldr	r5, [pc, #28]	@ (8014bac <_kill_r+0x20>)
 8014b90:	2300      	movs	r3, #0
 8014b92:	4604      	mov	r4, r0
 8014b94:	4608      	mov	r0, r1
 8014b96:	4611      	mov	r1, r2
 8014b98:	602b      	str	r3, [r5, #0]
 8014b9a:	f7ec fe39 	bl	8001810 <_kill>
 8014b9e:	1c43      	adds	r3, r0, #1
 8014ba0:	d102      	bne.n	8014ba8 <_kill_r+0x1c>
 8014ba2:	682b      	ldr	r3, [r5, #0]
 8014ba4:	b103      	cbz	r3, 8014ba8 <_kill_r+0x1c>
 8014ba6:	6023      	str	r3, [r4, #0]
 8014ba8:	bd38      	pop	{r3, r4, r5, pc}
 8014baa:	bf00      	nop
 8014bac:	2400966c 	.word	0x2400966c

08014bb0 <_getpid_r>:
 8014bb0:	f7ec be26 	b.w	8001800 <_getpid>

08014bb4 <__swhatbuf_r>:
 8014bb4:	b570      	push	{r4, r5, r6, lr}
 8014bb6:	460c      	mov	r4, r1
 8014bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bbc:	2900      	cmp	r1, #0
 8014bbe:	b096      	sub	sp, #88	@ 0x58
 8014bc0:	4615      	mov	r5, r2
 8014bc2:	461e      	mov	r6, r3
 8014bc4:	da0d      	bge.n	8014be2 <__swhatbuf_r+0x2e>
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014bcc:	f04f 0100 	mov.w	r1, #0
 8014bd0:	bf14      	ite	ne
 8014bd2:	2340      	movne	r3, #64	@ 0x40
 8014bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014bd8:	2000      	movs	r0, #0
 8014bda:	6031      	str	r1, [r6, #0]
 8014bdc:	602b      	str	r3, [r5, #0]
 8014bde:	b016      	add	sp, #88	@ 0x58
 8014be0:	bd70      	pop	{r4, r5, r6, pc}
 8014be2:	466a      	mov	r2, sp
 8014be4:	f000 f848 	bl	8014c78 <_fstat_r>
 8014be8:	2800      	cmp	r0, #0
 8014bea:	dbec      	blt.n	8014bc6 <__swhatbuf_r+0x12>
 8014bec:	9901      	ldr	r1, [sp, #4]
 8014bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014bf6:	4259      	negs	r1, r3
 8014bf8:	4159      	adcs	r1, r3
 8014bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014bfe:	e7eb      	b.n	8014bd8 <__swhatbuf_r+0x24>

08014c00 <__smakebuf_r>:
 8014c00:	898b      	ldrh	r3, [r1, #12]
 8014c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c04:	079d      	lsls	r5, r3, #30
 8014c06:	4606      	mov	r6, r0
 8014c08:	460c      	mov	r4, r1
 8014c0a:	d507      	bpl.n	8014c1c <__smakebuf_r+0x1c>
 8014c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014c10:	6023      	str	r3, [r4, #0]
 8014c12:	6123      	str	r3, [r4, #16]
 8014c14:	2301      	movs	r3, #1
 8014c16:	6163      	str	r3, [r4, #20]
 8014c18:	b003      	add	sp, #12
 8014c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c1c:	ab01      	add	r3, sp, #4
 8014c1e:	466a      	mov	r2, sp
 8014c20:	f7ff ffc8 	bl	8014bb4 <__swhatbuf_r>
 8014c24:	9f00      	ldr	r7, [sp, #0]
 8014c26:	4605      	mov	r5, r0
 8014c28:	4639      	mov	r1, r7
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	f7fd fab8 	bl	80121a0 <_malloc_r>
 8014c30:	b948      	cbnz	r0, 8014c46 <__smakebuf_r+0x46>
 8014c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c36:	059a      	lsls	r2, r3, #22
 8014c38:	d4ee      	bmi.n	8014c18 <__smakebuf_r+0x18>
 8014c3a:	f023 0303 	bic.w	r3, r3, #3
 8014c3e:	f043 0302 	orr.w	r3, r3, #2
 8014c42:	81a3      	strh	r3, [r4, #12]
 8014c44:	e7e2      	b.n	8014c0c <__smakebuf_r+0xc>
 8014c46:	89a3      	ldrh	r3, [r4, #12]
 8014c48:	6020      	str	r0, [r4, #0]
 8014c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c4e:	81a3      	strh	r3, [r4, #12]
 8014c50:	9b01      	ldr	r3, [sp, #4]
 8014c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014c56:	b15b      	cbz	r3, 8014c70 <__smakebuf_r+0x70>
 8014c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	f000 f81d 	bl	8014c9c <_isatty_r>
 8014c62:	b128      	cbz	r0, 8014c70 <__smakebuf_r+0x70>
 8014c64:	89a3      	ldrh	r3, [r4, #12]
 8014c66:	f023 0303 	bic.w	r3, r3, #3
 8014c6a:	f043 0301 	orr.w	r3, r3, #1
 8014c6e:	81a3      	strh	r3, [r4, #12]
 8014c70:	89a3      	ldrh	r3, [r4, #12]
 8014c72:	431d      	orrs	r5, r3
 8014c74:	81a5      	strh	r5, [r4, #12]
 8014c76:	e7cf      	b.n	8014c18 <__smakebuf_r+0x18>

08014c78 <_fstat_r>:
 8014c78:	b538      	push	{r3, r4, r5, lr}
 8014c7a:	4d07      	ldr	r5, [pc, #28]	@ (8014c98 <_fstat_r+0x20>)
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	4604      	mov	r4, r0
 8014c80:	4608      	mov	r0, r1
 8014c82:	4611      	mov	r1, r2
 8014c84:	602b      	str	r3, [r5, #0]
 8014c86:	f7ec fe23 	bl	80018d0 <_fstat>
 8014c8a:	1c43      	adds	r3, r0, #1
 8014c8c:	d102      	bne.n	8014c94 <_fstat_r+0x1c>
 8014c8e:	682b      	ldr	r3, [r5, #0]
 8014c90:	b103      	cbz	r3, 8014c94 <_fstat_r+0x1c>
 8014c92:	6023      	str	r3, [r4, #0]
 8014c94:	bd38      	pop	{r3, r4, r5, pc}
 8014c96:	bf00      	nop
 8014c98:	2400966c 	.word	0x2400966c

08014c9c <_isatty_r>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	4d06      	ldr	r5, [pc, #24]	@ (8014cb8 <_isatty_r+0x1c>)
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	4608      	mov	r0, r1
 8014ca6:	602b      	str	r3, [r5, #0]
 8014ca8:	f7ec fe22 	bl	80018f0 <_isatty>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_isatty_r+0x1a>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_isatty_r+0x1a>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	2400966c 	.word	0x2400966c
 8014cbc:	00000000 	.word	0x00000000

08014cc0 <fmod>:
 8014cc0:	b508      	push	{r3, lr}
 8014cc2:	ed2d 8b04 	vpush	{d8-d9}
 8014cc6:	eeb0 9b40 	vmov.f64	d9, d0
 8014cca:	eeb0 8b41 	vmov.f64	d8, d1
 8014cce:	f000 f8ef 	bl	8014eb0 <__ieee754_fmod>
 8014cd2:	eeb4 9b48 	vcmp.f64	d9, d8
 8014cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cda:	d60c      	bvs.n	8014cf6 <fmod+0x36>
 8014cdc:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014d00 <fmod+0x40>
 8014ce0:	eeb4 8b49 	vcmp.f64	d8, d9
 8014ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce8:	d105      	bne.n	8014cf6 <fmod+0x36>
 8014cea:	f7fe f8a5 	bl	8012e38 <__errno>
 8014cee:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014cf2:	2321      	movs	r3, #33	@ 0x21
 8014cf4:	6003      	str	r3, [r0, #0]
 8014cf6:	ecbd 8b04 	vpop	{d8-d9}
 8014cfa:	bd08      	pop	{r3, pc}
 8014cfc:	f3af 8000 	nop.w
	...

08014d08 <sqrt>:
 8014d08:	b508      	push	{r3, lr}
 8014d0a:	ed2d 8b04 	vpush	{d8-d9}
 8014d0e:	eeb0 8b40 	vmov.f64	d8, d0
 8014d12:	f000 f8c7 	bl	8014ea4 <__ieee754_sqrt>
 8014d16:	eeb4 8b48 	vcmp.f64	d8, d8
 8014d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1e:	d60c      	bvs.n	8014d3a <sqrt+0x32>
 8014d20:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014d40 <sqrt+0x38>
 8014d24:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d2c:	d505      	bpl.n	8014d3a <sqrt+0x32>
 8014d2e:	f7fe f883 	bl	8012e38 <__errno>
 8014d32:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014d36:	2321      	movs	r3, #33	@ 0x21
 8014d38:	6003      	str	r3, [r0, #0]
 8014d3a:	ecbd 8b04 	vpop	{d8-d9}
 8014d3e:	bd08      	pop	{r3, pc}
	...

08014d48 <asinf>:
 8014d48:	b508      	push	{r3, lr}
 8014d4a:	ed2d 8b02 	vpush	{d8}
 8014d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014d52:	f000 f9b9 	bl	80150c8 <__ieee754_asinf>
 8014d56:	eeb4 8a48 	vcmp.f32	s16, s16
 8014d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d5e:	eef0 8a40 	vmov.f32	s17, s0
 8014d62:	d615      	bvs.n	8014d90 <asinf+0x48>
 8014d64:	eeb0 0a48 	vmov.f32	s0, s16
 8014d68:	f000 f838 	bl	8014ddc <fabsf>
 8014d6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014d70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d78:	dd0a      	ble.n	8014d90 <asinf+0x48>
 8014d7a:	f7fe f85d 	bl	8012e38 <__errno>
 8014d7e:	ecbd 8b02 	vpop	{d8}
 8014d82:	2321      	movs	r3, #33	@ 0x21
 8014d84:	6003      	str	r3, [r0, #0]
 8014d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d8a:	4804      	ldr	r0, [pc, #16]	@ (8014d9c <asinf+0x54>)
 8014d8c:	f000 b82e 	b.w	8014dec <nanf>
 8014d90:	eeb0 0a68 	vmov.f32	s0, s17
 8014d94:	ecbd 8b02 	vpop	{d8}
 8014d98:	bd08      	pop	{r3, pc}
 8014d9a:	bf00      	nop
 8014d9c:	0801774e 	.word	0x0801774e

08014da0 <sqrtf>:
 8014da0:	b508      	push	{r3, lr}
 8014da2:	ed2d 8b02 	vpush	{d8}
 8014da6:	eeb0 8a40 	vmov.f32	s16, s0
 8014daa:	f000 f87e 	bl	8014eaa <__ieee754_sqrtf>
 8014dae:	eeb4 8a48 	vcmp.f32	s16, s16
 8014db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db6:	d60c      	bvs.n	8014dd2 <sqrtf+0x32>
 8014db8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014dd8 <sqrtf+0x38>
 8014dbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc4:	d505      	bpl.n	8014dd2 <sqrtf+0x32>
 8014dc6:	f7fe f837 	bl	8012e38 <__errno>
 8014dca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014dce:	2321      	movs	r3, #33	@ 0x21
 8014dd0:	6003      	str	r3, [r0, #0]
 8014dd2:	ecbd 8b02 	vpop	{d8}
 8014dd6:	bd08      	pop	{r3, pc}
 8014dd8:	00000000 	.word	0x00000000

08014ddc <fabsf>:
 8014ddc:	ee10 3a10 	vmov	r3, s0
 8014de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014de4:	ee00 3a10 	vmov	s0, r3
 8014de8:	4770      	bx	lr
	...

08014dec <nanf>:
 8014dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014df4 <nanf+0x8>
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop
 8014df4:	7fc00000 	.word	0x7fc00000

08014df8 <fmaxf>:
 8014df8:	b508      	push	{r3, lr}
 8014dfa:	ed2d 8b02 	vpush	{d8}
 8014dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8014e02:	eef0 8a60 	vmov.f32	s17, s1
 8014e06:	f000 f831 	bl	8014e6c <__fpclassifyf>
 8014e0a:	b930      	cbnz	r0, 8014e1a <fmaxf+0x22>
 8014e0c:	eeb0 8a68 	vmov.f32	s16, s17
 8014e10:	eeb0 0a48 	vmov.f32	s0, s16
 8014e14:	ecbd 8b02 	vpop	{d8}
 8014e18:	bd08      	pop	{r3, pc}
 8014e1a:	eeb0 0a68 	vmov.f32	s0, s17
 8014e1e:	f000 f825 	bl	8014e6c <__fpclassifyf>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	d0f4      	beq.n	8014e10 <fmaxf+0x18>
 8014e26:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2e:	dded      	ble.n	8014e0c <fmaxf+0x14>
 8014e30:	e7ee      	b.n	8014e10 <fmaxf+0x18>

08014e32 <fminf>:
 8014e32:	b508      	push	{r3, lr}
 8014e34:	ed2d 8b02 	vpush	{d8}
 8014e38:	eeb0 8a40 	vmov.f32	s16, s0
 8014e3c:	eef0 8a60 	vmov.f32	s17, s1
 8014e40:	f000 f814 	bl	8014e6c <__fpclassifyf>
 8014e44:	b930      	cbnz	r0, 8014e54 <fminf+0x22>
 8014e46:	eeb0 8a68 	vmov.f32	s16, s17
 8014e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8014e4e:	ecbd 8b02 	vpop	{d8}
 8014e52:	bd08      	pop	{r3, pc}
 8014e54:	eeb0 0a68 	vmov.f32	s0, s17
 8014e58:	f000 f808 	bl	8014e6c <__fpclassifyf>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d0f4      	beq.n	8014e4a <fminf+0x18>
 8014e60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e68:	d5ed      	bpl.n	8014e46 <fminf+0x14>
 8014e6a:	e7ee      	b.n	8014e4a <fminf+0x18>

08014e6c <__fpclassifyf>:
 8014e6c:	ee10 3a10 	vmov	r3, s0
 8014e70:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014e74:	d00d      	beq.n	8014e92 <__fpclassifyf+0x26>
 8014e76:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014e7a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014e7e:	d30a      	bcc.n	8014e96 <__fpclassifyf+0x2a>
 8014e80:	4b07      	ldr	r3, [pc, #28]	@ (8014ea0 <__fpclassifyf+0x34>)
 8014e82:	1e42      	subs	r2, r0, #1
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d908      	bls.n	8014e9a <__fpclassifyf+0x2e>
 8014e88:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014e8c:	4258      	negs	r0, r3
 8014e8e:	4158      	adcs	r0, r3
 8014e90:	4770      	bx	lr
 8014e92:	2002      	movs	r0, #2
 8014e94:	4770      	bx	lr
 8014e96:	2004      	movs	r0, #4
 8014e98:	4770      	bx	lr
 8014e9a:	2003      	movs	r0, #3
 8014e9c:	4770      	bx	lr
 8014e9e:	bf00      	nop
 8014ea0:	007ffffe 	.word	0x007ffffe

08014ea4 <__ieee754_sqrt>:
 8014ea4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014ea8:	4770      	bx	lr

08014eaa <__ieee754_sqrtf>:
 8014eaa:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014eae:	4770      	bx	lr

08014eb0 <__ieee754_fmod>:
 8014eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014eb4:	ed8d 1b00 	vstr	d1, [sp]
 8014eb8:	e9dd 6500 	ldrd	r6, r5, [sp]
 8014ebc:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8014ec0:	ea56 0307 	orrs.w	r3, r6, r7
 8014ec4:	46b6      	mov	lr, r6
 8014ec6:	d00d      	beq.n	8014ee4 <__ieee754_fmod+0x34>
 8014ec8:	ee10 ca90 	vmov	ip, s1
 8014ecc:	4b78      	ldr	r3, [pc, #480]	@ (80150b0 <__ieee754_fmod+0x200>)
 8014ece:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 8014ed2:	4598      	cmp	r8, r3
 8014ed4:	d806      	bhi.n	8014ee4 <__ieee754_fmod+0x34>
 8014ed6:	4273      	negs	r3, r6
 8014ed8:	4a76      	ldr	r2, [pc, #472]	@ (80150b4 <__ieee754_fmod+0x204>)
 8014eda:	4333      	orrs	r3, r6
 8014edc:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8014ee0:	4293      	cmp	r3, r2
 8014ee2:	d908      	bls.n	8014ef6 <__ieee754_fmod+0x46>
 8014ee4:	ed9d 7b00 	vldr	d7, [sp]
 8014ee8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014eec:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8014ef0:	b003      	add	sp, #12
 8014ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ef6:	ee10 9a10 	vmov	r9, s0
 8014efa:	45b8      	cmp	r8, r7
 8014efc:	4649      	mov	r1, r9
 8014efe:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 8014f02:	dc09      	bgt.n	8014f18 <__ieee754_fmod+0x68>
 8014f04:	dbf4      	blt.n	8014ef0 <__ieee754_fmod+0x40>
 8014f06:	454e      	cmp	r6, r9
 8014f08:	d8f2      	bhi.n	8014ef0 <__ieee754_fmod+0x40>
 8014f0a:	d105      	bne.n	8014f18 <__ieee754_fmod+0x68>
 8014f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80150b8 <__ieee754_fmod+0x208>)
 8014f0e:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 8014f12:	ed93 0b00 	vldr	d0, [r3]
 8014f16:	e7eb      	b.n	8014ef0 <__ieee754_fmod+0x40>
 8014f18:	4a66      	ldr	r2, [pc, #408]	@ (80150b4 <__ieee754_fmod+0x204>)
 8014f1a:	ea1c 0f02 	tst.w	ip, r2
 8014f1e:	d14a      	bne.n	8014fb6 <__ieee754_fmod+0x106>
 8014f20:	f1b8 0f00 	cmp.w	r8, #0
 8014f24:	d13f      	bne.n	8014fa6 <__ieee754_fmod+0xf6>
 8014f26:	4865      	ldr	r0, [pc, #404]	@ (80150bc <__ieee754_fmod+0x20c>)
 8014f28:	464b      	mov	r3, r9
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	dc38      	bgt.n	8014fa0 <__ieee754_fmod+0xf0>
 8014f2e:	4215      	tst	r5, r2
 8014f30:	d150      	bne.n	8014fd4 <__ieee754_fmod+0x124>
 8014f32:	2f00      	cmp	r7, #0
 8014f34:	d147      	bne.n	8014fc6 <__ieee754_fmod+0x116>
 8014f36:	4a61      	ldr	r2, [pc, #388]	@ (80150bc <__ieee754_fmod+0x20c>)
 8014f38:	4633      	mov	r3, r6
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	dc40      	bgt.n	8014fc0 <__ieee754_fmod+0x110>
 8014f3e:	4b60      	ldr	r3, [pc, #384]	@ (80150c0 <__ieee754_fmod+0x210>)
 8014f40:	4298      	cmp	r0, r3
 8014f42:	db4b      	blt.n	8014fdc <__ieee754_fmod+0x12c>
 8014f44:	f3cc 0313 	ubfx	r3, ip, #0, #20
 8014f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014f4c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80150c0 <__ieee754_fmod+0x210>
 8014f50:	4562      	cmp	r2, ip
 8014f52:	db58      	blt.n	8015006 <__ieee754_fmod+0x156>
 8014f54:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014f58:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 8014f5c:	1a80      	subs	r0, r0, r2
 8014f5e:	1b5e      	subs	r6, r3, r5
 8014f60:	eba1 070e 	sub.w	r7, r1, lr
 8014f64:	2800      	cmp	r0, #0
 8014f66:	d164      	bne.n	8015032 <__ieee754_fmod+0x182>
 8014f68:	4571      	cmp	r1, lr
 8014f6a:	bf38      	it	cc
 8014f6c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014f70:	2e00      	cmp	r6, #0
 8014f72:	bfa4      	itt	ge
 8014f74:	4639      	movge	r1, r7
 8014f76:	4633      	movge	r3, r6
 8014f78:	ea53 0001 	orrs.w	r0, r3, r1
 8014f7c:	d0c6      	beq.n	8014f0c <__ieee754_fmod+0x5c>
 8014f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014f82:	db6b      	blt.n	801505c <__ieee754_fmod+0x1ac>
 8014f84:	484e      	ldr	r0, [pc, #312]	@ (80150c0 <__ieee754_fmod+0x210>)
 8014f86:	4282      	cmp	r2, r0
 8014f88:	db6e      	blt.n	8015068 <__ieee754_fmod+0x1b8>
 8014f8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014f8e:	4323      	orrs	r3, r4
 8014f90:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8014f94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f98:	460c      	mov	r4, r1
 8014f9a:	ec45 4b10 	vmov	d0, r4, r5
 8014f9e:	e7a7      	b.n	8014ef0 <__ieee754_fmod+0x40>
 8014fa0:	3801      	subs	r0, #1
 8014fa2:	005b      	lsls	r3, r3, #1
 8014fa4:	e7c1      	b.n	8014f2a <__ieee754_fmod+0x7a>
 8014fa6:	4846      	ldr	r0, [pc, #280]	@ (80150c0 <__ieee754_fmod+0x210>)
 8014fa8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	ddbe      	ble.n	8014f2e <__ieee754_fmod+0x7e>
 8014fb0:	3801      	subs	r0, #1
 8014fb2:	005b      	lsls	r3, r3, #1
 8014fb4:	e7fa      	b.n	8014fac <__ieee754_fmod+0xfc>
 8014fb6:	ea4f 5028 	mov.w	r0, r8, asr #20
 8014fba:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8014fbe:	e7b6      	b.n	8014f2e <__ieee754_fmod+0x7e>
 8014fc0:	3a01      	subs	r2, #1
 8014fc2:	005b      	lsls	r3, r3, #1
 8014fc4:	e7b9      	b.n	8014f3a <__ieee754_fmod+0x8a>
 8014fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80150c0 <__ieee754_fmod+0x210>)
 8014fc8:	02fb      	lsls	r3, r7, #11
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	ddb7      	ble.n	8014f3e <__ieee754_fmod+0x8e>
 8014fce:	3a01      	subs	r2, #1
 8014fd0:	005b      	lsls	r3, r3, #1
 8014fd2:	e7fa      	b.n	8014fca <__ieee754_fmod+0x11a>
 8014fd4:	153a      	asrs	r2, r7, #20
 8014fd6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014fda:	e7b0      	b.n	8014f3e <__ieee754_fmod+0x8e>
 8014fdc:	eba3 0c00 	sub.w	ip, r3, r0
 8014fe0:	f1bc 0f1f 	cmp.w	ip, #31
 8014fe4:	dc09      	bgt.n	8014ffa <__ieee754_fmod+0x14a>
 8014fe6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8014fea:	fa08 f10c 	lsl.w	r1, r8, ip
 8014fee:	fa29 f303 	lsr.w	r3, r9, r3
 8014ff2:	430b      	orrs	r3, r1
 8014ff4:	fa09 f10c 	lsl.w	r1, r9, ip
 8014ff8:	e7a8      	b.n	8014f4c <__ieee754_fmod+0x9c>
 8014ffa:	4b32      	ldr	r3, [pc, #200]	@ (80150c4 <__ieee754_fmod+0x214>)
 8014ffc:	1a1b      	subs	r3, r3, r0
 8014ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8015002:	2100      	movs	r1, #0
 8015004:	e7a2      	b.n	8014f4c <__ieee754_fmod+0x9c>
 8015006:	ebac 0c02 	sub.w	ip, ip, r2
 801500a:	f1bc 0f1f 	cmp.w	ip, #31
 801500e:	dc09      	bgt.n	8015024 <__ieee754_fmod+0x174>
 8015010:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 8015014:	fa07 f70c 	lsl.w	r7, r7, ip
 8015018:	fa26 f505 	lsr.w	r5, r6, r5
 801501c:	433d      	orrs	r5, r7
 801501e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8015022:	e79b      	b.n	8014f5c <__ieee754_fmod+0xac>
 8015024:	4d27      	ldr	r5, [pc, #156]	@ (80150c4 <__ieee754_fmod+0x214>)
 8015026:	1aad      	subs	r5, r5, r2
 8015028:	fa06 f505 	lsl.w	r5, r6, r5
 801502c:	f04f 0e00 	mov.w	lr, #0
 8015030:	e794      	b.n	8014f5c <__ieee754_fmod+0xac>
 8015032:	4571      	cmp	r1, lr
 8015034:	bf38      	it	cc
 8015036:	f106 36ff 	addcc.w	r6, r6, #4294967295
 801503a:	2e00      	cmp	r6, #0
 801503c:	da05      	bge.n	801504a <__ieee754_fmod+0x19a>
 801503e:	0fce      	lsrs	r6, r1, #31
 8015040:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015044:	0049      	lsls	r1, r1, #1
 8015046:	3801      	subs	r0, #1
 8015048:	e789      	b.n	8014f5e <__ieee754_fmod+0xae>
 801504a:	ea56 0307 	orrs.w	r3, r6, r7
 801504e:	f43f af5d 	beq.w	8014f0c <__ieee754_fmod+0x5c>
 8015052:	0ffb      	lsrs	r3, r7, #31
 8015054:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015058:	0079      	lsls	r1, r7, #1
 801505a:	e7f4      	b.n	8015046 <__ieee754_fmod+0x196>
 801505c:	0fc8      	lsrs	r0, r1, #31
 801505e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015062:	0049      	lsls	r1, r1, #1
 8015064:	3a01      	subs	r2, #1
 8015066:	e78a      	b.n	8014f7e <__ieee754_fmod+0xce>
 8015068:	1a80      	subs	r0, r0, r2
 801506a:	2814      	cmp	r0, #20
 801506c:	dc0c      	bgt.n	8015088 <__ieee754_fmod+0x1d8>
 801506e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015072:	fa03 f202 	lsl.w	r2, r3, r2
 8015076:	40c1      	lsrs	r1, r0
 8015078:	430a      	orrs	r2, r1
 801507a:	4103      	asrs	r3, r0
 801507c:	ea43 0104 	orr.w	r1, r3, r4
 8015080:	4610      	mov	r0, r2
 8015082:	ec41 0b10 	vmov	d0, r0, r1
 8015086:	e733      	b.n	8014ef0 <__ieee754_fmod+0x40>
 8015088:	281f      	cmp	r0, #31
 801508a:	dc07      	bgt.n	801509c <__ieee754_fmod+0x1ec>
 801508c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015090:	40c1      	lsrs	r1, r0
 8015092:	fa03 f202 	lsl.w	r2, r3, r2
 8015096:	430a      	orrs	r2, r1
 8015098:	4623      	mov	r3, r4
 801509a:	e7ef      	b.n	801507c <__ieee754_fmod+0x1cc>
 801509c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 80150a0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80150a4:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 80150a8:	32e2      	adds	r2, #226	@ 0xe2
 80150aa:	fa43 f202 	asr.w	r2, r3, r2
 80150ae:	e7f3      	b.n	8015098 <__ieee754_fmod+0x1e8>
 80150b0:	7fefffff 	.word	0x7fefffff
 80150b4:	7ff00000 	.word	0x7ff00000
 80150b8:	08017850 	.word	0x08017850
 80150bc:	fffffbed 	.word	0xfffffbed
 80150c0:	fffffc02 	.word	0xfffffc02
 80150c4:	fffffbe2 	.word	0xfffffbe2

080150c8 <__ieee754_asinf>:
 80150c8:	b538      	push	{r3, r4, r5, lr}
 80150ca:	ee10 5a10 	vmov	r5, s0
 80150ce:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80150d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80150d6:	ed2d 8b04 	vpush	{d8-d9}
 80150da:	d10c      	bne.n	80150f6 <__ieee754_asinf+0x2e>
 80150dc:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8015254 <__ieee754_asinf+0x18c>
 80150e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8015258 <__ieee754_asinf+0x190>
 80150e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80150ec:	eeb0 0a67 	vmov.f32	s0, s15
 80150f0:	ecbd 8b04 	vpop	{d8-d9}
 80150f4:	bd38      	pop	{r3, r4, r5, pc}
 80150f6:	d904      	bls.n	8015102 <__ieee754_asinf+0x3a>
 80150f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80150fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015100:	e7f6      	b.n	80150f0 <__ieee754_asinf+0x28>
 8015102:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015106:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801510a:	d20b      	bcs.n	8015124 <__ieee754_asinf+0x5c>
 801510c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8015110:	d252      	bcs.n	80151b8 <__ieee754_asinf+0xf0>
 8015112:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801525c <__ieee754_asinf+0x194>
 8015116:	ee70 7a27 	vadd.f32	s15, s0, s15
 801511a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015122:	dce5      	bgt.n	80150f0 <__ieee754_asinf+0x28>
 8015124:	f7ff fe5a 	bl	8014ddc <fabsf>
 8015128:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801512c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015130:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015134:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8015260 <__ieee754_asinf+0x198>
 8015138:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8015264 <__ieee754_asinf+0x19c>
 801513c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8015268 <__ieee754_asinf+0x1a0>
 8015140:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015144:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801526c <__ieee754_asinf+0x1a4>
 8015148:	eee7 7a08 	vfma.f32	s15, s14, s16
 801514c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8015270 <__ieee754_asinf+0x1a8>
 8015150:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015154:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8015274 <__ieee754_asinf+0x1ac>
 8015158:	eee7 7a08 	vfma.f32	s15, s14, s16
 801515c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8015278 <__ieee754_asinf+0x1b0>
 8015160:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015164:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801527c <__ieee754_asinf+0x1b4>
 8015168:	eee8 7a07 	vfma.f32	s15, s16, s14
 801516c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8015280 <__ieee754_asinf+0x1b8>
 8015170:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015174:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8015284 <__ieee754_asinf+0x1bc>
 8015178:	eee7 7a08 	vfma.f32	s15, s14, s16
 801517c:	eeb0 0a48 	vmov.f32	s0, s16
 8015180:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015184:	f7ff fe91 	bl	8014eaa <__ieee754_sqrtf>
 8015188:	4b3f      	ldr	r3, [pc, #252]	@ (8015288 <__ieee754_asinf+0x1c0>)
 801518a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801518e:	429c      	cmp	r4, r3
 8015190:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015194:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8015198:	d93d      	bls.n	8015216 <__ieee754_asinf+0x14e>
 801519a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801519e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801528c <__ieee754_asinf+0x1c4>
 80151a2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80151a6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8015258 <__ieee754_asinf+0x190>
 80151aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80151ae:	2d00      	cmp	r5, #0
 80151b0:	bfd8      	it	le
 80151b2:	eeb1 0a40 	vnegle.f32	s0, s0
 80151b6:	e79b      	b.n	80150f0 <__ieee754_asinf+0x28>
 80151b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80151bc:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8015264 <__ieee754_asinf+0x19c>
 80151c0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8015260 <__ieee754_asinf+0x198>
 80151c4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8015278 <__ieee754_asinf+0x1b0>
 80151c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80151cc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801526c <__ieee754_asinf+0x1a4>
 80151d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80151d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8015270 <__ieee754_asinf+0x1a8>
 80151d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80151dc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8015274 <__ieee754_asinf+0x1ac>
 80151e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80151e4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8015268 <__ieee754_asinf+0x1a0>
 80151e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80151ec:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801527c <__ieee754_asinf+0x1b4>
 80151f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80151f4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8015280 <__ieee754_asinf+0x1b8>
 80151f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80151fc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8015284 <__ieee754_asinf+0x1bc>
 8015200:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015208:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801520c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015210:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015214:	e76c      	b.n	80150f0 <__ieee754_asinf+0x28>
 8015216:	ee10 3a10 	vmov	r3, s0
 801521a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801521e:	f023 030f 	bic.w	r3, r3, #15
 8015222:	ee07 3a10 	vmov	s14, r3
 8015226:	eea7 8a47 	vfms.f32	s16, s14, s14
 801522a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801522e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015232:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8015254 <__ieee754_asinf+0x18c>
 8015236:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801523a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8015290 <__ieee754_asinf+0x1c8>
 801523e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8015242:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8015246:	eeb0 6a40 	vmov.f32	s12, s0
 801524a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801524e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015252:	e7aa      	b.n	80151aa <__ieee754_asinf+0xe2>
 8015254:	b33bbd2e 	.word	0xb33bbd2e
 8015258:	3fc90fdb 	.word	0x3fc90fdb
 801525c:	7149f2ca 	.word	0x7149f2ca
 8015260:	3a4f7f04 	.word	0x3a4f7f04
 8015264:	3811ef08 	.word	0x3811ef08
 8015268:	3e2aaaab 	.word	0x3e2aaaab
 801526c:	bd241146 	.word	0xbd241146
 8015270:	3e4e0aa8 	.word	0x3e4e0aa8
 8015274:	bea6b090 	.word	0xbea6b090
 8015278:	3d9dc62e 	.word	0x3d9dc62e
 801527c:	bf303361 	.word	0xbf303361
 8015280:	4001572d 	.word	0x4001572d
 8015284:	c019d139 	.word	0xc019d139
 8015288:	3f799999 	.word	0x3f799999
 801528c:	333bbd2e 	.word	0x333bbd2e
 8015290:	3f490fdb 	.word	0x3f490fdb

08015294 <_init>:
 8015294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015296:	bf00      	nop
 8015298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801529a:	bc08      	pop	{r3}
 801529c:	469e      	mov	lr, r3
 801529e:	4770      	bx	lr

080152a0 <_fini>:
 80152a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a2:	bf00      	nop
 80152a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152a6:	bc08      	pop	{r3}
 80152a8:	469e      	mov	lr, r3
 80152aa:	4770      	bx	lr
