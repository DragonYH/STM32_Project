
EX_Three_Phase_Rectifier_H743IIT6_Hollies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015184  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025e8  08015428  08015428  00016428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a10  08017a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017a18  08017a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017a1c  08017a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002f4  24000000  08017a20  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009560  240002f4  08017d14  000192f4  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24009854  08017d14  00019854  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000192f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b193  00000000  00000000  00019322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000084f4  00000000  00000000  000544b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002790  00000000  00000000  0005c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001da4  00000000  00000000  0005f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000417fc  00000000  00000000  00060ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000382d8  00000000  00000000  000a26e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176f1a  00000000  00000000  000da9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  002518d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b3c0  00000000  00000000  0025198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0025cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000068e  00000000  00000000  0025cdc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000068  00000000  00000000  0025d451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801540c 	.word	0x0801540c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	0801540c 	.word	0x0801540c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	@ 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	3a01      	subs	r2, #1
 800044a:	bf28      	it	cs
 800044c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000450:	d2ed      	bcs.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2224      	movs	r2, #36	@ 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f012 fc96 	bl	8012eea <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_DAC1_Init+0x60>)
 80005c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005c6:	f001 fe77 	bl	80022b8 <HAL_DAC_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005d0:	f000 ff3c 	bl	800144c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_DAC1_Init+0x5c>)
 80005f0:	f001 ff66 	bl	80024c0 <HAL_DAC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 ff27 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	24000310 	.word	0x24000310
 800060c:	40007400 	.word	0x40007400

08000610 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <HAL_DAC_MspInit+0x90>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d131      	bne.n	8000696 <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000638:	4a1a      	ldr	r2, [pc, #104]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 800063a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800063e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000648:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_DAC_MspInit+0x94>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <HAL_DAC_MspInit+0x98>)
 8000682:	f002 f869 	bl	8002758 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f001 fd74 	bl	8002178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f001 fd8b 	bl	80021ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40007400 	.word	0x40007400
 80006a4:	58024400 	.word	0x58024400
 80006a8:	58020000 	.word	0x58020000

080006ac <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  ad7606_Init();
 80006b0:	f00f ffe2 	bl	8010678 <ad7606_Init>
  pll_Init_V(&signal_V, 50, 20000);
 80006b4:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006b8:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000798 <MX_FREERTOS_Init+0xec>
 80006bc:	4837      	ldr	r0, [pc, #220]	@ (800079c <MX_FREERTOS_Init+0xf0>)
 80006be:	f010 ff7b 	bl	80115b8 <pll_Init_V>
  pll_Init_I(&signal_I, 50, 20000);
 80006c2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006c6:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8000798 <MX_FREERTOS_Init+0xec>
 80006ca:	4835      	ldr	r0, [pc, #212]	@ (80007a0 <MX_FREERTOS_Init+0xf4>)
 80006cc:	f011 f82c 	bl	8011728 <pll_Init_I>
  firFilterInit(&fir_Va, firCoeffs_100Hz, firState_Va);
 80006d0:	4a34      	ldr	r2, [pc, #208]	@ (80007a4 <MX_FREERTOS_Init+0xf8>)
 80006d2:	4935      	ldr	r1, [pc, #212]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 80006d4:	4835      	ldr	r0, [pc, #212]	@ (80007ac <MX_FREERTOS_Init+0x100>)
 80006d6:	f010 f8b3 	bl	8010840 <firFilterInit>
  firFilterInit(&fir_Vb, firCoeffs_100Hz, firState_Vb);
 80006da:	4a35      	ldr	r2, [pc, #212]	@ (80007b0 <MX_FREERTOS_Init+0x104>)
 80006dc:	4932      	ldr	r1, [pc, #200]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 80006de:	4835      	ldr	r0, [pc, #212]	@ (80007b4 <MX_FREERTOS_Init+0x108>)
 80006e0:	f010 f8ae 	bl	8010840 <firFilterInit>
  firFilterInit(&fir_Vc, firCoeffs_100Hz, firState_Vc);
 80006e4:	4a34      	ldr	r2, [pc, #208]	@ (80007b8 <MX_FREERTOS_Init+0x10c>)
 80006e6:	4930      	ldr	r1, [pc, #192]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 80006e8:	4834      	ldr	r0, [pc, #208]	@ (80007bc <MX_FREERTOS_Init+0x110>)
 80006ea:	f010 f8a9 	bl	8010840 <firFilterInit>
  firFilterInit(&fir_Ia, firCoeffs_100Hz, firState_Ia);
 80006ee:	4a34      	ldr	r2, [pc, #208]	@ (80007c0 <MX_FREERTOS_Init+0x114>)
 80006f0:	492d      	ldr	r1, [pc, #180]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 80006f2:	4834      	ldr	r0, [pc, #208]	@ (80007c4 <MX_FREERTOS_Init+0x118>)
 80006f4:	f010 f8a4 	bl	8010840 <firFilterInit>
  firFilterInit(&fir_Ib, firCoeffs_100Hz, firState_Ib);
 80006f8:	4a33      	ldr	r2, [pc, #204]	@ (80007c8 <MX_FREERTOS_Init+0x11c>)
 80006fa:	492b      	ldr	r1, [pc, #172]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 80006fc:	4833      	ldr	r0, [pc, #204]	@ (80007cc <MX_FREERTOS_Init+0x120>)
 80006fe:	f010 f89f 	bl	8010840 <firFilterInit>
  firFilterInit(&fir_Ic, firCoeffs_100Hz, firState_Ic);
 8000702:	4a33      	ldr	r2, [pc, #204]	@ (80007d0 <MX_FREERTOS_Init+0x124>)
 8000704:	4928      	ldr	r1, [pc, #160]	@ (80007a8 <MX_FREERTOS_Init+0xfc>)
 8000706:	4833      	ldr	r0, [pc, #204]	@ (80007d4 <MX_FREERTOS_Init+0x128>)
 8000708:	f010 f89a 	bl	8010840 <firFilterInit>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	4832      	ldr	r0, [pc, #200]	@ (80007d8 <MX_FREERTOS_Init+0x12c>)
 8000710:	f008 fed4 	bl	80094bc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000714:	2104      	movs	r1, #4
 8000716:	4830      	ldr	r0, [pc, #192]	@ (80007d8 <MX_FREERTOS_Init+0x12c>)
 8000718:	f008 fed0 	bl	80094bc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800071c:	2108      	movs	r1, #8
 800071e:	482e      	ldr	r0, [pc, #184]	@ (80007d8 <MX_FREERTOS_Init+0x12c>)
 8000720:	f008 fecc 	bl	80094bc <HAL_TIMEx_PWMN_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000724:	2100      	movs	r1, #0
 8000726:	482d      	ldr	r0, [pc, #180]	@ (80007dc <MX_FREERTOS_Init+0x130>)
 8000728:	f001 fde8 	bl	80022fc <HAL_DAC_Start>
  ad7606_Start(&htim2, TIM_CHANNEL_1);
 800072c:	2100      	movs	r1, #0
 800072e:	482c      	ldr	r0, [pc, #176]	@ (80007e0 <MX_FREERTOS_Init+0x134>)
 8000730:	f00f ffdc 	bl	80106ec <ad7606_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of stateLED */
  stateLEDHandle = osThreadNew(StartStateLED, NULL, &stateLED_attributes);
 8000734:	4a2b      	ldr	r2, [pc, #172]	@ (80007e4 <MX_FREERTOS_Init+0x138>)
 8000736:	2100      	movs	r1, #0
 8000738:	482b      	ldr	r0, [pc, #172]	@ (80007e8 <MX_FREERTOS_Init+0x13c>)
 800073a:	f00c fcaf 	bl	800d09c <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <MX_FREERTOS_Init+0x140>)
 8000742:	6013      	str	r3, [r2, #0]

  /* creation of oledShow */
  oledShowHandle = osThreadNew(StartOledShow, NULL, &oledShow_attributes);
 8000744:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <MX_FREERTOS_Init+0x144>)
 8000746:	2100      	movs	r1, #0
 8000748:	482a      	ldr	r0, [pc, #168]	@ (80007f4 <MX_FREERTOS_Init+0x148>)
 800074a:	f00c fca7 	bl	800d09c <osThreadNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a29      	ldr	r2, [pc, #164]	@ (80007f8 <MX_FREERTOS_Init+0x14c>)
 8000752:	6013      	str	r3, [r2, #0]

  /* creation of dcSamp */
  dcSampHandle = osThreadNew(StartDcSamp, NULL, &dcSamp_attributes);
 8000754:	4a29      	ldr	r2, [pc, #164]	@ (80007fc <MX_FREERTOS_Init+0x150>)
 8000756:	2100      	movs	r1, #0
 8000758:	4829      	ldr	r0, [pc, #164]	@ (8000800 <MX_FREERTOS_Init+0x154>)
 800075a:	f00c fc9f 	bl	800d09c <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <MX_FREERTOS_Init+0x158>)
 8000762:	6013      	str	r3, [r2, #0]

  /* creation of usartDebug */
  usartDebugHandle = osThreadNew(StartUsartDebug, NULL, &usartDebug_attributes);
 8000764:	4a28      	ldr	r2, [pc, #160]	@ (8000808 <MX_FREERTOS_Init+0x15c>)
 8000766:	2100      	movs	r1, #0
 8000768:	4828      	ldr	r0, [pc, #160]	@ (800080c <MX_FREERTOS_Init+0x160>)
 800076a:	f00c fc97 	bl	800d09c <osThreadNew>
 800076e:	4603      	mov	r3, r0
 8000770:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <MX_FREERTOS_Init+0x164>)
 8000772:	6013      	str	r3, [r2, #0]

  /* creation of acVControl */
  acVControlHandle = osThreadNew(StartACVContorl, NULL, &acVControl_attributes);
 8000774:	4a27      	ldr	r2, [pc, #156]	@ (8000814 <MX_FREERTOS_Init+0x168>)
 8000776:	2100      	movs	r1, #0
 8000778:	4827      	ldr	r0, [pc, #156]	@ (8000818 <MX_FREERTOS_Init+0x16c>)
 800077a:	f00c fc8f 	bl	800d09c <osThreadNew>
 800077e:	4603      	mov	r3, r0
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <MX_FREERTOS_Init+0x170>)
 8000782:	6013      	str	r3, [r2, #0]

  /* creation of circuitProtect */
  circuitProtectHandle = osThreadNew(StartCircuitProtect, NULL, &circuitProtect_attributes);
 8000784:	4a26      	ldr	r2, [pc, #152]	@ (8000820 <MX_FREERTOS_Init+0x174>)
 8000786:	2100      	movs	r1, #0
 8000788:	4826      	ldr	r0, [pc, #152]	@ (8000824 <MX_FREERTOS_Init+0x178>)
 800078a:	f00c fc87 	bl	800d09c <osThreadNew>
 800078e:	4603      	mov	r3, r0
 8000790:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <MX_FREERTOS_Init+0x17c>)
 8000792:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	42480000 	.word	0x42480000
 800079c:	240094ec 	.word	0x240094ec
 80007a0:	240094f0 	.word	0x240094f0
 80007a4:	24009510 	.word	0x24009510
 80007a8:	08015634 	.word	0x08015634
 80007ac:	240094f8 	.word	0x240094f8
 80007b0:	24009564 	.word	0x24009564
 80007b4:	240094fc 	.word	0x240094fc
 80007b8:	240095b8 	.word	0x240095b8
 80007bc:	24009500 	.word	0x24009500
 80007c0:	2400960c 	.word	0x2400960c
 80007c4:	24009504 	.word	0x24009504
 80007c8:	24009660 	.word	0x24009660
 80007cc:	24009508 	.word	0x24009508
 80007d0:	240096b4 	.word	0x240096b4
 80007d4:	2400950c 	.word	0x2400950c
 80007d8:	24000510 	.word	0x24000510
 80007dc:	24000310 	.word	0x24000310
 80007e0:	2400055c 	.word	0x2400055c
 80007e4:	0801554c 	.word	0x0801554c
 80007e8:	0800082d 	.word	0x0800082d
 80007ec:	24000324 	.word	0x24000324
 80007f0:	08015570 	.word	0x08015570
 80007f4:	080008c5 	.word	0x080008c5
 80007f8:	24000328 	.word	0x24000328
 80007fc:	08015594 	.word	0x08015594
 8000800:	080008e1 	.word	0x080008e1
 8000804:	2400032c 	.word	0x2400032c
 8000808:	080155b8 	.word	0x080155b8
 800080c:	08000931 	.word	0x08000931
 8000810:	24000330 	.word	0x24000330
 8000814:	080155dc 	.word	0x080155dc
 8000818:	080009ad 	.word	0x080009ad
 800081c:	24000334 	.word	0x24000334
 8000820:	08015600 	.word	0x08015600
 8000824:	080009c5 	.word	0x080009c5
 8000828:	24000338 	.word	0x24000338

0800082c <StartStateLED>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStateLED */
void StartStateLED(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000834:	f00f f9e0 	bl	800fbf8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartStateLED */
  /* Infinite loop */
  for (;;)
  {
    switch (runState)
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <StartStateLED+0x90>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b02      	cmp	r3, #2
 8000840:	d032      	beq.n	80008a8 <StartStateLED+0x7c>
 8000842:	2b02      	cmp	r3, #2
 8000844:	dc38      	bgt.n	80008b8 <StartStateLED+0x8c>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <StartStateLED+0x24>
 800084a:	2b01      	cmp	r3, #1
 800084c:	d006      	beq.n	800085c <StartStateLED+0x30>
    case FAULT: // 保护状态
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
      osDelay(100);
      break;
    default:
      break;
 800084e:	e033      	b.n	80008b8 <StartStateLED+0x8c>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <StartStateLED+0x94>)
 8000856:	f002 f92f 	bl	8002ab8 <HAL_GPIO_WritePin>
      break;
 800085a:	e02e      	b.n	80008ba <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800085c:	2101      	movs	r1, #1
 800085e:	4818      	ldr	r0, [pc, #96]	@ (80008c0 <StartStateLED+0x94>)
 8000860:	f002 f943 	bl	8002aea <HAL_GPIO_TogglePin>
      osDelay(100);
 8000864:	2064      	movs	r0, #100	@ 0x64
 8000866:	f00c fcab 	bl	800d1c0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 800086a:	2101      	movs	r1, #1
 800086c:	4814      	ldr	r0, [pc, #80]	@ (80008c0 <StartStateLED+0x94>)
 800086e:	f002 f93c 	bl	8002aea <HAL_GPIO_TogglePin>
      osDelay(200);
 8000872:	20c8      	movs	r0, #200	@ 0xc8
 8000874:	f00c fca4 	bl	800d1c0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000878:	2101      	movs	r1, #1
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <StartStateLED+0x94>)
 800087c:	f002 f935 	bl	8002aea <HAL_GPIO_TogglePin>
      osDelay(100);
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f00c fc9d 	bl	800d1c0 <osDelay>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 8000886:	2101      	movs	r1, #1
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <StartStateLED+0x94>)
 800088a:	f002 f92e 	bl	8002aea <HAL_GPIO_TogglePin>
      osDelay(200);
 800088e:	20c8      	movs	r0, #200	@ 0xc8
 8000890:	f00c fc96 	bl	800d1c0 <osDelay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2102      	movs	r1, #2
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <StartStateLED+0x94>)
 800089a:	f002 f90d 	bl	8002ab8 <HAL_GPIO_WritePin>
      osDelay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a2:	f00c fc8d 	bl	800d1c0 <osDelay>
      break;
 80008a6:	e008      	b.n	80008ba <StartStateLED+0x8e>
      HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_0);
 80008a8:	2101      	movs	r1, #1
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <StartStateLED+0x94>)
 80008ac:	f002 f91d 	bl	8002aea <HAL_GPIO_TogglePin>
      osDelay(100);
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f00c fc85 	bl	800d1c0 <osDelay>
      break;
 80008b6:	e000      	b.n	80008ba <StartStateLED+0x8e>
      break;
 80008b8:	bf00      	nop
    switch (runState)
 80008ba:	e7bd      	b.n	8000838 <StartStateLED+0xc>
 80008bc:	240094f4 	.word	0x240094f4
 80008c0:	58022000 	.word	0x58022000

080008c4 <StartOledShow>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledShow */
void StartOledShow(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledShow */
  OLED_Init();
 80008cc:	f010 fb2c 	bl	8010f28 <OLED_Init>
  /* Infinite loop */
  for (;;)
  {
    appOLEDShow();
 80008d0:	f000 f968 	bl	8000ba4 <appOLEDShow>
    osDelay(100);
 80008d4:	2064      	movs	r0, #100	@ 0x64
 80008d6:	f00c fc73 	bl	800d1c0 <osDelay>
    appOLEDShow();
 80008da:	bf00      	nop
 80008dc:	e7f8      	b.n	80008d0 <StartOledShow+0xc>
	...

080008e0 <StartDcSamp>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDcSamp */
void StartDcSamp(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDcSamp */
  INA228_config(INA228_0);
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <StartDcSamp+0x44>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00f fff2 	bl	80108d6 <INA228_config>
  /* Infinite loop */
  for (;;)
  {
    U = INA228_getVBUS_V(INA228_0);
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <StartDcSamp+0x44>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f010 f89c 	bl	8010a34 <INA228_getVBUS_V>
 80008fc:	eef0 7a40 	vmov.f32	s15, s0
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <StartDcSamp+0x48>)
 8000902:	edc3 7a00 	vstr	s15, [r3]
    I = INA228_getCURRENT_A(INA228_0);
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <StartDcSamp+0x44>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f010 f916 	bl	8010b3c <INA228_getCURRENT_A>
 8000910:	eef0 7a40 	vmov.f32	s15, s0
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <StartDcSamp+0x4c>)
 8000916:	edc3 7a00 	vstr	s15, [r3]
    osDelay(10);
 800091a:	200a      	movs	r0, #10
 800091c:	f00c fc50 	bl	800d1c0 <osDelay>
    U = INA228_getVBUS_V(INA228_0);
 8000920:	bf00      	nop
 8000922:	e7e6      	b.n	80008f2 <StartDcSamp+0x12>
 8000924:	08016e88 	.word	0x08016e88
 8000928:	240094e4 	.word	0x240094e4
 800092c:	240094e8 	.word	0x240094e8

08000930 <StartUsartDebug>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUsartDebug */
void StartUsartDebug(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	@ 0x30
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
  {
#if USER_DEBUG
    appTaskStackShow();
#else
    // vTaskDelete(NULL);
    uint8_t text[32] = {0};
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
    sprintf((char *)text, "x=0,a=%.3f,b=%.3f\r\n", signal_V->basic->input_a, signal_V->basic->park_d);
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <StartUsartDebug+0x74>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	edd3 7a00 	vldr	s15, [r3]
 800095a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <StartUsartDebug+0x74>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	edd3 7a08 	vldr	s15, [r3, #32]
 8000968:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800096c:	f107 0008 	add.w	r0, r7, #8
 8000970:	ed8d 7b00 	vstr	d7, [sp]
 8000974:	ec53 2b16 	vmov	r2, r3, d6
 8000978:	490b      	ldr	r1, [pc, #44]	@ (80009a8 <StartUsartDebug+0x78>)
 800097a:	f012 fa53 	bl	8012e24 <siprintf>
    CDC_Transmit_FS(text, 32);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2120      	movs	r1, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f00f f9f7 	bl	800fd78 <CDC_Transmit_FS>
    memset(text, 0, 32);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2220      	movs	r2, #32
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f012 faa9 	bl	8012eea <memset>
#endif
    osDelay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f00c fc11 	bl	800d1c0 <osDelay>
  {
 800099e:	bf00      	nop
 80009a0:	e7ca      	b.n	8000938 <StartUsartDebug+0x8>
 80009a2:	bf00      	nop
 80009a4:	240094ec 	.word	0x240094ec
 80009a8:	08015470 	.word	0x08015470

080009ac <StartACVContorl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartACVContorl */
void StartACVContorl(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartACVContorl */
  /* Infinite loop */
  for (;;)
  {
#if RectifierOrInverter
    vTaskDelete(NULL);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f00d fba7 	bl	800e108 <vTaskDelete>
#else
    appACVControl();
#endif
    osDelay(25);
 80009ba:	2019      	movs	r0, #25
 80009bc:	f00c fc00 	bl	800d1c0 <osDelay>
    vTaskDelete(NULL);
 80009c0:	bf00      	nop
 80009c2:	e7f7      	b.n	80009b4 <StartACVContorl+0x8>

080009c4 <StartCircuitProtect>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCircuitProtect */
void StartCircuitProtect(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCircuitProtect */
  /* Infinite loop */
  for (;;)
  {
    if (U > protection_Udc || I > protection_Idc ||
 80009cc:	4b6d      	ldr	r3, [pc, #436]	@ (8000b84 <StartCircuitProtect+0x1c0>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8000b88 <StartCircuitProtect+0x1c4>
 80009d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	dc51      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
 80009e0:	4b6a      	ldr	r3, [pc, #424]	@ (8000b8c <StartCircuitProtect+0x1c8>)
 80009e2:	edd3 7a00 	vldr	s15, [r3]
 80009e6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80009ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	dc47      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 80009f4:	4b66      	ldr	r3, [pc, #408]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	edd3 7a03 	vldr	s15, [r3, #12]
    if (U > protection_Udc || I > protection_Idc ||
 80009fe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0a:	dc3b      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000a0c:	4b61      	ldr	r3, [pc, #388]	@ (8000b94 <StartCircuitProtect+0x1d0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a16:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a22:	dc2f      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000a24:	4b5a      	ldr	r3, [pc, #360]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	edd3 7a04 	vldr	s15, [r3, #16]
        signal_V->basic->rms_a > protection_Uac || signal_I->basic->rms_a > protection_Iac ||
 8000a2e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	dc23      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000a3c:	4b55      	ldr	r3, [pc, #340]	@ (8000b94 <StartCircuitProtect+0x1d0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a46:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	dc17      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000a54:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	edd3 7a05 	vldr	s15, [r3, #20]
        signal_V->basic->rms_b > protection_Uac || signal_I->basic->rms_b > protection_Iac ||
 8000a5e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6a:	dc0b      	bgt.n	8000a84 <StartCircuitProtect+0xc0>
        signal_V->basic->rms_c > protection_Uac || signal_I->basic->rms_c > protection_Iac)
 8000a6c:	4b49      	ldr	r3, [pc, #292]	@ (8000b94 <StartCircuitProtect+0x1d0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a76:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a82:	dd0d      	ble.n	8000aa0 <StartCircuitProtect+0xdc>
    {
      runState = FAULT;
 8000a84:	4b44      	ldr	r3, [pc, #272]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	701a      	strb	r2, [r3, #0]
      osDelay(1000);
 8000a8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a8e:	f00c fb97 	bl	800d1c0 <osDelay>
      HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a98:	4840      	ldr	r0, [pc, #256]	@ (8000b9c <StartCircuitProtect+0x1d8>)
 8000a9a:	f002 f80d 	bl	8002ab8 <HAL_GPIO_WritePin>
 8000a9e:	e06c      	b.n	8000b7a <StartCircuitProtect+0x1b6>
    }
    else if (runState == START &&
 8000aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d167      	bne.n	8000b7a <StartCircuitProtect+0x1b6>
             runState != FAULT &&
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
    else if (runState == START &&
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d062      	beq.n	8000b7a <StartCircuitProtect+0x1b6>
             fabs(signal_V->basic->park_q) < 0.02f &&
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000abe:	eef0 7ae7 	vabs.f32	s15, s15
             runState != FAULT &&
 8000ac2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000ba0 <StartCircuitProtect+0x1dc>
 8000ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ace:	d554      	bpl.n	8000b7a <StartCircuitProtect+0x1b6>
             signal_V->basic->rms_a > 5.f &&
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	edd3 7a03 	vldr	s15, [r3, #12]
             fabs(signal_V->basic->park_q) < 0.02f &&
 8000ada:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	dd48      	ble.n	8000b7a <StartCircuitProtect+0x1b6>
             signal_I->basic->rms_a > 0.5f)
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <StartCircuitProtect+0x1d0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	edd3 7a03 	vldr	s15, [r3, #12]
             signal_V->basic->rms_a > 5.f &&
 8000af2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	dd3c      	ble.n	8000b7a <StartCircuitProtect+0x1b6>
    {
      osDelay(1000); // 延迟时间是否合适需根据具体情况调整
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f00c fb5c 	bl	800d1c0 <osDelay>
      // 防止上电瞬间误判
      if (runState == START &&
 8000b08:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d133      	bne.n	8000b7a <StartCircuitProtect+0x1b6>
          runState != FAULT &&
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
      if (runState == START &&
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d02e      	beq.n	8000b7a <StartCircuitProtect+0x1b6>
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000b26:	eef0 7ae7 	vabs.f32	s15, s15
          runState != FAULT &&
 8000b2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000ba0 <StartCircuitProtect+0x1dc>
 8000b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b36:	d520      	bpl.n	8000b7a <StartCircuitProtect+0x1b6>
          signal_V->basic->rms_a > 5.f &&
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <StartCircuitProtect+0x1cc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	edd3 7a03 	vldr	s15, [r3, #12]
          fabs(signal_V->basic->park_q) < 0.02f &&
 8000b42:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4e:	dd14      	ble.n	8000b7a <StartCircuitProtect+0x1b6>
          signal_I->basic->rms_a > 0.5f)
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <StartCircuitProtect+0x1d0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	edd3 7a03 	vldr	s15, [r3, #12]
          signal_V->basic->rms_a > 5.f &&
 8000b5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	dd08      	ble.n	8000b7a <StartCircuitProtect+0x1b6>
      {
        runState = RUN;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <StartCircuitProtect+0x1d4>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <StartCircuitProtect+0x1d8>)
 8000b76:	f001 ff9f 	bl	8002ab8 <HAL_GPIO_WritePin>
      }
    }
    osDelay(10);
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f00c fb20 	bl	800d1c0 <osDelay>
    if (U > protection_Udc || I > protection_Idc ||
 8000b80:	e724      	b.n	80009cc <StartCircuitProtect+0x8>
 8000b82:	bf00      	nop
 8000b84:	240094e4 	.word	0x240094e4
 8000b88:	42b40000 	.word	0x42b40000
 8000b8c:	240094e8 	.word	0x240094e8
 8000b90:	240094ec 	.word	0x240094ec
 8000b94:	240094f0 	.word	0x240094f0
 8000b98:	240094f4 	.word	0x240094f4
 8000b9c:	58020000 	.word	0x58020000
 8000ba0:	3ca3d70a 	.word	0x3ca3d70a

08000ba4 <appOLEDShow>:

/**
 * @brief OLED显示
 */
static void appOLEDShow()
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af04      	add	r7, sp, #16
  static uint8_t text[32] = {0};
  sprintf((char *)text, "Ua: %5.2f Ub: %5.2f", signal_V->basic->rms_a, signal_V->basic->rms_b);
 8000baa:	4b70      	ldr	r3, [pc, #448]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bb4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc6:	ed8d 7b00 	vstr	d7, [sp]
 8000bca:	ec53 2b16 	vmov	r2, r3, d6
 8000bce:	4968      	ldr	r1, [pc, #416]	@ (8000d70 <appOLEDShow+0x1cc>)
 8000bd0:	4868      	ldr	r0, [pc, #416]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000bd2:	f012 f927 	bl	8012e24 <siprintf>
  OLED_ShowString(0, 0, text, 12);
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	4a66      	ldr	r2, [pc, #408]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f010 f96f 	bl	8010ec0 <OLED_ShowString>
  sprintf((char *)text, "Uc: %5.2f Ia: %5.2f", signal_V->basic->rms_c, signal_I->basic->rms_a);
 8000be2:	4b62      	ldr	r3, [pc, #392]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bf0:	4b61      	ldr	r3, [pc, #388]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfe:	ed8d 7b00 	vstr	d7, [sp]
 8000c02:	ec53 2b16 	vmov	r2, r3, d6
 8000c06:	495d      	ldr	r1, [pc, #372]	@ (8000d7c <appOLEDShow+0x1d8>)
 8000c08:	485a      	ldr	r0, [pc, #360]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c0a:	f012 f90b 	bl	8012e24 <siprintf>
  OLED_ShowString(0, 12, text, 12);
 8000c0e:	230c      	movs	r3, #12
 8000c10:	4a58      	ldr	r2, [pc, #352]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c12:	210c      	movs	r1, #12
 8000c14:	2000      	movs	r0, #0
 8000c16:	f010 f953 	bl	8010ec0 <OLED_ShowString>
  sprintf((char *)text, "Ib: %5.2f Ic: %5.2f", signal_I->basic->rms_b, signal_I->basic->rms_c);
 8000c1a:	4b57      	ldr	r3, [pc, #348]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c24:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c28:	4b53      	ldr	r3, [pc, #332]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c36:	ed8d 7b00 	vstr	d7, [sp]
 8000c3a:	ec53 2b16 	vmov	r2, r3, d6
 8000c3e:	4950      	ldr	r1, [pc, #320]	@ (8000d80 <appOLEDShow+0x1dc>)
 8000c40:	484c      	ldr	r0, [pc, #304]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c42:	f012 f8ef 	bl	8012e24 <siprintf>
  OLED_ShowString(0, 24, text, 12);
 8000c46:	230c      	movs	r3, #12
 8000c48:	4a4a      	ldr	r2, [pc, #296]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c4a:	2118      	movs	r1, #24
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f010 f937 	bl	8010ec0 <OLED_ShowString>
  sprintf((char *)text, "U: %5.2f I: %5.2f", U, I);
 8000c52:	4b4c      	ldr	r3, [pc, #304]	@ (8000d84 <appOLEDShow+0x1e0>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d88 <appOLEDShow+0x1e4>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	ed8d 7b00 	vstr	d7, [sp]
 8000c6a:	ec53 2b16 	vmov	r2, r3, d6
 8000c6e:	4947      	ldr	r1, [pc, #284]	@ (8000d8c <appOLEDShow+0x1e8>)
 8000c70:	4840      	ldr	r0, [pc, #256]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c72:	f012 f8d7 	bl	8012e24 <siprintf>
  OLED_ShowString(0, 36, text, 12);
 8000c76:	230c      	movs	r3, #12
 8000c78:	4a3e      	ldr	r2, [pc, #248]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000c7a:	2124      	movs	r1, #36	@ 0x24
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f010 f91f 	bl	8010ec0 <OLED_ShowString>
  float n = (signal_V->basic->rms_a * signal_I->basic->rms_a + signal_V->basic->rms_b * signal_I->basic->rms_b + signal_V->basic->rms_c * signal_I->basic->rms_c) / (U * I) * 100.f;
 8000c82:	4b3a      	ldr	r3, [pc, #232]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	edd3 6a04 	vldr	s13, [r3, #16]
 8000ca4:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <appOLEDShow+0x1c8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	edd3 6a05 	vldr	s13, [r3, #20]
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cce:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <appOLEDShow+0x1e0>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <appOLEDShow+0x1e4>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ce6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d90 <appOLEDShow+0x1ec>
 8000cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cee:	edc7 7a01 	vstr	s15, [r7, #4]
  if (n > 100.f)
 8000cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000d90 <appOLEDShow+0x1ec>
 8000cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd02      	ble.n	8000d0a <appOLEDShow+0x166>
  {
    n = 100.f;
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <appOLEDShow+0x1f0>)
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	e009      	b.n	8000d1e <appOLEDShow+0x17a>
  }
  else if (n < 0.f)
 8000d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	d502      	bpl.n	8000d1e <appOLEDShow+0x17a>
  {
    n = 0.f;
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  }
  // sprintf((char *)text, "cnt: %4ld n: %5.2f%%", __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1), n);
  sprintf((char *)text, "d: %5.3f q: %5.3f %d", signal_I->pid_d->out, signal_I->pid_q->out, runState);
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <appOLEDShow+0x1d4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <appOLEDShow+0x1f4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	ed8d 7b00 	vstr	d7, [sp]
 8000d46:	ec53 2b16 	vmov	r2, r3, d6
 8000d4a:	4914      	ldr	r1, [pc, #80]	@ (8000d9c <appOLEDShow+0x1f8>)
 8000d4c:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000d4e:	f012 f869 	bl	8012e24 <siprintf>
  OLED_ShowString(0, 48, text, 12);
 8000d52:	230c      	movs	r3, #12
 8000d54:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <appOLEDShow+0x1d0>)
 8000d56:	2130      	movs	r1, #48	@ 0x30
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f010 f8b1 	bl	8010ec0 <OLED_ShowString>
  OLED_Refresh();
 8000d5e:	f00f ff3f 	bl	8010be0 <OLED_Refresh>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240094ec 	.word	0x240094ec
 8000d70:	08015484 	.word	0x08015484
 8000d74:	2400033c 	.word	0x2400033c
 8000d78:	240094f0 	.word	0x240094f0
 8000d7c:	08015498 	.word	0x08015498
 8000d80:	080154ac 	.word	0x080154ac
 8000d84:	240094e4 	.word	0x240094e4
 8000d88:	240094e8 	.word	0x240094e8
 8000d8c:	080154c0 	.word	0x080154c0
 8000d90:	42c80000 	.word	0x42c80000
 8000d94:	42c80000 	.word	0x42c80000
 8000d98:	240094f4 	.word	0x240094f4
 8000d9c:	080154d4 	.word	0x080154d4

08000da0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b73      	ldr	r3, [pc, #460]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a71      	ldr	r2, [pc, #452]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a6a      	ldr	r2, [pc, #424]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b67      	ldr	r3, [pc, #412]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b64      	ldr	r3, [pc, #400]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a62      	ldr	r2, [pc, #392]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b60      	ldr	r3, [pc, #384]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b5c      	ldr	r3, [pc, #368]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a5b      	ldr	r2, [pc, #364]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4b55      	ldr	r3, [pc, #340]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a53      	ldr	r2, [pc, #332]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b51      	ldr	r3, [pc, #324]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <MX_GPIO_Init+0x1e4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	4846      	ldr	r0, [pc, #280]	@ (8000f88 <MX_GPIO_Init+0x1e8>)
 8000e70:	f001 fe22 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2102      	movs	r1, #2
 8000e78:	4844      	ldr	r0, [pc, #272]	@ (8000f8c <MX_GPIO_Init+0x1ec>)
 8000e7a:	f001 fe1d 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, AD7606_RST_Pin|AD7606_CS_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2188      	movs	r1, #136	@ 0x88
 8000e82:	4843      	ldr	r0, [pc, #268]	@ (8000f90 <MX_GPIO_Init+0x1f0>)
 8000e84:	f001 fe18 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR2104_SD_GPIO_Port, IR2104_SD_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8e:	4841      	ldr	r0, [pc, #260]	@ (8000f94 <MX_GPIO_Init+0x1f4>)
 8000e90:	f001 fe12 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2101      	movs	r1, #1
 8000e98:	483f      	ldr	r0, [pc, #252]	@ (8000f98 <MX_GPIO_Init+0x1f8>)
 8000e9a:	f001 fe0d 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	483d      	ldr	r0, [pc, #244]	@ (8000f98 <MX_GPIO_Init+0x1f8>)
 8000ea4:	f001 fe08 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4832      	ldr	r0, [pc, #200]	@ (8000f88 <MX_GPIO_Init+0x1e8>)
 8000ec0:	f001 fc4a 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482c      	ldr	r0, [pc, #176]	@ (8000f8c <MX_GPIO_Init+0x1ec>)
 8000edc:	f001 fc3c 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = AD7606_RST_Pin|AD7606_CS_Pin;
 8000ee0:	2388      	movs	r3, #136	@ 0x88
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4826      	ldr	r0, [pc, #152]	@ (8000f90 <MX_GPIO_Init+0x1f0>)
 8000ef8:	f001 fc2e 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606_BUSY_Pin;
 8000efc:	2340      	movs	r3, #64	@ 0x40
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f00:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(AD7606_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481f      	ldr	r0, [pc, #124]	@ (8000f90 <MX_GPIO_Init+0x1f0>)
 8000f12:	f001 fc21 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR2104_SD_Pin;
 8000f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f20:	2302      	movs	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(IR2104_SD_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0x1f4>)
 8000f30:	f001 fc12 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4813      	ldr	r0, [pc, #76]	@ (8000f98 <MX_GPIO_Init+0x1f8>)
 8000f4c:	f001 fc04 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <MX_GPIO_Init+0x1f8>)
 8000f68:	f001 fbf6 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2104      	movs	r1, #4
 8000f70:	2017      	movs	r0, #23
 8000f72:	f001 f901 	bl	8002178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f76:	2017      	movs	r0, #23
 8000f78:	f001 f918 	bl	80021ac <HAL_NVIC_EnableIRQ>

}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020800 	.word	0x58020800
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	58021800 	.word	0x58021800
 8000f94:	58020000 	.word	0x58020000
 8000f98:	58022000 	.word	0x58022000

08000f9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <MX_I2C1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <MX_I2C1_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fd8:	f001 fdbc 	bl	8002b54 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f000 fa33 	bl	800144c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000fea:	f002 fb3f 	bl	800366c <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fa2a 	bl	800144c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_I2C1_Init+0x74>)
 8000ffc:	f002 fb81 	bl	8003702 <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001006:	f000 fa21 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400035c 	.word	0x2400035c
 8001014:	40005400 	.word	0x40005400
 8001018:	307075b1 	.word	0x307075b1

0800101c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f011 ff54 	bl	8012eea <memset>
  if(i2cHandle->Instance==I2C1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a26      	ldr	r2, [pc, #152]	@ (80010e0 <HAL_I2C_MspInit+0xc4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d145      	bne.n	80010d8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800104c:	f04f 0208 	mov.w	r2, #8
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fe94 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f000 f9ed 	bl	800144c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001090:	23c0      	movs	r3, #192	@ 0xc0
 8001092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a8:	2304      	movs	r3, #4
 80010aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <HAL_I2C_MspInit+0xcc>)
 80010b6:	f001 fb4f 	bl	8002758 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c0:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 80010c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0xc8>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	37e8      	adds	r7, #232	@ 0xe8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40005400 	.word	0x40005400
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58020400 	.word	0x58020400

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80010f2:	f000 f961 	bl	80013b8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80010f6:	4b40      	ldr	r3, [pc, #256]	@ (80011f8 <main+0x10c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11b      	bne.n	800113a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001102:	f3bf 8f4f 	dsb	sy
}
 8001106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001108:	f3bf 8f6f 	isb	sy
}
 800110c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800110e:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <main+0x10c>)
 8001110:	2200      	movs	r2, #0
 8001112:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001116:	f3bf 8f4f 	dsb	sy
}
 800111a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800111c:	f3bf 8f6f 	isb	sy
}
 8001120:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001122:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <main+0x10c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a34      	ldr	r2, [pc, #208]	@ (80011f8 <main+0x10c>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800112e:	f3bf 8f4f 	dsb	sy
}
 8001132:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001134:	f3bf 8f6f 	isb	sy
}
 8001138:	e000      	b.n	800113c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800113a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800113c:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <main+0x10c>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d138      	bne.n	80011ba <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <main+0x10c>)
 800114a:	2200      	movs	r2, #0
 800114c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001150:	f3bf 8f4f 	dsb	sy
}
 8001154:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001156:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <main+0x10c>)
 8001158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800115c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0b5b      	lsrs	r3, r3, #13
 8001162:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001166:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001170:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	015a      	lsls	r2, r3, #5
 8001176:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800117a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001180:	491d      	ldr	r1, [pc, #116]	@ (80011f8 <main+0x10c>)
 8001182:	4313      	orrs	r3, r2
 8001184:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ef      	bne.n	8001172 <main+0x86>
    } while(sets-- != 0U);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e5      	bne.n	8001168 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800119c:	f3bf 8f4f 	dsb	sy
}
 80011a0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <main+0x10c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <main+0x10c>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	e000      	b.n	80011bc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011ba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fe98 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f81c 	bl	80011fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011c4:	f000 f8c8 	bl	8001358 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f7ff fdea 	bl	8000da0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011cc:	f000 f99a 	bl	8001504 <MX_SPI2_Init>
  MX_TIM2_Init();
 80011d0:	f000 fd52 	bl	8001c78 <MX_TIM2_Init>
  MX_I2C1_Init();
 80011d4:	f7ff fee2 	bl	8000f9c <MX_I2C1_Init>
  MX_TIM1_Init();
 80011d8:	f000 fc86 	bl	8001ae8 <MX_TIM1_Init>
  MX_DAC1_Init();
 80011dc:	f7ff f9e6 	bl	80005ac <MX_DAC1_Init>
  MX_SPI1_Init();
 80011e0:	f000 f93a 	bl	8001458 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80011e4:	f00e fd08 	bl	800fbf8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011e8:	f00b ff0e 	bl	800d008 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011ec:	f7ff fa5e 	bl	80006ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011f0:	f00b ff2e 	bl	800d050 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <main+0x108>
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09e      	sub	sp, #120	@ 0x78
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001206:	224c      	movs	r2, #76	@ 0x4c
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f011 fe6d 	bl	8012eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f011 fe66 	bl	8012eea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800121e:	2002      	movs	r0, #2
 8001220:	f003 fd5a 	bl	8004cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	4b48      	ldr	r3, [pc, #288]	@ (800134c <SystemClock_Config+0x150>)
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	4a47      	ldr	r2, [pc, #284]	@ (800134c <SystemClock_Config+0x150>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001234:	4b45      	ldr	r3, [pc, #276]	@ (800134c <SystemClock_Config+0x150>)
 8001236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b44      	ldr	r3, [pc, #272]	@ (8001350 <SystemClock_Config+0x154>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a43      	ldr	r2, [pc, #268]	@ (8001350 <SystemClock_Config+0x154>)
 8001244:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <SystemClock_Config+0x154>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001256:	bf00      	nop
 8001258:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <SystemClock_Config+0x154>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001264:	d1f8      	bne.n	8001258 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <SystemClock_Config+0x158>)
 8001268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800126c:	4a39      	ldr	r2, [pc, #228]	@ (8001354 <SystemClock_Config+0x158>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <SystemClock_Config+0x158>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001284:	2300      	movs	r3, #0
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <SystemClock_Config+0x154>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a30      	ldr	r2, [pc, #192]	@ (8001350 <SystemClock_Config+0x154>)
 800128e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <SystemClock_Config+0x154>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b2b      	ldr	r3, [pc, #172]	@ (800134c <SystemClock_Config+0x150>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	4a2a      	ldr	r2, [pc, #168]	@ (800134c <SystemClock_Config+0x150>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80012aa:	4b28      	ldr	r3, [pc, #160]	@ (800134c <SystemClock_Config+0x150>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012b6:	bf00      	nop
 80012b8:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <SystemClock_Config+0x154>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012c4:	d1f8      	bne.n	80012b8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d4:	2302      	movs	r3, #2
 80012d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012dc:	23c0      	movs	r3, #192	@ 0xc0
 80012de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80012e4:	2314      	movs	r3, #20
 80012e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80012ec:	2308      	movs	r3, #8
 80012ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 fd35 	bl	8004d6c <HAL_RCC_OscConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001308:	f000 f8a0 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	233f      	movs	r3, #63	@ 0x3f
 800130e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001310:	2303      	movs	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001318:	2308      	movs	r3, #8
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800131c:	2340      	movs	r3, #64	@ 0x40
 800131e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001320:	2340      	movs	r3, #64	@ 0x40
 8001322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800132a:	2340      	movs	r3, #64	@ 0x40
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2104      	movs	r1, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f973 	bl	8005620 <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001340:	f000 f884 	bl	800144c <Error_Handler>
  }
}
 8001344:	bf00      	nop
 8001346:	3778      	adds	r7, #120	@ 0x78
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	58000400 	.word	0x58000400
 8001350:	58024800 	.word	0x58024800
 8001354:	58024400 	.word	0x58024400

08001358 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0b0      	sub	sp, #192	@ 0xc0
 800135c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	22c0      	movs	r2, #192	@ 0xc0
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f011 fdc0 	bl	8012eea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
 800136a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001376:	2319      	movs	r3, #25
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 300;
 800137a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001390:	2300      	movs	r3, #0
 8001392:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fcf5 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80013ac:	f000 f84e 	bl	800144c <Error_Handler>
  }
}
 80013b0:	bf00      	nop
 80013b2:	37c0      	adds	r7, #192	@ 0xc0
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013ca:	f000 fefd 	bl	80021c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80013d6:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80013da:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80013dc:	2312      	movs	r3, #18
 80013de:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013e8:	2303      	movs	r3, #3
 80013ea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013fc:	463b      	mov	r3, r7
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ff1a 	bl	8002238 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001404:	2301      	movs	r3, #1
 8001406:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8001408:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800140c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800140e:	2310      	movs	r3, #16
 8001410:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f000 ff0f 	bl	8002238 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800141a:	2004      	movs	r0, #4
 800141c:	f000 feec 	bl	80021f8 <HAL_MPU_Enable>

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800143a:	f000 fd95 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40001000 	.word	0x40001000

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <MX_SPI1_Init+0xa4>)
 800145e:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <MX_SPI1_Init+0xa8>)
 8001460:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <MX_SPI1_Init+0xa4>)
 8001464:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001468:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <MX_SPI1_Init+0xa4>)
 800146c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001470:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_SPI1_Init+0xa4>)
 8001474:	2207      	movs	r2, #7
 8001476:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <MX_SPI1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_SPI1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_SPI1_Init+0xa4>)
 8001486:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800148a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_SPI1_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_SPI1_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_SPI1_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_SPI1_Init+0xa4>)
 80014ea:	f005 ffbf 	bl	800746c <HAL_SPI_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80014f4:	f7ff ffaa 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	240003b0 	.word	0x240003b0
 8001500:	40013000 	.word	0x40013000

08001504 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001508:	4b28      	ldr	r3, [pc, #160]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800150a:	4a29      	ldr	r2, [pc, #164]	@ (80015b0 <MX_SPI2_Init+0xac>)
 800150c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b27      	ldr	r3, [pc, #156]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001510:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001516:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001518:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800151c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001520:	220f      	movs	r2, #15
 8001522:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001524:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001526:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800152a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001534:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001538:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800153a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800153c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001540:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001554:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001556:	2200      	movs	r2, #0
 8001558:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800155c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001560:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001564:	2200      	movs	r2, #0
 8001566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001568:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800156a:	2200      	movs	r2, #0
 800156c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001574:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800157c:	2200      	movs	r2, #0
 800157e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001582:	2200      	movs	r2, #0
 8001584:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001588:	2200      	movs	r2, #0
 800158a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800158e:	2200      	movs	r2, #0
 8001590:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI2_Init+0xa8>)
 8001594:	2200      	movs	r2, #0
 8001596:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_SPI2_Init+0xa8>)
 800159a:	f005 ff67 	bl	800746c <HAL_SPI_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80015a4:	f7ff ff52 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24000438 	.word	0x24000438
 80015b0:	40003800 	.word	0x40003800

080015b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <HAL_SPI_MspInit+0xf0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12e      	bne.n	8001634 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 80015d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 80015de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015e6:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 80015e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_SDIN_Pin;
 8001612:	23a0      	movs	r3, #160	@ 0xa0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <HAL_SPI_MspInit+0xf8>)
 800162e:	f001 f893 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001632:	e032      	b.n	800169a <HAL_SPI_MspInit+0xe6>
  else if(spiHandle->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	@ (80016b0 <HAL_SPI_MspInit+0xfc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12d      	bne.n	800169a <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001644:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001662:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <HAL_SPI_MspInit+0xf4>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800167a:	2306      	movs	r3, #6
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800168a:	2305      	movs	r3, #5
 800168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	@ (80016b4 <HAL_SPI_MspInit+0x100>)
 8001696:	f001 f85f 	bl	8002758 <HAL_GPIO_Init>
}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	@ 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40013000 	.word	0x40013000
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020000 	.word	0x58020000
 80016b0:	40003800 	.word	0x40003800
 80016b4:	58022000 	.word	0x58022000

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_MspInit+0x38>)
 80016c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c4:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <HAL_MspInit+0x38>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_MspInit+0x38>)
 80016d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	210f      	movs	r1, #15
 80016e0:	f06f 0001 	mvn.w	r0, #1
 80016e4:	f000 fd48 	bl	8002178 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	58024400 	.word	0x58024400

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b090      	sub	sp, #64	@ 0x40
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d827      	bhi.n	8001752 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001702:	2200      	movs	r2, #0
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	2036      	movs	r0, #54	@ 0x36
 8001708:	f000 fd36 	bl	8002178 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800170c:	2036      	movs	r0, #54	@ 0x36
 800170e:	f000 fd4d 	bl	80021ac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001712:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <HAL_InitTick+0xc4>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <HAL_InitTick+0xc8>)
 800171a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800171e:	4a27      	ldr	r2, [pc, #156]	@ (80017bc <HAL_InitTick+0xc8>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_InitTick+0xc8>)
 800172a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001736:	f107 0210 	add.w	r2, r7, #16
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fae3 	bl	8005d0c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <HAL_InitTick+0x6a>
 8001750:	e001      	b.n	8001756 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e02b      	b.n	80017ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001756:	f004 fac3 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 800175a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800175c:	e004      	b.n	8001768 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800175e:	f004 fabf 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 8001762:	4603      	mov	r3, r0
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800176a:	4a15      	ldr	r2, [pc, #84]	@ (80017c0 <HAL_InitTick+0xcc>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9b      	lsrs	r3, r3, #18
 8001772:	3b01      	subs	r3, #1
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_InitTick+0xd0>)
 8001778:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <HAL_InitTick+0xd4>)
 800177a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_InitTick+0xd0>)
 800177e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001784:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <HAL_InitTick+0xd0>)
 8001786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_InitTick+0xd0>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_InitTick+0xd0>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001796:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <HAL_InitTick+0xd0>)
 8001798:	f006 fcd5 	bl	8008146 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a2:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <HAL_InitTick+0xd0>)
 80017a4:	f006 fd26 	bl	80081f4 <HAL_TIM_Base_Start_IT>
 80017a8:	4603      	mov	r3, r0
 80017aa:	e000      	b.n	80017ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3740      	adds	r7, #64	@ 0x40
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000008 	.word	0x24000008
 80017bc:	58024400 	.word	0x58024400
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	240004c0 	.word	0x240004c0
 80017c8:	40001000 	.word	0x40001000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606_BUSY_Pin);
 8001806:	2040      	movs	r0, #64	@ 0x40
 8001808:	f001 f989 	bl	8002b1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <TIM6_DAC_IRQHandler+0x20>)
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800181e:	4804      	ldr	r0, [pc, #16]	@ (8001830 <TIM6_DAC_IRQHandler+0x20>)
 8001820:	f000 fdc3 	bl	80023aa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001824:	4803      	ldr	r0, [pc, #12]	@ (8001834 <TIM6_DAC_IRQHandler+0x24>)
 8001826:	f006 fecd 	bl	80085c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24000310 	.word	0x24000310
 8001834:	240004c0 	.word	0x240004c0

08001838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <OTG_FS_IRQHandler+0x10>)
 800183e:	f002 f8ed 	bl	8003a1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	240063dc 	.word	0x240063dc

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:

int _kill(int pid, int sig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001866:	f011 fba3 	bl	8012fb0 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
  return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:

void _exit (int status)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
  while (1) {}    /* Make sure we hang here */
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <_exit+0x12>

08001892 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e00a      	b.n	80018ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a4:	f3af 8000 	nop.w
 80018a8:	4601      	mov	r1, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf0      	blt.n	80018a4 <_read+0x12>
  }

  return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e009      	b.n	80018f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf1      	blt.n	80018de <_write+0x12>
  }
  return len;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_close>:

int _close(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	605a      	str	r2, [r3, #4]
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_isatty>:

int _isatty(int file)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f011 fb08 	bl	8012fb0 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	24080000 	.word	0x24080000
 80019cc:	00008000 	.word	0x00008000
 80019d0:	2400050c 	.word	0x2400050c
 80019d4:	24009858 	.word	0x24009858

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019dc:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <SystemInit+0xe4>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a36      	ldr	r2, [pc, #216]	@ (8001abc <SystemInit+0xe4>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <SystemInit+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d807      	bhi.n	8001a08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019f8:	4b31      	ldr	r3, [pc, #196]	@ (8001ac0 <SystemInit+0xe8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 030f 	bic.w	r3, r3, #15
 8001a00:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <SystemInit+0xe8>)
 8001a02:	f043 0307 	orr.w	r3, r3, #7
 8001a06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <SystemInit+0xec>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <SystemInit+0xec>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <SystemInit+0xec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <SystemInit+0xec>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4929      	ldr	r1, [pc, #164]	@ (8001ac4 <SystemInit+0xec>)
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <SystemInit+0xf0>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a26:	4b26      	ldr	r3, [pc, #152]	@ (8001ac0 <SystemInit+0xe8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <SystemInit+0xe8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 030f 	bic.w	r3, r3, #15
 8001a3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <SystemInit+0xe8>)
 8001a3c:	f043 0307 	orr.w	r3, r3, #7
 8001a40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <SystemInit+0xec>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <SystemInit+0xec>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <SystemInit+0xec>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <SystemInit+0xec>)
 8001a56:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <SystemInit+0xf4>)
 8001a58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <SystemInit+0xec>)
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <SystemInit+0xf8>)
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <SystemInit+0xec>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <SystemInit+0xfc>)
 8001a64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <SystemInit+0xec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <SystemInit+0xec>)
 8001a6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <SystemInit+0xfc>)
 8001a70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <SystemInit+0xec>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <SystemInit+0xec>)
 8001a7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <SystemInit+0xfc>)
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <SystemInit+0xec>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <SystemInit+0xec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <SystemInit+0xec>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <SystemInit+0xec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <SystemInit+0x100>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <SystemInit+0x104>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aa2:	d202      	bcs.n	8001aaa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <SystemInit+0x108>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <SystemInit+0x10c>)
 8001aac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ab0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	52002000 	.word	0x52002000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001acc:	02020200 	.word	0x02020200
 8001ad0:	01ff0000 	.word	0x01ff0000
 8001ad4:	01010280 	.word	0x01010280
 8001ad8:	5c001000 	.word	0x5c001000
 8001adc:	ffff0000 	.word	0xffff0000
 8001ae0:	51008108 	.word	0x51008108
 8001ae4:	52004000 	.word	0x52004000

08001ae8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b09a      	sub	sp, #104	@ 0x68
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	222c      	movs	r2, #44	@ 0x2c
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f011 f9e1 	bl	8012eea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b28:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b2a:	4a52      	ldr	r2, [pc, #328]	@ (8001c74 <MX_TIM1_Init+0x18c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b2e:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b34:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b36:	2220      	movs	r2, #32
 8001b38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b3c:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001b40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b48:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b54:	4846      	ldr	r0, [pc, #280]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b56:	f006 faf6 	bl	8008146 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b60:	f7ff fc74 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b68:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b6e:	4619      	mov	r1, r3
 8001b70:	483f      	ldr	r0, [pc, #252]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b72:	f006 ff43 	bl	80089fc <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b7c:	f7ff fc66 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b80:	483b      	ldr	r0, [pc, #236]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001b82:	f006 fbaf 	bl	80082e4 <HAL_TIM_PWM_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b8c:	f7ff fc5e 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4833      	ldr	r0, [pc, #204]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001ba4:	f007 fd4c 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bae:	f7ff fc4d 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb2:	2360      	movs	r3, #96	@ 0x60
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 3000-1;
 8001bb6:	f640 33b7 	movw	r3, #2999	@ 0xbb7
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4825      	ldr	r0, [pc, #148]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001bda:	f006 fdfb 	bl	80087d4 <HAL_TIM_PWM_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001be4:	f7ff fc32 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001be8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bec:	2204      	movs	r2, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001bf2:	f006 fdef 	bl	80087d4 <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001bfc:	f7ff fc26 	bl	800144c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c08:	2208      	movs	r2, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4818      	ldr	r0, [pc, #96]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001c0e:	f006 fde1 	bl	80087d4 <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001c18:	f7ff fc18 	bl	800144c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001c52:	f007 fd83 	bl	800975c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8001c5c:	f7ff fbf6 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c60:	4803      	ldr	r0, [pc, #12]	@ (8001c70 <MX_TIM1_Init+0x188>)
 8001c62:	f000 f8b9 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001c66:	bf00      	nop
 8001c68:	3768      	adds	r7, #104	@ 0x68
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000510 	.word	0x24000510
 8001c74:	40010000 	.word	0x40010000

08001c78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	@ 0x38
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
 8001ca6:	615a      	str	r2, [r3, #20]
 8001ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001caa:	4b2e      	ldr	r3, [pc, #184]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12000-1;
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cc0:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001cc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc6:	4b27      	ldr	r3, [pc, #156]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd2:	4824      	ldr	r0, [pc, #144]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cd4:	f006 fa37 	bl	8008146 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cde:	f7ff fbb5 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cec:	4619      	mov	r1, r3
 8001cee:	481d      	ldr	r0, [pc, #116]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001cf0:	f006 fe84 	bl	80089fc <HAL_TIM_ConfigClockSource>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cfa:	f7ff fba7 	bl	800144c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cfe:	4819      	ldr	r0, [pc, #100]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001d00:	f006 faf0 	bl	80082e4 <HAL_TIM_PWM_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d0a:	f7ff fb9f 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001d1e:	f007 fc8f 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d28:	f7ff fb90 	bl	800144c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2c:	2360      	movs	r3, #96	@ 0x60
 8001d2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 9000-1;
 8001d30:	f242 3327 	movw	r3, #8999	@ 0x2327
 8001d34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	4619      	mov	r1, r3
 8001d44:	4807      	ldr	r0, [pc, #28]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001d46:	f006 fd45 	bl	80087d4 <HAL_TIM_PWM_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d50:	f7ff fb7c 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <MX_TIM2_Init+0xec>)
 8001d56:	f000 f83f 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001d5a:	bf00      	nop
 8001d5c:	3738      	adds	r7, #56	@ 0x38
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2400055c 	.word	0x2400055c

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10f      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d98:	e013      	b.n	8001dc2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da2:	d10e      	bne.n	8001dc2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001db4:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	58024400 	.word	0x58024400

08001dd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a25      	ldr	r2, [pc, #148]	@ (8001e8c <HAL_TIM_MspPostInit+0xb4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d120      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e00:	4a23      	ldr	r2, [pc, #140]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15;
 8001e18:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4817      	ldr	r0, [pc, #92]	@ (8001e94 <HAL_TIM_MspPostInit+0xbc>)
 8001e36:	f000 fc8f 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e3a:	e023      	b.n	8001e84 <HAL_TIM_MspPostInit+0xac>
  else if(timHandle->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e44:	d11e      	bne.n	8001e84 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4c:	4a10      	ldr	r2, [pc, #64]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_TIM_MspPostInit+0xb8>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <HAL_TIM_MspPostInit+0xc0>)
 8001e80:	f000 fc6a 	bl	8002758 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3728      	adds	r7, #40	@ 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020400 	.word	0x58020400
 8001e98:	58020000 	.word	0x58020000

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ea0:	f7ff fd9a 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea4:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea6:	490d      	ldr	r1, [pc, #52]	@ (8001edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eac:	e002      	b.n	8001eb4 <LoopCopyDataInit>

08001eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb2:	3304      	adds	r3, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb8:	d3f9      	bcc.n	8001eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec0:	e001      	b.n	8001ec6 <LoopFillZerobss>

08001ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec4:	3204      	adds	r2, #4

08001ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec8:	d3fb      	bcc.n	8001ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eca:	f011 f877 	bl	8012fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7ff f90d 	bl	80010ec <main>
  bx  lr
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ed8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001edc:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8001ee0:	08017a20 	.word	0x08017a20
  ldr r2, =_sbss
 8001ee4:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8001ee8:	24009854 	.word	0x24009854

08001eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC3_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f000 f933 	bl	8002162 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001efc:	f003 fd46 	bl	800598c <HAL_RCC_GetSysClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_Init+0x68>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	4913      	ldr	r1, [pc, #76]	@ (8001f5c <HAL_Init+0x6c>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_Init+0x68>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <HAL_Init+0x6c>)
 8001f24:	5cd3      	ldrb	r3, [r2, r3]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_Init+0x70>)
 8001f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f34:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <HAL_Init+0x74>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3a:	2005      	movs	r0, #5
 8001f3c:	f7ff fbda 	bl	80016f4 <HAL_InitTick>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e002      	b.n	8001f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4a:	f7ff fbb5 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	58024400 	.word	0x58024400
 8001f5c:	08015624 	.word	0x08015624
 8001f60:	24000004 	.word	0x24000004
 8001f64:	24000000 	.word	0x24000000

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2400000c 	.word	0x2400000c
 8001f8c:	240005a8 	.word	0x240005a8

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	240005a8 	.word	0x240005a8

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2400000c 	.word	0x2400000c

08001ff0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_GetREVID+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	5c001000 	.word	0x5c001000

08002008 <__NVIC_SetPriorityGrouping>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	4313      	orrs	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0000 	.word	0x05fa0000

08002050 <__NVIC_GetPriorityGrouping>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	@ (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	@ (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	@ (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	@ 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff4c 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002186:	f7ff ff63 	bl	8002050 <__NVIC_GetPriorityGrouping>
 800218a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	f7ff ffb3 	bl	80020fc <NVIC_EncodePriority>
 8002196:	4602      	mov	r2, r0
 8002198:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff82 	bl	80020a8 <__NVIC_SetPriority>
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff56 	bl	800206c <__NVIC_EnableIRQ>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021cc:	f3bf 8f5f 	dmb	sy
}
 80021d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_MPU_Disable+0x28>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	4a06      	ldr	r2, [pc, #24]	@ (80021f0 <HAL_MPU_Disable+0x28>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_MPU_Disable+0x2c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	e000ed90 	.word	0xe000ed90

080021f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_MPU_Enable+0x38>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_MPU_Enable+0x3c>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_MPU_Enable+0x3c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002216:	f3bf 8f4f 	dsb	sy
}
 800221a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800221c:	f3bf 8f6f 	isb	sy
}
 8002220:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed90 	.word	0xe000ed90
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	785a      	ldrb	r2, [r3, #1]
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002246:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7adb      	ldrb	r3, [r3, #11]
 8002266:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7a9b      	ldrb	r3, [r3, #10]
 800226e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7b5b      	ldrb	r3, [r3, #13]
 8002276:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7b9b      	ldrb	r3, [r3, #14]
 800227e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7bdb      	ldrb	r3, [r3, #15]
 8002286:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7a5b      	ldrb	r3, [r3, #9]
 800228e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a1b      	ldrb	r3, [r3, #8]
 8002296:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002298:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022a4:	6113      	str	r3, [r2, #16]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed90 	.word	0xe000ed90

080022b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e014      	b.n	80022f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe f998 	bl	8000610 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e046      	b.n	800239e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_DAC_Start+0x20>
 8002318:	2302      	movs	r3, #2
 800231a:	e040      	b.n	800239e <HAL_DAC_Start+0xa2>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002350:	2b02      	cmp	r3, #2
 8002352:	d11d      	bne.n	8002390 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e014      	b.n	8002390 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2102      	movs	r1, #2
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0202 	orr.w	r2, r2, #2
 800238e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01d      	beq.n	8002408 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d018      	beq.n	8002408 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2204      	movs	r2, #4
 80023da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002400:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f851 	bl	80024aa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01d      	beq.n	800244e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d018      	beq.n	800244e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002446:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f97b 	bl	8002744 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002456:	b480      	push	{r7}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e015      	b.n	800249e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3308      	adds	r3, #8
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e004      	b.n	8002494 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3314      	adds	r3, #20
 8002492:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	461a      	mov	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_DAC_ConfigChannel+0x1e>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e12a      	b.n	8002738 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	795b      	ldrb	r3, [r3, #5]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_DAC_ConfigChannel+0x2e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e124      	b.n	8002738 <HAL_DAC_ConfigChannel+0x278>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2202      	movs	r2, #2
 80024f8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d17a      	bne.n	80025f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002502:	f7ff fd45 	bl	8001f90 <HAL_GetTick>
 8002506:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d13d      	bne.n	800258a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800250e:	e018      	b.n	8002542 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002510:	f7ff fd3e 	bl	8001f90 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d911      	bls.n	8002542 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002524:	4b86      	ldr	r3, [pc, #536]	@ (8002740 <HAL_DAC_ConfigChannel+0x280>)
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f043 0208 	orr.w	r2, r3, #8
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2203      	movs	r2, #3
 800253c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0fa      	b.n	8002738 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002548:	4b7d      	ldr	r3, [pc, #500]	@ (8002740 <HAL_DAC_ConfigChannel+0x280>)
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1df      	bne.n	8002510 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	6992      	ldr	r2, [r2, #24]
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
 800255a:	e020      	b.n	800259e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800255c:	f7ff fd18 	bl	8001f90 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d90f      	bls.n	800258a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	da0a      	bge.n	800258a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f043 0208 	orr.w	r2, r3, #8
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2203      	movs	r2, #3
 8002584:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0d6      	b.n	8002738 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	dbe3      	blt.n	800255c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	6992      	ldr	r2, [r2, #24]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	ea02 0103 	and.w	r1, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	21ff      	movs	r1, #255	@ 0xff
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	ea02 0103 	and.w	r1, r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d11d      	bne.n	800263c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002642:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2207      	movs	r2, #7
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d102      	bne.n	8002666 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	e00f      	b.n	8002686 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d102      	bne.n	8002674 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800266e:	2301      	movs	r3, #1
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	e008      	b.n	8002686 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	e001      	b.n	8002686 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	22c0      	movs	r2, #192	@ 0xc0
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	@ 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20008000 	.word	0x20008000

08002744 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002766:	4b89      	ldr	r3, [pc, #548]	@ (800298c <HAL_GPIO_Init+0x234>)
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800276a:	e194      	b.n	8002a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8186 	beq.w	8002a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x44>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	69b9      	ldr	r1, [r7, #24]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80e0 	beq.w	8002a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_GPIO_Init+0x23c>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_GPIO_Init+0x240>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d052      	beq.n	80029c0 <HAL_GPIO_Init+0x268>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_GPIO_Init+0x244>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_GPIO_Init+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_GPIO_Init+0x248>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02b      	beq.n	8002982 <HAL_GPIO_Init+0x22a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <HAL_GPIO_Init+0x24c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d025      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_GPIO_Init+0x250>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_GPIO_Init+0x254>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1a      	ldr	r2, [pc, #104]	@ (80029b0 <HAL_GPIO_Init+0x258>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_GPIO_Init+0x25c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_Init+0x216>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <HAL_GPIO_Init+0x260>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x212>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_GPIO_Init+0x264>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_Init+0x20e>
 8002962:	2309      	movs	r3, #9
 8002964:	e02d      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002966:	230a      	movs	r3, #10
 8002968:	e02b      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800296a:	2308      	movs	r3, #8
 800296c:	e029      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800296e:	2307      	movs	r3, #7
 8002970:	e027      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002972:	2306      	movs	r3, #6
 8002974:	e025      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002976:	2305      	movs	r3, #5
 8002978:	e023      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800297a:	2304      	movs	r3, #4
 800297c:	e021      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800297e:	2303      	movs	r3, #3
 8002980:	e01f      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002982:	2302      	movs	r3, #2
 8002984:	e01d      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002986:	2301      	movs	r3, #1
 8002988:	e01b      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800298a:	bf00      	nop
 800298c:	58000080 	.word	0x58000080
 8002990:	58024400 	.word	0x58024400
 8002994:	58000400 	.word	0x58000400
 8002998:	58020000 	.word	0x58020000
 800299c:	58020400 	.word	0x58020400
 80029a0:	58020800 	.word	0x58020800
 80029a4:	58020c00 	.word	0x58020c00
 80029a8:	58021000 	.word	0x58021000
 80029ac:	58021400 	.word	0x58021400
 80029b0:	58021800 	.word	0x58021800
 80029b4:	58021c00 	.word	0x58021c00
 80029b8:	58022000 	.word	0x58022000
 80029bc:	58022400 	.word	0x58022400
 80029c0:	2300      	movs	r3, #0
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d2:	4938      	ldr	r1, [pc, #224]	@ (8002ab4 <HAL_GPIO_Init+0x35c>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f ae63 	bne.w	800276c <HAL_GPIO_Init+0x14>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3724      	adds	r7, #36	@ 0x24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	58000400 	.word	0x58000400

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	041a      	lsls	r2, r3, #16
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00f f8c1 	bl	8011ccc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e08b      	b.n	8002c7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fa4e 	bl	800101c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	@ 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ba4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e006      	b.n	8002bdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d108      	bne.n	8002bf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	e007      	b.n	8002c06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_I2C_Init+0x134>)
 8002c12:	430b      	orrs	r3, r1
 8002c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69d9      	ldr	r1, [r3, #28]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1a      	ldr	r2, [r3, #32]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	02008000 	.word	0x02008000

08002c8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	f040 80f9 	bne.w	8002ea6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x34>
 8002cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0ed      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Mem_Write+0x4e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0e6      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ce2:	f7ff f955 	bl	8001f90 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2319      	movs	r3, #25
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fac3 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0d1      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	@ 0x21
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d2c:	88f8      	ldrh	r0, [r7, #6]
 8002d2e:	893a      	ldrh	r2, [r7, #8]
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f9d3 	bl	80030e8 <I2C_RequestMemoryWrite>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0a9      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2bff      	cmp	r3, #255	@ 0xff
 8002d5c:	d90e      	bls.n	8002d7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22ff      	movs	r2, #255	@ 0xff
 8002d62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fc47 	bl	8003608 <I2C_TransferConfig>
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fc36 	bl	8003608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fac6 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e07b      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d034      	beq.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d130      	bne.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa3f 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e04d      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2bff      	cmp	r3, #255	@ 0xff
 8002e14:	d90e      	bls.n	8002e34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	@ 0xff
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	2300      	movs	r3, #0
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fbeb 	bl	8003608 <I2C_TransferConfig>
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fbda 	bl	8003608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d19e      	bne.n	8002d9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 faac 	bl	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e01a      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2220      	movs	r2, #32
 8002e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_I2C_Mem_Write+0x224>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fe00e800 	.word	0xfe00e800

08002eb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	817b      	strh	r3, [r7, #10]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	813b      	strh	r3, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 80fd 	bne.w	80030d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x34>
 8002ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0f1      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x4e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0ea      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f0a:	f7ff f841 	bl	8001f90 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2319      	movs	r3, #25
 8002f16:	2201      	movs	r2, #1
 8002f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f9af 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d5      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2222      	movs	r2, #34	@ 0x22
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f54:	88f8      	ldrh	r0, [r7, #6]
 8002f56:	893a      	ldrh	r2, [r7, #8]
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	4603      	mov	r3, r0
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f913 	bl	8003190 <I2C_RequestMemoryRead>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0ad      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	@ 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	@ 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	4b52      	ldr	r3, [pc, #328]	@ (80030e0 <HAL_I2C_Mem_Read+0x22c>)
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fb33 	bl	8003608 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80030e0 <HAL_I2C_Mem_Read+0x22c>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fb22 	bl	8003608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2104      	movs	r1, #4
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f956 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07c      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d034      	beq.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d130      	bne.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	@ 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f927 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e04d      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2bff      	cmp	r3, #255	@ 0xff
 8003044:	d90e      	bls.n	8003064 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	22ff      	movs	r2, #255	@ 0xff
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003050:	b2da      	uxtb	r2, r3
 8003052:	8979      	ldrh	r1, [r7, #10]
 8003054:	2300      	movs	r3, #0
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fad3 	bl	8003608 <I2C_TransferConfig>
 8003062:	e00f      	b.n	8003084 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fac2 	bl	8003608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d19a      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f994 	bl	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e01a      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2220      	movs	r2, #32
 80030a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_I2C_Mem_Read+0x230>)
 80030b6:	400b      	ands	r3, r1
 80030b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	80002400 	.word	0x80002400
 80030e4:	fe00e800 	.word	0xfe00e800

080030e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	817b      	strh	r3, [r7, #10]
 80030fa:	460b      	mov	r3, r1
 80030fc:	813b      	strh	r3, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	8979      	ldrh	r1, [r7, #10]
 8003108:	4b20      	ldr	r3, [pc, #128]	@ (800318c <I2C_RequestMemoryWrite+0xa4>)
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fa79 	bl	8003608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f909 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02c      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
 800313a:	e015      	b.n	8003168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8ef 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e012      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800315e:	893b      	ldrh	r3, [r7, #8]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2200      	movs	r2, #0
 8003170:	2180      	movs	r1, #128	@ 0x80
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f884 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	80002000 	.word	0x80002000

08003190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <I2C_RequestMemoryRead+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa26 	bl	8003608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8b6 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e02c      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28
 80031e0:	e015      	b.n	800320e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e2:	893b      	ldrh	r3, [r7, #8]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f89c 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e012      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	@ 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f831 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d103      	bne.n	8003256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d007      	beq.n	8003274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003290:	e03b      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8d6 	bl	8003448 <I2C_IsErrorOccurred>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d02d      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fe6f 	bl	8001f90 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d122      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d113      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	429a      	cmp	r2, r3
 8003326:	d0b4      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800333e:	e033      	b.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f87f 	bl	8003448 <I2C_IsErrorOccurred>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e031      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d025      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe fe18 	bl	8001f90 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11a      	bne.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d013      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e007      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d1c4      	bne.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033cc:	e02f      	b.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f838 	bl	8003448 <I2C_IsErrorOccurred>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02d      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe fdd5 	bl	8001f90 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11a      	bne.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b20      	cmp	r3, #32
 8003404:	d013      	beq.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b20      	cmp	r3, #32
 800343a:	d1c8      	bne.n	80033ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d068      	beq.n	8003546 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2210      	movs	r2, #16
 800347a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800347c:	e049      	b.n	8003512 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d045      	beq.n	8003512 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fe fd83 	bl	8001f90 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_IsErrorOccurred+0x54>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d13a      	bne.n	8003512 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034be:	d121      	bne.n	8003504 <I2C_IsErrorOccurred+0xbc>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c6:	d01d      	beq.n	8003504 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d01a      	beq.n	8003504 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034de:	f7fe fd57 	bl	8001f90 <HAL_GetTick>
 80034e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e4:	e00e      	b.n	8003504 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034e6:	f7fe fd53 	bl	8001f90 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b19      	cmp	r3, #25
 80034f2:	d907      	bls.n	8003504 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003502:	e006      	b.n	8003512 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d1e9      	bne.n	80034e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d003      	beq.n	8003528 <I2C_IsErrorOccurred+0xe0>
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0aa      	beq.n	800347e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2220      	movs	r2, #32
 8003536:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800358a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fe3b 	bl	8003238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <I2C_IsErrorOccurred+0x1bc>)
 80035ce:	400b      	ands	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	@ 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	fe00e800 	.word	0xfe00e800

08003608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	4613      	mov	r3, r2
 8003618:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003620:	7a7b      	ldrb	r3, [r7, #9]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003628:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	4313      	orrs	r3, r2
 8003632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003636:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	0d5b      	lsrs	r3, r3, #21
 8003642:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <I2C_TransferConfig+0x60>)
 8003648:	430b      	orrs	r3, r1
 800364a:	43db      	mvns	r3, r3
 800364c:	ea02 0103 	and.w	r1, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	03ff63ff 	.word	0x03ff63ff

0800366c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	d138      	bne.n	80036f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800368c:	2302      	movs	r3, #2
 800368e:	e032      	b.n	80036f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d139      	bne.n	800378c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003722:	2302      	movs	r3, #2
 8003724:	e033      	b.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2224      	movs	r2, #36	@ 0x24
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af02      	add	r7, sp, #8
 80037a0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0fe      	b.n	80039aa <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f00c fc21 	bl	8010008 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f006 f9a9 	bl	8009b2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7c1a      	ldrb	r2, [r3, #16]
 80037e0:	f88d 2000 	strb.w	r2, [sp]
 80037e4:	3304      	adds	r3, #4
 80037e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e8:	f006 f87a 	bl	80098e0 <USB_CoreInit>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0d5      	b.n	80039aa <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f006 f9a1 	bl	8009b4c <USB_SetCurrentMode>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0c6      	b.n	80039aa <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800381c:	2300      	movs	r3, #0
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e04a      	b.n	80038b8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3315      	adds	r3, #21
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3314      	adds	r3, #20
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	b298      	uxth	r0, r3
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	332e      	adds	r3, #46	@ 0x2e
 800385e:	4602      	mov	r2, r0
 8003860:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3318      	adds	r3, #24
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	331c      	adds	r3, #28
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3320      	adds	r3, #32
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3324      	adds	r3, #36	@ 0x24
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3301      	adds	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3af      	bcc.n	8003822 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038c8:	7bfa      	ldrb	r2, [r7, #15]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	3301      	adds	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	791b      	ldrb	r3, [r3, #4]
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3b5      	bcc.n	80038c8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7c1a      	ldrb	r2, [r3, #16]
 8003964:	f88d 2000 	strb.w	r2, [sp]
 8003968:	3304      	adds	r3, #4
 800396a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800396c:	f006 f93a 	bl	8009be4 <USB_DevInit>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e013      	b.n	80039aa <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7b1b      	ldrb	r3, [r3, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f001 f96d 	bl	8004c78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f007 f979 	bl	800ac9a <USB_DevDisconnect>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_Start+0x1c>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e022      	b.n	8003a14 <HAL_PCD_Start+0x62>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f006 f884 	bl	8009b08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f007 f927 	bl	800ac58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b08d      	sub	sp, #52	@ 0x34
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f007 f9e5 	bl	800ae02 <USB_GetMode>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 84b9 	bne.w	80043b2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f007 f949 	bl	800acdc <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 84af 	beq.w	80043b0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f007 f936 	bl	800acdc <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 0202 	and.w	r2, r2, #2
 8003a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f007 f924 	bl	800acdc <USB_ReadInterrupts>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d161      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699a      	ldr	r2, [r3, #24]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0210 	bic.w	r2, r2, #16
 8003aac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	0c5b      	lsrs	r3, r3, #17
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d124      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d035      	beq.n	8003b52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	6a38      	ldr	r0, [r7, #32]
 8003afa:	f006 ff5b 	bl	800a9b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0a:	441a      	add	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1c:	441a      	add	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	615a      	str	r2, [r3, #20]
 8003b22:	e016      	b.n	8003b52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	0c5b      	lsrs	r3, r3, #17
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d110      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b36:	2208      	movs	r2, #8
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6a38      	ldr	r0, [r7, #32]
 8003b3c:	f006 ff3a 	bl	800a9b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	695a      	ldr	r2, [r3, #20]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4c:	441a      	add	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0210 	orr.w	r2, r2, #16
 8003b60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 f8b8 	bl	800acdc <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b76:	f040 80a7 	bne.w	8003cc8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f007 f8bd 	bl	800ad02 <USB_ReadDevAllOutEpInterrupt>
 8003b88:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b8a:	e099      	b.n	8003cc0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 808e 	beq.w	8003cb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f007 f8e1 	bl	800ad6a <USB_ReadDevOutEPInterrupt>
 8003ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fecf 	bl	800496c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	2308      	movs	r3, #8
 8003be8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 ffa5 	bl	8004b3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d030      	beq.n	8003c7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c20:	2b80      	cmp	r3, #128	@ 0x80
 8003c22:	d109      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	78db      	ldrb	r3, [r3, #3]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f00c faf6 	bl	8010254 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	2302      	movs	r3, #2
 8003c78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	2320      	movs	r3, #32
 8003c94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f47f af62 	bne.w	8003b8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f007 f805 	bl	800acdc <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cdc:	f040 80db 	bne.w	8003e96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f007 f826 	bl	800ad36 <USB_ReadDevAllInEpInterrupt>
 8003cea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003cf0:	e0cd      	b.n	8003e8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80c2 	beq.w	8003e82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f007 f84c 	bl	800ada6 <USB_ReadDevInEPInterrupt>
 8003d0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d057      	beq.n	8003dca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2201      	movs	r2, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	799b      	ldrb	r3, [r3, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d132      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3320      	adds	r3, #32
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4403      	add	r3, r0
 8003d78:	331c      	adds	r3, #28
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4419      	add	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4403      	add	r3, r0
 8003d8c:	3320      	adds	r3, #32
 8003d8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d113      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x3a2>
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3324      	adds	r3, #36	@ 0x24
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d108      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003db6:	461a      	mov	r2, r3
 8003db8:	2101      	movs	r1, #1
 8003dba:	f007 f855 	bl	800ae68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f00c f9c0 	bl	801014a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de0:	461a      	mov	r2, r3
 8003de2:	2308      	movs	r3, #8
 8003de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2310      	movs	r3, #16
 8003e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2340      	movs	r3, #64	@ 0x40
 8003e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2a:	6a38      	ldr	r0, [r7, #32]
 8003e2c:	f006 f838 	bl	8009ea0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d108      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f00c fa0d 	bl	8010278 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fce8 	bl	8004852 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	3301      	adds	r3, #1
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f af2e 	bne.w	8003cf2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f006 ff1e 	bl	800acdc <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eaa:	d122      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fef3 	bl	8004cc0 <HAL_PCDEx_LPM_Callback>
 8003eda:	e002      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f00c f9ab 	bl	8010238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f006 fef0 	bl	800acdc <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f06:	d112      	bne.n	8003f2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f00c f967 	bl	80101ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f006 fed2 	bl	800acdc <USB_ReadInterrupts>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f42:	d121      	bne.n	8003f88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d111      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f78:	2101      	movs	r1, #1
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fea0 	bl	8004cc0 <HAL_PCDEx_LPM_Callback>
 8003f80:	e002      	b.n	8003f88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f00c f932 	bl	80101ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f006 fea5 	bl	800acdc <USB_ReadInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	f040 80b7 	bne.w	800410e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2110      	movs	r1, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f005 ff70 	bl	8009ea0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc4:	e046      	b.n	8004054 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004006:	461a      	mov	r2, r3
 8004008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800400c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004028:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800402c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	440a      	add	r2, r1
 8004044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800404c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004050:	3301      	adds	r3, #1
 8004052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	461a      	mov	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	4293      	cmp	r3, r2
 800405e:	d3b2      	bcc.n	8003fc6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800406e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004072:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7bdb      	ldrb	r3, [r3, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408c:	f043 030b 	orr.w	r3, r3, #11
 8004090:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a2:	f043 030b 	orr.w	r3, r3, #11
 80040a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80040a8:	e015      	b.n	80040d6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b8:	4619      	mov	r1, r3
 80040ba:	f242 032b 	movw	r3, #8235	@ 0x202b
 80040be:	4313      	orrs	r3, r2
 80040c0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d0:	f043 030b 	orr.w	r3, r3, #11
 80040d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040f8:	461a      	mov	r2, r3
 80040fa:	f006 feb5 	bl	800ae68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800410c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f006 fde2 	bl	800acdc <USB_ReadInterrupts>
 8004118:	4603      	mov	r3, r0
 800411a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004122:	d123      	bne.n	800416c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f006 fe79 	bl	800ae20 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f005 ff2d 	bl	8009f92 <USB_GetDevSpeed>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681c      	ldr	r4, [r3, #0]
 8004144:	f001 fd9c 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8004148:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800414e:	461a      	mov	r2, r3
 8004150:	4620      	mov	r0, r4
 8004152:	f005 fc37 	bl	80099c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f00c f81f 	bl	801019a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800416a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f006 fdb3 	bl	800acdc <USB_ReadInterrupts>
 8004176:	4603      	mov	r3, r0
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d10a      	bne.n	8004196 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f00b fffc 	bl	801017e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f002 0208 	and.w	r2, r2, #8
 8004194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f006 fd9e 	bl	800acdc <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d123      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b6:	2301      	movs	r3, #1
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	e014      	b.n	80041e6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d105      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fb08 	bl	80047f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	3301      	adds	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	791b      	ldrb	r3, [r3, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d3e4      	bcc.n	80041bc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f006 fd70 	bl	800acdc <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004206:	d13c      	bne.n	8004282 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004208:	2301      	movs	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	e02b      	b.n	8004266 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3318      	adds	r3, #24
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d115      	bne.n	8004260 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004234:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004236:	2b00      	cmp	r3, #0
 8004238:	da12      	bge.n	8004260 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3317      	adds	r3, #23
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fac8 	bl	80047f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	3301      	adds	r3, #1
 8004264:	627b      	str	r3, [r7, #36]	@ 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	461a      	mov	r2, r3
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	4293      	cmp	r3, r2
 8004270:	d3cd      	bcc.n	800420e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f006 fd28 	bl	800acdc <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004296:	d156      	bne.n	8004346 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	e045      	b.n	800432a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d12e      	bne.n	8004324 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	da2b      	bge.n	8004324 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80042d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042dc:	429a      	cmp	r2, r3
 80042de:	d121      	bne.n	8004324 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800431c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004320:	6053      	str	r3, [r2, #4]
            break;
 8004322:	e008      	b.n	8004336 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	3301      	adds	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	4293      	cmp	r3, r2
 8004334:	d3b3      	bcc.n	800429e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f006 fcc6 	bl	800acdc <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d10a      	bne.n	8004372 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f00b ff9d 	bl	801029c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f006 fcb0 	bl	800acdc <USB_ReadInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d115      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f00b ff8d 	bl	80102b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e000      	b.n	80043b2 <HAL_PCD_IRQHandler+0x996>
      return;
 80043b0:	bf00      	nop
    }
  }
}
 80043b2:	3734      	adds	r7, #52	@ 0x34
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}

080043b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_PCD_SetAddress+0x1a>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e012      	b.n	80043f8 <HAL_PCD_SetAddress+0x40>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f006 fc0f 	bl	800ac0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	70fb      	strb	r3, [r7, #3]
 8004412:	460b      	mov	r3, r1
 8004414:	803b      	strh	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800441e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da0f      	bge.n	8004446 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3310      	adds	r3, #16
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	705a      	strb	r2, [r3, #1]
 8004444:	e00f      	b.n	8004466 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 020f 	and.w	r2, r3, #15
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004472:	883a      	ldrh	r2, [r7, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	78ba      	ldrb	r2, [r7, #2]
 800447c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004490:	78bb      	ldrb	r3, [r7, #2]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d102      	bne.n	800449c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_PCD_EP_Open+0xaa>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e00e      	b.n	80044c8 <HAL_PCD_EP_Open+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f005 fd8f 	bl	8009fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80044c6:	7afb      	ldrb	r3, [r7, #11]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da0f      	bge.n	8004504 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	f003 020f 	and.w	r2, r3, #15
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	3310      	adds	r3, #16
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	3304      	adds	r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	705a      	strb	r2, [r3, #1]
 8004502:	e00f      	b.n	8004524 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_PCD_EP_Close+0x6e>
 800453a:	2302      	movs	r3, #2
 800453c:	e00e      	b.n	800455c <HAL_PCD_EP_Close+0x8c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	f005 fdcd 	bl	800a0ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	460b      	mov	r3, r1
 8004572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 020f 	and.w	r2, r3, #15
 800457a:	4613      	mov	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a6:	7afb      	ldrb	r3, [r7, #11]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	799b      	ldrb	r3, [r3, #6]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	799b      	ldrb	r3, [r3, #6]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	f005 fe6a 	bl	800a2a4 <USB_EPStartXfer>

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 020f 	and.w	r2, r3, #15
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045fc:	681b      	ldr	r3, [r3, #0]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	460b      	mov	r3, r1
 8004618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3310      	adds	r3, #16
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2201      	movs	r2, #1
 8004648:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	799b      	ldrb	r3, [r3, #6]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	799b      	ldrb	r3, [r3, #6]
 800466c:	461a      	mov	r2, r3
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	f005 fe18 	bl	800a2a4 <USB_EPStartXfer>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	7912      	ldrb	r2, [r2, #4]
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e04f      	b.n	800473c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da0f      	bge.n	80046c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	3310      	adds	r3, #16
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	705a      	strb	r2, [r3, #1]
 80046c2:	e00d      	b.n	80046e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_PCD_EP_SetStall+0x82>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e01d      	b.n	800473c <HAL_PCD_EP_SetStall+0xbe>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	4618      	mov	r0, r3
 8004710:	f006 f9a8 	bl	800aa64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7999      	ldrb	r1, [r3, #6]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800472c:	461a      	mov	r2, r3
 800472e:	f006 fb9b 	bl	800ae68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	7912      	ldrb	r2, [r2, #4]
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e042      	b.n	80047e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da0f      	bge.n	800478a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	3310      	adds	r3, #16
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	705a      	strb	r2, [r3, #1]
 8004788:	e00f      	b.n	80047aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_EP_ClrStall+0x86>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e00e      	b.n	80047e8 <HAL_PCD_EP_ClrStall+0xa4>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	4618      	mov	r0, r3
 80047da:	f006 f9b1 	bl	800ab40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004800:	2b00      	cmp	r3, #0
 8004802:	da0c      	bge.n	800481e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	3310      	adds	r3, #16
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e00c      	b.n	8004838 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	f005 ffd0 	bl	800a7e4 <USB_EPStopXfer>
 8004844:	4603      	mov	r3, r0
 8004846:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004848:	7afb      	ldrb	r3, [r7, #11]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08a      	sub	sp, #40	@ 0x28
 8004856:	af02      	add	r7, sp, #8
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	3310      	adds	r3, #16
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d901      	bls.n	800488a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06b      	b.n	8004962 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	429a      	cmp	r2, r3
 800489e:	d902      	bls.n	80048a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3303      	adds	r3, #3
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ae:	e02a      	b.n	8004906 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d902      	bls.n	80048cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3303      	adds	r3, #3
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68d9      	ldr	r1, [r3, #12]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	4603      	mov	r3, r0
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	f006 f825 	bl	800a938 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	441a      	add	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	429a      	cmp	r2, r3
 800491a:	d809      	bhi.n	8004930 <PCD_WriteEmptyTxFifo+0xde>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004924:	429a      	cmp	r2, r3
 8004926:	d203      	bcs.n	8004930 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1bf      	bne.n	80048b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	429a      	cmp	r2, r3
 800493a:	d811      	bhi.n	8004960 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	2201      	movs	r2, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	43db      	mvns	r3, r3
 8004956:	6939      	ldr	r1, [r7, #16]
 8004958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495c:	4013      	ands	r3, r2
 800495e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	333c      	adds	r3, #60	@ 0x3c
 8004984:	3304      	adds	r3, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	799b      	ldrb	r3, [r3, #6]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d17b      	bne.n	8004a9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4a61      	ldr	r2, [pc, #388]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f240 80b9 	bls.w	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b3 	beq.w	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d4:	6093      	str	r3, [r2, #8]
 80049d6:	e0a7      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2320      	movs	r3, #32
 80049f2:	6093      	str	r3, [r2, #8]
 80049f4:	e098      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8093 	bne.w	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	4a4b      	ldr	r2, [pc, #300]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d90f      	bls.n	8004a2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a26:	6093      	str	r3, [r2, #8]
 8004a28:	e07e      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	0159      	lsls	r1, r3, #5
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d114      	bne.n	8004a8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a74:	461a      	mov	r2, r3
 8004a76:	2101      	movs	r1, #1
 8004a78:	f006 f9f6 	bl	800ae68 <USB_EP0_OutStart>
 8004a7c:	e006      	b.n	8004a8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	441a      	add	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f00b fb3e 	bl	8010114 <HAL_PCD_DataOutStageCallback>
 8004a98:	e046      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d124      	bne.n	8004aec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	e032      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2320      	movs	r3, #32
 8004adc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f00b fb15 	bl	8010114 <HAL_PCD_DataOutStageCallback>
 8004aea:	e01d      	b.n	8004b28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d114      	bne.n	8004b1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	440b      	add	r3, r1
 8004b00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b14:	461a      	mov	r2, r3
 8004b16:	2100      	movs	r1, #0
 8004b18:	f006 f9a6 	bl	800ae68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f00b faf6 	bl	8010114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	4f54300a 	.word	0x4f54300a
 8004b38:	4f54310a 	.word	0x4f54310a

08004b3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	333c      	adds	r3, #60	@ 0x3c
 8004b54:	3304      	adds	r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d90e      	bls.n	8004b90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f00b faad 	bl	80100f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d90c      	bls.n	8004bb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	799b      	ldrb	r3, [r3, #6]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d108      	bne.n	8004bb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	f006 f958 	bl	800ae68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	4f54300a 	.word	0x4f54300a

08004bc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be6:	883b      	ldrh	r3, [r7, #0]
 8004be8:	0419      	lsls	r1, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf4:	e028      	b.n	8004c48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e00d      	b.n	8004c26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	3340      	adds	r3, #64	@ 0x40
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3ec      	bcc.n	8004c0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c30:	883b      	ldrh	r3, [r7, #0]
 8004c32:	0418      	lsls	r0, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4302      	orrs	r2, r0
 8004c40:	3340      	adds	r3, #64	@ 0x40
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_PCDEx_ActivateLPM+0x44>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	10000003 	.word	0x10000003

08004cc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ce0:	4b19      	ldr	r3, [pc, #100]	@ (8004d48 <HAL_PWREx_ConfigSupply+0x70>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d00a      	beq.n	8004d02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cec:	4b16      	ldr	r3, [pc, #88]	@ (8004d48 <HAL_PWREx_ConfigSupply+0x70>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e01f      	b.n	8004d3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e01d      	b.n	8004d3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d02:	4b11      	ldr	r3, [pc, #68]	@ (8004d48 <HAL_PWREx_ConfigSupply+0x70>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	490f      	ldr	r1, [pc, #60]	@ (8004d48 <HAL_PWREx_ConfigSupply+0x70>)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d12:	f7fd f93d 	bl	8001f90 <HAL_GetTick>
 8004d16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d18:	e009      	b.n	8004d2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d1a:	f7fd f939 	bl	8001f90 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d28:	d901      	bls.n	8004d2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e007      	b.n	8004d3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d2e:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <HAL_PWREx_ConfigSupply+0x70>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3a:	d1ee      	bne.n	8004d1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	58024800 	.word	0x58024800

08004d4c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a04      	ldr	r2, [pc, #16]	@ (8004d68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d5a:	60d3      	str	r3, [r2, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	58024800 	.word	0x58024800

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	@ 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f000 bc48 	b.w	8005610 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8088 	beq.w	8004e9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8e:	4b99      	ldr	r3, [pc, #612]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d98:	4b96      	ldr	r3, [pc, #600]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d007      	beq.n	8004db4 <HAL_RCC_OscConfig+0x48>
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	2b18      	cmp	r3, #24
 8004da8:	d111      	bne.n	8004dce <HAL_RCC_OscConfig+0x62>
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d10c      	bne.n	8004dce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d06d      	beq.n	8004e9c <HAL_RCC_OscConfig+0x130>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d169      	bne.n	8004e9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f000 bc21 	b.w	8005610 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_OscConfig+0x7a>
 8004dd8:	4b86      	ldr	r3, [pc, #536]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a85      	ldr	r2, [pc, #532]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	e02e      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x9c>
 8004dee:	4b81      	ldr	r3, [pc, #516]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a80      	ldr	r2, [pc, #512]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a7d      	ldr	r2, [pc, #500]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e01d      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0xc0>
 8004e12:	4b78      	ldr	r3, [pc, #480]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a77      	ldr	r2, [pc, #476]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b75      	ldr	r3, [pc, #468]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a74      	ldr	r2, [pc, #464]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0xd8>
 8004e2c:	4b71      	ldr	r3, [pc, #452]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a70      	ldr	r2, [pc, #448]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b6e      	ldr	r3, [pc, #440]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6d      	ldr	r2, [pc, #436]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd f8a0 	bl	8001f90 <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e54:	f7fd f89c 	bl	8001f90 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	@ 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e3d4      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e66:	4b63      	ldr	r3, [pc, #396]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0xe8>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e74:	f7fd f88c 	bl	8001f90 <HAL_GetTick>
 8004e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e7c:	f7fd f888 	bl	8001f90 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	@ 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e3c0      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e8e:	4b59      	ldr	r3, [pc, #356]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x110>
 8004e9a:	e000      	b.n	8004e9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80ca 	beq.w	8005040 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eac:	4b51      	ldr	r3, [pc, #324]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x166>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	2b18      	cmp	r3, #24
 8004ec6:	d156      	bne.n	8004f76 <HAL_RCC_OscConfig+0x20a>
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d151      	bne.n	8004f76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ed2:	4b48      	ldr	r3, [pc, #288]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x17e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e392      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eea:	4b42      	ldr	r3, [pc, #264]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 0219 	bic.w	r2, r3, #25
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	493f      	ldr	r1, [pc, #252]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd f848 	bl	8001f90 <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fd f844 	bl	8001f90 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e37c      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f16:	4b37      	ldr	r3, [pc, #220]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f22:	f7fd f865 	bl	8001ff0 <HAL_GetREVID>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d817      	bhi.n	8004f60 <HAL_RCC_OscConfig+0x1f4>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d108      	bne.n	8004f4a <HAL_RCC_OscConfig+0x1de>
 8004f38:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f40:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f48:	e07a      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	031b      	lsls	r3, r3, #12
 8004f58:	4926      	ldr	r1, [pc, #152]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f5e:	e06f      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f60:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	4921      	ldr	r1, [pc, #132]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f74:	e064      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d047      	beq.n	800500e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0219 	bic.w	r2, r3, #25
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	491a      	ldr	r1, [pc, #104]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc fffe 	bl	8001f90 <HAL_GetTick>
 8004f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f98:	f7fc fffa 	bl	8001f90 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e332      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004faa:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	f7fd f81b 	bl	8001ff0 <HAL_GetREVID>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d819      	bhi.n	8004ff8 <HAL_RCC_OscConfig+0x28c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d108      	bne.n	8004fde <HAL_RCC_OscConfig+0x272>
 8004fcc:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004fd4:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fda:	6053      	str	r3, [r2, #4]
 8004fdc:	e030      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	031b      	lsls	r3, r3, #12
 8004fec:	4901      	ldr	r1, [pc, #4]	@ (8004ff4 <HAL_RCC_OscConfig+0x288>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
 8004ff2:	e025      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	4997      	ldr	r1, [pc, #604]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
 800500c:	e018      	b.n	8005040 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500e:	4b95      	ldr	r3, [pc, #596]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a94      	ldr	r2, [pc, #592]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fc ffb9 	bl	8001f90 <HAL_GetTick>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005022:	f7fc ffb5 	bl	8001f90 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e2ed      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005034:	4b8b      	ldr	r3, [pc, #556]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80a9 	beq.w	80051a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504e:	4b85      	ldr	r3, [pc, #532]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005056:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005058:	4b82      	ldr	r3, [pc, #520]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d007      	beq.n	8005074 <HAL_RCC_OscConfig+0x308>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b18      	cmp	r3, #24
 8005068:	d13a      	bne.n	80050e0 <HAL_RCC_OscConfig+0x374>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d135      	bne.n	80050e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005074:	4b7b      	ldr	r3, [pc, #492]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_OscConfig+0x320>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	2b80      	cmp	r3, #128	@ 0x80
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2c1      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800508c:	f7fc ffb0 	bl	8001ff0 <HAL_GetREVID>
 8005090:	4603      	mov	r3, r0
 8005092:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005096:	4293      	cmp	r3, r2
 8005098:	d817      	bhi.n	80050ca <HAL_RCC_OscConfig+0x35e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d108      	bne.n	80050b4 <HAL_RCC_OscConfig+0x348>
 80050a2:	4b70      	ldr	r3, [pc, #448]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050b2:	e075      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b4:	4b6b      	ldr	r3, [pc, #428]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	069b      	lsls	r3, r3, #26
 80050c2:	4968      	ldr	r1, [pc, #416]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050c8:	e06a      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050ca:	4b66      	ldr	r3, [pc, #408]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	4962      	ldr	r1, [pc, #392]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050de:	e05f      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d042      	beq.n	800516e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050e8:	4b5e      	ldr	r3, [pc, #376]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80050ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fc ff4c 	bl	8001f90 <HAL_GetTick>
 80050f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050fc:	f7fc ff48 	bl	8001f90 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e280      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800510e:	4b55      	ldr	r3, [pc, #340]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800511a:	f7fc ff69 	bl	8001ff0 <HAL_GetREVID>
 800511e:	4603      	mov	r3, r0
 8005120:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005124:	4293      	cmp	r3, r2
 8005126:	d817      	bhi.n	8005158 <HAL_RCC_OscConfig+0x3ec>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	2b20      	cmp	r3, #32
 800512e:	d108      	bne.n	8005142 <HAL_RCC_OscConfig+0x3d6>
 8005130:	4b4c      	ldr	r3, [pc, #304]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005138:	4a4a      	ldr	r2, [pc, #296]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800513a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	e02e      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
 8005142:	4b48      	ldr	r3, [pc, #288]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	069b      	lsls	r3, r3, #26
 8005150:	4944      	ldr	r1, [pc, #272]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	604b      	str	r3, [r1, #4]
 8005156:	e023      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
 8005158:	4b42      	ldr	r3, [pc, #264]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	493f      	ldr	r1, [pc, #252]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005168:	4313      	orrs	r3, r2
 800516a:	60cb      	str	r3, [r1, #12]
 800516c:	e018      	b.n	80051a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800516e:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fc ff09 	bl	8001f90 <HAL_GetTick>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005182:	f7fc ff05 	bl	8001f90 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e23d      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005194:	4b33      	ldr	r3, [pc, #204]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f0      	bne.n	8005182 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d036      	beq.n	800521a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80051b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fc fee6 	bl	8001f90 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fc fee2 	bl	8001f90 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e21a      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x45c>
 80051e6:	e018      	b.n	800521a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80051ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fc fecc 	bl	8001f90 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fc fec8 	bl	8001f90 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e200      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800520e:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d039      	beq.n	800529a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01c      	beq.n	8005268 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a0c      	ldr	r2, [pc, #48]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005238:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800523a:	f7fc fea9 	bl	8001f90 <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005242:	f7fc fea5 	bl	8001f90 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1dd      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_OscConfig+0x4f8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x4d6>
 8005260:	e01b      	b.n	800529a <HAL_RCC_OscConfig+0x52e>
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005268:	4b9b      	ldr	r3, [pc, #620]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a9a      	ldr	r2, [pc, #616]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800526e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005272:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005274:	f7fc fe8c 	bl	8001f90 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800527c:	f7fc fe88 	bl	8001f90 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e1c0      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800528e:	4b92      	ldr	r3, [pc, #584]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8081 	beq.w	80053aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052a8:	4b8c      	ldr	r3, [pc, #560]	@ (80054dc <HAL_RCC_OscConfig+0x770>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a8b      	ldr	r2, [pc, #556]	@ (80054dc <HAL_RCC_OscConfig+0x770>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b4:	f7fc fe6c 	bl	8001f90 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fc fe68 	bl	8001f90 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	@ 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e1a0      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ce:	4b83      	ldr	r3, [pc, #524]	@ (80054dc <HAL_RCC_OscConfig+0x770>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x584>
 80052e2:	4b7d      	ldr	r3, [pc, #500]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	4a7c      	ldr	r2, [pc, #496]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ee:	e02d      	b.n	800534c <HAL_RCC_OscConfig+0x5e0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10c      	bne.n	8005312 <HAL_RCC_OscConfig+0x5a6>
 80052f8:	4b77      	ldr	r3, [pc, #476]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a76      	ldr	r2, [pc, #472]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
 8005304:	4b74      	ldr	r3, [pc, #464]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	4a73      	ldr	r2, [pc, #460]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800530a:	f023 0304 	bic.w	r3, r3, #4
 800530e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005310:	e01c      	b.n	800534c <HAL_RCC_OscConfig+0x5e0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b05      	cmp	r3, #5
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x5c8>
 800531a:	4b6f      	ldr	r3, [pc, #444]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	4a6e      	ldr	r2, [pc, #440]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005320:	f043 0304 	orr.w	r3, r3, #4
 8005324:	6713      	str	r3, [r2, #112]	@ 0x70
 8005326:	4b6c      	ldr	r3, [pc, #432]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532a:	4a6b      	ldr	r2, [pc, #428]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6713      	str	r3, [r2, #112]	@ 0x70
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0x5e0>
 8005334:	4b68      	ldr	r3, [pc, #416]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005338:	4a67      	ldr	r2, [pc, #412]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005340:	4b65      	ldr	r3, [pc, #404]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005344:	4a64      	ldr	r2, [pc, #400]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005346:	f023 0304 	bic.w	r3, r3, #4
 800534a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fc fe1c 	bl	8001f90 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fc fe18 	bl	8001f90 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e14e      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005372:	4b59      	ldr	r3, [pc, #356]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ee      	beq.n	800535c <HAL_RCC_OscConfig+0x5f0>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7fc fe06 	bl	8001f90 <HAL_GetTick>
 8005384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005386:	e00a      	b.n	800539e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005388:	f7fc fe02 	bl	8001f90 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e138      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800539e:	4b4e      	ldr	r3, [pc, #312]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ee      	bne.n	8005388 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 812d 	beq.w	800560e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053b4:	4b48      	ldr	r3, [pc, #288]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053bc:	2b18      	cmp	r3, #24
 80053be:	f000 80bd 	beq.w	800553c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	f040 809e 	bne.w	8005508 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b42      	ldr	r3, [pc, #264]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a41      	ldr	r2, [pc, #260]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80053d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fc fdda 	bl	8001f90 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fc fdd6 	bl	8001f90 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e10e      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053f2:	4b39      	ldr	r3, [pc, #228]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005402:	4b37      	ldr	r3, [pc, #220]	@ (80054e0 <HAL_RCC_OscConfig+0x774>)
 8005404:	4013      	ands	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	430a      	orrs	r2, r1
 8005412:	4931      	ldr	r1, [pc, #196]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005414:	4313      	orrs	r3, r2
 8005416:	628b      	str	r3, [r1, #40]	@ 0x28
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	3b01      	subs	r3, #1
 800541e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	3b01      	subs	r3, #1
 8005428:	025b      	lsls	r3, r3, #9
 800542a:	b29b      	uxth	r3, r3
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	3b01      	subs	r3, #1
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005440:	3b01      	subs	r3, #1
 8005442:	061b      	lsls	r3, r3, #24
 8005444:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005448:	4923      	ldr	r1, [pc, #140]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800544e:	4b22      	ldr	r3, [pc, #136]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800545a:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800545c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800545e:	4b21      	ldr	r3, [pc, #132]	@ (80054e4 <HAL_RCC_OscConfig+0x778>)
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005466:	00d2      	lsls	r2, r2, #3
 8005468:	491b      	ldr	r1, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	f023 020c 	bic.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547a:	4917      	ldr	r1, [pc, #92]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005480:	4b15      	ldr	r3, [pc, #84]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	f023 0202 	bic.w	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548c:	4912      	ldr	r1, [pc, #72]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005492:	4b11      	ldr	r3, [pc, #68]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	4a10      	ldr	r2, [pc, #64]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800549c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549e:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	4a0d      	ldr	r2, [pc, #52]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054aa:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	4a0a      	ldr	r2, [pc, #40]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054b6:	4b08      	ldr	r3, [pc, #32]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	4a07      	ldr	r2, [pc, #28]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c2:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a04      	ldr	r2, [pc, #16]	@ (80054d8 <HAL_RCC_OscConfig+0x76c>)
 80054c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fd5f 	bl	8001f90 <HAL_GetTick>
 80054d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d4:	e011      	b.n	80054fa <HAL_RCC_OscConfig+0x78e>
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	58024800 	.word	0x58024800
 80054e0:	fffffc0c 	.word	0xfffffc0c
 80054e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc fd52 	bl	8001f90 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e08a      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054fa:	4b47      	ldr	r3, [pc, #284]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x77c>
 8005506:	e082      	b.n	800560e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005508:	4b43      	ldr	r3, [pc, #268]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a42      	ldr	r2, [pc, #264]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 800550e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fc fd3c 	bl	8001f90 <HAL_GetTick>
 8005518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fc fd38 	bl	8001f90 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e070      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800552e:	4b3a      	ldr	r3, [pc, #232]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x7b0>
 800553a:	e068      	b.n	800560e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800553c:	4b36      	ldr	r3, [pc, #216]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005542:	4b35      	ldr	r3, [pc, #212]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	2b01      	cmp	r3, #1
 800554e:	d031      	beq.n	80055b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f003 0203 	and.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d12a      	bne.n	80055b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d122      	bne.n	80055b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d11a      	bne.n	80055b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	0a5b      	lsrs	r3, r3, #9
 8005582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d111      	bne.n	80055b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800559e:	429a      	cmp	r2, r3
 80055a0:	d108      	bne.n	80055b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	0e1b      	lsrs	r3, r3, #24
 80055a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e02b      	b.n	8005610 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055b8:	4b17      	ldr	r3, [pc, #92]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d01f      	beq.n	800560e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	4a11      	ldr	r2, [pc, #68]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055da:	f7fc fcd9 	bl	8001f90 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80055e0:	bf00      	nop
 80055e2:	f7fc fcd5 	bl	8001f90 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d0f9      	beq.n	80055e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80055f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <HAL_RCC_OscConfig+0x8b0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055fa:	00d2      	lsls	r2, r2, #3
 80055fc:	4906      	ldr	r1, [pc, #24]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005602:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4a04      	ldr	r2, [pc, #16]	@ (8005618 <HAL_RCC_OscConfig+0x8ac>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3730      	adds	r7, #48	@ 0x30
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	ffff0007 	.word	0xffff0007

08005620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e19c      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	4b8a      	ldr	r3, [pc, #552]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d910      	bls.n	8005664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b87      	ldr	r3, [pc, #540]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 020f 	bic.w	r2, r3, #15
 800564a:	4985      	ldr	r1, [pc, #532]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b83      	ldr	r3, [pc, #524]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e184      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	4b7b      	ldr	r3, [pc, #492]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800567c:	429a      	cmp	r2, r3
 800567e:	d908      	bls.n	8005692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005680:	4b78      	ldr	r3, [pc, #480]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	4975      	ldr	r1, [pc, #468]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800568e:	4313      	orrs	r3, r2
 8005690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d010      	beq.n	80056c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	4b70      	ldr	r3, [pc, #448]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d908      	bls.n	80056c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	496a      	ldr	r1, [pc, #424]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b64      	ldr	r3, [pc, #400]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056d8:	429a      	cmp	r2, r3
 80056da:	d908      	bls.n	80056ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056dc:	4b61      	ldr	r3, [pc, #388]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	495e      	ldr	r1, [pc, #376]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	4b59      	ldr	r3, [pc, #356]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005706:	429a      	cmp	r2, r3
 8005708:	d908      	bls.n	800571c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800570a:	4b56      	ldr	r3, [pc, #344]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	4953      	ldr	r1, [pc, #332]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005718:	4313      	orrs	r3, r2
 800571a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d010      	beq.n	800574a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	4b4d      	ldr	r3, [pc, #308]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	429a      	cmp	r2, r3
 8005736:	d908      	bls.n	800574a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005738:	4b4a      	ldr	r3, [pc, #296]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f023 020f 	bic.w	r2, r3, #15
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4947      	ldr	r1, [pc, #284]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005746:	4313      	orrs	r3, r2
 8005748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d055      	beq.n	8005802 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005756:	4b43      	ldr	r3, [pc, #268]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4940      	ldr	r1, [pc, #256]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005764:	4313      	orrs	r3, r2
 8005766:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d107      	bne.n	8005780 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005770:	4b3c      	ldr	r3, [pc, #240]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d121      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0f6      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b03      	cmp	r3, #3
 8005786:	d107      	bne.n	8005798 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005788:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d115      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e0ea      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d107      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057a0:	4b30      	ldr	r3, [pc, #192]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0de      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0d6      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057c0:	4b28      	ldr	r3, [pc, #160]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f023 0207 	bic.w	r2, r3, #7
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4925      	ldr	r1, [pc, #148]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d2:	f7fc fbdd 	bl	8001f90 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057da:	f7fc fbd9 	bl	8001f90 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0be      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	429a      	cmp	r2, r3
 8005800:	d1eb      	bne.n	80057da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	429a      	cmp	r2, r3
 800581c:	d208      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800581e:	4b11      	ldr	r3, [pc, #68]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f023 020f 	bic.w	r2, r3, #15
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	490e      	ldr	r1, [pc, #56]	@ (8005864 <HAL_RCC_ClockConfig+0x244>)
 800582c:	4313      	orrs	r3, r2
 800582e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d214      	bcs.n	8005868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 020f 	bic.w	r2, r3, #15
 8005846:	4906      	ldr	r1, [pc, #24]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <HAL_RCC_ClockConfig+0x240>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d005      	beq.n	8005868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e086      	b.n	800596e <HAL_RCC_ClockConfig+0x34e>
 8005860:	52002000 	.word	0x52002000
 8005864:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	4b3f      	ldr	r3, [pc, #252]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005880:	429a      	cmp	r2, r3
 8005882:	d208      	bcs.n	8005896 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005884:	4b3c      	ldr	r3, [pc, #240]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4939      	ldr	r1, [pc, #228]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005892:	4313      	orrs	r3, r2
 8005894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d010      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	4b34      	ldr	r3, [pc, #208]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d208      	bcs.n	80058c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058b2:	4b31      	ldr	r3, [pc, #196]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	492e      	ldr	r1, [pc, #184]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d010      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058dc:	429a      	cmp	r2, r3
 80058de:	d208      	bcs.n	80058f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058e0:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4922      	ldr	r1, [pc, #136]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800590a:	429a      	cmp	r2, r3
 800590c:	d208      	bcs.n	8005920 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800590e:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	4917      	ldr	r1, [pc, #92]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 800591c:	4313      	orrs	r3, r2
 800591e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005920:	f000 f834 	bl	800598c <HAL_RCC_GetSysClockFreq>
 8005924:	4602      	mov	r2, r0
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	4912      	ldr	r1, [pc, #72]	@ (800597c <HAL_RCC_ClockConfig+0x35c>)
 8005932:	5ccb      	ldrb	r3, [r1, r3]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800593e:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <HAL_RCC_ClockConfig+0x358>)
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	4a0d      	ldr	r2, [pc, #52]	@ (800597c <HAL_RCC_ClockConfig+0x35c>)
 8005948:	5cd3      	ldrb	r3, [r2, r3]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	4a0a      	ldr	r2, [pc, #40]	@ (8005980 <HAL_RCC_ClockConfig+0x360>)
 8005956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005958:	4a0a      	ldr	r2, [pc, #40]	@ (8005984 <HAL_RCC_ClockConfig+0x364>)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800595e:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <HAL_RCC_ClockConfig+0x368>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7fb fec6 	bl	80016f4 <HAL_InitTick>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	08015624 	.word	0x08015624
 8005980:	24000004 	.word	0x24000004
 8005984:	24000000 	.word	0x24000000
 8005988:	24000008 	.word	0x24000008

0800598c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	b089      	sub	sp, #36	@ 0x24
 8005990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005992:	4bb3      	ldr	r3, [pc, #716]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800599a:	2b18      	cmp	r3, #24
 800599c:	f200 8155 	bhi.w	8005c4a <HAL_RCC_GetSysClockFreq+0x2be>
 80059a0:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	08005a0d 	.word	0x08005a0d
 80059ac:	08005c4b 	.word	0x08005c4b
 80059b0:	08005c4b 	.word	0x08005c4b
 80059b4:	08005c4b 	.word	0x08005c4b
 80059b8:	08005c4b 	.word	0x08005c4b
 80059bc:	08005c4b 	.word	0x08005c4b
 80059c0:	08005c4b 	.word	0x08005c4b
 80059c4:	08005c4b 	.word	0x08005c4b
 80059c8:	08005a33 	.word	0x08005a33
 80059cc:	08005c4b 	.word	0x08005c4b
 80059d0:	08005c4b 	.word	0x08005c4b
 80059d4:	08005c4b 	.word	0x08005c4b
 80059d8:	08005c4b 	.word	0x08005c4b
 80059dc:	08005c4b 	.word	0x08005c4b
 80059e0:	08005c4b 	.word	0x08005c4b
 80059e4:	08005c4b 	.word	0x08005c4b
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005c4b 	.word	0x08005c4b
 80059f0:	08005c4b 	.word	0x08005c4b
 80059f4:	08005c4b 	.word	0x08005c4b
 80059f8:	08005c4b 	.word	0x08005c4b
 80059fc:	08005c4b 	.word	0x08005c4b
 8005a00:	08005c4b 	.word	0x08005c4b
 8005a04:	08005c4b 	.word	0x08005c4b
 8005a08:	08005a3f 	.word	0x08005a3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a0c:	4b94      	ldr	r3, [pc, #592]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d009      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a18:	4b91      	ldr	r3, [pc, #580]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	08db      	lsrs	r3, r3, #3
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	4a90      	ldr	r2, [pc, #576]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
 8005a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a2a:	e111      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a2c:	4b8d      	ldr	r3, [pc, #564]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a2e:	61bb      	str	r3, [r7, #24]
      break;
 8005a30:	e10e      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a32:	4b8d      	ldr	r3, [pc, #564]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a34:	61bb      	str	r3, [r7, #24]
      break;
 8005a36:	e10b      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a38:	4b8c      	ldr	r3, [pc, #560]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a3a:	61bb      	str	r3, [r7, #24]
      break;
 8005a3c:	e108      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a3e:	4b88      	ldr	r3, [pc, #544]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a48:	4b85      	ldr	r3, [pc, #532]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a54:	4b82      	ldr	r3, [pc, #520]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a5e:	4b80      	ldr	r3, [pc, #512]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80e1 	beq.w	8005c44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	f000 8083 	beq.w	8005b90 <HAL_RCC_GetSysClockFreq+0x204>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	f200 80a1 	bhi.w	8005bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d056      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a9e:	e099      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d02d      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aac:	4b6c      	ldr	r3, [pc, #432]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	08db      	lsrs	r3, r3, #3
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b62      	ldr	r3, [pc, #392]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b06:	e087      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b51      	ldr	r3, [pc, #324]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b4a:	e065      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b40      	ldr	r3, [pc, #256]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b8e:	e043      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bd2:	e021      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c18:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	0a5b      	lsrs	r3, r3, #9
 8005c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c22:	3301      	adds	r3, #1
 8005c24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3c:	ee17 3a90 	vmov	r3, s15
 8005c40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61bb      	str	r3, [r7, #24]
      break;
 8005c48:	e002      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c4c:	61bb      	str	r3, [r7, #24]
      break;
 8005c4e:	bf00      	nop
  }

  return sysclockfreq;
 8005c50:	69bb      	ldr	r3, [r7, #24]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3724      	adds	r7, #36	@ 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
 8005c64:	03d09000 	.word	0x03d09000
 8005c68:	003d0900 	.word	0x003d0900
 8005c6c:	017d7840 	.word	0x017d7840
 8005c70:	46000000 	.word	0x46000000
 8005c74:	4c742400 	.word	0x4c742400
 8005c78:	4a742400 	.word	0x4a742400
 8005c7c:	4bbebc20 	.word	0x4bbebc20

08005c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c86:	f7ff fe81 	bl	800598c <HAL_RCC_GetSysClockFreq>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	490f      	ldr	r1, [pc, #60]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c98:	5ccb      	ldrb	r3, [r1, r3]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	4a07      	ldr	r2, [pc, #28]	@ (8005cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cbe:	4a07      	ldr	r2, [pc, #28]	@ (8005cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	08015624 	.word	0x08015624
 8005cd8:	24000004 	.word	0x24000004
 8005cdc:	24000000 	.word	0x24000000

08005ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ce4:	f7ff ffcc 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b06      	ldr	r3, [pc, #24]	@ (8005d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	4904      	ldr	r1, [pc, #16]	@ (8005d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	58024400 	.word	0x58024400
 8005d08:	08015624 	.word	0x08015624

08005d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	223f      	movs	r2, #63	@ 0x3f
 8005d1a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0207 	and.w	r2, r3, #7
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005d28:	4b17      	ldr	r3, [pc, #92]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005d34:	4b14      	ldr	r3, [pc, #80]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f003 020f 	and.w	r2, r3, #15
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005d40:	4b11      	ldr	r3, [pc, #68]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005d58:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005d64:	4b08      	ldr	r3, [pc, #32]	@ (8005d88 <HAL_RCC_GetClockConfig+0x7c>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <HAL_RCC_GetClockConfig+0x80>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	601a      	str	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	52002000 	.word	0x52002000

08005d90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0ca      	sub	sp, #296	@ 0x128
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005db4:	2500      	movs	r5, #0
 8005db6:	ea54 0305 	orrs.w	r3, r4, r5
 8005dba:	d049      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dc6:	d02f      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005dc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dcc:	d828      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dd2:	d01a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dd8:	d822      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005de2:	d007      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005de4:	e01c      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de6:	4bb8      	ldr	r3, [pc, #736]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	4ab7      	ldr	r2, [pc, #732]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005df2:	e01a      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	3308      	adds	r3, #8
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f9d1 	bl	80071a4 <RCCEx_PLL2_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e08:	e00f      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	3328      	adds	r3, #40	@ 0x28
 8005e10:	2102      	movs	r1, #2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fa78 	bl	8007308 <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e1e:	e004      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e26:	e000      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e32:	4ba5      	ldr	r3, [pc, #660]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e40:	4aa1      	ldr	r2, [pc, #644]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e46:	e003      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e5c:	f04f 0900 	mov.w	r9, #0
 8005e60:	ea58 0309 	orrs.w	r3, r8, r9
 8005e64:	d047      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d82a      	bhi.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e70:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005e8d 	.word	0x08005e8d
 8005e7c:	08005e9b 	.word	0x08005e9b
 8005e80:	08005eb1 	.word	0x08005eb1
 8005e84:	08005ecf 	.word	0x08005ecf
 8005e88:	08005ecf 	.word	0x08005ecf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	4a8d      	ldr	r2, [pc, #564]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e98:	e01a      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f97e 	bl	80071a4 <RCCEx_PLL2_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eae:	e00f      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb4:	3328      	adds	r3, #40	@ 0x28
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 fa25 	bl	8007308 <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ec4:	e004      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ecc:	e000      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ed8:	4b7b      	ldr	r3, [pc, #492]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	f023 0107 	bic.w	r1, r3, #7
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee6:	4a78      	ldr	r2, [pc, #480]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005f02:	f04f 0b00 	mov.w	fp, #0
 8005f06:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f0a:	d04c      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f16:	d030      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f1c:	d829      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f20:	d02d      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f24:	d825      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005f26:	2b80      	cmp	r3, #128	@ 0x80
 8005f28:	d018      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005f2a:	2b80      	cmp	r3, #128	@ 0x80
 8005f2c:	d821      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005f32:	2b40      	cmp	r3, #64	@ 0x40
 8005f34:	d007      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005f36:	e01c      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f38:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	4a62      	ldr	r2, [pc, #392]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005f44:	e01c      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f928 	bl	80071a4 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e011      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f60:	3328      	adds	r3, #40	@ 0x28
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f9cf 	bl	8007308 <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f88:	4b4f      	ldr	r3, [pc, #316]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	4a4c      	ldr	r2, [pc, #304]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005fb2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005fbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d053      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fd2:	d035      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005fd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fd8:	d82e      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005fda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005fde:	d031      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005fe0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005fe4:	d828      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fea:	d01a      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff0:	d822      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ffa:	d007      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ffc:	e01c      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffe:	4b32      	ldr	r3, [pc, #200]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	4a31      	ldr	r2, [pc, #196]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800600a:	e01c      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	3308      	adds	r3, #8
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f001 f8c5 	bl	80071a4 <RCCEx_PLL2_Config>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006020:	e011      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006026:	3328      	adds	r3, #40	@ 0x28
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f001 f96c 	bl	8007308 <RCCEx_PLL3_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006036:	e006      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800603e:	e002      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800604e:	4b1e      	ldr	r3, [pc, #120]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006052:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800605e:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006060:	430b      	orrs	r3, r1
 8006062:	6593      	str	r3, [r2, #88]	@ 0x58
 8006064:	e003      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800607a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006084:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d056      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800609a:	d038      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800609c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060a0:	d831      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80060a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060a6:	d034      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80060a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060ac:	d82b      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80060ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060b2:	d01d      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80060b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060b8:	d825      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80060be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80060c4:	e01f      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80060c6:	bf00      	nop
 80060c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4ba2      	ldr	r3, [pc, #648]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4aa1      	ldr	r2, [pc, #644]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060d8:	e01c      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	3308      	adds	r3, #8
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f85e 	bl	80071a4 <RCCEx_PLL2_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80060ee:	e011      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f4:	3328      	adds	r3, #40	@ 0x28
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 f905 	bl	8007308 <RCCEx_PLL3_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610c:	e002      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800611c:	4b8e      	ldr	r3, [pc, #568]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006120:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800612c:	4a8a      	ldr	r2, [pc, #552]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800612e:	430b      	orrs	r3, r1
 8006130:	6593      	str	r3, [r2, #88]	@ 0x58
 8006132:	e003      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006148:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800614c:	2300      	movs	r3, #0
 800614e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006152:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d03a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	2b30      	cmp	r3, #48	@ 0x30
 8006164:	d01f      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006166:	2b30      	cmp	r3, #48	@ 0x30
 8006168:	d819      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800616a:	2b20      	cmp	r3, #32
 800616c:	d00c      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d815      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d019      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006176:	2b10      	cmp	r3, #16
 8006178:	d111      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617a:	4b77      	ldr	r3, [pc, #476]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	4a76      	ldr	r2, [pc, #472]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006186:	e011      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	3308      	adds	r3, #8
 800618e:	2102      	movs	r1, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f807 	bl	80071a4 <RCCEx_PLL2_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800619c:	e006      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a4:	e002      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80061aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061b4:	4b68      	ldr	r3, [pc, #416]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c2:	4a65      	ldr	r2, [pc, #404]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061c4:	430b      	orrs	r3, r1
 80061c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80061de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4313      	orrs	r3, r2
 80061f0:	d051      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061fc:	d035      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80061fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006202:	d82e      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006204:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006208:	d031      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800620a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800620e:	d828      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006214:	d01a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621a:	d822      	bhi.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006224:	d007      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006226:	e01c      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006228:	4b4b      	ldr	r3, [pc, #300]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800622a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622c:	4a4a      	ldr	r2, [pc, #296]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800622e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006234:	e01c      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	3308      	adds	r3, #8
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 ffb0 	bl	80071a4 <RCCEx_PLL2_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800624a:	e011      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	3328      	adds	r3, #40	@ 0x28
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f001 f857 	bl	8007308 <RCCEx_PLL3_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800626e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006278:	4b37      	ldr	r3, [pc, #220]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800627a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006286:	4a34      	ldr	r2, [pc, #208]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6513      	str	r3, [r2, #80]	@ 0x50
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d056      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062c0:	d033      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80062c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062c6:	d82c      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80062c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062cc:	d02f      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80062ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d2:	d826      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80062d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062d8:	d02b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80062da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062de:	d820      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80062e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e4:	d012      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80062e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062ea:	d81a      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d022      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f4:	d115      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	3308      	adds	r3, #8
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ff50 	bl	80071a4 <RCCEx_PLL2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800630a:	e015      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	3328      	adds	r3, #40	@ 0x28
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fff7 	bl	8007308 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006320:	e00a      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800632a:	bf00      	nop
 800632c:	e004      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800632e:	bf00      	nop
 8006330:	e002      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006332:	bf00      	nop
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006344:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800634e:	4a02      	ldr	r2, [pc, #8]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6513      	str	r3, [r2, #80]	@ 0x50
 8006354:	e006      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006356:	bf00      	nop
 8006358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006374:	2300      	movs	r3, #0
 8006376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800637a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800637e:	460b      	mov	r3, r1
 8006380:	4313      	orrs	r3, r2
 8006382:	d055      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800638c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006390:	d033      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006396:	d82c      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639c:	d02f      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a2:	d826      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80063a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063a8:	d02b      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80063aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063ae:	d820      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80063b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b4:	d012      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80063b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ba:	d81a      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d022      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80063c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063c4:	d115      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ca:	3308      	adds	r3, #8
 80063cc:	2101      	movs	r1, #1
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fee8 	bl	80071a4 <RCCEx_PLL2_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063da:	e015      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e0:	3328      	adds	r3, #40	@ 0x28
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ff8f 	bl	8007308 <RCCEx_PLL3_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063f0:	e00a      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f8:	e006      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063fa:	bf00      	nop
 80063fc:	e004      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006410:	4ba3      	ldr	r3, [pc, #652]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006414:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006420:	4a9f      	ldr	r2, [pc, #636]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006422:	430b      	orrs	r3, r1
 8006424:	6593      	str	r3, [r2, #88]	@ 0x58
 8006426:	e003      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800643c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800644a:	460b      	mov	r3, r1
 800644c:	4313      	orrs	r3, r2
 800644e:	d037      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645a:	d00e      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800645c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006460:	d816      	bhi.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d018      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800646a:	d111      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646c:	4b8c      	ldr	r3, [pc, #560]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	4a8b      	ldr	r2, [pc, #556]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006478:	e00f      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	3308      	adds	r3, #8
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fe8e 	bl	80071a4 <RCCEx_PLL2_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800648e:	e004      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006496:	e000      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064a2:	4b7f      	ldr	r3, [pc, #508]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b0:	4a7b      	ldr	r2, [pc, #492]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80064b6:	e003      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d039      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d81c      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80064ea:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	0800652d 	.word	0x0800652d
 80064f4:	08006501 	.word	0x08006501
 80064f8:	0800650f 	.word	0x0800650f
 80064fc:	0800652d 	.word	0x0800652d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006500:	4b67      	ldr	r3, [pc, #412]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	4a66      	ldr	r2, [pc, #408]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800650a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3308      	adds	r3, #8
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fe44 	bl	80071a4 <RCCEx_PLL2_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006522:	e004      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006536:	4b5a      	ldr	r3, [pc, #360]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653a:	f023 0103 	bic.w	r1, r3, #3
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006544:	4a56      	ldr	r2, [pc, #344]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006546:	430b      	orrs	r3, r1
 8006548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800654a:	e003      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006560:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006564:	2300      	movs	r3, #0
 8006566:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800656a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800656e:	460b      	mov	r3, r1
 8006570:	4313      	orrs	r3, r2
 8006572:	f000 809f 	beq.w	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006576:	4b4b      	ldr	r3, [pc, #300]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4a      	ldr	r2, [pc, #296]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800657c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006582:	f7fb fd05 	bl	8001f90 <HAL_GetTick>
 8006586:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800658a:	e00b      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658c:	f7fb fd00 	bl	8001f90 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b64      	cmp	r3, #100	@ 0x64
 800659a:	d903      	bls.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065a2:	e005      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a4:	4b3f      	ldr	r3, [pc, #252]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0ed      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80065b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d179      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065b8:	4b39      	ldr	r3, [pc, #228]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065c4:	4053      	eors	r3, r2
 80065c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d015      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065ce:	4b34      	ldr	r3, [pc, #208]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065da:	4b31      	ldr	r3, [pc, #196]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	4a30      	ldr	r2, [pc, #192]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065e6:	4b2e      	ldr	r3, [pc, #184]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	4a2d      	ldr	r2, [pc, #180]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065f2:	4a2b      	ldr	r2, [pc, #172]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006606:	d118      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fb fcc2 	bl	8001f90 <HAL_GetTick>
 800660c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006610:	e00d      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006612:	f7fb fcbd 	bl	8001f90 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800662c:	e005      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800662e:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0eb      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663e:	2b00      	cmp	r3, #0
 8006640:	d129      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800664a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800664e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006652:	d10e      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006654:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006664:	091a      	lsrs	r2, r3, #4
 8006666:	4b10      	ldr	r3, [pc, #64]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006668:	4013      	ands	r3, r2
 800666a:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800666c:	430b      	orrs	r3, r1
 800666e:	6113      	str	r3, [r2, #16]
 8006670:	e005      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	4a0a      	ldr	r2, [pc, #40]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006678:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800667c:	6113      	str	r3, [r2, #16]
 800667e:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006680:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800668a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668e:	4a04      	ldr	r2, [pc, #16]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006690:	430b      	orrs	r3, r1
 8006692:	6713      	str	r3, [r2, #112]	@ 0x70
 8006694:	e00e      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800669e:	e009      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80066a0:	58024400 	.word	0x58024400
 80066a4:	58024800 	.word	0x58024800
 80066a8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f002 0301 	and.w	r3, r2, #1
 80066c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f000 8089 	beq.w	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066dc:	2b28      	cmp	r3, #40	@ 0x28
 80066de:	d86b      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80066e0:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	080067c1 	.word	0x080067c1
 80066ec:	080067b9 	.word	0x080067b9
 80066f0:	080067b9 	.word	0x080067b9
 80066f4:	080067b9 	.word	0x080067b9
 80066f8:	080067b9 	.word	0x080067b9
 80066fc:	080067b9 	.word	0x080067b9
 8006700:	080067b9 	.word	0x080067b9
 8006704:	080067b9 	.word	0x080067b9
 8006708:	0800678d 	.word	0x0800678d
 800670c:	080067b9 	.word	0x080067b9
 8006710:	080067b9 	.word	0x080067b9
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067b9 	.word	0x080067b9
 800671c:	080067b9 	.word	0x080067b9
 8006720:	080067b9 	.word	0x080067b9
 8006724:	080067b9 	.word	0x080067b9
 8006728:	080067a3 	.word	0x080067a3
 800672c:	080067b9 	.word	0x080067b9
 8006730:	080067b9 	.word	0x080067b9
 8006734:	080067b9 	.word	0x080067b9
 8006738:	080067b9 	.word	0x080067b9
 800673c:	080067b9 	.word	0x080067b9
 8006740:	080067b9 	.word	0x080067b9
 8006744:	080067b9 	.word	0x080067b9
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067b9 	.word	0x080067b9
 8006750:	080067b9 	.word	0x080067b9
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067b9 	.word	0x080067b9
 800675c:	080067b9 	.word	0x080067b9
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067b9 	.word	0x080067b9
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067b9 	.word	0x080067b9
 8006770:	080067b9 	.word	0x080067b9
 8006774:	080067b9 	.word	0x080067b9
 8006778:	080067b9 	.word	0x080067b9
 800677c:	080067b9 	.word	0x080067b9
 8006780:	080067b9 	.word	0x080067b9
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080067c1 	.word	0x080067c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006790:	3308      	adds	r3, #8
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fd05 	bl	80071a4 <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067a0:	e00f      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	3328      	adds	r3, #40	@ 0x28
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fdac 	bl	8007308 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067ca:	4bbf      	ldr	r3, [pc, #764]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80067d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d8:	4abb      	ldr	r2, [pc, #748]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f002 0302 	and.w	r3, r2, #2
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006802:	460b      	mov	r3, r1
 8006804:	4313      	orrs	r3, r2
 8006806:	d041      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800680e:	2b05      	cmp	r3, #5
 8006810:	d824      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006812:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006865 	.word	0x08006865
 800681c:	08006831 	.word	0x08006831
 8006820:	08006847 	.word	0x08006847
 8006824:	08006865 	.word	0x08006865
 8006828:	08006865 	.word	0x08006865
 800682c:	08006865 	.word	0x08006865
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	3308      	adds	r3, #8
 8006836:	2101      	movs	r1, #1
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fcb3 	bl	80071a4 <RCCEx_PLL2_Config>
 800683e:	4603      	mov	r3, r0
 8006840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006844:	e00f      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684a:	3328      	adds	r3, #40	@ 0x28
 800684c:	2101      	movs	r1, #1
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fd5a 	bl	8007308 <RCCEx_PLL3_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800685a:	e004      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800686e:	4b96      	ldr	r3, [pc, #600]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006872:	f023 0107 	bic.w	r1, r3, #7
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800687c:	4a92      	ldr	r2, [pc, #584]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800687e:	430b      	orrs	r3, r1
 8006880:	6553      	str	r3, [r2, #84]	@ 0x54
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f002 0304 	and.w	r3, r2, #4
 8006898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800689c:	2300      	movs	r3, #0
 800689e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	d044      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d825      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80068b8:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	0800690d 	.word	0x0800690d
 80068c4:	080068d9 	.word	0x080068d9
 80068c8:	080068ef 	.word	0x080068ef
 80068cc:	0800690d 	.word	0x0800690d
 80068d0:	0800690d 	.word	0x0800690d
 80068d4:	0800690d 	.word	0x0800690d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	3308      	adds	r3, #8
 80068de:	2101      	movs	r1, #1
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fc5f 	bl	80071a4 <RCCEx_PLL2_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068ec:	e00f      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	3328      	adds	r3, #40	@ 0x28
 80068f4:	2101      	movs	r1, #1
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fd06 	bl	8007308 <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006902:	e004      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690a:	e000      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800690c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006916:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691a:	f023 0107 	bic.w	r1, r3, #7
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006926:	4a68      	ldr	r2, [pc, #416]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006928:	430b      	orrs	r3, r1
 800692a:	6593      	str	r3, [r2, #88]	@ 0x58
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f002 0320 	and.w	r3, r2, #32
 8006942:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006946:	2300      	movs	r3, #0
 8006948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800694c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006950:	460b      	mov	r3, r1
 8006952:	4313      	orrs	r3, r2
 8006954:	d055      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006962:	d033      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006968:	d82c      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d02f      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006974:	d826      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006976:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800697a:	d02b      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800697c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006980:	d820      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006986:	d012      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698c:	d81a      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d022      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006996:	d115      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699c:	3308      	adds	r3, #8
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fbff 	bl	80071a4 <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069ac:	e015      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	3328      	adds	r3, #40	@ 0x28
 80069b4:	2102      	movs	r1, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fca6 	bl	8007308 <RCCEx_PLL3_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80069c2:	e00a      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069ca:	e006      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80069cc:	bf00      	nop
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80069d0:	bf00      	nop
 80069d2:	e002      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80069d4:	bf00      	nop
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e2:	4b39      	ldr	r3, [pc, #228]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f2:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d058      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a2e:	d033      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006a30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006a34:	d82c      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a3a:	d02f      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a40:	d826      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a46:	d02b      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006a48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4c:	d820      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a52:	d012      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a58:	d81a      	bhi.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d022      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a62:	d115      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	3308      	adds	r3, #8
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fb99 	bl	80071a4 <RCCEx_PLL2_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a78:	e015      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	3328      	adds	r3, #40	@ 0x28
 8006a80:	2102      	movs	r1, #2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fc40 	bl	8007308 <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a8e:	e00a      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a96:	e006      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e004      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006abe:	4a02      	ldr	r2, [pc, #8]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac4:	e006      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ac6:	bf00      	nop
 8006ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006aea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d055      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006afc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b00:	d033      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006b02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006b06:	d82c      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b0c:	d02f      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b12:	d826      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b18:	d02b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006b1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006b1e:	d820      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b24:	d012      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b2a:	d81a      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d022      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b34:	d115      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fb30 	bl	80071a4 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b4a:	e015      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	3328      	adds	r3, #40	@ 0x28
 8006b52:	2102      	movs	r1, #2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fbd7 	bl	8007308 <RCCEx_PLL3_Config>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b60:	e00a      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b68:	e006      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b6a:	bf00      	nop
 8006b6c:	e004      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b6e:	bf00      	nop
 8006b70:	e002      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b80:	4ba1      	ldr	r3, [pc, #644]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b84:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b90:	4a9d      	ldr	r2, [pc, #628]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b92:	430b      	orrs	r3, r1
 8006b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b96:	e003      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f002 0308 	and.w	r3, r2, #8
 8006bac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d01e      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3328      	adds	r3, #40	@ 0x28
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fb96 	bl	8007308 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006be8:	4b87      	ldr	r3, [pc, #540]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bf8:	4a83      	ldr	r2, [pc, #524]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f002 0310 	and.w	r3, r2, #16
 8006c0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	d01e      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c2a:	d10c      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c30:	3328      	adds	r3, #40	@ 0x28
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fb67 	bl	8007308 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c46:	4b70      	ldr	r3, [pc, #448]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c56:	4a6c      	ldr	r2, [pc, #432]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d03e      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c88:	d022      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c8e:	d81b      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c98:	d00b      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006c9a:	e015      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fa7d 	bl	80071a4 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb6:	3328      	adds	r3, #40	@ 0x28
 8006cb8:	2102      	movs	r1, #2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fb24 	bl	8007308 <RCCEx_PLL3_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cda:	4b4b      	ldr	r3, [pc, #300]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cde:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cea:	4a47      	ldr	r2, [pc, #284]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d08:	2300      	movs	r3, #0
 8006d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d22:	d01f      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d28:	d818      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d34:	d007      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006d36:	e011      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d38:	4b33      	ldr	r3, [pc, #204]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	4a32      	ldr	r2, [pc, #200]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d44:	e00f      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4a:	3328      	adds	r3, #40	@ 0x28
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fada 	bl	8007308 <RCCEx_PLL3_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d5a:	e004      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d62:	e000      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d6e:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7e:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006da0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d034      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db8:	d007      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006dba:	e011      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dbc:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc0:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dc8:	e00e      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	3308      	adds	r3, #8
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f9e6 	bl	80071a4 <RCCEx_PLL2_Config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfe:	4a02      	ldr	r2, [pc, #8]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e00:	430b      	orrs	r3, r1
 8006e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e04:	e006      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e22:	2300      	movs	r3, #0
 8006e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	d00c      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e34:	3328      	adds	r3, #40	@ 0x28
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fa65 	bl	8007308 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e56:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e58:	2300      	movs	r3, #0
 8006e5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006e60:	460b      	mov	r3, r1
 8006e62:	4313      	orrs	r3, r2
 8006e64:	d038      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e72:	d018      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e78:	d811      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7e:	d014      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e84:	d80b      	bhi.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e90:	4bc3      	ldr	r3, [pc, #780]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	4ac2      	ldr	r2, [pc, #776]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ea4:	e004      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006eb8:	4bb9      	ldr	r3, [pc, #740]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec8:	4ab5      	ldr	r2, [pc, #724]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ece:	e003      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ef4:	4baa      	ldr	r3, [pc, #680]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f02:	4aa7      	ldr	r2, [pc, #668]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f16:	2300      	movs	r3, #0
 8006f18:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d00a      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f24:	4b9e      	ldr	r3, [pc, #632]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006f34:	4a9a      	ldr	r2, [pc, #616]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f36:	430b      	orrs	r3, r1
 8006f38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f48:	2300      	movs	r3, #0
 8006f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006f50:	460b      	mov	r3, r1
 8006f52:	4313      	orrs	r3, r2
 8006f54:	d009      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f56:	4b92      	ldr	r3, [pc, #584]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f64:	4a8e      	ldr	r2, [pc, #568]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f78:	2300      	movs	r3, #0
 8006f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d00e      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f86:	4b86      	ldr	r3, [pc, #536]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	4a85      	ldr	r2, [pc, #532]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f90:	6113      	str	r3, [r2, #16]
 8006f92:	4b83      	ldr	r3, [pc, #524]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f94:	6919      	ldr	r1, [r3, #16]
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f9e:	4a80      	ldr	r2, [pc, #512]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fc0:	4b77      	ldr	r3, [pc, #476]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fce:	4a74      	ldr	r2, [pc, #464]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	d00a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ff0:	4b6b      	ldr	r3, [pc, #428]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007000:	4a67      	ldr	r2, [pc, #412]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007002:	430b      	orrs	r3, r1
 8007004:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	2100      	movs	r1, #0
 8007010:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007018:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800701c:	460b      	mov	r3, r1
 800701e:	4313      	orrs	r3, r2
 8007020:	d011      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	3308      	adds	r3, #8
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8ba 	bl	80071a4 <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	2100      	movs	r1, #0
 8007050:	6239      	str	r1, [r7, #32]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
 8007058:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800705c:	460b      	mov	r3, r1
 800705e:	4313      	orrs	r3, r2
 8007060:	d011      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	3308      	adds	r3, #8
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f89a 	bl	80071a4 <RCCEx_PLL2_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	2100      	movs	r1, #0
 8007090:	61b9      	str	r1, [r7, #24]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d011      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	3308      	adds	r3, #8
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f87a 	bl	80071a4 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	2100      	movs	r1, #0
 80070d0:	6139      	str	r1, [r7, #16]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80070dc:	460b      	mov	r3, r1
 80070de:	4313      	orrs	r3, r2
 80070e0:	d011      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	3328      	adds	r3, #40	@ 0x28
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f90c 	bl	8007308 <RCCEx_PLL3_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80070f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	2100      	movs	r1, #0
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800711c:	460b      	mov	r3, r1
 800711e:	4313      	orrs	r3, r2
 8007120:	d011      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007126:	3328      	adds	r3, #40	@ 0x28
 8007128:	2101      	movs	r1, #1
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f8ec 	bl	8007308 <RCCEx_PLL3_Config>
 8007130:	4603      	mov	r3, r0
 8007132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	2100      	movs	r1, #0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	e9d7 1200 	ldrd	r1, r2, [r7]
 800715c:	460b      	mov	r3, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	d011      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	3328      	adds	r3, #40	@ 0x28
 8007168:	2102      	movs	r1, #2
 800716a:	4618      	mov	r0, r3
 800716c:	f000 f8cc 	bl	8007308 <RCCEx_PLL3_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007186:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a0:	58024400 	.word	0x58024400

080071a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071b2:	4b53      	ldr	r3, [pc, #332]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d101      	bne.n	80071c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e099      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a4e      	ldr	r2, [pc, #312]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ce:	f7fa fedf 	bl	8001f90 <HAL_GetTick>
 80071d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071d4:	e008      	b.n	80071e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071d6:	f7fa fedb 	bl	8001f90 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e086      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071e8:	4b45      	ldr	r3, [pc, #276]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f0      	bne.n	80071d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071f4:	4b42      	ldr	r3, [pc, #264]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80071f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	031b      	lsls	r3, r3, #12
 8007202:	493f      	ldr	r1, [pc, #252]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	628b      	str	r3, [r1, #40]	@ 0x28
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	3b01      	subs	r3, #1
 8007218:	025b      	lsls	r3, r3, #9
 800721a:	b29b      	uxth	r3, r3
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	3b01      	subs	r3, #1
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	3b01      	subs	r3, #1
 8007232:	061b      	lsls	r3, r3, #24
 8007234:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007238:	4931      	ldr	r1, [pc, #196]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 800723a:	4313      	orrs	r3, r2
 800723c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800723e:	4b30      	ldr	r3, [pc, #192]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	492d      	ldr	r1, [pc, #180]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007250:	4b2b      	ldr	r3, [pc, #172]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	f023 0220 	bic.w	r2, r3, #32
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	4928      	ldr	r1, [pc, #160]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007262:	4b27      	ldr	r3, [pc, #156]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007266:	4a26      	ldr	r2, [pc, #152]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007268:	f023 0310 	bic.w	r3, r3, #16
 800726c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800726e:	4b24      	ldr	r3, [pc, #144]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007272:	4b24      	ldr	r3, [pc, #144]	@ (8007304 <RCCEx_PLL2_Config+0x160>)
 8007274:	4013      	ands	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	69d2      	ldr	r2, [r2, #28]
 800727a:	00d2      	lsls	r2, r2, #3
 800727c:	4920      	ldr	r1, [pc, #128]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007282:	4b1f      	ldr	r3, [pc, #124]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	4a1e      	ldr	r2, [pc, #120]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007288:	f043 0310 	orr.w	r3, r3, #16
 800728c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	4a19      	ldr	r2, [pc, #100]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 800729a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800729e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072a0:	e00f      	b.n	80072c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d106      	bne.n	80072b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072a8:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072b4:	e005      	b.n	80072c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072b6:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	4a11      	ldr	r2, [pc, #68]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0e      	ldr	r2, [pc, #56]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fa fe5f 	bl	8001f90 <HAL_GetTick>
 80072d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072d6:	f7fa fe5b 	bl	8001f90 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e006      	b.n	80072f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <RCCEx_PLL2_Config+0x15c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
 8007304:	ffff0007 	.word	0xffff0007

08007308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007316:	4b53      	ldr	r3, [pc, #332]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d101      	bne.n	8007326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e099      	b.n	800745a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007326:	4b4f      	ldr	r3, [pc, #316]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a4e      	ldr	r2, [pc, #312]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800732c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007332:	f7fa fe2d 	bl	8001f90 <HAL_GetTick>
 8007336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007338:	e008      	b.n	800734c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800733a:	f7fa fe29 	bl	8001f90 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e086      	b.n	800745a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800734c:	4b45      	ldr	r3, [pc, #276]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007358:	4b42      	ldr	r3, [pc, #264]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	493f      	ldr	r1, [pc, #252]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007368:	4313      	orrs	r3, r2
 800736a:	628b      	str	r3, [r1, #40]	@ 0x28
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	3b01      	subs	r3, #1
 8007372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	025b      	lsls	r3, r3, #9
 800737e:	b29b      	uxth	r3, r3
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	061b      	lsls	r3, r3, #24
 8007398:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800739c:	4931      	ldr	r1, [pc, #196]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073a2:	4b30      	ldr	r3, [pc, #192]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	492d      	ldr	r1, [pc, #180]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4928      	ldr	r1, [pc, #160]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073c6:	4b27      	ldr	r3, [pc, #156]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	4a26      	ldr	r2, [pc, #152]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073d2:	4b24      	ldr	r3, [pc, #144]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d6:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <RCCEx_PLL3_Config+0x160>)
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	69d2      	ldr	r2, [r2, #28]
 80073de:	00d2      	lsls	r2, r2, #3
 80073e0:	4920      	ldr	r1, [pc, #128]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	4a19      	ldr	r2, [pc, #100]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 80073fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007404:	e00f      	b.n	8007426 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d106      	bne.n	800741a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800740c:	4b15      	ldr	r3, [pc, #84]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	4a14      	ldr	r2, [pc, #80]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007412:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007418:	e005      	b.n	8007426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	4a11      	ldr	r2, [pc, #68]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007420:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007424:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007432:	f7fa fdad 	bl	8001f90 <HAL_GetTick>
 8007436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007438:	e008      	b.n	800744c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800743a:	f7fa fda9 	bl	8001f90 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e006      	b.n	800745a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <RCCEx_PLL3_Config+0x15c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	ffff0007 	.word	0xffff0007

0800746c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e10f      	b.n	800769e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a87      	ldr	r2, [pc, #540]	@ (80076a8 <HAL_SPI_Init+0x23c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00f      	beq.n	80074ae <HAL_SPI_Init+0x42>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a86      	ldr	r2, [pc, #536]	@ (80076ac <HAL_SPI_Init+0x240>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00a      	beq.n	80074ae <HAL_SPI_Init+0x42>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a84      	ldr	r2, [pc, #528]	@ (80076b0 <HAL_SPI_Init+0x244>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d005      	beq.n	80074ae <HAL_SPI_Init+0x42>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b0f      	cmp	r3, #15
 80074a8:	d901      	bls.n	80074ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e0f7      	b.n	800769e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fe2e 	bl	8008110 <SPI_GetPacketSize>
 80074b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a7b      	ldr	r2, [pc, #492]	@ (80076a8 <HAL_SPI_Init+0x23c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00c      	beq.n	80074da <HAL_SPI_Init+0x6e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a79      	ldr	r2, [pc, #484]	@ (80076ac <HAL_SPI_Init+0x240>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <HAL_SPI_Init+0x6e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a78      	ldr	r2, [pc, #480]	@ (80076b0 <HAL_SPI_Init+0x244>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d002      	beq.n	80074da <HAL_SPI_Init+0x6e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d811      	bhi.n	80074fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074de:	4a72      	ldr	r2, [pc, #456]	@ (80076a8 <HAL_SPI_Init+0x23c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d009      	beq.n	80074f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a70      	ldr	r2, [pc, #448]	@ (80076ac <HAL_SPI_Init+0x240>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d004      	beq.n	80074f8 <HAL_SPI_Init+0x8c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a6f      	ldr	r2, [pc, #444]	@ (80076b0 <HAL_SPI_Init+0x244>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d104      	bne.n	8007502 <HAL_SPI_Init+0x96>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d901      	bls.n	8007502 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e0cd      	b.n	800769e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fa f84c 	bl	80015b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800753e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007548:	d119      	bne.n	800757e <HAL_SPI_Init+0x112>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007552:	d103      	bne.n	800755c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10c      	bne.n	800757e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800756c:	d107      	bne.n	800757e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <HAL_SPI_Init+0x13e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	2b06      	cmp	r3, #6
 8007590:	d90b      	bls.n	80075aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	e007      	b.n	80075ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761a:	ea42 0103 	orr.w	r1, r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d113      	bne.n	800765a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007644:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007658:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40013000 	.word	0x40013000
 80076ac:	40003800 	.word	0x40003800
 80076b0:	40003c00 	.word	0x40003c00

080076b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3320      	adds	r3, #32
 80076ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076cc:	f7fa fc60 	bl	8001f90 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80076de:	2302      	movs	r3, #2
 80076e0:	e1d1      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_SPI_Transmit+0x3a>
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e1c9      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_SPI_Transmit+0x4c>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e1c2      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2203      	movs	r2, #3
 800770c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007758:	d108      	bne.n	800776c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e009      	b.n	8007780 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800777e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	4b96      	ldr	r3, [pc, #600]	@ (80079e0 <HAL_SPI_Transmit+0x32c>)
 8007788:	4013      	ands	r3, r2
 800778a:	88f9      	ldrh	r1, [r7, #6]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	430b      	orrs	r3, r1
 8007792:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077ac:	d107      	bne.n	80077be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d947      	bls.n	8007856 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80077c6:	e03f      	b.n	8007848 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d114      	bne.n	8007800 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077fe:	e023      	b.n	8007848 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007800:	f7fa fbc6 	bl	8001f90 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d803      	bhi.n	8007818 <HAL_SPI_Transmit+0x164>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d102      	bne.n	800781e <HAL_SPI_Transmit+0x16a>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d114      	bne.n	8007848 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fba8 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e11e      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1b9      	bne.n	80077c8 <HAL_SPI_Transmit+0x114>
 8007854:	e0f1      	b.n	8007a3a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	2b07      	cmp	r3, #7
 800785c:	f240 80e6 	bls.w	8007a2c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007860:	e05d      	b.n	800791e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b02      	cmp	r3, #2
 800786e:	d132      	bne.n	80078d6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d918      	bls.n	80078ae <HAL_SPI_Transmit+0x1fa>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d014      	beq.n	80078ae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007894:	1d1a      	adds	r2, r3, #4
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b02      	subs	r3, #2
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078ac:	e037      	b.n	800791e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b2:	881a      	ldrh	r2, [r3, #0]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078bc:	1c9a      	adds	r2, r3, #2
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80078d4:	e023      	b.n	800791e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d6:	f7fa fb5b 	bl	8001f90 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d803      	bhi.n	80078ee <HAL_SPI_Transmit+0x23a>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d102      	bne.n	80078f4 <HAL_SPI_Transmit+0x240>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d114      	bne.n	800791e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fb3d 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007900:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e0b3      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d19b      	bne.n	8007862 <HAL_SPI_Transmit+0x1ae>
 800792a:	e086      	b.n	8007a3a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b02      	cmp	r3, #2
 8007938:	d154      	bne.n	80079e4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b03      	cmp	r3, #3
 8007944:	d918      	bls.n	8007978 <HAL_SPI_Transmit+0x2c4>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d914      	bls.n	8007978 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800796a:	b29b      	uxth	r3, r3
 800796c:	3b04      	subs	r3, #4
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007976:	e059      	b.n	8007a2c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d917      	bls.n	80079b4 <HAL_SPI_Transmit+0x300>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d013      	beq.n	80079b4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007990:	881a      	ldrh	r2, [r3, #0]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b02      	subs	r3, #2
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079b2:	e03b      	b.n	8007a2c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3320      	adds	r3, #32
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80079de:	e025      	b.n	8007a2c <HAL_SPI_Transmit+0x378>
 80079e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e4:	f7fa fad4 	bl	8001f90 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d803      	bhi.n	80079fc <HAL_SPI_Transmit+0x348>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d102      	bne.n	8007a02 <HAL_SPI_Transmit+0x34e>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d114      	bne.n	8007a2c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fab6 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e02c      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f af79 	bne.w	800792c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2108      	movs	r1, #8
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fb35 	bl	80080b4 <SPI_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d007      	beq.n	8007a60 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fa87 	bl	8007f74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop

08007a90 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3330      	adds	r3, #48	@ 0x30
 8007ab2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ab4:	f7fa fa6c 	bl	8001f90 <HAL_GetTick>
 8007ab8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d001      	beq.n	8007aca <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e250      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_Receive+0x46>
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e248      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_SPI_Receive+0x58>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e241      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2204      	movs	r2, #4
 8007af4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007b40:	d108      	bne.n	8007b54 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	e009      	b.n	8007b68 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007b66:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4b95      	ldr	r3, [pc, #596]	@ (8007dc4 <HAL_SPI_Receive+0x334>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	88f9      	ldrh	r1, [r7, #6]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b94:	d107      	bne.n	8007ba6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d96c      	bls.n	8007c88 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007bae:	e064      	b.n	8007c7a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d114      	bne.n	8007bf0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007bd0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bee:	e044      	b.n	8007c7a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8bfa      	ldrh	r2, [r7, #30]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d919      	bls.n	8007c32 <HAL_SPI_Receive+0x1a2>
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d014      	beq.n	8007c32 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c12:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c18:	1d1a      	adds	r2, r3, #4
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007c30:	e023      	b.n	8007c7a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c32:	f7fa f9ad 	bl	8001f90 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d803      	bhi.n	8007c4a <HAL_SPI_Receive+0x1ba>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d102      	bne.n	8007c50 <HAL_SPI_Receive+0x1c0>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d114      	bne.n	8007c7a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f98f 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e178      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d194      	bne.n	8007bb0 <HAL_SPI_Receive+0x120>
 8007c86:	e15e      	b.n	8007f46 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b07      	cmp	r3, #7
 8007c8e:	f240 8153 	bls.w	8007f38 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007c92:	e08f      	b.n	8007db4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d114      	bne.n	8007cd4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	8812      	ldrh	r2, [r2, #0]
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cba:	1c9a      	adds	r2, r3, #2
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007cd2:	e06f      	b.n	8007db4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8bfa      	ldrh	r2, [r7, #30]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d924      	bls.n	8007d2c <HAL_SPI_Receive+0x29c>
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01f      	beq.n	8007d2c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	8812      	ldrh	r2, [r2, #0]
 8007cf4:	b292      	uxth	r2, r2
 8007cf6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cfc:	1c9a      	adds	r2, r3, #2
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	8812      	ldrh	r2, [r2, #0]
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d12:	1c9a      	adds	r2, r3, #2
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b02      	subs	r3, #2
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d2a:	e043      	b.n	8007db4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d119      	bne.n	8007d6c <HAL_SPI_Receive+0x2dc>
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d014      	beq.n	8007d6c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	8812      	ldrh	r2, [r2, #0]
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d52:	1c9a      	adds	r2, r3, #2
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007d6a:	e023      	b.n	8007db4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d6c:	f7fa f910 	bl	8001f90 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d803      	bhi.n	8007d84 <HAL_SPI_Receive+0x2f4>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d82:	d102      	bne.n	8007d8a <HAL_SPI_Receive+0x2fa>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d114      	bne.n	8007db4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f8f2 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e0db      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f af69 	bne.w	8007c94 <HAL_SPI_Receive+0x204>
 8007dc2:	e0c0      	b.n	8007f46 <HAL_SPI_Receive+0x4b6>
 8007dc4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d117      	bne.n	8007e0e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e0c:	e094      	b.n	8007f38 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	8bfa      	ldrh	r2, [r7, #30]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d946      	bls.n	8007eaa <HAL_SPI_Receive+0x41a>
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d041      	beq.n	8007eaa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e58:	1c5a      	adds	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	b2d2      	uxtb	r2, r2
 8007e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ea8:	e046      	b.n	8007f38 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d81c      	bhi.n	8007ef0 <HAL_SPI_Receive+0x460>
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ecc:	7812      	ldrb	r2, [r2, #0]
 8007ece:	b2d2      	uxtb	r2, r2
 8007ed0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007eee:	e023      	b.n	8007f38 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ef0:	f7fa f84e 	bl	8001f90 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d803      	bhi.n	8007f08 <HAL_SPI_Receive+0x478>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d102      	bne.n	8007f0e <HAL_SPI_Receive+0x47e>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d114      	bne.n	8007f38 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f830 	bl	8007f74 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e019      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f47f af41 	bne.w	8007dc8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f814 	bl	8007f74 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
  }
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0208 	orr.w	r2, r2, #8
 8007f92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0210 	orr.w	r2, r2, #16
 8007fa2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6919      	ldr	r1, [r3, #16]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80080b0 <SPI_CloseTransfer+0x13c>)
 8007fc0:	400b      	ands	r3, r1
 8007fc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007fd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d014      	beq.n	800800a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	699a      	ldr	r2, [r3, #24]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f042 0220 	orr.w	r2, r2, #32
 8008008:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d014      	beq.n	8008040 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00f      	beq.n	8008040 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008026:	f043 0204 	orr.w	r2, r3, #4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800803e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008050:	f043 0201 	orr.w	r2, r3, #1
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008068:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00f      	beq.n	8008094 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807a:	f043 0208 	orr.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008092:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	fffffc90 	.word	0xfffffc90

080080b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080c4:	e010      	b.n	80080e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c6:	f7f9 ff63 	bl	8001f90 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d803      	bhi.n	80080de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d102      	bne.n	80080e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e00f      	b.n	8008108 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695a      	ldr	r2, [r3, #20]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	4013      	ands	r3, r2
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	bf0c      	ite	eq
 80080f8:	2301      	moveq	r3, #1
 80080fa:	2300      	movne	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	461a      	mov	r2, r3
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	429a      	cmp	r2, r3
 8008104:	d0df      	beq.n	80080c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3307      	adds	r3, #7
 800812e:	08db      	lsrs	r3, r3, #3
 8008130:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	fb02 f303 	mul.w	r3, r2, r3
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e049      	b.n	80081ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7f9 fdfb 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3304      	adds	r3, #4
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f000 fd59 	bl	8008c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e054      	b.n	80082b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a26      	ldr	r2, [pc, #152]	@ (80082c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d022      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008236:	d01d      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a22      	ldr	r2, [pc, #136]	@ (80082c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d018      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a21      	ldr	r2, [pc, #132]	@ (80082cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d013      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1f      	ldr	r2, [pc, #124]	@ (80082d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00e      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1e      	ldr	r2, [pc, #120]	@ (80082d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d009      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1b      	ldr	r2, [pc, #108]	@ (80082dc <HAL_TIM_Base_Start_IT+0xe8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d115      	bne.n	80082a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	4b19      	ldr	r3, [pc, #100]	@ (80082e0 <HAL_TIM_Base_Start_IT+0xec>)
 800827c:	4013      	ands	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b06      	cmp	r3, #6
 8008284:	d015      	beq.n	80082b2 <HAL_TIM_Base_Start_IT+0xbe>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800828c:	d011      	beq.n	80082b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	e008      	b.n	80082b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e000      	b.n	80082b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40001800 	.word	0x40001800
 80082dc:	40014000 	.word	0x40014000
 80082e0:	00010007 	.word	0x00010007

080082e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e049      	b.n	800838a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f841 	bl	8008392 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f000 fc8a 	bl	8008c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <HAL_TIM_PWM_Start+0x24>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	bf14      	ite	ne
 80083c4:	2301      	movne	r3, #1
 80083c6:	2300      	moveq	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	e03c      	b.n	8008446 <HAL_TIM_PWM_Start+0x9e>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d109      	bne.n	80083e6 <HAL_TIM_PWM_Start+0x3e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b01      	cmp	r3, #1
 80083dc:	bf14      	ite	ne
 80083de:	2301      	movne	r3, #1
 80083e0:	2300      	moveq	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	e02f      	b.n	8008446 <HAL_TIM_PWM_Start+0x9e>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d109      	bne.n	8008400 <HAL_TIM_PWM_Start+0x58>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	bf14      	ite	ne
 80083f8:	2301      	movne	r3, #1
 80083fa:	2300      	moveq	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e022      	b.n	8008446 <HAL_TIM_PWM_Start+0x9e>
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2b0c      	cmp	r3, #12
 8008404:	d109      	bne.n	800841a <HAL_TIM_PWM_Start+0x72>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	bf14      	ite	ne
 8008412:	2301      	movne	r3, #1
 8008414:	2300      	moveq	r3, #0
 8008416:	b2db      	uxtb	r3, r3
 8008418:	e015      	b.n	8008446 <HAL_TIM_PWM_Start+0x9e>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b10      	cmp	r3, #16
 800841e:	d109      	bne.n	8008434 <HAL_TIM_PWM_Start+0x8c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	bf14      	ite	ne
 800842c:	2301      	movne	r3, #1
 800842e:	2300      	moveq	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	e008      	b.n	8008446 <HAL_TIM_PWM_Start+0x9e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	bf14      	ite	ne
 8008440:	2301      	movne	r3, #1
 8008442:	2300      	moveq	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e0a1      	b.n	8008592 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <HAL_TIM_PWM_Start+0xb6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800845c:	e023      	b.n	80084a6 <HAL_TIM_PWM_Start+0xfe>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b04      	cmp	r3, #4
 8008462:	d104      	bne.n	800846e <HAL_TIM_PWM_Start+0xc6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800846c:	e01b      	b.n	80084a6 <HAL_TIM_PWM_Start+0xfe>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d104      	bne.n	800847e <HAL_TIM_PWM_Start+0xd6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800847c:	e013      	b.n	80084a6 <HAL_TIM_PWM_Start+0xfe>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b0c      	cmp	r3, #12
 8008482:	d104      	bne.n	800848e <HAL_TIM_PWM_Start+0xe6>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800848c:	e00b      	b.n	80084a6 <HAL_TIM_PWM_Start+0xfe>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b10      	cmp	r3, #16
 8008492:	d104      	bne.n	800849e <HAL_TIM_PWM_Start+0xf6>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800849c:	e003      	b.n	80084a6 <HAL_TIM_PWM_Start+0xfe>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2201      	movs	r2, #1
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 ffde 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a38      	ldr	r2, [pc, #224]	@ (800859c <HAL_TIM_PWM_Start+0x1f4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <HAL_TIM_PWM_Start+0x13e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a37      	ldr	r2, [pc, #220]	@ (80085a0 <HAL_TIM_PWM_Start+0x1f8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00e      	beq.n	80084e6 <HAL_TIM_PWM_Start+0x13e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a35      	ldr	r2, [pc, #212]	@ (80085a4 <HAL_TIM_PWM_Start+0x1fc>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d009      	beq.n	80084e6 <HAL_TIM_PWM_Start+0x13e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a34      	ldr	r2, [pc, #208]	@ (80085a8 <HAL_TIM_PWM_Start+0x200>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d004      	beq.n	80084e6 <HAL_TIM_PWM_Start+0x13e>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a32      	ldr	r2, [pc, #200]	@ (80085ac <HAL_TIM_PWM_Start+0x204>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <HAL_TIM_PWM_Start+0x142>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <HAL_TIM_PWM_Start+0x144>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a25      	ldr	r2, [pc, #148]	@ (800859c <HAL_TIM_PWM_Start+0x1f4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d022      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008512:	d01d      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a25      	ldr	r2, [pc, #148]	@ (80085b0 <HAL_TIM_PWM_Start+0x208>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d018      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a24      	ldr	r2, [pc, #144]	@ (80085b4 <HAL_TIM_PWM_Start+0x20c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d013      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a22      	ldr	r2, [pc, #136]	@ (80085b8 <HAL_TIM_PWM_Start+0x210>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00e      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1a      	ldr	r2, [pc, #104]	@ (80085a0 <HAL_TIM_PWM_Start+0x1f8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d009      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1e      	ldr	r2, [pc, #120]	@ (80085bc <HAL_TIM_PWM_Start+0x214>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <HAL_TIM_PWM_Start+0x1a8>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a16      	ldr	r2, [pc, #88]	@ (80085a4 <HAL_TIM_PWM_Start+0x1fc>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d115      	bne.n	800857c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	4b1a      	ldr	r3, [pc, #104]	@ (80085c0 <HAL_TIM_PWM_Start+0x218>)
 8008558:	4013      	ands	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b06      	cmp	r3, #6
 8008560:	d015      	beq.n	800858e <HAL_TIM_PWM_Start+0x1e6>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008568:	d011      	beq.n	800858e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857a:	e008      	b.n	800858e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0201 	orr.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	e000      	b.n	8008590 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40010000 	.word	0x40010000
 80085a0:	40010400 	.word	0x40010400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800
 80085b0:	40000400 	.word	0x40000400
 80085b4:	40000800 	.word	0x40000800
 80085b8:	40000c00 	.word	0x40000c00
 80085bc:	40001800 	.word	0x40001800
 80085c0:	00010007 	.word	0x00010007

080085c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d020      	beq.n	8008628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01b      	beq.n	8008628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0202 	mvn.w	r2, #2
 80085f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 faf6 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fae8 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 faf9 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d020      	beq.n	8008674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01b      	beq.n	8008674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0204 	mvn.w	r2, #4
 8008644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fad0 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 8008660:	e005      	b.n	800866e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fac2 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fad3 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01b      	beq.n	80086c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0208 	mvn.w	r2, #8
 8008690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2204      	movs	r2, #4
 8008696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 faaa 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa9c 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 faad 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d020      	beq.n	800870c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01b      	beq.n	800870c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0210 	mvn.w	r2, #16
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2208      	movs	r2, #8
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa84 	bl	8008c00 <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa76 	bl	8008bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fa87 	bl	8008c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00c      	beq.n	8008730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d007      	beq.n	8008730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0201 	mvn.w	r2, #1
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7f8 fe7c 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f887 	bl	800986c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876e:	2b00      	cmp	r3, #0
 8008770:	d007      	beq.n	8008782 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f87f 	bl	8009880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00c      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800879e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa41 	bl	8008c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00c      	beq.n	80087ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f06f 0220 	mvn.w	r2, #32
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f847 	bl	8009858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087ee:	2302      	movs	r3, #2
 80087f0:	e0ff      	b.n	80089f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b14      	cmp	r3, #20
 80087fe:	f200 80f0 	bhi.w	80089e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008802:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	0800885d 	.word	0x0800885d
 800880c:	080089e3 	.word	0x080089e3
 8008810:	080089e3 	.word	0x080089e3
 8008814:	080089e3 	.word	0x080089e3
 8008818:	0800889d 	.word	0x0800889d
 800881c:	080089e3 	.word	0x080089e3
 8008820:	080089e3 	.word	0x080089e3
 8008824:	080089e3 	.word	0x080089e3
 8008828:	080088df 	.word	0x080088df
 800882c:	080089e3 	.word	0x080089e3
 8008830:	080089e3 	.word	0x080089e3
 8008834:	080089e3 	.word	0x080089e3
 8008838:	0800891f 	.word	0x0800891f
 800883c:	080089e3 	.word	0x080089e3
 8008840:	080089e3 	.word	0x080089e3
 8008844:	080089e3 	.word	0x080089e3
 8008848:	08008961 	.word	0x08008961
 800884c:	080089e3 	.word	0x080089e3
 8008850:	080089e3 	.word	0x080089e3
 8008854:	080089e3 	.word	0x080089e3
 8008858:	080089a1 	.word	0x080089a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fa90 	bl	8008d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0208 	orr.w	r2, r2, #8
 8008876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699a      	ldr	r2, [r3, #24]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0204 	bic.w	r2, r2, #4
 8008886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6999      	ldr	r1, [r3, #24]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	619a      	str	r2, [r3, #24]
      break;
 800889a:	e0a5      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fb00 	bl	8008ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6999      	ldr	r1, [r3, #24]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	021a      	lsls	r2, r3, #8
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	619a      	str	r2, [r3, #24]
      break;
 80088dc:	e084      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fb69 	bl	8008fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 0208 	orr.w	r2, r2, #8
 80088f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0204 	bic.w	r2, r2, #4
 8008908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69d9      	ldr	r1, [r3, #28]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	691a      	ldr	r2, [r3, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	61da      	str	r2, [r3, #28]
      break;
 800891c:	e064      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fbd1 	bl	80090cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	021a      	lsls	r2, r3, #8
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	61da      	str	r2, [r3, #28]
      break;
 800895e:	e043      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fc1a 	bl	80091a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0208 	orr.w	r2, r2, #8
 800897a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0204 	bic.w	r2, r2, #4
 800898a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800899e:	e023      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fc5e 	bl	8009268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089e0:	e002      	b.n	80089e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
      break;
 80089e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_TIM_ConfigClockSource+0x1c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e0dc      	b.n	8008bd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	4b6a      	ldr	r3, [pc, #424]	@ (8008bdc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a64      	ldr	r2, [pc, #400]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	f000 80a9 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a54:	4a62      	ldr	r2, [pc, #392]	@ (8008be0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	f200 80ae 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a5c:	4a61      	ldr	r2, [pc, #388]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	f000 80a1 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a64:	4a5f      	ldr	r2, [pc, #380]	@ (8008be4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f200 80a6 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f000 8099 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a74:	4a5c      	ldr	r2, [pc, #368]	@ (8008be8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f200 809e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a80:	f000 8091 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a88:	f200 8096 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a90:	f000 8089 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a98:	f200 808e 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa0:	d03e      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x124>
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	f200 8087 	bhi.w	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aae:	f000 8086 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1c2>
 8008ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab6:	d87f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ab8:	2b70      	cmp	r3, #112	@ 0x70
 8008aba:	d01a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0xf6>
 8008abc:	2b70      	cmp	r3, #112	@ 0x70
 8008abe:	d87b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac0:	2b60      	cmp	r3, #96	@ 0x60
 8008ac2:	d050      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x16a>
 8008ac4:	2b60      	cmp	r3, #96	@ 0x60
 8008ac6:	d877      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac8:	2b50      	cmp	r3, #80	@ 0x50
 8008aca:	d03c      	beq.n	8008b46 <HAL_TIM_ConfigClockSource+0x14a>
 8008acc:	2b50      	cmp	r3, #80	@ 0x50
 8008ace:	d873      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad0:	2b40      	cmp	r3, #64	@ 0x40
 8008ad2:	d058      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x18a>
 8008ad4:	2b40      	cmp	r3, #64	@ 0x40
 8008ad6:	d86f      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad8:	2b30      	cmp	r3, #48	@ 0x30
 8008ada:	d064      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008adc:	2b30      	cmp	r3, #48	@ 0x30
 8008ade:	d86b      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d060      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d867      	bhi.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05c      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d05a      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008af0:	e062      	b.n	8008bb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b02:	f000 fc95 	bl	8009430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	609a      	str	r2, [r3, #8]
      break;
 8008b1e:	e04f      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b30:	f000 fc7e 	bl	8009430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b42:	609a      	str	r2, [r3, #8]
      break;
 8008b44:	e03c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b52:	461a      	mov	r2, r3
 8008b54:	f000 fbee 	bl	8009334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2150      	movs	r1, #80	@ 0x50
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fc48 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b64:	e02c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b72:	461a      	mov	r2, r3
 8008b74:	f000 fc0d 	bl	8009392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2160      	movs	r1, #96	@ 0x60
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fc38 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b84:	e01c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 fbce 	bl	8009334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2140      	movs	r1, #64	@ 0x40
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fc28 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008ba4:	e00c      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f000 fc1f 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008bb6:	e003      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e000      	b.n	8008bc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	ffceff88 	.word	0xffceff88
 8008be0:	00100040 	.word	0x00100040
 8008be4:	00100030 	.word	0x00100030
 8008be8:	00100020 	.word	0x00100020

08008bec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a46      	ldr	r2, [pc, #280]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5a:	d00f      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a43      	ldr	r2, [pc, #268]	@ (8008d6c <TIM_Base_SetConfig+0x130>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a42      	ldr	r2, [pc, #264]	@ (8008d70 <TIM_Base_SetConfig+0x134>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a41      	ldr	r2, [pc, #260]	@ (8008d74 <TIM_Base_SetConfig+0x138>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a40      	ldr	r2, [pc, #256]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d108      	bne.n	8008c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a35      	ldr	r2, [pc, #212]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9c:	d01b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a32      	ldr	r2, [pc, #200]	@ (8008d6c <TIM_Base_SetConfig+0x130>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d017      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a31      	ldr	r2, [pc, #196]	@ (8008d70 <TIM_Base_SetConfig+0x134>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a30      	ldr	r2, [pc, #192]	@ (8008d74 <TIM_Base_SetConfig+0x138>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00f      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00b      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8008d7c <TIM_Base_SetConfig+0x140>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008d80 <TIM_Base_SetConfig+0x144>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d84 <TIM_Base_SetConfig+0x148>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d108      	bne.n	8008ce8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a16      	ldr	r2, [pc, #88]	@ (8008d68 <TIM_Base_SetConfig+0x12c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00f      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <TIM_Base_SetConfig+0x13c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	@ (8008d7c <TIM_Base_SetConfig+0x140>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <TIM_Base_SetConfig+0x144>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0xf8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <TIM_Base_SetConfig+0x148>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d103      	bne.n	8008d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d105      	bne.n	8008d5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	611a      	str	r2, [r3, #16]
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40014400 	.word	0x40014400
 8008d84:	40014800 	.word	0x40014800

08008d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	f023 0201 	bic.w	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4b37      	ldr	r3, [pc, #220]	@ (8008e90 <TIM_OC1_SetConfig+0x108>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 0302 	bic.w	r3, r3, #2
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2d      	ldr	r2, [pc, #180]	@ (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2b      	ldr	r2, [pc, #172]	@ (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a29      	ldr	r2, [pc, #164]	@ (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d10c      	bne.n	8008e1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f023 0308 	bic.w	r3, r3, #8
 8008e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 0304 	bic.w	r3, r3, #4
 8008e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1c      	ldr	r2, [pc, #112]	@ (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00f      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00b      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1a      	ldr	r2, [pc, #104]	@ (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a19      	ldr	r2, [pc, #100]	@ (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a18      	ldr	r2, [pc, #96]	@ (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d111      	bne.n	8008e6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	bf00      	nop
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	fffeff8f 	.word	0xfffeff8f
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800

08008ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f023 0210 	bic.w	r2, r3, #16
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b34      	ldr	r3, [pc, #208]	@ (8008fa4 <TIM_OC2_SetConfig+0xfc>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a29      	ldr	r2, [pc, #164]	@ (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x68>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	@ (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <TIM_OC2_SetConfig+0x108>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb4 <TIM_OC2_SetConfig+0x10c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb8 <TIM_OC2_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d113      	bne.n	8008f7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	feff8fff 	.word	0xfeff8fff
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800

08008fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4b33      	ldr	r3, [pc, #204]	@ (80090b4 <TIM_OC3_SetConfig+0xf8>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a28      	ldr	r2, [pc, #160]	@ (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_OC3_SetConfig+0x66>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a27      	ldr	r2, [pc, #156]	@ (80090bc <TIM_OC3_SetConfig+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10d      	bne.n	800903e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800903c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1d      	ldr	r2, [pc, #116]	@ (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1c      	ldr	r2, [pc, #112]	@ (80090bc <TIM_OC3_SetConfig+0x100>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1b      	ldr	r2, [pc, #108]	@ (80090c0 <TIM_OC3_SetConfig+0x104>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a1a      	ldr	r2, [pc, #104]	@ (80090c4 <TIM_OC3_SetConfig+0x108>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <TIM_OC3_SetConfig+0x10c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d113      	bne.n	800908e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	fffeff8f 	.word	0xfffeff8f
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800

080090cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b24      	ldr	r3, [pc, #144]	@ (8009188 <TIM_OC4_SetConfig+0xbc>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a19      	ldr	r2, [pc, #100]	@ (800918c <TIM_OC4_SetConfig+0xc0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00f      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a18      	ldr	r2, [pc, #96]	@ (8009190 <TIM_OC4_SetConfig+0xc4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a17      	ldr	r2, [pc, #92]	@ (8009194 <TIM_OC4_SetConfig+0xc8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a16      	ldr	r2, [pc, #88]	@ (8009198 <TIM_OC4_SetConfig+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a15      	ldr	r2, [pc, #84]	@ (800919c <TIM_OC4_SetConfig+0xd0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d109      	bne.n	8009160 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	feff8fff 	.word	0xfeff8fff
 800918c:	40010000 	.word	0x40010000
 8009190:	40010400 	.word	0x40010400
 8009194:	40014000 	.word	0x40014000
 8009198:	40014400 	.word	0x40014400
 800919c:	40014800 	.word	0x40014800

080091a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4b21      	ldr	r3, [pc, #132]	@ (8009250 <TIM_OC5_SetConfig+0xb0>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <TIM_OC5_SetConfig+0xb4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00f      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <TIM_OC5_SetConfig+0xb8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a16      	ldr	r2, [pc, #88]	@ (800925c <TIM_OC5_SetConfig+0xbc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a15      	ldr	r2, [pc, #84]	@ (8009260 <TIM_OC5_SetConfig+0xc0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a14      	ldr	r2, [pc, #80]	@ (8009264 <TIM_OC5_SetConfig+0xc4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d109      	bne.n	800922a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800921c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	621a      	str	r2, [r3, #32]
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	fffeff8f 	.word	0xfffeff8f
 8009254:	40010000 	.word	0x40010000
 8009258:	40010400 	.word	0x40010400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800

08009268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4b22      	ldr	r3, [pc, #136]	@ (800931c <TIM_OC6_SetConfig+0xb4>)
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <TIM_OC6_SetConfig+0xb8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00f      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a18      	ldr	r2, [pc, #96]	@ (8009324 <TIM_OC6_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a17      	ldr	r2, [pc, #92]	@ (8009328 <TIM_OC6_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a16      	ldr	r2, [pc, #88]	@ (800932c <TIM_OC6_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a15      	ldr	r2, [pc, #84]	@ (8009330 <TIM_OC6_SetConfig+0xc8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d109      	bne.n	80092f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	621a      	str	r2, [r3, #32]
}
 800930e:	bf00      	nop
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	feff8fff 	.word	0xfeff8fff
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400
 8009328:	40014000 	.word	0x40014000
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800

08009334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800935e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 030a 	bic.w	r3, r3, #10
 8009370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	f023 0210 	bic.w	r2, r3, #16
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	031b      	lsls	r3, r3, #12
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4b09      	ldr	r3, [pc, #36]	@ (800942c <TIM_ITRx_SetConfig+0x38>)
 8009408:	4013      	ands	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	f043 0307 	orr.w	r3, r3, #7
 8009416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	609a      	str	r2, [r3, #8]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	ffcfff8f 	.word	0xffcfff8f

08009430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800944a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2201      	movs	r2, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1a      	ldr	r2, [r3, #32]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	43db      	mvns	r3, r3
 8009492:	401a      	ands	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <HAL_TIMEx_PWMN_Start+0x24>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	e022      	b.n	8009526 <HAL_TIMEx_PWMN_Start+0x6a>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d109      	bne.n	80094fa <HAL_TIMEx_PWMN_Start+0x3e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	bf14      	ite	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	2300      	moveq	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	e015      	b.n	8009526 <HAL_TIMEx_PWMN_Start+0x6a>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d109      	bne.n	8009514 <HAL_TIMEx_PWMN_Start+0x58>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	bf14      	ite	ne
 800950c:	2301      	movne	r3, #1
 800950e:	2300      	moveq	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	e008      	b.n	8009526 <HAL_TIMEx_PWMN_Start+0x6a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	bf14      	ite	ne
 8009520:	2301      	movne	r3, #1
 8009522:	2300      	moveq	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e073      	b.n	8009616 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <HAL_TIMEx_PWMN_Start+0x82>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800953c:	e013      	b.n	8009566 <HAL_TIMEx_PWMN_Start+0xaa>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b04      	cmp	r3, #4
 8009542:	d104      	bne.n	800954e <HAL_TIMEx_PWMN_Start+0x92>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800954c:	e00b      	b.n	8009566 <HAL_TIMEx_PWMN_Start+0xaa>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2b08      	cmp	r3, #8
 8009552:	d104      	bne.n	800955e <HAL_TIMEx_PWMN_Start+0xa2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800955c:	e003      	b.n	8009566 <HAL_TIMEx_PWMN_Start+0xaa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2204      	movs	r2, #4
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f990 	bl	8009894 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009582:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a25      	ldr	r2, [pc, #148]	@ (8009620 <HAL_TIMEx_PWMN_Start+0x164>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d022      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009596:	d01d      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a21      	ldr	r2, [pc, #132]	@ (8009624 <HAL_TIMEx_PWMN_Start+0x168>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d018      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a20      	ldr	r2, [pc, #128]	@ (8009628 <HAL_TIMEx_PWMN_Start+0x16c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d013      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1e      	ldr	r2, [pc, #120]	@ (800962c <HAL_TIMEx_PWMN_Start+0x170>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00e      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009630 <HAL_TIMEx_PWMN_Start+0x174>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d009      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009634 <HAL_TIMEx_PWMN_Start+0x178>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d004      	beq.n	80095d4 <HAL_TIMEx_PWMN_Start+0x118>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009638 <HAL_TIMEx_PWMN_Start+0x17c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d115      	bne.n	8009600 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	4b18      	ldr	r3, [pc, #96]	@ (800963c <HAL_TIMEx_PWMN_Start+0x180>)
 80095dc:	4013      	ands	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b06      	cmp	r3, #6
 80095e4:	d015      	beq.n	8009612 <HAL_TIMEx_PWMN_Start+0x156>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ec:	d011      	beq.n	8009612 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0201 	orr.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fe:	e008      	b.n	8009612 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0201 	orr.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	e000      	b.n	8009614 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40010000 	.word	0x40010000
 8009624:	40000400 	.word	0x40000400
 8009628:	40000800 	.word	0x40000800
 800962c:	40000c00 	.word	0x40000c00
 8009630:	40010400 	.word	0x40010400
 8009634:	40001800 	.word	0x40001800
 8009638:	40014000 	.word	0x40014000
 800963c:	00010007 	.word	0x00010007

08009640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009654:	2302      	movs	r3, #2
 8009656:	e06d      	b.n	8009734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a30      	ldr	r2, [pc, #192]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a2f      	ldr	r2, [pc, #188]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d108      	bne.n	800969e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a20      	ldr	r2, [pc, #128]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d022      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ca:	d01d      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009748 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d018      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1c      	ldr	r2, [pc, #112]	@ (800974c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d013      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00e      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a15      	ldr	r2, [pc, #84]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a15      	ldr	r2, [pc, #84]	@ (8009758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d10c      	bne.n	8009722 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800970e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	4313      	orrs	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400
 8009748:	40000400 	.word	0x40000400
 800974c:	40000800 	.word	0x40000800
 8009750:	40000c00 	.word	0x40000c00
 8009754:	40001800 	.word	0x40001800
 8009758:	40014000 	.word	0x40014000

0800975c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009774:	2302      	movs	r3, #2
 8009776:	e065      	b.n	8009844 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	041b      	lsls	r3, r3, #16
 80097ee:	4313      	orrs	r3, r2
 80097f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a16      	ldr	r2, [pc, #88]	@ (8009850 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a14      	ldr	r2, [pc, #80]	@ (8009854 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d115      	bne.n	8009832 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009810:	051b      	lsls	r3, r3, #20
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	40010000 	.word	0x40010000
 8009854:	40010400 	.word	0x40010400

08009858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	2204      	movs	r2, #4
 80098a8:	fa02 f303 	lsl.w	r3, r2, r3
 80098ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a1a      	ldr	r2, [r3, #32]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	43db      	mvns	r3, r3
 80098b6:	401a      	ands	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a1a      	ldr	r2, [r3, #32]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	fa01 f303 	lsl.w	r3, r1, r3
 80098cc:	431a      	orrs	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098e0:	b084      	sub	sp, #16
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	f107 001c 	add.w	r0, r7, #28
 80098ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d121      	bne.n	800993e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	4b2c      	ldr	r3, [pc, #176]	@ (80099bc <USB_CoreInit+0xdc>)
 800990c:	4013      	ands	r3, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800991e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009922:	2b01      	cmp	r3, #1
 8009924:	d105      	bne.n	8009932 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 faf6 	bl	800af24 <USB_CoreReset>
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
 800993c:	e01b      	b.n	8009976 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 faea 	bl	800af24 <USB_CoreReset>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009954:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009958:	2b00      	cmp	r3, #0
 800995a:	d106      	bne.n	800996a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009960:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	639a      	str	r2, [r3, #56]	@ 0x38
 8009968:	e005      	b.n	8009976 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009976:	7fbb      	ldrb	r3, [r7, #30]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d116      	bne.n	80099aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800998a:	4b0d      	ldr	r3, [pc, #52]	@ (80099c0 <USB_CoreInit+0xe0>)
 800998c:	4313      	orrs	r3, r2
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f043 0206 	orr.w	r2, r3, #6
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099b6:	b004      	add	sp, #16
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	ffbdffbf 	.word	0xffbdffbf
 80099c0:	03ee0000 	.word	0x03ee0000

080099c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d165      	bne.n	8009aa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4a41      	ldr	r2, [pc, #260]	@ (8009ae0 <USB_SetTurnaroundTime+0x11c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d906      	bls.n	80099ee <USB_SetTurnaroundTime+0x2a>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	4a40      	ldr	r2, [pc, #256]	@ (8009ae4 <USB_SetTurnaroundTime+0x120>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d202      	bcs.n	80099ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80099e8:	230f      	movs	r3, #15
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	e062      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	4a3c      	ldr	r2, [pc, #240]	@ (8009ae4 <USB_SetTurnaroundTime+0x120>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d306      	bcc.n	8009a04 <USB_SetTurnaroundTime+0x40>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	4a3b      	ldr	r2, [pc, #236]	@ (8009ae8 <USB_SetTurnaroundTime+0x124>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d202      	bcs.n	8009a04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80099fe:	230e      	movs	r3, #14
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e057      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4a38      	ldr	r2, [pc, #224]	@ (8009ae8 <USB_SetTurnaroundTime+0x124>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d306      	bcc.n	8009a1a <USB_SetTurnaroundTime+0x56>
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4a37      	ldr	r2, [pc, #220]	@ (8009aec <USB_SetTurnaroundTime+0x128>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d202      	bcs.n	8009a1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a14:	230d      	movs	r3, #13
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	e04c      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4a33      	ldr	r2, [pc, #204]	@ (8009aec <USB_SetTurnaroundTime+0x128>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d306      	bcc.n	8009a30 <USB_SetTurnaroundTime+0x6c>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4a32      	ldr	r2, [pc, #200]	@ (8009af0 <USB_SetTurnaroundTime+0x12c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d802      	bhi.n	8009a30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	e041      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4a2f      	ldr	r2, [pc, #188]	@ (8009af0 <USB_SetTurnaroundTime+0x12c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d906      	bls.n	8009a46 <USB_SetTurnaroundTime+0x82>
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8009af4 <USB_SetTurnaroundTime+0x130>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d802      	bhi.n	8009a46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a40:	230b      	movs	r3, #11
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	e036      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	4a2a      	ldr	r2, [pc, #168]	@ (8009af4 <USB_SetTurnaroundTime+0x130>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d906      	bls.n	8009a5c <USB_SetTurnaroundTime+0x98>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	4a29      	ldr	r2, [pc, #164]	@ (8009af8 <USB_SetTurnaroundTime+0x134>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d802      	bhi.n	8009a5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009a56:	230a      	movs	r3, #10
 8009a58:	617b      	str	r3, [r7, #20]
 8009a5a:	e02b      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4a26      	ldr	r2, [pc, #152]	@ (8009af8 <USB_SetTurnaroundTime+0x134>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d906      	bls.n	8009a72 <USB_SetTurnaroundTime+0xae>
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4a25      	ldr	r2, [pc, #148]	@ (8009afc <USB_SetTurnaroundTime+0x138>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d202      	bcs.n	8009a72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009a6c:	2309      	movs	r3, #9
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e020      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4a21      	ldr	r2, [pc, #132]	@ (8009afc <USB_SetTurnaroundTime+0x138>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d306      	bcc.n	8009a88 <USB_SetTurnaroundTime+0xc4>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4a20      	ldr	r2, [pc, #128]	@ (8009b00 <USB_SetTurnaroundTime+0x13c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d802      	bhi.n	8009a88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009a82:	2308      	movs	r3, #8
 8009a84:	617b      	str	r3, [r7, #20]
 8009a86:	e015      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009b00 <USB_SetTurnaroundTime+0x13c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d906      	bls.n	8009a9e <USB_SetTurnaroundTime+0xda>
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4a1c      	ldr	r2, [pc, #112]	@ (8009b04 <USB_SetTurnaroundTime+0x140>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d202      	bcs.n	8009a9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a98:	2307      	movs	r3, #7
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	e00a      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a9e:	2306      	movs	r3, #6
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	e007      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009aaa:	2309      	movs	r3, #9
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	e001      	b.n	8009ab4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009ab0:	2309      	movs	r3, #9
 8009ab2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	029b      	lsls	r3, r3, #10
 8009ac8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009acc:	431a      	orrs	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	00d8acbf 	.word	0x00d8acbf
 8009ae4:	00e4e1c0 	.word	0x00e4e1c0
 8009ae8:	00f42400 	.word	0x00f42400
 8009aec:	01067380 	.word	0x01067380
 8009af0:	011a499f 	.word	0x011a499f
 8009af4:	01312cff 	.word	0x01312cff
 8009af8:	014ca43f 	.word	0x014ca43f
 8009afc:	016e3600 	.word	0x016e3600
 8009b00:	01a6ab1f 	.word	0x01a6ab1f
 8009b04:	01e84800 	.word	0x01e84800

08009b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f043 0201 	orr.w	r2, r3, #1
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f023 0201 	bic.w	r2, r3, #1
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b68:	78fb      	ldrb	r3, [r7, #3]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d115      	bne.n	8009b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b7a:	200a      	movs	r0, #10
 8009b7c:	f7f8 fa14 	bl	8001fa8 <HAL_Delay>
      ms += 10U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	330a      	adds	r3, #10
 8009b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f93b 	bl	800ae02 <USB_GetMode>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d01e      	beq.n	8009bd0 <USB_SetCurrentMode+0x84>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b96:	d9f0      	bls.n	8009b7a <USB_SetCurrentMode+0x2e>
 8009b98:	e01a      	b.n	8009bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d115      	bne.n	8009bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bac:	200a      	movs	r0, #10
 8009bae:	f7f8 f9fb 	bl	8001fa8 <HAL_Delay>
      ms += 10U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	330a      	adds	r3, #10
 8009bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 f922 	bl	800ae02 <USB_GetMode>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <USB_SetCurrentMode+0x84>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009bc8:	d9f0      	bls.n	8009bac <USB_SetCurrentMode+0x60>
 8009bca:	e001      	b.n	8009bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e005      	b.n	8009bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009bd4:	d101      	bne.n	8009bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009be4:	b084      	sub	sp, #16
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	e009      	b.n	8009c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	3340      	adds	r3, #64	@ 0x40
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3301      	adds	r3, #1
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2b0e      	cmp	r3, #14
 8009c1c:	d9f2      	bls.n	8009c04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d11c      	bne.n	8009c60 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c34:	f043 0302 	orr.w	r3, r3, #2
 8009c38:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e005      	b.n	8009c6c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009c72:	461a      	mov	r2, r3
 8009c74:	2300      	movs	r3, #0
 8009c76:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d10d      	bne.n	8009c9c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d104      	bne.n	8009c92 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f968 	bl	8009f60 <USB_SetDevSpeed>
 8009c90:	e008      	b.n	8009ca4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009c92:	2101      	movs	r1, #1
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f963 	bl	8009f60 <USB_SetDevSpeed>
 8009c9a:	e003      	b.n	8009ca4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009c9c:	2103      	movs	r1, #3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f95e 	bl	8009f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ca4:	2110      	movs	r1, #16
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f8fa 	bl	8009ea0 <USB_FlushTxFifo>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f924 	bl	8009f04 <USB_FlushRxFifo>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd8:	461a      	mov	r2, r3
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cea:	2300      	movs	r3, #0
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	e043      	b.n	8009d78 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d06:	d118      	bne.n	8009d3a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	e013      	b.n	8009d4c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d30:	461a      	mov	r2, r3
 8009d32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	e008      	b.n	8009d4c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d46:	461a      	mov	r2, r3
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d3b5      	bcc.n	8009cf0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d84:	2300      	movs	r3, #0
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	e043      	b.n	8009e12 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009da0:	d118      	bne.n	8009dd4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10a      	bne.n	8009dbe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db4:	461a      	mov	r2, r3
 8009db6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	e013      	b.n	8009de6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	e008      	b.n	8009de6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de0:	461a      	mov	r2, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df2:	461a      	mov	r2, r3
 8009df4:	2300      	movs	r3, #0
 8009df6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e04:	461a      	mov	r2, r3
 8009e06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	613b      	str	r3, [r7, #16]
 8009e12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e16:	461a      	mov	r2, r3
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d3b5      	bcc.n	8009d8a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e30:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e3e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d105      	bne.n	8009e54 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	f043 0210 	orr.w	r2, r3, #16
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	4b0f      	ldr	r3, [pc, #60]	@ (8009e98 <USB_DevInit+0x2b4>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009e60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	f043 0208 	orr.w	r2, r3, #8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009e74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d105      	bne.n	8009e88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	699a      	ldr	r2, [r3, #24]
 8009e80:	4b06      	ldr	r3, [pc, #24]	@ (8009e9c <USB_DevInit+0x2b8>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e94:	b004      	add	sp, #16
 8009e96:	4770      	bx	lr
 8009e98:	803c3800 	.word	0x803c3800
 8009e9c:	40000004 	.word	0x40000004

08009ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009eba:	d901      	bls.n	8009ec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e01b      	b.n	8009ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	daf2      	bge.n	8009eae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	019b      	lsls	r3, r3, #6
 8009ed0:	f043 0220 	orr.w	r2, r3, #32
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3301      	adds	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ee4:	d901      	bls.n	8009eea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e006      	b.n	8009ef8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	d0f0      	beq.n	8009ed8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f1c:	d901      	bls.n	8009f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e018      	b.n	8009f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	daf2      	bge.n	8009f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2210      	movs	r2, #16
 8009f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f40:	d901      	bls.n	8009f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e006      	b.n	8009f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b10      	cmp	r3, #16
 8009f50:	d0f0      	beq.n	8009f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f80:	4313      	orrs	r3, r2
 8009f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b087      	sub	sp, #28
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f003 0306 	and.w	r3, r3, #6
 8009faa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	75fb      	strb	r3, [r7, #23]
 8009fb6:	e00a      	b.n	8009fce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d002      	beq.n	8009fc4 <USB_GetDevSpeed+0x32>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b06      	cmp	r3, #6
 8009fc2:	d102      	bne.n	8009fca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	75fb      	strb	r3, [r7, #23]
 8009fc8:	e001      	b.n	8009fce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009fca:	230f      	movs	r3, #15
 8009fcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d139      	bne.n	800a06c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	f003 030f 	and.w	r3, r3, #15
 800a008:	2101      	movs	r1, #1
 800a00a:	fa01 f303 	lsl.w	r3, r1, r3
 800a00e:	b29b      	uxth	r3, r3
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a016:	4313      	orrs	r3, r2
 800a018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d153      	bne.n	800a0d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	791b      	ldrb	r3, [r3, #4]
 800a04a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a04c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	059b      	lsls	r3, r3, #22
 800a052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a054:	431a      	orrs	r2, r3
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	0159      	lsls	r1, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	440b      	add	r3, r1
 800a05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a062:	4619      	mov	r1, r3
 800a064:	4b20      	ldr	r3, [pc, #128]	@ (800a0e8 <USB_ActivateEndpoint+0x10c>)
 800a066:	4313      	orrs	r3, r2
 800a068:	600b      	str	r3, [r1, #0]
 800a06a:	e035      	b.n	800a0d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	f003 030f 	and.w	r3, r3, #15
 800a07c:	2101      	movs	r1, #1
 800a07e:	fa01 f303 	lsl.w	r3, r1, r3
 800a082:	041b      	lsls	r3, r3, #16
 800a084:	68f9      	ldr	r1, [r7, #12]
 800a086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a08a:	4313      	orrs	r3, r2
 800a08c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d119      	bne.n	800a0d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	0159      	lsls	r1, r3, #5
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	440b      	add	r3, r1
 800a0cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4b05      	ldr	r3, [pc, #20]	@ (800a0e8 <USB_ActivateEndpoint+0x10c>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	10008000 	.word	0x10008000

0800a0ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d161      	bne.n	800a1cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a11a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a11e:	d11f      	bne.n	800a160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	015a      	lsls	r2, r3, #5
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4413      	add	r3, r2
 800a128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	0151      	lsls	r1, r2, #5
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	440a      	add	r2, r1
 800a136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a13a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a13e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	015a      	lsls	r2, r3, #5
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4413      	add	r3, r2
 800a148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a15a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a15e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	2101      	movs	r1, #1
 800a172:	fa01 f303 	lsl.w	r3, r1, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	43db      	mvns	r3, r3
 800a17a:	68f9      	ldr	r1, [r7, #12]
 800a17c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a180:	4013      	ands	r3, r2
 800a182:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	2101      	movs	r1, #1
 800a196:	fa01 f303 	lsl.w	r3, r1, r3
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	43db      	mvns	r3, r3
 800a19e:	68f9      	ldr	r1, [r7, #12]
 800a1a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	0159      	lsls	r1, r3, #5
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	440b      	add	r3, r1
 800a1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4b35      	ldr	r3, [pc, #212]	@ (800a29c <USB_DeactivateEndpoint+0x1b0>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	600b      	str	r3, [r1, #0]
 800a1ca:	e060      	b.n	800a28e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1e2:	d11f      	bne.n	800a224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	0151      	lsls	r1, r2, #5
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	440a      	add	r2, r1
 800a21a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a21e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	2101      	movs	r1, #1
 800a236:	fa01 f303 	lsl.w	r3, r1, r3
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	43db      	mvns	r3, r3
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a244:	4013      	ands	r3, r2
 800a246:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	2101      	movs	r1, #1
 800a25a:	fa01 f303 	lsl.w	r3, r1, r3
 800a25e:	041b      	lsls	r3, r3, #16
 800a260:	43db      	mvns	r3, r3
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a268:	4013      	ands	r3, r2
 800a26a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	0159      	lsls	r1, r3, #5
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	440b      	add	r3, r1
 800a282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a286:	4619      	mov	r1, r3
 800a288:	4b05      	ldr	r3, [pc, #20]	@ (800a2a0 <USB_DeactivateEndpoint+0x1b4>)
 800a28a:	4013      	ands	r3, r2
 800a28c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	ec337800 	.word	0xec337800
 800a2a0:	eff37800 	.word	0xeff37800

0800a2a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08a      	sub	sp, #40	@ 0x28
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	785b      	ldrb	r3, [r3, #1]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 8181 	bne.w	800a5c8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d132      	bne.n	800a334 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	0159      	lsls	r1, r3, #5
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	440b      	add	r3, r1
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4ba5      	ldr	r3, [pc, #660]	@ (800a580 <USB_EPStartXfer+0x2dc>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a30a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a30e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	0159      	lsls	r1, r3, #5
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	440b      	add	r3, r1
 800a326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32a:	4619      	mov	r1, r3
 800a32c:	4b95      	ldr	r3, [pc, #596]	@ (800a584 <USB_EPStartXfer+0x2e0>)
 800a32e:	4013      	ands	r3, r2
 800a330:	610b      	str	r3, [r1, #16]
 800a332:	e092      	b.n	800a45a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	015a      	lsls	r2, r3, #5
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a340:	691a      	ldr	r2, [r3, #16]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	0159      	lsls	r1, r3, #5
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	440b      	add	r3, r1
 800a34a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34e:	4619      	mov	r1, r3
 800a350:	4b8c      	ldr	r3, [pc, #560]	@ (800a584 <USB_EPStartXfer+0x2e0>)
 800a352:	4013      	ands	r3, r2
 800a354:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	0159      	lsls	r1, r3, #5
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	440b      	add	r3, r1
 800a36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a370:	4619      	mov	r1, r3
 800a372:	4b83      	ldr	r3, [pc, #524]	@ (800a580 <USB_EPStartXfer+0x2dc>)
 800a374:	4013      	ands	r3, r2
 800a376:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d11a      	bne.n	800a3b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	d903      	bls.n	800a392 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	69ba      	ldr	r2, [r7, #24]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3b0:	6113      	str	r3, [r2, #16]
 800a3b2:	e01b      	b.n	800a3ec <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6919      	ldr	r1, [r3, #16]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	440b      	add	r3, r1
 800a3cc:	1e59      	subs	r1, r3, #1
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a3d6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a3d8:	4b6b      	ldr	r3, [pc, #428]	@ (800a588 <USB_EPStartXfer+0x2e4>)
 800a3da:	400b      	ands	r3, r1
 800a3dc:	69b9      	ldr	r1, [r7, #24]
 800a3de:	0148      	lsls	r0, r1, #5
 800a3e0:	69f9      	ldr	r1, [r7, #28]
 800a3e2:	4401      	add	r1, r0
 800a3e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f8:	691a      	ldr	r2, [r3, #16]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a402:	69b9      	ldr	r1, [r7, #24]
 800a404:	0148      	lsls	r0, r1, #5
 800a406:	69f9      	ldr	r1, [r7, #28]
 800a408:	4401      	add	r1, r0
 800a40a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a40e:	4313      	orrs	r3, r2
 800a410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	791b      	ldrb	r3, [r3, #4]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d11f      	bne.n	800a45a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a434:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a454:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d14b      	bne.n	800a4f8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d009      	beq.n	800a47c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	461a      	mov	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	791b      	ldrb	r3, [r3, #4]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d128      	bne.n	800a4d6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a490:	2b00      	cmp	r3, #0
 800a492:	d110      	bne.n	800a4b6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	0151      	lsls	r1, r2, #5
 800a4a6:	69fa      	ldr	r2, [r7, #28]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	e00f      	b.n	800a4d6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	69fa      	ldr	r2, [r7, #28]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	e16a      	b.n	800a7ce <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a512:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	791b      	ldrb	r3, [r3, #4]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d015      	beq.n	800a54c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 8152 	beq.w	800a7ce <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 030f 	and.w	r3, r3, #15
 800a53a:	2101      	movs	r1, #1
 800a53c:	fa01 f303 	lsl.w	r3, r1, r3
 800a540:	69f9      	ldr	r1, [r7, #28]
 800a542:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a546:	4313      	orrs	r3, r2
 800a548:	634b      	str	r3, [r1, #52]	@ 0x34
 800a54a:	e140      	b.n	800a7ce <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d117      	bne.n	800a58c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	0151      	lsls	r1, r2, #5
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	440a      	add	r2, r1
 800a572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a576:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	e016      	b.n	800a5ac <USB_EPStartXfer+0x308>
 800a57e:	bf00      	nop
 800a580:	e007ffff 	.word	0xe007ffff
 800a584:	fff80000 	.word	0xfff80000
 800a588:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	0151      	lsls	r1, r2, #5
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	440a      	add	r2, r1
 800a5a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	68d9      	ldr	r1, [r3, #12]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	b298      	uxth	r0, r3
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	4603      	mov	r3, r0
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f9b9 	bl	800a938 <USB_WritePacket>
 800a5c6:	e102      	b.n	800a7ce <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	0159      	lsls	r1, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	440b      	add	r3, r1
 800a5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4b7c      	ldr	r3, [pc, #496]	@ (800a7d8 <USB_EPStartXfer+0x534>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	0159      	lsls	r1, r3, #5
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	440b      	add	r3, r1
 800a600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a604:	4619      	mov	r1, r3
 800a606:	4b75      	ldr	r3, [pc, #468]	@ (800a7dc <USB_EPStartXfer+0x538>)
 800a608:	4013      	ands	r3, r2
 800a60a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d12f      	bne.n	800a672 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a636:	691a      	ldr	r2, [r3, #16]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a640:	69b9      	ldr	r1, [r7, #24]
 800a642:	0148      	lsls	r0, r1, #5
 800a644:	69f9      	ldr	r1, [r7, #28]
 800a646:	4401      	add	r1, r0
 800a648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a64c:	4313      	orrs	r3, r2
 800a64e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	440a      	add	r2, r1
 800a666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a66e:	6113      	str	r3, [r2, #16]
 800a670:	e05f      	b.n	800a732 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d123      	bne.n	800a6c2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a690:	69b9      	ldr	r1, [r7, #24]
 800a692:	0148      	lsls	r0, r1, #5
 800a694:	69f9      	ldr	r1, [r7, #28]
 800a696:	4401      	add	r1, r0
 800a698:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a69c:	4313      	orrs	r3, r2
 800a69e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	0151      	lsls	r1, r2, #5
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6be:	6113      	str	r3, [r2, #16]
 800a6c0:	e037      	b.n	800a732 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	691a      	ldr	r2, [r3, #16]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	8afa      	ldrh	r2, [r7, #22]
 800a6de:	fb03 f202 	mul.w	r2, r3, r2
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	8afb      	ldrh	r3, [r7, #22]
 800a6f6:	04d9      	lsls	r1, r3, #19
 800a6f8:	4b39      	ldr	r3, [pc, #228]	@ (800a7e0 <USB_EPStartXfer+0x53c>)
 800a6fa:	400b      	ands	r3, r1
 800a6fc:	69b9      	ldr	r1, [r7, #24]
 800a6fe:	0148      	lsls	r0, r1, #5
 800a700:	69f9      	ldr	r1, [r7, #28]
 800a702:	4401      	add	r1, r0
 800a704:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a708:	4313      	orrs	r3, r2
 800a70a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a718:	691a      	ldr	r2, [r3, #16]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a722:	69b9      	ldr	r1, [r7, #24]
 800a724:	0148      	lsls	r0, r1, #5
 800a726:	69f9      	ldr	r1, [r7, #28]
 800a728:	4401      	add	r1, r0
 800a72a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a72e:	4313      	orrs	r3, r2
 800a730:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10d      	bne.n	800a754 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	68d9      	ldr	r1, [r3, #12]
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a750:	460a      	mov	r2, r1
 800a752:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	791b      	ldrb	r3, [r3, #4]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d128      	bne.n	800a7ae <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d110      	bne.n	800a78e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	0151      	lsls	r1, r2, #5
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	440a      	add	r2, r1
 800a782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a786:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	e00f      	b.n	800a7ae <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	fff80000 	.word	0xfff80000
 800a7dc:	e007ffff 	.word	0xe007ffff
 800a7e0:	1ff80000 	.word	0x1ff80000

0800a7e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	785b      	ldrb	r3, [r3, #1]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d14a      	bne.n	800a898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a81a:	f040 8086 	bne.w	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a83c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a872:	4293      	cmp	r3, r2
 800a874:	d902      	bls.n	800a87c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
          break;
 800a87a:	e056      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a894:	d0e7      	beq.n	800a866 <USB_EPStopXfer+0x82>
 800a896:	e048      	b.n	800a92a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b0:	d13b      	bne.n	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	0151      	lsls	r1, r2, #5
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	440a      	add	r2, r1
 800a8cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	7812      	ldrb	r2, [r2, #0]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a906:	4293      	cmp	r3, r2
 800a908:	d902      	bls.n	800a910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	75fb      	strb	r3, [r7, #23]
          break;
 800a90e:	e00c      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a928:	d0e7      	beq.n	800a8fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a938:	b480      	push	{r7}
 800a93a:	b089      	sub	sp, #36	@ 0x24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4611      	mov	r1, r2
 800a944:	461a      	mov	r2, r3
 800a946:	460b      	mov	r3, r1
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a956:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d123      	bne.n	800a9a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a95e:	88bb      	ldrh	r3, [r7, #4]
 800a960:	3303      	adds	r3, #3
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a966:	2300      	movs	r3, #0
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e018      	b.n	800a99e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	031a      	lsls	r2, r3, #12
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	4413      	add	r3, r2
 800a974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a978:	461a      	mov	r2, r3
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	3301      	adds	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	3301      	adds	r3, #1
 800a990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	3301      	adds	r3, #1
 800a996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	3301      	adds	r3, #1
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d3e2      	bcc.n	800a96c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3724      	adds	r7, #36	@ 0x24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b08b      	sub	sp, #44	@ 0x2c
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	089b      	lsrs	r3, r3, #2
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9da:	2300      	movs	r3, #0
 800a9dc:	623b      	str	r3, [r7, #32]
 800a9de:	e014      	b.n	800aa0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa00:	3301      	adds	r3, #1
 800aa02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	3301      	adds	r3, #1
 800aa08:	623b      	str	r3, [r7, #32]
 800aa0a:	6a3a      	ldr	r2, [r7, #32]
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d3e6      	bcc.n	800a9e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa12:	8bfb      	ldrh	r3, [r7, #30]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01e      	beq.n	800aa56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa22:	461a      	mov	r2, r3
 800aa24:	f107 0310 	add.w	r3, r7, #16
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	701a      	strb	r2, [r3, #0]
      i++;
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	3301      	adds	r3, #1
 800aa42:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	3301      	adds	r3, #1
 800aa48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa4a:	8bfb      	ldrh	r3, [r7, #30]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa50:	8bfb      	ldrh	r3, [r7, #30]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1ea      	bne.n	800aa2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	372c      	adds	r7, #44	@ 0x2c
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	785b      	ldrb	r3, [r3, #1]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d12c      	bne.n	800aada <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	db12      	blt.n	800aab8 <USB_EPSetStall+0x54>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00f      	beq.n	800aab8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aab6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e02b      	b.n	800ab32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db12      	blt.n	800ab12 <USB_EPSetStall+0xae>
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00f      	beq.n	800ab12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	015a      	lsls	r2, r3, #5
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	0151      	lsls	r1, r2, #5
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	440a      	add	r2, r1
 800ab28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d128      	bne.n	800abae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	791b      	ldrb	r3, [r3, #4]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d003      	beq.n	800ab8c <USB_EPClearStall+0x4c>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	791b      	ldrb	r3, [r3, #4]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d138      	bne.n	800abfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	0151      	lsls	r1, r2, #5
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	440a      	add	r2, r1
 800aba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	e027      	b.n	800abfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	015a      	lsls	r2, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	0151      	lsls	r1, r2, #5
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	440a      	add	r2, r1
 800abc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d003      	beq.n	800abde <USB_EPClearStall+0x9e>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d10f      	bne.n	800abfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	0151      	lsls	r1, r2, #5
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	440a      	add	r2, r1
 800abf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac40:	68f9      	ldr	r1, [r7, #12]
 800ac42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac46:	4313      	orrs	r3, r2
 800ac48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac86:	f023 0302 	bic.w	r3, r3, #2
 800ac8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b085      	sub	sp, #20
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acb4:	f023 0303 	bic.w	r3, r3, #3
 800acb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acc8:	f043 0302 	orr.w	r3, r3, #2
 800accc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4013      	ands	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acf4:	68fb      	ldr	r3, [r7, #12]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b085      	sub	sp, #20
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	4013      	ands	r3, r2
 800ad24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	0c1b      	lsrs	r3, r3, #16
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b085      	sub	sp, #20
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	4013      	ands	r3, r2
 800ad58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	b29b      	uxth	r3, r3
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4013      	ands	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad98:	68bb      	ldr	r3, [r7, #8]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b087      	sub	sp, #28
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	01db      	lsls	r3, r3, #7
 800add8:	b2db      	uxtb	r3, r3
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	4013      	ands	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adf4:	68bb      	ldr	r3, [r7, #8]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	f003 0301 	and.w	r3, r3, #1
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <USB_ActivateSetup+0x44>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	fffff800 	.word	0xfffff800

0800ae68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	333c      	adds	r3, #60	@ 0x3c
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	4a26      	ldr	r2, [pc, #152]	@ (800af20 <USB_EP0_OutStart+0xb8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d90a      	bls.n	800aea2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae9c:	d101      	bne.n	800aea2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e037      	b.n	800af12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aea8:	461a      	mov	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aebc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed0:	f043 0318 	orr.w	r3, r3, #24
 800aed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aee4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aee8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aeea:	7afb      	ldrb	r3, [r7, #11]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d10f      	bne.n	800af10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef6:	461a      	mov	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af0a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	4f54300a 	.word	0x4f54300a

0800af24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af3c:	d901      	bls.n	800af42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e01b      	b.n	800af7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	daf2      	bge.n	800af30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	f043 0201 	orr.w	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3301      	adds	r3, #1
 800af5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af66:	d901      	bls.n	800af6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e006      	b.n	800af7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b01      	cmp	r3, #1
 800af76:	d0f0      	beq.n	800af5a <USB_CoreReset+0x36>

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af98:	f005 fb2a 	bl	80105f0 <USBD_static_malloc>
 800af9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d109      	bne.n	800afb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	32b0      	adds	r2, #176	@ 0xb0
 800afae:	2100      	movs	r1, #0
 800afb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800afb4:	2302      	movs	r3, #2
 800afb6:	e0d4      	b.n	800b162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800afb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800afbc:	2100      	movs	r1, #0
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f007 ff93 	bl	8012eea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	32b0      	adds	r2, #176	@ 0xb0
 800afce:	68f9      	ldr	r1, [r7, #12]
 800afd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	32b0      	adds	r2, #176	@ 0xb0
 800afde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	7c1b      	ldrb	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d138      	bne.n	800b062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aff0:	4b5e      	ldr	r3, [pc, #376]	@ (800b16c <USBD_CDC_Init+0x1e4>)
 800aff2:	7819      	ldrb	r1, [r3, #0]
 800aff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aff8:	2202      	movs	r2, #2
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f005 f9d5 	bl	80103aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b000:	4b5a      	ldr	r3, [pc, #360]	@ (800b16c <USBD_CDC_Init+0x1e4>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	f003 020f 	and.w	r2, r3, #15
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	3324      	adds	r3, #36	@ 0x24
 800b016:	2201      	movs	r2, #1
 800b018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b01a:	4b55      	ldr	r3, [pc, #340]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b01c:	7819      	ldrb	r1, [r3, #0]
 800b01e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b022:	2202      	movs	r2, #2
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f005 f9c0 	bl	80103aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b02a:	4b51      	ldr	r3, [pc, #324]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 020f 	and.w	r2, r3, #15
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	440b      	add	r3, r1
 800b03e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b042:	2201      	movs	r2, #1
 800b044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b046:	4b4b      	ldr	r3, [pc, #300]	@ (800b174 <USBD_CDC_Init+0x1ec>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 020f 	and.w	r2, r3, #15
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	3326      	adds	r3, #38	@ 0x26
 800b05c:	2210      	movs	r2, #16
 800b05e:	801a      	strh	r2, [r3, #0]
 800b060:	e035      	b.n	800b0ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b062:	4b42      	ldr	r3, [pc, #264]	@ (800b16c <USBD_CDC_Init+0x1e4>)
 800b064:	7819      	ldrb	r1, [r3, #0]
 800b066:	2340      	movs	r3, #64	@ 0x40
 800b068:	2202      	movs	r2, #2
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f005 f99d 	bl	80103aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b070:	4b3e      	ldr	r3, [pc, #248]	@ (800b16c <USBD_CDC_Init+0x1e4>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	f003 020f 	and.w	r2, r3, #15
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	440b      	add	r3, r1
 800b084:	3324      	adds	r3, #36	@ 0x24
 800b086:	2201      	movs	r2, #1
 800b088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b08a:	4b39      	ldr	r3, [pc, #228]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b08c:	7819      	ldrb	r1, [r3, #0]
 800b08e:	2340      	movs	r3, #64	@ 0x40
 800b090:	2202      	movs	r2, #2
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f005 f989 	bl	80103aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b098:	4b35      	ldr	r3, [pc, #212]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	f003 020f 	and.w	r2, r3, #15
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	440b      	add	r3, r1
 800b0ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0b4:	4b2f      	ldr	r3, [pc, #188]	@ (800b174 <USBD_CDC_Init+0x1ec>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 020f 	and.w	r2, r3, #15
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	440b      	add	r3, r1
 800b0c8:	3326      	adds	r3, #38	@ 0x26
 800b0ca:	2210      	movs	r2, #16
 800b0cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0ce:	4b29      	ldr	r3, [pc, #164]	@ (800b174 <USBD_CDC_Init+0x1ec>)
 800b0d0:	7819      	ldrb	r1, [r3, #0]
 800b0d2:	2308      	movs	r3, #8
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f005 f967 	bl	80103aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b0dc:	4b25      	ldr	r3, [pc, #148]	@ (800b174 <USBD_CDC_Init+0x1ec>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 020f 	and.w	r2, r3, #15
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	3324      	adds	r3, #36	@ 0x24
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	33b0      	adds	r3, #176	@ 0xb0
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b12c:	2302      	movs	r3, #2
 800b12e:	e018      	b.n	800b162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7c1b      	ldrb	r3, [r3, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b138:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b13a:	7819      	ldrb	r1, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f005 fa1e 	bl	8010588 <USBD_LL_PrepareReceive>
 800b14c:	e008      	b.n	800b160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b14e:	4b08      	ldr	r3, [pc, #32]	@ (800b170 <USBD_CDC_Init+0x1e8>)
 800b150:	7819      	ldrb	r1, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b158:	2340      	movs	r3, #64	@ 0x40
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f005 fa14 	bl	8010588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	24000097 	.word	0x24000097
 800b170:	24000098 	.word	0x24000098
 800b174:	24000099 	.word	0x24000099

0800b178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b184:	4b3a      	ldr	r3, [pc, #232]	@ (800b270 <USBD_CDC_DeInit+0xf8>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f005 f933 	bl	80103f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b190:	4b37      	ldr	r3, [pc, #220]	@ (800b270 <USBD_CDC_DeInit+0xf8>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	f003 020f 	and.w	r2, r3, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3324      	adds	r3, #36	@ 0x24
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b1aa:	4b32      	ldr	r3, [pc, #200]	@ (800b274 <USBD_CDC_DeInit+0xfc>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f005 f920 	bl	80103f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b1b6:	4b2f      	ldr	r3, [pc, #188]	@ (800b274 <USBD_CDC_DeInit+0xfc>)
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	f003 020f 	and.w	r2, r3, #15
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b1d2:	4b29      	ldr	r3, [pc, #164]	@ (800b278 <USBD_CDC_DeInit+0x100>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f005 f90c 	bl	80103f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b1de:	4b26      	ldr	r3, [pc, #152]	@ (800b278 <USBD_CDC_DeInit+0x100>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 020f 	and.w	r2, r3, #15
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	3324      	adds	r3, #36	@ 0x24
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1f8:	4b1f      	ldr	r3, [pc, #124]	@ (800b278 <USBD_CDC_DeInit+0x100>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	3326      	adds	r3, #38	@ 0x26
 800b20e:	2200      	movs	r2, #0
 800b210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	32b0      	adds	r2, #176	@ 0xb0
 800b21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01f      	beq.n	800b264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	33b0      	adds	r3, #176	@ 0xb0
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	32b0      	adds	r2, #176	@ 0xb0
 800b242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b246:	4618      	mov	r0, r3
 800b248:	f005 f9e0 	bl	801060c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32b0      	adds	r2, #176	@ 0xb0
 800b256:	2100      	movs	r1, #0
 800b258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	24000097 	.word	0x24000097
 800b274:	24000098 	.word	0x24000098
 800b278:	24000099 	.word	0x24000099

0800b27c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	32b0      	adds	r2, #176	@ 0xb0
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e0bf      	b.n	800b42c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d050      	beq.n	800b35a <USBD_CDC_Setup+0xde>
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	f040 80af 	bne.w	800b41c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	88db      	ldrh	r3, [r3, #6]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03a      	beq.n	800b33c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b25b      	sxtb	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	da1b      	bge.n	800b308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	33b0      	adds	r3, #176	@ 0xb0
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	88d2      	ldrh	r2, [r2, #6]
 800b2ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	88db      	ldrh	r3, [r3, #6]
 800b2f2:	2b07      	cmp	r3, #7
 800b2f4:	bf28      	it	cs
 800b2f6:	2307      	movcs	r3, #7
 800b2f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	89fa      	ldrh	r2, [r7, #14]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fdbd 	bl	800ce80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b306:	e090      	b.n	800b42a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	785a      	ldrb	r2, [r3, #1]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	88db      	ldrh	r3, [r3, #6]
 800b316:	2b3f      	cmp	r3, #63	@ 0x3f
 800b318:	d803      	bhi.n	800b322 <USBD_CDC_Setup+0xa6>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	88db      	ldrh	r3, [r3, #6]
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	e000      	b.n	800b324 <USBD_CDC_Setup+0xa8>
 800b322:	2240      	movs	r2, #64	@ 0x40
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b32a:	6939      	ldr	r1, [r7, #16]
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b332:	461a      	mov	r2, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fdcf 	bl	800ced8 <USBD_CtlPrepareRx>
      break;
 800b33a:	e076      	b.n	800b42a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	33b0      	adds	r3, #176	@ 0xb0
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	7850      	ldrb	r0, [r2, #1]
 800b352:	2200      	movs	r2, #0
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	4798      	blx	r3
      break;
 800b358:	e067      	b.n	800b42a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	785b      	ldrb	r3, [r3, #1]
 800b35e:	2b0b      	cmp	r3, #11
 800b360:	d851      	bhi.n	800b406 <USBD_CDC_Setup+0x18a>
 800b362:	a201      	add	r2, pc, #4	@ (adr r2, 800b368 <USBD_CDC_Setup+0xec>)
 800b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b368:	0800b399 	.word	0x0800b399
 800b36c:	0800b415 	.word	0x0800b415
 800b370:	0800b407 	.word	0x0800b407
 800b374:	0800b407 	.word	0x0800b407
 800b378:	0800b407 	.word	0x0800b407
 800b37c:	0800b407 	.word	0x0800b407
 800b380:	0800b407 	.word	0x0800b407
 800b384:	0800b407 	.word	0x0800b407
 800b388:	0800b407 	.word	0x0800b407
 800b38c:	0800b407 	.word	0x0800b407
 800b390:	0800b3c3 	.word	0x0800b3c3
 800b394:	0800b3ed 	.word	0x0800b3ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d107      	bne.n	800b3b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b3a4:	f107 030a 	add.w	r3, r7, #10
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fd67 	bl	800ce80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3b2:	e032      	b.n	800b41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f001 fce5 	bl	800cd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	75fb      	strb	r3, [r7, #23]
          break;
 800b3c0:	e02b      	b.n	800b41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d107      	bne.n	800b3de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3ce:	f107 030d 	add.w	r3, r7, #13
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fd52 	bl	800ce80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3dc:	e01d      	b.n	800b41a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 fcd0 	bl	800cd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	75fb      	strb	r3, [r7, #23]
          break;
 800b3ea:	e016      	b.n	800b41a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d00f      	beq.n	800b418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fcc3 	bl	800cd86 <USBD_CtlError>
            ret = USBD_FAIL;
 800b400:	2303      	movs	r3, #3
 800b402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b404:	e008      	b.n	800b418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 fcbc 	bl	800cd86 <USBD_CtlError>
          ret = USBD_FAIL;
 800b40e:	2303      	movs	r3, #3
 800b410:	75fb      	strb	r3, [r7, #23]
          break;
 800b412:	e002      	b.n	800b41a <USBD_CDC_Setup+0x19e>
          break;
 800b414:	bf00      	nop
 800b416:	e008      	b.n	800b42a <USBD_CDC_Setup+0x1ae>
          break;
 800b418:	bf00      	nop
      }
      break;
 800b41a:	e006      	b.n	800b42a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f001 fcb1 	bl	800cd86 <USBD_CtlError>
      ret = USBD_FAIL;
 800b424:	2303      	movs	r3, #3
 800b426:	75fb      	strb	r3, [r7, #23]
      break;
 800b428:	bf00      	nop
  }

  return (uint8_t)ret;
 800b42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32b0      	adds	r2, #176	@ 0xb0
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e065      	b.n	800b52a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	32b0      	adds	r2, #176	@ 0xb0
 800b468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	f003 020f 	and.w	r2, r3, #15
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	440b      	add	r3, r1
 800b480:	3318      	adds	r3, #24
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d02f      	beq.n	800b4e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	f003 020f 	and.w	r2, r3, #15
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	440b      	add	r3, r1
 800b49a:	3318      	adds	r3, #24
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	78fb      	ldrb	r3, [r7, #3]
 800b4a0:	f003 010f 	and.w	r1, r3, #15
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	440b      	add	r3, r1
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4403      	add	r3, r0
 800b4b0:	331c      	adds	r3, #28
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4b8:	fb01 f303 	mul.w	r3, r1, r3
 800b4bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d112      	bne.n	800b4e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b4c2:	78fb      	ldrb	r3, [r7, #3]
 800b4c4:	f003 020f 	and.w	r2, r3, #15
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	440b      	add	r3, r1
 800b4d4:	3318      	adds	r3, #24
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4da:	78f9      	ldrb	r1, [r7, #3]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	2200      	movs	r2, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f005 f830 	bl	8010546 <USBD_LL_Transmit>
 800b4e6:	e01f      	b.n	800b528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	33b0      	adds	r3, #176	@ 0xb0
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d010      	beq.n	800b528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	33b0      	adds	r3, #176	@ 0xb0
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b524:	78fa      	ldrb	r2, [r7, #3]
 800b526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	32b0      	adds	r2, #176	@ 0xb0
 800b548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	32b0      	adds	r2, #176	@ 0xb0
 800b558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b560:	2303      	movs	r3, #3
 800b562:	e01a      	b.n	800b59a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b564:	78fb      	ldrb	r3, [r7, #3]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f005 f82e 	bl	80105ca <USBD_LL_GetRxDataSize>
 800b56e:	4602      	mov	r2, r0
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	33b0      	adds	r3, #176	@ 0xb0
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b594:	4611      	mov	r1, r2
 800b596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	32b0      	adds	r2, #176	@ 0xb0
 800b5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e024      	b.n	800b60e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	33b0      	adds	r3, #176	@ 0xb0
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d019      	beq.n	800b60c <USBD_CDC_EP0_RxReady+0x6a>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5de:	2bff      	cmp	r3, #255	@ 0xff
 800b5e0:	d014      	beq.n	800b60c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	33b0      	adds	r3, #176	@ 0xb0
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b602:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	22ff      	movs	r2, #255	@ 0xff
 800b608:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b620:	2182      	movs	r1, #130	@ 0x82
 800b622:	4818      	ldr	r0, [pc, #96]	@ (800b684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b624:	f000 fd4f 	bl	800c0c6 <USBD_GetEpDesc>
 800b628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b62a:	2101      	movs	r1, #1
 800b62c:	4815      	ldr	r0, [pc, #84]	@ (800b684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b62e:	f000 fd4a 	bl	800c0c6 <USBD_GetEpDesc>
 800b632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b634:	2181      	movs	r1, #129	@ 0x81
 800b636:	4813      	ldr	r0, [pc, #76]	@ (800b684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b638:	f000 fd45 	bl	800c0c6 <USBD_GetEpDesc>
 800b63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2210      	movs	r2, #16
 800b648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2200      	movs	r2, #0
 800b654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b658:	711a      	strb	r2, [r3, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b66c:	711a      	strb	r2, [r3, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2243      	movs	r2, #67	@ 0x43
 800b676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b678:	4b02      	ldr	r3, [pc, #8]	@ (800b684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	24000054 	.word	0x24000054

0800b688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b690:	2182      	movs	r1, #130	@ 0x82
 800b692:	4818      	ldr	r0, [pc, #96]	@ (800b6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b694:	f000 fd17 	bl	800c0c6 <USBD_GetEpDesc>
 800b698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b69a:	2101      	movs	r1, #1
 800b69c:	4815      	ldr	r0, [pc, #84]	@ (800b6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b69e:	f000 fd12 	bl	800c0c6 <USBD_GetEpDesc>
 800b6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6a4:	2181      	movs	r1, #129	@ 0x81
 800b6a6:	4813      	ldr	r0, [pc, #76]	@ (800b6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6a8:	f000 fd0d 	bl	800c0c6 <USBD_GetEpDesc>
 800b6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2210      	movs	r2, #16
 800b6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	711a      	strb	r2, [r3, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f042 0202 	orr.w	r2, r2, #2
 800b6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d006      	beq.n	800b6e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	711a      	strb	r2, [r3, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f042 0202 	orr.w	r2, r2, #2
 800b6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2243      	movs	r2, #67	@ 0x43
 800b6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6e8:	4b02      	ldr	r3, [pc, #8]	@ (800b6f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	24000054 	.word	0x24000054

0800b6f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b700:	2182      	movs	r1, #130	@ 0x82
 800b702:	4818      	ldr	r0, [pc, #96]	@ (800b764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b704:	f000 fcdf 	bl	800c0c6 <USBD_GetEpDesc>
 800b708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b70a:	2101      	movs	r1, #1
 800b70c:	4815      	ldr	r0, [pc, #84]	@ (800b764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b70e:	f000 fcda 	bl	800c0c6 <USBD_GetEpDesc>
 800b712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b714:	2181      	movs	r1, #129	@ 0x81
 800b716:	4813      	ldr	r0, [pc, #76]	@ (800b764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b718:	f000 fcd5 	bl	800c0c6 <USBD_GetEpDesc>
 800b71c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2210      	movs	r2, #16
 800b728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2200      	movs	r2, #0
 800b734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b738:	711a      	strb	r2, [r3, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b74c:	711a      	strb	r2, [r3, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2243      	movs	r2, #67	@ 0x43
 800b756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b758:	4b02      	ldr	r3, [pc, #8]	@ (800b764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	24000054 	.word	0x24000054

0800b768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	220a      	movs	r2, #10
 800b774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b776:	4b03      	ldr	r3, [pc, #12]	@ (800b784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	24000010 	.word	0x24000010

0800b788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b798:	2303      	movs	r3, #3
 800b79a:	e009      	b.n	800b7b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	33b0      	adds	r3, #176	@ 0xb0
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	32b0      	adds	r2, #176	@ 0xb0
 800b7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e008      	b.n	800b7f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	32b0      	adds	r2, #176	@ 0xb0
 800b814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b820:	2303      	movs	r3, #3
 800b822:	e004      	b.n	800b82e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32b0      	adds	r2, #176	@ 0xb0
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b854:	2301      	movs	r3, #1
 800b856:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b85e:	2303      	movs	r3, #3
 800b860:	e025      	b.n	800b8ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d11f      	bne.n	800b8ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b874:	4b10      	ldr	r3, [pc, #64]	@ (800b8b8 <USBD_CDC_TransmitPacket+0x7c>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	f003 020f 	and.w	r2, r3, #15
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4403      	add	r3, r0
 800b88e:	3318      	adds	r3, #24
 800b890:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b892:	4b09      	ldr	r3, [pc, #36]	@ (800b8b8 <USBD_CDC_TransmitPacket+0x7c>)
 800b894:	7819      	ldrb	r1, [r3, #0]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f004 fe4f 	bl	8010546 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	24000097 	.word	0x24000097

0800b8bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32b0      	adds	r2, #176	@ 0xb0
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32b0      	adds	r2, #176	@ 0xb0
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e018      	b.n	800b91c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7c1b      	ldrb	r3, [r3, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10a      	bne.n	800b908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b924 <USBD_CDC_ReceivePacket+0x68>)
 800b8f4:	7819      	ldrb	r1, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f004 fe41 	bl	8010588 <USBD_LL_PrepareReceive>
 800b906:	e008      	b.n	800b91a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b908:	4b06      	ldr	r3, [pc, #24]	@ (800b924 <USBD_CDC_ReceivePacket+0x68>)
 800b90a:	7819      	ldrb	r1, [r3, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b912:	2340      	movs	r3, #64	@ 0x40
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f004 fe37 	bl	8010588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	24000098 	.word	0x24000098

0800b928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e01f      	b.n	800b980 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	79fa      	ldrb	r2, [r7, #7]
 800b972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f004 fcad 	bl	80102d4 <USBD_LL_Init>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e025      	b.n	800b9ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32ae      	adds	r2, #174	@ 0xae
 800b9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00f      	beq.n	800b9dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	32ae      	adds	r2, #174	@ 0xae
 800b9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9cc:	f107 020e 	add.w	r2, r7, #14
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	4798      	blx	r3
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f004 fcb9 	bl	8010374 <USBD_LL_Start>
 800ba02:	4603      	mov	r3, r0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d009      	beq.n	800ba50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	78fa      	ldrb	r2, [r7, #3]
 800ba46:	4611      	mov	r1, r2
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	4798      	blx	r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	78fa      	ldrb	r2, [r7, #3]
 800ba74:	4611      	mov	r1, r2
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba80:	2303      	movs	r3, #3
 800ba82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 f936 	bl	800cd12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bab4:	461a      	mov	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bac2:	f003 031f 	and.w	r3, r3, #31
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d01a      	beq.n	800bb00 <USBD_LL_SetupStage+0x72>
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d822      	bhi.n	800bb14 <USBD_LL_SetupStage+0x86>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d002      	beq.n	800bad8 <USBD_LL_SetupStage+0x4a>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d00a      	beq.n	800baec <USBD_LL_SetupStage+0x5e>
 800bad6:	e01d      	b.n	800bb14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fb63 	bl	800c1ac <USBD_StdDevReq>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]
      break;
 800baea:	e020      	b.n	800bb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fbcb 	bl	800c290 <USBD_StdItfReq>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73fb      	strb	r3, [r7, #15]
      break;
 800bafe:	e016      	b.n	800bb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fc2d 	bl	800c368 <USBD_StdEPReq>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]
      break;
 800bb12:	e00c      	b.n	800bb2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f004 fc86 	bl	8010434 <USBD_LL_StallEP>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb2c:	bf00      	nop
  }

  return ret;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	460b      	mov	r3, r1
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d16e      	bne.n	800bc2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bb56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	f040 8098 	bne.w	800bc94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	689a      	ldr	r2, [r3, #8]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d913      	bls.n	800bb98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	1ad2      	subs	r2, r2, r3
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	bf28      	it	cs
 800bb8a:	4613      	movcs	r3, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f001 f9be 	bl	800cf12 <USBD_CtlContinueRx>
 800bb96:	e07d      	b.n	800bc94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb9e:	f003 031f 	and.w	r3, r3, #31
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d014      	beq.n	800bbd0 <USBD_LL_DataOutStage+0x98>
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d81d      	bhi.n	800bbe6 <USBD_LL_DataOutStage+0xae>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d002      	beq.n	800bbb4 <USBD_LL_DataOutStage+0x7c>
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d003      	beq.n	800bbba <USBD_LL_DataOutStage+0x82>
 800bbb2:	e018      	b.n	800bbe6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75bb      	strb	r3, [r7, #22]
            break;
 800bbb8:	e018      	b.n	800bbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 fa64 	bl	800c092 <USBD_CoreFindIF>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	75bb      	strb	r3, [r7, #22]
            break;
 800bbce:	e00d      	b.n	800bbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	4619      	mov	r1, r3
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 fa66 	bl	800c0ac <USBD_CoreFindEP>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	75bb      	strb	r3, [r7, #22]
            break;
 800bbe4:	e002      	b.n	800bbec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	75bb      	strb	r3, [r7, #22]
            break;
 800bbea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d119      	bne.n	800bc26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d113      	bne.n	800bc26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bbfe:	7dba      	ldrb	r2, [r7, #22]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	32ae      	adds	r2, #174	@ 0xae
 800bc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00b      	beq.n	800bc26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc0e:	7dba      	ldrb	r2, [r7, #22]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc16:	7dba      	ldrb	r2, [r7, #22]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	32ae      	adds	r2, #174	@ 0xae
 800bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f001 f984 	bl	800cf34 <USBD_CtlSendStatus>
 800bc2c:	e032      	b.n	800bc94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	4619      	mov	r1, r3
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 fa37 	bl	800c0ac <USBD_CoreFindEP>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc42:	7dbb      	ldrb	r3, [r7, #22]
 800bc44:	2bff      	cmp	r3, #255	@ 0xff
 800bc46:	d025      	beq.n	800bc94 <USBD_LL_DataOutStage+0x15c>
 800bc48:	7dbb      	ldrb	r3, [r7, #22]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d122      	bne.n	800bc94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d117      	bne.n	800bc8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc5a:	7dba      	ldrb	r2, [r7, #22]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	32ae      	adds	r2, #174	@ 0xae
 800bc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00f      	beq.n	800bc8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc6a:	7dba      	ldrb	r2, [r7, #22]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc72:	7dba      	ldrb	r2, [r7, #22]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	32ae      	adds	r2, #174	@ 0xae
 800bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	7afa      	ldrb	r2, [r7, #11]
 800bc80:	4611      	mov	r1, r2
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	4798      	blx	r3
 800bc86:	4603      	mov	r3, r0
 800bc88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc8a:	7dfb      	ldrb	r3, [r7, #23]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	e000      	b.n	800bc96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	60f8      	str	r0, [r7, #12]
 800bca6:	460b      	mov	r3, r1
 800bca8:	607a      	str	r2, [r7, #4]
 800bcaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d16f      	bne.n	800bd92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3314      	adds	r3, #20
 800bcb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d15a      	bne.n	800bd78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	689a      	ldr	r2, [r3, #8]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d914      	bls.n	800bcf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	689a      	ldr	r2, [r3, #8]
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	1ad2      	subs	r2, r2, r3
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	461a      	mov	r2, r3
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f001 f8e6 	bl	800ceb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcea:	2300      	movs	r3, #0
 800bcec:	2200      	movs	r2, #0
 800bcee:	2100      	movs	r1, #0
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f004 fc49 	bl	8010588 <USBD_LL_PrepareReceive>
 800bcf6:	e03f      	b.n	800bd78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d11c      	bne.n	800bd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d316      	bcc.n	800bd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d20f      	bcs.n	800bd3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd1e:	2200      	movs	r2, #0
 800bd20:	2100      	movs	r1, #0
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f001 f8c7 	bl	800ceb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd30:	2300      	movs	r3, #0
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f004 fc26 	bl	8010588 <USBD_LL_PrepareReceive>
 800bd3c:	e01c      	b.n	800bd78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d10f      	bne.n	800bd6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d009      	beq.n	800bd6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6a:	2180      	movs	r1, #128	@ 0x80
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f004 fb61 	bl	8010434 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f001 f8f1 	bl	800cf5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d03a      	beq.n	800bdf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7ff fe42 	bl	800ba0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd90:	e032      	b.n	800bdf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 f985 	bl	800c0ac <USBD_CoreFindEP>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	2bff      	cmp	r3, #255	@ 0xff
 800bdaa:	d025      	beq.n	800bdf8 <USBD_LL_DataInStage+0x15a>
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d122      	bne.n	800bdf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d11c      	bne.n	800bdf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bdbe:	7dfa      	ldrb	r2, [r7, #23]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	32ae      	adds	r2, #174	@ 0xae
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d014      	beq.n	800bdf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bdce:	7dfa      	ldrb	r2, [r7, #23]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bdd6:	7dfa      	ldrb	r2, [r7, #23]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	32ae      	adds	r2, #174	@ 0xae
 800bddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	7afa      	ldrb	r2, [r7, #11]
 800bde4:	4611      	mov	r1, r2
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	4798      	blx	r3
 800bdea:	4603      	mov	r3, r0
 800bdec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bdee:	7dbb      	ldrb	r3, [r7, #22]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bdf4:	7dbb      	ldrb	r3, [r7, #22]
 800bdf6:	e000      	b.n	800bdfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d014      	beq.n	800be68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00e      	beq.n	800be68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	6852      	ldr	r2, [r2, #4]
 800be56:	b2d2      	uxtb	r2, r2
 800be58:	4611      	mov	r1, r2
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be68:	2340      	movs	r3, #64	@ 0x40
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f004 fa9b 	bl	80103aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2240      	movs	r2, #64	@ 0x40
 800be80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be84:	2340      	movs	r3, #64	@ 0x40
 800be86:	2200      	movs	r2, #0
 800be88:	2180      	movs	r1, #128	@ 0x80
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f004 fa8d 	bl	80103aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2240      	movs	r2, #64	@ 0x40
 800be9a:	621a      	str	r2, [r3, #32]

  return ret;
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	460b      	mov	r3, r1
 800beb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	78fa      	ldrb	r2, [r7, #3]
 800beb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800beb8:	2300      	movs	r3, #0
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d006      	beq.n	800bee8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2204      	movs	r2, #4
 800beec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d106      	bne.n	800bf20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d110      	bne.n	800bf64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf52:	69db      	ldr	r3, [r3, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d005      	beq.n	800bf64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	460b      	mov	r3, r1
 800bf78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	32ae      	adds	r2, #174	@ 0xae
 800bf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e01c      	b.n	800bfca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d115      	bne.n	800bfc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	32ae      	adds	r2, #174	@ 0xae
 800bfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfaa:	6a1b      	ldr	r3, [r3, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	32ae      	adds	r2, #174	@ 0xae
 800bfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b082      	sub	sp, #8
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	32ae      	adds	r2, #174	@ 0xae
 800bfe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e01c      	b.n	800c02e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d115      	bne.n	800c02c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32ae      	adds	r2, #174	@ 0xae
 800c00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	@ 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	4611      	mov	r1, r2
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00e      	beq.n	800c088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6852      	ldr	r2, [r2, #4]
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	4611      	mov	r1, r2
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c09e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c0b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	7812      	ldrb	r2, [r2, #0]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d91f      	bls.n	800c12c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c0f2:	e013      	b.n	800c11c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c0f4:	f107 030a 	add.w	r3, r7, #10
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6978      	ldr	r0, [r7, #20]
 800c0fc:	f000 f81b 	bl	800c136 <USBD_GetNextDesc>
 800c100:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	785b      	ldrb	r3, [r3, #1]
 800c106:	2b05      	cmp	r3, #5
 800c108:	d108      	bne.n	800c11c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	789b      	ldrb	r3, [r3, #2]
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	429a      	cmp	r2, r3
 800c116:	d008      	beq.n	800c12a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c118:	2300      	movs	r3, #0
 800c11a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	885b      	ldrh	r3, [r3, #2]
 800c120:	b29a      	uxth	r2, r3
 800c122:	897b      	ldrh	r3, [r7, #10]
 800c124:	429a      	cmp	r2, r3
 800c126:	d8e5      	bhi.n	800c0f4 <USBD_GetEpDesc+0x2e>
 800c128:	e000      	b.n	800c12c <USBD_GetEpDesc+0x66>
          break;
 800c12a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c12c:	693b      	ldr	r3, [r7, #16]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	7812      	ldrb	r2, [r2, #0]
 800c14c:	4413      	add	r3, r2
 800c14e:	b29a      	uxth	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	461a      	mov	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c160:	68fb      	ldr	r3, [r7, #12]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c16e:	b480      	push	{r7}
 800c170:	b087      	sub	sp, #28
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	3301      	adds	r3, #1
 800c184:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c18c:	8a3b      	ldrh	r3, [r7, #16]
 800c18e:	021b      	lsls	r3, r3, #8
 800c190:	b21a      	sxth	r2, r3
 800c192:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c196:	4313      	orrs	r3, r2
 800c198:	b21b      	sxth	r3, r3
 800c19a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c19c:	89fb      	ldrh	r3, [r7, #14]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	371c      	adds	r7, #28
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
	...

0800c1ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c1c2:	2b40      	cmp	r3, #64	@ 0x40
 800c1c4:	d005      	beq.n	800c1d2 <USBD_StdDevReq+0x26>
 800c1c6:	2b40      	cmp	r3, #64	@ 0x40
 800c1c8:	d857      	bhi.n	800c27a <USBD_StdDevReq+0xce>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00f      	beq.n	800c1ee <USBD_StdDevReq+0x42>
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	d153      	bne.n	800c27a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	32ae      	adds	r2, #174	@ 0xae
 800c1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	4798      	blx	r3
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ec:	e04a      	b.n	800c284 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	785b      	ldrb	r3, [r3, #1]
 800c1f2:	2b09      	cmp	r3, #9
 800c1f4:	d83b      	bhi.n	800c26e <USBD_StdDevReq+0xc2>
 800c1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1fc <USBD_StdDevReq+0x50>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c251 	.word	0x0800c251
 800c200:	0800c265 	.word	0x0800c265
 800c204:	0800c26f 	.word	0x0800c26f
 800c208:	0800c25b 	.word	0x0800c25b
 800c20c:	0800c26f 	.word	0x0800c26f
 800c210:	0800c22f 	.word	0x0800c22f
 800c214:	0800c225 	.word	0x0800c225
 800c218:	0800c26f 	.word	0x0800c26f
 800c21c:	0800c247 	.word	0x0800c247
 800c220:	0800c239 	.word	0x0800c239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fa3c 	bl	800c6a4 <USBD_GetDescriptor>
          break;
 800c22c:	e024      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fbcb 	bl	800c9cc <USBD_SetAddress>
          break;
 800c236:	e01f      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fc0a 	bl	800ca54 <USBD_SetConfig>
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]
          break;
 800c244:	e018      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fcad 	bl	800cba8 <USBD_GetConfig>
          break;
 800c24e:	e013      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fcde 	bl	800cc14 <USBD_GetStatus>
          break;
 800c258:	e00e      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fd0d 	bl	800cc7c <USBD_SetFeature>
          break;
 800c262:	e009      	b.n	800c278 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fd31 	bl	800ccce <USBD_ClrFeature>
          break;
 800c26c:	e004      	b.n	800c278 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fd88 	bl	800cd86 <USBD_CtlError>
          break;
 800c276:	bf00      	nop
      }
      break;
 800c278:	e004      	b.n	800c284 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fd82 	bl	800cd86 <USBD_CtlError>
      break;
 800c282:	bf00      	nop
  }

  return ret;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop

0800c290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2a6:	2b40      	cmp	r3, #64	@ 0x40
 800c2a8:	d005      	beq.n	800c2b6 <USBD_StdItfReq+0x26>
 800c2aa:	2b40      	cmp	r3, #64	@ 0x40
 800c2ac:	d852      	bhi.n	800c354 <USBD_StdItfReq+0xc4>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <USBD_StdItfReq+0x26>
 800c2b2:	2b20      	cmp	r3, #32
 800c2b4:	d14e      	bne.n	800c354 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d840      	bhi.n	800c346 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	889b      	ldrh	r3, [r3, #4]
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d836      	bhi.n	800c33c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	889b      	ldrh	r3, [r3, #4]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fedb 	bl	800c092 <USBD_CoreFindIF>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	2bff      	cmp	r3, #255	@ 0xff
 800c2e4:	d01d      	beq.n	800c322 <USBD_StdItfReq+0x92>
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d11a      	bne.n	800c322 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c2ec:	7bba      	ldrb	r2, [r7, #14]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	32ae      	adds	r2, #174	@ 0xae
 800c2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00f      	beq.n	800c31c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2fc:	7bba      	ldrb	r2, [r7, #14]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c304:	7bba      	ldrb	r2, [r7, #14]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	4798      	blx	r3
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c31a:	e004      	b.n	800c326 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c31c:	2303      	movs	r3, #3
 800c31e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c320:	e001      	b.n	800c326 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c322:	2303      	movs	r3, #3
 800c324:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	88db      	ldrh	r3, [r3, #6]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d110      	bne.n	800c350 <USBD_StdItfReq+0xc0>
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10d      	bne.n	800c350 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fdfd 	bl	800cf34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c33a:	e009      	b.n	800c350 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fd21 	bl	800cd86 <USBD_CtlError>
          break;
 800c344:	e004      	b.n	800c350 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fd1c 	bl	800cd86 <USBD_CtlError>
          break;
 800c34e:	e000      	b.n	800c352 <USBD_StdItfReq+0xc2>
          break;
 800c350:	bf00      	nop
      }
      break;
 800c352:	e004      	b.n	800c35e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fd15 	bl	800cd86 <USBD_CtlError>
      break;
 800c35c:	bf00      	nop
  }

  return ret;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	889b      	ldrh	r3, [r3, #4]
 800c37a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c384:	2b40      	cmp	r3, #64	@ 0x40
 800c386:	d007      	beq.n	800c398 <USBD_StdEPReq+0x30>
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	f200 817f 	bhi.w	800c68c <USBD_StdEPReq+0x324>
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d02a      	beq.n	800c3e8 <USBD_StdEPReq+0x80>
 800c392:	2b20      	cmp	r3, #32
 800c394:	f040 817a 	bne.w	800c68c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	4619      	mov	r1, r3
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff fe85 	bl	800c0ac <USBD_CoreFindEP>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3a6:	7b7b      	ldrb	r3, [r7, #13]
 800c3a8:	2bff      	cmp	r3, #255	@ 0xff
 800c3aa:	f000 8174 	beq.w	800c696 <USBD_StdEPReq+0x32e>
 800c3ae:	7b7b      	ldrb	r3, [r7, #13]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f040 8170 	bne.w	800c696 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c3b6:	7b7a      	ldrb	r2, [r7, #13]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c3be:	7b7a      	ldrb	r2, [r7, #13]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	32ae      	adds	r2, #174	@ 0xae
 800c3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 8163 	beq.w	800c696 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c3d0:	7b7a      	ldrb	r2, [r7, #13]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	32ae      	adds	r2, #174	@ 0xae
 800c3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	4798      	blx	r3
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c3e6:	e156      	b.n	800c696 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d008      	beq.n	800c402 <USBD_StdEPReq+0x9a>
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	f300 8145 	bgt.w	800c680 <USBD_StdEPReq+0x318>
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 809b 	beq.w	800c532 <USBD_StdEPReq+0x1ca>
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d03c      	beq.n	800c47a <USBD_StdEPReq+0x112>
 800c400:	e13e      	b.n	800c680 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d002      	beq.n	800c414 <USBD_StdEPReq+0xac>
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d016      	beq.n	800c440 <USBD_StdEPReq+0xd8>
 800c412:	e02c      	b.n	800c46e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00d      	beq.n	800c436 <USBD_StdEPReq+0xce>
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	2b80      	cmp	r3, #128	@ 0x80
 800c41e:	d00a      	beq.n	800c436 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f004 f805 	bl	8010434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c42a:	2180      	movs	r1, #128	@ 0x80
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f004 f801 	bl	8010434 <USBD_LL_StallEP>
 800c432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c434:	e020      	b.n	800c478 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fca4 	bl	800cd86 <USBD_CtlError>
              break;
 800c43e:	e01b      	b.n	800c478 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	885b      	ldrh	r3, [r3, #2]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10e      	bne.n	800c466 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <USBD_StdEPReq+0xfe>
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	2b80      	cmp	r3, #128	@ 0x80
 800c452:	d008      	beq.n	800c466 <USBD_StdEPReq+0xfe>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	88db      	ldrh	r3, [r3, #6]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d104      	bne.n	800c466 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c45c:	7bbb      	ldrb	r3, [r7, #14]
 800c45e:	4619      	mov	r1, r3
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f003 ffe7 	bl	8010434 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fd64 	bl	800cf34 <USBD_CtlSendStatus>

              break;
 800c46c:	e004      	b.n	800c478 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fc88 	bl	800cd86 <USBD_CtlError>
              break;
 800c476:	bf00      	nop
          }
          break;
 800c478:	e107      	b.n	800c68a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b02      	cmp	r3, #2
 800c484:	d002      	beq.n	800c48c <USBD_StdEPReq+0x124>
 800c486:	2b03      	cmp	r3, #3
 800c488:	d016      	beq.n	800c4b8 <USBD_StdEPReq+0x150>
 800c48a:	e04b      	b.n	800c524 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00d      	beq.n	800c4ae <USBD_StdEPReq+0x146>
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b80      	cmp	r3, #128	@ 0x80
 800c496:	d00a      	beq.n	800c4ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f003 ffc9 	bl	8010434 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a2:	2180      	movs	r1, #128	@ 0x80
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f003 ffc5 	bl	8010434 <USBD_LL_StallEP>
 800c4aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4ac:	e040      	b.n	800c530 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fc68 	bl	800cd86 <USBD_CtlError>
              break;
 800c4b6:	e03b      	b.n	800c530 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	885b      	ldrh	r3, [r3, #2]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d136      	bne.n	800c52e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d004      	beq.n	800c4d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f003 ffcf 	bl	8010472 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fd2d 	bl	800cf34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fde4 	bl	800c0ac <USBD_CoreFindEP>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4e8:	7b7b      	ldrb	r3, [r7, #13]
 800c4ea:	2bff      	cmp	r3, #255	@ 0xff
 800c4ec:	d01f      	beq.n	800c52e <USBD_StdEPReq+0x1c6>
 800c4ee:	7b7b      	ldrb	r3, [r7, #13]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d11c      	bne.n	800c52e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c4f4:	7b7a      	ldrb	r2, [r7, #13]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4fc:	7b7a      	ldrb	r2, [r7, #13]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	32ae      	adds	r2, #174	@ 0xae
 800c502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d010      	beq.n	800c52e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c50c:	7b7a      	ldrb	r2, [r7, #13]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	32ae      	adds	r2, #174	@ 0xae
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	4798      	blx	r3
 800c51e:	4603      	mov	r3, r0
 800c520:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c522:	e004      	b.n	800c52e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fc2d 	bl	800cd86 <USBD_CtlError>
              break;
 800c52c:	e000      	b.n	800c530 <USBD_StdEPReq+0x1c8>
              break;
 800c52e:	bf00      	nop
          }
          break;
 800c530:	e0ab      	b.n	800c68a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d002      	beq.n	800c544 <USBD_StdEPReq+0x1dc>
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d032      	beq.n	800c5a8 <USBD_StdEPReq+0x240>
 800c542:	e097      	b.n	800c674 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d007      	beq.n	800c55a <USBD_StdEPReq+0x1f2>
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	2b80      	cmp	r3, #128	@ 0x80
 800c54e:	d004      	beq.n	800c55a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fc17 	bl	800cd86 <USBD_CtlError>
                break;
 800c558:	e091      	b.n	800c67e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c55a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	da0b      	bge.n	800c57a <USBD_StdEPReq+0x212>
 800c562:	7bbb      	ldrb	r3, [r7, #14]
 800c564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c568:	4613      	mov	r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	3310      	adds	r3, #16
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	3304      	adds	r3, #4
 800c578:	e00b      	b.n	800c592 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	4413      	add	r3, r2
 800c590:	3304      	adds	r3, #4
 800c592:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2202      	movs	r2, #2
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fc6d 	bl	800ce80 <USBD_CtlSendData>
              break;
 800c5a6:	e06a      	b.n	800c67e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c5a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	da11      	bge.n	800c5d4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c5b0:	7bbb      	ldrb	r3, [r7, #14]
 800c5b2:	f003 020f 	and.w	r2, r3, #15
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3324      	adds	r3, #36	@ 0x24
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d117      	bne.n	800c5fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fbda 	bl	800cd86 <USBD_CtlError>
                  break;
 800c5d2:	e054      	b.n	800c67e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5d4:	7bbb      	ldrb	r3, [r7, #14]
 800c5d6:	f003 020f 	and.w	r2, r3, #15
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d104      	bne.n	800c5fa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fbc7 	bl	800cd86 <USBD_CtlError>
                  break;
 800c5f8:	e041      	b.n	800c67e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da0b      	bge.n	800c61a <USBD_StdEPReq+0x2b2>
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	3310      	adds	r3, #16
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	4413      	add	r3, r2
 800c616:	3304      	adds	r3, #4
 800c618:	e00b      	b.n	800c632 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
 800c61c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	4413      	add	r3, r2
 800c630:	3304      	adds	r3, #4
 800c632:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <USBD_StdEPReq+0x2d8>
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b80      	cmp	r3, #128	@ 0x80
 800c63e:	d103      	bne.n	800c648 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	e00e      	b.n	800c666 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f003 ff2f 	bl	80104b0 <USBD_LL_IsStallEP>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2201      	movs	r2, #1
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	e002      	b.n	800c666 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2202      	movs	r2, #2
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fc07 	bl	800ce80 <USBD_CtlSendData>
              break;
 800c672:	e004      	b.n	800c67e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c674:	6839      	ldr	r1, [r7, #0]
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fb85 	bl	800cd86 <USBD_CtlError>
              break;
 800c67c:	bf00      	nop
          }
          break;
 800c67e:	e004      	b.n	800c68a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fb7f 	bl	800cd86 <USBD_CtlError>
          break;
 800c688:	bf00      	nop
      }
      break;
 800c68a:	e005      	b.n	800c698 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fb79 	bl	800cd86 <USBD_CtlError>
      break;
 800c694:	e000      	b.n	800c698 <USBD_StdEPReq+0x330>
      break;
 800c696:	bf00      	nop
  }

  return ret;
 800c698:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	885b      	ldrh	r3, [r3, #2]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	2b0e      	cmp	r3, #14
 800c6c6:	f200 8152 	bhi.w	800c96e <USBD_GetDescriptor+0x2ca>
 800c6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d0 <USBD_GetDescriptor+0x2c>)
 800c6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d0:	0800c741 	.word	0x0800c741
 800c6d4:	0800c759 	.word	0x0800c759
 800c6d8:	0800c799 	.word	0x0800c799
 800c6dc:	0800c96f 	.word	0x0800c96f
 800c6e0:	0800c96f 	.word	0x0800c96f
 800c6e4:	0800c90f 	.word	0x0800c90f
 800c6e8:	0800c93b 	.word	0x0800c93b
 800c6ec:	0800c96f 	.word	0x0800c96f
 800c6f0:	0800c96f 	.word	0x0800c96f
 800c6f4:	0800c96f 	.word	0x0800c96f
 800c6f8:	0800c96f 	.word	0x0800c96f
 800c6fc:	0800c96f 	.word	0x0800c96f
 800c700:	0800c96f 	.word	0x0800c96f
 800c704:	0800c96f 	.word	0x0800c96f
 800c708:	0800c70d 	.word	0x0800c70d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	7c12      	ldrb	r2, [r2, #16]
 800c724:	f107 0108 	add.w	r1, r7, #8
 800c728:	4610      	mov	r0, r2
 800c72a:	4798      	blx	r3
 800c72c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c72e:	e126      	b.n	800c97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fb27 	bl	800cd86 <USBD_CtlError>
        err++;
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	3301      	adds	r3, #1
 800c73c:	72fb      	strb	r3, [r7, #11]
      break;
 800c73e:	e11e      	b.n	800c97e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	7c12      	ldrb	r2, [r2, #16]
 800c74c:	f107 0108 	add.w	r1, r7, #8
 800c750:	4610      	mov	r0, r2
 800c752:	4798      	blx	r3
 800c754:	60f8      	str	r0, [r7, #12]
      break;
 800c756:	e112      	b.n	800c97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7c1b      	ldrb	r3, [r3, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10d      	bne.n	800c77c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c768:	f107 0208 	add.w	r2, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
 800c770:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	3301      	adds	r3, #1
 800c776:	2202      	movs	r2, #2
 800c778:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c77a:	e100      	b.n	800c97e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c784:	f107 0208 	add.w	r2, r7, #8
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
 800c78c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3301      	adds	r3, #1
 800c792:	2202      	movs	r2, #2
 800c794:	701a      	strb	r2, [r3, #0]
      break;
 800c796:	e0f2      	b.n	800c97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	885b      	ldrh	r3, [r3, #2]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	f200 80ac 	bhi.w	800c8fc <USBD_GetDescriptor+0x258>
 800c7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7ac <USBD_GetDescriptor+0x108>)
 800c7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7aa:	bf00      	nop
 800c7ac:	0800c7c5 	.word	0x0800c7c5
 800c7b0:	0800c7f9 	.word	0x0800c7f9
 800c7b4:	0800c82d 	.word	0x0800c82d
 800c7b8:	0800c861 	.word	0x0800c861
 800c7bc:	0800c895 	.word	0x0800c895
 800c7c0:	0800c8c9 	.word	0x0800c8c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7c12      	ldrb	r2, [r2, #16]
 800c7dc:	f107 0108 	add.w	r1, r7, #8
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7e6:	e091      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 facb 	bl	800cd86 <USBD_CtlError>
            err++;
 800c7f0:	7afb      	ldrb	r3, [r7, #11]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7f6:	e089      	b.n	800c90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7c12      	ldrb	r2, [r2, #16]
 800c810:	f107 0108 	add.w	r1, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81a:	e077      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fab1 	bl	800cd86 <USBD_CtlError>
            err++;
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	3301      	adds	r3, #1
 800c828:	72fb      	strb	r3, [r7, #11]
          break;
 800c82a:	e06f      	b.n	800c90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7c12      	ldrb	r2, [r2, #16]
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84e:	e05d      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa97 	bl	800cd86 <USBD_CtlError>
            err++;
 800c858:	7afb      	ldrb	r3, [r7, #11]
 800c85a:	3301      	adds	r3, #1
 800c85c:	72fb      	strb	r3, [r7, #11]
          break;
 800c85e:	e055      	b.n	800c90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	7c12      	ldrb	r2, [r2, #16]
 800c878:	f107 0108 	add.w	r1, r7, #8
 800c87c:	4610      	mov	r0, r2
 800c87e:	4798      	blx	r3
 800c880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c882:	e043      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fa7d 	bl	800cd86 <USBD_CtlError>
            err++;
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	3301      	adds	r3, #1
 800c890:	72fb      	strb	r3, [r7, #11]
          break;
 800c892:	e03b      	b.n	800c90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89a:	695b      	ldr	r3, [r3, #20]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7c12      	ldrb	r2, [r2, #16]
 800c8ac:	f107 0108 	add.w	r1, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b6:	e029      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fa63 	bl	800cd86 <USBD_CtlError>
            err++;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c6:	e021      	b.n	800c90c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	7c12      	ldrb	r2, [r2, #16]
 800c8e0:	f107 0108 	add.w	r1, r7, #8
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ea:	e00f      	b.n	800c90c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fa49 	bl	800cd86 <USBD_CtlError>
            err++;
 800c8f4:	7afb      	ldrb	r3, [r7, #11]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8fa:	e007      	b.n	800c90c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fa41 	bl	800cd86 <USBD_CtlError>
          err++;
 800c904:	7afb      	ldrb	r3, [r7, #11]
 800c906:	3301      	adds	r3, #1
 800c908:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c90a:	bf00      	nop
      }
      break;
 800c90c:	e037      	b.n	800c97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7c1b      	ldrb	r3, [r3, #16]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d109      	bne.n	800c92a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c91e:	f107 0208 	add.w	r2, r7, #8
 800c922:	4610      	mov	r0, r2
 800c924:	4798      	blx	r3
 800c926:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c928:	e029      	b.n	800c97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fa2a 	bl	800cd86 <USBD_CtlError>
        err++;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	3301      	adds	r3, #1
 800c936:	72fb      	strb	r3, [r7, #11]
      break;
 800c938:	e021      	b.n	800c97e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7c1b      	ldrb	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10d      	bne.n	800c95e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c94a:	f107 0208 	add.w	r2, r7, #8
 800c94e:	4610      	mov	r0, r2
 800c950:	4798      	blx	r3
 800c952:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3301      	adds	r3, #1
 800c958:	2207      	movs	r2, #7
 800c95a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c95c:	e00f      	b.n	800c97e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fa10 	bl	800cd86 <USBD_CtlError>
        err++;
 800c966:	7afb      	ldrb	r3, [r7, #11]
 800c968:	3301      	adds	r3, #1
 800c96a:	72fb      	strb	r3, [r7, #11]
      break;
 800c96c:	e007      	b.n	800c97e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 fa08 	bl	800cd86 <USBD_CtlError>
      err++;
 800c976:	7afb      	ldrb	r3, [r7, #11]
 800c978:	3301      	adds	r3, #1
 800c97a:	72fb      	strb	r3, [r7, #11]
      break;
 800c97c:	bf00      	nop
  }

  if (err != 0U)
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d11e      	bne.n	800c9c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	88db      	ldrh	r3, [r3, #6]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d016      	beq.n	800c9ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c98c:	893b      	ldrh	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00e      	beq.n	800c9b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	88da      	ldrh	r2, [r3, #6]
 800c996:	893b      	ldrh	r3, [r7, #8]
 800c998:	4293      	cmp	r3, r2
 800c99a:	bf28      	it	cs
 800c99c:	4613      	movcs	r3, r2
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9a2:	893b      	ldrh	r3, [r7, #8]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	68f9      	ldr	r1, [r7, #12]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fa69 	bl	800ce80 <USBD_CtlSendData>
 800c9ae:	e009      	b.n	800c9c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f9e7 	bl	800cd86 <USBD_CtlError>
 800c9b8:	e004      	b.n	800c9c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 faba 	bl	800cf34 <USBD_CtlSendStatus>
 800c9c0:	e000      	b.n	800c9c4 <USBD_GetDescriptor+0x320>
    return;
 800c9c2:	bf00      	nop
  }
}
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop

0800c9cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	889b      	ldrh	r3, [r3, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d131      	bne.n	800ca42 <USBD_SetAddress+0x76>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	88db      	ldrh	r3, [r3, #6]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d12d      	bne.n	800ca42 <USBD_SetAddress+0x76>
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	885b      	ldrh	r3, [r3, #2]
 800c9ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9ec:	d829      	bhi.n	800ca42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	885b      	ldrh	r3, [r3, #2]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d104      	bne.n	800ca10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f9bc 	bl	800cd86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	e01d      	b.n	800ca4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7bfa      	ldrb	r2, [r7, #15]
 800ca14:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f003 fd73 	bl	8010508 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fa86 	bl	800cf34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca28:	7bfb      	ldrb	r3, [r7, #15]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d004      	beq.n	800ca38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2202      	movs	r2, #2
 800ca32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca36:	e009      	b.n	800ca4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca40:	e004      	b.n	800ca4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f99e 	bl	800cd86 <USBD_CtlError>
  }
}
 800ca4a:	bf00      	nop
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	885b      	ldrh	r3, [r3, #2]
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	4b4e      	ldr	r3, [pc, #312]	@ (800cba4 <USBD_SetConfig+0x150>)
 800ca6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca6c:	4b4d      	ldr	r3, [pc, #308]	@ (800cba4 <USBD_SetConfig+0x150>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d905      	bls.n	800ca80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f985 	bl	800cd86 <USBD_CtlError>
    return USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	e08c      	b.n	800cb9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d002      	beq.n	800ca92 <USBD_SetConfig+0x3e>
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d029      	beq.n	800cae4 <USBD_SetConfig+0x90>
 800ca90:	e075      	b.n	800cb7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca92:	4b44      	ldr	r3, [pc, #272]	@ (800cba4 <USBD_SetConfig+0x150>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d020      	beq.n	800cadc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca9a:	4b42      	ldr	r3, [pc, #264]	@ (800cba4 <USBD_SetConfig+0x150>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800caa4:	4b3f      	ldr	r3, [pc, #252]	@ (800cba4 <USBD_SetConfig+0x150>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7fe ffb9 	bl	800ba22 <USBD_SetClassConfig>
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d008      	beq.n	800cacc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f962 	bl	800cd86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2202      	movs	r2, #2
 800cac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800caca:	e065      	b.n	800cb98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fa31 	bl	800cf34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2203      	movs	r2, #3
 800cad6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cada:	e05d      	b.n	800cb98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fa29 	bl	800cf34 <USBD_CtlSendStatus>
      break;
 800cae2:	e059      	b.n	800cb98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cae4:	4b2f      	ldr	r3, [pc, #188]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d112      	bne.n	800cb12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2202      	movs	r2, #2
 800caf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800caf4:	4b2b      	ldr	r3, [pc, #172]	@ (800cba4 <USBD_SetConfig+0x150>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	461a      	mov	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cafe:	4b29      	ldr	r3, [pc, #164]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7fe ffa8 	bl	800ba5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa12 	bl	800cf34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb10:	e042      	b.n	800cb98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb12:	4b24      	ldr	r3, [pc, #144]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d02a      	beq.n	800cb76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7fe ff96 	bl	800ba5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb2e:	4b1d      	ldr	r3, [pc, #116]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb38:	4b1a      	ldr	r3, [pc, #104]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7fe ff6f 	bl	800ba22 <USBD_SetClassConfig>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00f      	beq.n	800cb6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f918 	bl	800cd86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7fe ff7b 	bl	800ba5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb6c:	e014      	b.n	800cb98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f9e0 	bl	800cf34 <USBD_CtlSendStatus>
      break;
 800cb74:	e010      	b.n	800cb98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f9dc 	bl	800cf34 <USBD_CtlSendStatus>
      break;
 800cb7c:	e00c      	b.n	800cb98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f900 	bl	800cd86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb86:	4b07      	ldr	r3, [pc, #28]	@ (800cba4 <USBD_SetConfig+0x150>)
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7fe ff64 	bl	800ba5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb92:	2303      	movs	r3, #3
 800cb94:	73fb      	strb	r3, [r7, #15]
      break;
 800cb96:	bf00      	nop
  }

  return ret;
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	240005ac 	.word	0x240005ac

0800cba8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	88db      	ldrh	r3, [r3, #6]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d004      	beq.n	800cbc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f8e2 	bl	800cd86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cbc2:	e023      	b.n	800cc0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	dc02      	bgt.n	800cbd6 <USBD_GetConfig+0x2e>
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dc03      	bgt.n	800cbdc <USBD_GetConfig+0x34>
 800cbd4:	e015      	b.n	800cc02 <USBD_GetConfig+0x5a>
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d00b      	beq.n	800cbf2 <USBD_GetConfig+0x4a>
 800cbda:	e012      	b.n	800cc02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f948 	bl	800ce80 <USBD_CtlSendData>
        break;
 800cbf0:	e00c      	b.n	800cc0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f940 	bl	800ce80 <USBD_CtlSendData>
        break;
 800cc00:	e004      	b.n	800cc0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f8be 	bl	800cd86 <USBD_CtlError>
        break;
 800cc0a:	bf00      	nop
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	3b01      	subs	r3, #1
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d81e      	bhi.n	800cc6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	88db      	ldrh	r3, [r3, #6]
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d004      	beq.n	800cc3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f8a5 	bl	800cd86 <USBD_CtlError>
        break;
 800cc3c:	e01a      	b.n	800cc74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d005      	beq.n	800cc5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f043 0202 	orr.w	r2, r3, #2
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	330c      	adds	r3, #12
 800cc5e:	2202      	movs	r2, #2
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f90c 	bl	800ce80 <USBD_CtlSendData>
      break;
 800cc68:	e004      	b.n	800cc74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f88a 	bl	800cd86 <USBD_CtlError>
      break;
 800cc72:	bf00      	nop
  }
}
 800cc74:	bf00      	nop
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	885b      	ldrh	r3, [r3, #2]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d107      	bne.n	800cc9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f94c 	bl	800cf34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc9c:	e013      	b.n	800ccc6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	885b      	ldrh	r3, [r3, #2]
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d10b      	bne.n	800ccbe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	889b      	ldrh	r3, [r3, #4]
 800ccaa:	0a1b      	lsrs	r3, r3, #8
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f93c 	bl	800cf34 <USBD_CtlSendStatus>
}
 800ccbc:	e003      	b.n	800ccc6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f860 	bl	800cd86 <USBD_CtlError>
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d80b      	bhi.n	800ccfe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d10c      	bne.n	800cd08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f91c 	bl	800cf34 <USBD_CtlSendStatus>
      }
      break;
 800ccfc:	e004      	b.n	800cd08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f840 	bl	800cd86 <USBD_CtlError>
      break;
 800cd06:	e000      	b.n	800cd0a <USBD_ClrFeature+0x3c>
      break;
 800cd08:	bf00      	nop
  }
}
 800cd0a:	bf00      	nop
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	781a      	ldrb	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff fa16 	bl	800c16e <SWAPBYTE>
 800cd42:	4603      	mov	r3, r0
 800cd44:	461a      	mov	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	3301      	adds	r3, #1
 800cd54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f7ff fa09 	bl	800c16e <SWAPBYTE>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3301      	adds	r3, #1
 800cd68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff f9fc 	bl	800c16e <SWAPBYTE>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	80da      	strh	r2, [r3, #6]
}
 800cd7e:	bf00      	nop
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd90:	2180      	movs	r1, #128	@ 0x80
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f003 fb4e 	bl	8010434 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd98:	2100      	movs	r1, #0
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f003 fb4a 	bl	8010434 <USBD_LL_StallEP>
}
 800cda0:	bf00      	nop
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d042      	beq.n	800ce44 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cdc2:	6938      	ldr	r0, [r7, #16]
 800cdc4:	f000 f842 	bl	800ce4c <USBD_GetLen>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	3301      	adds	r3, #1
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdd2:	d808      	bhi.n	800cde6 <USBD_GetString+0x3e>
 800cdd4:	6938      	ldr	r0, [r7, #16]
 800cdd6:	f000 f839 	bl	800ce4c <USBD_GetLen>
 800cdda:	4603      	mov	r3, r0
 800cddc:	3301      	adds	r3, #1
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	e001      	b.n	800cdea <USBD_GetString+0x42>
 800cde6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7812      	ldrb	r2, [r2, #0]
 800cdf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	4413      	add	r3, r2
 800ce06:	2203      	movs	r2, #3
 800ce08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce10:	e013      	b.n	800ce3a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	4413      	add	r3, r2
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	7812      	ldrb	r2, [r2, #0]
 800ce1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3301      	adds	r3, #1
 800ce22:	613b      	str	r3, [r7, #16]
    idx++;
 800ce24:	7dfb      	ldrb	r3, [r7, #23]
 800ce26:	3301      	adds	r3, #1
 800ce28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	4413      	add	r3, r2
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
 800ce36:	3301      	adds	r3, #1
 800ce38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1e7      	bne.n	800ce12 <USBD_GetString+0x6a>
 800ce42:	e000      	b.n	800ce46 <USBD_GetString+0x9e>
    return;
 800ce44:	bf00      	nop
  }
}
 800ce46:	3718      	adds	r7, #24
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce5c:	e005      	b.n	800ce6a <USBD_GetLen+0x1e>
  {
    len++;
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
 800ce60:	3301      	adds	r3, #1
 800ce62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	3301      	adds	r3, #1
 800ce68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1f5      	bne.n	800ce5e <USBD_GetLen+0x12>
  }

  return len;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	2100      	movs	r1, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f003 fb4d 	bl	8010546 <USBD_LL_Transmit>

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	2100      	movs	r1, #0
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f003 fb3c 	bl	8010546 <USBD_LL_Transmit>

  return USBD_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2203      	movs	r2, #3
 800cee8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	2100      	movs	r1, #0
 800cf02:	68f8      	ldr	r0, [r7, #12]
 800cf04:	f003 fb40 	bl	8010588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b084      	sub	sp, #16
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	2100      	movs	r1, #0
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f003 fb2f 	bl	8010588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2204      	movs	r2, #4
 800cf40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf44:	2300      	movs	r3, #0
 800cf46:	2200      	movs	r2, #0
 800cf48:	2100      	movs	r1, #0
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f003 fafb 	bl	8010546 <USBD_LL_Transmit>

  return USBD_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2205      	movs	r2, #5
 800cf66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2100      	movs	r1, #0
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f003 fb09 	bl	8010588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <__NVIC_SetPriority>:
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	4603      	mov	r3, r0
 800cf88:	6039      	str	r1, [r7, #0]
 800cf8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cf8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	db0a      	blt.n	800cfaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	490c      	ldr	r1, [pc, #48]	@ (800cfcc <__NVIC_SetPriority+0x4c>)
 800cf9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf9e:	0112      	lsls	r2, r2, #4
 800cfa0:	b2d2      	uxtb	r2, r2
 800cfa2:	440b      	add	r3, r1
 800cfa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cfa8:	e00a      	b.n	800cfc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	4908      	ldr	r1, [pc, #32]	@ (800cfd0 <__NVIC_SetPriority+0x50>)
 800cfb0:	88fb      	ldrh	r3, [r7, #6]
 800cfb2:	f003 030f 	and.w	r3, r3, #15
 800cfb6:	3b04      	subs	r3, #4
 800cfb8:	0112      	lsls	r2, r2, #4
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	440b      	add	r3, r1
 800cfbe:	761a      	strb	r2, [r3, #24]
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	e000e100 	.word	0xe000e100
 800cfd0:	e000ed00 	.word	0xe000ed00

0800cfd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cfd8:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <SysTick_Handler+0x1c>)
 800cfda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cfdc:	f001 fd8c 	bl	800eaf8 <xTaskGetSchedulerState>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d001      	beq.n	800cfea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cfe6:	f002 fb87 	bl	800f6f8 <xPortSysTickHandler>
  }
}
 800cfea:	bf00      	nop
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	e000e010 	.word	0xe000e010

0800cff4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cff8:	2100      	movs	r1, #0
 800cffa:	f06f 0004 	mvn.w	r0, #4
 800cffe:	f7ff ffbf 	bl	800cf80 <__NVIC_SetPriority>
#endif
}
 800d002:	bf00      	nop
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d00e:	f3ef 8305 	mrs	r3, IPSR
 800d012:	603b      	str	r3, [r7, #0]
  return(result);
 800d014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d01a:	f06f 0305 	mvn.w	r3, #5
 800d01e:	607b      	str	r3, [r7, #4]
 800d020:	e00c      	b.n	800d03c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d022:	4b0a      	ldr	r3, [pc, #40]	@ (800d04c <osKernelInitialize+0x44>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d02a:	4b08      	ldr	r3, [pc, #32]	@ (800d04c <osKernelInitialize+0x44>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d030:	2300      	movs	r3, #0
 800d032:	607b      	str	r3, [r7, #4]
 800d034:	e002      	b.n	800d03c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d036:	f04f 33ff 	mov.w	r3, #4294967295
 800d03a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d03c:	687b      	ldr	r3, [r7, #4]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	240005b0 	.word	0x240005b0

0800d050 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d056:	f3ef 8305 	mrs	r3, IPSR
 800d05a:	603b      	str	r3, [r7, #0]
  return(result);
 800d05c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d062:	f06f 0305 	mvn.w	r3, #5
 800d066:	607b      	str	r3, [r7, #4]
 800d068:	e010      	b.n	800d08c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d06a:	4b0b      	ldr	r3, [pc, #44]	@ (800d098 <osKernelStart+0x48>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d109      	bne.n	800d086 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d072:	f7ff ffbf 	bl	800cff4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d076:	4b08      	ldr	r3, [pc, #32]	@ (800d098 <osKernelStart+0x48>)
 800d078:	2202      	movs	r2, #2
 800d07a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d07c:	f001 f8ee 	bl	800e25c <vTaskStartScheduler>
      stat = osOK;
 800d080:	2300      	movs	r3, #0
 800d082:	607b      	str	r3, [r7, #4]
 800d084:	e002      	b.n	800d08c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d086:	f04f 33ff 	mov.w	r3, #4294967295
 800d08a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d08c:	687b      	ldr	r3, [r7, #4]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	240005b0 	.word	0x240005b0

0800d09c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08e      	sub	sp, #56	@ 0x38
 800d0a0:	af04      	add	r7, sp, #16
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ac:	f3ef 8305 	mrs	r3, IPSR
 800d0b0:	617b      	str	r3, [r7, #20]
  return(result);
 800d0b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d17e      	bne.n	800d1b6 <osThreadNew+0x11a>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d07b      	beq.n	800d1b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d0be:	2380      	movs	r3, #128	@ 0x80
 800d0c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d0c2:	2318      	movs	r3, #24
 800d0c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d045      	beq.n	800d162 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <osThreadNew+0x48>
        name = attr->name;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	699b      	ldr	r3, [r3, #24]
 800d0f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d008      	beq.n	800d10a <osThreadNew+0x6e>
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2b38      	cmp	r3, #56	@ 0x38
 800d0fc:	d805      	bhi.n	800d10a <osThreadNew+0x6e>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <osThreadNew+0x72>
        return (NULL);
 800d10a:	2300      	movs	r3, #0
 800d10c:	e054      	b.n	800d1b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	089b      	lsrs	r3, r3, #2
 800d11c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00e      	beq.n	800d144 <osThreadNew+0xa8>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	2b5b      	cmp	r3, #91	@ 0x5b
 800d12c:	d90a      	bls.n	800d144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d132:	2b00      	cmp	r3, #0
 800d134:	d006      	beq.n	800d144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <osThreadNew+0xa8>
        mem = 1;
 800d13e:	2301      	movs	r3, #1
 800d140:	61bb      	str	r3, [r7, #24]
 800d142:	e010      	b.n	800d166 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10c      	bne.n	800d166 <osThreadNew+0xca>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d108      	bne.n	800d166 <osThreadNew+0xca>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d104      	bne.n	800d166 <osThreadNew+0xca>
          mem = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	61bb      	str	r3, [r7, #24]
 800d160:	e001      	b.n	800d166 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d110      	bne.n	800d18e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d174:	9202      	str	r2, [sp, #8]
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	6a3a      	ldr	r2, [r7, #32]
 800d180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 fe1a 	bl	800ddbc <xTaskCreateStatic>
 800d188:	4603      	mov	r3, r0
 800d18a:	613b      	str	r3, [r7, #16]
 800d18c:	e013      	b.n	800d1b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d110      	bne.n	800d1b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	b29a      	uxth	r2, r3
 800d198:	f107 0310 	add.w	r3, r7, #16
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f000 fe68 	bl	800de7c <xTaskCreate>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d001      	beq.n	800d1b6 <osThreadNew+0x11a>
            hTask = NULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d1b6:	693b      	ldr	r3, [r7, #16]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3728      	adds	r7, #40	@ 0x28
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1c8:	f3ef 8305 	mrs	r3, IPSR
 800d1cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <osDelay+0x1c>
    stat = osErrorISR;
 800d1d4:	f06f 0305 	mvn.w	r3, #5
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	e007      	b.n	800d1ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d002      	beq.n	800d1ec <osDelay+0x2c>
      vTaskDelay(ticks);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f001 f802 	bl	800e1f0 <vTaskDelay>
    }
  }

  return (stat);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
	...

0800d1f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4a07      	ldr	r2, [pc, #28]	@ (800d224 <vApplicationGetIdleTaskMemory+0x2c>)
 800d208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4a06      	ldr	r2, [pc, #24]	@ (800d228 <vApplicationGetIdleTaskMemory+0x30>)
 800d20e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2280      	movs	r2, #128	@ 0x80
 800d214:	601a      	str	r2, [r3, #0]
}
 800d216:	bf00      	nop
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	240005b4 	.word	0x240005b4
 800d228:	24000610 	.word	0x24000610

0800d22c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4a07      	ldr	r2, [pc, #28]	@ (800d258 <vApplicationGetTimerTaskMemory+0x2c>)
 800d23c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	4a06      	ldr	r2, [pc, #24]	@ (800d25c <vApplicationGetTimerTaskMemory+0x30>)
 800d242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d24a:	601a      	str	r2, [r3, #0]
}
 800d24c:	bf00      	nop
 800d24e:	3714      	adds	r7, #20
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	24000810 	.word	0x24000810
 800d25c:	2400086c 	.word	0x2400086c

0800d260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 0208 	add.w	r2, r3, #8
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f103 0208 	add.w	r2, r3, #8
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f103 0208 	add.w	r2, r3, #8
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2ae:	bf00      	nop
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b085      	sub	sp, #20
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	689a      	ldr	r2, [r3, #8]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	601a      	str	r2, [r3, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	3714      	adds	r7, #20
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d302:	b480      	push	{r7}
 800d304:	b085      	sub	sp, #20
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d318:	d103      	bne.n	800d322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	e00c      	b.n	800d33c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3308      	adds	r3, #8
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	e002      	b.n	800d330 <vListInsert+0x2e>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d2f6      	bcs.n	800d32a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	685a      	ldr	r2, [r3, #4]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	68fa      	ldr	r2, [r7, #12]
 800d350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	683a      	ldr	r2, [r7, #0]
 800d356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	601a      	str	r2, [r3, #0]
}
 800d368:	bf00      	nop
 800d36a:	3714      	adds	r7, #20
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d374:	b480      	push	{r7}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	6892      	ldr	r2, [r2, #8]
 800d38a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	6852      	ldr	r2, [r2, #4]
 800d394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d103      	bne.n	800d3a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	689a      	ldr	r2, [r3, #8]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	1e5a      	subs	r2, r3, #1
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3714      	adds	r7, #20
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10b      	bne.n	800d3f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	e7fd      	b.n	800d3f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d3f4:	f002 f8f0 	bl	800f5d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d400:	68f9      	ldr	r1, [r7, #12]
 800d402:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d404:	fb01 f303 	mul.w	r3, r1, r3
 800d408:	441a      	add	r2, r3
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d424:	3b01      	subs	r3, #1
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d42a:	fb01 f303 	mul.w	r3, r1, r3
 800d42e:	441a      	add	r2, r3
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	22ff      	movs	r2, #255	@ 0xff
 800d438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	22ff      	movs	r2, #255	@ 0xff
 800d440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d114      	bne.n	800d474 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d01a      	beq.n	800d488 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	3310      	adds	r3, #16
 800d456:	4618      	mov	r0, r3
 800d458:	f001 f98e 	bl	800e778 <xTaskRemoveFromEventList>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d012      	beq.n	800d488 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d462:	4b0d      	ldr	r3, [pc, #52]	@ (800d498 <xQueueGenericReset+0xd0>)
 800d464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	e009      	b.n	800d488 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3310      	adds	r3, #16
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff fef1 	bl	800d260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3324      	adds	r3, #36	@ 0x24
 800d482:	4618      	mov	r0, r3
 800d484:	f7ff feec 	bl	800d260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d488:	f002 f8d8 	bl	800f63c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d48c:	2301      	movs	r3, #1
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	e000ed04 	.word	0xe000ed04

0800d49c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b08e      	sub	sp, #56	@ 0x38
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10b      	bne.n	800d4c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4c2:	bf00      	nop
 800d4c4:	bf00      	nop
 800d4c6:	e7fd      	b.n	800d4c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10b      	bne.n	800d4e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d4e0:	bf00      	nop
 800d4e2:	bf00      	nop
 800d4e4:	e7fd      	b.n	800d4e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d002      	beq.n	800d4f2 <xQueueGenericCreateStatic+0x56>
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <xQueueGenericCreateStatic+0x5a>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e000      	b.n	800d4f8 <xQueueGenericCreateStatic+0x5c>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10b      	bne.n	800d514 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d500:	f383 8811 	msr	BASEPRI, r3
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	f3bf 8f4f 	dsb	sy
 800d50c:	623b      	str	r3, [r7, #32]
}
 800d50e:	bf00      	nop
 800d510:	bf00      	nop
 800d512:	e7fd      	b.n	800d510 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <xQueueGenericCreateStatic+0x84>
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <xQueueGenericCreateStatic+0x88>
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <xQueueGenericCreateStatic+0x8a>
 800d524:	2300      	movs	r3, #0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10b      	bne.n	800d542 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	61fb      	str	r3, [r7, #28]
}
 800d53c:	bf00      	nop
 800d53e:	bf00      	nop
 800d540:	e7fd      	b.n	800d53e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d542:	2350      	movs	r3, #80	@ 0x50
 800d544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b50      	cmp	r3, #80	@ 0x50
 800d54a:	d00b      	beq.n	800d564 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	61bb      	str	r3, [r7, #24]
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	e7fd      	b.n	800d560 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d564:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00d      	beq.n	800d58c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d578:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	4613      	mov	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	68b9      	ldr	r1, [r7, #8]
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f000 f805 	bl	800d596 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d58e:	4618      	mov	r0, r3
 800d590:	3730      	adds	r7, #48	@ 0x30
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	607a      	str	r2, [r7, #4]
 800d5a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d103      	bne.n	800d5b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	69ba      	ldr	r2, [r7, #24]
 800d5ae:	601a      	str	r2, [r3, #0]
 800d5b0:	e002      	b.n	800d5b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5c4:	2101      	movs	r1, #1
 800d5c6:	69b8      	ldr	r0, [r7, #24]
 800d5c8:	f7ff fefe 	bl	800d3c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	78fa      	ldrb	r2, [r7, #3]
 800d5d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5d4:	bf00      	nop
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08e      	sub	sp, #56	@ 0x38
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10b      	bne.n	800d610 <xQueueGenericSend+0x34>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d60a:	bf00      	nop
 800d60c:	bf00      	nop
 800d60e:	e7fd      	b.n	800d60c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d103      	bne.n	800d61e <xQueueGenericSend+0x42>
 800d616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <xQueueGenericSend+0x46>
 800d61e:	2301      	movs	r3, #1
 800d620:	e000      	b.n	800d624 <xQueueGenericSend+0x48>
 800d622:	2300      	movs	r3, #0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10b      	bne.n	800d640 <xQueueGenericSend+0x64>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	e7fd      	b.n	800d63c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	2b02      	cmp	r3, #2
 800d644:	d103      	bne.n	800d64e <xQueueGenericSend+0x72>
 800d646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d101      	bne.n	800d652 <xQueueGenericSend+0x76>
 800d64e:	2301      	movs	r3, #1
 800d650:	e000      	b.n	800d654 <xQueueGenericSend+0x78>
 800d652:	2300      	movs	r3, #0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10b      	bne.n	800d670 <xQueueGenericSend+0x94>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	623b      	str	r3, [r7, #32]
}
 800d66a:	bf00      	nop
 800d66c:	bf00      	nop
 800d66e:	e7fd      	b.n	800d66c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d670:	f001 fa42 	bl	800eaf8 <xTaskGetSchedulerState>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d102      	bne.n	800d680 <xQueueGenericSend+0xa4>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <xQueueGenericSend+0xa8>
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <xQueueGenericSend+0xaa>
 800d684:	2300      	movs	r3, #0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10b      	bne.n	800d6a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	61fb      	str	r3, [r7, #28]
}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	e7fd      	b.n	800d69e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6a2:	f001 ff99 	bl	800f5d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d302      	bcc.n	800d6b8 <xQueueGenericSend+0xdc>
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d129      	bne.n	800d70c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	68b9      	ldr	r1, [r7, #8]
 800d6bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6be:	f000 fa0f 	bl	800dae0 <prvCopyDataToQueue>
 800d6c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d010      	beq.n	800d6ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ce:	3324      	adds	r3, #36	@ 0x24
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 f851 	bl	800e778 <xTaskRemoveFromEventList>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d013      	beq.n	800d704 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d6dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d7dc <xQueueGenericSend+0x200>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	e00a      	b.n	800d704 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d6f4:	4b39      	ldr	r3, [pc, #228]	@ (800d7dc <xQueueGenericSend+0x200>)
 800d6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d704:	f001 ff9a 	bl	800f63c <vPortExitCritical>
				return pdPASS;
 800d708:	2301      	movs	r3, #1
 800d70a:	e063      	b.n	800d7d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d103      	bne.n	800d71a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d712:	f001 ff93 	bl	800f63c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d716:	2300      	movs	r3, #0
 800d718:	e05c      	b.n	800d7d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d106      	bne.n	800d72e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d720:	f107 0314 	add.w	r3, r7, #20
 800d724:	4618      	mov	r0, r3
 800d726:	f001 f88b 	bl	800e840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d72a:	2301      	movs	r3, #1
 800d72c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d72e:	f001 ff85 	bl	800f63c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d732:	f000 fdfb 	bl	800e32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d736:	f001 ff4f 	bl	800f5d8 <vPortEnterCritical>
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d740:	b25b      	sxtb	r3, r3
 800d742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d746:	d103      	bne.n	800d750 <xQueueGenericSend+0x174>
 800d748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d756:	b25b      	sxtb	r3, r3
 800d758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75c:	d103      	bne.n	800d766 <xQueueGenericSend+0x18a>
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d766:	f001 ff69 	bl	800f63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d76a:	1d3a      	adds	r2, r7, #4
 800d76c:	f107 0314 	add.w	r3, r7, #20
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f001 f87a 	bl	800e86c <xTaskCheckForTimeOut>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d124      	bne.n	800d7c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d77e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d780:	f000 faa6 	bl	800dcd0 <prvIsQueueFull>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d018      	beq.n	800d7bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78c:	3310      	adds	r3, #16
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f000 ff9e 	bl	800e6d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d79a:	f000 fa31 	bl	800dc00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d79e:	f000 fdd3 	bl	800e348 <xTaskResumeAll>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f47f af7c 	bne.w	800d6a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d7dc <xQueueGenericSend+0x200>)
 800d7ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	e772      	b.n	800d6a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7be:	f000 fa1f 	bl	800dc00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7c2:	f000 fdc1 	bl	800e348 <xTaskResumeAll>
 800d7c6:	e76c      	b.n	800d6a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7ca:	f000 fa19 	bl	800dc00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7ce:	f000 fdbb 	bl	800e348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3738      	adds	r7, #56	@ 0x38
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	e000ed04 	.word	0xe000ed04

0800d7e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b090      	sub	sp, #64	@ 0x40
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	e7fd      	b.n	800d80c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d103      	bne.n	800d81e <xQueueGenericSendFromISR+0x3e>
 800d816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <xQueueGenericSendFromISR+0x42>
 800d81e:	2301      	movs	r3, #1
 800d820:	e000      	b.n	800d824 <xQueueGenericSendFromISR+0x44>
 800d822:	2300      	movs	r3, #0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10b      	bne.n	800d840 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b02      	cmp	r3, #2
 800d844:	d103      	bne.n	800d84e <xQueueGenericSendFromISR+0x6e>
 800d846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d101      	bne.n	800d852 <xQueueGenericSendFromISR+0x72>
 800d84e:	2301      	movs	r3, #1
 800d850:	e000      	b.n	800d854 <xQueueGenericSendFromISR+0x74>
 800d852:	2300      	movs	r3, #0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10b      	bne.n	800d870 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d85c:	f383 8811 	msr	BASEPRI, r3
 800d860:	f3bf 8f6f 	isb	sy
 800d864:	f3bf 8f4f 	dsb	sy
 800d868:	623b      	str	r3, [r7, #32]
}
 800d86a:	bf00      	nop
 800d86c:	bf00      	nop
 800d86e:	e7fd      	b.n	800d86c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d870:	f001 ff92 	bl	800f798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d874:	f3ef 8211 	mrs	r2, BASEPRI
 800d878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	61fa      	str	r2, [r7, #28]
 800d88a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d88c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d88e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d898:	429a      	cmp	r2, r3
 800d89a:	d302      	bcc.n	800d8a2 <xQueueGenericSendFromISR+0xc2>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d12f      	bne.n	800d902 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	68b9      	ldr	r1, [r7, #8]
 800d8b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8b8:	f000 f912 	bl	800dae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c4:	d112      	bne.n	800d8ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d016      	beq.n	800d8fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d0:	3324      	adds	r3, #36	@ 0x24
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 ff50 	bl	800e778 <xTaskRemoveFromEventList>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00e      	beq.n	800d8fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00b      	beq.n	800d8fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	e007      	b.n	800d8fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	b25a      	sxtb	r2, r3
 800d8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d900:	e001      	b.n	800d906 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d902:	2300      	movs	r3, #0
 800d904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d908:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d910:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d914:	4618      	mov	r0, r3
 800d916:	3740      	adds	r7, #64	@ 0x40
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08c      	sub	sp, #48	@ 0x30
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d928:	2300      	movs	r3, #0
 800d92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10b      	bne.n	800d94e <xQueueReceive+0x32>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	623b      	str	r3, [r7, #32]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d103      	bne.n	800d95c <xQueueReceive+0x40>
 800d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <xQueueReceive+0x44>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e000      	b.n	800d962 <xQueueReceive+0x46>
 800d960:	2300      	movs	r3, #0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10b      	bne.n	800d97e <xQueueReceive+0x62>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	61fb      	str	r3, [r7, #28]
}
 800d978:	bf00      	nop
 800d97a:	bf00      	nop
 800d97c:	e7fd      	b.n	800d97a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d97e:	f001 f8bb 	bl	800eaf8 <xTaskGetSchedulerState>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d102      	bne.n	800d98e <xQueueReceive+0x72>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <xQueueReceive+0x76>
 800d98e:	2301      	movs	r3, #1
 800d990:	e000      	b.n	800d994 <xQueueReceive+0x78>
 800d992:	2300      	movs	r3, #0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10b      	bne.n	800d9b0 <xQueueReceive+0x94>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	61bb      	str	r3, [r7, #24]
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	e7fd      	b.n	800d9ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9b0:	f001 fe12 	bl	800f5d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d01f      	beq.n	800da00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9c0:	68b9      	ldr	r1, [r7, #8]
 800d9c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c4:	f000 f8f6 	bl	800dbb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ca:	1e5a      	subs	r2, r3, #1
 800d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d00f      	beq.n	800d9f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9da:	3310      	adds	r3, #16
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 fecb 	bl	800e778 <xTaskRemoveFromEventList>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800dadc <xQueueReceive+0x1c0>)
 800d9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9f8:	f001 fe20 	bl	800f63c <vPortExitCritical>
				return pdPASS;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e069      	b.n	800dad4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d103      	bne.n	800da0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da06:	f001 fe19 	bl	800f63c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e062      	b.n	800dad4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da14:	f107 0310 	add.w	r3, r7, #16
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 ff11 	bl	800e840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da1e:	2301      	movs	r3, #1
 800da20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da22:	f001 fe0b 	bl	800f63c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da26:	f000 fc81 	bl	800e32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da2a:	f001 fdd5 	bl	800f5d8 <vPortEnterCritical>
 800da2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da34:	b25b      	sxtb	r3, r3
 800da36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3a:	d103      	bne.n	800da44 <xQueueReceive+0x128>
 800da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da4a:	b25b      	sxtb	r3, r3
 800da4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da50:	d103      	bne.n	800da5a <xQueueReceive+0x13e>
 800da52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da54:	2200      	movs	r2, #0
 800da56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da5a:	f001 fdef 	bl	800f63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da5e:	1d3a      	adds	r2, r7, #4
 800da60:	f107 0310 	add.w	r3, r7, #16
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f000 ff00 	bl	800e86c <xTaskCheckForTimeOut>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d123      	bne.n	800daba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da74:	f000 f916 	bl	800dca4 <prvIsQueueEmpty>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d017      	beq.n	800daae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da80:	3324      	adds	r3, #36	@ 0x24
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fe24 	bl	800e6d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da8e:	f000 f8b7 	bl	800dc00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da92:	f000 fc59 	bl	800e348 <xTaskResumeAll>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d189      	bne.n	800d9b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dadc <xQueueReceive+0x1c0>)
 800da9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	e780      	b.n	800d9b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800daae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dab0:	f000 f8a6 	bl	800dc00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dab4:	f000 fc48 	bl	800e348 <xTaskResumeAll>
 800dab8:	e77a      	b.n	800d9b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800daba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dabc:	f000 f8a0 	bl	800dc00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dac0:	f000 fc42 	bl	800e348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dac6:	f000 f8ed 	bl	800dca4 <prvIsQueueEmpty>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f43f af6f 	beq.w	800d9b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3730      	adds	r7, #48	@ 0x30
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	e000ed04 	.word	0xe000ed04

0800dae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800daec:	2300      	movs	r3, #0
 800daee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10d      	bne.n	800db1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d14d      	bne.n	800dba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f001 f812 	bl	800eb34 <xTaskPriorityDisinherit>
 800db10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	609a      	str	r2, [r3, #8]
 800db18:	e043      	b.n	800dba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d119      	bne.n	800db54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6858      	ldr	r0, [r3, #4]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db28:	461a      	mov	r2, r3
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	f005 fa6d 	bl	801300a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db38:	441a      	add	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	429a      	cmp	r2, r3
 800db48:	d32b      	bcc.n	800dba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	605a      	str	r2, [r3, #4]
 800db52:	e026      	b.n	800dba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	68d8      	ldr	r0, [r3, #12]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db5c:	461a      	mov	r2, r3
 800db5e:	68b9      	ldr	r1, [r7, #8]
 800db60:	f005 fa53 	bl	801300a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db6c:	425b      	negs	r3, r3
 800db6e:	441a      	add	r2, r3
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68da      	ldr	r2, [r3, #12]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d207      	bcs.n	800db90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db88:	425b      	negs	r3, r3
 800db8a:	441a      	add	r2, r3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b02      	cmp	r3, #2
 800db94:	d105      	bne.n	800dba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dbaa:	697b      	ldr	r3, [r7, #20]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d018      	beq.n	800dbf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbce:	441a      	add	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	68da      	ldr	r2, [r3, #12]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d303      	bcc.n	800dbe8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68d9      	ldr	r1, [r3, #12]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	6838      	ldr	r0, [r7, #0]
 800dbf4:	f005 fa09 	bl	801300a <memcpy>
	}
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc08:	f001 fce6 	bl	800f5d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc14:	e011      	b.n	800dc3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d012      	beq.n	800dc44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	3324      	adds	r3, #36	@ 0x24
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 fda8 	bl	800e778 <xTaskRemoveFromEventList>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc2e:	f000 fe81 	bl	800e934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
 800dc34:	3b01      	subs	r3, #1
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	dce9      	bgt.n	800dc16 <prvUnlockQueue+0x16>
 800dc42:	e000      	b.n	800dc46 <prvUnlockQueue+0x46>
					break;
 800dc44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	22ff      	movs	r2, #255	@ 0xff
 800dc4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dc4e:	f001 fcf5 	bl	800f63c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc52:	f001 fcc1 	bl	800f5d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc5e:	e011      	b.n	800dc84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d012      	beq.n	800dc8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	3310      	adds	r3, #16
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f000 fd83 	bl	800e778 <xTaskRemoveFromEventList>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc78:	f000 fe5c 	bl	800e934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc7c:	7bbb      	ldrb	r3, [r7, #14]
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	dce9      	bgt.n	800dc60 <prvUnlockQueue+0x60>
 800dc8c:	e000      	b.n	800dc90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	22ff      	movs	r2, #255	@ 0xff
 800dc94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dc98:	f001 fcd0 	bl	800f63c <vPortExitCritical>
}
 800dc9c:	bf00      	nop
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcac:	f001 fc94 	bl	800f5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d102      	bne.n	800dcbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	e001      	b.n	800dcc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcc2:	f001 fcbb 	bl	800f63c <vPortExitCritical>

	return xReturn;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcd8:	f001 fc7e 	bl	800f5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d102      	bne.n	800dcee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dce8:	2301      	movs	r3, #1
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	e001      	b.n	800dcf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcf2:	f001 fca3 	bl	800f63c <vPortExitCritical>

	return xReturn;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	e014      	b.n	800dd3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd10:	4a0f      	ldr	r2, [pc, #60]	@ (800dd50 <vQueueAddToRegistry+0x50>)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10b      	bne.n	800dd34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd1c:	490c      	ldr	r1, [pc, #48]	@ (800dd50 <vQueueAddToRegistry+0x50>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd26:	4a0a      	ldr	r2, [pc, #40]	@ (800dd50 <vQueueAddToRegistry+0x50>)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	00db      	lsls	r3, r3, #3
 800dd2c:	4413      	add	r3, r2
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd32:	e006      	b.n	800dd42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3301      	adds	r3, #1
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b07      	cmp	r3, #7
 800dd3e:	d9e7      	bls.n	800dd10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	24000c6c 	.word	0x24000c6c

0800dd54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd64:	f001 fc38 	bl	800f5d8 <vPortEnterCritical>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd6e:	b25b      	sxtb	r3, r3
 800dd70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd74:	d103      	bne.n	800dd7e <vQueueWaitForMessageRestricted+0x2a>
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd84:	b25b      	sxtb	r3, r3
 800dd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8a:	d103      	bne.n	800dd94 <vQueueWaitForMessageRestricted+0x40>
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd94:	f001 fc52 	bl	800f63c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d106      	bne.n	800ddae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	3324      	adds	r3, #36	@ 0x24
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	68b9      	ldr	r1, [r7, #8]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fcb9 	bl	800e720 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddae:	6978      	ldr	r0, [r7, #20]
 800ddb0:	f7ff ff26 	bl	800dc00 <prvUnlockQueue>
	}
 800ddb4:	bf00      	nop
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08e      	sub	sp, #56	@ 0x38
 800ddc0:	af04      	add	r7, sp, #16
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10b      	bne.n	800dde8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	623b      	str	r3, [r7, #32]
}
 800dde2:	bf00      	nop
 800dde4:	bf00      	nop
 800dde6:	e7fd      	b.n	800dde4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10b      	bne.n	800de06 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	61fb      	str	r3, [r7, #28]
}
 800de00:	bf00      	nop
 800de02:	bf00      	nop
 800de04:	e7fd      	b.n	800de02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de06:	235c      	movs	r3, #92	@ 0x5c
 800de08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800de0e:	d00b      	beq.n	800de28 <xTaskCreateStatic+0x6c>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	61bb      	str	r3, [r7, #24]
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	e7fd      	b.n	800de24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01e      	beq.n	800de6e <xTaskCreateStatic+0xb2>
 800de30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de32:	2b00      	cmp	r3, #0
 800de34:	d01b      	beq.n	800de6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	2202      	movs	r2, #2
 800de44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de48:	2300      	movs	r3, #0
 800de4a:	9303      	str	r3, [sp, #12]
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	68b9      	ldr	r1, [r7, #8]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f850 	bl	800df06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de68:	f000 f8de 	bl	800e028 <prvAddNewTaskToReadyList>
 800de6c:	e001      	b.n	800de72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de72:	697b      	ldr	r3, [r7, #20]
	}
 800de74:	4618      	mov	r0, r3
 800de76:	3728      	adds	r7, #40	@ 0x28
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08c      	sub	sp, #48	@ 0x30
 800de80:	af04      	add	r7, sp, #16
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de8c:	88fb      	ldrh	r3, [r7, #6]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4618      	mov	r0, r3
 800de92:	f001 fcc3 	bl	800f81c <pvPortMalloc>
 800de96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00e      	beq.n	800debc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de9e:	205c      	movs	r0, #92	@ 0x5c
 800dea0:	f001 fcbc 	bl	800f81c <pvPortMalloc>
 800dea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d003      	beq.n	800deb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	697a      	ldr	r2, [r7, #20]
 800deb0:	631a      	str	r2, [r3, #48]	@ 0x30
 800deb2:	e005      	b.n	800dec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deb4:	6978      	ldr	r0, [r7, #20]
 800deb6:	f001 fd7f 	bl	800f9b8 <vPortFree>
 800deba:	e001      	b.n	800dec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800debc:	2300      	movs	r3, #0
 800debe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d017      	beq.n	800def6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dece:	88fa      	ldrh	r2, [r7, #6]
 800ded0:	2300      	movs	r3, #0
 800ded2:	9303      	str	r3, [sp, #12]
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	9302      	str	r3, [sp, #8]
 800ded8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f80e 	bl	800df06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deea:	69f8      	ldr	r0, [r7, #28]
 800deec:	f000 f89c 	bl	800e028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800def0:	2301      	movs	r3, #1
 800def2:	61bb      	str	r3, [r7, #24]
 800def4:	e002      	b.n	800defc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800def6:	f04f 33ff 	mov.w	r3, #4294967295
 800defa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800defc:	69bb      	ldr	r3, [r7, #24]
	}
 800defe:	4618      	mov	r0, r3
 800df00:	3720      	adds	r7, #32
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b088      	sub	sp, #32
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	60b9      	str	r1, [r7, #8]
 800df10:	607a      	str	r2, [r7, #4]
 800df12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	461a      	mov	r2, r3
 800df1e:	21a5      	movs	r1, #165	@ 0xa5
 800df20:	f004 ffe3 	bl	8012eea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800df2e:	440b      	add	r3, r1
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	f023 0307 	bic.w	r3, r3, #7
 800df3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00b      	beq.n	800df60 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	617b      	str	r3, [r7, #20]
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	e7fd      	b.n	800df5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01f      	beq.n	800dfa6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df66:	2300      	movs	r3, #0
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	e012      	b.n	800df92 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	7819      	ldrb	r1, [r3, #0]
 800df74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4413      	add	r3, r2
 800df7a:	3334      	adds	r3, #52	@ 0x34
 800df7c:	460a      	mov	r2, r1
 800df7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	4413      	add	r3, r2
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d006      	beq.n	800df9a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	3301      	adds	r3, #1
 800df90:	61fb      	str	r3, [r7, #28]
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	2b0f      	cmp	r3, #15
 800df96:	d9e9      	bls.n	800df6c <prvInitialiseNewTask+0x66>
 800df98:	e000      	b.n	800df9c <prvInitialiseNewTask+0x96>
			{
				break;
 800df9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dfa4:	e003      	b.n	800dfae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb0:	2b37      	cmp	r3, #55	@ 0x37
 800dfb2:	d901      	bls.n	800dfb8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfb4:	2337      	movs	r3, #55	@ 0x37
 800dfb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfcc:	3304      	adds	r3, #4
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7ff f966 	bl	800d2a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff f961 	bl	800d2a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dff2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff6:	2200      	movs	r2, #0
 800dff8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	68f9      	ldr	r1, [r7, #12]
 800e006:	69b8      	ldr	r0, [r7, #24]
 800e008:	f001 f9b2 	bl	800f370 <pxPortInitialiseStack>
 800e00c:	4602      	mov	r2, r0
 800e00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e010:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e01e:	bf00      	nop
 800e020:	3720      	adds	r7, #32
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e030:	f001 fad2 	bl	800f5d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e034:	4b2d      	ldr	r3, [pc, #180]	@ (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3301      	adds	r3, #1
 800e03a:	4a2c      	ldr	r2, [pc, #176]	@ (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e03c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e03e:	4b2c      	ldr	r3, [pc, #176]	@ (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d109      	bne.n	800e05a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e046:	4a2a      	ldr	r2, [pc, #168]	@ (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e04c:	4b27      	ldr	r3, [pc, #156]	@ (800e0ec <prvAddNewTaskToReadyList+0xc4>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d110      	bne.n	800e076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e054:	f000 fc92 	bl	800e97c <prvInitialiseTaskLists>
 800e058:	e00d      	b.n	800e076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e05a:	4b26      	ldr	r3, [pc, #152]	@ (800e0f4 <prvAddNewTaskToReadyList+0xcc>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d109      	bne.n	800e076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e062:	4b23      	ldr	r3, [pc, #140]	@ (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d802      	bhi.n	800e076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e070:	4a1f      	ldr	r2, [pc, #124]	@ (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e076:	4b20      	ldr	r3, [pc, #128]	@ (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3301      	adds	r3, #1
 800e07c:	4a1e      	ldr	r2, [pc, #120]	@ (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e07e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e080:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f8 <prvAddNewTaskToReadyList+0xd0>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08c:	4b1b      	ldr	r3, [pc, #108]	@ (800e0fc <prvAddNewTaskToReadyList+0xd4>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d903      	bls.n	800e09c <prvAddNewTaskToReadyList+0x74>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e098:	4a18      	ldr	r2, [pc, #96]	@ (800e0fc <prvAddNewTaskToReadyList+0xd4>)
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4a15      	ldr	r2, [pc, #84]	@ (800e100 <prvAddNewTaskToReadyList+0xd8>)
 800e0aa:	441a      	add	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	f7ff f901 	bl	800d2ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0b8:	f001 fac0 	bl	800f63c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f4 <prvAddNewTaskToReadyList+0xcc>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00e      	beq.n	800e0e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f0 <prvAddNewTaskToReadyList+0xc8>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d207      	bcs.n	800e0e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e104 <prvAddNewTaskToReadyList+0xdc>)
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	24001180 	.word	0x24001180
 800e0f0:	24000cac 	.word	0x24000cac
 800e0f4:	2400118c 	.word	0x2400118c
 800e0f8:	2400119c 	.word	0x2400119c
 800e0fc:	24001188 	.word	0x24001188
 800e100:	24000cb0 	.word	0x24000cb0
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e110:	f001 fa62 	bl	800f5d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <vTaskDelete+0x18>
 800e11a:	4b2d      	ldr	r3, [pc, #180]	@ (800e1d0 <vTaskDelete+0xc8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	e000      	b.n	800e122 <vTaskDelete+0x1a>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3304      	adds	r3, #4
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff f923 	bl	800d374 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e132:	2b00      	cmp	r3, #0
 800e134:	d004      	beq.n	800e140 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3318      	adds	r3, #24
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff f91a 	bl	800d374 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e140:	4b24      	ldr	r3, [pc, #144]	@ (800e1d4 <vTaskDelete+0xcc>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3301      	adds	r3, #1
 800e146:	4a23      	ldr	r2, [pc, #140]	@ (800e1d4 <vTaskDelete+0xcc>)
 800e148:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e14a:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <vTaskDelete+0xc8>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d10b      	bne.n	800e16c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3304      	adds	r3, #4
 800e158:	4619      	mov	r1, r3
 800e15a:	481f      	ldr	r0, [pc, #124]	@ (800e1d8 <vTaskDelete+0xd0>)
 800e15c:	f7ff f8ad 	bl	800d2ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e160:	4b1e      	ldr	r3, [pc, #120]	@ (800e1dc <vTaskDelete+0xd4>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	4a1d      	ldr	r2, [pc, #116]	@ (800e1dc <vTaskDelete+0xd4>)
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	e009      	b.n	800e180 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e16c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1e0 <vTaskDelete+0xd8>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3b01      	subs	r3, #1
 800e172:	4a1b      	ldr	r2, [pc, #108]	@ (800e1e0 <vTaskDelete+0xd8>)
 800e174:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 fc6e 	bl	800ea58 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e17c:	f000 fc9c 	bl	800eab8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e180:	f001 fa5c 	bl	800f63c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e184:	4b17      	ldr	r3, [pc, #92]	@ (800e1e4 <vTaskDelete+0xdc>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d01c      	beq.n	800e1c6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e18c:	4b10      	ldr	r3, [pc, #64]	@ (800e1d0 <vTaskDelete+0xc8>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	429a      	cmp	r2, r3
 800e194:	d117      	bne.n	800e1c6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e196:	4b14      	ldr	r3, [pc, #80]	@ (800e1e8 <vTaskDelete+0xe0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00b      	beq.n	800e1b6 <vTaskDelete+0xae>
	__asm volatile
 800e19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	60bb      	str	r3, [r7, #8]
}
 800e1b0:	bf00      	nop
 800e1b2:	bf00      	nop
 800e1b4:	e7fd      	b.n	800e1b2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1ec <vTaskDelete+0xe4>)
 800e1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	24000cac 	.word	0x24000cac
 800e1d4:	2400119c 	.word	0x2400119c
 800e1d8:	24001154 	.word	0x24001154
 800e1dc:	24001168 	.word	0x24001168
 800e1e0:	24001180 	.word	0x24001180
 800e1e4:	2400118c 	.word	0x2400118c
 800e1e8:	240011a8 	.word	0x240011a8
 800e1ec:	e000ed04 	.word	0xe000ed04

0800e1f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d018      	beq.n	800e234 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e202:	4b14      	ldr	r3, [pc, #80]	@ (800e254 <vTaskDelay+0x64>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00b      	beq.n	800e222 <vTaskDelay+0x32>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	60bb      	str	r3, [r7, #8]
}
 800e21c:	bf00      	nop
 800e21e:	bf00      	nop
 800e220:	e7fd      	b.n	800e21e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e222:	f000 f883 	bl	800e32c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e226:	2100      	movs	r1, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fcf3 	bl	800ec14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e22e:	f000 f88b 	bl	800e348 <xTaskResumeAll>
 800e232:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d107      	bne.n	800e24a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e23a:	4b07      	ldr	r3, [pc, #28]	@ (800e258 <vTaskDelay+0x68>)
 800e23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	240011a8 	.word	0x240011a8
 800e258:	e000ed04 	.word	0xe000ed04

0800e25c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08a      	sub	sp, #40	@ 0x28
 800e260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e26a:	463a      	mov	r2, r7
 800e26c:	1d39      	adds	r1, r7, #4
 800e26e:	f107 0308 	add.w	r3, r7, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe ffc0 	bl	800d1f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	9202      	str	r2, [sp, #8]
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	2300      	movs	r3, #0
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	2300      	movs	r3, #0
 800e288:	460a      	mov	r2, r1
 800e28a:	4922      	ldr	r1, [pc, #136]	@ (800e314 <vTaskStartScheduler+0xb8>)
 800e28c:	4822      	ldr	r0, [pc, #136]	@ (800e318 <vTaskStartScheduler+0xbc>)
 800e28e:	f7ff fd95 	bl	800ddbc <xTaskCreateStatic>
 800e292:	4603      	mov	r3, r0
 800e294:	4a21      	ldr	r2, [pc, #132]	@ (800e31c <vTaskStartScheduler+0xc0>)
 800e296:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e298:	4b20      	ldr	r3, [pc, #128]	@ (800e31c <vTaskStartScheduler+0xc0>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	e001      	b.n	800e2aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d102      	bne.n	800e2b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2b0:	f000 fd04 	bl	800ecbc <xTimerCreateTimerTask>
 800e2b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d116      	bne.n	800e2ea <vTaskStartScheduler+0x8e>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	613b      	str	r3, [r7, #16]
}
 800e2ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2d0:	4b13      	ldr	r3, [pc, #76]	@ (800e320 <vTaskStartScheduler+0xc4>)
 800e2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e2d8:	4b12      	ldr	r3, [pc, #72]	@ (800e324 <vTaskStartScheduler+0xc8>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e2de:	4b12      	ldr	r3, [pc, #72]	@ (800e328 <vTaskStartScheduler+0xcc>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2e4:	f001 f8d4 	bl	800f490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2e8:	e00f      	b.n	800e30a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f0:	d10b      	bne.n	800e30a <vTaskStartScheduler+0xae>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60fb      	str	r3, [r7, #12]
}
 800e304:	bf00      	nop
 800e306:	bf00      	nop
 800e308:	e7fd      	b.n	800e306 <vTaskStartScheduler+0xaa>
}
 800e30a:	bf00      	nop
 800e30c:	3718      	adds	r7, #24
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	080154ec 	.word	0x080154ec
 800e318:	0800e94d 	.word	0x0800e94d
 800e31c:	240011a4 	.word	0x240011a4
 800e320:	240011a0 	.word	0x240011a0
 800e324:	2400118c 	.word	0x2400118c
 800e328:	24001184 	.word	0x24001184

0800e32c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e330:	4b04      	ldr	r3, [pc, #16]	@ (800e344 <vTaskSuspendAll+0x18>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3301      	adds	r3, #1
 800e336:	4a03      	ldr	r2, [pc, #12]	@ (800e344 <vTaskSuspendAll+0x18>)
 800e338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e33a:	bf00      	nop
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	240011a8 	.word	0x240011a8

0800e348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e352:	2300      	movs	r3, #0
 800e354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e356:	4b42      	ldr	r3, [pc, #264]	@ (800e460 <xTaskResumeAll+0x118>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10b      	bne.n	800e376 <xTaskResumeAll+0x2e>
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	603b      	str	r3, [r7, #0]
}
 800e370:	bf00      	nop
 800e372:	bf00      	nop
 800e374:	e7fd      	b.n	800e372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e376:	f001 f92f 	bl	800f5d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e37a:	4b39      	ldr	r3, [pc, #228]	@ (800e460 <xTaskResumeAll+0x118>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3b01      	subs	r3, #1
 800e380:	4a37      	ldr	r2, [pc, #220]	@ (800e460 <xTaskResumeAll+0x118>)
 800e382:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e384:	4b36      	ldr	r3, [pc, #216]	@ (800e460 <xTaskResumeAll+0x118>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d162      	bne.n	800e452 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e38c:	4b35      	ldr	r3, [pc, #212]	@ (800e464 <xTaskResumeAll+0x11c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d05e      	beq.n	800e452 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e394:	e02f      	b.n	800e3f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e396:	4b34      	ldr	r3, [pc, #208]	@ (800e468 <xTaskResumeAll+0x120>)
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3318      	adds	r3, #24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fe ffe6 	bl	800d374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe ffe1 	bl	800d374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b6:	4b2d      	ldr	r3, [pc, #180]	@ (800e46c <xTaskResumeAll+0x124>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d903      	bls.n	800e3c6 <xTaskResumeAll+0x7e>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c2:	4a2a      	ldr	r2, [pc, #168]	@ (800e46c <xTaskResumeAll+0x124>)
 800e3c4:	6013      	str	r3, [r2, #0]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4a27      	ldr	r2, [pc, #156]	@ (800e470 <xTaskResumeAll+0x128>)
 800e3d4:	441a      	add	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f7fe ff6c 	bl	800d2ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3e6:	4b23      	ldr	r3, [pc, #140]	@ (800e474 <xTaskResumeAll+0x12c>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d302      	bcc.n	800e3f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e3f0:	4b21      	ldr	r3, [pc, #132]	@ (800e478 <xTaskResumeAll+0x130>)
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3f6:	4b1c      	ldr	r3, [pc, #112]	@ (800e468 <xTaskResumeAll+0x120>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1cb      	bne.n	800e396 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e404:	f000 fb58 	bl	800eab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e408:	4b1c      	ldr	r3, [pc, #112]	@ (800e47c <xTaskResumeAll+0x134>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d010      	beq.n	800e436 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e414:	f000 f846 	bl	800e4a4 <xTaskIncrementTick>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e41e:	4b16      	ldr	r3, [pc, #88]	@ (800e478 <xTaskResumeAll+0x130>)
 800e420:	2201      	movs	r2, #1
 800e422:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3b01      	subs	r3, #1
 800e428:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d1f1      	bne.n	800e414 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e430:	4b12      	ldr	r3, [pc, #72]	@ (800e47c <xTaskResumeAll+0x134>)
 800e432:	2200      	movs	r2, #0
 800e434:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e436:	4b10      	ldr	r3, [pc, #64]	@ (800e478 <xTaskResumeAll+0x130>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e43e:	2301      	movs	r3, #1
 800e440:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e442:	4b0f      	ldr	r3, [pc, #60]	@ (800e480 <xTaskResumeAll+0x138>)
 800e444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e448:	601a      	str	r2, [r3, #0]
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e452:	f001 f8f3 	bl	800f63c <vPortExitCritical>

	return xAlreadyYielded;
 800e456:	68bb      	ldr	r3, [r7, #8]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	240011a8 	.word	0x240011a8
 800e464:	24001180 	.word	0x24001180
 800e468:	24001140 	.word	0x24001140
 800e46c:	24001188 	.word	0x24001188
 800e470:	24000cb0 	.word	0x24000cb0
 800e474:	24000cac 	.word	0x24000cac
 800e478:	24001194 	.word	0x24001194
 800e47c:	24001190 	.word	0x24001190
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e48a:	4b05      	ldr	r3, [pc, #20]	@ (800e4a0 <xTaskGetTickCount+0x1c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e490:	687b      	ldr	r3, [r7, #4]
}
 800e492:	4618      	mov	r0, r3
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	24001184 	.word	0x24001184

0800e4a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b086      	sub	sp, #24
 800e4a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4ae:	4b4f      	ldr	r3, [pc, #316]	@ (800e5ec <xTaskIncrementTick+0x148>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f040 8090 	bne.w	800e5d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4b8:	4b4d      	ldr	r3, [pc, #308]	@ (800e5f0 <xTaskIncrementTick+0x14c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4c0:	4a4b      	ldr	r2, [pc, #300]	@ (800e5f0 <xTaskIncrementTick+0x14c>)
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d121      	bne.n	800e510 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e4cc:	4b49      	ldr	r3, [pc, #292]	@ (800e5f4 <xTaskIncrementTick+0x150>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00b      	beq.n	800e4ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800e4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	603b      	str	r3, [r7, #0]
}
 800e4e8:	bf00      	nop
 800e4ea:	bf00      	nop
 800e4ec:	e7fd      	b.n	800e4ea <xTaskIncrementTick+0x46>
 800e4ee:	4b41      	ldr	r3, [pc, #260]	@ (800e5f4 <xTaskIncrementTick+0x150>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	60fb      	str	r3, [r7, #12]
 800e4f4:	4b40      	ldr	r3, [pc, #256]	@ (800e5f8 <xTaskIncrementTick+0x154>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a3e      	ldr	r2, [pc, #248]	@ (800e5f4 <xTaskIncrementTick+0x150>)
 800e4fa:	6013      	str	r3, [r2, #0]
 800e4fc:	4a3e      	ldr	r2, [pc, #248]	@ (800e5f8 <xTaskIncrementTick+0x154>)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6013      	str	r3, [r2, #0]
 800e502:	4b3e      	ldr	r3, [pc, #248]	@ (800e5fc <xTaskIncrementTick+0x158>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3301      	adds	r3, #1
 800e508:	4a3c      	ldr	r2, [pc, #240]	@ (800e5fc <xTaskIncrementTick+0x158>)
 800e50a:	6013      	str	r3, [r2, #0]
 800e50c:	f000 fad4 	bl	800eab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e510:	4b3b      	ldr	r3, [pc, #236]	@ (800e600 <xTaskIncrementTick+0x15c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	429a      	cmp	r2, r3
 800e518:	d349      	bcc.n	800e5ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e51a:	4b36      	ldr	r3, [pc, #216]	@ (800e5f4 <xTaskIncrementTick+0x150>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d104      	bne.n	800e52e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e524:	4b36      	ldr	r3, [pc, #216]	@ (800e600 <xTaskIncrementTick+0x15c>)
 800e526:	f04f 32ff 	mov.w	r2, #4294967295
 800e52a:	601a      	str	r2, [r3, #0]
					break;
 800e52c:	e03f      	b.n	800e5ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e52e:	4b31      	ldr	r3, [pc, #196]	@ (800e5f4 <xTaskIncrementTick+0x150>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	429a      	cmp	r2, r3
 800e544:	d203      	bcs.n	800e54e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e546:	4a2e      	ldr	r2, [pc, #184]	@ (800e600 <xTaskIncrementTick+0x15c>)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e54c:	e02f      	b.n	800e5ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	3304      	adds	r3, #4
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe ff0e 	bl	800d374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d004      	beq.n	800e56a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	3318      	adds	r3, #24
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe ff05 	bl	800d374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e56e:	4b25      	ldr	r3, [pc, #148]	@ (800e604 <xTaskIncrementTick+0x160>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d903      	bls.n	800e57e <xTaskIncrementTick+0xda>
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e57a:	4a22      	ldr	r2, [pc, #136]	@ (800e604 <xTaskIncrementTick+0x160>)
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e582:	4613      	mov	r3, r2
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4413      	add	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4a1f      	ldr	r2, [pc, #124]	@ (800e608 <xTaskIncrementTick+0x164>)
 800e58c:	441a      	add	r2, r3
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	3304      	adds	r3, #4
 800e592:	4619      	mov	r1, r3
 800e594:	4610      	mov	r0, r2
 800e596:	f7fe fe90 	bl	800d2ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e59e:	4b1b      	ldr	r3, [pc, #108]	@ (800e60c <xTaskIncrementTick+0x168>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d3b8      	bcc.n	800e51a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ac:	e7b5      	b.n	800e51a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5ae:	4b17      	ldr	r3, [pc, #92]	@ (800e60c <xTaskIncrementTick+0x168>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5b4:	4914      	ldr	r1, [pc, #80]	@ (800e608 <xTaskIncrementTick+0x164>)
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4413      	add	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	440b      	add	r3, r1
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d901      	bls.n	800e5ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e5ca:	4b11      	ldr	r3, [pc, #68]	@ (800e610 <xTaskIncrementTick+0x16c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	e004      	b.n	800e5e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e614 <xTaskIncrementTick+0x170>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	4a0d      	ldr	r2, [pc, #52]	@ (800e614 <xTaskIncrementTick+0x170>)
 800e5e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e5e2:	697b      	ldr	r3, [r7, #20]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	240011a8 	.word	0x240011a8
 800e5f0:	24001184 	.word	0x24001184
 800e5f4:	24001138 	.word	0x24001138
 800e5f8:	2400113c 	.word	0x2400113c
 800e5fc:	24001198 	.word	0x24001198
 800e600:	240011a0 	.word	0x240011a0
 800e604:	24001188 	.word	0x24001188
 800e608:	24000cb0 	.word	0x24000cb0
 800e60c:	24000cac 	.word	0x24000cac
 800e610:	24001194 	.word	0x24001194
 800e614:	24001190 	.word	0x24001190

0800e618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e61e:	4b28      	ldr	r3, [pc, #160]	@ (800e6c0 <vTaskSwitchContext+0xa8>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e626:	4b27      	ldr	r3, [pc, #156]	@ (800e6c4 <vTaskSwitchContext+0xac>)
 800e628:	2201      	movs	r2, #1
 800e62a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e62c:	e042      	b.n	800e6b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e62e:	4b25      	ldr	r3, [pc, #148]	@ (800e6c4 <vTaskSwitchContext+0xac>)
 800e630:	2200      	movs	r2, #0
 800e632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e634:	4b24      	ldr	r3, [pc, #144]	@ (800e6c8 <vTaskSwitchContext+0xb0>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	60fb      	str	r3, [r7, #12]
 800e63a:	e011      	b.n	800e660 <vTaskSwitchContext+0x48>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10b      	bne.n	800e65a <vTaskSwitchContext+0x42>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	607b      	str	r3, [r7, #4]
}
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	e7fd      	b.n	800e656 <vTaskSwitchContext+0x3e>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	60fb      	str	r3, [r7, #12]
 800e660:	491a      	ldr	r1, [pc, #104]	@ (800e6cc <vTaskSwitchContext+0xb4>)
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d0e3      	beq.n	800e63c <vTaskSwitchContext+0x24>
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4613      	mov	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	4a13      	ldr	r2, [pc, #76]	@ (800e6cc <vTaskSwitchContext+0xb4>)
 800e680:	4413      	add	r3, r2
 800e682:	60bb      	str	r3, [r7, #8]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	685a      	ldr	r2, [r3, #4]
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	605a      	str	r2, [r3, #4]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	3308      	adds	r3, #8
 800e696:	429a      	cmp	r2, r3
 800e698:	d104      	bne.n	800e6a4 <vTaskSwitchContext+0x8c>
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	685a      	ldr	r2, [r3, #4]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	605a      	str	r2, [r3, #4]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	4a09      	ldr	r2, [pc, #36]	@ (800e6d0 <vTaskSwitchContext+0xb8>)
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	4a06      	ldr	r2, [pc, #24]	@ (800e6c8 <vTaskSwitchContext+0xb0>)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6013      	str	r3, [r2, #0]
}
 800e6b4:	bf00      	nop
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	240011a8 	.word	0x240011a8
 800e6c4:	24001194 	.word	0x24001194
 800e6c8:	24001188 	.word	0x24001188
 800e6cc:	24000cb0 	.word	0x24000cb0
 800e6d0:	24000cac 	.word	0x24000cac

0800e6d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10b      	bne.n	800e6fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	60fb      	str	r3, [r7, #12]
}
 800e6f6:	bf00      	nop
 800e6f8:	bf00      	nop
 800e6fa:	e7fd      	b.n	800e6f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6fc:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <vTaskPlaceOnEventList+0x48>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3318      	adds	r3, #24
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7fe fdfc 	bl	800d302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e70a:	2101      	movs	r1, #1
 800e70c:	6838      	ldr	r0, [r7, #0]
 800e70e:	f000 fa81 	bl	800ec14 <prvAddCurrentTaskToDelayedList>
}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	24000cac 	.word	0x24000cac

0800e720 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10b      	bne.n	800e74a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	617b      	str	r3, [r7, #20]
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	e7fd      	b.n	800e746 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e74a:	4b0a      	ldr	r3, [pc, #40]	@ (800e774 <vTaskPlaceOnEventListRestricted+0x54>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	3318      	adds	r3, #24
 800e750:	4619      	mov	r1, r3
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f7fe fdb1 	bl	800d2ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d002      	beq.n	800e764 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e75e:	f04f 33ff 	mov.w	r3, #4294967295
 800e762:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e764:	6879      	ldr	r1, [r7, #4]
 800e766:	68b8      	ldr	r0, [r7, #8]
 800e768:	f000 fa54 	bl	800ec14 <prvAddCurrentTaskToDelayedList>
	}
 800e76c:	bf00      	nop
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	24000cac 	.word	0x24000cac

0800e778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10b      	bne.n	800e7a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	60fb      	str	r3, [r7, #12]
}
 800e7a0:	bf00      	nop
 800e7a2:	bf00      	nop
 800e7a4:	e7fd      	b.n	800e7a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	3318      	adds	r3, #24
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe fde2 	bl	800d374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e828 <xTaskRemoveFromEventList+0xb0>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d11d      	bne.n	800e7f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fe fdd9 	bl	800d374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c6:	4b19      	ldr	r3, [pc, #100]	@ (800e82c <xTaskRemoveFromEventList+0xb4>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d903      	bls.n	800e7d6 <xTaskRemoveFromEventList+0x5e>
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d2:	4a16      	ldr	r2, [pc, #88]	@ (800e82c <xTaskRemoveFromEventList+0xb4>)
 800e7d4:	6013      	str	r3, [r2, #0]
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7da:	4613      	mov	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4a13      	ldr	r2, [pc, #76]	@ (800e830 <xTaskRemoveFromEventList+0xb8>)
 800e7e4:	441a      	add	r2, r3
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7fe fd64 	bl	800d2ba <vListInsertEnd>
 800e7f2:	e005      	b.n	800e800 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3318      	adds	r3, #24
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	480e      	ldr	r0, [pc, #56]	@ (800e834 <xTaskRemoveFromEventList+0xbc>)
 800e7fc:	f7fe fd5d 	bl	800d2ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e804:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <xTaskRemoveFromEventList+0xc0>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d905      	bls.n	800e81a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e80e:	2301      	movs	r3, #1
 800e810:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e812:	4b0a      	ldr	r3, [pc, #40]	@ (800e83c <xTaskRemoveFromEventList+0xc4>)
 800e814:	2201      	movs	r2, #1
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	e001      	b.n	800e81e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e81a:	2300      	movs	r3, #0
 800e81c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	240011a8 	.word	0x240011a8
 800e82c:	24001188 	.word	0x24001188
 800e830:	24000cb0 	.word	0x24000cb0
 800e834:	24001140 	.word	0x24001140
 800e838:	24000cac 	.word	0x24000cac
 800e83c:	24001194 	.word	0x24001194

0800e840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e848:	4b06      	ldr	r3, [pc, #24]	@ (800e864 <vTaskInternalSetTimeOutState+0x24>)
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e850:	4b05      	ldr	r3, [pc, #20]	@ (800e868 <vTaskInternalSetTimeOutState+0x28>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	605a      	str	r2, [r3, #4]
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	24001198 	.word	0x24001198
 800e868:	24001184 	.word	0x24001184

0800e86c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d10b      	bne.n	800e894 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	613b      	str	r3, [r7, #16]
}
 800e88e:	bf00      	nop
 800e890:	bf00      	nop
 800e892:	e7fd      	b.n	800e890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10b      	bne.n	800e8b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	60fb      	str	r3, [r7, #12]
}
 800e8ac:	bf00      	nop
 800e8ae:	bf00      	nop
 800e8b0:	e7fd      	b.n	800e8ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e8b2:	f000 fe91 	bl	800f5d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8b6:	4b1d      	ldr	r3, [pc, #116]	@ (800e92c <xTaskCheckForTimeOut+0xc0>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ce:	d102      	bne.n	800e8d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	e023      	b.n	800e91e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b15      	ldr	r3, [pc, #84]	@ (800e930 <xTaskCheckForTimeOut+0xc4>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d007      	beq.n	800e8f2 <xTaskCheckForTimeOut+0x86>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d302      	bcc.n	800e8f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	e015      	b.n	800e91e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d20b      	bcs.n	800e914 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	1ad2      	subs	r2, r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff ff99 	bl	800e840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e90e:	2300      	movs	r3, #0
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e004      	b.n	800e91e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e91a:	2301      	movs	r3, #1
 800e91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e91e:	f000 fe8d 	bl	800f63c <vPortExitCritical>

	return xReturn;
 800e922:	69fb      	ldr	r3, [r7, #28]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3720      	adds	r7, #32
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	24001184 	.word	0x24001184
 800e930:	24001198 	.word	0x24001198

0800e934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e938:	4b03      	ldr	r3, [pc, #12]	@ (800e948 <vTaskMissedYield+0x14>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]
}
 800e93e:	bf00      	nop
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	24001194 	.word	0x24001194

0800e94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e954:	f000 f852 	bl	800e9fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e958:	4b06      	ldr	r3, [pc, #24]	@ (800e974 <prvIdleTask+0x28>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d9f9      	bls.n	800e954 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e960:	4b05      	ldr	r3, [pc, #20]	@ (800e978 <prvIdleTask+0x2c>)
 800e962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e970:	e7f0      	b.n	800e954 <prvIdleTask+0x8>
 800e972:	bf00      	nop
 800e974:	24000cb0 	.word	0x24000cb0
 800e978:	e000ed04 	.word	0xe000ed04

0800e97c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e982:	2300      	movs	r3, #0
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	e00c      	b.n	800e9a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4a12      	ldr	r2, [pc, #72]	@ (800e9dc <prvInitialiseTaskLists+0x60>)
 800e994:	4413      	add	r3, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fc62 	bl	800d260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	607b      	str	r3, [r7, #4]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b37      	cmp	r3, #55	@ 0x37
 800e9a6:	d9ef      	bls.n	800e988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9a8:	480d      	ldr	r0, [pc, #52]	@ (800e9e0 <prvInitialiseTaskLists+0x64>)
 800e9aa:	f7fe fc59 	bl	800d260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9ae:	480d      	ldr	r0, [pc, #52]	@ (800e9e4 <prvInitialiseTaskLists+0x68>)
 800e9b0:	f7fe fc56 	bl	800d260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9b4:	480c      	ldr	r0, [pc, #48]	@ (800e9e8 <prvInitialiseTaskLists+0x6c>)
 800e9b6:	f7fe fc53 	bl	800d260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9ba:	480c      	ldr	r0, [pc, #48]	@ (800e9ec <prvInitialiseTaskLists+0x70>)
 800e9bc:	f7fe fc50 	bl	800d260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9c0:	480b      	ldr	r0, [pc, #44]	@ (800e9f0 <prvInitialiseTaskLists+0x74>)
 800e9c2:	f7fe fc4d 	bl	800d260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f4 <prvInitialiseTaskLists+0x78>)
 800e9c8:	4a05      	ldr	r2, [pc, #20]	@ (800e9e0 <prvInitialiseTaskLists+0x64>)
 800e9ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f8 <prvInitialiseTaskLists+0x7c>)
 800e9ce:	4a05      	ldr	r2, [pc, #20]	@ (800e9e4 <prvInitialiseTaskLists+0x68>)
 800e9d0:	601a      	str	r2, [r3, #0]
}
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	24000cb0 	.word	0x24000cb0
 800e9e0:	24001110 	.word	0x24001110
 800e9e4:	24001124 	.word	0x24001124
 800e9e8:	24001140 	.word	0x24001140
 800e9ec:	24001154 	.word	0x24001154
 800e9f0:	2400116c 	.word	0x2400116c
 800e9f4:	24001138 	.word	0x24001138
 800e9f8:	2400113c 	.word	0x2400113c

0800e9fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea02:	e019      	b.n	800ea38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea04:	f000 fde8 	bl	800f5d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea08:	4b10      	ldr	r3, [pc, #64]	@ (800ea4c <prvCheckTasksWaitingTermination+0x50>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3304      	adds	r3, #4
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe fcad 	bl	800d374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea50 <prvCheckTasksWaitingTermination+0x54>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	4a0b      	ldr	r2, [pc, #44]	@ (800ea50 <prvCheckTasksWaitingTermination+0x54>)
 800ea22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea24:	4b0b      	ldr	r3, [pc, #44]	@ (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	4a0a      	ldr	r2, [pc, #40]	@ (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea2e:	f000 fe05 	bl	800f63c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f810 	bl	800ea58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea38:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <prvCheckTasksWaitingTermination+0x58>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e1      	bne.n	800ea04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	24001154 	.word	0x24001154
 800ea50:	24001180 	.word	0x24001180
 800ea54:	24001168 	.word	0x24001168

0800ea58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d108      	bne.n	800ea7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 ffa2 	bl	800f9b8 <vPortFree>
				vPortFree( pxTCB );
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 ff9f 	bl	800f9b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea7a:	e019      	b.n	800eab0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d103      	bne.n	800ea8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 ff96 	bl	800f9b8 <vPortFree>
	}
 800ea8c:	e010      	b.n	800eab0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea94:	2b02      	cmp	r3, #2
 800ea96:	d00b      	beq.n	800eab0 <prvDeleteTCB+0x58>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9c:	f383 8811 	msr	BASEPRI, r3
 800eaa0:	f3bf 8f6f 	isb	sy
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	60fb      	str	r3, [r7, #12]
}
 800eaaa:	bf00      	nop
 800eaac:	bf00      	nop
 800eaae:	e7fd      	b.n	800eaac <prvDeleteTCB+0x54>
	}
 800eab0:	bf00      	nop
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eabe:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <prvResetNextTaskUnblockTime+0x38>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d104      	bne.n	800ead2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eac8:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf4 <prvResetNextTaskUnblockTime+0x3c>)
 800eaca:	f04f 32ff 	mov.w	r2, #4294967295
 800eace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ead0:	e008      	b.n	800eae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ead2:	4b07      	ldr	r3, [pc, #28]	@ (800eaf0 <prvResetNextTaskUnblockTime+0x38>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	4a04      	ldr	r2, [pc, #16]	@ (800eaf4 <prvResetNextTaskUnblockTime+0x3c>)
 800eae2:	6013      	str	r3, [r2, #0]
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	24001138 	.word	0x24001138
 800eaf4:	240011a0 	.word	0x240011a0

0800eaf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eafe:	4b0b      	ldr	r3, [pc, #44]	@ (800eb2c <xTaskGetSchedulerState+0x34>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d102      	bne.n	800eb0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb06:	2301      	movs	r3, #1
 800eb08:	607b      	str	r3, [r7, #4]
 800eb0a:	e008      	b.n	800eb1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb0c:	4b08      	ldr	r3, [pc, #32]	@ (800eb30 <xTaskGetSchedulerState+0x38>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb14:	2302      	movs	r3, #2
 800eb16:	607b      	str	r3, [r7, #4]
 800eb18:	e001      	b.n	800eb1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb1e:	687b      	ldr	r3, [r7, #4]
	}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	2400118c 	.word	0x2400118c
 800eb30:	240011a8 	.word	0x240011a8

0800eb34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb40:	2300      	movs	r3, #0
 800eb42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d058      	beq.n	800ebfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ec08 <xTaskPriorityDisinherit+0xd4>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d00b      	beq.n	800eb6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	60fb      	str	r3, [r7, #12]
}
 800eb66:	bf00      	nop
 800eb68:	bf00      	nop
 800eb6a:	e7fd      	b.n	800eb68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10b      	bne.n	800eb8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	60bb      	str	r3, [r7, #8]
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	e7fd      	b.n	800eb88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb90:	1e5a      	subs	r2, r3, #1
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d02c      	beq.n	800ebfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d128      	bne.n	800ebfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	3304      	adds	r3, #4
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fe fbe0 	bl	800d374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	@ (800ec0c <xTaskPriorityDisinherit+0xd8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d903      	bls.n	800ebdc <xTaskPriorityDisinherit+0xa8>
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebd8:	4a0c      	ldr	r2, [pc, #48]	@ (800ec0c <xTaskPriorityDisinherit+0xd8>)
 800ebda:	6013      	str	r3, [r2, #0]
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	4413      	add	r3, r2
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4a09      	ldr	r2, [pc, #36]	@ (800ec10 <xTaskPriorityDisinherit+0xdc>)
 800ebea:	441a      	add	r2, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	3304      	adds	r3, #4
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	f7fe fb61 	bl	800d2ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebfc:	697b      	ldr	r3, [r7, #20]
	}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	24000cac 	.word	0x24000cac
 800ec0c:	24001188 	.word	0x24001188
 800ec10:	24000cb0 	.word	0x24000cb0

0800ec14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec1e:	4b21      	ldr	r3, [pc, #132]	@ (800eca4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec24:	4b20      	ldr	r3, [pc, #128]	@ (800eca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fe fba2 	bl	800d374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d10a      	bne.n	800ec4e <prvAddCurrentTaskToDelayedList+0x3a>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3304      	adds	r3, #4
 800ec44:	4619      	mov	r1, r3
 800ec46:	4819      	ldr	r0, [pc, #100]	@ (800ecac <prvAddCurrentTaskToDelayedList+0x98>)
 800ec48:	f7fe fb37 	bl	800d2ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec4c:	e026      	b.n	800ec9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4413      	add	r3, r2
 800ec54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec56:	4b14      	ldr	r3, [pc, #80]	@ (800eca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec5e:	68ba      	ldr	r2, [r7, #8]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d209      	bcs.n	800ec7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec66:	4b12      	ldr	r3, [pc, #72]	@ (800ecb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3304      	adds	r3, #4
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7fe fb45 	bl	800d302 <vListInsert>
}
 800ec78:	e010      	b.n	800ec9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ecb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec7c:	681a      	ldr	r2, [r3, #0]
 800ec7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eca8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3304      	adds	r3, #4
 800ec84:	4619      	mov	r1, r3
 800ec86:	4610      	mov	r0, r2
 800ec88:	f7fe fb3b 	bl	800d302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ecb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d202      	bcs.n	800ec9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec96:	4a08      	ldr	r2, [pc, #32]	@ (800ecb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	6013      	str	r3, [r2, #0]
}
 800ec9c:	bf00      	nop
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	24001184 	.word	0x24001184
 800eca8:	24000cac 	.word	0x24000cac
 800ecac:	2400116c 	.word	0x2400116c
 800ecb0:	2400113c 	.word	0x2400113c
 800ecb4:	24001138 	.word	0x24001138
 800ecb8:	240011a0 	.word	0x240011a0

0800ecbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	@ 0x28
 800ecc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ecc6:	f000 fb13 	bl	800f2f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ecca:	4b1d      	ldr	r3, [pc, #116]	@ (800ed40 <xTimerCreateTimerTask+0x84>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d021      	beq.n	800ed16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecda:	1d3a      	adds	r2, r7, #4
 800ecdc:	f107 0108 	add.w	r1, r7, #8
 800ece0:	f107 030c 	add.w	r3, r7, #12
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe faa1 	bl	800d22c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	9202      	str	r2, [sp, #8]
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	460a      	mov	r2, r1
 800ecfc:	4911      	ldr	r1, [pc, #68]	@ (800ed44 <xTimerCreateTimerTask+0x88>)
 800ecfe:	4812      	ldr	r0, [pc, #72]	@ (800ed48 <xTimerCreateTimerTask+0x8c>)
 800ed00:	f7ff f85c 	bl	800ddbc <xTaskCreateStatic>
 800ed04:	4603      	mov	r3, r0
 800ed06:	4a11      	ldr	r2, [pc, #68]	@ (800ed4c <xTimerCreateTimerTask+0x90>)
 800ed08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ed0a:	4b10      	ldr	r3, [pc, #64]	@ (800ed4c <xTimerCreateTimerTask+0x90>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ed12:	2301      	movs	r3, #1
 800ed14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10b      	bne.n	800ed34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	613b      	str	r3, [r7, #16]
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	e7fd      	b.n	800ed30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ed34:	697b      	ldr	r3, [r7, #20]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	240011dc 	.word	0x240011dc
 800ed44:	080154f4 	.word	0x080154f4
 800ed48:	0800ee89 	.word	0x0800ee89
 800ed4c:	240011e0 	.word	0x240011e0

0800ed50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08a      	sub	sp, #40	@ 0x28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10b      	bne.n	800ed80 <xTimerGenericCommand+0x30>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	623b      	str	r3, [r7, #32]
}
 800ed7a:	bf00      	nop
 800ed7c:	bf00      	nop
 800ed7e:	e7fd      	b.n	800ed7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed80:	4b19      	ldr	r3, [pc, #100]	@ (800ede8 <xTimerGenericCommand+0x98>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d02a      	beq.n	800edde <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b05      	cmp	r3, #5
 800ed98:	dc18      	bgt.n	800edcc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed9a:	f7ff fead 	bl	800eaf8 <xTaskGetSchedulerState>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	d109      	bne.n	800edb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eda4:	4b10      	ldr	r3, [pc, #64]	@ (800ede8 <xTimerGenericCommand+0x98>)
 800eda6:	6818      	ldr	r0, [r3, #0]
 800eda8:	f107 0110 	add.w	r1, r7, #16
 800edac:	2300      	movs	r3, #0
 800edae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edb0:	f7fe fc14 	bl	800d5dc <xQueueGenericSend>
 800edb4:	6278      	str	r0, [r7, #36]	@ 0x24
 800edb6:	e012      	b.n	800edde <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800edb8:	4b0b      	ldr	r3, [pc, #44]	@ (800ede8 <xTimerGenericCommand+0x98>)
 800edba:	6818      	ldr	r0, [r3, #0]
 800edbc:	f107 0110 	add.w	r1, r7, #16
 800edc0:	2300      	movs	r3, #0
 800edc2:	2200      	movs	r2, #0
 800edc4:	f7fe fc0a 	bl	800d5dc <xQueueGenericSend>
 800edc8:	6278      	str	r0, [r7, #36]	@ 0x24
 800edca:	e008      	b.n	800edde <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800edcc:	4b06      	ldr	r3, [pc, #24]	@ (800ede8 <xTimerGenericCommand+0x98>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	f107 0110 	add.w	r1, r7, #16
 800edd4:	2300      	movs	r3, #0
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	f7fe fd02 	bl	800d7e0 <xQueueGenericSendFromISR>
 800eddc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800edde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3728      	adds	r7, #40	@ 0x28
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	240011dc 	.word	0x240011dc

0800edec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edf6:	4b23      	ldr	r3, [pc, #140]	@ (800ee84 <prvProcessExpiredTimer+0x98>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	3304      	adds	r3, #4
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fab5 	bl	800d374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee10:	f003 0304 	and.w	r3, r3, #4
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d023      	beq.n	800ee60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	699a      	ldr	r2, [r3, #24]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	18d1      	adds	r1, r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	6978      	ldr	r0, [r7, #20]
 800ee26:	f000 f8d5 	bl	800efd4 <prvInsertTimerInActiveList>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d020      	beq.n	800ee72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee30:	2300      	movs	r3, #0
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	2300      	movs	r3, #0
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	2100      	movs	r1, #0
 800ee3a:	6978      	ldr	r0, [r7, #20]
 800ee3c:	f7ff ff88 	bl	800ed50 <xTimerGenericCommand>
 800ee40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d114      	bne.n	800ee72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	60fb      	str	r3, [r7, #12]
}
 800ee5a:	bf00      	nop
 800ee5c:	bf00      	nop
 800ee5e:	e7fd      	b.n	800ee5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee66:	f023 0301 	bic.w	r3, r3, #1
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	6978      	ldr	r0, [r7, #20]
 800ee78:	4798      	blx	r3
}
 800ee7a:	bf00      	nop
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	240011d4 	.word	0x240011d4

0800ee88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee90:	f107 0308 	add.w	r3, r7, #8
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 f859 	bl	800ef4c <prvGetNextExpireTime>
 800ee9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f000 f805 	bl	800eeb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eea6:	f000 f8d7 	bl	800f058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eeaa:	bf00      	nop
 800eeac:	e7f0      	b.n	800ee90 <prvTimerTask+0x8>
	...

0800eeb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eeba:	f7ff fa37 	bl	800e32c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 f866 	bl	800ef94 <prvSampleTimeNow>
 800eec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d130      	bne.n	800ef32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d10a      	bne.n	800eeec <prvProcessTimerOrBlockTask+0x3c>
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d806      	bhi.n	800eeec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eede:	f7ff fa33 	bl	800e348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eee2:	68f9      	ldr	r1, [r7, #12]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff ff81 	bl	800edec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eeea:	e024      	b.n	800ef36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d008      	beq.n	800ef04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eef2:	4b13      	ldr	r3, [pc, #76]	@ (800ef40 <prvProcessTimerOrBlockTask+0x90>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <prvProcessTimerOrBlockTask+0x50>
 800eefc:	2301      	movs	r3, #1
 800eefe:	e000      	b.n	800ef02 <prvProcessTimerOrBlockTask+0x52>
 800ef00:	2300      	movs	r3, #0
 800ef02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ef04:	4b0f      	ldr	r3, [pc, #60]	@ (800ef44 <prvProcessTimerOrBlockTask+0x94>)
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	4619      	mov	r1, r3
 800ef12:	f7fe ff1f 	bl	800dd54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef16:	f7ff fa17 	bl	800e348 <xTaskResumeAll>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef20:	4b09      	ldr	r3, [pc, #36]	@ (800ef48 <prvProcessTimerOrBlockTask+0x98>)
 800ef22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef26:	601a      	str	r2, [r3, #0]
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	f3bf 8f6f 	isb	sy
}
 800ef30:	e001      	b.n	800ef36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ef32:	f7ff fa09 	bl	800e348 <xTaskResumeAll>
}
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	240011d8 	.word	0x240011d8
 800ef44:	240011dc 	.word	0x240011dc
 800ef48:	e000ed04 	.word	0xe000ed04

0800ef4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef54:	4b0e      	ldr	r3, [pc, #56]	@ (800ef90 <prvGetNextExpireTime+0x44>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <prvGetNextExpireTime+0x16>
 800ef5e:	2201      	movs	r2, #1
 800ef60:	e000      	b.n	800ef64 <prvGetNextExpireTime+0x18>
 800ef62:	2200      	movs	r2, #0
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d105      	bne.n	800ef7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef70:	4b07      	ldr	r3, [pc, #28]	@ (800ef90 <prvGetNextExpireTime+0x44>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e001      	b.n	800ef80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	240011d4 	.word	0x240011d4

0800ef94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef9c:	f7ff fa72 	bl	800e484 <xTaskGetTickCount>
 800efa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800efa2:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <prvSampleTimeNow+0x3c>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d205      	bcs.n	800efb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800efac:	f000 f93a 	bl	800f224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	e002      	b.n	800efbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800efbe:	4a04      	ldr	r2, [pc, #16]	@ (800efd0 <prvSampleTimeNow+0x3c>)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800efc4:	68fb      	ldr	r3, [r7, #12]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	240011e4 	.word	0x240011e4

0800efd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800efe2:	2300      	movs	r3, #0
 800efe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d812      	bhi.n	800f020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	1ad2      	subs	r2, r2, r3
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	429a      	cmp	r2, r3
 800f006:	d302      	bcc.n	800f00e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f008:	2301      	movs	r3, #1
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	e01b      	b.n	800f046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f00e:	4b10      	ldr	r3, [pc, #64]	@ (800f050 <prvInsertTimerInActiveList+0x7c>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	3304      	adds	r3, #4
 800f016:	4619      	mov	r1, r3
 800f018:	4610      	mov	r0, r2
 800f01a:	f7fe f972 	bl	800d302 <vListInsert>
 800f01e:	e012      	b.n	800f046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	429a      	cmp	r2, r3
 800f026:	d206      	bcs.n	800f036 <prvInsertTimerInActiveList+0x62>
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d302      	bcc.n	800f036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f030:	2301      	movs	r3, #1
 800f032:	617b      	str	r3, [r7, #20]
 800f034:	e007      	b.n	800f046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f036:	4b07      	ldr	r3, [pc, #28]	@ (800f054 <prvInsertTimerInActiveList+0x80>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3304      	adds	r3, #4
 800f03e:	4619      	mov	r1, r3
 800f040:	4610      	mov	r0, r2
 800f042:	f7fe f95e 	bl	800d302 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f046:	697b      	ldr	r3, [r7, #20]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3718      	adds	r7, #24
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	240011d8 	.word	0x240011d8
 800f054:	240011d4 	.word	0x240011d4

0800f058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b08e      	sub	sp, #56	@ 0x38
 800f05c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f05e:	e0ce      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	da19      	bge.n	800f09a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f066:	1d3b      	adds	r3, r7, #4
 800f068:	3304      	adds	r3, #4
 800f06a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10b      	bne.n	800f08a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	61fb      	str	r3, [r7, #28]
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop
 800f088:	e7fd      	b.n	800f086 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f090:	6850      	ldr	r0, [r2, #4]
 800f092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f094:	6892      	ldr	r2, [r2, #8]
 800f096:	4611      	mov	r1, r2
 800f098:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	f2c0 80ae 	blt.w	800f1fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d004      	beq.n	800f0b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe f95e 	bl	800d374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff ff6a 	bl	800ef94 <prvSampleTimeNow>
 800f0c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b09      	cmp	r3, #9
 800f0c6:	f200 8097 	bhi.w	800f1f8 <prvProcessReceivedCommands+0x1a0>
 800f0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d0 <prvProcessReceivedCommands+0x78>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f0f9 	.word	0x0800f0f9
 800f0d4:	0800f0f9 	.word	0x0800f0f9
 800f0d8:	0800f0f9 	.word	0x0800f0f9
 800f0dc:	0800f16f 	.word	0x0800f16f
 800f0e0:	0800f183 	.word	0x0800f183
 800f0e4:	0800f1cf 	.word	0x0800f1cf
 800f0e8:	0800f0f9 	.word	0x0800f0f9
 800f0ec:	0800f0f9 	.word	0x0800f0f9
 800f0f0:	0800f16f 	.word	0x0800f16f
 800f0f4:	0800f183 	.word	0x0800f183
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0fe:	f043 0301 	orr.w	r3, r3, #1
 800f102:	b2da      	uxtb	r2, r3
 800f104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f106:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	18d1      	adds	r1, r2, r3
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f118:	f7ff ff5c 	bl	800efd4 <prvInsertTimerInActiveList>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d06c      	beq.n	800f1fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f130:	f003 0304 	and.w	r3, r3, #4
 800f134:	2b00      	cmp	r3, #0
 800f136:	d061      	beq.n	800f1fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	441a      	add	r2, r3
 800f140:	2300      	movs	r3, #0
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	2300      	movs	r3, #0
 800f146:	2100      	movs	r1, #0
 800f148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f14a:	f7ff fe01 	bl	800ed50 <xTimerGenericCommand>
 800f14e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f150:	6a3b      	ldr	r3, [r7, #32]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d152      	bne.n	800f1fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f15a:	f383 8811 	msr	BASEPRI, r3
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f3bf 8f4f 	dsb	sy
 800f166:	61bb      	str	r3, [r7, #24]
}
 800f168:	bf00      	nop
 800f16a:	bf00      	nop
 800f16c:	e7fd      	b.n	800f16a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f174:	f023 0301 	bic.w	r3, r3, #1
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f180:	e03d      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f188:	f043 0301 	orr.w	r3, r3, #1
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f190:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f194:	68ba      	ldr	r2, [r7, #8]
 800f196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f198:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10b      	bne.n	800f1ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	617b      	str	r3, [r7, #20]
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop
 800f1b8:	e7fd      	b.n	800f1b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1bc:	699a      	ldr	r2, [r3, #24]
 800f1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c0:	18d1      	adds	r1, r2, r3
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1c8:	f7ff ff04 	bl	800efd4 <prvInsertTimerInActiveList>
					break;
 800f1cc:	e017      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d103      	bne.n	800f1e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f1dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f1de:	f000 fbeb 	bl	800f9b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1e2:	e00c      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1ea:	f023 0301 	bic.w	r3, r3, #1
 800f1ee:	b2da      	uxtb	r2, r3
 800f1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f1f6:	e002      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f1f8:	bf00      	nop
 800f1fa:	e000      	b.n	800f1fe <prvProcessReceivedCommands+0x1a6>
					break;
 800f1fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1fe:	4b08      	ldr	r3, [pc, #32]	@ (800f220 <prvProcessReceivedCommands+0x1c8>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	1d39      	adds	r1, r7, #4
 800f204:	2200      	movs	r2, #0
 800f206:	4618      	mov	r0, r3
 800f208:	f7fe fb88 	bl	800d91c <xQueueReceive>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f47f af26 	bne.w	800f060 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f214:	bf00      	nop
 800f216:	bf00      	nop
 800f218:	3730      	adds	r7, #48	@ 0x30
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	240011dc 	.word	0x240011dc

0800f224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f22a:	e049      	b.n	800f2c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f22c:	4b2e      	ldr	r3, [pc, #184]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f236:	4b2c      	ldr	r3, [pc, #176]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	3304      	adds	r3, #4
 800f244:	4618      	mov	r0, r3
 800f246:	f7fe f895 	bl	800d374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d02f      	beq.n	800f2c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	4413      	add	r3, r2
 800f268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d90e      	bls.n	800f290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	68ba      	ldr	r2, [r7, #8]
 800f276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f27e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	3304      	adds	r3, #4
 800f286:	4619      	mov	r1, r3
 800f288:	4610      	mov	r0, r2
 800f28a:	f7fe f83a 	bl	800d302 <vListInsert>
 800f28e:	e017      	b.n	800f2c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f290:	2300      	movs	r3, #0
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	2300      	movs	r3, #0
 800f296:	693a      	ldr	r2, [r7, #16]
 800f298:	2100      	movs	r1, #0
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f7ff fd58 	bl	800ed50 <xTimerGenericCommand>
 800f2a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10b      	bne.n	800f2c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	603b      	str	r3, [r7, #0]
}
 800f2ba:	bf00      	nop
 800f2bc:	bf00      	nop
 800f2be:	e7fd      	b.n	800f2bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2c0:	4b09      	ldr	r3, [pc, #36]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1b0      	bne.n	800f22c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f2ca:	4b07      	ldr	r3, [pc, #28]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f2d0:	4b06      	ldr	r3, [pc, #24]	@ (800f2ec <prvSwitchTimerLists+0xc8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a04      	ldr	r2, [pc, #16]	@ (800f2e8 <prvSwitchTimerLists+0xc4>)
 800f2d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f2d8:	4a04      	ldr	r2, [pc, #16]	@ (800f2ec <prvSwitchTimerLists+0xc8>)
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6013      	str	r3, [r2, #0]
}
 800f2de:	bf00      	nop
 800f2e0:	3718      	adds	r7, #24
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	240011d4 	.word	0x240011d4
 800f2ec:	240011d8 	.word	0x240011d8

0800f2f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2f6:	f000 f96f 	bl	800f5d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2fa:	4b15      	ldr	r3, [pc, #84]	@ (800f350 <prvCheckForValidListAndQueue+0x60>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d120      	bne.n	800f344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f302:	4814      	ldr	r0, [pc, #80]	@ (800f354 <prvCheckForValidListAndQueue+0x64>)
 800f304:	f7fd ffac 	bl	800d260 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f308:	4813      	ldr	r0, [pc, #76]	@ (800f358 <prvCheckForValidListAndQueue+0x68>)
 800f30a:	f7fd ffa9 	bl	800d260 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f30e:	4b13      	ldr	r3, [pc, #76]	@ (800f35c <prvCheckForValidListAndQueue+0x6c>)
 800f310:	4a10      	ldr	r2, [pc, #64]	@ (800f354 <prvCheckForValidListAndQueue+0x64>)
 800f312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f314:	4b12      	ldr	r3, [pc, #72]	@ (800f360 <prvCheckForValidListAndQueue+0x70>)
 800f316:	4a10      	ldr	r2, [pc, #64]	@ (800f358 <prvCheckForValidListAndQueue+0x68>)
 800f318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f31a:	2300      	movs	r3, #0
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	4b11      	ldr	r3, [pc, #68]	@ (800f364 <prvCheckForValidListAndQueue+0x74>)
 800f320:	4a11      	ldr	r2, [pc, #68]	@ (800f368 <prvCheckForValidListAndQueue+0x78>)
 800f322:	2110      	movs	r1, #16
 800f324:	200a      	movs	r0, #10
 800f326:	f7fe f8b9 	bl	800d49c <xQueueGenericCreateStatic>
 800f32a:	4603      	mov	r3, r0
 800f32c:	4a08      	ldr	r2, [pc, #32]	@ (800f350 <prvCheckForValidListAndQueue+0x60>)
 800f32e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f330:	4b07      	ldr	r3, [pc, #28]	@ (800f350 <prvCheckForValidListAndQueue+0x60>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f338:	4b05      	ldr	r3, [pc, #20]	@ (800f350 <prvCheckForValidListAndQueue+0x60>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	490b      	ldr	r1, [pc, #44]	@ (800f36c <prvCheckForValidListAndQueue+0x7c>)
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fe fcde 	bl	800dd00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f344:	f000 f97a 	bl	800f63c <vPortExitCritical>
}
 800f348:	bf00      	nop
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	240011dc 	.word	0x240011dc
 800f354:	240011ac 	.word	0x240011ac
 800f358:	240011c0 	.word	0x240011c0
 800f35c:	240011d4 	.word	0x240011d4
 800f360:	240011d8 	.word	0x240011d8
 800f364:	24001288 	.word	0x24001288
 800f368:	240011e8 	.word	0x240011e8
 800f36c:	080154fc 	.word	0x080154fc

0800f370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3b04      	subs	r3, #4
 800f380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	3b04      	subs	r3, #4
 800f38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	f023 0201 	bic.w	r2, r3, #1
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3b04      	subs	r3, #4
 800f39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f3a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f3d4 <pxPortInitialiseStack+0x64>)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	3b14      	subs	r3, #20
 800f3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3b04      	subs	r3, #4
 800f3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f06f 0202 	mvn.w	r2, #2
 800f3be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	3b20      	subs	r3, #32
 800f3c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3714      	adds	r7, #20
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	0800f3d9 	.word	0x0800f3d9

0800f3d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f3e2:	4b13      	ldr	r3, [pc, #76]	@ (800f430 <prvTaskExitError+0x58>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ea:	d00b      	beq.n	800f404 <prvTaskExitError+0x2c>
	__asm volatile
 800f3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	60fb      	str	r3, [r7, #12]
}
 800f3fe:	bf00      	nop
 800f400:	bf00      	nop
 800f402:	e7fd      	b.n	800f400 <prvTaskExitError+0x28>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	60bb      	str	r3, [r7, #8]
}
 800f416:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f418:	bf00      	nop
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0fc      	beq.n	800f41a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	3714      	adds	r7, #20
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	2400009c 	.word	0x2400009c
	...

0800f440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f440:	4b07      	ldr	r3, [pc, #28]	@ (800f460 <pxCurrentTCBConst2>)
 800f442:	6819      	ldr	r1, [r3, #0]
 800f444:	6808      	ldr	r0, [r1, #0]
 800f446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44a:	f380 8809 	msr	PSP, r0
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f04f 0000 	mov.w	r0, #0
 800f456:	f380 8811 	msr	BASEPRI, r0
 800f45a:	4770      	bx	lr
 800f45c:	f3af 8000 	nop.w

0800f460 <pxCurrentTCBConst2>:
 800f460:	24000cac 	.word	0x24000cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop

0800f468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f468:	4808      	ldr	r0, [pc, #32]	@ (800f48c <prvPortStartFirstTask+0x24>)
 800f46a:	6800      	ldr	r0, [r0, #0]
 800f46c:	6800      	ldr	r0, [r0, #0]
 800f46e:	f380 8808 	msr	MSP, r0
 800f472:	f04f 0000 	mov.w	r0, #0
 800f476:	f380 8814 	msr	CONTROL, r0
 800f47a:	b662      	cpsie	i
 800f47c:	b661      	cpsie	f
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	df00      	svc	0
 800f488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f48a:	bf00      	nop
 800f48c:	e000ed08 	.word	0xe000ed08

0800f490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f496:	4b47      	ldr	r3, [pc, #284]	@ (800f5b4 <xPortStartScheduler+0x124>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a47      	ldr	r2, [pc, #284]	@ (800f5b8 <xPortStartScheduler+0x128>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d10b      	bne.n	800f4b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	613b      	str	r3, [r7, #16]
}
 800f4b2:	bf00      	nop
 800f4b4:	bf00      	nop
 800f4b6:	e7fd      	b.n	800f4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f4b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f5b4 <xPortStartScheduler+0x124>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f5bc <xPortStartScheduler+0x12c>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d10b      	bne.n	800f4da <xPortStartScheduler+0x4a>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	60fb      	str	r3, [r7, #12]
}
 800f4d4:	bf00      	nop
 800f4d6:	bf00      	nop
 800f4d8:	e7fd      	b.n	800f4d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f4da:	4b39      	ldr	r3, [pc, #228]	@ (800f5c0 <xPortStartScheduler+0x130>)
 800f4dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	22ff      	movs	r2, #255	@ 0xff
 800f4ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f4f4:	78fb      	ldrb	r3, [r7, #3]
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	4b31      	ldr	r3, [pc, #196]	@ (800f5c4 <xPortStartScheduler+0x134>)
 800f500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f502:	4b31      	ldr	r3, [pc, #196]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f504:	2207      	movs	r2, #7
 800f506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f508:	e009      	b.n	800f51e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f50a:	4b2f      	ldr	r3, [pc, #188]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	3b01      	subs	r3, #1
 800f510:	4a2d      	ldr	r2, [pc, #180]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f514:	78fb      	ldrb	r3, [r7, #3]
 800f516:	b2db      	uxtb	r3, r3
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f51e:	78fb      	ldrb	r3, [r7, #3]
 800f520:	b2db      	uxtb	r3, r3
 800f522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f526:	2b80      	cmp	r3, #128	@ 0x80
 800f528:	d0ef      	beq.n	800f50a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f52a:	4b27      	ldr	r3, [pc, #156]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f1c3 0307 	rsb	r3, r3, #7
 800f532:	2b04      	cmp	r3, #4
 800f534:	d00b      	beq.n	800f54e <xPortStartScheduler+0xbe>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	60bb      	str	r3, [r7, #8]
}
 800f548:	bf00      	nop
 800f54a:	bf00      	nop
 800f54c:	e7fd      	b.n	800f54a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f54e:	4b1e      	ldr	r3, [pc, #120]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	021b      	lsls	r3, r3, #8
 800f554:	4a1c      	ldr	r2, [pc, #112]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f558:	4b1b      	ldr	r3, [pc, #108]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f560:	4a19      	ldr	r2, [pc, #100]	@ (800f5c8 <xPortStartScheduler+0x138>)
 800f562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	b2da      	uxtb	r2, r3
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f56c:	4b17      	ldr	r3, [pc, #92]	@ (800f5cc <xPortStartScheduler+0x13c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a16      	ldr	r2, [pc, #88]	@ (800f5cc <xPortStartScheduler+0x13c>)
 800f572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f578:	4b14      	ldr	r3, [pc, #80]	@ (800f5cc <xPortStartScheduler+0x13c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a13      	ldr	r2, [pc, #76]	@ (800f5cc <xPortStartScheduler+0x13c>)
 800f57e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f584:	f000 f8da 	bl	800f73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f588:	4b11      	ldr	r3, [pc, #68]	@ (800f5d0 <xPortStartScheduler+0x140>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f58e:	f000 f8f9 	bl	800f784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f592:	4b10      	ldr	r3, [pc, #64]	@ (800f5d4 <xPortStartScheduler+0x144>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a0f      	ldr	r2, [pc, #60]	@ (800f5d4 <xPortStartScheduler+0x144>)
 800f598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f59c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f59e:	f7ff ff63 	bl	800f468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f5a2:	f7ff f839 	bl	800e618 <vTaskSwitchContext>
	prvTaskExitError();
 800f5a6:	f7ff ff17 	bl	800f3d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	e000ed00 	.word	0xe000ed00
 800f5b8:	410fc271 	.word	0x410fc271
 800f5bc:	410fc270 	.word	0x410fc270
 800f5c0:	e000e400 	.word	0xe000e400
 800f5c4:	240012d8 	.word	0x240012d8
 800f5c8:	240012dc 	.word	0x240012dc
 800f5cc:	e000ed20 	.word	0xe000ed20
 800f5d0:	2400009c 	.word	0x2400009c
 800f5d4:	e000ef34 	.word	0xe000ef34

0800f5d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	607b      	str	r3, [r7, #4]
}
 800f5f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f5f2:	4b10      	ldr	r3, [pc, #64]	@ (800f634 <vPortEnterCritical+0x5c>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	4a0e      	ldr	r2, [pc, #56]	@ (800f634 <vPortEnterCritical+0x5c>)
 800f5fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f634 <vPortEnterCritical+0x5c>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d110      	bne.n	800f626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f604:	4b0c      	ldr	r3, [pc, #48]	@ (800f638 <vPortEnterCritical+0x60>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <vPortEnterCritical+0x4e>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	603b      	str	r3, [r7, #0]
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	e7fd      	b.n	800f622 <vPortEnterCritical+0x4a>
	}
}
 800f626:	bf00      	nop
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	2400009c 	.word	0x2400009c
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f63c:	b480      	push	{r7}
 800f63e:	b083      	sub	sp, #12
 800f640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f642:	4b12      	ldr	r3, [pc, #72]	@ (800f68c <vPortExitCritical+0x50>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10b      	bne.n	800f662 <vPortExitCritical+0x26>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	607b      	str	r3, [r7, #4]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f662:	4b0a      	ldr	r3, [pc, #40]	@ (800f68c <vPortExitCritical+0x50>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3b01      	subs	r3, #1
 800f668:	4a08      	ldr	r2, [pc, #32]	@ (800f68c <vPortExitCritical+0x50>)
 800f66a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f66c:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <vPortExitCritical+0x50>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d105      	bne.n	800f680 <vPortExitCritical+0x44>
 800f674:	2300      	movs	r3, #0
 800f676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	f383 8811 	msr	BASEPRI, r3
}
 800f67e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	2400009c 	.word	0x2400009c

0800f690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f690:	f3ef 8009 	mrs	r0, PSP
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	4b15      	ldr	r3, [pc, #84]	@ (800f6f0 <pxCurrentTCBConst>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	f01e 0f10 	tst.w	lr, #16
 800f6a0:	bf08      	it	eq
 800f6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6aa:	6010      	str	r0, [r2, #0]
 800f6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f6b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f6b4:	f380 8811 	msr	BASEPRI, r0
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f7fe ffaa 	bl	800e618 <vTaskSwitchContext>
 800f6c4:	f04f 0000 	mov.w	r0, #0
 800f6c8:	f380 8811 	msr	BASEPRI, r0
 800f6cc:	bc09      	pop	{r0, r3}
 800f6ce:	6819      	ldr	r1, [r3, #0]
 800f6d0:	6808      	ldr	r0, [r1, #0]
 800f6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d6:	f01e 0f10 	tst.w	lr, #16
 800f6da:	bf08      	it	eq
 800f6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6e0:	f380 8809 	msr	PSP, r0
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	f3af 8000 	nop.w

0800f6f0 <pxCurrentTCBConst>:
 800f6f0:	24000cac 	.word	0x24000cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f6f4:	bf00      	nop
 800f6f6:	bf00      	nop

0800f6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	607b      	str	r3, [r7, #4]
}
 800f710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f712:	f7fe fec7 	bl	800e4a4 <xTaskIncrementTick>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d003      	beq.n	800f724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f71c:	4b06      	ldr	r3, [pc, #24]	@ (800f738 <xPortSysTickHandler+0x40>)
 800f71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	2300      	movs	r3, #0
 800f726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	f383 8811 	msr	BASEPRI, r3
}
 800f72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	e000ed04 	.word	0xe000ed04

0800f73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f740:	4b0b      	ldr	r3, [pc, #44]	@ (800f770 <vPortSetupTimerInterrupt+0x34>)
 800f742:	2200      	movs	r2, #0
 800f744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f746:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <vPortSetupTimerInterrupt+0x38>)
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f74c:	4b0a      	ldr	r3, [pc, #40]	@ (800f778 <vPortSetupTimerInterrupt+0x3c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a0a      	ldr	r2, [pc, #40]	@ (800f77c <vPortSetupTimerInterrupt+0x40>)
 800f752:	fba2 2303 	umull	r2, r3, r2, r3
 800f756:	099b      	lsrs	r3, r3, #6
 800f758:	4a09      	ldr	r2, [pc, #36]	@ (800f780 <vPortSetupTimerInterrupt+0x44>)
 800f75a:	3b01      	subs	r3, #1
 800f75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f75e:	4b04      	ldr	r3, [pc, #16]	@ (800f770 <vPortSetupTimerInterrupt+0x34>)
 800f760:	2207      	movs	r2, #7
 800f762:	601a      	str	r2, [r3, #0]
}
 800f764:	bf00      	nop
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	e000e010 	.word	0xe000e010
 800f774:	e000e018 	.word	0xe000e018
 800f778:	24000000 	.word	0x24000000
 800f77c:	10624dd3 	.word	0x10624dd3
 800f780:	e000e014 	.word	0xe000e014

0800f784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f794 <vPortEnableVFP+0x10>
 800f788:	6801      	ldr	r1, [r0, #0]
 800f78a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f78e:	6001      	str	r1, [r0, #0]
 800f790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f792:	bf00      	nop
 800f794:	e000ed88 	.word	0xe000ed88

0800f798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f79e:	f3ef 8305 	mrs	r3, IPSR
 800f7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b0f      	cmp	r3, #15
 800f7a8:	d915      	bls.n	800f7d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f7aa:	4a18      	ldr	r2, [pc, #96]	@ (800f80c <vPortValidateInterruptPriority+0x74>)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f7b4:	4b16      	ldr	r3, [pc, #88]	@ (800f810 <vPortValidateInterruptPriority+0x78>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	7afa      	ldrb	r2, [r7, #11]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d20b      	bcs.n	800f7d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	607b      	str	r3, [r7, #4]
}
 800f7d0:	bf00      	nop
 800f7d2:	bf00      	nop
 800f7d4:	e7fd      	b.n	800f7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f814 <vPortValidateInterruptPriority+0x7c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f7de:	4b0e      	ldr	r3, [pc, #56]	@ (800f818 <vPortValidateInterruptPriority+0x80>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d90b      	bls.n	800f7fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	603b      	str	r3, [r7, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	e7fd      	b.n	800f7fa <vPortValidateInterruptPriority+0x62>
	}
 800f7fe:	bf00      	nop
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	e000e3f0 	.word	0xe000e3f0
 800f810:	240012d8 	.word	0x240012d8
 800f814:	e000ed0c 	.word	0xe000ed0c
 800f818:	240012dc 	.word	0x240012dc

0800f81c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b08a      	sub	sp, #40	@ 0x28
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f824:	2300      	movs	r3, #0
 800f826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f828:	f7fe fd80 	bl	800e32c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f82c:	4b5c      	ldr	r3, [pc, #368]	@ (800f9a0 <pvPortMalloc+0x184>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f834:	f000 f924 	bl	800fa80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f838:	4b5a      	ldr	r3, [pc, #360]	@ (800f9a4 <pvPortMalloc+0x188>)
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4013      	ands	r3, r2
 800f840:	2b00      	cmp	r3, #0
 800f842:	f040 8095 	bne.w	800f970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d01e      	beq.n	800f88a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f84c:	2208      	movs	r2, #8
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4413      	add	r3, r2
 800f852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d015      	beq.n	800f88a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f023 0307 	bic.w	r3, r3, #7
 800f864:	3308      	adds	r3, #8
 800f866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f003 0307 	and.w	r3, r3, #7
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00b      	beq.n	800f88a <pvPortMalloc+0x6e>
	__asm volatile
 800f872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f876:	f383 8811 	msr	BASEPRI, r3
 800f87a:	f3bf 8f6f 	isb	sy
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	617b      	str	r3, [r7, #20]
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop
 800f888:	e7fd      	b.n	800f886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d06f      	beq.n	800f970 <pvPortMalloc+0x154>
 800f890:	4b45      	ldr	r3, [pc, #276]	@ (800f9a8 <pvPortMalloc+0x18c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	429a      	cmp	r2, r3
 800f898:	d86a      	bhi.n	800f970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f89a:	4b44      	ldr	r3, [pc, #272]	@ (800f9ac <pvPortMalloc+0x190>)
 800f89c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f89e:	4b43      	ldr	r3, [pc, #268]	@ (800f9ac <pvPortMalloc+0x190>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8a4:	e004      	b.n	800f8b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d903      	bls.n	800f8c2 <pvPortMalloc+0xa6>
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1f1      	bne.n	800f8a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f8c2:	4b37      	ldr	r3, [pc, #220]	@ (800f9a0 <pvPortMalloc+0x184>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d051      	beq.n	800f970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2208      	movs	r2, #8
 800f8d2:	4413      	add	r3, r2
 800f8d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	6a3b      	ldr	r3, [r7, #32]
 800f8dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	1ad2      	subs	r2, r2, r3
 800f8e6:	2308      	movs	r3, #8
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d920      	bls.n	800f930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	f003 0307 	and.w	r3, r3, #7
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00b      	beq.n	800f918 <pvPortMalloc+0xfc>
	__asm volatile
 800f900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	613b      	str	r3, [r7, #16]
}
 800f912:	bf00      	nop
 800f914:	bf00      	nop
 800f916:	e7fd      	b.n	800f914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	1ad2      	subs	r2, r2, r3
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f92a:	69b8      	ldr	r0, [r7, #24]
 800f92c:	f000 f90a 	bl	800fb44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f930:	4b1d      	ldr	r3, [pc, #116]	@ (800f9a8 <pvPortMalloc+0x18c>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	4a1b      	ldr	r2, [pc, #108]	@ (800f9a8 <pvPortMalloc+0x18c>)
 800f93c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f93e:	4b1a      	ldr	r3, [pc, #104]	@ (800f9a8 <pvPortMalloc+0x18c>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	4b1b      	ldr	r3, [pc, #108]	@ (800f9b0 <pvPortMalloc+0x194>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	429a      	cmp	r2, r3
 800f948:	d203      	bcs.n	800f952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f94a:	4b17      	ldr	r3, [pc, #92]	@ (800f9a8 <pvPortMalloc+0x18c>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a18      	ldr	r2, [pc, #96]	@ (800f9b0 <pvPortMalloc+0x194>)
 800f950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	4b13      	ldr	r3, [pc, #76]	@ (800f9a4 <pvPortMalloc+0x188>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	431a      	orrs	r2, r3
 800f95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f962:	2200      	movs	r2, #0
 800f964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f966:	4b13      	ldr	r3, [pc, #76]	@ (800f9b4 <pvPortMalloc+0x198>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3301      	adds	r3, #1
 800f96c:	4a11      	ldr	r2, [pc, #68]	@ (800f9b4 <pvPortMalloc+0x198>)
 800f96e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f970:	f7fe fcea 	bl	800e348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	f003 0307 	and.w	r3, r3, #7
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00b      	beq.n	800f996 <pvPortMalloc+0x17a>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	60fb      	str	r3, [r7, #12]
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	e7fd      	b.n	800f992 <pvPortMalloc+0x176>
	return pvReturn;
 800f996:	69fb      	ldr	r3, [r7, #28]
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3728      	adds	r7, #40	@ 0x28
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	24004ee8 	.word	0x24004ee8
 800f9a4:	24004efc 	.word	0x24004efc
 800f9a8:	24004eec 	.word	0x24004eec
 800f9ac:	24004ee0 	.word	0x24004ee0
 800f9b0:	24004ef0 	.word	0x24004ef0
 800f9b4:	24004ef4 	.word	0x24004ef4

0800f9b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d04f      	beq.n	800fa6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f9ca:	2308      	movs	r3, #8
 800f9cc:	425b      	negs	r3, r3
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	685a      	ldr	r2, [r3, #4]
 800f9dc:	4b25      	ldr	r3, [pc, #148]	@ (800fa74 <vPortFree+0xbc>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d10b      	bne.n	800f9fe <vPortFree+0x46>
	__asm volatile
 800f9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ea:	f383 8811 	msr	BASEPRI, r3
 800f9ee:	f3bf 8f6f 	isb	sy
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	60fb      	str	r3, [r7, #12]
}
 800f9f8:	bf00      	nop
 800f9fa:	bf00      	nop
 800f9fc:	e7fd      	b.n	800f9fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00b      	beq.n	800fa1e <vPortFree+0x66>
	__asm volatile
 800fa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa0a:	f383 8811 	msr	BASEPRI, r3
 800fa0e:	f3bf 8f6f 	isb	sy
 800fa12:	f3bf 8f4f 	dsb	sy
 800fa16:	60bb      	str	r3, [r7, #8]
}
 800fa18:	bf00      	nop
 800fa1a:	bf00      	nop
 800fa1c:	e7fd      	b.n	800fa1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	685a      	ldr	r2, [r3, #4]
 800fa22:	4b14      	ldr	r3, [pc, #80]	@ (800fa74 <vPortFree+0xbc>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4013      	ands	r3, r2
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d01e      	beq.n	800fa6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d11a      	bne.n	800fa6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	4b0e      	ldr	r3, [pc, #56]	@ (800fa74 <vPortFree+0xbc>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	43db      	mvns	r3, r3
 800fa3e:	401a      	ands	r2, r3
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa44:	f7fe fc72 	bl	800e32c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	685a      	ldr	r2, [r3, #4]
 800fa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fa78 <vPortFree+0xc0>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4413      	add	r3, r2
 800fa52:	4a09      	ldr	r2, [pc, #36]	@ (800fa78 <vPortFree+0xc0>)
 800fa54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa56:	6938      	ldr	r0, [r7, #16]
 800fa58:	f000 f874 	bl	800fb44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa5c:	4b07      	ldr	r3, [pc, #28]	@ (800fa7c <vPortFree+0xc4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	3301      	adds	r3, #1
 800fa62:	4a06      	ldr	r2, [pc, #24]	@ (800fa7c <vPortFree+0xc4>)
 800fa64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa66:	f7fe fc6f 	bl	800e348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa6a:	bf00      	nop
 800fa6c:	3718      	adds	r7, #24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	24004efc 	.word	0x24004efc
 800fa78:	24004eec 	.word	0x24004eec
 800fa7c:	24004ef8 	.word	0x24004ef8

0800fa80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fa8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa8c:	4b27      	ldr	r3, [pc, #156]	@ (800fb2c <prvHeapInit+0xac>)
 800fa8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f003 0307 	and.w	r3, r3, #7
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00c      	beq.n	800fab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3307      	adds	r3, #7
 800fa9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f023 0307 	bic.w	r3, r3, #7
 800faa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800faa8:	68ba      	ldr	r2, [r7, #8]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	4a1f      	ldr	r2, [pc, #124]	@ (800fb2c <prvHeapInit+0xac>)
 800fab0:	4413      	add	r3, r2
 800fab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fab8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb30 <prvHeapInit+0xb0>)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fabe:	4b1c      	ldr	r3, [pc, #112]	@ (800fb30 <prvHeapInit+0xb0>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	4413      	add	r3, r2
 800faca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800facc:	2208      	movs	r2, #8
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	1a9b      	subs	r3, r3, r2
 800fad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f023 0307 	bic.w	r3, r3, #7
 800fada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	4a15      	ldr	r2, [pc, #84]	@ (800fb34 <prvHeapInit+0xb4>)
 800fae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fae2:	4b14      	ldr	r3, [pc, #80]	@ (800fb34 <prvHeapInit+0xb4>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2200      	movs	r2, #0
 800fae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800faea:	4b12      	ldr	r3, [pc, #72]	@ (800fb34 <prvHeapInit+0xb4>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	1ad2      	subs	r2, r2, r3
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb00:	4b0c      	ldr	r3, [pc, #48]	@ (800fb34 <prvHeapInit+0xb4>)
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	4a0a      	ldr	r2, [pc, #40]	@ (800fb38 <prvHeapInit+0xb8>)
 800fb0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	4a09      	ldr	r2, [pc, #36]	@ (800fb3c <prvHeapInit+0xbc>)
 800fb16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb18:	4b09      	ldr	r3, [pc, #36]	@ (800fb40 <prvHeapInit+0xc0>)
 800fb1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fb1e:	601a      	str	r2, [r3, #0]
}
 800fb20:	bf00      	nop
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	240012e0 	.word	0x240012e0
 800fb30:	24004ee0 	.word	0x24004ee0
 800fb34:	24004ee8 	.word	0x24004ee8
 800fb38:	24004ef0 	.word	0x24004ef0
 800fb3c:	24004eec 	.word	0x24004eec
 800fb40:	24004efc 	.word	0x24004efc

0800fb44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb44:	b480      	push	{r7}
 800fb46:	b085      	sub	sp, #20
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb4c:	4b28      	ldr	r3, [pc, #160]	@ (800fbf0 <prvInsertBlockIntoFreeList+0xac>)
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	e002      	b.n	800fb58 <prvInsertBlockIntoFreeList+0x14>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	60fb      	str	r3, [r7, #12]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d8f7      	bhi.n	800fb52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	68ba      	ldr	r2, [r7, #8]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d108      	bne.n	800fb86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	441a      	add	r2, r3
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	441a      	add	r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d118      	bne.n	800fbcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	4b15      	ldr	r3, [pc, #84]	@ (800fbf4 <prvInsertBlockIntoFreeList+0xb0>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d00d      	beq.n	800fbc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	685a      	ldr	r2, [r3, #4]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	441a      	add	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	e008      	b.n	800fbd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fbc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fbf4 <prvInsertBlockIntoFreeList+0xb0>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	e003      	b.n	800fbd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d002      	beq.n	800fbe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbe2:	bf00      	nop
 800fbe4:	3714      	adds	r7, #20
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	24004ee0 	.word	0x24004ee0
 800fbf4:	24004ee8 	.word	0x24004ee8

0800fbf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	4913      	ldr	r1, [pc, #76]	@ (800fc4c <MX_USB_DEVICE_Init+0x54>)
 800fc00:	4813      	ldr	r0, [pc, #76]	@ (800fc50 <MX_USB_DEVICE_Init+0x58>)
 800fc02:	f7fb fe91 	bl	800b928 <USBD_Init>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fc0c:	f7f1 fc1e 	bl	800144c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fc10:	4910      	ldr	r1, [pc, #64]	@ (800fc54 <MX_USB_DEVICE_Init+0x5c>)
 800fc12:	480f      	ldr	r0, [pc, #60]	@ (800fc50 <MX_USB_DEVICE_Init+0x58>)
 800fc14:	f7fb feb8 	bl	800b988 <USBD_RegisterClass>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fc1e:	f7f1 fc15 	bl	800144c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fc22:	490d      	ldr	r1, [pc, #52]	@ (800fc58 <MX_USB_DEVICE_Init+0x60>)
 800fc24:	480a      	ldr	r0, [pc, #40]	@ (800fc50 <MX_USB_DEVICE_Init+0x58>)
 800fc26:	f7fb fdaf 	bl	800b788 <USBD_CDC_RegisterInterface>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fc30:	f7f1 fc0c 	bl	800144c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fc34:	4806      	ldr	r0, [pc, #24]	@ (800fc50 <MX_USB_DEVICE_Init+0x58>)
 800fc36:	f7fb fedd 	bl	800b9f4 <USBD_Start>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d001      	beq.n	800fc44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fc40:	f7f1 fc04 	bl	800144c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fc44:	f7f5 f882 	bl	8004d4c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc48:	bf00      	nop
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	240000b4 	.word	0x240000b4
 800fc50:	24004f00 	.word	0x24004f00
 800fc54:	2400001c 	.word	0x2400001c
 800fc58:	240000a0 	.word	0x240000a0

0800fc5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc60:	2200      	movs	r2, #0
 800fc62:	4905      	ldr	r1, [pc, #20]	@ (800fc78 <CDC_Init_FS+0x1c>)
 800fc64:	4805      	ldr	r0, [pc, #20]	@ (800fc7c <CDC_Init_FS+0x20>)
 800fc66:	f7fb fda9 	bl	800b7bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc6a:	4905      	ldr	r1, [pc, #20]	@ (800fc80 <CDC_Init_FS+0x24>)
 800fc6c:	4803      	ldr	r0, [pc, #12]	@ (800fc7c <CDC_Init_FS+0x20>)
 800fc6e:	f7fb fdc7 	bl	800b800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	240059dc 	.word	0x240059dc
 800fc7c:	24004f00 	.word	0x24004f00
 800fc80:	240051dc 	.word	0x240051dc

0800fc84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	6039      	str	r1, [r7, #0]
 800fc9e:	71fb      	strb	r3, [r7, #7]
 800fca0:	4613      	mov	r3, r2
 800fca2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	2b23      	cmp	r3, #35	@ 0x23
 800fca8:	d84a      	bhi.n	800fd40 <CDC_Control_FS+0xac>
 800fcaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb0 <CDC_Control_FS+0x1c>)
 800fcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb0:	0800fd41 	.word	0x0800fd41
 800fcb4:	0800fd41 	.word	0x0800fd41
 800fcb8:	0800fd41 	.word	0x0800fd41
 800fcbc:	0800fd41 	.word	0x0800fd41
 800fcc0:	0800fd41 	.word	0x0800fd41
 800fcc4:	0800fd41 	.word	0x0800fd41
 800fcc8:	0800fd41 	.word	0x0800fd41
 800fccc:	0800fd41 	.word	0x0800fd41
 800fcd0:	0800fd41 	.word	0x0800fd41
 800fcd4:	0800fd41 	.word	0x0800fd41
 800fcd8:	0800fd41 	.word	0x0800fd41
 800fcdc:	0800fd41 	.word	0x0800fd41
 800fce0:	0800fd41 	.word	0x0800fd41
 800fce4:	0800fd41 	.word	0x0800fd41
 800fce8:	0800fd41 	.word	0x0800fd41
 800fcec:	0800fd41 	.word	0x0800fd41
 800fcf0:	0800fd41 	.word	0x0800fd41
 800fcf4:	0800fd41 	.word	0x0800fd41
 800fcf8:	0800fd41 	.word	0x0800fd41
 800fcfc:	0800fd41 	.word	0x0800fd41
 800fd00:	0800fd41 	.word	0x0800fd41
 800fd04:	0800fd41 	.word	0x0800fd41
 800fd08:	0800fd41 	.word	0x0800fd41
 800fd0c:	0800fd41 	.word	0x0800fd41
 800fd10:	0800fd41 	.word	0x0800fd41
 800fd14:	0800fd41 	.word	0x0800fd41
 800fd18:	0800fd41 	.word	0x0800fd41
 800fd1c:	0800fd41 	.word	0x0800fd41
 800fd20:	0800fd41 	.word	0x0800fd41
 800fd24:	0800fd41 	.word	0x0800fd41
 800fd28:	0800fd41 	.word	0x0800fd41
 800fd2c:	0800fd41 	.word	0x0800fd41
 800fd30:	0800fd41 	.word	0x0800fd41
 800fd34:	0800fd41 	.word	0x0800fd41
 800fd38:	0800fd41 	.word	0x0800fd41
 800fd3c:	0800fd41 	.word	0x0800fd41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd40:	bf00      	nop
  }

  return (USBD_OK);
 800fd42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd5a:	6879      	ldr	r1, [r7, #4]
 800fd5c:	4805      	ldr	r0, [pc, #20]	@ (800fd74 <CDC_Receive_FS+0x24>)
 800fd5e:	f7fb fd4f 	bl	800b800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd62:	4804      	ldr	r0, [pc, #16]	@ (800fd74 <CDC_Receive_FS+0x24>)
 800fd64:	f7fb fdaa 	bl	800b8bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fd68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	24004f00 	.word	0x24004f00

0800fd78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	460b      	mov	r3, r1
 800fd82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fd88:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc0 <CDC_Transmit_FS+0x48>)
 800fd8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fd8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e00b      	b.n	800fdb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fd9e:	887b      	ldrh	r3, [r7, #2]
 800fda0:	461a      	mov	r2, r3
 800fda2:	6879      	ldr	r1, [r7, #4]
 800fda4:	4806      	ldr	r0, [pc, #24]	@ (800fdc0 <CDC_Transmit_FS+0x48>)
 800fda6:	f7fb fd09 	bl	800b7bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fdaa:	4805      	ldr	r0, [pc, #20]	@ (800fdc0 <CDC_Transmit_FS+0x48>)
 800fdac:	f7fb fd46 	bl	800b83c <USBD_CDC_TransmitPacket>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	24004f00 	.word	0x24004f00

0800fdc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	4613      	mov	r3, r2
 800fdd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fdd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	371c      	adds	r7, #28
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
	...

0800fde8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	4603      	mov	r3, r0
 800fdf0:	6039      	str	r1, [r7, #0]
 800fdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	2212      	movs	r2, #18
 800fdf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fdfa:	4b03      	ldr	r3, [pc, #12]	@ (800fe08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	240000d4 	.word	0x240000d4

0800fe0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	6039      	str	r1, [r7, #0]
 800fe16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	2204      	movs	r2, #4
 800fe1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe1e:	4b03      	ldr	r3, [pc, #12]	@ (800fe2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr
 800fe2c:	240000e8 	.word	0x240000e8

0800fe30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	6039      	str	r1, [r7, #0]
 800fe3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe3c:	79fb      	ldrb	r3, [r7, #7]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d105      	bne.n	800fe4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	4907      	ldr	r1, [pc, #28]	@ (800fe64 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe46:	4808      	ldr	r0, [pc, #32]	@ (800fe68 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe48:	f7fc ffae 	bl	800cda8 <USBD_GetString>
 800fe4c:	e004      	b.n	800fe58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	4904      	ldr	r1, [pc, #16]	@ (800fe64 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe52:	4805      	ldr	r0, [pc, #20]	@ (800fe68 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe54:	f7fc ffa8 	bl	800cda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe58:	4b02      	ldr	r3, [pc, #8]	@ (800fe64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	240061dc 	.word	0x240061dc
 800fe68:	08015504 	.word	0x08015504

0800fe6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	6039      	str	r1, [r7, #0]
 800fe76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe78:	683a      	ldr	r2, [r7, #0]
 800fe7a:	4904      	ldr	r1, [pc, #16]	@ (800fe8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe7c:	4804      	ldr	r0, [pc, #16]	@ (800fe90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe7e:	f7fc ff93 	bl	800cda8 <USBD_GetString>
  return USBD_StrDesc;
 800fe82:	4b02      	ldr	r3, [pc, #8]	@ (800fe8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	240061dc 	.word	0x240061dc
 800fe90:	0801551c 	.word	0x0801551c

0800fe94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	221a      	movs	r2, #26
 800fea4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fea6:	f000 f843 	bl	800ff30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800feaa:	4b02      	ldr	r3, [pc, #8]	@ (800feb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800feac:	4618      	mov	r0, r3
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	240000ec 	.word	0x240000ec

0800feb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	6039      	str	r1, [r7, #0]
 800fec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d105      	bne.n	800fed6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800feca:	683a      	ldr	r2, [r7, #0]
 800fecc:	4907      	ldr	r1, [pc, #28]	@ (800feec <USBD_FS_ConfigStrDescriptor+0x34>)
 800fece:	4808      	ldr	r0, [pc, #32]	@ (800fef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fed0:	f7fc ff6a 	bl	800cda8 <USBD_GetString>
 800fed4:	e004      	b.n	800fee0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	4904      	ldr	r1, [pc, #16]	@ (800feec <USBD_FS_ConfigStrDescriptor+0x34>)
 800feda:	4805      	ldr	r0, [pc, #20]	@ (800fef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fedc:	f7fc ff64 	bl	800cda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fee0:	4b02      	ldr	r3, [pc, #8]	@ (800feec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	240061dc 	.word	0x240061dc
 800fef0:	08015530 	.word	0x08015530

0800fef4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	4603      	mov	r3, r0
 800fefc:	6039      	str	r1, [r7, #0]
 800fefe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d105      	bne.n	800ff12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	4907      	ldr	r1, [pc, #28]	@ (800ff28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff0a:	4808      	ldr	r0, [pc, #32]	@ (800ff2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff0c:	f7fc ff4c 	bl	800cda8 <USBD_GetString>
 800ff10:	e004      	b.n	800ff1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	4904      	ldr	r1, [pc, #16]	@ (800ff28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff16:	4805      	ldr	r0, [pc, #20]	@ (800ff2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff18:	f7fc ff46 	bl	800cda8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff1c:	4b02      	ldr	r3, [pc, #8]	@ (800ff28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3708      	adds	r7, #8
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	240061dc 	.word	0x240061dc
 800ff2c:	0801553c 	.word	0x0801553c

0800ff30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff36:	4b0f      	ldr	r3, [pc, #60]	@ (800ff74 <Get_SerialNum+0x44>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ff78 <Get_SerialNum+0x48>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff42:	4b0e      	ldr	r3, [pc, #56]	@ (800ff7c <Get_SerialNum+0x4c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff56:	2208      	movs	r2, #8
 800ff58:	4909      	ldr	r1, [pc, #36]	@ (800ff80 <Get_SerialNum+0x50>)
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f000 f814 	bl	800ff88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff60:	2204      	movs	r2, #4
 800ff62:	4908      	ldr	r1, [pc, #32]	@ (800ff84 <Get_SerialNum+0x54>)
 800ff64:	68b8      	ldr	r0, [r7, #8]
 800ff66:	f000 f80f 	bl	800ff88 <IntToUnicode>
  }
}
 800ff6a:	bf00      	nop
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	1ff1e800 	.word	0x1ff1e800
 800ff78:	1ff1e804 	.word	0x1ff1e804
 800ff7c:	1ff1e808 	.word	0x1ff1e808
 800ff80:	240000ee 	.word	0x240000ee
 800ff84:	240000fe 	.word	0x240000fe

0800ff88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	4613      	mov	r3, r2
 800ff94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]
 800ff9e:	e027      	b.n	800fff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	0f1b      	lsrs	r3, r3, #28
 800ffa4:	2b09      	cmp	r3, #9
 800ffa6:	d80b      	bhi.n	800ffc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	0f1b      	lsrs	r3, r3, #28
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	005b      	lsls	r3, r3, #1
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	440b      	add	r3, r1
 800ffb8:	3230      	adds	r2, #48	@ 0x30
 800ffba:	b2d2      	uxtb	r2, r2
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	e00a      	b.n	800ffd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	0f1b      	lsrs	r3, r3, #28
 800ffc4:	b2da      	uxtb	r2, r3
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	4619      	mov	r1, r3
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	440b      	add	r3, r1
 800ffd0:	3237      	adds	r2, #55	@ 0x37
 800ffd2:	b2d2      	uxtb	r2, r2
 800ffd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	011b      	lsls	r3, r3, #4
 800ffda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ffdc:	7dfb      	ldrb	r3, [r7, #23]
 800ffde:	005b      	lsls	r3, r3, #1
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	3301      	adds	r3, #1
 800ffee:	75fb      	strb	r3, [r7, #23]
 800fff0:	7dfa      	ldrb	r2, [r7, #23]
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d3d3      	bcc.n	800ffa0 <IntToUnicode+0x18>
  }
}
 800fff8:	bf00      	nop
 800fffa:	bf00      	nop
 800fffc:	371c      	adds	r7, #28
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
	...

08010008 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b0ba      	sub	sp, #232	@ 0xe8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010010:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010014:	2200      	movs	r2, #0
 8010016:	601a      	str	r2, [r3, #0]
 8010018:	605a      	str	r2, [r3, #4]
 801001a:	609a      	str	r2, [r3, #8]
 801001c:	60da      	str	r2, [r3, #12]
 801001e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010020:	f107 0310 	add.w	r3, r7, #16
 8010024:	22c0      	movs	r2, #192	@ 0xc0
 8010026:	2100      	movs	r1, #0
 8010028:	4618      	mov	r0, r3
 801002a:	f002 ff5e 	bl	8012eea <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a2c      	ldr	r2, [pc, #176]	@ (80100e4 <HAL_PCD_MspInit+0xdc>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d151      	bne.n	80100dc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010038:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801003c:	f04f 0300 	mov.w	r3, #0
 8010040:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010044:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801004c:	f107 0310 	add.w	r3, r7, #16
 8010050:	4618      	mov	r0, r3
 8010052:	f7f5 fe9d 	bl	8005d90 <HAL_RCCEx_PeriphCLKConfig>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801005c:	f7f1 f9f6 	bl	800144c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010060:	f7f4 fe74 	bl	8004d4c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010064:	4b20      	ldr	r3, [pc, #128]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 8010066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801006a:	4a1f      	ldr	r2, [pc, #124]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 801006c:	f043 0301 	orr.w	r3, r3, #1
 8010070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010074:	4b1c      	ldr	r3, [pc, #112]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 8010076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801007a:	f003 0301 	and.w	r3, r3, #1
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010082:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801008a:	2302      	movs	r3, #2
 801008c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010090:	2300      	movs	r3, #0
 8010092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010096:	2300      	movs	r3, #0
 8010098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801009c:	230a      	movs	r3, #10
 801009e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80100a6:	4619      	mov	r1, r3
 80100a8:	4810      	ldr	r0, [pc, #64]	@ (80100ec <HAL_PCD_MspInit+0xe4>)
 80100aa:	f7f2 fb55 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80100ae:	4b0e      	ldr	r3, [pc, #56]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 80100b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80100b4:	4a0c      	ldr	r2, [pc, #48]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 80100b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80100ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80100be:	4b0a      	ldr	r3, [pc, #40]	@ (80100e8 <HAL_PCD_MspInit+0xe0>)
 80100c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80100c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100c8:	60bb      	str	r3, [r7, #8]
 80100ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80100cc:	2200      	movs	r2, #0
 80100ce:	2105      	movs	r1, #5
 80100d0:	2065      	movs	r0, #101	@ 0x65
 80100d2:	f7f2 f851 	bl	8002178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80100d6:	2065      	movs	r0, #101	@ 0x65
 80100d8:	f7f2 f868 	bl	80021ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80100dc:	bf00      	nop
 80100de:	37e8      	adds	r7, #232	@ 0xe8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	40080000 	.word	0x40080000
 80100e8:	58024400 	.word	0x58024400
 80100ec:	58020000 	.word	0x58020000

080100f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010104:	4619      	mov	r1, r3
 8010106:	4610      	mov	r0, r2
 8010108:	f7fb fcc1 	bl	800ba8e <USBD_LL_SetupStage>
}
 801010c:	bf00      	nop
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010126:	78fa      	ldrb	r2, [r7, #3]
 8010128:	6879      	ldr	r1, [r7, #4]
 801012a:	4613      	mov	r3, r2
 801012c:	00db      	lsls	r3, r3, #3
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	440b      	add	r3, r1
 8010134:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	78fb      	ldrb	r3, [r7, #3]
 801013c:	4619      	mov	r1, r3
 801013e:	f7fb fcfb 	bl	800bb38 <USBD_LL_DataOutStage>
}
 8010142:	bf00      	nop
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b082      	sub	sp, #8
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	460b      	mov	r3, r1
 8010154:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801015c:	78fa      	ldrb	r2, [r7, #3]
 801015e:	6879      	ldr	r1, [r7, #4]
 8010160:	4613      	mov	r3, r2
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	4413      	add	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	440b      	add	r3, r1
 801016a:	3320      	adds	r3, #32
 801016c:	681a      	ldr	r2, [r3, #0]
 801016e:	78fb      	ldrb	r3, [r7, #3]
 8010170:	4619      	mov	r1, r3
 8010172:	f7fb fd94 	bl	800bc9e <USBD_LL_DataInStage>
}
 8010176:	bf00      	nop
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b082      	sub	sp, #8
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801018c:	4618      	mov	r0, r3
 801018e:	f7fb fece 	bl	800bf2e <USBD_LL_SOF>
}
 8010192:	bf00      	nop
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80101a2:	2301      	movs	r3, #1
 80101a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	79db      	ldrb	r3, [r3, #7]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d102      	bne.n	80101b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80101ae:	2300      	movs	r3, #0
 80101b0:	73fb      	strb	r3, [r7, #15]
 80101b2:	e008      	b.n	80101c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	79db      	ldrb	r3, [r3, #7]
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	d102      	bne.n	80101c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80101bc:	2301      	movs	r3, #1
 80101be:	73fb      	strb	r3, [r7, #15]
 80101c0:	e001      	b.n	80101c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80101c2:	f7f1 f943 	bl	800144c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80101cc:	7bfa      	ldrb	r2, [r7, #15]
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fb fe68 	bl	800bea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fb fe10 	bl	800be02 <USBD_LL_Reset>
}
 80101e2:	bf00      	nop
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
	...

080101ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fb fe63 	bl	800bec6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	6812      	ldr	r2, [r2, #0]
 801020e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010212:	f043 0301 	orr.w	r3, r3, #1
 8010216:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	7adb      	ldrb	r3, [r3, #11]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d005      	beq.n	801022c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010220:	4b04      	ldr	r3, [pc, #16]	@ (8010234 <HAL_PCD_SuspendCallback+0x48>)
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	4a03      	ldr	r2, [pc, #12]	@ (8010234 <HAL_PCD_SuspendCallback+0x48>)
 8010226:	f043 0306 	orr.w	r3, r3, #6
 801022a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	e000ed00 	.word	0xe000ed00

08010238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010246:	4618      	mov	r0, r3
 8010248:	f7fb fe59 	bl	800befe <USBD_LL_Resume>
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010266:	78fa      	ldrb	r2, [r7, #3]
 8010268:	4611      	mov	r1, r2
 801026a:	4618      	mov	r0, r3
 801026c:	f7fb feb1 	bl	800bfd2 <USBD_LL_IsoOUTIncomplete>
}
 8010270:	bf00      	nop
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801028a:	78fa      	ldrb	r2, [r7, #3]
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fb fe6d 	bl	800bf6e <USBD_LL_IsoINIncomplete>
}
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fb fec3 	bl	800c036 <USBD_LL_DevConnected>
}
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fb fec0 	bl	800c04c <USBD_LL_DevDisconnected>
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d13e      	bne.n	8010362 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80102e4:	4a21      	ldr	r2, [pc, #132]	@ (801036c <USBD_LL_Init+0x98>)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4a1f      	ldr	r2, [pc, #124]	@ (801036c <USBD_LL_Init+0x98>)
 80102f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80102f4:	4b1d      	ldr	r3, [pc, #116]	@ (801036c <USBD_LL_Init+0x98>)
 80102f6:	4a1e      	ldr	r2, [pc, #120]	@ (8010370 <USBD_LL_Init+0x9c>)
 80102f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80102fa:	4b1c      	ldr	r3, [pc, #112]	@ (801036c <USBD_LL_Init+0x98>)
 80102fc:	2209      	movs	r2, #9
 80102fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010300:	4b1a      	ldr	r3, [pc, #104]	@ (801036c <USBD_LL_Init+0x98>)
 8010302:	2202      	movs	r2, #2
 8010304:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010306:	4b19      	ldr	r3, [pc, #100]	@ (801036c <USBD_LL_Init+0x98>)
 8010308:	2200      	movs	r2, #0
 801030a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801030c:	4b17      	ldr	r3, [pc, #92]	@ (801036c <USBD_LL_Init+0x98>)
 801030e:	2202      	movs	r2, #2
 8010310:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010312:	4b16      	ldr	r3, [pc, #88]	@ (801036c <USBD_LL_Init+0x98>)
 8010314:	2200      	movs	r2, #0
 8010316:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010318:	4b14      	ldr	r3, [pc, #80]	@ (801036c <USBD_LL_Init+0x98>)
 801031a:	2200      	movs	r2, #0
 801031c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801031e:	4b13      	ldr	r3, [pc, #76]	@ (801036c <USBD_LL_Init+0x98>)
 8010320:	2200      	movs	r2, #0
 8010322:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010324:	4b11      	ldr	r3, [pc, #68]	@ (801036c <USBD_LL_Init+0x98>)
 8010326:	2200      	movs	r2, #0
 8010328:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801032a:	4b10      	ldr	r3, [pc, #64]	@ (801036c <USBD_LL_Init+0x98>)
 801032c:	2200      	movs	r2, #0
 801032e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010330:	4b0e      	ldr	r3, [pc, #56]	@ (801036c <USBD_LL_Init+0x98>)
 8010332:	2200      	movs	r2, #0
 8010334:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010336:	480d      	ldr	r0, [pc, #52]	@ (801036c <USBD_LL_Init+0x98>)
 8010338:	f7f3 fa2f 	bl	800379a <HAL_PCD_Init>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d001      	beq.n	8010346 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010342:	f7f1 f883 	bl	800144c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010346:	2180      	movs	r1, #128	@ 0x80
 8010348:	4808      	ldr	r0, [pc, #32]	@ (801036c <USBD_LL_Init+0x98>)
 801034a:	f7f4 fc84 	bl	8004c56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801034e:	2240      	movs	r2, #64	@ 0x40
 8010350:	2100      	movs	r1, #0
 8010352:	4806      	ldr	r0, [pc, #24]	@ (801036c <USBD_LL_Init+0x98>)
 8010354:	f7f4 fc38 	bl	8004bc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010358:	2280      	movs	r2, #128	@ 0x80
 801035a:	2101      	movs	r1, #1
 801035c:	4803      	ldr	r0, [pc, #12]	@ (801036c <USBD_LL_Init+0x98>)
 801035e:	f7f4 fc33 	bl	8004bc8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	240063dc 	.word	0x240063dc
 8010370:	40080000 	.word	0x40080000

08010374 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801038a:	4618      	mov	r0, r3
 801038c:	f7f3 fb11 	bl	80039b2 <HAL_PCD_Start>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	4618      	mov	r0, r3
 8010398:	f000 f942 	bl	8010620 <USBD_Get_USB_Status>
 801039c:	4603      	mov	r3, r0
 801039e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	4608      	mov	r0, r1
 80103b4:	4611      	mov	r1, r2
 80103b6:	461a      	mov	r2, r3
 80103b8:	4603      	mov	r3, r0
 80103ba:	70fb      	strb	r3, [r7, #3]
 80103bc:	460b      	mov	r3, r1
 80103be:	70bb      	strb	r3, [r7, #2]
 80103c0:	4613      	mov	r3, r2
 80103c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103c4:	2300      	movs	r3, #0
 80103c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80103d2:	78bb      	ldrb	r3, [r7, #2]
 80103d4:	883a      	ldrh	r2, [r7, #0]
 80103d6:	78f9      	ldrb	r1, [r7, #3]
 80103d8:	f7f4 f812 	bl	8004400 <HAL_PCD_EP_Open>
 80103dc:	4603      	mov	r3, r0
 80103de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f000 f91c 	bl	8010620 <USBD_Get_USB_Status>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b084      	sub	sp, #16
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010402:	2300      	movs	r3, #0
 8010404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010406:	2300      	movs	r3, #0
 8010408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010410:	78fa      	ldrb	r2, [r7, #3]
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7f4 f85b 	bl	80044d0 <HAL_PCD_EP_Close>
 801041a:	4603      	mov	r3, r0
 801041c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801041e:	7bfb      	ldrb	r3, [r7, #15]
 8010420:	4618      	mov	r0, r3
 8010422:	f000 f8fd 	bl	8010620 <USBD_Get_USB_Status>
 8010426:	4603      	mov	r3, r0
 8010428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801042a:	7bbb      	ldrb	r3, [r7, #14]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	460b      	mov	r3, r1
 801043e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801044e:	78fa      	ldrb	r2, [r7, #3]
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f7f4 f913 	bl	800467e <HAL_PCD_EP_SetStall>
 8010458:	4603      	mov	r3, r0
 801045a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801045c:	7bfb      	ldrb	r3, [r7, #15]
 801045e:	4618      	mov	r0, r3
 8010460:	f000 f8de 	bl	8010620 <USBD_Get_USB_Status>
 8010464:	4603      	mov	r3, r0
 8010466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010468:	7bbb      	ldrb	r3, [r7, #14]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b084      	sub	sp, #16
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	460b      	mov	r3, r1
 801047c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801047e:	2300      	movs	r3, #0
 8010480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010482:	2300      	movs	r3, #0
 8010484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801048c:	78fa      	ldrb	r2, [r7, #3]
 801048e:	4611      	mov	r1, r2
 8010490:	4618      	mov	r0, r3
 8010492:	f7f4 f957 	bl	8004744 <HAL_PCD_EP_ClrStall>
 8010496:	4603      	mov	r3, r0
 8010498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801049a:	7bfb      	ldrb	r3, [r7, #15]
 801049c:	4618      	mov	r0, r3
 801049e:	f000 f8bf 	bl	8010620 <USBD_Get_USB_Status>
 80104a2:	4603      	mov	r3, r0
 80104a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80104c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80104c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	da0b      	bge.n	80104e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80104cc:	78fb      	ldrb	r3, [r7, #3]
 80104ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104d2:	68f9      	ldr	r1, [r7, #12]
 80104d4:	4613      	mov	r3, r2
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	4413      	add	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	440b      	add	r3, r1
 80104de:	3316      	adds	r3, #22
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	e00b      	b.n	80104fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104e4:	78fb      	ldrb	r3, [r7, #3]
 80104e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104ea:	68f9      	ldr	r1, [r7, #12]
 80104ec:	4613      	mov	r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	4413      	add	r3, r2
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	440b      	add	r3, r1
 80104f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80104fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3714      	adds	r7, #20
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr

08010508 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010514:	2300      	movs	r3, #0
 8010516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010522:	78fa      	ldrb	r2, [r7, #3]
 8010524:	4611      	mov	r1, r2
 8010526:	4618      	mov	r0, r3
 8010528:	f7f3 ff46 	bl	80043b8 <HAL_PCD_SetAddress>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	4618      	mov	r0, r3
 8010534:	f000 f874 	bl	8010620 <USBD_Get_USB_Status>
 8010538:	4603      	mov	r3, r0
 801053a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801053c:	7bbb      	ldrb	r3, [r7, #14]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b086      	sub	sp, #24
 801054a:	af00      	add	r7, sp, #0
 801054c:	60f8      	str	r0, [r7, #12]
 801054e:	607a      	str	r2, [r7, #4]
 8010550:	603b      	str	r3, [r7, #0]
 8010552:	460b      	mov	r3, r1
 8010554:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010556:	2300      	movs	r3, #0
 8010558:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801055a:	2300      	movs	r3, #0
 801055c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010564:	7af9      	ldrb	r1, [r7, #11]
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	f7f4 f84e 	bl	800460a <HAL_PCD_EP_Transmit>
 801056e:	4603      	mov	r3, r0
 8010570:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010572:	7dfb      	ldrb	r3, [r7, #23]
 8010574:	4618      	mov	r0, r3
 8010576:	f000 f853 	bl	8010620 <USBD_Get_USB_Status>
 801057a:	4603      	mov	r3, r0
 801057c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801057e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3718      	adds	r7, #24
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	607a      	str	r2, [r7, #4]
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	460b      	mov	r3, r1
 8010596:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010598:	2300      	movs	r3, #0
 801059a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801059c:	2300      	movs	r3, #0
 801059e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80105a6:	7af9      	ldrb	r1, [r7, #11]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	f7f3 ffda 	bl	8004564 <HAL_PCD_EP_Receive>
 80105b0:	4603      	mov	r3, r0
 80105b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105b4:	7dfb      	ldrb	r3, [r7, #23]
 80105b6:	4618      	mov	r0, r3
 80105b8:	f000 f832 	bl	8010620 <USBD_Get_USB_Status>
 80105bc:	4603      	mov	r3, r0
 80105be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b082      	sub	sp, #8
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	460b      	mov	r3, r1
 80105d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105dc:	78fa      	ldrb	r2, [r7, #3]
 80105de:	4611      	mov	r1, r2
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f3 fffa 	bl	80045da <HAL_PCD_EP_GetRxCount>
 80105e6:	4603      	mov	r3, r0
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80105f8:	4b03      	ldr	r3, [pc, #12]	@ (8010608 <USBD_static_malloc+0x18>)
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	370c      	adds	r7, #12
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	240068c0 	.word	0x240068c0

0801060c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010614:	bf00      	nop
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	4603      	mov	r3, r0
 8010628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	2b03      	cmp	r3, #3
 8010632:	d817      	bhi.n	8010664 <USBD_Get_USB_Status+0x44>
 8010634:	a201      	add	r2, pc, #4	@ (adr r2, 801063c <USBD_Get_USB_Status+0x1c>)
 8010636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063a:	bf00      	nop
 801063c:	0801064d 	.word	0x0801064d
 8010640:	08010653 	.word	0x08010653
 8010644:	08010659 	.word	0x08010659
 8010648:	0801065f 	.word	0x0801065f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73fb      	strb	r3, [r7, #15]
    break;
 8010650:	e00b      	b.n	801066a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010652:	2303      	movs	r3, #3
 8010654:	73fb      	strb	r3, [r7, #15]
    break;
 8010656:	e008      	b.n	801066a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010658:	2301      	movs	r3, #1
 801065a:	73fb      	strb	r3, [r7, #15]
    break;
 801065c:	e005      	b.n	801066a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801065e:	2303      	movs	r3, #3
 8010660:	73fb      	strb	r3, [r7, #15]
    break;
 8010662:	e002      	b.n	801066a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010664:	2303      	movs	r3, #3
 8010666:	73fb      	strb	r3, [r7, #15]
    break;
 8010668:	bf00      	nop
  }
  return usb_status;
 801066a:	7bfb      	ldrb	r3, [r7, #15]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <ad7606_Init>:

/**
 * @brief AD7606初始化
 */
void ad7606_Init(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
    AD7606_RST_RESET();
 801067c:	2200      	movs	r2, #0
 801067e:	2108      	movs	r1, #8
 8010680:	480a      	ldr	r0, [pc, #40]	@ (80106ac <ad7606_Init+0x34>)
 8010682:	f7f2 fa19 	bl	8002ab8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010686:	2001      	movs	r0, #1
 8010688:	f7f1 fc8e 	bl	8001fa8 <HAL_Delay>
    AD7606_RST_SET();
 801068c:	2201      	movs	r2, #1
 801068e:	2108      	movs	r1, #8
 8010690:	4806      	ldr	r0, [pc, #24]	@ (80106ac <ad7606_Init+0x34>)
 8010692:	f7f2 fa11 	bl	8002ab8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8010696:	2001      	movs	r0, #1
 8010698:	f7f1 fc86 	bl	8001fa8 <HAL_Delay>
    AD7606_RST_RESET();
 801069c:	2200      	movs	r2, #0
 801069e:	2108      	movs	r1, #8
 80106a0:	4802      	ldr	r0, [pc, #8]	@ (80106ac <ad7606_Init+0x34>)
 80106a2:	f7f2 fa09 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 80106a6:	bf00      	nop
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	58021800 	.word	0x58021800

080106b0 <ad7606_Read>:
 * @param hspi SPI句柄
 * @param data 数据指针
 * @param channel 读取几个通道
 */
void ad7606_Read(SPI_HandleTypeDef *hspi, int16_t *data, uint16_t channel)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	4613      	mov	r3, r2
 80106bc:	80fb      	strh	r3, [r7, #6]
    AD7606_CS_RESET();
 80106be:	2200      	movs	r2, #0
 80106c0:	2180      	movs	r1, #128	@ 0x80
 80106c2:	4809      	ldr	r0, [pc, #36]	@ (80106e8 <ad7606_Read+0x38>)
 80106c4:	f7f2 f9f8 	bl	8002ab8 <HAL_GPIO_WritePin>
    HAL_SPI_Receive(hspi, (uint8_t *)data, channel, 100);
 80106c8:	88fa      	ldrh	r2, [r7, #6]
 80106ca:	2364      	movs	r3, #100	@ 0x64
 80106cc:	68b9      	ldr	r1, [r7, #8]
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f7f7 f9de 	bl	8007a90 <HAL_SPI_Receive>
    AD7606_CS_SET();
 80106d4:	2201      	movs	r2, #1
 80106d6:	2180      	movs	r1, #128	@ 0x80
 80106d8:	4803      	ldr	r0, [pc, #12]	@ (80106e8 <ad7606_Read+0x38>)
 80106da:	f7f2 f9ed 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 80106de:	bf00      	nop
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	58021800 	.word	0x58021800

080106ec <ad7606_Start>:
 * @brief 启动AD7606
 * @param htim PWM产生的时钟
 * @param channel PWM产生的通道
 */
void ad7606_Start(TIM_HandleTypeDef *htim, uint32_t channel)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7f7 fe55 	bl	80083a8 <HAL_TIM_PWM_Start>
}
 80106fe:	bf00      	nop
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
	...

08010708 <ad7606_Convert>:
 * @param data 数据指针
 * @param channel 通道数
 * @param adcValue 采样值
 */
void ad7606_Convert(int16_t *data, uint16_t channel, float *adcValue)
{
 8010708:	b480      	push	{r7}
 801070a:	b087      	sub	sp, #28
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	460b      	mov	r3, r1
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < channel; i++)
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]
 801071a:	e03d      	b.n	8010798 <ad7606_Convert+0x90>
    {
        // 16位二进制补码转单精度浮点数
        data[i] = data[i] & 0x8000 ? (-((~data[i] + 1) & 0x7fff)) : data[i];
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	005b      	lsls	r3, r3, #1
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	4413      	add	r3, r2
 8010724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010728:	2b00      	cmp	r3, #0
 801072a:	da0f      	bge.n	801074c <ad7606_Convert+0x44>
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	4413      	add	r3, r2
 8010734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010738:	b29b      	uxth	r3, r3
 801073a:	425b      	negs	r3, r3
 801073c:	b29b      	uxth	r3, r3
 801073e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010742:	b29b      	uxth	r3, r3
 8010744:	425b      	negs	r3, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	b21b      	sxth	r3, r3
 801074a:	e005      	b.n	8010758 <ad7606_Convert+0x50>
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	4413      	add	r3, r2
 8010754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010758:	697a      	ldr	r2, [r7, #20]
 801075a:	0052      	lsls	r2, r2, #1
 801075c:	68f9      	ldr	r1, [r7, #12]
 801075e:	440a      	add	r2, r1
 8010760:	8013      	strh	r3, [r2, #0]
        adcValue[i] = 5.f * data[i] / 32768.f;
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	4413      	add	r3, r2
 801076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801076e:	ee07 3a90 	vmov	s15, r3
 8010772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010776:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 801077a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	4413      	add	r3, r2
 8010786:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80107b0 <ad7606_Convert+0xa8>
 801078a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801078e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < channel; i++)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	3301      	adds	r3, #1
 8010796:	617b      	str	r3, [r7, #20]
 8010798:	897b      	ldrh	r3, [r7, #10]
 801079a:	697a      	ldr	r2, [r7, #20]
 801079c:	429a      	cmp	r2, r3
 801079e:	dbbd      	blt.n	801071c <ad7606_Convert+0x14>
    }
}
 80107a0:	bf00      	nop
 80107a2:	bf00      	nop
 80107a4:	371c      	adds	r7, #28
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	47000000 	.word	0x47000000

080107b4 <ad7606_GetValue>:
 * @param hspi SPI句柄
 * @param channel 读取几个通道 1-8
 * @param adcValue 采样值
 */
void ad7606_GetValue(SPI_HandleTypeDef *hspi, uint16_t channel, float *adcValue)
{
 80107b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107b8:	b087      	sub	sp, #28
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	60f8      	str	r0, [r7, #12]
 80107be:	460b      	mov	r3, r1
 80107c0:	607a      	str	r2, [r7, #4]
 80107c2:	817b      	strh	r3, [r7, #10]
 80107c4:	466b      	mov	r3, sp
 80107c6:	461e      	mov	r6, r3
    int16_t ad7606_data[channel];
 80107c8:	8979      	ldrh	r1, [r7, #10]
 80107ca:	460b      	mov	r3, r1
 80107cc:	3b01      	subs	r3, #1
 80107ce:	617b      	str	r3, [r7, #20]
 80107d0:	b28b      	uxth	r3, r1
 80107d2:	2200      	movs	r2, #0
 80107d4:	4698      	mov	r8, r3
 80107d6:	4691      	mov	r9, r2
 80107d8:	f04f 0200 	mov.w	r2, #0
 80107dc:	f04f 0300 	mov.w	r3, #0
 80107e0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80107e4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80107e8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80107ec:	b28b      	uxth	r3, r1
 80107ee:	2200      	movs	r2, #0
 80107f0:	461c      	mov	r4, r3
 80107f2:	4615      	mov	r5, r2
 80107f4:	f04f 0200 	mov.w	r2, #0
 80107f8:	f04f 0300 	mov.w	r3, #0
 80107fc:	012b      	lsls	r3, r5, #4
 80107fe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8010802:	0122      	lsls	r2, r4, #4
 8010804:	460b      	mov	r3, r1
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	3307      	adds	r3, #7
 801080a:	08db      	lsrs	r3, r3, #3
 801080c:	00db      	lsls	r3, r3, #3
 801080e:	ebad 0d03 	sub.w	sp, sp, r3
 8010812:	466b      	mov	r3, sp
 8010814:	3301      	adds	r3, #1
 8010816:	085b      	lsrs	r3, r3, #1
 8010818:	005b      	lsls	r3, r3, #1
 801081a:	613b      	str	r3, [r7, #16]
    ad7606_Read(hspi, ad7606_data, channel);
 801081c:	897b      	ldrh	r3, [r7, #10]
 801081e:	461a      	mov	r2, r3
 8010820:	6939      	ldr	r1, [r7, #16]
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff ff44 	bl	80106b0 <ad7606_Read>
    ad7606_Convert(ad7606_data, channel, adcValue);
 8010828:	897b      	ldrh	r3, [r7, #10]
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4619      	mov	r1, r3
 801082e:	6938      	ldr	r0, [r7, #16]
 8010830:	f7ff ff6a 	bl	8010708 <ad7606_Convert>
 8010834:	46b5      	mov	sp, r6
}
 8010836:	bf00      	nop
 8010838:	371c      	adds	r7, #28
 801083a:	46bd      	mov	sp, r7
 801083c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010840 <firFilterInit>:

/**
 * @brief fir滤波初始化
 */
void firFilterInit(arm_fir_instance_f32 **S, const float *firCoeffs, float *firState)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b086      	sub	sp, #24
 8010844:	af02      	add	r7, sp, #8
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
    *S = (arm_fir_instance_f32 *)malloc(sizeof(arm_fir_instance_f32));
 801084c:	200c      	movs	r0, #12
 801084e:	f001 fd39 	bl	80122c4 <malloc>
 8010852:	4603      	mov	r3, r0
 8010854:	461a      	mov	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	601a      	str	r2, [r3, #0]
    arm_fir_init_f32(*S, NUM_TAPS, firCoeffs, firState, BLOCK_SIZE);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6818      	ldr	r0, [r3, #0]
 801085e:	2301      	movs	r3, #1
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	2115      	movs	r1, #21
 8010868:	f001 fc8a 	bl	8012180 <arm_fir_init_f32>
}
 801086c:	bf00      	nop
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <INA228_writeReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要写入的寄存器地址
 * @param value 要写入的值
 */
void INA228_writeReg(INA228_Handle sensor, uint8_t regAddr, uint16_t value)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b088      	sub	sp, #32
 8010878:	af04      	add	r7, sp, #16
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
 8010880:	4613      	mov	r3, r2
 8010882:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[2] = {0}; // 所有可写寄存器均为 2 字节
 8010884:	2300      	movs	r3, #0
 8010886:	81bb      	strh	r3, [r7, #12]

	txBuf[0] = MSB(value);
 8010888:	883b      	ldrh	r3, [r7, #0]
 801088a:	0a1b      	lsrs	r3, r3, #8
 801088c:	b29b      	uxth	r3, r3
 801088e:	b2db      	uxtb	r3, r3
 8010890:	733b      	strb	r3, [r7, #12]
	txBuf[1] = LSB(value);
 8010892:	883b      	ldrh	r3, [r7, #0]
 8010894:	b2db      	uxtb	r3, r3
 8010896:	737b      	strb	r3, [r7, #13]
	// 写入寄存器
	HAL_I2C_Mem_Write(sensor->hi2c, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, txBuf, 2, 100);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	69d8      	ldr	r0, [r3, #28]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108a2:	4619      	mov	r1, r3
 80108a4:	78fb      	ldrb	r3, [r7, #3]
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	2364      	movs	r3, #100	@ 0x64
 80108aa:	9302      	str	r3, [sp, #8]
 80108ac:	2302      	movs	r3, #2
 80108ae:	9301      	str	r3, [sp, #4]
 80108b0:	f107 030c 	add.w	r3, r7, #12
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	2301      	movs	r3, #1
 80108b8:	f7f2 f9e8 	bl	8002c8c <HAL_I2C_Mem_Write>

	// 检查 ADC量程 的变化
	if (regAddr == INA228_config_register)
 80108bc:	78fb      	ldrb	r3, [r7, #3]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d105      	bne.n	80108ce <INA228_writeReg+0x5a>
	{
		sensor->adcrange = value & INA228_config_register_adcrange_4096mV;
 80108c2:	883b      	ldrh	r3, [r7, #0]
 80108c4:	f003 0310 	and.w	r3, r3, #16
 80108c8:	b29a      	uxth	r2, r3
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	82da      	strh	r2, [r3, #22]
	}
}
 80108ce:	bf00      	nop
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <INA228_config>:
/**
 * @brief 使用当前设置配置设备
 * @param sensor INA228传感器的句柄
 */
void INA228_config(INA228_Handle sensor)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
	// 写入传感器配置寄存器
	INA228_writeReg(sensor, INA228_config_register, sensor->configRegister);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	461a      	mov	r2, r3
 80108e4:	2100      	movs	r1, #0
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff ffc4 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_adc_config_register, sensor->adcConfigRegister);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	885b      	ldrh	r3, [r3, #2]
 80108f0:	461a      	mov	r2, r3
 80108f2:	2101      	movs	r1, #1
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ffbd 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_cal_register, sensor->shuntCalRegister);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	889b      	ldrh	r3, [r3, #4]
 80108fe:	461a      	mov	r2, r3
 8010900:	2102      	movs	r1, #2
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7ff ffb6 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_shunt_tempco_register, sensor->shuntTempcoRegister);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	88db      	ldrh	r3, [r3, #6]
 801090c:	461a      	mov	r2, r3
 801090e:	2103      	movs	r1, #3
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ffaf 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_diag_alrt_register, sensor->diagAlrtRegister);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	891b      	ldrh	r3, [r3, #8]
 801091a:	461a      	mov	r2, r3
 801091c:	210b      	movs	r1, #11
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f7ff ffa8 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_sovl_register, sensor->sovlRegister);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	895b      	ldrh	r3, [r3, #10]
 8010928:	461a      	mov	r2, r3
 801092a:	210c      	movs	r1, #12
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7ff ffa1 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_suvl_register, sensor->suvlRegister);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	899b      	ldrh	r3, [r3, #12]
 8010936:	461a      	mov	r2, r3
 8010938:	210d      	movs	r1, #13
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7ff ff9a 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_bovl_register, sensor->bovlRegister);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	89db      	ldrh	r3, [r3, #14]
 8010944:	461a      	mov	r2, r3
 8010946:	210e      	movs	r1, #14
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f7ff ff93 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_buvl_register, sensor->buvlRegister);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8a1b      	ldrh	r3, [r3, #16]
 8010952:	461a      	mov	r2, r3
 8010954:	210f      	movs	r1, #15
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f7ff ff8c 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_temp_limit_register, sensor->tempLimitRegister);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	8a5b      	ldrh	r3, [r3, #18]
 8010960:	461a      	mov	r2, r3
 8010962:	2110      	movs	r1, #16
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7ff ff85 	bl	8010874 <INA228_writeReg>
	INA228_writeReg(sensor, INA228_pwr_limit_register, sensor->pwrLimitRegister);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	8a9b      	ldrh	r3, [r3, #20]
 801096e:	461a      	mov	r2, r3
 8010970:	2111      	movs	r1, #17
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff ff7e 	bl	8010874 <INA228_writeReg>
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <INA228_readReg>:
 * @param sensor INA228传感器的句柄
 * @param regAddr 要读取的寄存器地址
 * @return 寄存器中的值
 */
uint64_t INA228_readReg(INA228_Handle sensor, uint8_t regAddr)
{
 8010980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010984:	b08c      	sub	sp, #48	@ 0x30
 8010986:	af04      	add	r7, sp, #16
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	460b      	mov	r3, r1
 801098c:	70fb      	strb	r3, [r7, #3]
	uint64_t value;
	int i;

	uint8_t rxBuf[5] = {0}; // max buffer size
 801098e:	2300      	movs	r3, #0
 8010990:	60fb      	str	r3, [r7, #12]
 8010992:	2300      	movs	r3, #0
 8010994:	743b      	strb	r3, [r7, #16]
	// 读取寄存器值
	HAL_I2C_Mem_Read(&hi2c1, sensor->devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, rxBuf, INA228_regSize[regAddr], 100);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 3020 	ldrb.w	r3, [r3, #32]
 801099c:	4618      	mov	r0, r3
 801099e:	78fb      	ldrb	r3, [r7, #3]
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	78fb      	ldrb	r3, [r7, #3]
 80109a4:	4921      	ldr	r1, [pc, #132]	@ (8010a2c <INA228_readReg+0xac>)
 80109a6:	5ccb      	ldrb	r3, [r1, r3]
 80109a8:	4619      	mov	r1, r3
 80109aa:	2364      	movs	r3, #100	@ 0x64
 80109ac:	9302      	str	r3, [sp, #8]
 80109ae:	9101      	str	r1, [sp, #4]
 80109b0:	f107 030c 	add.w	r3, r7, #12
 80109b4:	9300      	str	r3, [sp, #0]
 80109b6:	2301      	movs	r3, #1
 80109b8:	4601      	mov	r1, r0
 80109ba:	481d      	ldr	r0, [pc, #116]	@ (8010a30 <INA228_readReg+0xb0>)
 80109bc:	f7f2 fa7a 	bl	8002eb4 <HAL_I2C_Mem_Read>

	// 合并字节
	value = rxBuf[0];
 80109c0:	7b3b      	ldrb	r3, [r7, #12]
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2200      	movs	r2, #0
 80109c6:	469a      	mov	sl, r3
 80109c8:	4693      	mov	fp, r2
 80109ca:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 80109ce:	2301      	movs	r3, #1
 80109d0:	617b      	str	r3, [r7, #20]
 80109d2:	e01b      	b.n	8010a0c <INA228_readReg+0x8c>
	{
		value = (value << 8) | rxBuf[i];
 80109d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80109d8:	f04f 0200 	mov.w	r2, #0
 80109dc:	f04f 0300 	mov.w	r3, #0
 80109e0:	020b      	lsls	r3, r1, #8
 80109e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80109e6:	0202      	lsls	r2, r0, #8
 80109e8:	f107 000c 	add.w	r0, r7, #12
 80109ec:	6979      	ldr	r1, [r7, #20]
 80109ee:	4401      	add	r1, r0
 80109f0:	7809      	ldrb	r1, [r1, #0]
 80109f2:	b2c9      	uxtb	r1, r1
 80109f4:	2000      	movs	r0, #0
 80109f6:	460c      	mov	r4, r1
 80109f8:	4605      	mov	r5, r0
 80109fa:	ea42 0804 	orr.w	r8, r2, r4
 80109fe:	ea43 0905 	orr.w	r9, r3, r5
 8010a02:	e9c7 8906 	strd	r8, r9, [r7, #24]
	for (i = 1; i < INA228_regSize[regAddr]; i++)
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	78fb      	ldrb	r3, [r7, #3]
 8010a0e:	4a07      	ldr	r2, [pc, #28]	@ (8010a2c <INA228_readReg+0xac>)
 8010a10:	5cd3      	ldrb	r3, [r2, r3]
 8010a12:	461a      	mov	r2, r3
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	4293      	cmp	r3, r2
 8010a18:	dbdc      	blt.n	80109d4 <INA228_readReg+0x54>
	}

	return value;
 8010a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8010a1e:	4610      	mov	r0, r2
 8010a20:	4619      	mov	r1, r3
 8010a22:	3720      	adds	r7, #32
 8010a24:	46bd      	mov	sp, r7
 8010a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a2a:	bf00      	nop
 8010a2c:	08015688 	.word	0x08015688
 8010a30:	2400035c 	.word	0x2400035c

08010a34 <INA228_getVBUS_V>:
 * @brief 获取总线电压值（伏特）
 * @param sensor INA228传感器的句柄
 * @return 总线电压值（V）
 */
float INA228_getVBUS_V(INA228_Handle sensor)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_vbus_register);
 8010a3c:	2105      	movs	r1, #5
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7ff ff9e 	bl	8010980 <INA228_readReg>
 8010a44:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010a48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a4c:	f04f 0200 	mov.w	r2, #0
 8010a50:	f04f 0300 	mov.w	r3, #0
 8010a54:	0902      	lsrs	r2, r0, #4
 8010a56:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010a5a:	090b      	lsrs	r3, r1, #4
 8010a5c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Convert for 2's compliment and signed value (though always positive)
	if (value > 0x7FFFF)
 8010a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a64:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010a68:	f173 0300 	sbcs.w	r3, r3, #0
 8010a6c:	d30c      	bcc.n	8010a88 <INA228_getVBUS_V+0x54>
	{
		data = (float)value - 0x100000; // left for redundancy and error checking, should never get used
 8010a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a72:	f7ef fd55 	bl	8000520 <__aeabi_ul2f>
 8010a76:	ee07 0a10 	vmov	s14, r0
 8010a7a:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010abc <INA228_getVBUS_V+0x88>
 8010a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a82:	edc7 7a05 	vstr	s15, [r7, #20]
 8010a86:	e005      	b.n	8010a94 <INA228_getVBUS_V+0x60>
	}
	else
	{
		data = (float)value;
 8010a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010a8c:	f7ef fd48 	bl	8000520 <__aeabi_ul2f>
 8010a90:	4603      	mov	r3, r0
 8010a92:	617b      	str	r3, [r7, #20]
	}

	// Convert to V
	data = (data * 195.3125f) / 1000000;
 8010a94:	edd7 7a05 	vldr	s15, [r7, #20]
 8010a98:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8010ac0 <INA228_getVBUS_V+0x8c>
 8010a9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010aa0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8010ac4 <INA228_getVBUS_V+0x90>
 8010aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010aa8:	edc7 7a05 	vstr	s15, [r7, #20]

	return data;
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	ee07 3a90 	vmov	s15, r3
}
 8010ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ab6:	3718      	adds	r7, #24
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	49800000 	.word	0x49800000
 8010ac0:	43435000 	.word	0x43435000
 8010ac4:	49742400 	.word	0x49742400

08010ac8 <INA228_getCURRENT_signedLSB>:
 * @brief 获取电流值（最低有效位）
 * @param sensor INA228传感器的句柄
 * @return 电流值（signed LSBs）
 */
float INA228_getCURRENT_signedLSB(INA228_Handle sensor)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
	uint64_t value = INA228_readReg(sensor, INA228_current_register);
 8010ad0:	2107      	movs	r1, #7
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7ff ff54 	bl	8010980 <INA228_readReg>
 8010ad8:	e9c7 0102 	strd	r0, r1, [r7, #8]
	float data;

	// 删除保留位
	value = value >> 4;
 8010adc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ae0:	f04f 0200 	mov.w	r2, #0
 8010ae4:	f04f 0300 	mov.w	r3, #0
 8010ae8:	0902      	lsrs	r2, r0, #4
 8010aea:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010aee:	090b      	lsrs	r3, r1, #4
 8010af0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// 转换为 2 的补码和有符号值
	if (value > 0x7FFFF)
 8010af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010af8:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8010afc:	f173 0300 	sbcs.w	r3, r3, #0
 8010b00:	d30c      	bcc.n	8010b1c <INA228_getCURRENT_signedLSB+0x54>
	{
		data = (float)value - 0x100000;
 8010b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010b06:	f7ef fd0b 	bl	8000520 <__aeabi_ul2f>
 8010b0a:	ee07 0a10 	vmov	s14, r0
 8010b0e:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010b38 <INA228_getCURRENT_signedLSB+0x70>
 8010b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b16:	edc7 7a05 	vstr	s15, [r7, #20]
 8010b1a:	e005      	b.n	8010b28 <INA228_getCURRENT_signedLSB+0x60>
	}
	else
	{
		data = (float)value;
 8010b1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010b20:	f7ef fcfe 	bl	8000520 <__aeabi_ul2f>
 8010b24:	4603      	mov	r3, r0
 8010b26:	617b      	str	r3, [r7, #20]
	}

	return data;
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	ee07 3a90 	vmov	s15, r3
}
 8010b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8010b32:	3718      	adds	r7, #24
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	49800000 	.word	0x49800000

08010b3c <INA228_getCURRENT_A>:
 * @brief 获取电流值（安培）
 * @param sensor INA228传感器的句柄
 * @return 电流值（A）
 */
float INA228_getCURRENT_A(INA228_Handle sensor)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
	float data = INA228_getCURRENT_signedLSB(sensor);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7ff ffbf 	bl	8010ac8 <INA228_getCURRENT_signedLSB>
 8010b4a:	ed87 0a03 	vstr	s0, [r7, #12]

	data = data * sensor->currentlsb;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	edd3 7a06 	vldr	s15, [r3, #24]
 8010b54:	ed97 7a03 	vldr	s14, [r7, #12]
 8010b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b5c:	edc7 7a03 	vstr	s15, [r7, #12]

	return data;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	ee07 3a90 	vmov	s15, r3
}
 8010b66:	eeb0 0a67 	vmov.f32	s0, s15
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <OLED_WR_Byte>:
 * @brief 写入数据
 * @param dat 要写入的数据
 * @param cmd 数据类型 0 写入命令 1 写入数据
 */
void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	4603      	mov	r3, r0
 8010b78:	460a      	mov	r2, r1
 8010b7a:	71fb      	strb	r3, [r7, #7]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	71bb      	strb	r3, [r7, #6]
	uint8_t *data = &dat;
 8010b80:	1dfb      	adds	r3, r7, #7
 8010b82:	60fb      	str	r3, [r7, #12]
	if (cmd)
 8010b84:	79bb      	ldrb	r3, [r7, #6]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d005      	beq.n	8010b96 <OLED_WR_Byte+0x26>
		OLED_DC_Set();
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	2140      	movs	r1, #64	@ 0x40
 8010b8e:	4811      	ldr	r0, [pc, #68]	@ (8010bd4 <OLED_WR_Byte+0x64>)
 8010b90:	f7f1 ff92 	bl	8002ab8 <HAL_GPIO_WritePin>
 8010b94:	e004      	b.n	8010ba0 <OLED_WR_Byte+0x30>
	else
		OLED_DC_Clr();
 8010b96:	2200      	movs	r2, #0
 8010b98:	2140      	movs	r1, #64	@ 0x40
 8010b9a:	480e      	ldr	r0, [pc, #56]	@ (8010bd4 <OLED_WR_Byte+0x64>)
 8010b9c:	f7f1 ff8c 	bl	8002ab8 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2102      	movs	r1, #2
 8010ba4:	480c      	ldr	r0, [pc, #48]	@ (8010bd8 <OLED_WR_Byte+0x68>)
 8010ba6:	f7f1 ff87 	bl	8002ab8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(WHICH_SPI, (uint8_t *)data, 1, 200); // 需根据实际情况修改
 8010baa:	23c8      	movs	r3, #200	@ 0xc8
 8010bac:	2201      	movs	r2, #1
 8010bae:	68f9      	ldr	r1, [r7, #12]
 8010bb0:	480a      	ldr	r0, [pc, #40]	@ (8010bdc <OLED_WR_Byte+0x6c>)
 8010bb2:	f7f6 fd7f 	bl	80076b4 <HAL_SPI_Transmit>

	OLED_CS_Set();
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	2102      	movs	r1, #2
 8010bba:	4807      	ldr	r0, [pc, #28]	@ (8010bd8 <OLED_WR_Byte+0x68>)
 8010bbc:	f7f1 ff7c 	bl	8002ab8 <HAL_GPIO_WritePin>
	OLED_DC_Set();
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	2140      	movs	r1, #64	@ 0x40
 8010bc4:	4803      	ldr	r0, [pc, #12]	@ (8010bd4 <OLED_WR_Byte+0x64>)
 8010bc6:	f7f1 ff77 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 8010bca:	bf00      	nop
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	58022000 	.word	0x58022000
 8010bd8:	58020400 	.word	0x58020400
 8010bdc:	240003b0 	.word	0x240003b0

08010be0 <OLED_Refresh>:

/**
 * @brief 更新显存到OLED
 */
void OLED_Refresh(void)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010be6:	2300      	movs	r3, #0
 8010be8:	71fb      	strb	r3, [r7, #7]
 8010bea:	e026      	b.n	8010c3a <OLED_Refresh+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置行起始地址
 8010bec:	79fb      	ldrb	r3, [r7, #7]
 8010bee:	3b50      	subs	r3, #80	@ 0x50
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff ffbb 	bl	8010b70 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);	  // 设置低列起始地址
 8010bfa:	2100      	movs	r1, #0
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	f7ff ffb7 	bl	8010b70 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);	  // 设置高列起始地址
 8010c02:	2100      	movs	r1, #0
 8010c04:	2010      	movs	r0, #16
 8010c06:	f7ff ffb3 	bl	8010b70 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	71bb      	strb	r3, [r7, #6]
 8010c0e:	e00d      	b.n	8010c2c <OLED_Refresh+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8010c10:	79ba      	ldrb	r2, [r7, #6]
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	490d      	ldr	r1, [pc, #52]	@ (8010c4c <OLED_Refresh+0x6c>)
 8010c16:	00d2      	lsls	r2, r2, #3
 8010c18:	440a      	add	r2, r1
 8010c1a:	4413      	add	r3, r2
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	2101      	movs	r1, #1
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff ffa5 	bl	8010b70 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8010c26:	79bb      	ldrb	r3, [r7, #6]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	71bb      	strb	r3, [r7, #6]
 8010c2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	daed      	bge.n	8010c10 <OLED_Refresh+0x30>
	for (i = 0; i < 8; i++)
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	3301      	adds	r3, #1
 8010c38:	71fb      	strb	r3, [r7, #7]
 8010c3a:	79fb      	ldrb	r3, [r7, #7]
 8010c3c:	2b07      	cmp	r3, #7
 8010c3e:	d9d5      	bls.n	8010bec <OLED_Refresh+0xc>
	}
}
 8010c40:	bf00      	nop
 8010c42:	bf00      	nop
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	24006ae0 	.word	0x24006ae0

08010c50 <OLED_Clear>:

/**
 * @brief 清屏
 */
void OLED_Clear(void)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 8010c56:	2300      	movs	r3, #0
 8010c58:	71fb      	strb	r3, [r7, #7]
 8010c5a:	e014      	b.n	8010c86 <OLED_Clear+0x36>
	{
		for (n = 0; n < 128; n++)
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	71bb      	strb	r3, [r7, #6]
 8010c60:	e00a      	b.n	8010c78 <OLED_Clear+0x28>
		{
			OLED_GRAM[n][i] = 0; // 清除所有数据
 8010c62:	79ba      	ldrb	r2, [r7, #6]
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	490c      	ldr	r1, [pc, #48]	@ (8010c98 <OLED_Clear+0x48>)
 8010c68:	00d2      	lsls	r2, r2, #3
 8010c6a:	440a      	add	r2, r1
 8010c6c:	4413      	add	r3, r2
 8010c6e:	2200      	movs	r2, #0
 8010c70:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 8010c72:	79bb      	ldrb	r3, [r7, #6]
 8010c74:	3301      	adds	r3, #1
 8010c76:	71bb      	strb	r3, [r7, #6]
 8010c78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	daf0      	bge.n	8010c62 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	3301      	adds	r3, #1
 8010c84:	71fb      	strb	r3, [r7, #7]
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	2b07      	cmp	r3, #7
 8010c8a:	d9e7      	bls.n	8010c5c <OLED_Clear+0xc>
		}
	}
	OLED_Refresh(); // 更新显示
 8010c8c:	f7ff ffa8 	bl	8010be0 <OLED_Refresh>
}
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	24006ae0 	.word	0x24006ae0

08010c9c <OLED_DrawPoint>:
 * @brief 画点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_DrawPoint(uint8_t x, uint8_t y)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	460a      	mov	r2, r1
 8010ca6:	71fb      	strb	r3, [r7, #7]
 8010ca8:	4613      	mov	r3, r2
 8010caa:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010cac:	79bb      	ldrb	r3, [r7, #6]
 8010cae:	08db      	lsrs	r3, r3, #3
 8010cb0:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010cb2:	79bb      	ldrb	r3, [r7, #6]
 8010cb4:	f003 0307 	and.w	r3, r3, #7
 8010cb8:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010cba:	7bbb      	ldrb	r3, [r7, #14]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8010cc2:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] |= n;
 8010cc4:	79fa      	ldrb	r2, [r7, #7]
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	490a      	ldr	r1, [pc, #40]	@ (8010cf4 <OLED_DrawPoint+0x58>)
 8010cca:	00d2      	lsls	r2, r2, #3
 8010ccc:	440a      	add	r2, r1
 8010cce:	4413      	add	r3, r2
 8010cd0:	7818      	ldrb	r0, [r3, #0]
 8010cd2:	79fa      	ldrb	r2, [r7, #7]
 8010cd4:	7bfb      	ldrb	r3, [r7, #15]
 8010cd6:	7b79      	ldrb	r1, [r7, #13]
 8010cd8:	4301      	orrs	r1, r0
 8010cda:	b2c8      	uxtb	r0, r1
 8010cdc:	4905      	ldr	r1, [pc, #20]	@ (8010cf4 <OLED_DrawPoint+0x58>)
 8010cde:	00d2      	lsls	r2, r2, #3
 8010ce0:	440a      	add	r2, r1
 8010ce2:	4413      	add	r3, r2
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	701a      	strb	r2, [r3, #0]
}
 8010ce8:	bf00      	nop
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr
 8010cf4:	24006ae0 	.word	0x24006ae0

08010cf8 <OLED_ClearPoint>:
 * @brief 清除一个点
 * @param x x坐标
 * @param y y坐标
 */
void OLED_ClearPoint(uint8_t x, uint8_t y)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b085      	sub	sp, #20
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	460a      	mov	r2, r1
 8010d02:	71fb      	strb	r3, [r7, #7]
 8010d04:	4613      	mov	r3, r2
 8010d06:	71bb      	strb	r3, [r7, #6]
	uint8_t i, m, n;
	i = y / 8;
 8010d08:	79bb      	ldrb	r3, [r7, #6]
 8010d0a:	08db      	lsrs	r3, r3, #3
 8010d0c:	73fb      	strb	r3, [r7, #15]
	m = y % 8;
 8010d0e:	79bb      	ldrb	r3, [r7, #6]
 8010d10:	f003 0307 	and.w	r3, r3, #7
 8010d14:	73bb      	strb	r3, [r7, #14]
	n = 1 << m;
 8010d16:	7bbb      	ldrb	r3, [r7, #14]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d1e:	737b      	strb	r3, [r7, #13]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010d20:	79fa      	ldrb	r2, [r7, #7]
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
 8010d24:	491b      	ldr	r1, [pc, #108]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d26:	00d2      	lsls	r2, r2, #3
 8010d28:	440a      	add	r2, r1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	7819      	ldrb	r1, [r3, #0]
 8010d2e:	79fa      	ldrb	r2, [r7, #7]
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
 8010d32:	43c9      	mvns	r1, r1
 8010d34:	b2c8      	uxtb	r0, r1
 8010d36:	4917      	ldr	r1, [pc, #92]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d38:	00d2      	lsls	r2, r2, #3
 8010d3a:	440a      	add	r2, r1
 8010d3c:	4413      	add	r3, r2
 8010d3e:	4602      	mov	r2, r0
 8010d40:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] |= n;
 8010d42:	79fa      	ldrb	r2, [r7, #7]
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	4913      	ldr	r1, [pc, #76]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d48:	00d2      	lsls	r2, r2, #3
 8010d4a:	440a      	add	r2, r1
 8010d4c:	4413      	add	r3, r2
 8010d4e:	7818      	ldrb	r0, [r3, #0]
 8010d50:	79fa      	ldrb	r2, [r7, #7]
 8010d52:	7bfb      	ldrb	r3, [r7, #15]
 8010d54:	7b79      	ldrb	r1, [r7, #13]
 8010d56:	4301      	orrs	r1, r0
 8010d58:	b2c8      	uxtb	r0, r1
 8010d5a:	490e      	ldr	r1, [pc, #56]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d5c:	00d2      	lsls	r2, r2, #3
 8010d5e:	440a      	add	r2, r1
 8010d60:	4413      	add	r3, r2
 8010d62:	4602      	mov	r2, r0
 8010d64:	701a      	strb	r2, [r3, #0]
	OLED_GRAM[x][i] = ~OLED_GRAM[x][i];
 8010d66:	79fa      	ldrb	r2, [r7, #7]
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
 8010d6a:	490a      	ldr	r1, [pc, #40]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d6c:	00d2      	lsls	r2, r2, #3
 8010d6e:	440a      	add	r2, r1
 8010d70:	4413      	add	r3, r2
 8010d72:	7819      	ldrb	r1, [r3, #0]
 8010d74:	79fa      	ldrb	r2, [r7, #7]
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
 8010d78:	43c9      	mvns	r1, r1
 8010d7a:	b2c8      	uxtb	r0, r1
 8010d7c:	4905      	ldr	r1, [pc, #20]	@ (8010d94 <OLED_ClearPoint+0x9c>)
 8010d7e:	00d2      	lsls	r2, r2, #3
 8010d80:	440a      	add	r2, r1
 8010d82:	4413      	add	r3, r2
 8010d84:	4602      	mov	r2, r0
 8010d86:	701a      	strb	r2, [r3, #0]
}
 8010d88:	bf00      	nop
 8010d8a:	3714      	adds	r7, #20
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	24006ae0 	.word	0x24006ae0

08010d98 <OLED_ShowChar>:
 * @param chr 要显示的字符
 * @param size1 字体大小 12/16/24
 * @note 取模方式 逐列式
 */
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size1)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	461a      	mov	r2, r3
 8010da6:	4623      	mov	r3, r4
 8010da8:	71fb      	strb	r3, [r7, #7]
 8010daa:	4603      	mov	r3, r0
 8010dac:	71bb      	strb	r3, [r7, #6]
 8010dae:	460b      	mov	r3, r1
 8010db0:	717b      	strb	r3, [r7, #5]
 8010db2:	4613      	mov	r3, r2
 8010db4:	713b      	strb	r3, [r7, #4]
	uint8_t i, m, temp, size2, chr1;
	uint8_t y0 = y;
 8010db6:	79bb      	ldrb	r3, [r7, #6]
 8010db8:	733b      	strb	r3, [r7, #12]
	size2 = (size1 / 8 + ((size1 % 8) ? 1 : 0)) * (size1 / 2); // 得到字体一个字符对应点阵集所占的字节数
 8010dba:	793b      	ldrb	r3, [r7, #4]
 8010dbc:	08db      	lsrs	r3, r3, #3
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	793b      	ldrb	r3, [r7, #4]
 8010dc4:	f003 0307 	and.w	r3, r3, #7
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	bf14      	ite	ne
 8010dce:	2301      	movne	r3, #1
 8010dd0:	2300      	moveq	r3, #0
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	4413      	add	r3, r2
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	793b      	ldrb	r3, [r7, #4]
 8010dda:	085b      	lsrs	r3, r3, #1
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	fb12 f303 	smulbb	r3, r2, r3
 8010de2:	72fb      	strb	r3, [r7, #11]
	chr1 = chr - ' ';										   // 计算偏移后的值
 8010de4:	797b      	ldrb	r3, [r7, #5]
 8010de6:	3b20      	subs	r3, #32
 8010de8:	72bb      	strb	r3, [r7, #10]
	for (i = 0; i < size2; i++)
 8010dea:	2300      	movs	r3, #0
 8010dec:	73fb      	strb	r3, [r7, #15]
 8010dee:	e057      	b.n	8010ea0 <OLED_ShowChar+0x108>
	{
		if (size1 == 12)
 8010df0:	793b      	ldrb	r3, [r7, #4]
 8010df2:	2b0c      	cmp	r3, #12
 8010df4:	d10b      	bne.n	8010e0e <OLED_ShowChar+0x76>
		{
			temp = asc2_1206[chr1][i];
 8010df6:	7aba      	ldrb	r2, [r7, #10]
 8010df8:	7bf9      	ldrb	r1, [r7, #15]
 8010dfa:	482e      	ldr	r0, [pc, #184]	@ (8010eb4 <OLED_ShowChar+0x11c>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	4413      	add	r3, r2
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	4403      	add	r3, r0
 8010e06:	440b      	add	r3, r1
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	737b      	strb	r3, [r7, #13]
 8010e0c:	e019      	b.n	8010e42 <OLED_ShowChar+0xaa>
		} // 调用12 06字体
		else if (size1 == 16)
 8010e0e:	793b      	ldrb	r3, [r7, #4]
 8010e10:	2b10      	cmp	r3, #16
 8010e12:	d108      	bne.n	8010e26 <OLED_ShowChar+0x8e>
		{
			temp = asc2_1608[chr1][i];
 8010e14:	7aba      	ldrb	r2, [r7, #10]
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	4927      	ldr	r1, [pc, #156]	@ (8010eb8 <OLED_ShowChar+0x120>)
 8010e1a:	0112      	lsls	r2, r2, #4
 8010e1c:	440a      	add	r2, r1
 8010e1e:	4413      	add	r3, r2
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	737b      	strb	r3, [r7, #13]
 8010e24:	e00d      	b.n	8010e42 <OLED_ShowChar+0xaa>
		} // 调用16 08字体
		else if (size1 == 24)
 8010e26:	793b      	ldrb	r3, [r7, #4]
 8010e28:	2b18      	cmp	r3, #24
 8010e2a:	d13e      	bne.n	8010eaa <OLED_ShowChar+0x112>
		{
			temp = asc2_2412[chr1][i];
 8010e2c:	7aba      	ldrb	r2, [r7, #10]
 8010e2e:	7bf9      	ldrb	r1, [r7, #15]
 8010e30:	4822      	ldr	r0, [pc, #136]	@ (8010ebc <OLED_ShowChar+0x124>)
 8010e32:	4613      	mov	r3, r2
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	4413      	add	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	4403      	add	r3, r0
 8010e3c:	440b      	add	r3, r1
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	737b      	strb	r3, [r7, #13]
		} // 调用24 12字体
		else
			return;
		for (m = 0; m < 8; m++) // 写入数据
 8010e42:	2300      	movs	r3, #0
 8010e44:	73bb      	strb	r3, [r7, #14]
 8010e46:	e025      	b.n	8010e94 <OLED_ShowChar+0xfc>
		{
			if (temp & 0x80)
 8010e48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	da06      	bge.n	8010e5e <OLED_ShowChar+0xc6>
				OLED_DrawPoint(x, y);
 8010e50:	79ba      	ldrb	r2, [r7, #6]
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	4611      	mov	r1, r2
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7ff ff20 	bl	8010c9c <OLED_DrawPoint>
 8010e5c:	e005      	b.n	8010e6a <OLED_ShowChar+0xd2>
			else
				OLED_ClearPoint(x, y);
 8010e5e:	79ba      	ldrb	r2, [r7, #6]
 8010e60:	79fb      	ldrb	r3, [r7, #7]
 8010e62:	4611      	mov	r1, r2
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff ff47 	bl	8010cf8 <OLED_ClearPoint>
			temp <<= 1;
 8010e6a:	7b7b      	ldrb	r3, [r7, #13]
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	737b      	strb	r3, [r7, #13]
			y++;
 8010e70:	79bb      	ldrb	r3, [r7, #6]
 8010e72:	3301      	adds	r3, #1
 8010e74:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size1)
 8010e76:	79ba      	ldrb	r2, [r7, #6]
 8010e78:	7b3b      	ldrb	r3, [r7, #12]
 8010e7a:	1ad2      	subs	r2, r2, r3
 8010e7c:	793b      	ldrb	r3, [r7, #4]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d105      	bne.n	8010e8e <OLED_ShowChar+0xf6>
			{
				y = y0;
 8010e82:	7b3b      	ldrb	r3, [r7, #12]
 8010e84:	71bb      	strb	r3, [r7, #6]
				x++;
 8010e86:	79fb      	ldrb	r3, [r7, #7]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	71fb      	strb	r3, [r7, #7]
				break;
 8010e8c:	e005      	b.n	8010e9a <OLED_ShowChar+0x102>
		for (m = 0; m < 8; m++) // 写入数据
 8010e8e:	7bbb      	ldrb	r3, [r7, #14]
 8010e90:	3301      	adds	r3, #1
 8010e92:	73bb      	strb	r3, [r7, #14]
 8010e94:	7bbb      	ldrb	r3, [r7, #14]
 8010e96:	2b07      	cmp	r3, #7
 8010e98:	d9d6      	bls.n	8010e48 <OLED_ShowChar+0xb0>
	for (i = 0; i < size2; i++)
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	73fb      	strb	r3, [r7, #15]
 8010ea0:	7bfa      	ldrb	r2, [r7, #15]
 8010ea2:	7afb      	ldrb	r3, [r7, #11]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d3a3      	bcc.n	8010df0 <OLED_ShowChar+0x58>
 8010ea8:	e000      	b.n	8010eac <OLED_ShowChar+0x114>
			return;
 8010eaa:	bf00      	nop
			}
		}
	}
}
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd90      	pop	{r4, r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	080156c8 	.word	0x080156c8
 8010eb8:	08015b3c 	.word	0x08015b3c
 8010ebc:	0801612c 	.word	0x0801612c

08010ec0 <OLED_ShowString>:
 *@param y y坐标
 *@param chr 字符串起始地址
 *@param size1 字体大小
 */
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t size1)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	603a      	str	r2, [r7, #0]
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4603      	mov	r3, r0
 8010ecc:	71fb      	strb	r3, [r7, #7]
 8010ece:	460b      	mov	r3, r1
 8010ed0:	71bb      	strb	r3, [r7, #6]
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	717b      	strb	r3, [r7, #5]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010ed6:	e01b      	b.n	8010f10 <OLED_ShowString+0x50>
	{
		OLED_ShowChar(x, y, *chr, size1);
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	781a      	ldrb	r2, [r3, #0]
 8010edc:	797b      	ldrb	r3, [r7, #5]
 8010ede:	79b9      	ldrb	r1, [r7, #6]
 8010ee0:	79f8      	ldrb	r0, [r7, #7]
 8010ee2:	f7ff ff59 	bl	8010d98 <OLED_ShowChar>
		x += size1 / 2;
 8010ee6:	797b      	ldrb	r3, [r7, #5]
 8010ee8:	085b      	lsrs	r3, r3, #1
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	79fb      	ldrb	r3, [r7, #7]
 8010eee:	4413      	add	r3, r2
 8010ef0:	71fb      	strb	r3, [r7, #7]
		if (x > 128 - size1) // 换行
 8010ef2:	79fa      	ldrb	r2, [r7, #7]
 8010ef4:	797b      	ldrb	r3, [r7, #5]
 8010ef6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010efa:	429a      	cmp	r2, r3
 8010efc:	dd05      	ble.n	8010f0a <OLED_ShowString+0x4a>
		{
			x = 2; // x=0
 8010efe:	2302      	movs	r3, #2
 8010f00:	71fb      	strb	r3, [r7, #7]
			y += size1;
 8010f02:	79ba      	ldrb	r2, [r7, #6]
 8010f04:	797b      	ldrb	r3, [r7, #5]
 8010f06:	4413      	add	r3, r2
 8010f08:	71bb      	strb	r3, [r7, #6]
		}
		chr++;
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	603b      	str	r3, [r7, #0]
	while ((*chr >= ' ') && (*chr <= '~')) // 判断是不是非法字符!
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b1f      	cmp	r3, #31
 8010f16:	d903      	bls.n	8010f20 <OLED_ShowString+0x60>
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	2b7e      	cmp	r3, #126	@ 0x7e
 8010f1e:	d9db      	bls.n	8010ed8 <OLED_ShowString+0x18>
	}
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <OLED_Init>:

/**
 * @brief OLED初始化
 */
void OLED_Init(void)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0

	OLED_RES_Clr();
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	2120      	movs	r1, #32
 8010f30:	483f      	ldr	r0, [pc, #252]	@ (8011030 <OLED_Init+0x108>)
 8010f32:	f7f1 fdc1 	bl	8002ab8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8010f36:	20c8      	movs	r0, #200	@ 0xc8
 8010f38:	f7f1 f836 	bl	8001fa8 <HAL_Delay>
	OLED_RES_Set();
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	2120      	movs	r1, #32
 8010f40:	483b      	ldr	r0, [pc, #236]	@ (8011030 <OLED_Init+0x108>)
 8010f42:	f7f1 fdb9 	bl	8002ab8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); //--turn off oled panel
 8010f46:	2100      	movs	r1, #0
 8010f48:	20ae      	movs	r0, #174	@ 0xae
 8010f4a:	f7ff fe11 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //---set low column address
 8010f4e:	2100      	movs	r1, #0
 8010f50:	2000      	movs	r0, #0
 8010f52:	f7ff fe0d 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x10, OLED_CMD); //---set high column address
 8010f56:	2100      	movs	r1, #0
 8010f58:	2010      	movs	r0, #16
 8010f5a:	f7ff fe09 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8010f5e:	2100      	movs	r1, #0
 8010f60:	2040      	movs	r0, #64	@ 0x40
 8010f62:	f7ff fe05 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x81, OLED_CMD); //--set contrast control register
 8010f66:	2100      	movs	r1, #0
 8010f68:	2081      	movs	r0, #129	@ 0x81
 8010f6a:	f7ff fe01 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF, OLED_CMD); // Set SEG Output Current Brightness
 8010f6e:	2100      	movs	r1, #0
 8010f70:	20cf      	movs	r0, #207	@ 0xcf
 8010f72:	f7ff fdfd 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); //--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 8010f76:	2100      	movs	r1, #0
 8010f78:	20a1      	movs	r0, #161	@ 0xa1
 8010f7a:	f7ff fdf9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8, OLED_CMD); // Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 8010f7e:	2100      	movs	r1, #0
 8010f80:	20c8      	movs	r0, #200	@ 0xc8
 8010f82:	f7ff fdf5 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); //--set normal display
 8010f86:	2100      	movs	r1, #0
 8010f88:	20a6      	movs	r0, #166	@ 0xa6
 8010f8a:	f7ff fdf1 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); //--set multiplex ratio(1 to 64)
 8010f8e:	2100      	movs	r1, #0
 8010f90:	20a8      	movs	r0, #168	@ 0xa8
 8010f92:	f7ff fded 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f, OLED_CMD); //--1/64 duty
 8010f96:	2100      	movs	r1, #0
 8010f98:	203f      	movs	r0, #63	@ 0x3f
 8010f9a:	f7ff fde9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	20d3      	movs	r0, #211	@ 0xd3
 8010fa2:	f7ff fde5 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x00, OLED_CMD); //-not offset
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	2000      	movs	r0, #0
 8010faa:	f7ff fde1 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5, OLED_CMD); //--set display clock divide ratio/oscillator frequency
 8010fae:	2100      	movs	r1, #0
 8010fb0:	20d5      	movs	r0, #213	@ 0xd5
 8010fb2:	f7ff fddd 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x80, OLED_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	2080      	movs	r0, #128	@ 0x80
 8010fba:	f7ff fdd9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); //--set pre-charge period
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	20d9      	movs	r0, #217	@ 0xd9
 8010fc2:	f7ff fdd5 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1, OLED_CMD); // Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	20f1      	movs	r0, #241	@ 0xf1
 8010fca:	f7ff fdd1 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); //--set com pins hardware configuration
 8010fce:	2100      	movs	r1, #0
 8010fd0:	20da      	movs	r0, #218	@ 0xda
 8010fd2:	f7ff fdcd 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	2012      	movs	r0, #18
 8010fda:	f7ff fdc9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); //--set vcomh
 8010fde:	2100      	movs	r1, #0
 8010fe0:	20db      	movs	r0, #219	@ 0xdb
 8010fe2:	f7ff fdc5 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x40, OLED_CMD); // Set VCOM Deselect Level
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	2040      	movs	r0, #64	@ 0x40
 8010fea:	f7ff fdc1 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8010fee:	2100      	movs	r1, #0
 8010ff0:	2020      	movs	r0, #32
 8010ff2:	f7ff fdbd 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); //
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	2002      	movs	r0, #2
 8010ffa:	f7ff fdb9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D, OLED_CMD); //--set Charge Pump enable/disable
 8010ffe:	2100      	movs	r1, #0
 8011000:	208d      	movs	r0, #141	@ 0x8d
 8011002:	f7ff fdb5 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); //--set(0x10) disable
 8011006:	2100      	movs	r1, #0
 8011008:	2014      	movs	r0, #20
 801100a:	f7ff fdb1 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA4, OLED_CMD); // Disable Entire Display On (0xa4/0xa5)
 801100e:	2100      	movs	r1, #0
 8011010:	20a4      	movs	r0, #164	@ 0xa4
 8011012:	f7ff fdad 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Disable Inverse Display On (0xa6/a7)
 8011016:	2100      	movs	r1, #0
 8011018:	20a6      	movs	r0, #166	@ 0xa6
 801101a:	f7ff fda9 	bl	8010b70 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);
 801101e:	2100      	movs	r1, #0
 8011020:	20af      	movs	r0, #175	@ 0xaf
 8011022:	f7ff fda5 	bl	8010b70 <OLED_WR_Byte>
	OLED_Clear();
 8011026:	f7ff fe13 	bl	8010c50 <OLED_Clear>
}
 801102a:	bf00      	nop
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	58020800 	.word	0x58020800

08011034 <pid_Init>:
 * @param kd 微分系数
 * @param max 输出最大值
 * @param min 输出最小值
 */
void pid_Init(PID *pid, float kp, float ki, float kd, float max, float min) // PID参数初始化
{
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	6178      	str	r0, [r7, #20]
 801103c:	ed87 0a04 	vstr	s0, [r7, #16]
 8011040:	edc7 0a03 	vstr	s1, [r7, #12]
 8011044:	ed87 1a02 	vstr	s2, [r7, #8]
 8011048:	edc7 1a01 	vstr	s3, [r7, #4]
 801104c:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	693a      	ldr	r2, [r7, #16]
 8011054:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	609a      	str	r2, [r3, #8]
	pid->Max = max;
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	61da      	str	r2, [r3, #28]
	pid->Min = min;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	621a      	str	r2, [r3, #32]
	pid->err[0] = 0.f;
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f04f 0200 	mov.w	r2, #0
 8011074:	60da      	str	r2, [r3, #12]
	pid->err[1] = 0.f;
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	f04f 0200 	mov.w	r2, #0
 801107c:	611a      	str	r2, [r3, #16]
	pid->err[2] = 0.f;
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	f04f 0200 	mov.w	r2, #0
 8011084:	615a      	str	r2, [r3, #20]
	pid->out = 0.f;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	f04f 0200 	mov.w	r2, #0
 801108c:	619a      	str	r2, [r3, #24]
}
 801108e:	bf00      	nop
 8011090:	371c      	adds	r7, #28
 8011092:	46bd      	mov	sp, r7
 8011094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011098:	4770      	bx	lr

0801109a <pid>:
 * @note e(0)代表本次偏差
 * @note e(1)代表上一次的偏差  以此类推
 * @note result代表增量输出
 */
void pid(PID *pid, float target, float sample)
{
 801109a:	b480      	push	{r7}
 801109c:	b085      	sub	sp, #20
 801109e:	af00      	add	r7, sp, #0
 80110a0:	60f8      	str	r0, [r7, #12]
 80110a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80110a6:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err[0] = target - sample;
 80110aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80110ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80110b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->out += pid->kp * (pid->err[0] - pid->err[1]) + pid->ki * pid->err[0] + pid->kd * (pid->err[0] - 2 * pid->err[1] + pid->err[2]);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	ed93 7a06 	vldr	s14, [r3, #24]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	edd3 6a00 	vldr	s13, [r3]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	ed93 6a03 	vldr	s12, [r3, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80110d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80110d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	ed93 6a01 	vldr	s12, [r3, #4]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80110e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80110ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	edd3 5a03 	vldr	s11, [r3, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8011102:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011106:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	edd3 7a05 	vldr	s15, [r3, #20]
 8011110:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8011114:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->err[2] = pid->err[1];
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	691a      	ldr	r2, [r3, #16]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	615a      	str	r2, [r3, #20]
	pid->err[1] = pid->err[0];
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	68da      	ldr	r2, [r3, #12]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	611a      	str	r2, [r3, #16]
	// 输出限幅
	if (pid->out > pid->Max)
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	ed93 7a06 	vldr	s14, [r3, #24]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8011142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801114a:	dd04      	ble.n	8011156 <pid+0xbc>
		pid->out = pid->Max;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	69da      	ldr	r2, [r3, #28]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	619a      	str	r2, [r3, #24]
	else if (pid->out < pid->Min)
		pid->out = pid->Min;
}
 8011154:	e00f      	b.n	8011176 <pid+0xdc>
	else if (pid->out < pid->Min)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	ed93 7a06 	vldr	s14, [r3, #24]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	edd3 7a08 	vldr	s15, [r3, #32]
 8011162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	d400      	bmi.n	801116e <pid+0xd4>
}
 801116c:	e003      	b.n	8011176 <pid+0xdc>
		pid->out = pid->Min;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6a1a      	ldr	r2, [r3, #32]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	619a      	str	r2, [r3, #24]
}
 8011176:	bf00      	nop
 8011178:	3714      	adds	r7, #20
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
	...

08011184 <svpwm_Control>:
#if RectifierOrInverter
void svpwm_Control(pll_Signal_I *signal)
#else
void svpwm_Control(pll_Signal_V *signal)
#endif
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b08e      	sub	sp, #56	@ 0x38
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
    // 计算中间变量
    float Ts = signal->basic->Ts;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011192:	62bb      	str	r3, [r7, #40]	@ 0x28
#if RectifierOrInverter
    float Ualpha = signal->park_inv_alpha;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	627b      	str	r3, [r7, #36]	@ 0x24
    float Ubeta = signal->park_inv_beta;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	689b      	ldr	r3, [r3, #8]
 801119e:	623b      	str	r3, [r7, #32]
#else
    float Ualpha = M * signal->basic->clarke_alpha;
    float Ubeta = M * signal->basic->clarke_beta;
#endif

    float Ualpha_ = 1.7320508f * Ualpha * Ts;
 80111a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80111a4:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8011438 <svpwm_Control+0x2b4>
 80111a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80111b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b4:	edc7 7a07 	vstr	s15, [r7, #28]
    float Ubeta_ = Ubeta * Ts;
 80111b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80111bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c4:	edc7 7a06 	vstr	s15, [r7, #24]

    // 计算XYZ
    float X = Ubeta_;
 80111c8:	69bb      	ldr	r3, [r7, #24]
 80111ca:	617b      	str	r3, [r7, #20]
    float Y = 0.5f * Ualpha_ + 0.5f * Ubeta_;
 80111cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80111d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80111d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80111d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80111dc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80111e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111e8:	edc7 7a04 	vstr	s15, [r7, #16]
    float Z = 0.5f * Ubeta_ - 0.5f * Ualpha_;
 80111ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80111f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80111f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80111f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80111fc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011208:	edc7 7a03 	vstr	s15, [r7, #12]

    // 通过XYZ做扇区判断
    uint8_t sector = Sector_Detection(X, Y, Z);
 801120c:	ed97 1a03 	vldr	s2, [r7, #12]
 8011210:	edd7 0a04 	vldr	s1, [r7, #16]
 8011214:	ed97 0a05 	vldr	s0, [r7, #20]
 8011218:	f000 f910 	bl	801143c <Sector_Detection>
 801121c:	4603      	mov	r3, r0
 801121e:	72fb      	strb	r3, [r7, #11]

    // 计算每一周期对应扇区各相的占用时间
    float Ta = 0, Tb = 0, Tc = 0;
 8011220:	f04f 0300 	mov.w	r3, #0
 8011224:	637b      	str	r3, [r7, #52]	@ 0x34
 8011226:	f04f 0300 	mov.w	r3, #0
 801122a:	633b      	str	r3, [r7, #48]	@ 0x30
 801122c:	f04f 0300 	mov.w	r3, #0
 8011230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    switch (sector)
 8011232:	7afb      	ldrb	r3, [r7, #11]
 8011234:	3b01      	subs	r3, #1
 8011236:	2b05      	cmp	r3, #5
 8011238:	f200 80f0 	bhi.w	801141c <svpwm_Control+0x298>
 801123c:	a201      	add	r2, pc, #4	@ (adr r2, 8011244 <svpwm_Control+0xc0>)
 801123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011242:	bf00      	nop
 8011244:	0801125d 	.word	0x0801125d
 8011248:	080112a7 	.word	0x080112a7
 801124c:	080112f1 	.word	0x080112f1
 8011250:	0801133b 	.word	0x0801133b
 8011254:	08011385 	.word	0x08011385
 8011258:	080113d3 	.word	0x080113d3
    {
    case 1:
        Ta = Ts / 2.f + (-Z + X) / 2.f;
 801125c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011260:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011264:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011268:	edd7 6a05 	vldr	s13, [r7, #20]
 801126c:	edd7 7a03 	vldr	s15, [r7, #12]
 8011270:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011274:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011278:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011280:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 8011284:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011288:	edd7 7a03 	vldr	s15, [r7, #12]
 801128c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011290:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 8011294:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011298:	edd7 7a05 	vldr	s15, [r7, #20]
 801129c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 80112a4:	e0ba      	b.n	801141c <svpwm_Control+0x298>
    case 2:
        Tb = Ts / 2.f + (Z + Y) / 2.f;
 80112a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80112aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80112ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80112b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80112b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80112ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80112be:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80112c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80112c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112ca:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 80112ce:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80112d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80112d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112da:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 80112de:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80112e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80112e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        break;
 80112ee:	e095      	b.n	801141c <svpwm_Control+0x298>
    case 3:
        Tb = Ts / 2.f + (X - Y) / 2.f;
 80112f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80112f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80112f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80112fc:	edd7 6a05 	vldr	s13, [r7, #20]
 8011300:	edd7 7a04 	vldr	s15, [r7, #16]
 8011304:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011308:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801130c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011314:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Tc = Tb - X;
 8011318:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801131c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011324:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 8011328:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011334:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 8011338:	e070      	b.n	801141c <svpwm_Control+0x298>
    case 4:
        Tc = Ts / 2.f + (-X + Z) / 2.f;
 801133a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801133e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011342:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011346:	edd7 6a03 	vldr	s13, [r7, #12]
 801134a:	edd7 7a05 	vldr	s15, [r7, #20]
 801134e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011352:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011356:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801135a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801135e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 8011362:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011366:	edd7 7a05 	vldr	s15, [r7, #20]
 801136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801136e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        Ta = Tb - Z;
 8011372:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011376:	edd7 7a03 	vldr	s15, [r7, #12]
 801137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801137e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        break;
 8011382:	e04b      	b.n	801141c <svpwm_Control+0x298>
    case 5:
        Tc = Ts / 2.f + (-Y - Z) / 2.f;
 8011384:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011388:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801138c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011390:	edd7 7a04 	vldr	s15, [r7, #16]
 8011394:	eef1 6a67 	vneg.f32	s13, s15
 8011398:	edd7 7a03 	vldr	s15, [r7, #12]
 801139c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80113a0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80113a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80113a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Ta = Tc + Y;
 80113b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80113b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80113b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113bc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tb = Ta + Z;
 80113c0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80113c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80113c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 80113d0:	e024      	b.n	801141c <svpwm_Control+0x298>
    case 6:
        Ta = Ts / 2.f + (Y - X) / 2.f;
 80113d2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80113d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80113da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80113de:	edd7 6a04 	vldr	s13, [r7, #16]
 80113e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80113e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80113ea:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80113ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80113f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113f6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        Tc = Ta - Y;
 80113fa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80113fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8011402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011406:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        Tb = Tc + X;
 801140a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801140e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011416:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        break;
 801141a:	bf00      	nop
    }

    Duty_Calculation(Ta, Tb, Tc, Ts);
 801141c:	edd7 1a0a 	vldr	s3, [r7, #40]	@ 0x28
 8011420:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 8011424:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8011428:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 801142c:	f000 f84a 	bl	80114c4 <Duty_Calculation>
}
 8011430:	bf00      	nop
 8011432:	3738      	adds	r7, #56	@ 0x38
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	3fddb3d7 	.word	0x3fddb3d7

0801143c <Sector_Detection>:

/**
 * @brief  扇区判断
 */
static uint8_t Sector_Detection(float X, float Y, float Z)
{
 801143c:	b480      	push	{r7}
 801143e:	b087      	sub	sp, #28
 8011440:	af00      	add	r7, sp, #0
 8011442:	ed87 0a03 	vstr	s0, [r7, #12]
 8011446:	edc7 0a02 	vstr	s1, [r7, #8]
 801144a:	ed87 1a01 	vstr	s2, [r7, #4]
    uint8_t sector = 0;
 801144e:	2300      	movs	r3, #0
 8011450:	75fb      	strb	r3, [r7, #23]
    if (Y < 0)
 8011452:	edd7 7a02 	vldr	s15, [r7, #8]
 8011456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145e:	d515      	bpl.n	801148c <Sector_Detection+0x50>
    {
        if (Z < 0)
 8011460:	edd7 7a01 	vldr	s15, [r7, #4]
 8011464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146c:	d502      	bpl.n	8011474 <Sector_Detection+0x38>
            sector = 5;
 801146e:	2305      	movs	r3, #5
 8011470:	75fb      	strb	r3, [r7, #23]
 8011472:	e020      	b.n	80114b6 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 4 : 3;
 8011474:	edd7 7a03 	vldr	s15, [r7, #12]
 8011478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801147c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011480:	d501      	bpl.n	8011486 <Sector_Detection+0x4a>
 8011482:	2304      	movs	r3, #4
 8011484:	e000      	b.n	8011488 <Sector_Detection+0x4c>
 8011486:	2303      	movs	r3, #3
 8011488:	75fb      	strb	r3, [r7, #23]
 801148a:	e014      	b.n	80114b6 <Sector_Detection+0x7a>
    }
    else
    {
        if (Z > 0)
 801148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8011490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011498:	dd02      	ble.n	80114a0 <Sector_Detection+0x64>
            sector = 2;
 801149a:	2302      	movs	r3, #2
 801149c:	75fb      	strb	r3, [r7, #23]
 801149e:	e00a      	b.n	80114b6 <Sector_Detection+0x7a>
        else
            sector = (X < 0) ? 6 : 1;
 80114a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80114a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ac:	d501      	bpl.n	80114b2 <Sector_Detection+0x76>
 80114ae:	2306      	movs	r3, #6
 80114b0:	e000      	b.n	80114b4 <Sector_Detection+0x78>
 80114b2:	2301      	movs	r3, #1
 80114b4:	75fb      	strb	r3, [r7, #23]
    }
    return sector;
 80114b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	371c      	adds	r7, #28
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <Duty_Calculation>:

/**
 * @brief  计算并输出占空比
 */
static void Duty_Calculation(float Ta, float Tb, float Tc, float Ts)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b088      	sub	sp, #32
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80114ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80114d2:	ed87 1a01 	vstr	s2, [r7, #4]
 80114d6:	edc7 1a00 	vstr	s3, [r7]
    // 计算占空比并更新TIM寄存器
    uint32_t ccr[3] = {
        (uint32_t)(Ta / Ts * TIM_PERIOD),
 80114da:	edd7 6a03 	vldr	s13, [r7, #12]
 80114de:	ed97 7a00 	vldr	s14, [r7]
 80114e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114e6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80115a8 <Duty_Calculation+0xe4>
 80114ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80114f2:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 80114f6:	613b      	str	r3, [r7, #16]
        (uint32_t)(Tb / Ts * TIM_PERIOD),
 80114f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80114fc:	ed97 7a00 	vldr	s14, [r7]
 8011500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011504:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80115a8 <Duty_Calculation+0xe4>
 8011508:	ee67 7a87 	vmul.f32	s15, s15, s14
 801150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011510:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011514:	617b      	str	r3, [r7, #20]
        (uint32_t)(Tc / Ts * TIM_PERIOD)};
 8011516:	edd7 6a01 	vldr	s13, [r7, #4]
 801151a:	ed97 7a00 	vldr	s14, [r7]
 801151e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011522:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80115a8 <Duty_Calculation+0xe4>
 8011526:	ee67 7a87 	vmul.f32	s15, s15, s14
 801152a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801152e:	ee17 3a90 	vmov	r3, s15
    uint32_t ccr[3] = {
 8011532:	61bb      	str	r3, [r7, #24]

    // 限制占空比在0到5999之间
    for (int i = 0; i < 3; ++i)
 8011534:	2300      	movs	r3, #0
 8011536:	61fb      	str	r3, [r7, #28]
 8011538:	e026      	b.n	8011588 <Duty_Calculation+0xc4>
    {
        ccr[i] = fminf(TIM_PERIOD, fmaxf(0, ccr[i]));
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	3320      	adds	r3, #32
 8011540:	443b      	add	r3, r7
 8011542:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8011546:	ee07 3a90 	vmov	s15, r3
 801154a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801154e:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80115ac <Duty_Calculation+0xe8>
 8011552:	eeb0 0a67 	vmov.f32	s0, s15
 8011556:	f003 fd0b 	bl	8014f70 <fmaxf>
 801155a:	eef0 7a40 	vmov.f32	s15, s0
 801155e:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80115a8 <Duty_Calculation+0xe4>
 8011562:	eeb0 0a67 	vmov.f32	s0, s15
 8011566:	f003 fd20 	bl	8014faa <fminf>
 801156a:	eef0 7a40 	vmov.f32	s15, s0
 801156e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011572:	ee17 2a90 	vmov	r2, s15
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	3320      	adds	r3, #32
 801157c:	443b      	add	r3, r7
 801157e:	f843 2c10 	str.w	r2, [r3, #-16]
    for (int i = 0; i < 3; ++i)
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	3301      	adds	r3, #1
 8011586:	61fb      	str	r3, [r7, #28]
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	2b02      	cmp	r3, #2
 801158c:	ddd5      	ble.n	801153a <Duty_Calculation+0x76>
    }

    // 更新TIM寄存器
    TIM1->CCR1 = ccr[0];
 801158e:	4a08      	ldr	r2, [pc, #32]	@ (80115b0 <Duty_Calculation+0xec>)
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = ccr[1];
 8011594:	4a06      	ldr	r2, [pc, #24]	@ (80115b0 <Duty_Calculation+0xec>)
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	6393      	str	r3, [r2, #56]	@ 0x38
    TIM1->CCR3 = ccr[2];
 801159a:	4a05      	ldr	r2, [pc, #20]	@ (80115b0 <Duty_Calculation+0xec>)
 801159c:	69bb      	ldr	r3, [r7, #24]
 801159e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80115a0:	bf00      	nop
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	45bb7800 	.word	0x45bb7800
 80115ac:	00000000 	.word	0x00000000
 80115b0:	40010000 	.word	0x40010000
 80115b4:	00000000 	.word	0x00000000

080115b8 <pll_Init_V>:
 * @param f 信号频率(典型值:50)
 * @param F 采样频率(典型值:20000)
 * @param Umax 交流电压峰值
 */
void pll_Init_V(pll_Signal_V **signal, float f, uint16_t F)
{
 80115b8:	b590      	push	{r4, r7, lr}
 80115ba:	b087      	sub	sp, #28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80115c4:	460b      	mov	r3, r1
 80115c6:	80fb      	strh	r3, [r7, #6]
    // 分配内存空间
    (*signal) = (pll_Signal_V *)malloc(sizeof(pll_Signal_V));
 80115c8:	200c      	movs	r0, #12
 80115ca:	f000 fe7b 	bl	80122c4 <malloc>
 80115ce:	4603      	mov	r3, r0
 80115d0:	461a      	mov	r2, r3
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681c      	ldr	r4, [r3, #0]
 80115da:	2030      	movs	r0, #48	@ 0x30
 80115dc:	f000 fe72 	bl	80122c4 <malloc>
 80115e0:	4603      	mov	r3, r0
 80115e2:	6023      	str	r3, [r4, #0]
    (*signal)->pid = (PID *)malloc(sizeof(PID));
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681c      	ldr	r4, [r3, #0]
 80115e8:	2024      	movs	r0, #36	@ 0x24
 80115ea:	f000 fe6b 	bl	80122c4 <malloc>
 80115ee:	4603      	mov	r3, r0
 80115f0:	60a3      	str	r3, [r4, #8]

    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f04f 0200 	mov.w	r2, #0
 80115fc:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f04f 0200 	mov.w	r2, #0
 8011608:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f04f 0200 	mov.w	r2, #0
 8011614:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	f04f 0200 	mov.w	r2, #0
 8011620:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f04f 0200 	mov.w	r2, #0
 801162c:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f04f 0200 	mov.w	r2, #0
 8011638:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f04f 0200 	mov.w	r2, #0
 8011644:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f04f 0200 	mov.w	r2, #0
 8011650:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f04f 0200 	mov.w	r2, #0
 801165c:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f04f 0200 	mov.w	r2, #0
 8011668:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->theta = 0.f;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f04f 0200 	mov.w	r2, #0
 8011672:	605a      	str	r2, [r3, #4]
    (*signal)->basic->omiga0 = 2 * PI * f; // f典型值50
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	edd7 7a02 	vldr	s15, [r7, #8]
 801167e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011718 <pll_Init_V+0x160>
 8011682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011686:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;        // F典型值20000
 801168a:	88fb      	ldrh	r3, [r7, #6]
 801168c:	ee07 3a90 	vmov	s15, r3
 8011690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801169e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116a2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // 初始化pid参数
    float ki = (*signal)->basic->omiga0 * (*signal)->basic->omiga0;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80116ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116be:	edc7 7a05 	vstr	s15, [r7, #20]
    float kp = sqrt(2) * sqrt(ki);
 80116c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80116c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80116ca:	eeb0 0b47 	vmov.f64	d0, d7
 80116ce:	f003 fbd7 	bl	8014e80 <sqrt>
 80116d2:	eeb0 7b40 	vmov.f64	d7, d0
 80116d6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011710 <pll_Init_V+0x158>
 80116da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80116e2:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_Init((*signal)->pid, kp, ki, 0, 50 * PI, -20 * PI);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 801171c <pll_Init_V+0x164>
 80116f0:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 8011720 <pll_Init_V+0x168>
 80116f4:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8011724 <pll_Init_V+0x16c>
 80116f8:	edd7 0a05 	vldr	s1, [r7, #20]
 80116fc:	ed97 0a04 	vldr	s0, [r7, #16]
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff fc97 	bl	8011034 <pid_Init>
}
 8011706:	bf00      	nop
 8011708:	371c      	adds	r7, #28
 801170a:	46bd      	mov	sp, r7
 801170c:	bd90      	pop	{r4, r7, pc}
 801170e:	bf00      	nop
 8011710:	667f3bcd 	.word	0x667f3bcd
 8011714:	3ff6a09e 	.word	0x3ff6a09e
 8011718:	40c90fdb 	.word	0x40c90fdb
 801171c:	c27b53d2 	.word	0xc27b53d2
 8011720:	431d1463 	.word	0x431d1463
 8011724:	00000000 	.word	0x00000000

08011728 <pll_Init_I>:
 * @param F 采样频率(典型值:20000)
 * @param pi_kp PI控制器kp参数
 * @param pi_ki PI控制器ki参数
 */
void pll_Init_I(pll_Signal_I **signal, float f, uint16_t F)
{
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	ed87 0a02 	vstr	s0, [r7, #8]
 8011734:	460b      	mov	r3, r1
 8011736:	80fb      	strh	r3, [r7, #6]
    (*signal) = (pll_Signal_I *)malloc(sizeof(pll_Signal_I));
 8011738:	201c      	movs	r0, #28
 801173a:	f000 fdc3 	bl	80122c4 <malloc>
 801173e:	4603      	mov	r3, r0
 8011740:	461a      	mov	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	601a      	str	r2, [r3, #0]
    (*signal)->basic = (pll_Signal_Basic *)malloc(sizeof(pll_Signal_Basic));
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681c      	ldr	r4, [r3, #0]
 801174a:	2030      	movs	r0, #48	@ 0x30
 801174c:	f000 fdba 	bl	80122c4 <malloc>
 8011750:	4603      	mov	r3, r0
 8011752:	6023      	str	r3, [r4, #0]

    (*signal)->pid_d = (PID *)malloc(sizeof(PID));
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681c      	ldr	r4, [r3, #0]
 8011758:	2024      	movs	r0, #36	@ 0x24
 801175a:	f000 fdb3 	bl	80122c4 <malloc>
 801175e:	4603      	mov	r3, r0
 8011760:	6163      	str	r3, [r4, #20]
    (*signal)->pid_q = (PID *)malloc(sizeof(PID));
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681c      	ldr	r4, [r3, #0]
 8011766:	2024      	movs	r0, #36	@ 0x24
 8011768:	f000 fdac 	bl	80122c4 <malloc>
 801176c:	4603      	mov	r3, r0
 801176e:	61a3      	str	r3, [r4, #24]
    // 初始化赋值
    (*signal)->basic->input_a = 0.f;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f04f 0200 	mov.w	r2, #0
 801177a:	601a      	str	r2, [r3, #0]
    (*signal)->basic->input_b = 0.f;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f04f 0200 	mov.w	r2, #0
 8011786:	605a      	str	r2, [r3, #4]
    (*signal)->basic->input_c = 0.f;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f04f 0200 	mov.w	r2, #0
 8011792:	609a      	str	r2, [r3, #8]

    (*signal)->basic->rms_a = 0.f;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f04f 0200 	mov.w	r2, #0
 801179e:	60da      	str	r2, [r3, #12]
    (*signal)->basic->rms_b = 0.f;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	f04f 0200 	mov.w	r2, #0
 80117aa:	611a      	str	r2, [r3, #16]
    (*signal)->basic->rms_c = 0.f;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f04f 0200 	mov.w	r2, #0
 80117b6:	615a      	str	r2, [r3, #20]

    (*signal)->basic->clarke_alpha = 0.f;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f04f 0200 	mov.w	r2, #0
 80117c2:	619a      	str	r2, [r3, #24]
    (*signal)->basic->clarke_beta = 0.f;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f04f 0200 	mov.w	r2, #0
 80117ce:	61da      	str	r2, [r3, #28]

    (*signal)->basic->park_d = 0.f;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f04f 0200 	mov.w	r2, #0
 80117da:	621a      	str	r2, [r3, #32]
    (*signal)->basic->park_q = 0.f;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f04f 0200 	mov.w	r2, #0
 80117e6:	625a      	str	r2, [r3, #36]	@ 0x24

    (*signal)->park_inv_alpha = 0.f;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f04f 0200 	mov.w	r2, #0
 80117f0:	605a      	str	r2, [r3, #4]
    (*signal)->park_inv_beta = 0.f;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f04f 0200 	mov.w	r2, #0
 80117fa:	609a      	str	r2, [r3, #8]

    (*signal)->basic->omiga0 = 2.f * PI * f; // f典型值50
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	edd7 7a02 	vldr	s15, [r7, #8]
 8011806:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011888 <pll_Init_I+0x160>
 801180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801180e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    (*signal)->basic->Ts = 1.f / F;          // F典型值20000
 8011812:	88fb      	ldrh	r3, [r7, #6]
 8011814:	ee07 3a90 	vmov	s15, r3
 8011818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801182a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    (*signal)->CorL = 0;   // 0:感性 1:容性
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2200      	movs	r2, #0
 8011834:	731a      	strb	r2, [r3, #12]
    (*signal)->L = 0.001f; // 1mH
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a14      	ldr	r2, [pc, #80]	@ (801188c <pll_Init_I+0x164>)
 801183c:	611a      	str	r2, [r3, #16]
    // 在调整取值范围时看实际输出值逐渐逼近，防止上电瞬间电流过大
    pid_Init((*signal)->pid_d, 1.8f, 0.01f, 0, 0.2f, -0.4f);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8011890 <pll_Init_I+0x168>
 8011848:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8011894 <pll_Init_I+0x16c>
 801184c:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8011898 <pll_Init_I+0x170>
 8011850:	eddf 0a12 	vldr	s1, [pc, #72]	@ 801189c <pll_Init_I+0x174>
 8011854:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80118a0 <pll_Init_I+0x178>
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fbeb 	bl	8011034 <pid_Init>
    pid_Init((*signal)->pid_q, 1.8f, 0.01f, 0, 0.2f, -0.2f);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	699b      	ldr	r3, [r3, #24]
 8011864:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 80118a4 <pll_Init_I+0x17c>
 8011868:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 8011894 <pll_Init_I+0x16c>
 801186c:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8011898 <pll_Init_I+0x170>
 8011870:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 801189c <pll_Init_I+0x174>
 8011874:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80118a0 <pll_Init_I+0x178>
 8011878:	4618      	mov	r0, r3
 801187a:	f7ff fbdb 	bl	8011034 <pid_Init>
}
 801187e:	bf00      	nop
 8011880:	3714      	adds	r7, #20
 8011882:	46bd      	mov	sp, r7
 8011884:	bd90      	pop	{r4, r7, pc}
 8011886:	bf00      	nop
 8011888:	40c90fdb 	.word	0x40c90fdb
 801188c:	3a83126f 	.word	0x3a83126f
 8011890:	becccccd 	.word	0xbecccccd
 8011894:	3e4ccccd 	.word	0x3e4ccccd
 8011898:	00000000 	.word	0x00000000
 801189c:	3c23d70a 	.word	0x3c23d70a
 80118a0:	3fe66666 	.word	0x3fe66666
 80118a4:	be4ccccd 	.word	0xbe4ccccd

080118a8 <pll_Control_V>:
/**
 * @brief 电压锁相控制
 * @param signal_V 电压信号指针
 */
void pll_Control_V(pll_Signal_V *signal_V)
{
 80118a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ac:	ed2d 8b02 	vpush	{d8}
 80118b0:	b088      	sub	sp, #32
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
    // 先对信号进行clarke变换
    pll_Clarke(signal_V->basic);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f000 f9d4 	bl	8011c68 <pll_Clarke>
    // 再对信号sogi变换后的信号进行park变换
    arm_park_f32(signal_V->basic->clarke_alpha, signal_V->basic->clarke_beta, &signal_V->basic->park_d, &signal_V->basic->park_q, arm_sin_f32(signal_V->theta), arm_cos_f32(signal_V->theta));
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	69de      	ldr	r6, [r3, #28]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f103 0520 	add.w	r5, r3, #32
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80118e4:	eeb0 0a67 	vmov.f32	s0, s15
 80118e8:	f000 fc5c 	bl	80121a4 <arm_sin_f32>
 80118ec:	eeb0 8a40 	vmov.f32	s16, s0
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80118f6:	eeb0 0a67 	vmov.f32	s0, s15
 80118fa:	f000 fc99 	bl	8012230 <arm_cos_f32>
 80118fe:	eef0 7a40 	vmov.f32	s15, s0
 8011902:	f8c7 801c 	str.w	r8, [r7, #28]
 8011906:	61be      	str	r6, [r7, #24]
 8011908:	617d      	str	r5, [r7, #20]
 801190a:	613c      	str	r4, [r7, #16]
 801190c:	ed87 8a03 	vstr	s16, [r7, #12]
 8011910:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pId using the equation, pId = Ialpha * cosVal + Ibeta * sinVal */
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011914:	ed97 7a07 	vldr	s14, [r7, #28]
 8011918:	edd7 7a02 	vldr	s15, [r7, #8]
 801191c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011920:	edd7 6a06 	vldr	s13, [r7, #24]
 8011924:	edd7 7a03 	vldr	s15, [r7, #12]
 8011928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIq using the equation, pIq = - Ialpha * sinVal + Ibeta * cosVal */
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011936:	edd7 7a07 	vldr	s15, [r7, #28]
 801193a:	eeb1 7a67 	vneg.f32	s14, s15
 801193e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011942:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011946:	edd7 6a06 	vldr	s13, [r7, #24]
 801194a:	edd7 7a02 	vldr	s15, [r7, #8]
 801194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	edc3 7a00 	vstr	s15, [r3]
  }
 801195c:	bf00      	nop
    // 将park变换后的q送入PI控制器  输入值为设定值和采样值的误差
    pid(signal_V->pid, signal_V->basic->park_q, 0); // pid的输出值为旋转坐标系角速度
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	689a      	ldr	r2, [r3, #8]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801196a:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80119e8 <pll_Control_V+0x140>
 801196e:	eeb0 0a67 	vmov.f32	s0, s15
 8011972:	4610      	mov	r0, r2
 8011974:	f7ff fb91 	bl	801109a <pid>
    // 更新theta
    signal_V->theta += (signal_V->pid->out + signal_V->basic->omiga0) * signal_V->basic->Ts;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	ed93 7a01 	vldr	s14, [r3, #4]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	edd3 6a06 	vldr	s13, [r3, #24]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801198e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801199a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->theta = (float)fmod(signal_V->theta, 2 * PI);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80119ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80119b2:	ed9f 1b0b 	vldr	d1, [pc, #44]	@ 80119e0 <pll_Control_V+0x138>
 80119b6:	eeb0 0b47 	vmov.f64	d0, d7
 80119ba:	f003 fa3d 	bl	8014e38 <fmod>
 80119be:	eeb0 7b40 	vmov.f64	d7, d0
 80119c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80119cc:	bf00      	nop
 80119ce:	3720      	adds	r7, #32
 80119d0:	46bd      	mov	sp, r7
 80119d2:	ecbd 8b02 	vpop	{d8}
 80119d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119da:	bf00      	nop
 80119dc:	f3af 8000 	nop.w
 80119e0:	60000000 	.word	0x60000000
 80119e4:	401921fb 	.word	0x401921fb
 80119e8:	00000000 	.word	0x00000000

080119ec <pll_Control_I>:
 * @param signal_V 电压信号指针
 * @param Iset 电流设定值(有效值)
 * @param PF 功率因数
 */
void pll_Control_I(pll_Signal_I *signal_I, pll_Signal_V *signal_V, float Iset, float PF)
{
 80119ec:	b590      	push	{r4, r7, lr}
 80119ee:	b099      	sub	sp, #100	@ 0x64
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80119fa:	edc7 0a00 	vstr	s1, [r7]
    // 先对信号进行clarke变换
    pll_Clarke(signal_I->basic);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f000 f930 	bl	8011c68 <pll_Clarke>
    // 在电压的系上得出电流的dq值
    float sinTheta = arm_sin_f32(signal_V->theta);
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8011a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8011a12:	f000 fbc7 	bl	80121a4 <arm_sin_f32>
 8011a16:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    float cosTheta = arm_cos_f32(signal_V->theta);
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011a20:	eeb0 0a67 	vmov.f32	s0, s15
 8011a24:	f000 fc04 	bl	8012230 <arm_cos_f32>
 8011a28:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

    arm_park_f32(signal_I->basic->clarke_alpha, signal_I->basic->clarke_beta, &signal_I->basic->park_d, &signal_I->basic->park_q, sinTheta, cosTheta);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	6998      	ldr	r0, [r3, #24]
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	69d9      	ldr	r1, [r3, #28]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f103 0220 	add.w	r2, r3, #32
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3324      	adds	r3, #36	@ 0x24
 8011a46:	6438      	str	r0, [r7, #64]	@ 0x40
 8011a48:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8011a4a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8011a56:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011a5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a62:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011a66:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a74:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8011a78:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8011a7c:	eeb1 7a67 	vneg.f32	s14, s15
 8011a80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8011a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a88:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011a8c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a9a:	edc3 7a00 	vstr	s15, [r3]
  }
 8011a9e:	bf00      	nop
    // PI控制
    float PFTheta = asinf(PF);
 8011aa0:	ed97 0a00 	vldr	s0, [r7]
 8011aa4:	f003 fa0c 	bl	8014ec0 <asinf>
 8011aa8:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

    float Ivalue = Iset * 1.414f / Ibase;
 8011aac:	edd7 7a01 	vldr	s15, [r7, #4]
 8011ab0:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8011c58 <pll_Control_I+0x26c>
 8011ab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011ab8:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8011c5c <pll_Control_I+0x270>
 8011abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ac0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    pid(signal_I->pid_d, Ivalue * arm_sin_f32(PFTheta), signal_I->basic->park_d); // 电流大小
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	695c      	ldr	r4, [r3, #20]
 8011ac8:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011acc:	f000 fb6a 	bl	80121a4 <arm_sin_f32>
 8011ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8011ad4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8011ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	ed93 7a08 	vldr	s14, [r3, #32]
 8011ae4:	eef0 0a47 	vmov.f32	s1, s14
 8011ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8011aec:	4620      	mov	r0, r4
 8011aee:	f7ff fad4 	bl	801109a <pid>

    float Iphase = Ivalue * arm_cos_f32(PFTheta) * (signal_I->CorL ? 1 : -1);
 8011af2:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8011af6:	f000 fb9b 	bl	8012230 <arm_cos_f32>
 8011afa:	eeb0 7a40 	vmov.f32	s14, s0
 8011afe:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8011b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	7b1b      	ldrb	r3, [r3, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <pll_Control_I+0x128>
 8011b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011b12:	e001      	b.n	8011b18 <pll_Control_I+0x12c>
 8011b14:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b1c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    pid(signal_I->pid_q, Iphase, signal_I->basic->park_q); // 电流相位
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	699a      	ldr	r2, [r3, #24]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011b2c:	eef0 0a67 	vmov.f32	s1, s15
 8011b30:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8011b34:	4610      	mov	r0, r2
 8011b36:	f7ff fab0 	bl	801109a <pid>
    // 解耦调制
    float Uabd = signal_V->basic->park_d - signal_I->pid_d->out + signal_I->basic->park_q * signal_I->basic->omiga0 * signal_I->L;
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	ed93 7a08 	vldr	s14, [r3, #32]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	edd3 7a06 	vldr	s15, [r3, #24]
 8011b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011b5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	edd3 7a04 	vldr	s15, [r3, #16]
 8011b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b70:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float Uabq = signal_V->basic->park_q - signal_I->pid_q->out - signal_I->basic->park_d * signal_I->basic->omiga0 * signal_I->L;
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	699b      	ldr	r3, [r3, #24]
 8011b80:	edd3 7a06 	vldr	s15, [r3, #24]
 8011b84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	edd3 6a08 	vldr	s13, [r3, #32]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011b98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8011ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011baa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    // 限幅
    Uabd = fmaxf(-0.95f, fminf(0.95f, Uabd));
 8011bae:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8011c60 <pll_Control_I+0x274>
 8011bb2:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8011bb6:	f003 f9f8 	bl	8014faa <fminf>
 8011bba:	eef0 7a40 	vmov.f32	s15, s0
 8011bbe:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8011c64 <pll_Control_I+0x278>
 8011bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8011bc6:	f003 f9d3 	bl	8014f70 <fmaxf>
 8011bca:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    Uabq = fmaxf(-0.95f, fminf(0.95f, Uabq));
 8011bce:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8011c60 <pll_Control_I+0x274>
 8011bd2:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8011bd6:	f003 f9e8 	bl	8014faa <fminf>
 8011bda:	eef0 7a40 	vmov.f32	s15, s0
 8011bde:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8011c64 <pll_Control_I+0x278>
 8011be2:	eeb0 0a67 	vmov.f32	s0, s15
 8011be6:	f003 f9c3 	bl	8014f70 <fmaxf>
 8011bea:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    // park逆变换
    arm_inv_park_f32(Uabd, Uabq, &signal_I->park_inv_alpha, &signal_I->park_inv_beta, sinTheta, cosTheta);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	1d1a      	adds	r2, r3, #4
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	3308      	adds	r3, #8
 8011bf6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011bf8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8011bfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011bfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8011bfe:	623a      	str	r2, [r7, #32]
 8011c00:	61fb      	str	r3, [r7, #28]
 8011c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c04:	61bb      	str	r3, [r7, #24]
 8011c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c08:	617b      	str	r3, [r7, #20]
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {
    /* Calculate pIalpha using the equation, pIalpha = Id * cosVal - Iq * sinVal */
    *pIalpha = Id * cosVal - Iq * sinVal;
 8011c0a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c16:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	edc3 7a00 	vstr	s15, [r3]

    /* Calculate pIbeta using the equation, pIbeta = Id * sinVal + Iq * cosVal */
    *pIbeta = Id * sinVal + Iq * cosVal;
 8011c2c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8011c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c38:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8011c3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	edc3 7a00 	vstr	s15, [r3]
  }
 8011c4e:	bf00      	nop
}
 8011c50:	bf00      	nop
 8011c52:	3764      	adds	r7, #100	@ 0x64
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd90      	pop	{r4, r7, pc}
 8011c58:	3fb4fdf4 	.word	0x3fb4fdf4
 8011c5c:	4107be77 	.word	0x4107be77
 8011c60:	3f733333 	.word	0x3f733333
 8011c64:	bf733333 	.word	0xbf733333

08011c68 <pll_Clarke>:
/**
 * @brief clarke变换
 * @param basic 信号基本变量指针
 */
static void pll_Clarke(pll_Signal_Basic *basic)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    basic->clarke_alpha = (2.f * basic->input_a - basic->input_b - basic->input_c) / 3.f;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	edd3 7a00 	vldr	s15, [r3]
 8011c76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8011c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	edd3 7a02 	vldr	s15, [r3, #8]
 8011c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c8e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	edc3 7a06 	vstr	s15, [r3, #24]
    basic->clarke_beta = 0.57735026f * (basic->input_b - basic->input_c);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	edd3 7a02 	vldr	s15, [r3, #8]
 8011ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011cac:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8011cc8 <pll_Clarke+0x60>
 8011cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8011cba:	bf00      	nop
 8011cbc:	370c      	adds	r7, #12
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr
 8011cc6:	bf00      	nop
 8011cc8:	3f13cd3a 	.word	0x3f13cd3a

08011ccc <HAL_GPIO_EXTI_Callback>:

/**
 * @brief  GPIO触发中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == AD7606_BUSY_Pin)
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	2b40      	cmp	r3, #64	@ 0x40
 8011cda:	d138      	bne.n	8011d4e <HAL_GPIO_EXTI_Callback+0x82>
    {
        getVoltageCurrent();     // 获取电压电流
 8011cdc:	f000 f956 	bl	8011f8c <getVoltageCurrent>
        calcEffectiveValue();    // 计算有效值
 8011ce0:	f000 f848 	bl	8011d74 <calcEffectiveValue>
        normalize();             // 标幺化
 8011ce4:	f000 f8ee 	bl	8011ec4 <normalize>
        pll_Control_V(signal_V); // 锁相控制
 8011ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8011d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7ff fddb 	bl	80118a8 <pll_Control_V>

#if RectifierOrInverter
        // 电流内环控制
        if (runState == RUN)
 8011cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8011d5c <HAL_GPIO_EXTI_Callback+0x90>)
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d10b      	bne.n	8011d14 <HAL_GPIO_EXTI_Callback+0x48>
            pll_Control_I(signal_I, signal_V, 1.2f, 1.f);
 8011cfc:	4b18      	ldr	r3, [pc, #96]	@ (8011d60 <HAL_GPIO_EXTI_Callback+0x94>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4a15      	ldr	r2, [pc, #84]	@ (8011d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011d02:	6812      	ldr	r2, [r2, #0]
 8011d04:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8011d08:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8011d64 <HAL_GPIO_EXTI_Callback+0x98>
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7ff fe6c 	bl	80119ec <pll_Control_I>
#endif

        svpwm_Control(signal_I); // svpwm调制
 8011d14:	4b12      	ldr	r3, [pc, #72]	@ (8011d60 <HAL_GPIO_EXTI_Callback+0x94>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff fa33 	bl	8011184 <svpwm_Control>

        // DAC输出
        // uint32_t dacValue = (uint32_t)((__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) - 3000.f) / 3000.f * 2000.f + 2048.f);
        uint32_t dacValue = (uint32_t)(signal_V->basic->input_a * 2000.f + 2048.f);
 8011d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8011d58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	edd3 7a00 	vldr	s15, [r3]
 8011d28:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011d68 <HAL_GPIO_EXTI_Callback+0x9c>
 8011d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d30:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011d6c <HAL_GPIO_EXTI_Callback+0xa0>
 8011d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d3c:	ee17 3a90 	vmov	r3, s15
 8011d40:	60fb      	str	r3, [r7, #12]
        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2200      	movs	r2, #0
 8011d46:	2100      	movs	r1, #0
 8011d48:	4809      	ldr	r0, [pc, #36]	@ (8011d70 <HAL_GPIO_EXTI_Callback+0xa4>)
 8011d4a:	f7f0 fb84 	bl	8002456 <HAL_DAC_SetValue>
    }
}
 8011d4e:	bf00      	nop
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	240094ec 	.word	0x240094ec
 8011d5c:	240094f4 	.word	0x240094f4
 8011d60:	240094f0 	.word	0x240094f0
 8011d64:	3f99999a 	.word	0x3f99999a
 8011d68:	44fa0000 	.word	0x44fa0000
 8011d6c:	45000000 	.word	0x45000000
 8011d70:	24000310 	.word	0x24000310

08011d74 <calcEffectiveValue>:

/**
 * @brief  计算电压电流有效值
 */
static void calcEffectiveValue(void)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	af00      	add	r7, sp, #0
    static float V_rms_c[400] = {0};
    static float I_rms_a[400] = {0};
    static float I_rms_b[400] = {0};
    static float I_rms_c[400] = {0};

    V_rms_a[cnt] = signal_V->basic->input_a;
 8011d78:	4b49      	ldr	r3, [pc, #292]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a49      	ldr	r2, [pc, #292]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011d80:	8812      	ldrh	r2, [r2, #0]
 8011d82:	b292      	uxth	r2, r2
 8011d84:	4610      	mov	r0, r2
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	4947      	ldr	r1, [pc, #284]	@ (8011ea8 <calcEffectiveValue+0x134>)
 8011d8a:	0083      	lsls	r3, r0, #2
 8011d8c:	440b      	add	r3, r1
 8011d8e:	601a      	str	r2, [r3, #0]
    V_rms_b[cnt] = signal_V->basic->input_b;
 8011d90:	4b43      	ldr	r3, [pc, #268]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a43      	ldr	r2, [pc, #268]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011d98:	8812      	ldrh	r2, [r2, #0]
 8011d9a:	b292      	uxth	r2, r2
 8011d9c:	4610      	mov	r0, r2
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	4942      	ldr	r1, [pc, #264]	@ (8011eac <calcEffectiveValue+0x138>)
 8011da2:	0083      	lsls	r3, r0, #2
 8011da4:	440b      	add	r3, r1
 8011da6:	601a      	str	r2, [r3, #0]
    V_rms_c[cnt] = signal_V->basic->input_c;
 8011da8:	4b3d      	ldr	r3, [pc, #244]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a3d      	ldr	r2, [pc, #244]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011db0:	8812      	ldrh	r2, [r2, #0]
 8011db2:	b292      	uxth	r2, r2
 8011db4:	4610      	mov	r0, r2
 8011db6:	689a      	ldr	r2, [r3, #8]
 8011db8:	493d      	ldr	r1, [pc, #244]	@ (8011eb0 <calcEffectiveValue+0x13c>)
 8011dba:	0083      	lsls	r3, r0, #2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	601a      	str	r2, [r3, #0]
    I_rms_a[cnt] = signal_I->basic->input_a;
 8011dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4a37      	ldr	r2, [pc, #220]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011dc8:	8812      	ldrh	r2, [r2, #0]
 8011dca:	b292      	uxth	r2, r2
 8011dcc:	4610      	mov	r0, r2
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	4939      	ldr	r1, [pc, #228]	@ (8011eb8 <calcEffectiveValue+0x144>)
 8011dd2:	0083      	lsls	r3, r0, #2
 8011dd4:	440b      	add	r3, r1
 8011dd6:	601a      	str	r2, [r3, #0]
    I_rms_b[cnt] = signal_I->basic->input_b;
 8011dd8:	4b36      	ldr	r3, [pc, #216]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	4a31      	ldr	r2, [pc, #196]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011de0:	8812      	ldrh	r2, [r2, #0]
 8011de2:	b292      	uxth	r2, r2
 8011de4:	4610      	mov	r0, r2
 8011de6:	685a      	ldr	r2, [r3, #4]
 8011de8:	4934      	ldr	r1, [pc, #208]	@ (8011ebc <calcEffectiveValue+0x148>)
 8011dea:	0083      	lsls	r3, r0, #2
 8011dec:	440b      	add	r3, r1
 8011dee:	601a      	str	r2, [r3, #0]
    I_rms_c[cnt] = signal_I->basic->input_c;
 8011df0:	4b30      	ldr	r3, [pc, #192]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4a2b      	ldr	r2, [pc, #172]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011df8:	8812      	ldrh	r2, [r2, #0]
 8011dfa:	b292      	uxth	r2, r2
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	689a      	ldr	r2, [r3, #8]
 8011e00:	492f      	ldr	r1, [pc, #188]	@ (8011ec0 <calcEffectiveValue+0x14c>)
 8011e02:	0083      	lsls	r3, r0, #2
 8011e04:	440b      	add	r3, r1
 8011e06:	601a      	str	r2, [r3, #0]

    if (++cnt == 400)
 8011e08:	4b26      	ldr	r3, [pc, #152]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011e0a:	881b      	ldrh	r3, [r3, #0]
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	3301      	adds	r3, #1
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	4a24      	ldr	r2, [pc, #144]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011e14:	4619      	mov	r1, r3
 8011e16:	8011      	strh	r1, [r2, #0]
 8011e18:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8011e1c:	d13e      	bne.n	8011e9c <calcEffectiveValue+0x128>
    {
        cnt = 0;
 8011e1e:	4b21      	ldr	r3, [pc, #132]	@ (8011ea4 <calcEffectiveValue+0x130>)
 8011e20:	2200      	movs	r2, #0
 8011e22:	801a      	strh	r2, [r3, #0]
        arm_rms_f32(V_rms_a, 400, &signal_V->basic->rms_a);
 8011e24:	4b1e      	ldr	r3, [pc, #120]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	330c      	adds	r3, #12
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e32:	481d      	ldr	r0, [pc, #116]	@ (8011ea8 <calcEffectiveValue+0x134>)
 8011e34:	f000 f93c 	bl	80120b0 <arm_rms_f32>
        arm_rms_f32(V_rms_b, 400, &signal_V->basic->rms_b);
 8011e38:	4b19      	ldr	r3, [pc, #100]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3310      	adds	r3, #16
 8011e40:	461a      	mov	r2, r3
 8011e42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e46:	4819      	ldr	r0, [pc, #100]	@ (8011eac <calcEffectiveValue+0x138>)
 8011e48:	f000 f932 	bl	80120b0 <arm_rms_f32>
        arm_rms_f32(V_rms_c, 400, &signal_V->basic->rms_c);
 8011e4c:	4b14      	ldr	r3, [pc, #80]	@ (8011ea0 <calcEffectiveValue+0x12c>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	3314      	adds	r3, #20
 8011e54:	461a      	mov	r2, r3
 8011e56:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e5a:	4815      	ldr	r0, [pc, #84]	@ (8011eb0 <calcEffectiveValue+0x13c>)
 8011e5c:	f000 f928 	bl	80120b0 <arm_rms_f32>
        arm_rms_f32(I_rms_a, 400, &signal_I->basic->rms_a);
 8011e60:	4b14      	ldr	r3, [pc, #80]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	330c      	adds	r3, #12
 8011e68:	461a      	mov	r2, r3
 8011e6a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e6e:	4812      	ldr	r0, [pc, #72]	@ (8011eb8 <calcEffectiveValue+0x144>)
 8011e70:	f000 f91e 	bl	80120b0 <arm_rms_f32>
        arm_rms_f32(I_rms_b, 400, &signal_I->basic->rms_b);
 8011e74:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3310      	adds	r3, #16
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e82:	480e      	ldr	r0, [pc, #56]	@ (8011ebc <calcEffectiveValue+0x148>)
 8011e84:	f000 f914 	bl	80120b0 <arm_rms_f32>
        arm_rms_f32(I_rms_c, 400, &signal_I->basic->rms_c);
 8011e88:	4b0a      	ldr	r3, [pc, #40]	@ (8011eb4 <calcEffectiveValue+0x140>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3314      	adds	r3, #20
 8011e90:	461a      	mov	r2, r3
 8011e92:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8011e96:	480a      	ldr	r0, [pc, #40]	@ (8011ec0 <calcEffectiveValue+0x14c>)
 8011e98:	f000 f90a 	bl	80120b0 <arm_rms_f32>
    }
}
 8011e9c:	bf00      	nop
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	240094ec 	.word	0x240094ec
 8011ea4:	24006f60 	.word	0x24006f60
 8011ea8:	24006f64 	.word	0x24006f64
 8011eac:	240075a4 	.word	0x240075a4
 8011eb0:	24007be4 	.word	0x24007be4
 8011eb4:	240094f0 	.word	0x240094f0
 8011eb8:	24008224 	.word	0x24008224
 8011ebc:	24008864 	.word	0x24008864
 8011ec0:	24008ea4 	.word	0x24008ea4

08011ec4 <normalize>:

/**
 * @brief  标幺化
 */
static void normalize(void)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	af00      	add	r7, sp, #0
    signal_V->basic->input_a /= Ubase;
 8011ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8011f7c <normalize+0xb8>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	ed93 7a00 	vldr	s14, [r3]
 8011ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8011f7c <normalize+0xb8>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011f80 <normalize+0xbc>
 8011edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ee0:	edc3 7a00 	vstr	s15, [r3]
    signal_V->basic->input_b /= Ubase;
 8011ee4:	4b25      	ldr	r3, [pc, #148]	@ (8011f7c <normalize+0xb8>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	ed93 7a01 	vldr	s14, [r3, #4]
 8011eee:	4b23      	ldr	r3, [pc, #140]	@ (8011f7c <normalize+0xb8>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8011f80 <normalize+0xbc>
 8011ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011efc:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_V->basic->input_c /= Ubase;
 8011f00:	4b1e      	ldr	r3, [pc, #120]	@ (8011f7c <normalize+0xb8>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8011f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8011f7c <normalize+0xb8>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8011f80 <normalize+0xbc>
 8011f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f18:	edc3 7a02 	vstr	s15, [r3, #8]
    signal_I->basic->input_a /= Ibase;
 8011f1c:	4b19      	ldr	r3, [pc, #100]	@ (8011f84 <normalize+0xc0>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	ed93 7a00 	vldr	s14, [r3]
 8011f26:	4b17      	ldr	r3, [pc, #92]	@ (8011f84 <normalize+0xc0>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8011f88 <normalize+0xc4>
 8011f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f34:	edc3 7a00 	vstr	s15, [r3]
    signal_I->basic->input_b /= Ibase;
 8011f38:	4b12      	ldr	r3, [pc, #72]	@ (8011f84 <normalize+0xc0>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f42:	4b10      	ldr	r3, [pc, #64]	@ (8011f84 <normalize+0xc0>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8011f88 <normalize+0xc4>
 8011f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f50:	edc3 7a01 	vstr	s15, [r3, #4]
    signal_I->basic->input_c /= Ibase;
 8011f54:	4b0b      	ldr	r3, [pc, #44]	@ (8011f84 <normalize+0xc0>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8011f5e:	4b09      	ldr	r3, [pc, #36]	@ (8011f84 <normalize+0xc0>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8011f88 <normalize+0xc4>
 8011f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f6c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011f70:	bf00      	nop
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	240094ec 	.word	0x240094ec
 8011f80:	41a9ae15 	.word	0x41a9ae15
 8011f84:	240094f0 	.word	0x240094f0
 8011f88:	4107be77 	.word	0x4107be77

08011f8c <getVoltageCurrent>:

/**
 * @brief  获取相电压和电流
 */
static void getVoltageCurrent(void)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b092      	sub	sp, #72	@ 0x48
 8011f90:	af00      	add	r7, sp, #0
    // 读取AD7606数据
    float adcValue[8] = {0};
 8011f92:	1d3b      	adds	r3, r7, #4
 8011f94:	2220      	movs	r2, #32
 8011f96:	2100      	movs	r1, #0
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f000 ffa6 	bl	8012eea <memset>
    ad7606_GetValue(&hspi2, 7, adcValue);
 8011f9e:	1d3b      	adds	r3, r7, #4
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	2107      	movs	r1, #7
 8011fa4:	4839      	ldr	r0, [pc, #228]	@ (801208c <getVoltageCurrent+0x100>)
 8011fa6:	f7fe fc05 	bl	80107b4 <ad7606_GetValue>

    // 处理电压数据，将线电压转为相电压
    float Uab = adcValue[2];
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	647b      	str	r3, [r7, #68]	@ 0x44
    float Ubc = adcValue[4];
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	643b      	str	r3, [r7, #64]	@ 0x40
    float Uca = adcValue[6];
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float samp_Va = 38.334749f * (Uab - Uca) / 3.f;
 8011fb6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8011fba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8011fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fc2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8012090 <getVoltageCurrent+0x104>
 8011fc6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011fca:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011fd2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float samp_Vb = 38.527397f * (Ubc - Uab) / 3.f;
 8011fd6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8011fda:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8011fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fe2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8012094 <getVoltageCurrent+0x108>
 8011fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011fea:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8011fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ff2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float samp_Vc = 38.525180f * (Uca - Ubc) / 3.f;
 8011ff6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011ffa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8011ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012002:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8012098 <getVoltageCurrent+0x10c>
 8012006:	ee27 7a87 	vmul.f32	s14, s15, s14
 801200a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 801200e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012012:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // 处理电流数据
    float samp_Ia = adcValue[1] * 2.178571f;
 8012016:	edd7 7a02 	vldr	s15, [r7, #8]
 801201a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801209c <getVoltageCurrent+0x110>
 801201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012022:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float samp_Ib = adcValue[3] * 2.250774f;
 8012026:	edd7 7a04 	vldr	s15, [r7, #16]
 801202a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80120a0 <getVoltageCurrent+0x114>
 801202e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012032:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float samp_Ic = adcValue[5] * 2.172956f;
 8012036:	edd7 7a06 	vldr	s15, [r7, #24]
 801203a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80120a4 <getVoltageCurrent+0x118>
 801203e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012042:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    signal_V->basic->input_a = samp_Va;
 8012046:	4b18      	ldr	r3, [pc, #96]	@ (80120a8 <getVoltageCurrent+0x11c>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801204e:	601a      	str	r2, [r3, #0]
    signal_V->basic->input_b = samp_Vb;
 8012050:	4b15      	ldr	r3, [pc, #84]	@ (80120a8 <getVoltageCurrent+0x11c>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012058:	605a      	str	r2, [r3, #4]
    signal_V->basic->input_c = samp_Vc;
 801205a:	4b13      	ldr	r3, [pc, #76]	@ (80120a8 <getVoltageCurrent+0x11c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012062:	609a      	str	r2, [r3, #8]
    signal_I->basic->input_a = samp_Ia;
 8012064:	4b11      	ldr	r3, [pc, #68]	@ (80120ac <getVoltageCurrent+0x120>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801206c:	601a      	str	r2, [r3, #0]
    signal_I->basic->input_b = samp_Ib;
 801206e:	4b0f      	ldr	r3, [pc, #60]	@ (80120ac <getVoltageCurrent+0x120>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012076:	605a      	str	r2, [r3, #4]
    signal_I->basic->input_c = samp_Ic;
 8012078:	4b0c      	ldr	r3, [pc, #48]	@ (80120ac <getVoltageCurrent+0x120>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012080:	609a      	str	r2, [r3, #8]
    // arm_fir_f32(fir_Vb, &samp_Vb, &signal_V->basic->input_b, 1);
    // arm_fir_f32(fir_Vc, &samp_Vc, &signal_V->basic->input_c, 1);
    // arm_fir_f32(fir_Ia, &samp_Ia, &signal_I->basic->input_a, 1);
    // arm_fir_f32(fir_Ib, &samp_Ib, &signal_I->basic->input_b, 1);
    // arm_fir_f32(fir_Ic, &samp_Ic, &signal_I->basic->input_c, 1);
}
 8012082:	bf00      	nop
 8012084:	3748      	adds	r7, #72	@ 0x48
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	24000438 	.word	0x24000438
 8012090:	421956c8 	.word	0x421956c8
 8012094:	421a1c0e 	.word	0x421a1c0e
 8012098:	421a19c9 	.word	0x421a19c9
 801209c:	400b6db5 	.word	0x400b6db5
 80120a0:	40100cae 	.word	0x40100cae
 80120a4:	400b11b6 	.word	0x400b11b6
 80120a8:	240094ec 	.word	0x240094ec
 80120ac:	240094f0 	.word	0x240094f0

080120b0 <arm_rms_f32>:
 80120b0:	b530      	push	{r4, r5, lr}
 80120b2:	088d      	lsrs	r5, r1, #2
 80120b4:	ed2d 8b02 	vpush	{d8}
 80120b8:	b083      	sub	sp, #12
 80120ba:	d054      	beq.n	8012166 <arm_rms_f32+0xb6>
 80120bc:	f100 0310 	add.w	r3, r0, #16
 80120c0:	462c      	mov	r4, r5
 80120c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801217c <arm_rms_f32+0xcc>
 80120c6:	ed53 6a04 	vldr	s13, [r3, #-16]
 80120ca:	3c01      	subs	r4, #1
 80120cc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80120d0:	f103 0310 	add.w	r3, r3, #16
 80120d4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80120d8:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 80120dc:	ee27 7a07 	vmul.f32	s14, s14, s14
 80120e0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80120e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120e8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80120ec:	ee26 6a06 	vmul.f32	s12, s12, s12
 80120f0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80120f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120f8:	ee76 5a27 	vadd.f32	s11, s12, s15
 80120fc:	d1e3      	bne.n	80120c6 <arm_rms_f32+0x16>
 80120fe:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8012102:	f011 0303 	ands.w	r3, r1, #3
 8012106:	d015      	beq.n	8012134 <arm_rms_f32+0x84>
 8012108:	edd0 7a00 	vldr	s15, [r0]
 801210c:	3b01      	subs	r3, #1
 801210e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012112:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012116:	d00d      	beq.n	8012134 <arm_rms_f32+0x84>
 8012118:	edd0 7a01 	vldr	s15, [r0, #4]
 801211c:	2b01      	cmp	r3, #1
 801211e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012122:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012126:	d005      	beq.n	8012134 <arm_rms_f32+0x84>
 8012128:	edd0 7a02 	vldr	s15, [r0, #8]
 801212c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012130:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8012134:	ee07 1a90 	vmov	s15, r1
 8012138:	2300      	movs	r3, #0
 801213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801213e:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 8012142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214a:	db0f      	blt.n	801216c <arm_rms_f32+0xbc>
 801214c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012150:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8012154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012158:	d40a      	bmi.n	8012170 <arm_rms_f32+0xc0>
 801215a:	ed82 8a00 	vstr	s16, [r2]
 801215e:	b003      	add	sp, #12
 8012160:	ecbd 8b02 	vpop	{d8}
 8012164:	bd30      	pop	{r4, r5, pc}
 8012166:	eddf 5a05 	vldr	s11, [pc, #20]	@ 801217c <arm_rms_f32+0xcc>
 801216a:	e7ca      	b.n	8012102 <arm_rms_f32+0x52>
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	e7f6      	b.n	801215e <arm_rms_f32+0xae>
 8012170:	9201      	str	r2, [sp, #4]
 8012172:	f002 fed1 	bl	8014f18 <sqrtf>
 8012176:	9a01      	ldr	r2, [sp, #4]
 8012178:	e7ef      	b.n	801215a <arm_rms_f32+0xaa>
 801217a:	bf00      	nop
 801217c:	00000000 	.word	0x00000000

08012180 <arm_fir_init_f32>:
 8012180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012182:	9f06      	ldr	r7, [sp, #24]
 8012184:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8012188:	460e      	mov	r6, r1
 801218a:	6082      	str	r2, [r0, #8]
 801218c:	443c      	add	r4, r7
 801218e:	4605      	mov	r5, r0
 8012190:	8006      	strh	r6, [r0, #0]
 8012192:	2100      	movs	r1, #0
 8012194:	19a2      	adds	r2, r4, r6
 8012196:	4618      	mov	r0, r3
 8012198:	0092      	lsls	r2, r2, #2
 801219a:	f000 fea6 	bl	8012eea <memset>
 801219e:	6068      	str	r0, [r5, #4]
 80121a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a2:	bf00      	nop

080121a4 <arm_sin_f32>:
 80121a4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8012224 <arm_sin_f32+0x80>
 80121a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80121ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80121b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	d504      	bpl.n	80121c4 <arm_sin_f32+0x20>
 80121ba:	ee17 3a90 	vmov	r3, s15
 80121be:	3b01      	subs	r3, #1
 80121c0:	ee07 3a90 	vmov	s15, r3
 80121c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121c8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8012228 <arm_sin_f32+0x84>
 80121cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80121d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80121d4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80121d8:	ee17 3a10 	vmov	r3, s14
 80121dc:	b29b      	uxth	r3, r3
 80121de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121e2:	d21a      	bcs.n	801221a <arm_sin_f32+0x76>
 80121e4:	ee07 3a10 	vmov	s14, r3
 80121e8:	1c59      	adds	r1, r3, #1
 80121ea:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80121ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80121f2:	4a0e      	ldr	r2, [pc, #56]	@ (801222c <arm_sin_f32+0x88>)
 80121f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80121f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012200:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012204:	edd3 6a00 	vldr	s13, [r3]
 8012208:	ed92 7a00 	vldr	s14, [r2]
 801220c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012214:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012218:	4770      	bx	lr
 801221a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801221e:	2101      	movs	r1, #1
 8012220:	2300      	movs	r3, #0
 8012222:	e7e6      	b.n	80121f2 <arm_sin_f32+0x4e>
 8012224:	3e22f983 	.word	0x3e22f983
 8012228:	44000000 	.word	0x44000000
 801222c:	08016e8c 	.word	0x08016e8c

08012230 <arm_cos_f32>:
 8012230:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80122b8 <arm_cos_f32+0x88>
 8012234:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8012238:	ee20 0a27 	vmul.f32	s0, s0, s15
 801223c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8012240:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012244:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224c:	d504      	bpl.n	8012258 <arm_cos_f32+0x28>
 801224e:	ee17 3a90 	vmov	r3, s15
 8012252:	3b01      	subs	r3, #1
 8012254:	ee07 3a90 	vmov	s15, r3
 8012258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801225c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80122bc <arm_cos_f32+0x8c>
 8012260:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012264:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012268:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801226c:	ee17 3a10 	vmov	r3, s14
 8012270:	b29b      	uxth	r3, r3
 8012272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012276:	d21a      	bcs.n	80122ae <arm_cos_f32+0x7e>
 8012278:	ee07 3a10 	vmov	s14, r3
 801227c:	1c59      	adds	r1, r3, #1
 801227e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8012282:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012286:	4a0e      	ldr	r2, [pc, #56]	@ (80122c0 <arm_cos_f32+0x90>)
 8012288:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801228c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012290:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012294:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012298:	edd3 6a00 	vldr	s13, [r3]
 801229c:	ed92 7a00 	vldr	s14, [r2]
 80122a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80122a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122ac:	4770      	bx	lr
 80122ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80122b2:	2101      	movs	r1, #1
 80122b4:	2300      	movs	r3, #0
 80122b6:	e7e6      	b.n	8012286 <arm_cos_f32+0x56>
 80122b8:	3e22f983 	.word	0x3e22f983
 80122bc:	44000000 	.word	0x44000000
 80122c0:	08016e8c 	.word	0x08016e8c

080122c4 <malloc>:
 80122c4:	4b02      	ldr	r3, [pc, #8]	@ (80122d0 <malloc+0xc>)
 80122c6:	4601      	mov	r1, r0
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	f000 b825 	b.w	8012318 <_malloc_r>
 80122ce:	bf00      	nop
 80122d0:	24000138 	.word	0x24000138

080122d4 <sbrk_aligned>:
 80122d4:	b570      	push	{r4, r5, r6, lr}
 80122d6:	4e0f      	ldr	r6, [pc, #60]	@ (8012314 <sbrk_aligned+0x40>)
 80122d8:	460c      	mov	r4, r1
 80122da:	6831      	ldr	r1, [r6, #0]
 80122dc:	4605      	mov	r5, r0
 80122de:	b911      	cbnz	r1, 80122e6 <sbrk_aligned+0x12>
 80122e0:	f000 fe44 	bl	8012f6c <_sbrk_r>
 80122e4:	6030      	str	r0, [r6, #0]
 80122e6:	4621      	mov	r1, r4
 80122e8:	4628      	mov	r0, r5
 80122ea:	f000 fe3f 	bl	8012f6c <_sbrk_r>
 80122ee:	1c43      	adds	r3, r0, #1
 80122f0:	d103      	bne.n	80122fa <sbrk_aligned+0x26>
 80122f2:	f04f 34ff 	mov.w	r4, #4294967295
 80122f6:	4620      	mov	r0, r4
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	1cc4      	adds	r4, r0, #3
 80122fc:	f024 0403 	bic.w	r4, r4, #3
 8012300:	42a0      	cmp	r0, r4
 8012302:	d0f8      	beq.n	80122f6 <sbrk_aligned+0x22>
 8012304:	1a21      	subs	r1, r4, r0
 8012306:	4628      	mov	r0, r5
 8012308:	f000 fe30 	bl	8012f6c <_sbrk_r>
 801230c:	3001      	adds	r0, #1
 801230e:	d1f2      	bne.n	80122f6 <sbrk_aligned+0x22>
 8012310:	e7ef      	b.n	80122f2 <sbrk_aligned+0x1e>
 8012312:	bf00      	nop
 8012314:	24009708 	.word	0x24009708

08012318 <_malloc_r>:
 8012318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801231c:	1ccd      	adds	r5, r1, #3
 801231e:	f025 0503 	bic.w	r5, r5, #3
 8012322:	3508      	adds	r5, #8
 8012324:	2d0c      	cmp	r5, #12
 8012326:	bf38      	it	cc
 8012328:	250c      	movcc	r5, #12
 801232a:	2d00      	cmp	r5, #0
 801232c:	4606      	mov	r6, r0
 801232e:	db01      	blt.n	8012334 <_malloc_r+0x1c>
 8012330:	42a9      	cmp	r1, r5
 8012332:	d904      	bls.n	801233e <_malloc_r+0x26>
 8012334:	230c      	movs	r3, #12
 8012336:	6033      	str	r3, [r6, #0]
 8012338:	2000      	movs	r0, #0
 801233a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801233e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012414 <_malloc_r+0xfc>
 8012342:	f000 f869 	bl	8012418 <__malloc_lock>
 8012346:	f8d8 3000 	ldr.w	r3, [r8]
 801234a:	461c      	mov	r4, r3
 801234c:	bb44      	cbnz	r4, 80123a0 <_malloc_r+0x88>
 801234e:	4629      	mov	r1, r5
 8012350:	4630      	mov	r0, r6
 8012352:	f7ff ffbf 	bl	80122d4 <sbrk_aligned>
 8012356:	1c43      	adds	r3, r0, #1
 8012358:	4604      	mov	r4, r0
 801235a:	d158      	bne.n	801240e <_malloc_r+0xf6>
 801235c:	f8d8 4000 	ldr.w	r4, [r8]
 8012360:	4627      	mov	r7, r4
 8012362:	2f00      	cmp	r7, #0
 8012364:	d143      	bne.n	80123ee <_malloc_r+0xd6>
 8012366:	2c00      	cmp	r4, #0
 8012368:	d04b      	beq.n	8012402 <_malloc_r+0xea>
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	4639      	mov	r1, r7
 801236e:	4630      	mov	r0, r6
 8012370:	eb04 0903 	add.w	r9, r4, r3
 8012374:	f000 fdfa 	bl	8012f6c <_sbrk_r>
 8012378:	4581      	cmp	r9, r0
 801237a:	d142      	bne.n	8012402 <_malloc_r+0xea>
 801237c:	6821      	ldr	r1, [r4, #0]
 801237e:	1a6d      	subs	r5, r5, r1
 8012380:	4629      	mov	r1, r5
 8012382:	4630      	mov	r0, r6
 8012384:	f7ff ffa6 	bl	80122d4 <sbrk_aligned>
 8012388:	3001      	adds	r0, #1
 801238a:	d03a      	beq.n	8012402 <_malloc_r+0xea>
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	442b      	add	r3, r5
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	f8d8 3000 	ldr.w	r3, [r8]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	bb62      	cbnz	r2, 80123f4 <_malloc_r+0xdc>
 801239a:	f8c8 7000 	str.w	r7, [r8]
 801239e:	e00f      	b.n	80123c0 <_malloc_r+0xa8>
 80123a0:	6822      	ldr	r2, [r4, #0]
 80123a2:	1b52      	subs	r2, r2, r5
 80123a4:	d420      	bmi.n	80123e8 <_malloc_r+0xd0>
 80123a6:	2a0b      	cmp	r2, #11
 80123a8:	d917      	bls.n	80123da <_malloc_r+0xc2>
 80123aa:	1961      	adds	r1, r4, r5
 80123ac:	42a3      	cmp	r3, r4
 80123ae:	6025      	str	r5, [r4, #0]
 80123b0:	bf18      	it	ne
 80123b2:	6059      	strne	r1, [r3, #4]
 80123b4:	6863      	ldr	r3, [r4, #4]
 80123b6:	bf08      	it	eq
 80123b8:	f8c8 1000 	streq.w	r1, [r8]
 80123bc:	5162      	str	r2, [r4, r5]
 80123be:	604b      	str	r3, [r1, #4]
 80123c0:	4630      	mov	r0, r6
 80123c2:	f000 f82f 	bl	8012424 <__malloc_unlock>
 80123c6:	f104 000b 	add.w	r0, r4, #11
 80123ca:	1d23      	adds	r3, r4, #4
 80123cc:	f020 0007 	bic.w	r0, r0, #7
 80123d0:	1ac2      	subs	r2, r0, r3
 80123d2:	bf1c      	itt	ne
 80123d4:	1a1b      	subne	r3, r3, r0
 80123d6:	50a3      	strne	r3, [r4, r2]
 80123d8:	e7af      	b.n	801233a <_malloc_r+0x22>
 80123da:	6862      	ldr	r2, [r4, #4]
 80123dc:	42a3      	cmp	r3, r4
 80123de:	bf0c      	ite	eq
 80123e0:	f8c8 2000 	streq.w	r2, [r8]
 80123e4:	605a      	strne	r2, [r3, #4]
 80123e6:	e7eb      	b.n	80123c0 <_malloc_r+0xa8>
 80123e8:	4623      	mov	r3, r4
 80123ea:	6864      	ldr	r4, [r4, #4]
 80123ec:	e7ae      	b.n	801234c <_malloc_r+0x34>
 80123ee:	463c      	mov	r4, r7
 80123f0:	687f      	ldr	r7, [r7, #4]
 80123f2:	e7b6      	b.n	8012362 <_malloc_r+0x4a>
 80123f4:	461a      	mov	r2, r3
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	42a3      	cmp	r3, r4
 80123fa:	d1fb      	bne.n	80123f4 <_malloc_r+0xdc>
 80123fc:	2300      	movs	r3, #0
 80123fe:	6053      	str	r3, [r2, #4]
 8012400:	e7de      	b.n	80123c0 <_malloc_r+0xa8>
 8012402:	230c      	movs	r3, #12
 8012404:	6033      	str	r3, [r6, #0]
 8012406:	4630      	mov	r0, r6
 8012408:	f000 f80c 	bl	8012424 <__malloc_unlock>
 801240c:	e794      	b.n	8012338 <_malloc_r+0x20>
 801240e:	6005      	str	r5, [r0, #0]
 8012410:	e7d6      	b.n	80123c0 <_malloc_r+0xa8>
 8012412:	bf00      	nop
 8012414:	2400970c 	.word	0x2400970c

08012418 <__malloc_lock>:
 8012418:	4801      	ldr	r0, [pc, #4]	@ (8012420 <__malloc_lock+0x8>)
 801241a:	f000 bdf4 	b.w	8013006 <__retarget_lock_acquire_recursive>
 801241e:	bf00      	nop
 8012420:	24009850 	.word	0x24009850

08012424 <__malloc_unlock>:
 8012424:	4801      	ldr	r0, [pc, #4]	@ (801242c <__malloc_unlock+0x8>)
 8012426:	f000 bdef 	b.w	8013008 <__retarget_lock_release_recursive>
 801242a:	bf00      	nop
 801242c:	24009850 	.word	0x24009850

08012430 <__cvt>:
 8012430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012432:	ed2d 8b02 	vpush	{d8}
 8012436:	eeb0 8b40 	vmov.f64	d8, d0
 801243a:	b085      	sub	sp, #20
 801243c:	4617      	mov	r7, r2
 801243e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012440:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012442:	ee18 2a90 	vmov	r2, s17
 8012446:	f025 0520 	bic.w	r5, r5, #32
 801244a:	2a00      	cmp	r2, #0
 801244c:	bfb6      	itet	lt
 801244e:	222d      	movlt	r2, #45	@ 0x2d
 8012450:	2200      	movge	r2, #0
 8012452:	eeb1 8b40 	vneglt.f64	d8, d0
 8012456:	2d46      	cmp	r5, #70	@ 0x46
 8012458:	460c      	mov	r4, r1
 801245a:	701a      	strb	r2, [r3, #0]
 801245c:	d004      	beq.n	8012468 <__cvt+0x38>
 801245e:	2d45      	cmp	r5, #69	@ 0x45
 8012460:	d100      	bne.n	8012464 <__cvt+0x34>
 8012462:	3401      	adds	r4, #1
 8012464:	2102      	movs	r1, #2
 8012466:	e000      	b.n	801246a <__cvt+0x3a>
 8012468:	2103      	movs	r1, #3
 801246a:	ab03      	add	r3, sp, #12
 801246c:	9301      	str	r3, [sp, #4]
 801246e:	ab02      	add	r3, sp, #8
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	4622      	mov	r2, r4
 8012474:	4633      	mov	r3, r6
 8012476:	eeb0 0b48 	vmov.f64	d0, d8
 801247a:	f000 fe5d 	bl	8013138 <_dtoa_r>
 801247e:	2d47      	cmp	r5, #71	@ 0x47
 8012480:	d114      	bne.n	80124ac <__cvt+0x7c>
 8012482:	07fb      	lsls	r3, r7, #31
 8012484:	d50a      	bpl.n	801249c <__cvt+0x6c>
 8012486:	1902      	adds	r2, r0, r4
 8012488:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012490:	bf08      	it	eq
 8012492:	9203      	streq	r2, [sp, #12]
 8012494:	2130      	movs	r1, #48	@ 0x30
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	4293      	cmp	r3, r2
 801249a:	d319      	bcc.n	80124d0 <__cvt+0xa0>
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124a0:	1a1b      	subs	r3, r3, r0
 80124a2:	6013      	str	r3, [r2, #0]
 80124a4:	b005      	add	sp, #20
 80124a6:	ecbd 8b02 	vpop	{d8}
 80124aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ac:	2d46      	cmp	r5, #70	@ 0x46
 80124ae:	eb00 0204 	add.w	r2, r0, r4
 80124b2:	d1e9      	bne.n	8012488 <__cvt+0x58>
 80124b4:	7803      	ldrb	r3, [r0, #0]
 80124b6:	2b30      	cmp	r3, #48	@ 0x30
 80124b8:	d107      	bne.n	80124ca <__cvt+0x9a>
 80124ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80124be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124c2:	bf1c      	itt	ne
 80124c4:	f1c4 0401 	rsbne	r4, r4, #1
 80124c8:	6034      	strne	r4, [r6, #0]
 80124ca:	6833      	ldr	r3, [r6, #0]
 80124cc:	441a      	add	r2, r3
 80124ce:	e7db      	b.n	8012488 <__cvt+0x58>
 80124d0:	1c5c      	adds	r4, r3, #1
 80124d2:	9403      	str	r4, [sp, #12]
 80124d4:	7019      	strb	r1, [r3, #0]
 80124d6:	e7de      	b.n	8012496 <__cvt+0x66>

080124d8 <__exponent>:
 80124d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124da:	2900      	cmp	r1, #0
 80124dc:	bfba      	itte	lt
 80124de:	4249      	neglt	r1, r1
 80124e0:	232d      	movlt	r3, #45	@ 0x2d
 80124e2:	232b      	movge	r3, #43	@ 0x2b
 80124e4:	2909      	cmp	r1, #9
 80124e6:	7002      	strb	r2, [r0, #0]
 80124e8:	7043      	strb	r3, [r0, #1]
 80124ea:	dd29      	ble.n	8012540 <__exponent+0x68>
 80124ec:	f10d 0307 	add.w	r3, sp, #7
 80124f0:	461d      	mov	r5, r3
 80124f2:	270a      	movs	r7, #10
 80124f4:	461a      	mov	r2, r3
 80124f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80124fa:	fb07 1416 	mls	r4, r7, r6, r1
 80124fe:	3430      	adds	r4, #48	@ 0x30
 8012500:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012504:	460c      	mov	r4, r1
 8012506:	2c63      	cmp	r4, #99	@ 0x63
 8012508:	f103 33ff 	add.w	r3, r3, #4294967295
 801250c:	4631      	mov	r1, r6
 801250e:	dcf1      	bgt.n	80124f4 <__exponent+0x1c>
 8012510:	3130      	adds	r1, #48	@ 0x30
 8012512:	1e94      	subs	r4, r2, #2
 8012514:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012518:	1c41      	adds	r1, r0, #1
 801251a:	4623      	mov	r3, r4
 801251c:	42ab      	cmp	r3, r5
 801251e:	d30a      	bcc.n	8012536 <__exponent+0x5e>
 8012520:	f10d 0309 	add.w	r3, sp, #9
 8012524:	1a9b      	subs	r3, r3, r2
 8012526:	42ac      	cmp	r4, r5
 8012528:	bf88      	it	hi
 801252a:	2300      	movhi	r3, #0
 801252c:	3302      	adds	r3, #2
 801252e:	4403      	add	r3, r0
 8012530:	1a18      	subs	r0, r3, r0
 8012532:	b003      	add	sp, #12
 8012534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012536:	f813 6b01 	ldrb.w	r6, [r3], #1
 801253a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801253e:	e7ed      	b.n	801251c <__exponent+0x44>
 8012540:	2330      	movs	r3, #48	@ 0x30
 8012542:	3130      	adds	r1, #48	@ 0x30
 8012544:	7083      	strb	r3, [r0, #2]
 8012546:	70c1      	strb	r1, [r0, #3]
 8012548:	1d03      	adds	r3, r0, #4
 801254a:	e7f1      	b.n	8012530 <__exponent+0x58>
 801254c:	0000      	movs	r0, r0
	...

08012550 <_printf_float>:
 8012550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012554:	b08d      	sub	sp, #52	@ 0x34
 8012556:	460c      	mov	r4, r1
 8012558:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801255c:	4616      	mov	r6, r2
 801255e:	461f      	mov	r7, r3
 8012560:	4605      	mov	r5, r0
 8012562:	f000 fccb 	bl	8012efc <_localeconv_r>
 8012566:	f8d0 b000 	ldr.w	fp, [r0]
 801256a:	4658      	mov	r0, fp
 801256c:	f7ed ff08 	bl	8000380 <strlen>
 8012570:	2300      	movs	r3, #0
 8012572:	930a      	str	r3, [sp, #40]	@ 0x28
 8012574:	f8d8 3000 	ldr.w	r3, [r8]
 8012578:	f894 9018 	ldrb.w	r9, [r4, #24]
 801257c:	6822      	ldr	r2, [r4, #0]
 801257e:	9005      	str	r0, [sp, #20]
 8012580:	3307      	adds	r3, #7
 8012582:	f023 0307 	bic.w	r3, r3, #7
 8012586:	f103 0108 	add.w	r1, r3, #8
 801258a:	f8c8 1000 	str.w	r1, [r8]
 801258e:	ed93 0b00 	vldr	d0, [r3]
 8012592:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80127f0 <_printf_float+0x2a0>
 8012596:	eeb0 7bc0 	vabs.f64	d7, d0
 801259a:	eeb4 7b46 	vcmp.f64	d7, d6
 801259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80125a6:	dd24      	ble.n	80125f2 <_printf_float+0xa2>
 80125a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80125ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b0:	d502      	bpl.n	80125b8 <_printf_float+0x68>
 80125b2:	232d      	movs	r3, #45	@ 0x2d
 80125b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125b8:	498f      	ldr	r1, [pc, #572]	@ (80127f8 <_printf_float+0x2a8>)
 80125ba:	4b90      	ldr	r3, [pc, #576]	@ (80127fc <_printf_float+0x2ac>)
 80125bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80125c0:	bf94      	ite	ls
 80125c2:	4688      	movls	r8, r1
 80125c4:	4698      	movhi	r8, r3
 80125c6:	f022 0204 	bic.w	r2, r2, #4
 80125ca:	2303      	movs	r3, #3
 80125cc:	6123      	str	r3, [r4, #16]
 80125ce:	6022      	str	r2, [r4, #0]
 80125d0:	f04f 0a00 	mov.w	sl, #0
 80125d4:	9700      	str	r7, [sp, #0]
 80125d6:	4633      	mov	r3, r6
 80125d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80125da:	4621      	mov	r1, r4
 80125dc:	4628      	mov	r0, r5
 80125de:	f000 f9d1 	bl	8012984 <_printf_common>
 80125e2:	3001      	adds	r0, #1
 80125e4:	f040 8089 	bne.w	80126fa <_printf_float+0x1aa>
 80125e8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ec:	b00d      	add	sp, #52	@ 0x34
 80125ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80125f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fa:	d709      	bvc.n	8012610 <_printf_float+0xc0>
 80125fc:	ee10 3a90 	vmov	r3, s1
 8012600:	2b00      	cmp	r3, #0
 8012602:	bfbc      	itt	lt
 8012604:	232d      	movlt	r3, #45	@ 0x2d
 8012606:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801260a:	497d      	ldr	r1, [pc, #500]	@ (8012800 <_printf_float+0x2b0>)
 801260c:	4b7d      	ldr	r3, [pc, #500]	@ (8012804 <_printf_float+0x2b4>)
 801260e:	e7d5      	b.n	80125bc <_printf_float+0x6c>
 8012610:	6863      	ldr	r3, [r4, #4]
 8012612:	1c59      	adds	r1, r3, #1
 8012614:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012618:	d139      	bne.n	801268e <_printf_float+0x13e>
 801261a:	2306      	movs	r3, #6
 801261c:	6063      	str	r3, [r4, #4]
 801261e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012622:	2300      	movs	r3, #0
 8012624:	6022      	str	r2, [r4, #0]
 8012626:	9303      	str	r3, [sp, #12]
 8012628:	ab0a      	add	r3, sp, #40	@ 0x28
 801262a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801262e:	ab09      	add	r3, sp, #36	@ 0x24
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	6861      	ldr	r1, [r4, #4]
 8012634:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012638:	4628      	mov	r0, r5
 801263a:	f7ff fef9 	bl	8012430 <__cvt>
 801263e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012644:	4680      	mov	r8, r0
 8012646:	d129      	bne.n	801269c <_printf_float+0x14c>
 8012648:	1cc8      	adds	r0, r1, #3
 801264a:	db02      	blt.n	8012652 <_printf_float+0x102>
 801264c:	6863      	ldr	r3, [r4, #4]
 801264e:	4299      	cmp	r1, r3
 8012650:	dd41      	ble.n	80126d6 <_printf_float+0x186>
 8012652:	f1a9 0902 	sub.w	r9, r9, #2
 8012656:	fa5f f989 	uxtb.w	r9, r9
 801265a:	3901      	subs	r1, #1
 801265c:	464a      	mov	r2, r9
 801265e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012662:	9109      	str	r1, [sp, #36]	@ 0x24
 8012664:	f7ff ff38 	bl	80124d8 <__exponent>
 8012668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801266a:	1813      	adds	r3, r2, r0
 801266c:	2a01      	cmp	r2, #1
 801266e:	4682      	mov	sl, r0
 8012670:	6123      	str	r3, [r4, #16]
 8012672:	dc02      	bgt.n	801267a <_printf_float+0x12a>
 8012674:	6822      	ldr	r2, [r4, #0]
 8012676:	07d2      	lsls	r2, r2, #31
 8012678:	d501      	bpl.n	801267e <_printf_float+0x12e>
 801267a:	3301      	adds	r3, #1
 801267c:	6123      	str	r3, [r4, #16]
 801267e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012682:	2b00      	cmp	r3, #0
 8012684:	d0a6      	beq.n	80125d4 <_printf_float+0x84>
 8012686:	232d      	movs	r3, #45	@ 0x2d
 8012688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801268c:	e7a2      	b.n	80125d4 <_printf_float+0x84>
 801268e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012692:	d1c4      	bne.n	801261e <_printf_float+0xce>
 8012694:	2b00      	cmp	r3, #0
 8012696:	d1c2      	bne.n	801261e <_printf_float+0xce>
 8012698:	2301      	movs	r3, #1
 801269a:	e7bf      	b.n	801261c <_printf_float+0xcc>
 801269c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80126a0:	d9db      	bls.n	801265a <_printf_float+0x10a>
 80126a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80126a6:	d118      	bne.n	80126da <_printf_float+0x18a>
 80126a8:	2900      	cmp	r1, #0
 80126aa:	6863      	ldr	r3, [r4, #4]
 80126ac:	dd0b      	ble.n	80126c6 <_printf_float+0x176>
 80126ae:	6121      	str	r1, [r4, #16]
 80126b0:	b913      	cbnz	r3, 80126b8 <_printf_float+0x168>
 80126b2:	6822      	ldr	r2, [r4, #0]
 80126b4:	07d0      	lsls	r0, r2, #31
 80126b6:	d502      	bpl.n	80126be <_printf_float+0x16e>
 80126b8:	3301      	adds	r3, #1
 80126ba:	440b      	add	r3, r1
 80126bc:	6123      	str	r3, [r4, #16]
 80126be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80126c0:	f04f 0a00 	mov.w	sl, #0
 80126c4:	e7db      	b.n	801267e <_printf_float+0x12e>
 80126c6:	b913      	cbnz	r3, 80126ce <_printf_float+0x17e>
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	07d2      	lsls	r2, r2, #31
 80126cc:	d501      	bpl.n	80126d2 <_printf_float+0x182>
 80126ce:	3302      	adds	r3, #2
 80126d0:	e7f4      	b.n	80126bc <_printf_float+0x16c>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e7f2      	b.n	80126bc <_printf_float+0x16c>
 80126d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80126da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126dc:	4299      	cmp	r1, r3
 80126de:	db05      	blt.n	80126ec <_printf_float+0x19c>
 80126e0:	6823      	ldr	r3, [r4, #0]
 80126e2:	6121      	str	r1, [r4, #16]
 80126e4:	07d8      	lsls	r0, r3, #31
 80126e6:	d5ea      	bpl.n	80126be <_printf_float+0x16e>
 80126e8:	1c4b      	adds	r3, r1, #1
 80126ea:	e7e7      	b.n	80126bc <_printf_float+0x16c>
 80126ec:	2900      	cmp	r1, #0
 80126ee:	bfd4      	ite	le
 80126f0:	f1c1 0202 	rsble	r2, r1, #2
 80126f4:	2201      	movgt	r2, #1
 80126f6:	4413      	add	r3, r2
 80126f8:	e7e0      	b.n	80126bc <_printf_float+0x16c>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	055a      	lsls	r2, r3, #21
 80126fe:	d407      	bmi.n	8012710 <_printf_float+0x1c0>
 8012700:	6923      	ldr	r3, [r4, #16]
 8012702:	4642      	mov	r2, r8
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	d12a      	bne.n	8012764 <_printf_float+0x214>
 801270e:	e76b      	b.n	80125e8 <_printf_float+0x98>
 8012710:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012714:	f240 80e0 	bls.w	80128d8 <_printf_float+0x388>
 8012718:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801271c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012724:	d133      	bne.n	801278e <_printf_float+0x23e>
 8012726:	4a38      	ldr	r2, [pc, #224]	@ (8012808 <_printf_float+0x2b8>)
 8012728:	2301      	movs	r3, #1
 801272a:	4631      	mov	r1, r6
 801272c:	4628      	mov	r0, r5
 801272e:	47b8      	blx	r7
 8012730:	3001      	adds	r0, #1
 8012732:	f43f af59 	beq.w	80125e8 <_printf_float+0x98>
 8012736:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801273a:	4543      	cmp	r3, r8
 801273c:	db02      	blt.n	8012744 <_printf_float+0x1f4>
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	07d8      	lsls	r0, r3, #31
 8012742:	d50f      	bpl.n	8012764 <_printf_float+0x214>
 8012744:	9b05      	ldr	r3, [sp, #20]
 8012746:	465a      	mov	r2, fp
 8012748:	4631      	mov	r1, r6
 801274a:	4628      	mov	r0, r5
 801274c:	47b8      	blx	r7
 801274e:	3001      	adds	r0, #1
 8012750:	f43f af4a 	beq.w	80125e8 <_printf_float+0x98>
 8012754:	f04f 0900 	mov.w	r9, #0
 8012758:	f108 38ff 	add.w	r8, r8, #4294967295
 801275c:	f104 0a1a 	add.w	sl, r4, #26
 8012760:	45c8      	cmp	r8, r9
 8012762:	dc09      	bgt.n	8012778 <_printf_float+0x228>
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	079b      	lsls	r3, r3, #30
 8012768:	f100 8107 	bmi.w	801297a <_printf_float+0x42a>
 801276c:	68e0      	ldr	r0, [r4, #12]
 801276e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012770:	4298      	cmp	r0, r3
 8012772:	bfb8      	it	lt
 8012774:	4618      	movlt	r0, r3
 8012776:	e739      	b.n	80125ec <_printf_float+0x9c>
 8012778:	2301      	movs	r3, #1
 801277a:	4652      	mov	r2, sl
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	f43f af30 	beq.w	80125e8 <_printf_float+0x98>
 8012788:	f109 0901 	add.w	r9, r9, #1
 801278c:	e7e8      	b.n	8012760 <_printf_float+0x210>
 801278e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012790:	2b00      	cmp	r3, #0
 8012792:	dc3b      	bgt.n	801280c <_printf_float+0x2bc>
 8012794:	4a1c      	ldr	r2, [pc, #112]	@ (8012808 <_printf_float+0x2b8>)
 8012796:	2301      	movs	r3, #1
 8012798:	4631      	mov	r1, r6
 801279a:	4628      	mov	r0, r5
 801279c:	47b8      	blx	r7
 801279e:	3001      	adds	r0, #1
 80127a0:	f43f af22 	beq.w	80125e8 <_printf_float+0x98>
 80127a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80127a8:	ea59 0303 	orrs.w	r3, r9, r3
 80127ac:	d102      	bne.n	80127b4 <_printf_float+0x264>
 80127ae:	6823      	ldr	r3, [r4, #0]
 80127b0:	07d9      	lsls	r1, r3, #31
 80127b2:	d5d7      	bpl.n	8012764 <_printf_float+0x214>
 80127b4:	9b05      	ldr	r3, [sp, #20]
 80127b6:	465a      	mov	r2, fp
 80127b8:	4631      	mov	r1, r6
 80127ba:	4628      	mov	r0, r5
 80127bc:	47b8      	blx	r7
 80127be:	3001      	adds	r0, #1
 80127c0:	f43f af12 	beq.w	80125e8 <_printf_float+0x98>
 80127c4:	f04f 0a00 	mov.w	sl, #0
 80127c8:	f104 0b1a 	add.w	fp, r4, #26
 80127cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127ce:	425b      	negs	r3, r3
 80127d0:	4553      	cmp	r3, sl
 80127d2:	dc01      	bgt.n	80127d8 <_printf_float+0x288>
 80127d4:	464b      	mov	r3, r9
 80127d6:	e794      	b.n	8012702 <_printf_float+0x1b2>
 80127d8:	2301      	movs	r3, #1
 80127da:	465a      	mov	r2, fp
 80127dc:	4631      	mov	r1, r6
 80127de:	4628      	mov	r0, r5
 80127e0:	47b8      	blx	r7
 80127e2:	3001      	adds	r0, #1
 80127e4:	f43f af00 	beq.w	80125e8 <_printf_float+0x98>
 80127e8:	f10a 0a01 	add.w	sl, sl, #1
 80127ec:	e7ee      	b.n	80127cc <_printf_float+0x27c>
 80127ee:	bf00      	nop
 80127f0:	ffffffff 	.word	0xffffffff
 80127f4:	7fefffff 	.word	0x7fefffff
 80127f8:	08017690 	.word	0x08017690
 80127fc:	08017694 	.word	0x08017694
 8012800:	08017698 	.word	0x08017698
 8012804:	0801769c 	.word	0x0801769c
 8012808:	080176a0 	.word	0x080176a0
 801280c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801280e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012812:	4553      	cmp	r3, sl
 8012814:	bfa8      	it	ge
 8012816:	4653      	movge	r3, sl
 8012818:	2b00      	cmp	r3, #0
 801281a:	4699      	mov	r9, r3
 801281c:	dc37      	bgt.n	801288e <_printf_float+0x33e>
 801281e:	2300      	movs	r3, #0
 8012820:	9307      	str	r3, [sp, #28]
 8012822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012826:	f104 021a 	add.w	r2, r4, #26
 801282a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801282c:	9907      	ldr	r1, [sp, #28]
 801282e:	9306      	str	r3, [sp, #24]
 8012830:	eba3 0309 	sub.w	r3, r3, r9
 8012834:	428b      	cmp	r3, r1
 8012836:	dc31      	bgt.n	801289c <_printf_float+0x34c>
 8012838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801283a:	459a      	cmp	sl, r3
 801283c:	dc3b      	bgt.n	80128b6 <_printf_float+0x366>
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	07da      	lsls	r2, r3, #31
 8012842:	d438      	bmi.n	80128b6 <_printf_float+0x366>
 8012844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012846:	ebaa 0903 	sub.w	r9, sl, r3
 801284a:	9b06      	ldr	r3, [sp, #24]
 801284c:	ebaa 0303 	sub.w	r3, sl, r3
 8012850:	4599      	cmp	r9, r3
 8012852:	bfa8      	it	ge
 8012854:	4699      	movge	r9, r3
 8012856:	f1b9 0f00 	cmp.w	r9, #0
 801285a:	dc34      	bgt.n	80128c6 <_printf_float+0x376>
 801285c:	f04f 0800 	mov.w	r8, #0
 8012860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012864:	f104 0b1a 	add.w	fp, r4, #26
 8012868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801286a:	ebaa 0303 	sub.w	r3, sl, r3
 801286e:	eba3 0309 	sub.w	r3, r3, r9
 8012872:	4543      	cmp	r3, r8
 8012874:	f77f af76 	ble.w	8012764 <_printf_float+0x214>
 8012878:	2301      	movs	r3, #1
 801287a:	465a      	mov	r2, fp
 801287c:	4631      	mov	r1, r6
 801287e:	4628      	mov	r0, r5
 8012880:	47b8      	blx	r7
 8012882:	3001      	adds	r0, #1
 8012884:	f43f aeb0 	beq.w	80125e8 <_printf_float+0x98>
 8012888:	f108 0801 	add.w	r8, r8, #1
 801288c:	e7ec      	b.n	8012868 <_printf_float+0x318>
 801288e:	4642      	mov	r2, r8
 8012890:	4631      	mov	r1, r6
 8012892:	4628      	mov	r0, r5
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	d1c1      	bne.n	801281e <_printf_float+0x2ce>
 801289a:	e6a5      	b.n	80125e8 <_printf_float+0x98>
 801289c:	2301      	movs	r3, #1
 801289e:	4631      	mov	r1, r6
 80128a0:	4628      	mov	r0, r5
 80128a2:	9206      	str	r2, [sp, #24]
 80128a4:	47b8      	blx	r7
 80128a6:	3001      	adds	r0, #1
 80128a8:	f43f ae9e 	beq.w	80125e8 <_printf_float+0x98>
 80128ac:	9b07      	ldr	r3, [sp, #28]
 80128ae:	9a06      	ldr	r2, [sp, #24]
 80128b0:	3301      	adds	r3, #1
 80128b2:	9307      	str	r3, [sp, #28]
 80128b4:	e7b9      	b.n	801282a <_printf_float+0x2da>
 80128b6:	9b05      	ldr	r3, [sp, #20]
 80128b8:	465a      	mov	r2, fp
 80128ba:	4631      	mov	r1, r6
 80128bc:	4628      	mov	r0, r5
 80128be:	47b8      	blx	r7
 80128c0:	3001      	adds	r0, #1
 80128c2:	d1bf      	bne.n	8012844 <_printf_float+0x2f4>
 80128c4:	e690      	b.n	80125e8 <_printf_float+0x98>
 80128c6:	9a06      	ldr	r2, [sp, #24]
 80128c8:	464b      	mov	r3, r9
 80128ca:	4442      	add	r2, r8
 80128cc:	4631      	mov	r1, r6
 80128ce:	4628      	mov	r0, r5
 80128d0:	47b8      	blx	r7
 80128d2:	3001      	adds	r0, #1
 80128d4:	d1c2      	bne.n	801285c <_printf_float+0x30c>
 80128d6:	e687      	b.n	80125e8 <_printf_float+0x98>
 80128d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80128dc:	f1b9 0f01 	cmp.w	r9, #1
 80128e0:	dc01      	bgt.n	80128e6 <_printf_float+0x396>
 80128e2:	07db      	lsls	r3, r3, #31
 80128e4:	d536      	bpl.n	8012954 <_printf_float+0x404>
 80128e6:	2301      	movs	r3, #1
 80128e8:	4642      	mov	r2, r8
 80128ea:	4631      	mov	r1, r6
 80128ec:	4628      	mov	r0, r5
 80128ee:	47b8      	blx	r7
 80128f0:	3001      	adds	r0, #1
 80128f2:	f43f ae79 	beq.w	80125e8 <_printf_float+0x98>
 80128f6:	9b05      	ldr	r3, [sp, #20]
 80128f8:	465a      	mov	r2, fp
 80128fa:	4631      	mov	r1, r6
 80128fc:	4628      	mov	r0, r5
 80128fe:	47b8      	blx	r7
 8012900:	3001      	adds	r0, #1
 8012902:	f43f ae71 	beq.w	80125e8 <_printf_float+0x98>
 8012906:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801290a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012912:	f109 39ff 	add.w	r9, r9, #4294967295
 8012916:	d018      	beq.n	801294a <_printf_float+0x3fa>
 8012918:	464b      	mov	r3, r9
 801291a:	f108 0201 	add.w	r2, r8, #1
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	d10c      	bne.n	8012942 <_printf_float+0x3f2>
 8012928:	e65e      	b.n	80125e8 <_printf_float+0x98>
 801292a:	2301      	movs	r3, #1
 801292c:	465a      	mov	r2, fp
 801292e:	4631      	mov	r1, r6
 8012930:	4628      	mov	r0, r5
 8012932:	47b8      	blx	r7
 8012934:	3001      	adds	r0, #1
 8012936:	f43f ae57 	beq.w	80125e8 <_printf_float+0x98>
 801293a:	f108 0801 	add.w	r8, r8, #1
 801293e:	45c8      	cmp	r8, r9
 8012940:	dbf3      	blt.n	801292a <_printf_float+0x3da>
 8012942:	4653      	mov	r3, sl
 8012944:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012948:	e6dc      	b.n	8012704 <_printf_float+0x1b4>
 801294a:	f04f 0800 	mov.w	r8, #0
 801294e:	f104 0b1a 	add.w	fp, r4, #26
 8012952:	e7f4      	b.n	801293e <_printf_float+0x3ee>
 8012954:	2301      	movs	r3, #1
 8012956:	4642      	mov	r2, r8
 8012958:	e7e1      	b.n	801291e <_printf_float+0x3ce>
 801295a:	2301      	movs	r3, #1
 801295c:	464a      	mov	r2, r9
 801295e:	4631      	mov	r1, r6
 8012960:	4628      	mov	r0, r5
 8012962:	47b8      	blx	r7
 8012964:	3001      	adds	r0, #1
 8012966:	f43f ae3f 	beq.w	80125e8 <_printf_float+0x98>
 801296a:	f108 0801 	add.w	r8, r8, #1
 801296e:	68e3      	ldr	r3, [r4, #12]
 8012970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012972:	1a5b      	subs	r3, r3, r1
 8012974:	4543      	cmp	r3, r8
 8012976:	dcf0      	bgt.n	801295a <_printf_float+0x40a>
 8012978:	e6f8      	b.n	801276c <_printf_float+0x21c>
 801297a:	f04f 0800 	mov.w	r8, #0
 801297e:	f104 0919 	add.w	r9, r4, #25
 8012982:	e7f4      	b.n	801296e <_printf_float+0x41e>

08012984 <_printf_common>:
 8012984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012988:	4616      	mov	r6, r2
 801298a:	4698      	mov	r8, r3
 801298c:	688a      	ldr	r2, [r1, #8]
 801298e:	690b      	ldr	r3, [r1, #16]
 8012990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012994:	4293      	cmp	r3, r2
 8012996:	bfb8      	it	lt
 8012998:	4613      	movlt	r3, r2
 801299a:	6033      	str	r3, [r6, #0]
 801299c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80129a0:	4607      	mov	r7, r0
 80129a2:	460c      	mov	r4, r1
 80129a4:	b10a      	cbz	r2, 80129aa <_printf_common+0x26>
 80129a6:	3301      	adds	r3, #1
 80129a8:	6033      	str	r3, [r6, #0]
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	0699      	lsls	r1, r3, #26
 80129ae:	bf42      	ittt	mi
 80129b0:	6833      	ldrmi	r3, [r6, #0]
 80129b2:	3302      	addmi	r3, #2
 80129b4:	6033      	strmi	r3, [r6, #0]
 80129b6:	6825      	ldr	r5, [r4, #0]
 80129b8:	f015 0506 	ands.w	r5, r5, #6
 80129bc:	d106      	bne.n	80129cc <_printf_common+0x48>
 80129be:	f104 0a19 	add.w	sl, r4, #25
 80129c2:	68e3      	ldr	r3, [r4, #12]
 80129c4:	6832      	ldr	r2, [r6, #0]
 80129c6:	1a9b      	subs	r3, r3, r2
 80129c8:	42ab      	cmp	r3, r5
 80129ca:	dc26      	bgt.n	8012a1a <_printf_common+0x96>
 80129cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80129d0:	6822      	ldr	r2, [r4, #0]
 80129d2:	3b00      	subs	r3, #0
 80129d4:	bf18      	it	ne
 80129d6:	2301      	movne	r3, #1
 80129d8:	0692      	lsls	r2, r2, #26
 80129da:	d42b      	bmi.n	8012a34 <_printf_common+0xb0>
 80129dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80129e0:	4641      	mov	r1, r8
 80129e2:	4638      	mov	r0, r7
 80129e4:	47c8      	blx	r9
 80129e6:	3001      	adds	r0, #1
 80129e8:	d01e      	beq.n	8012a28 <_printf_common+0xa4>
 80129ea:	6823      	ldr	r3, [r4, #0]
 80129ec:	6922      	ldr	r2, [r4, #16]
 80129ee:	f003 0306 	and.w	r3, r3, #6
 80129f2:	2b04      	cmp	r3, #4
 80129f4:	bf02      	ittt	eq
 80129f6:	68e5      	ldreq	r5, [r4, #12]
 80129f8:	6833      	ldreq	r3, [r6, #0]
 80129fa:	1aed      	subeq	r5, r5, r3
 80129fc:	68a3      	ldr	r3, [r4, #8]
 80129fe:	bf0c      	ite	eq
 8012a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a04:	2500      	movne	r5, #0
 8012a06:	4293      	cmp	r3, r2
 8012a08:	bfc4      	itt	gt
 8012a0a:	1a9b      	subgt	r3, r3, r2
 8012a0c:	18ed      	addgt	r5, r5, r3
 8012a0e:	2600      	movs	r6, #0
 8012a10:	341a      	adds	r4, #26
 8012a12:	42b5      	cmp	r5, r6
 8012a14:	d11a      	bne.n	8012a4c <_printf_common+0xc8>
 8012a16:	2000      	movs	r0, #0
 8012a18:	e008      	b.n	8012a2c <_printf_common+0xa8>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	4652      	mov	r2, sl
 8012a1e:	4641      	mov	r1, r8
 8012a20:	4638      	mov	r0, r7
 8012a22:	47c8      	blx	r9
 8012a24:	3001      	adds	r0, #1
 8012a26:	d103      	bne.n	8012a30 <_printf_common+0xac>
 8012a28:	f04f 30ff 	mov.w	r0, #4294967295
 8012a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a30:	3501      	adds	r5, #1
 8012a32:	e7c6      	b.n	80129c2 <_printf_common+0x3e>
 8012a34:	18e1      	adds	r1, r4, r3
 8012a36:	1c5a      	adds	r2, r3, #1
 8012a38:	2030      	movs	r0, #48	@ 0x30
 8012a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012a3e:	4422      	add	r2, r4
 8012a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012a48:	3302      	adds	r3, #2
 8012a4a:	e7c7      	b.n	80129dc <_printf_common+0x58>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	4622      	mov	r2, r4
 8012a50:	4641      	mov	r1, r8
 8012a52:	4638      	mov	r0, r7
 8012a54:	47c8      	blx	r9
 8012a56:	3001      	adds	r0, #1
 8012a58:	d0e6      	beq.n	8012a28 <_printf_common+0xa4>
 8012a5a:	3601      	adds	r6, #1
 8012a5c:	e7d9      	b.n	8012a12 <_printf_common+0x8e>
	...

08012a60 <_printf_i>:
 8012a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a64:	7e0f      	ldrb	r7, [r1, #24]
 8012a66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a68:	2f78      	cmp	r7, #120	@ 0x78
 8012a6a:	4691      	mov	r9, r2
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	460c      	mov	r4, r1
 8012a70:	469a      	mov	sl, r3
 8012a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a76:	d807      	bhi.n	8012a88 <_printf_i+0x28>
 8012a78:	2f62      	cmp	r7, #98	@ 0x62
 8012a7a:	d80a      	bhi.n	8012a92 <_printf_i+0x32>
 8012a7c:	2f00      	cmp	r7, #0
 8012a7e:	f000 80d2 	beq.w	8012c26 <_printf_i+0x1c6>
 8012a82:	2f58      	cmp	r7, #88	@ 0x58
 8012a84:	f000 80b9 	beq.w	8012bfa <_printf_i+0x19a>
 8012a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a90:	e03a      	b.n	8012b08 <_printf_i+0xa8>
 8012a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a96:	2b15      	cmp	r3, #21
 8012a98:	d8f6      	bhi.n	8012a88 <_printf_i+0x28>
 8012a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8012aa0 <_printf_i+0x40>)
 8012a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012aa0:	08012af9 	.word	0x08012af9
 8012aa4:	08012b0d 	.word	0x08012b0d
 8012aa8:	08012a89 	.word	0x08012a89
 8012aac:	08012a89 	.word	0x08012a89
 8012ab0:	08012a89 	.word	0x08012a89
 8012ab4:	08012a89 	.word	0x08012a89
 8012ab8:	08012b0d 	.word	0x08012b0d
 8012abc:	08012a89 	.word	0x08012a89
 8012ac0:	08012a89 	.word	0x08012a89
 8012ac4:	08012a89 	.word	0x08012a89
 8012ac8:	08012a89 	.word	0x08012a89
 8012acc:	08012c0d 	.word	0x08012c0d
 8012ad0:	08012b37 	.word	0x08012b37
 8012ad4:	08012bc7 	.word	0x08012bc7
 8012ad8:	08012a89 	.word	0x08012a89
 8012adc:	08012a89 	.word	0x08012a89
 8012ae0:	08012c2f 	.word	0x08012c2f
 8012ae4:	08012a89 	.word	0x08012a89
 8012ae8:	08012b37 	.word	0x08012b37
 8012aec:	08012a89 	.word	0x08012a89
 8012af0:	08012a89 	.word	0x08012a89
 8012af4:	08012bcf 	.word	0x08012bcf
 8012af8:	6833      	ldr	r3, [r6, #0]
 8012afa:	1d1a      	adds	r2, r3, #4
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	6032      	str	r2, [r6, #0]
 8012b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e09d      	b.n	8012c48 <_printf_i+0x1e8>
 8012b0c:	6833      	ldr	r3, [r6, #0]
 8012b0e:	6820      	ldr	r0, [r4, #0]
 8012b10:	1d19      	adds	r1, r3, #4
 8012b12:	6031      	str	r1, [r6, #0]
 8012b14:	0606      	lsls	r6, r0, #24
 8012b16:	d501      	bpl.n	8012b1c <_printf_i+0xbc>
 8012b18:	681d      	ldr	r5, [r3, #0]
 8012b1a:	e003      	b.n	8012b24 <_printf_i+0xc4>
 8012b1c:	0645      	lsls	r5, r0, #25
 8012b1e:	d5fb      	bpl.n	8012b18 <_printf_i+0xb8>
 8012b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b24:	2d00      	cmp	r5, #0
 8012b26:	da03      	bge.n	8012b30 <_printf_i+0xd0>
 8012b28:	232d      	movs	r3, #45	@ 0x2d
 8012b2a:	426d      	negs	r5, r5
 8012b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012b30:	4859      	ldr	r0, [pc, #356]	@ (8012c98 <_printf_i+0x238>)
 8012b32:	230a      	movs	r3, #10
 8012b34:	e011      	b.n	8012b5a <_printf_i+0xfa>
 8012b36:	6821      	ldr	r1, [r4, #0]
 8012b38:	6833      	ldr	r3, [r6, #0]
 8012b3a:	0608      	lsls	r0, r1, #24
 8012b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b40:	d402      	bmi.n	8012b48 <_printf_i+0xe8>
 8012b42:	0649      	lsls	r1, r1, #25
 8012b44:	bf48      	it	mi
 8012b46:	b2ad      	uxthmi	r5, r5
 8012b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8012b4a:	4853      	ldr	r0, [pc, #332]	@ (8012c98 <_printf_i+0x238>)
 8012b4c:	6033      	str	r3, [r6, #0]
 8012b4e:	bf14      	ite	ne
 8012b50:	230a      	movne	r3, #10
 8012b52:	2308      	moveq	r3, #8
 8012b54:	2100      	movs	r1, #0
 8012b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012b5a:	6866      	ldr	r6, [r4, #4]
 8012b5c:	60a6      	str	r6, [r4, #8]
 8012b5e:	2e00      	cmp	r6, #0
 8012b60:	bfa2      	ittt	ge
 8012b62:	6821      	ldrge	r1, [r4, #0]
 8012b64:	f021 0104 	bicge.w	r1, r1, #4
 8012b68:	6021      	strge	r1, [r4, #0]
 8012b6a:	b90d      	cbnz	r5, 8012b70 <_printf_i+0x110>
 8012b6c:	2e00      	cmp	r6, #0
 8012b6e:	d04b      	beq.n	8012c08 <_printf_i+0x1a8>
 8012b70:	4616      	mov	r6, r2
 8012b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b76:	fb03 5711 	mls	r7, r3, r1, r5
 8012b7a:	5dc7      	ldrb	r7, [r0, r7]
 8012b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b80:	462f      	mov	r7, r5
 8012b82:	42bb      	cmp	r3, r7
 8012b84:	460d      	mov	r5, r1
 8012b86:	d9f4      	bls.n	8012b72 <_printf_i+0x112>
 8012b88:	2b08      	cmp	r3, #8
 8012b8a:	d10b      	bne.n	8012ba4 <_printf_i+0x144>
 8012b8c:	6823      	ldr	r3, [r4, #0]
 8012b8e:	07df      	lsls	r7, r3, #31
 8012b90:	d508      	bpl.n	8012ba4 <_printf_i+0x144>
 8012b92:	6923      	ldr	r3, [r4, #16]
 8012b94:	6861      	ldr	r1, [r4, #4]
 8012b96:	4299      	cmp	r1, r3
 8012b98:	bfde      	ittt	le
 8012b9a:	2330      	movle	r3, #48	@ 0x30
 8012b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012ba4:	1b92      	subs	r2, r2, r6
 8012ba6:	6122      	str	r2, [r4, #16]
 8012ba8:	f8cd a000 	str.w	sl, [sp]
 8012bac:	464b      	mov	r3, r9
 8012bae:	aa03      	add	r2, sp, #12
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	4640      	mov	r0, r8
 8012bb4:	f7ff fee6 	bl	8012984 <_printf_common>
 8012bb8:	3001      	adds	r0, #1
 8012bba:	d14a      	bne.n	8012c52 <_printf_i+0x1f2>
 8012bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc0:	b004      	add	sp, #16
 8012bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	f043 0320 	orr.w	r3, r3, #32
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	4833      	ldr	r0, [pc, #204]	@ (8012c9c <_printf_i+0x23c>)
 8012bd0:	2778      	movs	r7, #120	@ 0x78
 8012bd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	6831      	ldr	r1, [r6, #0]
 8012bda:	061f      	lsls	r7, r3, #24
 8012bdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8012be0:	d402      	bmi.n	8012be8 <_printf_i+0x188>
 8012be2:	065f      	lsls	r7, r3, #25
 8012be4:	bf48      	it	mi
 8012be6:	b2ad      	uxthmi	r5, r5
 8012be8:	6031      	str	r1, [r6, #0]
 8012bea:	07d9      	lsls	r1, r3, #31
 8012bec:	bf44      	itt	mi
 8012bee:	f043 0320 	orrmi.w	r3, r3, #32
 8012bf2:	6023      	strmi	r3, [r4, #0]
 8012bf4:	b11d      	cbz	r5, 8012bfe <_printf_i+0x19e>
 8012bf6:	2310      	movs	r3, #16
 8012bf8:	e7ac      	b.n	8012b54 <_printf_i+0xf4>
 8012bfa:	4827      	ldr	r0, [pc, #156]	@ (8012c98 <_printf_i+0x238>)
 8012bfc:	e7e9      	b.n	8012bd2 <_printf_i+0x172>
 8012bfe:	6823      	ldr	r3, [r4, #0]
 8012c00:	f023 0320 	bic.w	r3, r3, #32
 8012c04:	6023      	str	r3, [r4, #0]
 8012c06:	e7f6      	b.n	8012bf6 <_printf_i+0x196>
 8012c08:	4616      	mov	r6, r2
 8012c0a:	e7bd      	b.n	8012b88 <_printf_i+0x128>
 8012c0c:	6833      	ldr	r3, [r6, #0]
 8012c0e:	6825      	ldr	r5, [r4, #0]
 8012c10:	6961      	ldr	r1, [r4, #20]
 8012c12:	1d18      	adds	r0, r3, #4
 8012c14:	6030      	str	r0, [r6, #0]
 8012c16:	062e      	lsls	r6, r5, #24
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	d501      	bpl.n	8012c20 <_printf_i+0x1c0>
 8012c1c:	6019      	str	r1, [r3, #0]
 8012c1e:	e002      	b.n	8012c26 <_printf_i+0x1c6>
 8012c20:	0668      	lsls	r0, r5, #25
 8012c22:	d5fb      	bpl.n	8012c1c <_printf_i+0x1bc>
 8012c24:	8019      	strh	r1, [r3, #0]
 8012c26:	2300      	movs	r3, #0
 8012c28:	6123      	str	r3, [r4, #16]
 8012c2a:	4616      	mov	r6, r2
 8012c2c:	e7bc      	b.n	8012ba8 <_printf_i+0x148>
 8012c2e:	6833      	ldr	r3, [r6, #0]
 8012c30:	1d1a      	adds	r2, r3, #4
 8012c32:	6032      	str	r2, [r6, #0]
 8012c34:	681e      	ldr	r6, [r3, #0]
 8012c36:	6862      	ldr	r2, [r4, #4]
 8012c38:	2100      	movs	r1, #0
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f7ed fb50 	bl	80002e0 <memchr>
 8012c40:	b108      	cbz	r0, 8012c46 <_printf_i+0x1e6>
 8012c42:	1b80      	subs	r0, r0, r6
 8012c44:	6060      	str	r0, [r4, #4]
 8012c46:	6863      	ldr	r3, [r4, #4]
 8012c48:	6123      	str	r3, [r4, #16]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c50:	e7aa      	b.n	8012ba8 <_printf_i+0x148>
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	4632      	mov	r2, r6
 8012c56:	4649      	mov	r1, r9
 8012c58:	4640      	mov	r0, r8
 8012c5a:	47d0      	blx	sl
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d0ad      	beq.n	8012bbc <_printf_i+0x15c>
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	079b      	lsls	r3, r3, #30
 8012c64:	d413      	bmi.n	8012c8e <_printf_i+0x22e>
 8012c66:	68e0      	ldr	r0, [r4, #12]
 8012c68:	9b03      	ldr	r3, [sp, #12]
 8012c6a:	4298      	cmp	r0, r3
 8012c6c:	bfb8      	it	lt
 8012c6e:	4618      	movlt	r0, r3
 8012c70:	e7a6      	b.n	8012bc0 <_printf_i+0x160>
 8012c72:	2301      	movs	r3, #1
 8012c74:	4632      	mov	r2, r6
 8012c76:	4649      	mov	r1, r9
 8012c78:	4640      	mov	r0, r8
 8012c7a:	47d0      	blx	sl
 8012c7c:	3001      	adds	r0, #1
 8012c7e:	d09d      	beq.n	8012bbc <_printf_i+0x15c>
 8012c80:	3501      	adds	r5, #1
 8012c82:	68e3      	ldr	r3, [r4, #12]
 8012c84:	9903      	ldr	r1, [sp, #12]
 8012c86:	1a5b      	subs	r3, r3, r1
 8012c88:	42ab      	cmp	r3, r5
 8012c8a:	dcf2      	bgt.n	8012c72 <_printf_i+0x212>
 8012c8c:	e7eb      	b.n	8012c66 <_printf_i+0x206>
 8012c8e:	2500      	movs	r5, #0
 8012c90:	f104 0619 	add.w	r6, r4, #25
 8012c94:	e7f5      	b.n	8012c82 <_printf_i+0x222>
 8012c96:	bf00      	nop
 8012c98:	080176a2 	.word	0x080176a2
 8012c9c:	080176b3 	.word	0x080176b3

08012ca0 <std>:
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	b510      	push	{r4, lr}
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8012caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012cae:	6083      	str	r3, [r0, #8]
 8012cb0:	8181      	strh	r1, [r0, #12]
 8012cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012cb4:	81c2      	strh	r2, [r0, #14]
 8012cb6:	6183      	str	r3, [r0, #24]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	2208      	movs	r2, #8
 8012cbc:	305c      	adds	r0, #92	@ 0x5c
 8012cbe:	f000 f914 	bl	8012eea <memset>
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf8 <std+0x58>)
 8012cc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8012cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012cfc <std+0x5c>)
 8012cc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012cca:	4b0d      	ldr	r3, [pc, #52]	@ (8012d00 <std+0x60>)
 8012ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012cce:	4b0d      	ldr	r3, [pc, #52]	@ (8012d04 <std+0x64>)
 8012cd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8012cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012d08 <std+0x68>)
 8012cd4:	6224      	str	r4, [r4, #32]
 8012cd6:	429c      	cmp	r4, r3
 8012cd8:	d006      	beq.n	8012ce8 <std+0x48>
 8012cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012cde:	4294      	cmp	r4, r2
 8012ce0:	d002      	beq.n	8012ce8 <std+0x48>
 8012ce2:	33d0      	adds	r3, #208	@ 0xd0
 8012ce4:	429c      	cmp	r4, r3
 8012ce6:	d105      	bne.n	8012cf4 <std+0x54>
 8012ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cf0:	f000 b988 	b.w	8013004 <__retarget_lock_init_recursive>
 8012cf4:	bd10      	pop	{r4, pc}
 8012cf6:	bf00      	nop
 8012cf8:	08012e65 	.word	0x08012e65
 8012cfc:	08012e87 	.word	0x08012e87
 8012d00:	08012ebf 	.word	0x08012ebf
 8012d04:	08012ee3 	.word	0x08012ee3
 8012d08:	24009710 	.word	0x24009710

08012d0c <stdio_exit_handler>:
 8012d0c:	4a02      	ldr	r2, [pc, #8]	@ (8012d18 <stdio_exit_handler+0xc>)
 8012d0e:	4903      	ldr	r1, [pc, #12]	@ (8012d1c <stdio_exit_handler+0x10>)
 8012d10:	4803      	ldr	r0, [pc, #12]	@ (8012d20 <stdio_exit_handler+0x14>)
 8012d12:	f000 b869 	b.w	8012de8 <_fwalk_sglue>
 8012d16:	bf00      	nop
 8012d18:	2400012c 	.word	0x2400012c
 8012d1c:	08014735 	.word	0x08014735
 8012d20:	2400013c 	.word	0x2400013c

08012d24 <cleanup_stdio>:
 8012d24:	6841      	ldr	r1, [r0, #4]
 8012d26:	4b0c      	ldr	r3, [pc, #48]	@ (8012d58 <cleanup_stdio+0x34>)
 8012d28:	4299      	cmp	r1, r3
 8012d2a:	b510      	push	{r4, lr}
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	d001      	beq.n	8012d34 <cleanup_stdio+0x10>
 8012d30:	f001 fd00 	bl	8014734 <_fflush_r>
 8012d34:	68a1      	ldr	r1, [r4, #8]
 8012d36:	4b09      	ldr	r3, [pc, #36]	@ (8012d5c <cleanup_stdio+0x38>)
 8012d38:	4299      	cmp	r1, r3
 8012d3a:	d002      	beq.n	8012d42 <cleanup_stdio+0x1e>
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	f001 fcf9 	bl	8014734 <_fflush_r>
 8012d42:	68e1      	ldr	r1, [r4, #12]
 8012d44:	4b06      	ldr	r3, [pc, #24]	@ (8012d60 <cleanup_stdio+0x3c>)
 8012d46:	4299      	cmp	r1, r3
 8012d48:	d004      	beq.n	8012d54 <cleanup_stdio+0x30>
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d50:	f001 bcf0 	b.w	8014734 <_fflush_r>
 8012d54:	bd10      	pop	{r4, pc}
 8012d56:	bf00      	nop
 8012d58:	24009710 	.word	0x24009710
 8012d5c:	24009778 	.word	0x24009778
 8012d60:	240097e0 	.word	0x240097e0

08012d64 <global_stdio_init.part.0>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	4b0b      	ldr	r3, [pc, #44]	@ (8012d94 <global_stdio_init.part.0+0x30>)
 8012d68:	4c0b      	ldr	r4, [pc, #44]	@ (8012d98 <global_stdio_init.part.0+0x34>)
 8012d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8012d9c <global_stdio_init.part.0+0x38>)
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	4620      	mov	r0, r4
 8012d70:	2200      	movs	r2, #0
 8012d72:	2104      	movs	r1, #4
 8012d74:	f7ff ff94 	bl	8012ca0 <std>
 8012d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	2109      	movs	r1, #9
 8012d80:	f7ff ff8e 	bl	8012ca0 <std>
 8012d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012d88:	2202      	movs	r2, #2
 8012d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d8e:	2112      	movs	r1, #18
 8012d90:	f7ff bf86 	b.w	8012ca0 <std>
 8012d94:	24009848 	.word	0x24009848
 8012d98:	24009710 	.word	0x24009710
 8012d9c:	08012d0d 	.word	0x08012d0d

08012da0 <__sfp_lock_acquire>:
 8012da0:	4801      	ldr	r0, [pc, #4]	@ (8012da8 <__sfp_lock_acquire+0x8>)
 8012da2:	f000 b930 	b.w	8013006 <__retarget_lock_acquire_recursive>
 8012da6:	bf00      	nop
 8012da8:	24009851 	.word	0x24009851

08012dac <__sfp_lock_release>:
 8012dac:	4801      	ldr	r0, [pc, #4]	@ (8012db4 <__sfp_lock_release+0x8>)
 8012dae:	f000 b92b 	b.w	8013008 <__retarget_lock_release_recursive>
 8012db2:	bf00      	nop
 8012db4:	24009851 	.word	0x24009851

08012db8 <__sinit>:
 8012db8:	b510      	push	{r4, lr}
 8012dba:	4604      	mov	r4, r0
 8012dbc:	f7ff fff0 	bl	8012da0 <__sfp_lock_acquire>
 8012dc0:	6a23      	ldr	r3, [r4, #32]
 8012dc2:	b11b      	cbz	r3, 8012dcc <__sinit+0x14>
 8012dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dc8:	f7ff bff0 	b.w	8012dac <__sfp_lock_release>
 8012dcc:	4b04      	ldr	r3, [pc, #16]	@ (8012de0 <__sinit+0x28>)
 8012dce:	6223      	str	r3, [r4, #32]
 8012dd0:	4b04      	ldr	r3, [pc, #16]	@ (8012de4 <__sinit+0x2c>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d1f5      	bne.n	8012dc4 <__sinit+0xc>
 8012dd8:	f7ff ffc4 	bl	8012d64 <global_stdio_init.part.0>
 8012ddc:	e7f2      	b.n	8012dc4 <__sinit+0xc>
 8012dde:	bf00      	nop
 8012de0:	08012d25 	.word	0x08012d25
 8012de4:	24009848 	.word	0x24009848

08012de8 <_fwalk_sglue>:
 8012de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dec:	4607      	mov	r7, r0
 8012dee:	4688      	mov	r8, r1
 8012df0:	4614      	mov	r4, r2
 8012df2:	2600      	movs	r6, #0
 8012df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012df8:	f1b9 0901 	subs.w	r9, r9, #1
 8012dfc:	d505      	bpl.n	8012e0a <_fwalk_sglue+0x22>
 8012dfe:	6824      	ldr	r4, [r4, #0]
 8012e00:	2c00      	cmp	r4, #0
 8012e02:	d1f7      	bne.n	8012df4 <_fwalk_sglue+0xc>
 8012e04:	4630      	mov	r0, r6
 8012e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e0a:	89ab      	ldrh	r3, [r5, #12]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d907      	bls.n	8012e20 <_fwalk_sglue+0x38>
 8012e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e14:	3301      	adds	r3, #1
 8012e16:	d003      	beq.n	8012e20 <_fwalk_sglue+0x38>
 8012e18:	4629      	mov	r1, r5
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	47c0      	blx	r8
 8012e1e:	4306      	orrs	r6, r0
 8012e20:	3568      	adds	r5, #104	@ 0x68
 8012e22:	e7e9      	b.n	8012df8 <_fwalk_sglue+0x10>

08012e24 <siprintf>:
 8012e24:	b40e      	push	{r1, r2, r3}
 8012e26:	b500      	push	{lr}
 8012e28:	b09c      	sub	sp, #112	@ 0x70
 8012e2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8012e2c:	9002      	str	r0, [sp, #8]
 8012e2e:	9006      	str	r0, [sp, #24]
 8012e30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e34:	4809      	ldr	r0, [pc, #36]	@ (8012e5c <siprintf+0x38>)
 8012e36:	9107      	str	r1, [sp, #28]
 8012e38:	9104      	str	r1, [sp, #16]
 8012e3a:	4909      	ldr	r1, [pc, #36]	@ (8012e60 <siprintf+0x3c>)
 8012e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e40:	9105      	str	r1, [sp, #20]
 8012e42:	6800      	ldr	r0, [r0, #0]
 8012e44:	9301      	str	r3, [sp, #4]
 8012e46:	a902      	add	r1, sp, #8
 8012e48:	f001 faf4 	bl	8014434 <_svfiprintf_r>
 8012e4c:	9b02      	ldr	r3, [sp, #8]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	701a      	strb	r2, [r3, #0]
 8012e52:	b01c      	add	sp, #112	@ 0x70
 8012e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e58:	b003      	add	sp, #12
 8012e5a:	4770      	bx	lr
 8012e5c:	24000138 	.word	0x24000138
 8012e60:	ffff0208 	.word	0xffff0208

08012e64 <__sread>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	460c      	mov	r4, r1
 8012e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e6c:	f000 f86c 	bl	8012f48 <_read_r>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	bfab      	itete	ge
 8012e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012e76:	89a3      	ldrhlt	r3, [r4, #12]
 8012e78:	181b      	addge	r3, r3, r0
 8012e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012e7e:	bfac      	ite	ge
 8012e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012e82:	81a3      	strhlt	r3, [r4, #12]
 8012e84:	bd10      	pop	{r4, pc}

08012e86 <__swrite>:
 8012e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e8a:	461f      	mov	r7, r3
 8012e8c:	898b      	ldrh	r3, [r1, #12]
 8012e8e:	05db      	lsls	r3, r3, #23
 8012e90:	4605      	mov	r5, r0
 8012e92:	460c      	mov	r4, r1
 8012e94:	4616      	mov	r6, r2
 8012e96:	d505      	bpl.n	8012ea4 <__swrite+0x1e>
 8012e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f000 f840 	bl	8012f24 <_lseek_r>
 8012ea4:	89a3      	ldrh	r3, [r4, #12]
 8012ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012eae:	81a3      	strh	r3, [r4, #12]
 8012eb0:	4632      	mov	r2, r6
 8012eb2:	463b      	mov	r3, r7
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eba:	f000 b867 	b.w	8012f8c <_write_r>

08012ebe <__sseek>:
 8012ebe:	b510      	push	{r4, lr}
 8012ec0:	460c      	mov	r4, r1
 8012ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec6:	f000 f82d 	bl	8012f24 <_lseek_r>
 8012eca:	1c43      	adds	r3, r0, #1
 8012ecc:	89a3      	ldrh	r3, [r4, #12]
 8012ece:	bf15      	itete	ne
 8012ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012eda:	81a3      	strheq	r3, [r4, #12]
 8012edc:	bf18      	it	ne
 8012ede:	81a3      	strhne	r3, [r4, #12]
 8012ee0:	bd10      	pop	{r4, pc}

08012ee2 <__sclose>:
 8012ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ee6:	f000 b80d 	b.w	8012f04 <_close_r>

08012eea <memset>:
 8012eea:	4402      	add	r2, r0
 8012eec:	4603      	mov	r3, r0
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d100      	bne.n	8012ef4 <memset+0xa>
 8012ef2:	4770      	bx	lr
 8012ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8012ef8:	e7f9      	b.n	8012eee <memset+0x4>
	...

08012efc <_localeconv_r>:
 8012efc:	4800      	ldr	r0, [pc, #0]	@ (8012f00 <_localeconv_r+0x4>)
 8012efe:	4770      	bx	lr
 8012f00:	24000278 	.word	0x24000278

08012f04 <_close_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4d06      	ldr	r5, [pc, #24]	@ (8012f20 <_close_r+0x1c>)
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	602b      	str	r3, [r5, #0]
 8012f10:	f7ee fcf8 	bl	8001904 <_close>
 8012f14:	1c43      	adds	r3, r0, #1
 8012f16:	d102      	bne.n	8012f1e <_close_r+0x1a>
 8012f18:	682b      	ldr	r3, [r5, #0]
 8012f1a:	b103      	cbz	r3, 8012f1e <_close_r+0x1a>
 8012f1c:	6023      	str	r3, [r4, #0]
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	2400984c 	.word	0x2400984c

08012f24 <_lseek_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4d07      	ldr	r5, [pc, #28]	@ (8012f44 <_lseek_r+0x20>)
 8012f28:	4604      	mov	r4, r0
 8012f2a:	4608      	mov	r0, r1
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	2200      	movs	r2, #0
 8012f30:	602a      	str	r2, [r5, #0]
 8012f32:	461a      	mov	r2, r3
 8012f34:	f7ee fd0d 	bl	8001952 <_lseek>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d102      	bne.n	8012f42 <_lseek_r+0x1e>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	b103      	cbz	r3, 8012f42 <_lseek_r+0x1e>
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	2400984c 	.word	0x2400984c

08012f48 <_read_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4d07      	ldr	r5, [pc, #28]	@ (8012f68 <_read_r+0x20>)
 8012f4c:	4604      	mov	r4, r0
 8012f4e:	4608      	mov	r0, r1
 8012f50:	4611      	mov	r1, r2
 8012f52:	2200      	movs	r2, #0
 8012f54:	602a      	str	r2, [r5, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	f7ee fc9b 	bl	8001892 <_read>
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	d102      	bne.n	8012f66 <_read_r+0x1e>
 8012f60:	682b      	ldr	r3, [r5, #0]
 8012f62:	b103      	cbz	r3, 8012f66 <_read_r+0x1e>
 8012f64:	6023      	str	r3, [r4, #0]
 8012f66:	bd38      	pop	{r3, r4, r5, pc}
 8012f68:	2400984c 	.word	0x2400984c

08012f6c <_sbrk_r>:
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4d06      	ldr	r5, [pc, #24]	@ (8012f88 <_sbrk_r+0x1c>)
 8012f70:	2300      	movs	r3, #0
 8012f72:	4604      	mov	r4, r0
 8012f74:	4608      	mov	r0, r1
 8012f76:	602b      	str	r3, [r5, #0]
 8012f78:	f7ee fcf8 	bl	800196c <_sbrk>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	d102      	bne.n	8012f86 <_sbrk_r+0x1a>
 8012f80:	682b      	ldr	r3, [r5, #0]
 8012f82:	b103      	cbz	r3, 8012f86 <_sbrk_r+0x1a>
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	2400984c 	.word	0x2400984c

08012f8c <_write_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	4d07      	ldr	r5, [pc, #28]	@ (8012fac <_write_r+0x20>)
 8012f90:	4604      	mov	r4, r0
 8012f92:	4608      	mov	r0, r1
 8012f94:	4611      	mov	r1, r2
 8012f96:	2200      	movs	r2, #0
 8012f98:	602a      	str	r2, [r5, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	f7ee fc96 	bl	80018cc <_write>
 8012fa0:	1c43      	adds	r3, r0, #1
 8012fa2:	d102      	bne.n	8012faa <_write_r+0x1e>
 8012fa4:	682b      	ldr	r3, [r5, #0]
 8012fa6:	b103      	cbz	r3, 8012faa <_write_r+0x1e>
 8012fa8:	6023      	str	r3, [r4, #0]
 8012faa:	bd38      	pop	{r3, r4, r5, pc}
 8012fac:	2400984c 	.word	0x2400984c

08012fb0 <__errno>:
 8012fb0:	4b01      	ldr	r3, [pc, #4]	@ (8012fb8 <__errno+0x8>)
 8012fb2:	6818      	ldr	r0, [r3, #0]
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	24000138 	.word	0x24000138

08012fbc <__libc_init_array>:
 8012fbc:	b570      	push	{r4, r5, r6, lr}
 8012fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8012ff4 <__libc_init_array+0x38>)
 8012fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8012ff8 <__libc_init_array+0x3c>)
 8012fc2:	1b64      	subs	r4, r4, r5
 8012fc4:	10a4      	asrs	r4, r4, #2
 8012fc6:	2600      	movs	r6, #0
 8012fc8:	42a6      	cmp	r6, r4
 8012fca:	d109      	bne.n	8012fe0 <__libc_init_array+0x24>
 8012fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8012ffc <__libc_init_array+0x40>)
 8012fce:	4c0c      	ldr	r4, [pc, #48]	@ (8013000 <__libc_init_array+0x44>)
 8012fd0:	f002 fa1c 	bl	801540c <_init>
 8012fd4:	1b64      	subs	r4, r4, r5
 8012fd6:	10a4      	asrs	r4, r4, #2
 8012fd8:	2600      	movs	r6, #0
 8012fda:	42a6      	cmp	r6, r4
 8012fdc:	d105      	bne.n	8012fea <__libc_init_array+0x2e>
 8012fde:	bd70      	pop	{r4, r5, r6, pc}
 8012fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fe4:	4798      	blx	r3
 8012fe6:	3601      	adds	r6, #1
 8012fe8:	e7ee      	b.n	8012fc8 <__libc_init_array+0xc>
 8012fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fee:	4798      	blx	r3
 8012ff0:	3601      	adds	r6, #1
 8012ff2:	e7f2      	b.n	8012fda <__libc_init_array+0x1e>
 8012ff4:	08017a18 	.word	0x08017a18
 8012ff8:	08017a18 	.word	0x08017a18
 8012ffc:	08017a18 	.word	0x08017a18
 8013000:	08017a1c 	.word	0x08017a1c

08013004 <__retarget_lock_init_recursive>:
 8013004:	4770      	bx	lr

08013006 <__retarget_lock_acquire_recursive>:
 8013006:	4770      	bx	lr

08013008 <__retarget_lock_release_recursive>:
 8013008:	4770      	bx	lr

0801300a <memcpy>:
 801300a:	440a      	add	r2, r1
 801300c:	4291      	cmp	r1, r2
 801300e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013012:	d100      	bne.n	8013016 <memcpy+0xc>
 8013014:	4770      	bx	lr
 8013016:	b510      	push	{r4, lr}
 8013018:	f811 4b01 	ldrb.w	r4, [r1], #1
 801301c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013020:	4291      	cmp	r1, r2
 8013022:	d1f9      	bne.n	8013018 <memcpy+0xe>
 8013024:	bd10      	pop	{r4, pc}

08013026 <quorem>:
 8013026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302a:	6903      	ldr	r3, [r0, #16]
 801302c:	690c      	ldr	r4, [r1, #16]
 801302e:	42a3      	cmp	r3, r4
 8013030:	4607      	mov	r7, r0
 8013032:	db7e      	blt.n	8013132 <quorem+0x10c>
 8013034:	3c01      	subs	r4, #1
 8013036:	f101 0814 	add.w	r8, r1, #20
 801303a:	00a3      	lsls	r3, r4, #2
 801303c:	f100 0514 	add.w	r5, r0, #20
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013046:	9301      	str	r3, [sp, #4]
 8013048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801304c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013050:	3301      	adds	r3, #1
 8013052:	429a      	cmp	r2, r3
 8013054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013058:	fbb2 f6f3 	udiv	r6, r2, r3
 801305c:	d32e      	bcc.n	80130bc <quorem+0x96>
 801305e:	f04f 0a00 	mov.w	sl, #0
 8013062:	46c4      	mov	ip, r8
 8013064:	46ae      	mov	lr, r5
 8013066:	46d3      	mov	fp, sl
 8013068:	f85c 3b04 	ldr.w	r3, [ip], #4
 801306c:	b298      	uxth	r0, r3
 801306e:	fb06 a000 	mla	r0, r6, r0, sl
 8013072:	0c02      	lsrs	r2, r0, #16
 8013074:	0c1b      	lsrs	r3, r3, #16
 8013076:	fb06 2303 	mla	r3, r6, r3, r2
 801307a:	f8de 2000 	ldr.w	r2, [lr]
 801307e:	b280      	uxth	r0, r0
 8013080:	b292      	uxth	r2, r2
 8013082:	1a12      	subs	r2, r2, r0
 8013084:	445a      	add	r2, fp
 8013086:	f8de 0000 	ldr.w	r0, [lr]
 801308a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801308e:	b29b      	uxth	r3, r3
 8013090:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013094:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013098:	b292      	uxth	r2, r2
 801309a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801309e:	45e1      	cmp	r9, ip
 80130a0:	f84e 2b04 	str.w	r2, [lr], #4
 80130a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80130a8:	d2de      	bcs.n	8013068 <quorem+0x42>
 80130aa:	9b00      	ldr	r3, [sp, #0]
 80130ac:	58eb      	ldr	r3, [r5, r3]
 80130ae:	b92b      	cbnz	r3, 80130bc <quorem+0x96>
 80130b0:	9b01      	ldr	r3, [sp, #4]
 80130b2:	3b04      	subs	r3, #4
 80130b4:	429d      	cmp	r5, r3
 80130b6:	461a      	mov	r2, r3
 80130b8:	d32f      	bcc.n	801311a <quorem+0xf4>
 80130ba:	613c      	str	r4, [r7, #16]
 80130bc:	4638      	mov	r0, r7
 80130be:	f001 f855 	bl	801416c <__mcmp>
 80130c2:	2800      	cmp	r0, #0
 80130c4:	db25      	blt.n	8013112 <quorem+0xec>
 80130c6:	4629      	mov	r1, r5
 80130c8:	2000      	movs	r0, #0
 80130ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80130ce:	f8d1 c000 	ldr.w	ip, [r1]
 80130d2:	fa1f fe82 	uxth.w	lr, r2
 80130d6:	fa1f f38c 	uxth.w	r3, ip
 80130da:	eba3 030e 	sub.w	r3, r3, lr
 80130de:	4403      	add	r3, r0
 80130e0:	0c12      	lsrs	r2, r2, #16
 80130e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80130e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80130f0:	45c1      	cmp	r9, r8
 80130f2:	f841 3b04 	str.w	r3, [r1], #4
 80130f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80130fa:	d2e6      	bcs.n	80130ca <quorem+0xa4>
 80130fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013100:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013104:	b922      	cbnz	r2, 8013110 <quorem+0xea>
 8013106:	3b04      	subs	r3, #4
 8013108:	429d      	cmp	r5, r3
 801310a:	461a      	mov	r2, r3
 801310c:	d30b      	bcc.n	8013126 <quorem+0x100>
 801310e:	613c      	str	r4, [r7, #16]
 8013110:	3601      	adds	r6, #1
 8013112:	4630      	mov	r0, r6
 8013114:	b003      	add	sp, #12
 8013116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311a:	6812      	ldr	r2, [r2, #0]
 801311c:	3b04      	subs	r3, #4
 801311e:	2a00      	cmp	r2, #0
 8013120:	d1cb      	bne.n	80130ba <quorem+0x94>
 8013122:	3c01      	subs	r4, #1
 8013124:	e7c6      	b.n	80130b4 <quorem+0x8e>
 8013126:	6812      	ldr	r2, [r2, #0]
 8013128:	3b04      	subs	r3, #4
 801312a:	2a00      	cmp	r2, #0
 801312c:	d1ef      	bne.n	801310e <quorem+0xe8>
 801312e:	3c01      	subs	r4, #1
 8013130:	e7ea      	b.n	8013108 <quorem+0xe2>
 8013132:	2000      	movs	r0, #0
 8013134:	e7ee      	b.n	8013114 <quorem+0xee>
	...

08013138 <_dtoa_r>:
 8013138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801313c:	ed2d 8b02 	vpush	{d8}
 8013140:	69c7      	ldr	r7, [r0, #28]
 8013142:	b091      	sub	sp, #68	@ 0x44
 8013144:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013148:	ec55 4b10 	vmov	r4, r5, d0
 801314c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801314e:	9107      	str	r1, [sp, #28]
 8013150:	4681      	mov	r9, r0
 8013152:	9209      	str	r2, [sp, #36]	@ 0x24
 8013154:	930d      	str	r3, [sp, #52]	@ 0x34
 8013156:	b97f      	cbnz	r7, 8013178 <_dtoa_r+0x40>
 8013158:	2010      	movs	r0, #16
 801315a:	f7ff f8b3 	bl	80122c4 <malloc>
 801315e:	4602      	mov	r2, r0
 8013160:	f8c9 001c 	str.w	r0, [r9, #28]
 8013164:	b920      	cbnz	r0, 8013170 <_dtoa_r+0x38>
 8013166:	4ba0      	ldr	r3, [pc, #640]	@ (80133e8 <_dtoa_r+0x2b0>)
 8013168:	21ef      	movs	r1, #239	@ 0xef
 801316a:	48a0      	ldr	r0, [pc, #640]	@ (80133ec <_dtoa_r+0x2b4>)
 801316c:	f001 fb24 	bl	80147b8 <__assert_func>
 8013170:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013174:	6007      	str	r7, [r0, #0]
 8013176:	60c7      	str	r7, [r0, #12]
 8013178:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801317c:	6819      	ldr	r1, [r3, #0]
 801317e:	b159      	cbz	r1, 8013198 <_dtoa_r+0x60>
 8013180:	685a      	ldr	r2, [r3, #4]
 8013182:	604a      	str	r2, [r1, #4]
 8013184:	2301      	movs	r3, #1
 8013186:	4093      	lsls	r3, r2
 8013188:	608b      	str	r3, [r1, #8]
 801318a:	4648      	mov	r0, r9
 801318c:	f000 fdb4 	bl	8013cf8 <_Bfree>
 8013190:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013194:	2200      	movs	r2, #0
 8013196:	601a      	str	r2, [r3, #0]
 8013198:	1e2b      	subs	r3, r5, #0
 801319a:	bfbb      	ittet	lt
 801319c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80131a0:	9303      	strlt	r3, [sp, #12]
 80131a2:	2300      	movge	r3, #0
 80131a4:	2201      	movlt	r2, #1
 80131a6:	bfac      	ite	ge
 80131a8:	6033      	strge	r3, [r6, #0]
 80131aa:	6032      	strlt	r2, [r6, #0]
 80131ac:	4b90      	ldr	r3, [pc, #576]	@ (80133f0 <_dtoa_r+0x2b8>)
 80131ae:	9e03      	ldr	r6, [sp, #12]
 80131b0:	43b3      	bics	r3, r6
 80131b2:	d110      	bne.n	80131d6 <_dtoa_r+0x9e>
 80131b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80131b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80131ba:	6013      	str	r3, [r2, #0]
 80131bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80131c0:	4323      	orrs	r3, r4
 80131c2:	f000 84de 	beq.w	8013b82 <_dtoa_r+0xa4a>
 80131c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131c8:	4f8a      	ldr	r7, [pc, #552]	@ (80133f4 <_dtoa_r+0x2bc>)
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f000 84e0 	beq.w	8013b90 <_dtoa_r+0xa58>
 80131d0:	1cfb      	adds	r3, r7, #3
 80131d2:	f000 bcdb 	b.w	8013b8c <_dtoa_r+0xa54>
 80131d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80131da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80131de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e2:	d10a      	bne.n	80131fa <_dtoa_r+0xc2>
 80131e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80131e6:	2301      	movs	r3, #1
 80131e8:	6013      	str	r3, [r2, #0]
 80131ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131ec:	b113      	cbz	r3, 80131f4 <_dtoa_r+0xbc>
 80131ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80131f0:	4b81      	ldr	r3, [pc, #516]	@ (80133f8 <_dtoa_r+0x2c0>)
 80131f2:	6013      	str	r3, [r2, #0]
 80131f4:	4f81      	ldr	r7, [pc, #516]	@ (80133fc <_dtoa_r+0x2c4>)
 80131f6:	f000 bccb 	b.w	8013b90 <_dtoa_r+0xa58>
 80131fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80131fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80131fe:	4648      	mov	r0, r9
 8013200:	eeb0 0b48 	vmov.f64	d0, d8
 8013204:	f001 f862 	bl	80142cc <__d2b>
 8013208:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801320c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801320e:	9001      	str	r0, [sp, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d045      	beq.n	80132a0 <_dtoa_r+0x168>
 8013214:	eeb0 7b48 	vmov.f64	d7, d8
 8013218:	ee18 1a90 	vmov	r1, s17
 801321c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013220:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013224:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013228:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801322c:	2500      	movs	r5, #0
 801322e:	ee07 1a90 	vmov	s15, r1
 8013232:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013236:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80133d0 <_dtoa_r+0x298>
 801323a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801323e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80133d8 <_dtoa_r+0x2a0>
 8013242:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013246:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80133e0 <_dtoa_r+0x2a8>
 801324a:	ee07 3a90 	vmov	s15, r3
 801324e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013252:	eeb0 7b46 	vmov.f64	d7, d6
 8013256:	eea4 7b05 	vfma.f64	d7, d4, d5
 801325a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801325e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013266:	ee16 8a90 	vmov	r8, s13
 801326a:	d508      	bpl.n	801327e <_dtoa_r+0x146>
 801326c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013270:	eeb4 6b47 	vcmp.f64	d6, d7
 8013274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013278:	bf18      	it	ne
 801327a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801327e:	f1b8 0f16 	cmp.w	r8, #22
 8013282:	d82b      	bhi.n	80132dc <_dtoa_r+0x1a4>
 8013284:	495e      	ldr	r1, [pc, #376]	@ (8013400 <_dtoa_r+0x2c8>)
 8013286:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801328a:	ed91 7b00 	vldr	d7, [r1]
 801328e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013296:	d501      	bpl.n	801329c <_dtoa_r+0x164>
 8013298:	f108 38ff 	add.w	r8, r8, #4294967295
 801329c:	2100      	movs	r1, #0
 801329e:	e01e      	b.n	80132de <_dtoa_r+0x1a6>
 80132a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132a2:	4413      	add	r3, r2
 80132a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80132a8:	2920      	cmp	r1, #32
 80132aa:	bfc1      	itttt	gt
 80132ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80132b0:	408e      	lslgt	r6, r1
 80132b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80132b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80132ba:	bfd6      	itet	le
 80132bc:	f1c1 0120 	rsble	r1, r1, #32
 80132c0:	4331      	orrgt	r1, r6
 80132c2:	fa04 f101 	lslle.w	r1, r4, r1
 80132c6:	ee07 1a90 	vmov	s15, r1
 80132ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80132ce:	3b01      	subs	r3, #1
 80132d0:	ee17 1a90 	vmov	r1, s15
 80132d4:	2501      	movs	r5, #1
 80132d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80132da:	e7a8      	b.n	801322e <_dtoa_r+0xf6>
 80132dc:	2101      	movs	r1, #1
 80132de:	1ad2      	subs	r2, r2, r3
 80132e0:	1e53      	subs	r3, r2, #1
 80132e2:	9306      	str	r3, [sp, #24]
 80132e4:	bf45      	ittet	mi
 80132e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80132ea:	9305      	strmi	r3, [sp, #20]
 80132ec:	2300      	movpl	r3, #0
 80132ee:	2300      	movmi	r3, #0
 80132f0:	bf4c      	ite	mi
 80132f2:	9306      	strmi	r3, [sp, #24]
 80132f4:	9305      	strpl	r3, [sp, #20]
 80132f6:	f1b8 0f00 	cmp.w	r8, #0
 80132fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80132fc:	db18      	blt.n	8013330 <_dtoa_r+0x1f8>
 80132fe:	9b06      	ldr	r3, [sp, #24]
 8013300:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013304:	4443      	add	r3, r8
 8013306:	9306      	str	r3, [sp, #24]
 8013308:	2300      	movs	r3, #0
 801330a:	9a07      	ldr	r2, [sp, #28]
 801330c:	2a09      	cmp	r2, #9
 801330e:	d849      	bhi.n	80133a4 <_dtoa_r+0x26c>
 8013310:	2a05      	cmp	r2, #5
 8013312:	bfc4      	itt	gt
 8013314:	3a04      	subgt	r2, #4
 8013316:	9207      	strgt	r2, [sp, #28]
 8013318:	9a07      	ldr	r2, [sp, #28]
 801331a:	f1a2 0202 	sub.w	r2, r2, #2
 801331e:	bfcc      	ite	gt
 8013320:	2400      	movgt	r4, #0
 8013322:	2401      	movle	r4, #1
 8013324:	2a03      	cmp	r2, #3
 8013326:	d848      	bhi.n	80133ba <_dtoa_r+0x282>
 8013328:	e8df f002 	tbb	[pc, r2]
 801332c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013330:	9b05      	ldr	r3, [sp, #20]
 8013332:	2200      	movs	r2, #0
 8013334:	eba3 0308 	sub.w	r3, r3, r8
 8013338:	9305      	str	r3, [sp, #20]
 801333a:	920a      	str	r2, [sp, #40]	@ 0x28
 801333c:	f1c8 0300 	rsb	r3, r8, #0
 8013340:	e7e3      	b.n	801330a <_dtoa_r+0x1d2>
 8013342:	2200      	movs	r2, #0
 8013344:	9208      	str	r2, [sp, #32]
 8013346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013348:	2a00      	cmp	r2, #0
 801334a:	dc39      	bgt.n	80133c0 <_dtoa_r+0x288>
 801334c:	f04f 0b01 	mov.w	fp, #1
 8013350:	46da      	mov	sl, fp
 8013352:	465a      	mov	r2, fp
 8013354:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013358:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801335c:	2100      	movs	r1, #0
 801335e:	2004      	movs	r0, #4
 8013360:	f100 0614 	add.w	r6, r0, #20
 8013364:	4296      	cmp	r6, r2
 8013366:	d930      	bls.n	80133ca <_dtoa_r+0x292>
 8013368:	6079      	str	r1, [r7, #4]
 801336a:	4648      	mov	r0, r9
 801336c:	9304      	str	r3, [sp, #16]
 801336e:	f000 fc83 	bl	8013c78 <_Balloc>
 8013372:	9b04      	ldr	r3, [sp, #16]
 8013374:	4607      	mov	r7, r0
 8013376:	2800      	cmp	r0, #0
 8013378:	d146      	bne.n	8013408 <_dtoa_r+0x2d0>
 801337a:	4b22      	ldr	r3, [pc, #136]	@ (8013404 <_dtoa_r+0x2cc>)
 801337c:	4602      	mov	r2, r0
 801337e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013382:	e6f2      	b.n	801316a <_dtoa_r+0x32>
 8013384:	2201      	movs	r2, #1
 8013386:	e7dd      	b.n	8013344 <_dtoa_r+0x20c>
 8013388:	2200      	movs	r2, #0
 801338a:	9208      	str	r2, [sp, #32]
 801338c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801338e:	eb08 0b02 	add.w	fp, r8, r2
 8013392:	f10b 0a01 	add.w	sl, fp, #1
 8013396:	4652      	mov	r2, sl
 8013398:	2a01      	cmp	r2, #1
 801339a:	bfb8      	it	lt
 801339c:	2201      	movlt	r2, #1
 801339e:	e7db      	b.n	8013358 <_dtoa_r+0x220>
 80133a0:	2201      	movs	r2, #1
 80133a2:	e7f2      	b.n	801338a <_dtoa_r+0x252>
 80133a4:	2401      	movs	r4, #1
 80133a6:	2200      	movs	r2, #0
 80133a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80133ac:	f04f 3bff 	mov.w	fp, #4294967295
 80133b0:	2100      	movs	r1, #0
 80133b2:	46da      	mov	sl, fp
 80133b4:	2212      	movs	r2, #18
 80133b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80133b8:	e7ce      	b.n	8013358 <_dtoa_r+0x220>
 80133ba:	2201      	movs	r2, #1
 80133bc:	9208      	str	r2, [sp, #32]
 80133be:	e7f5      	b.n	80133ac <_dtoa_r+0x274>
 80133c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80133c4:	46da      	mov	sl, fp
 80133c6:	465a      	mov	r2, fp
 80133c8:	e7c6      	b.n	8013358 <_dtoa_r+0x220>
 80133ca:	3101      	adds	r1, #1
 80133cc:	0040      	lsls	r0, r0, #1
 80133ce:	e7c7      	b.n	8013360 <_dtoa_r+0x228>
 80133d0:	636f4361 	.word	0x636f4361
 80133d4:	3fd287a7 	.word	0x3fd287a7
 80133d8:	8b60c8b3 	.word	0x8b60c8b3
 80133dc:	3fc68a28 	.word	0x3fc68a28
 80133e0:	509f79fb 	.word	0x509f79fb
 80133e4:	3fd34413 	.word	0x3fd34413
 80133e8:	080176d1 	.word	0x080176d1
 80133ec:	080176e8 	.word	0x080176e8
 80133f0:	7ff00000 	.word	0x7ff00000
 80133f4:	080176cd 	.word	0x080176cd
 80133f8:	080176a1 	.word	0x080176a1
 80133fc:	080176a0 	.word	0x080176a0
 8013400:	080177e0 	.word	0x080177e0
 8013404:	08017740 	.word	0x08017740
 8013408:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801340c:	f1ba 0f0e 	cmp.w	sl, #14
 8013410:	6010      	str	r0, [r2, #0]
 8013412:	d86f      	bhi.n	80134f4 <_dtoa_r+0x3bc>
 8013414:	2c00      	cmp	r4, #0
 8013416:	d06d      	beq.n	80134f4 <_dtoa_r+0x3bc>
 8013418:	f1b8 0f00 	cmp.w	r8, #0
 801341c:	f340 80c2 	ble.w	80135a4 <_dtoa_r+0x46c>
 8013420:	4aca      	ldr	r2, [pc, #808]	@ (801374c <_dtoa_r+0x614>)
 8013422:	f008 010f 	and.w	r1, r8, #15
 8013426:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801342a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801342e:	ed92 7b00 	vldr	d7, [r2]
 8013432:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013436:	f000 80a9 	beq.w	801358c <_dtoa_r+0x454>
 801343a:	4ac5      	ldr	r2, [pc, #788]	@ (8013750 <_dtoa_r+0x618>)
 801343c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013440:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013444:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013448:	f001 010f 	and.w	r1, r1, #15
 801344c:	2203      	movs	r2, #3
 801344e:	48c0      	ldr	r0, [pc, #768]	@ (8013750 <_dtoa_r+0x618>)
 8013450:	2900      	cmp	r1, #0
 8013452:	f040 809d 	bne.w	8013590 <_dtoa_r+0x458>
 8013456:	ed9d 6b02 	vldr	d6, [sp, #8]
 801345a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801345e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013462:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013464:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013468:	2900      	cmp	r1, #0
 801346a:	f000 80c1 	beq.w	80135f0 <_dtoa_r+0x4b8>
 801346e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013472:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347a:	f140 80b9 	bpl.w	80135f0 <_dtoa_r+0x4b8>
 801347e:	f1ba 0f00 	cmp.w	sl, #0
 8013482:	f000 80b5 	beq.w	80135f0 <_dtoa_r+0x4b8>
 8013486:	f1bb 0f00 	cmp.w	fp, #0
 801348a:	dd31      	ble.n	80134f0 <_dtoa_r+0x3b8>
 801348c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013490:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013494:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013498:	f108 31ff 	add.w	r1, r8, #4294967295
 801349c:	9104      	str	r1, [sp, #16]
 801349e:	3201      	adds	r2, #1
 80134a0:	465c      	mov	r4, fp
 80134a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80134a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80134aa:	ee07 2a90 	vmov	s15, r2
 80134ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80134b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80134b6:	ee15 2a90 	vmov	r2, s11
 80134ba:	ec51 0b15 	vmov	r0, r1, d5
 80134be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80134c2:	2c00      	cmp	r4, #0
 80134c4:	f040 8098 	bne.w	80135f8 <_dtoa_r+0x4c0>
 80134c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80134cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80134d0:	ec41 0b17 	vmov	d7, r0, r1
 80134d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134dc:	f300 8261 	bgt.w	80139a2 <_dtoa_r+0x86a>
 80134e0:	eeb1 7b47 	vneg.f64	d7, d7
 80134e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80134e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ec:	f100 80f5 	bmi.w	80136da <_dtoa_r+0x5a2>
 80134f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80134f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80134f6:	2a00      	cmp	r2, #0
 80134f8:	f2c0 812c 	blt.w	8013754 <_dtoa_r+0x61c>
 80134fc:	f1b8 0f0e 	cmp.w	r8, #14
 8013500:	f300 8128 	bgt.w	8013754 <_dtoa_r+0x61c>
 8013504:	4b91      	ldr	r3, [pc, #580]	@ (801374c <_dtoa_r+0x614>)
 8013506:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801350a:	ed93 6b00 	vldr	d6, [r3]
 801350e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013510:	2b00      	cmp	r3, #0
 8013512:	da03      	bge.n	801351c <_dtoa_r+0x3e4>
 8013514:	f1ba 0f00 	cmp.w	sl, #0
 8013518:	f340 80d2 	ble.w	80136c0 <_dtoa_r+0x588>
 801351c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013520:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013524:	463e      	mov	r6, r7
 8013526:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801352a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801352e:	ee15 3a10 	vmov	r3, s10
 8013532:	3330      	adds	r3, #48	@ 0x30
 8013534:	f806 3b01 	strb.w	r3, [r6], #1
 8013538:	1bf3      	subs	r3, r6, r7
 801353a:	459a      	cmp	sl, r3
 801353c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013540:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013544:	f040 80f8 	bne.w	8013738 <_dtoa_r+0x600>
 8013548:	ee37 7b07 	vadd.f64	d7, d7, d7
 801354c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013554:	f300 80dd 	bgt.w	8013712 <_dtoa_r+0x5da>
 8013558:	eeb4 7b46 	vcmp.f64	d7, d6
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	d104      	bne.n	801356c <_dtoa_r+0x434>
 8013562:	ee15 3a10 	vmov	r3, s10
 8013566:	07db      	lsls	r3, r3, #31
 8013568:	f100 80d3 	bmi.w	8013712 <_dtoa_r+0x5da>
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	4648      	mov	r0, r9
 8013570:	f000 fbc2 	bl	8013cf8 <_Bfree>
 8013574:	2300      	movs	r3, #0
 8013576:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013578:	7033      	strb	r3, [r6, #0]
 801357a:	f108 0301 	add.w	r3, r8, #1
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013582:	2b00      	cmp	r3, #0
 8013584:	f000 8304 	beq.w	8013b90 <_dtoa_r+0xa58>
 8013588:	601e      	str	r6, [r3, #0]
 801358a:	e301      	b.n	8013b90 <_dtoa_r+0xa58>
 801358c:	2202      	movs	r2, #2
 801358e:	e75e      	b.n	801344e <_dtoa_r+0x316>
 8013590:	07cc      	lsls	r4, r1, #31
 8013592:	d504      	bpl.n	801359e <_dtoa_r+0x466>
 8013594:	ed90 6b00 	vldr	d6, [r0]
 8013598:	3201      	adds	r2, #1
 801359a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801359e:	1049      	asrs	r1, r1, #1
 80135a0:	3008      	adds	r0, #8
 80135a2:	e755      	b.n	8013450 <_dtoa_r+0x318>
 80135a4:	d022      	beq.n	80135ec <_dtoa_r+0x4b4>
 80135a6:	f1c8 0100 	rsb	r1, r8, #0
 80135aa:	4a68      	ldr	r2, [pc, #416]	@ (801374c <_dtoa_r+0x614>)
 80135ac:	f001 000f 	and.w	r0, r1, #15
 80135b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80135b4:	ed92 7b00 	vldr	d7, [r2]
 80135b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80135bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135c0:	4863      	ldr	r0, [pc, #396]	@ (8013750 <_dtoa_r+0x618>)
 80135c2:	1109      	asrs	r1, r1, #4
 80135c4:	2400      	movs	r4, #0
 80135c6:	2202      	movs	r2, #2
 80135c8:	b929      	cbnz	r1, 80135d6 <_dtoa_r+0x49e>
 80135ca:	2c00      	cmp	r4, #0
 80135cc:	f43f af49 	beq.w	8013462 <_dtoa_r+0x32a>
 80135d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135d4:	e745      	b.n	8013462 <_dtoa_r+0x32a>
 80135d6:	07ce      	lsls	r6, r1, #31
 80135d8:	d505      	bpl.n	80135e6 <_dtoa_r+0x4ae>
 80135da:	ed90 6b00 	vldr	d6, [r0]
 80135de:	3201      	adds	r2, #1
 80135e0:	2401      	movs	r4, #1
 80135e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80135e6:	1049      	asrs	r1, r1, #1
 80135e8:	3008      	adds	r0, #8
 80135ea:	e7ed      	b.n	80135c8 <_dtoa_r+0x490>
 80135ec:	2202      	movs	r2, #2
 80135ee:	e738      	b.n	8013462 <_dtoa_r+0x32a>
 80135f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80135f4:	4654      	mov	r4, sl
 80135f6:	e754      	b.n	80134a2 <_dtoa_r+0x36a>
 80135f8:	4a54      	ldr	r2, [pc, #336]	@ (801374c <_dtoa_r+0x614>)
 80135fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80135fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013602:	9a08      	ldr	r2, [sp, #32]
 8013604:	ec41 0b17 	vmov	d7, r0, r1
 8013608:	443c      	add	r4, r7
 801360a:	b34a      	cbz	r2, 8013660 <_dtoa_r+0x528>
 801360c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013610:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013614:	463e      	mov	r6, r7
 8013616:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801361a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801361e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013622:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013626:	ee14 2a90 	vmov	r2, s9
 801362a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801362e:	3230      	adds	r2, #48	@ 0x30
 8013630:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363c:	f806 2b01 	strb.w	r2, [r6], #1
 8013640:	d438      	bmi.n	80136b4 <_dtoa_r+0x57c>
 8013642:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013646:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364e:	d462      	bmi.n	8013716 <_dtoa_r+0x5de>
 8013650:	42a6      	cmp	r6, r4
 8013652:	f43f af4d 	beq.w	80134f0 <_dtoa_r+0x3b8>
 8013656:	ee27 7b03 	vmul.f64	d7, d7, d3
 801365a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801365e:	e7e0      	b.n	8013622 <_dtoa_r+0x4ea>
 8013660:	4621      	mov	r1, r4
 8013662:	463e      	mov	r6, r7
 8013664:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013668:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801366c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013670:	ee14 2a90 	vmov	r2, s9
 8013674:	3230      	adds	r2, #48	@ 0x30
 8013676:	f806 2b01 	strb.w	r2, [r6], #1
 801367a:	42a6      	cmp	r6, r4
 801367c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013680:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013684:	d119      	bne.n	80136ba <_dtoa_r+0x582>
 8013686:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801368a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801368e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013696:	dc3e      	bgt.n	8013716 <_dtoa_r+0x5de>
 8013698:	ee35 5b47 	vsub.f64	d5, d5, d7
 801369c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80136a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a4:	f57f af24 	bpl.w	80134f0 <_dtoa_r+0x3b8>
 80136a8:	460e      	mov	r6, r1
 80136aa:	3901      	subs	r1, #1
 80136ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80136b0:	2b30      	cmp	r3, #48	@ 0x30
 80136b2:	d0f9      	beq.n	80136a8 <_dtoa_r+0x570>
 80136b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80136b8:	e758      	b.n	801356c <_dtoa_r+0x434>
 80136ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80136be:	e7d5      	b.n	801366c <_dtoa_r+0x534>
 80136c0:	d10b      	bne.n	80136da <_dtoa_r+0x5a2>
 80136c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80136c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80136ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	f2c0 8161 	blt.w	801399c <_dtoa_r+0x864>
 80136da:	2400      	movs	r4, #0
 80136dc:	4625      	mov	r5, r4
 80136de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136e0:	43db      	mvns	r3, r3
 80136e2:	9304      	str	r3, [sp, #16]
 80136e4:	463e      	mov	r6, r7
 80136e6:	f04f 0800 	mov.w	r8, #0
 80136ea:	4621      	mov	r1, r4
 80136ec:	4648      	mov	r0, r9
 80136ee:	f000 fb03 	bl	8013cf8 <_Bfree>
 80136f2:	2d00      	cmp	r5, #0
 80136f4:	d0de      	beq.n	80136b4 <_dtoa_r+0x57c>
 80136f6:	f1b8 0f00 	cmp.w	r8, #0
 80136fa:	d005      	beq.n	8013708 <_dtoa_r+0x5d0>
 80136fc:	45a8      	cmp	r8, r5
 80136fe:	d003      	beq.n	8013708 <_dtoa_r+0x5d0>
 8013700:	4641      	mov	r1, r8
 8013702:	4648      	mov	r0, r9
 8013704:	f000 faf8 	bl	8013cf8 <_Bfree>
 8013708:	4629      	mov	r1, r5
 801370a:	4648      	mov	r0, r9
 801370c:	f000 faf4 	bl	8013cf8 <_Bfree>
 8013710:	e7d0      	b.n	80136b4 <_dtoa_r+0x57c>
 8013712:	f8cd 8010 	str.w	r8, [sp, #16]
 8013716:	4633      	mov	r3, r6
 8013718:	461e      	mov	r6, r3
 801371a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801371e:	2a39      	cmp	r2, #57	@ 0x39
 8013720:	d106      	bne.n	8013730 <_dtoa_r+0x5f8>
 8013722:	429f      	cmp	r7, r3
 8013724:	d1f8      	bne.n	8013718 <_dtoa_r+0x5e0>
 8013726:	9a04      	ldr	r2, [sp, #16]
 8013728:	3201      	adds	r2, #1
 801372a:	9204      	str	r2, [sp, #16]
 801372c:	2230      	movs	r2, #48	@ 0x30
 801372e:	703a      	strb	r2, [r7, #0]
 8013730:	781a      	ldrb	r2, [r3, #0]
 8013732:	3201      	adds	r2, #1
 8013734:	701a      	strb	r2, [r3, #0]
 8013736:	e7bd      	b.n	80136b4 <_dtoa_r+0x57c>
 8013738:	ee27 7b04 	vmul.f64	d7, d7, d4
 801373c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013744:	f47f aeef 	bne.w	8013526 <_dtoa_r+0x3ee>
 8013748:	e710      	b.n	801356c <_dtoa_r+0x434>
 801374a:	bf00      	nop
 801374c:	080177e0 	.word	0x080177e0
 8013750:	080177b8 	.word	0x080177b8
 8013754:	9908      	ldr	r1, [sp, #32]
 8013756:	2900      	cmp	r1, #0
 8013758:	f000 80e3 	beq.w	8013922 <_dtoa_r+0x7ea>
 801375c:	9907      	ldr	r1, [sp, #28]
 801375e:	2901      	cmp	r1, #1
 8013760:	f300 80c8 	bgt.w	80138f4 <_dtoa_r+0x7bc>
 8013764:	2d00      	cmp	r5, #0
 8013766:	f000 80c1 	beq.w	80138ec <_dtoa_r+0x7b4>
 801376a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801376e:	9e05      	ldr	r6, [sp, #20]
 8013770:	461c      	mov	r4, r3
 8013772:	9304      	str	r3, [sp, #16]
 8013774:	9b05      	ldr	r3, [sp, #20]
 8013776:	4413      	add	r3, r2
 8013778:	9305      	str	r3, [sp, #20]
 801377a:	9b06      	ldr	r3, [sp, #24]
 801377c:	2101      	movs	r1, #1
 801377e:	4413      	add	r3, r2
 8013780:	4648      	mov	r0, r9
 8013782:	9306      	str	r3, [sp, #24]
 8013784:	f000 fb6c 	bl	8013e60 <__i2b>
 8013788:	9b04      	ldr	r3, [sp, #16]
 801378a:	4605      	mov	r5, r0
 801378c:	b166      	cbz	r6, 80137a8 <_dtoa_r+0x670>
 801378e:	9a06      	ldr	r2, [sp, #24]
 8013790:	2a00      	cmp	r2, #0
 8013792:	dd09      	ble.n	80137a8 <_dtoa_r+0x670>
 8013794:	42b2      	cmp	r2, r6
 8013796:	9905      	ldr	r1, [sp, #20]
 8013798:	bfa8      	it	ge
 801379a:	4632      	movge	r2, r6
 801379c:	1a89      	subs	r1, r1, r2
 801379e:	9105      	str	r1, [sp, #20]
 80137a0:	9906      	ldr	r1, [sp, #24]
 80137a2:	1ab6      	subs	r6, r6, r2
 80137a4:	1a8a      	subs	r2, r1, r2
 80137a6:	9206      	str	r2, [sp, #24]
 80137a8:	b1fb      	cbz	r3, 80137ea <_dtoa_r+0x6b2>
 80137aa:	9a08      	ldr	r2, [sp, #32]
 80137ac:	2a00      	cmp	r2, #0
 80137ae:	f000 80bc 	beq.w	801392a <_dtoa_r+0x7f2>
 80137b2:	b19c      	cbz	r4, 80137dc <_dtoa_r+0x6a4>
 80137b4:	4629      	mov	r1, r5
 80137b6:	4622      	mov	r2, r4
 80137b8:	4648      	mov	r0, r9
 80137ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137bc:	f000 fc10 	bl	8013fe0 <__pow5mult>
 80137c0:	9a01      	ldr	r2, [sp, #4]
 80137c2:	4601      	mov	r1, r0
 80137c4:	4605      	mov	r5, r0
 80137c6:	4648      	mov	r0, r9
 80137c8:	f000 fb60 	bl	8013e8c <__multiply>
 80137cc:	9901      	ldr	r1, [sp, #4]
 80137ce:	9004      	str	r0, [sp, #16]
 80137d0:	4648      	mov	r0, r9
 80137d2:	f000 fa91 	bl	8013cf8 <_Bfree>
 80137d6:	9a04      	ldr	r2, [sp, #16]
 80137d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137da:	9201      	str	r2, [sp, #4]
 80137dc:	1b1a      	subs	r2, r3, r4
 80137de:	d004      	beq.n	80137ea <_dtoa_r+0x6b2>
 80137e0:	9901      	ldr	r1, [sp, #4]
 80137e2:	4648      	mov	r0, r9
 80137e4:	f000 fbfc 	bl	8013fe0 <__pow5mult>
 80137e8:	9001      	str	r0, [sp, #4]
 80137ea:	2101      	movs	r1, #1
 80137ec:	4648      	mov	r0, r9
 80137ee:	f000 fb37 	bl	8013e60 <__i2b>
 80137f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137f4:	4604      	mov	r4, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f000 81d0 	beq.w	8013b9c <_dtoa_r+0xa64>
 80137fc:	461a      	mov	r2, r3
 80137fe:	4601      	mov	r1, r0
 8013800:	4648      	mov	r0, r9
 8013802:	f000 fbed 	bl	8013fe0 <__pow5mult>
 8013806:	9b07      	ldr	r3, [sp, #28]
 8013808:	2b01      	cmp	r3, #1
 801380a:	4604      	mov	r4, r0
 801380c:	f300 8095 	bgt.w	801393a <_dtoa_r+0x802>
 8013810:	9b02      	ldr	r3, [sp, #8]
 8013812:	2b00      	cmp	r3, #0
 8013814:	f040 808b 	bne.w	801392e <_dtoa_r+0x7f6>
 8013818:	9b03      	ldr	r3, [sp, #12]
 801381a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801381e:	2a00      	cmp	r2, #0
 8013820:	f040 8087 	bne.w	8013932 <_dtoa_r+0x7fa>
 8013824:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013828:	0d12      	lsrs	r2, r2, #20
 801382a:	0512      	lsls	r2, r2, #20
 801382c:	2a00      	cmp	r2, #0
 801382e:	f000 8082 	beq.w	8013936 <_dtoa_r+0x7fe>
 8013832:	9b05      	ldr	r3, [sp, #20]
 8013834:	3301      	adds	r3, #1
 8013836:	9305      	str	r3, [sp, #20]
 8013838:	9b06      	ldr	r3, [sp, #24]
 801383a:	3301      	adds	r3, #1
 801383c:	9306      	str	r3, [sp, #24]
 801383e:	2301      	movs	r3, #1
 8013840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 81af 	beq.w	8013ba8 <_dtoa_r+0xa70>
 801384a:	6922      	ldr	r2, [r4, #16]
 801384c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013850:	6910      	ldr	r0, [r2, #16]
 8013852:	f000 fab9 	bl	8013dc8 <__hi0bits>
 8013856:	f1c0 0020 	rsb	r0, r0, #32
 801385a:	9b06      	ldr	r3, [sp, #24]
 801385c:	4418      	add	r0, r3
 801385e:	f010 001f 	ands.w	r0, r0, #31
 8013862:	d076      	beq.n	8013952 <_dtoa_r+0x81a>
 8013864:	f1c0 0220 	rsb	r2, r0, #32
 8013868:	2a04      	cmp	r2, #4
 801386a:	dd69      	ble.n	8013940 <_dtoa_r+0x808>
 801386c:	9b05      	ldr	r3, [sp, #20]
 801386e:	f1c0 001c 	rsb	r0, r0, #28
 8013872:	4403      	add	r3, r0
 8013874:	9305      	str	r3, [sp, #20]
 8013876:	9b06      	ldr	r3, [sp, #24]
 8013878:	4406      	add	r6, r0
 801387a:	4403      	add	r3, r0
 801387c:	9306      	str	r3, [sp, #24]
 801387e:	9b05      	ldr	r3, [sp, #20]
 8013880:	2b00      	cmp	r3, #0
 8013882:	dd05      	ble.n	8013890 <_dtoa_r+0x758>
 8013884:	9901      	ldr	r1, [sp, #4]
 8013886:	461a      	mov	r2, r3
 8013888:	4648      	mov	r0, r9
 801388a:	f000 fc03 	bl	8014094 <__lshift>
 801388e:	9001      	str	r0, [sp, #4]
 8013890:	9b06      	ldr	r3, [sp, #24]
 8013892:	2b00      	cmp	r3, #0
 8013894:	dd05      	ble.n	80138a2 <_dtoa_r+0x76a>
 8013896:	4621      	mov	r1, r4
 8013898:	461a      	mov	r2, r3
 801389a:	4648      	mov	r0, r9
 801389c:	f000 fbfa 	bl	8014094 <__lshift>
 80138a0:	4604      	mov	r4, r0
 80138a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d056      	beq.n	8013956 <_dtoa_r+0x81e>
 80138a8:	9801      	ldr	r0, [sp, #4]
 80138aa:	4621      	mov	r1, r4
 80138ac:	f000 fc5e 	bl	801416c <__mcmp>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	da50      	bge.n	8013956 <_dtoa_r+0x81e>
 80138b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80138b8:	9304      	str	r3, [sp, #16]
 80138ba:	9901      	ldr	r1, [sp, #4]
 80138bc:	2300      	movs	r3, #0
 80138be:	220a      	movs	r2, #10
 80138c0:	4648      	mov	r0, r9
 80138c2:	f000 fa3b 	bl	8013d3c <__multadd>
 80138c6:	9b08      	ldr	r3, [sp, #32]
 80138c8:	9001      	str	r0, [sp, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f000 816e 	beq.w	8013bac <_dtoa_r+0xa74>
 80138d0:	4629      	mov	r1, r5
 80138d2:	2300      	movs	r3, #0
 80138d4:	220a      	movs	r2, #10
 80138d6:	4648      	mov	r0, r9
 80138d8:	f000 fa30 	bl	8013d3c <__multadd>
 80138dc:	f1bb 0f00 	cmp.w	fp, #0
 80138e0:	4605      	mov	r5, r0
 80138e2:	dc64      	bgt.n	80139ae <_dtoa_r+0x876>
 80138e4:	9b07      	ldr	r3, [sp, #28]
 80138e6:	2b02      	cmp	r3, #2
 80138e8:	dc3e      	bgt.n	8013968 <_dtoa_r+0x830>
 80138ea:	e060      	b.n	80139ae <_dtoa_r+0x876>
 80138ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80138f2:	e73c      	b.n	801376e <_dtoa_r+0x636>
 80138f4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80138f8:	42a3      	cmp	r3, r4
 80138fa:	bfbf      	itttt	lt
 80138fc:	1ae2      	sublt	r2, r4, r3
 80138fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013900:	189b      	addlt	r3, r3, r2
 8013902:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013904:	bfae      	itee	ge
 8013906:	1b1c      	subge	r4, r3, r4
 8013908:	4623      	movlt	r3, r4
 801390a:	2400      	movlt	r4, #0
 801390c:	f1ba 0f00 	cmp.w	sl, #0
 8013910:	bfb5      	itete	lt
 8013912:	9a05      	ldrlt	r2, [sp, #20]
 8013914:	9e05      	ldrge	r6, [sp, #20]
 8013916:	eba2 060a 	sublt.w	r6, r2, sl
 801391a:	4652      	movge	r2, sl
 801391c:	bfb8      	it	lt
 801391e:	2200      	movlt	r2, #0
 8013920:	e727      	b.n	8013772 <_dtoa_r+0x63a>
 8013922:	9e05      	ldr	r6, [sp, #20]
 8013924:	9d08      	ldr	r5, [sp, #32]
 8013926:	461c      	mov	r4, r3
 8013928:	e730      	b.n	801378c <_dtoa_r+0x654>
 801392a:	461a      	mov	r2, r3
 801392c:	e758      	b.n	80137e0 <_dtoa_r+0x6a8>
 801392e:	2300      	movs	r3, #0
 8013930:	e786      	b.n	8013840 <_dtoa_r+0x708>
 8013932:	9b02      	ldr	r3, [sp, #8]
 8013934:	e784      	b.n	8013840 <_dtoa_r+0x708>
 8013936:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013938:	e783      	b.n	8013842 <_dtoa_r+0x70a>
 801393a:	2300      	movs	r3, #0
 801393c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801393e:	e784      	b.n	801384a <_dtoa_r+0x712>
 8013940:	d09d      	beq.n	801387e <_dtoa_r+0x746>
 8013942:	9b05      	ldr	r3, [sp, #20]
 8013944:	321c      	adds	r2, #28
 8013946:	4413      	add	r3, r2
 8013948:	9305      	str	r3, [sp, #20]
 801394a:	9b06      	ldr	r3, [sp, #24]
 801394c:	4416      	add	r6, r2
 801394e:	4413      	add	r3, r2
 8013950:	e794      	b.n	801387c <_dtoa_r+0x744>
 8013952:	4602      	mov	r2, r0
 8013954:	e7f5      	b.n	8013942 <_dtoa_r+0x80a>
 8013956:	f1ba 0f00 	cmp.w	sl, #0
 801395a:	f8cd 8010 	str.w	r8, [sp, #16]
 801395e:	46d3      	mov	fp, sl
 8013960:	dc21      	bgt.n	80139a6 <_dtoa_r+0x86e>
 8013962:	9b07      	ldr	r3, [sp, #28]
 8013964:	2b02      	cmp	r3, #2
 8013966:	dd1e      	ble.n	80139a6 <_dtoa_r+0x86e>
 8013968:	f1bb 0f00 	cmp.w	fp, #0
 801396c:	f47f aeb7 	bne.w	80136de <_dtoa_r+0x5a6>
 8013970:	4621      	mov	r1, r4
 8013972:	465b      	mov	r3, fp
 8013974:	2205      	movs	r2, #5
 8013976:	4648      	mov	r0, r9
 8013978:	f000 f9e0 	bl	8013d3c <__multadd>
 801397c:	4601      	mov	r1, r0
 801397e:	4604      	mov	r4, r0
 8013980:	9801      	ldr	r0, [sp, #4]
 8013982:	f000 fbf3 	bl	801416c <__mcmp>
 8013986:	2800      	cmp	r0, #0
 8013988:	f77f aea9 	ble.w	80136de <_dtoa_r+0x5a6>
 801398c:	463e      	mov	r6, r7
 801398e:	2331      	movs	r3, #49	@ 0x31
 8013990:	f806 3b01 	strb.w	r3, [r6], #1
 8013994:	9b04      	ldr	r3, [sp, #16]
 8013996:	3301      	adds	r3, #1
 8013998:	9304      	str	r3, [sp, #16]
 801399a:	e6a4      	b.n	80136e6 <_dtoa_r+0x5ae>
 801399c:	f8cd 8010 	str.w	r8, [sp, #16]
 80139a0:	4654      	mov	r4, sl
 80139a2:	4625      	mov	r5, r4
 80139a4:	e7f2      	b.n	801398c <_dtoa_r+0x854>
 80139a6:	9b08      	ldr	r3, [sp, #32]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 8103 	beq.w	8013bb4 <_dtoa_r+0xa7c>
 80139ae:	2e00      	cmp	r6, #0
 80139b0:	dd05      	ble.n	80139be <_dtoa_r+0x886>
 80139b2:	4629      	mov	r1, r5
 80139b4:	4632      	mov	r2, r6
 80139b6:	4648      	mov	r0, r9
 80139b8:	f000 fb6c 	bl	8014094 <__lshift>
 80139bc:	4605      	mov	r5, r0
 80139be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d058      	beq.n	8013a76 <_dtoa_r+0x93e>
 80139c4:	6869      	ldr	r1, [r5, #4]
 80139c6:	4648      	mov	r0, r9
 80139c8:	f000 f956 	bl	8013c78 <_Balloc>
 80139cc:	4606      	mov	r6, r0
 80139ce:	b928      	cbnz	r0, 80139dc <_dtoa_r+0x8a4>
 80139d0:	4b82      	ldr	r3, [pc, #520]	@ (8013bdc <_dtoa_r+0xaa4>)
 80139d2:	4602      	mov	r2, r0
 80139d4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80139d8:	f7ff bbc7 	b.w	801316a <_dtoa_r+0x32>
 80139dc:	692a      	ldr	r2, [r5, #16]
 80139de:	3202      	adds	r2, #2
 80139e0:	0092      	lsls	r2, r2, #2
 80139e2:	f105 010c 	add.w	r1, r5, #12
 80139e6:	300c      	adds	r0, #12
 80139e8:	f7ff fb0f 	bl	801300a <memcpy>
 80139ec:	2201      	movs	r2, #1
 80139ee:	4631      	mov	r1, r6
 80139f0:	4648      	mov	r0, r9
 80139f2:	f000 fb4f 	bl	8014094 <__lshift>
 80139f6:	1c7b      	adds	r3, r7, #1
 80139f8:	9305      	str	r3, [sp, #20]
 80139fa:	eb07 030b 	add.w	r3, r7, fp
 80139fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a00:	9b02      	ldr	r3, [sp, #8]
 8013a02:	f003 0301 	and.w	r3, r3, #1
 8013a06:	46a8      	mov	r8, r5
 8013a08:	9308      	str	r3, [sp, #32]
 8013a0a:	4605      	mov	r5, r0
 8013a0c:	9b05      	ldr	r3, [sp, #20]
 8013a0e:	9801      	ldr	r0, [sp, #4]
 8013a10:	4621      	mov	r1, r4
 8013a12:	f103 3bff 	add.w	fp, r3, #4294967295
 8013a16:	f7ff fb06 	bl	8013026 <quorem>
 8013a1a:	4641      	mov	r1, r8
 8013a1c:	9002      	str	r0, [sp, #8]
 8013a1e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013a22:	9801      	ldr	r0, [sp, #4]
 8013a24:	f000 fba2 	bl	801416c <__mcmp>
 8013a28:	462a      	mov	r2, r5
 8013a2a:	9006      	str	r0, [sp, #24]
 8013a2c:	4621      	mov	r1, r4
 8013a2e:	4648      	mov	r0, r9
 8013a30:	f000 fbb8 	bl	80141a4 <__mdiff>
 8013a34:	68c2      	ldr	r2, [r0, #12]
 8013a36:	4606      	mov	r6, r0
 8013a38:	b9fa      	cbnz	r2, 8013a7a <_dtoa_r+0x942>
 8013a3a:	4601      	mov	r1, r0
 8013a3c:	9801      	ldr	r0, [sp, #4]
 8013a3e:	f000 fb95 	bl	801416c <__mcmp>
 8013a42:	4602      	mov	r2, r0
 8013a44:	4631      	mov	r1, r6
 8013a46:	4648      	mov	r0, r9
 8013a48:	920a      	str	r2, [sp, #40]	@ 0x28
 8013a4a:	f000 f955 	bl	8013cf8 <_Bfree>
 8013a4e:	9b07      	ldr	r3, [sp, #28]
 8013a50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013a52:	9e05      	ldr	r6, [sp, #20]
 8013a54:	ea43 0102 	orr.w	r1, r3, r2
 8013a58:	9b08      	ldr	r3, [sp, #32]
 8013a5a:	4319      	orrs	r1, r3
 8013a5c:	d10f      	bne.n	8013a7e <_dtoa_r+0x946>
 8013a5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013a62:	d028      	beq.n	8013ab6 <_dtoa_r+0x97e>
 8013a64:	9b06      	ldr	r3, [sp, #24]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	dd02      	ble.n	8013a70 <_dtoa_r+0x938>
 8013a6a:	9b02      	ldr	r3, [sp, #8]
 8013a6c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013a70:	f88b a000 	strb.w	sl, [fp]
 8013a74:	e639      	b.n	80136ea <_dtoa_r+0x5b2>
 8013a76:	4628      	mov	r0, r5
 8013a78:	e7bd      	b.n	80139f6 <_dtoa_r+0x8be>
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	e7e2      	b.n	8013a44 <_dtoa_r+0x90c>
 8013a7e:	9b06      	ldr	r3, [sp, #24]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	db04      	blt.n	8013a8e <_dtoa_r+0x956>
 8013a84:	9907      	ldr	r1, [sp, #28]
 8013a86:	430b      	orrs	r3, r1
 8013a88:	9908      	ldr	r1, [sp, #32]
 8013a8a:	430b      	orrs	r3, r1
 8013a8c:	d120      	bne.n	8013ad0 <_dtoa_r+0x998>
 8013a8e:	2a00      	cmp	r2, #0
 8013a90:	ddee      	ble.n	8013a70 <_dtoa_r+0x938>
 8013a92:	9901      	ldr	r1, [sp, #4]
 8013a94:	2201      	movs	r2, #1
 8013a96:	4648      	mov	r0, r9
 8013a98:	f000 fafc 	bl	8014094 <__lshift>
 8013a9c:	4621      	mov	r1, r4
 8013a9e:	9001      	str	r0, [sp, #4]
 8013aa0:	f000 fb64 	bl	801416c <__mcmp>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	dc03      	bgt.n	8013ab0 <_dtoa_r+0x978>
 8013aa8:	d1e2      	bne.n	8013a70 <_dtoa_r+0x938>
 8013aaa:	f01a 0f01 	tst.w	sl, #1
 8013aae:	d0df      	beq.n	8013a70 <_dtoa_r+0x938>
 8013ab0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013ab4:	d1d9      	bne.n	8013a6a <_dtoa_r+0x932>
 8013ab6:	2339      	movs	r3, #57	@ 0x39
 8013ab8:	f88b 3000 	strb.w	r3, [fp]
 8013abc:	4633      	mov	r3, r6
 8013abe:	461e      	mov	r6, r3
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013ac6:	2a39      	cmp	r2, #57	@ 0x39
 8013ac8:	d053      	beq.n	8013b72 <_dtoa_r+0xa3a>
 8013aca:	3201      	adds	r2, #1
 8013acc:	701a      	strb	r2, [r3, #0]
 8013ace:	e60c      	b.n	80136ea <_dtoa_r+0x5b2>
 8013ad0:	2a00      	cmp	r2, #0
 8013ad2:	dd07      	ble.n	8013ae4 <_dtoa_r+0x9ac>
 8013ad4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013ad8:	d0ed      	beq.n	8013ab6 <_dtoa_r+0x97e>
 8013ada:	f10a 0301 	add.w	r3, sl, #1
 8013ade:	f88b 3000 	strb.w	r3, [fp]
 8013ae2:	e602      	b.n	80136ea <_dtoa_r+0x5b2>
 8013ae4:	9b05      	ldr	r3, [sp, #20]
 8013ae6:	9a05      	ldr	r2, [sp, #20]
 8013ae8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d029      	beq.n	8013b46 <_dtoa_r+0xa0e>
 8013af2:	9901      	ldr	r1, [sp, #4]
 8013af4:	2300      	movs	r3, #0
 8013af6:	220a      	movs	r2, #10
 8013af8:	4648      	mov	r0, r9
 8013afa:	f000 f91f 	bl	8013d3c <__multadd>
 8013afe:	45a8      	cmp	r8, r5
 8013b00:	9001      	str	r0, [sp, #4]
 8013b02:	f04f 0300 	mov.w	r3, #0
 8013b06:	f04f 020a 	mov.w	r2, #10
 8013b0a:	4641      	mov	r1, r8
 8013b0c:	4648      	mov	r0, r9
 8013b0e:	d107      	bne.n	8013b20 <_dtoa_r+0x9e8>
 8013b10:	f000 f914 	bl	8013d3c <__multadd>
 8013b14:	4680      	mov	r8, r0
 8013b16:	4605      	mov	r5, r0
 8013b18:	9b05      	ldr	r3, [sp, #20]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	9305      	str	r3, [sp, #20]
 8013b1e:	e775      	b.n	8013a0c <_dtoa_r+0x8d4>
 8013b20:	f000 f90c 	bl	8013d3c <__multadd>
 8013b24:	4629      	mov	r1, r5
 8013b26:	4680      	mov	r8, r0
 8013b28:	2300      	movs	r3, #0
 8013b2a:	220a      	movs	r2, #10
 8013b2c:	4648      	mov	r0, r9
 8013b2e:	f000 f905 	bl	8013d3c <__multadd>
 8013b32:	4605      	mov	r5, r0
 8013b34:	e7f0      	b.n	8013b18 <_dtoa_r+0x9e0>
 8013b36:	f1bb 0f00 	cmp.w	fp, #0
 8013b3a:	bfcc      	ite	gt
 8013b3c:	465e      	movgt	r6, fp
 8013b3e:	2601      	movle	r6, #1
 8013b40:	443e      	add	r6, r7
 8013b42:	f04f 0800 	mov.w	r8, #0
 8013b46:	9901      	ldr	r1, [sp, #4]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	4648      	mov	r0, r9
 8013b4c:	f000 faa2 	bl	8014094 <__lshift>
 8013b50:	4621      	mov	r1, r4
 8013b52:	9001      	str	r0, [sp, #4]
 8013b54:	f000 fb0a 	bl	801416c <__mcmp>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	dcaf      	bgt.n	8013abc <_dtoa_r+0x984>
 8013b5c:	d102      	bne.n	8013b64 <_dtoa_r+0xa2c>
 8013b5e:	f01a 0f01 	tst.w	sl, #1
 8013b62:	d1ab      	bne.n	8013abc <_dtoa_r+0x984>
 8013b64:	4633      	mov	r3, r6
 8013b66:	461e      	mov	r6, r3
 8013b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b6c:	2a30      	cmp	r2, #48	@ 0x30
 8013b6e:	d0fa      	beq.n	8013b66 <_dtoa_r+0xa2e>
 8013b70:	e5bb      	b.n	80136ea <_dtoa_r+0x5b2>
 8013b72:	429f      	cmp	r7, r3
 8013b74:	d1a3      	bne.n	8013abe <_dtoa_r+0x986>
 8013b76:	9b04      	ldr	r3, [sp, #16]
 8013b78:	3301      	adds	r3, #1
 8013b7a:	9304      	str	r3, [sp, #16]
 8013b7c:	2331      	movs	r3, #49	@ 0x31
 8013b7e:	703b      	strb	r3, [r7, #0]
 8013b80:	e5b3      	b.n	80136ea <_dtoa_r+0x5b2>
 8013b82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b84:	4f16      	ldr	r7, [pc, #88]	@ (8013be0 <_dtoa_r+0xaa8>)
 8013b86:	b11b      	cbz	r3, 8013b90 <_dtoa_r+0xa58>
 8013b88:	f107 0308 	add.w	r3, r7, #8
 8013b8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013b8e:	6013      	str	r3, [r2, #0]
 8013b90:	4638      	mov	r0, r7
 8013b92:	b011      	add	sp, #68	@ 0x44
 8013b94:	ecbd 8b02 	vpop	{d8}
 8013b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9c:	9b07      	ldr	r3, [sp, #28]
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	f77f ae36 	ble.w	8013810 <_dtoa_r+0x6d8>
 8013ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ba8:	2001      	movs	r0, #1
 8013baa:	e656      	b.n	801385a <_dtoa_r+0x722>
 8013bac:	f1bb 0f00 	cmp.w	fp, #0
 8013bb0:	f77f aed7 	ble.w	8013962 <_dtoa_r+0x82a>
 8013bb4:	463e      	mov	r6, r7
 8013bb6:	9801      	ldr	r0, [sp, #4]
 8013bb8:	4621      	mov	r1, r4
 8013bba:	f7ff fa34 	bl	8013026 <quorem>
 8013bbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013bc2:	f806 ab01 	strb.w	sl, [r6], #1
 8013bc6:	1bf2      	subs	r2, r6, r7
 8013bc8:	4593      	cmp	fp, r2
 8013bca:	ddb4      	ble.n	8013b36 <_dtoa_r+0x9fe>
 8013bcc:	9901      	ldr	r1, [sp, #4]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	220a      	movs	r2, #10
 8013bd2:	4648      	mov	r0, r9
 8013bd4:	f000 f8b2 	bl	8013d3c <__multadd>
 8013bd8:	9001      	str	r0, [sp, #4]
 8013bda:	e7ec      	b.n	8013bb6 <_dtoa_r+0xa7e>
 8013bdc:	08017740 	.word	0x08017740
 8013be0:	080176c4 	.word	0x080176c4

08013be4 <_free_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4605      	mov	r5, r0
 8013be8:	2900      	cmp	r1, #0
 8013bea:	d041      	beq.n	8013c70 <_free_r+0x8c>
 8013bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bf0:	1f0c      	subs	r4, r1, #4
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	bfb8      	it	lt
 8013bf6:	18e4      	addlt	r4, r4, r3
 8013bf8:	f7fe fc0e 	bl	8012418 <__malloc_lock>
 8013bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8013c74 <_free_r+0x90>)
 8013bfe:	6813      	ldr	r3, [r2, #0]
 8013c00:	b933      	cbnz	r3, 8013c10 <_free_r+0x2c>
 8013c02:	6063      	str	r3, [r4, #4]
 8013c04:	6014      	str	r4, [r2, #0]
 8013c06:	4628      	mov	r0, r5
 8013c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c0c:	f7fe bc0a 	b.w	8012424 <__malloc_unlock>
 8013c10:	42a3      	cmp	r3, r4
 8013c12:	d908      	bls.n	8013c26 <_free_r+0x42>
 8013c14:	6820      	ldr	r0, [r4, #0]
 8013c16:	1821      	adds	r1, r4, r0
 8013c18:	428b      	cmp	r3, r1
 8013c1a:	bf01      	itttt	eq
 8013c1c:	6819      	ldreq	r1, [r3, #0]
 8013c1e:	685b      	ldreq	r3, [r3, #4]
 8013c20:	1809      	addeq	r1, r1, r0
 8013c22:	6021      	streq	r1, [r4, #0]
 8013c24:	e7ed      	b.n	8013c02 <_free_r+0x1e>
 8013c26:	461a      	mov	r2, r3
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	b10b      	cbz	r3, 8013c30 <_free_r+0x4c>
 8013c2c:	42a3      	cmp	r3, r4
 8013c2e:	d9fa      	bls.n	8013c26 <_free_r+0x42>
 8013c30:	6811      	ldr	r1, [r2, #0]
 8013c32:	1850      	adds	r0, r2, r1
 8013c34:	42a0      	cmp	r0, r4
 8013c36:	d10b      	bne.n	8013c50 <_free_r+0x6c>
 8013c38:	6820      	ldr	r0, [r4, #0]
 8013c3a:	4401      	add	r1, r0
 8013c3c:	1850      	adds	r0, r2, r1
 8013c3e:	4283      	cmp	r3, r0
 8013c40:	6011      	str	r1, [r2, #0]
 8013c42:	d1e0      	bne.n	8013c06 <_free_r+0x22>
 8013c44:	6818      	ldr	r0, [r3, #0]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	6053      	str	r3, [r2, #4]
 8013c4a:	4408      	add	r0, r1
 8013c4c:	6010      	str	r0, [r2, #0]
 8013c4e:	e7da      	b.n	8013c06 <_free_r+0x22>
 8013c50:	d902      	bls.n	8013c58 <_free_r+0x74>
 8013c52:	230c      	movs	r3, #12
 8013c54:	602b      	str	r3, [r5, #0]
 8013c56:	e7d6      	b.n	8013c06 <_free_r+0x22>
 8013c58:	6820      	ldr	r0, [r4, #0]
 8013c5a:	1821      	adds	r1, r4, r0
 8013c5c:	428b      	cmp	r3, r1
 8013c5e:	bf04      	itt	eq
 8013c60:	6819      	ldreq	r1, [r3, #0]
 8013c62:	685b      	ldreq	r3, [r3, #4]
 8013c64:	6063      	str	r3, [r4, #4]
 8013c66:	bf04      	itt	eq
 8013c68:	1809      	addeq	r1, r1, r0
 8013c6a:	6021      	streq	r1, [r4, #0]
 8013c6c:	6054      	str	r4, [r2, #4]
 8013c6e:	e7ca      	b.n	8013c06 <_free_r+0x22>
 8013c70:	bd38      	pop	{r3, r4, r5, pc}
 8013c72:	bf00      	nop
 8013c74:	2400970c 	.word	0x2400970c

08013c78 <_Balloc>:
 8013c78:	b570      	push	{r4, r5, r6, lr}
 8013c7a:	69c6      	ldr	r6, [r0, #28]
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	460d      	mov	r5, r1
 8013c80:	b976      	cbnz	r6, 8013ca0 <_Balloc+0x28>
 8013c82:	2010      	movs	r0, #16
 8013c84:	f7fe fb1e 	bl	80122c4 <malloc>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	61e0      	str	r0, [r4, #28]
 8013c8c:	b920      	cbnz	r0, 8013c98 <_Balloc+0x20>
 8013c8e:	4b18      	ldr	r3, [pc, #96]	@ (8013cf0 <_Balloc+0x78>)
 8013c90:	4818      	ldr	r0, [pc, #96]	@ (8013cf4 <_Balloc+0x7c>)
 8013c92:	216b      	movs	r1, #107	@ 0x6b
 8013c94:	f000 fd90 	bl	80147b8 <__assert_func>
 8013c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c9c:	6006      	str	r6, [r0, #0]
 8013c9e:	60c6      	str	r6, [r0, #12]
 8013ca0:	69e6      	ldr	r6, [r4, #28]
 8013ca2:	68f3      	ldr	r3, [r6, #12]
 8013ca4:	b183      	cbz	r3, 8013cc8 <_Balloc+0x50>
 8013ca6:	69e3      	ldr	r3, [r4, #28]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013cae:	b9b8      	cbnz	r0, 8013ce0 <_Balloc+0x68>
 8013cb0:	2101      	movs	r1, #1
 8013cb2:	fa01 f605 	lsl.w	r6, r1, r5
 8013cb6:	1d72      	adds	r2, r6, #5
 8013cb8:	0092      	lsls	r2, r2, #2
 8013cba:	4620      	mov	r0, r4
 8013cbc:	f000 fd9a 	bl	80147f4 <_calloc_r>
 8013cc0:	b160      	cbz	r0, 8013cdc <_Balloc+0x64>
 8013cc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013cc6:	e00e      	b.n	8013ce6 <_Balloc+0x6e>
 8013cc8:	2221      	movs	r2, #33	@ 0x21
 8013cca:	2104      	movs	r1, #4
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f000 fd91 	bl	80147f4 <_calloc_r>
 8013cd2:	69e3      	ldr	r3, [r4, #28]
 8013cd4:	60f0      	str	r0, [r6, #12]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d1e4      	bne.n	8013ca6 <_Balloc+0x2e>
 8013cdc:	2000      	movs	r0, #0
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	6802      	ldr	r2, [r0, #0]
 8013ce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013cec:	e7f7      	b.n	8013cde <_Balloc+0x66>
 8013cee:	bf00      	nop
 8013cf0:	080176d1 	.word	0x080176d1
 8013cf4:	08017751 	.word	0x08017751

08013cf8 <_Bfree>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	69c6      	ldr	r6, [r0, #28]
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	460c      	mov	r4, r1
 8013d00:	b976      	cbnz	r6, 8013d20 <_Bfree+0x28>
 8013d02:	2010      	movs	r0, #16
 8013d04:	f7fe fade 	bl	80122c4 <malloc>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	61e8      	str	r0, [r5, #28]
 8013d0c:	b920      	cbnz	r0, 8013d18 <_Bfree+0x20>
 8013d0e:	4b09      	ldr	r3, [pc, #36]	@ (8013d34 <_Bfree+0x3c>)
 8013d10:	4809      	ldr	r0, [pc, #36]	@ (8013d38 <_Bfree+0x40>)
 8013d12:	218f      	movs	r1, #143	@ 0x8f
 8013d14:	f000 fd50 	bl	80147b8 <__assert_func>
 8013d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d1c:	6006      	str	r6, [r0, #0]
 8013d1e:	60c6      	str	r6, [r0, #12]
 8013d20:	b13c      	cbz	r4, 8013d32 <_Bfree+0x3a>
 8013d22:	69eb      	ldr	r3, [r5, #28]
 8013d24:	6862      	ldr	r2, [r4, #4]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d2c:	6021      	str	r1, [r4, #0]
 8013d2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
 8013d34:	080176d1 	.word	0x080176d1
 8013d38:	08017751 	.word	0x08017751

08013d3c <__multadd>:
 8013d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	690d      	ldr	r5, [r1, #16]
 8013d42:	4607      	mov	r7, r0
 8013d44:	460c      	mov	r4, r1
 8013d46:	461e      	mov	r6, r3
 8013d48:	f101 0c14 	add.w	ip, r1, #20
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	f8dc 3000 	ldr.w	r3, [ip]
 8013d52:	b299      	uxth	r1, r3
 8013d54:	fb02 6101 	mla	r1, r2, r1, r6
 8013d58:	0c1e      	lsrs	r6, r3, #16
 8013d5a:	0c0b      	lsrs	r3, r1, #16
 8013d5c:	fb02 3306 	mla	r3, r2, r6, r3
 8013d60:	b289      	uxth	r1, r1
 8013d62:	3001      	adds	r0, #1
 8013d64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d68:	4285      	cmp	r5, r0
 8013d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8013d6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d72:	dcec      	bgt.n	8013d4e <__multadd+0x12>
 8013d74:	b30e      	cbz	r6, 8013dba <__multadd+0x7e>
 8013d76:	68a3      	ldr	r3, [r4, #8]
 8013d78:	42ab      	cmp	r3, r5
 8013d7a:	dc19      	bgt.n	8013db0 <__multadd+0x74>
 8013d7c:	6861      	ldr	r1, [r4, #4]
 8013d7e:	4638      	mov	r0, r7
 8013d80:	3101      	adds	r1, #1
 8013d82:	f7ff ff79 	bl	8013c78 <_Balloc>
 8013d86:	4680      	mov	r8, r0
 8013d88:	b928      	cbnz	r0, 8013d96 <__multadd+0x5a>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8013dc0 <__multadd+0x84>)
 8013d8e:	480d      	ldr	r0, [pc, #52]	@ (8013dc4 <__multadd+0x88>)
 8013d90:	21ba      	movs	r1, #186	@ 0xba
 8013d92:	f000 fd11 	bl	80147b8 <__assert_func>
 8013d96:	6922      	ldr	r2, [r4, #16]
 8013d98:	3202      	adds	r2, #2
 8013d9a:	f104 010c 	add.w	r1, r4, #12
 8013d9e:	0092      	lsls	r2, r2, #2
 8013da0:	300c      	adds	r0, #12
 8013da2:	f7ff f932 	bl	801300a <memcpy>
 8013da6:	4621      	mov	r1, r4
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff ffa5 	bl	8013cf8 <_Bfree>
 8013dae:	4644      	mov	r4, r8
 8013db0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013db4:	3501      	adds	r5, #1
 8013db6:	615e      	str	r6, [r3, #20]
 8013db8:	6125      	str	r5, [r4, #16]
 8013dba:	4620      	mov	r0, r4
 8013dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc0:	08017740 	.word	0x08017740
 8013dc4:	08017751 	.word	0x08017751

08013dc8 <__hi0bits>:
 8013dc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013dcc:	4603      	mov	r3, r0
 8013dce:	bf36      	itet	cc
 8013dd0:	0403      	lslcc	r3, r0, #16
 8013dd2:	2000      	movcs	r0, #0
 8013dd4:	2010      	movcc	r0, #16
 8013dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013dda:	bf3c      	itt	cc
 8013ddc:	021b      	lslcc	r3, r3, #8
 8013dde:	3008      	addcc	r0, #8
 8013de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013de4:	bf3c      	itt	cc
 8013de6:	011b      	lslcc	r3, r3, #4
 8013de8:	3004      	addcc	r0, #4
 8013dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013dee:	bf3c      	itt	cc
 8013df0:	009b      	lslcc	r3, r3, #2
 8013df2:	3002      	addcc	r0, #2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	db05      	blt.n	8013e04 <__hi0bits+0x3c>
 8013df8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013dfc:	f100 0001 	add.w	r0, r0, #1
 8013e00:	bf08      	it	eq
 8013e02:	2020      	moveq	r0, #32
 8013e04:	4770      	bx	lr

08013e06 <__lo0bits>:
 8013e06:	6803      	ldr	r3, [r0, #0]
 8013e08:	4602      	mov	r2, r0
 8013e0a:	f013 0007 	ands.w	r0, r3, #7
 8013e0e:	d00b      	beq.n	8013e28 <__lo0bits+0x22>
 8013e10:	07d9      	lsls	r1, r3, #31
 8013e12:	d421      	bmi.n	8013e58 <__lo0bits+0x52>
 8013e14:	0798      	lsls	r0, r3, #30
 8013e16:	bf49      	itett	mi
 8013e18:	085b      	lsrmi	r3, r3, #1
 8013e1a:	089b      	lsrpl	r3, r3, #2
 8013e1c:	2001      	movmi	r0, #1
 8013e1e:	6013      	strmi	r3, [r2, #0]
 8013e20:	bf5c      	itt	pl
 8013e22:	6013      	strpl	r3, [r2, #0]
 8013e24:	2002      	movpl	r0, #2
 8013e26:	4770      	bx	lr
 8013e28:	b299      	uxth	r1, r3
 8013e2a:	b909      	cbnz	r1, 8013e30 <__lo0bits+0x2a>
 8013e2c:	0c1b      	lsrs	r3, r3, #16
 8013e2e:	2010      	movs	r0, #16
 8013e30:	b2d9      	uxtb	r1, r3
 8013e32:	b909      	cbnz	r1, 8013e38 <__lo0bits+0x32>
 8013e34:	3008      	adds	r0, #8
 8013e36:	0a1b      	lsrs	r3, r3, #8
 8013e38:	0719      	lsls	r1, r3, #28
 8013e3a:	bf04      	itt	eq
 8013e3c:	091b      	lsreq	r3, r3, #4
 8013e3e:	3004      	addeq	r0, #4
 8013e40:	0799      	lsls	r1, r3, #30
 8013e42:	bf04      	itt	eq
 8013e44:	089b      	lsreq	r3, r3, #2
 8013e46:	3002      	addeq	r0, #2
 8013e48:	07d9      	lsls	r1, r3, #31
 8013e4a:	d403      	bmi.n	8013e54 <__lo0bits+0x4e>
 8013e4c:	085b      	lsrs	r3, r3, #1
 8013e4e:	f100 0001 	add.w	r0, r0, #1
 8013e52:	d003      	beq.n	8013e5c <__lo0bits+0x56>
 8013e54:	6013      	str	r3, [r2, #0]
 8013e56:	4770      	bx	lr
 8013e58:	2000      	movs	r0, #0
 8013e5a:	4770      	bx	lr
 8013e5c:	2020      	movs	r0, #32
 8013e5e:	4770      	bx	lr

08013e60 <__i2b>:
 8013e60:	b510      	push	{r4, lr}
 8013e62:	460c      	mov	r4, r1
 8013e64:	2101      	movs	r1, #1
 8013e66:	f7ff ff07 	bl	8013c78 <_Balloc>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	b928      	cbnz	r0, 8013e7a <__i2b+0x1a>
 8013e6e:	4b05      	ldr	r3, [pc, #20]	@ (8013e84 <__i2b+0x24>)
 8013e70:	4805      	ldr	r0, [pc, #20]	@ (8013e88 <__i2b+0x28>)
 8013e72:	f240 1145 	movw	r1, #325	@ 0x145
 8013e76:	f000 fc9f 	bl	80147b8 <__assert_func>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	6144      	str	r4, [r0, #20]
 8013e7e:	6103      	str	r3, [r0, #16]
 8013e80:	bd10      	pop	{r4, pc}
 8013e82:	bf00      	nop
 8013e84:	08017740 	.word	0x08017740
 8013e88:	08017751 	.word	0x08017751

08013e8c <__multiply>:
 8013e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e90:	4614      	mov	r4, r2
 8013e92:	690a      	ldr	r2, [r1, #16]
 8013e94:	6923      	ldr	r3, [r4, #16]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	bfa8      	it	ge
 8013e9a:	4623      	movge	r3, r4
 8013e9c:	460f      	mov	r7, r1
 8013e9e:	bfa4      	itt	ge
 8013ea0:	460c      	movge	r4, r1
 8013ea2:	461f      	movge	r7, r3
 8013ea4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013ea8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	6861      	ldr	r1, [r4, #4]
 8013eb0:	eb0a 0609 	add.w	r6, sl, r9
 8013eb4:	42b3      	cmp	r3, r6
 8013eb6:	b085      	sub	sp, #20
 8013eb8:	bfb8      	it	lt
 8013eba:	3101      	addlt	r1, #1
 8013ebc:	f7ff fedc 	bl	8013c78 <_Balloc>
 8013ec0:	b930      	cbnz	r0, 8013ed0 <__multiply+0x44>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	4b44      	ldr	r3, [pc, #272]	@ (8013fd8 <__multiply+0x14c>)
 8013ec6:	4845      	ldr	r0, [pc, #276]	@ (8013fdc <__multiply+0x150>)
 8013ec8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013ecc:	f000 fc74 	bl	80147b8 <__assert_func>
 8013ed0:	f100 0514 	add.w	r5, r0, #20
 8013ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013ed8:	462b      	mov	r3, r5
 8013eda:	2200      	movs	r2, #0
 8013edc:	4543      	cmp	r3, r8
 8013ede:	d321      	bcc.n	8013f24 <__multiply+0x98>
 8013ee0:	f107 0114 	add.w	r1, r7, #20
 8013ee4:	f104 0214 	add.w	r2, r4, #20
 8013ee8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013eec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013ef0:	9302      	str	r3, [sp, #8]
 8013ef2:	1b13      	subs	r3, r2, r4
 8013ef4:	3b15      	subs	r3, #21
 8013ef6:	f023 0303 	bic.w	r3, r3, #3
 8013efa:	3304      	adds	r3, #4
 8013efc:	f104 0715 	add.w	r7, r4, #21
 8013f00:	42ba      	cmp	r2, r7
 8013f02:	bf38      	it	cc
 8013f04:	2304      	movcc	r3, #4
 8013f06:	9301      	str	r3, [sp, #4]
 8013f08:	9b02      	ldr	r3, [sp, #8]
 8013f0a:	9103      	str	r1, [sp, #12]
 8013f0c:	428b      	cmp	r3, r1
 8013f0e:	d80c      	bhi.n	8013f2a <__multiply+0x9e>
 8013f10:	2e00      	cmp	r6, #0
 8013f12:	dd03      	ble.n	8013f1c <__multiply+0x90>
 8013f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d05b      	beq.n	8013fd4 <__multiply+0x148>
 8013f1c:	6106      	str	r6, [r0, #16]
 8013f1e:	b005      	add	sp, #20
 8013f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f24:	f843 2b04 	str.w	r2, [r3], #4
 8013f28:	e7d8      	b.n	8013edc <__multiply+0x50>
 8013f2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013f2e:	f1ba 0f00 	cmp.w	sl, #0
 8013f32:	d024      	beq.n	8013f7e <__multiply+0xf2>
 8013f34:	f104 0e14 	add.w	lr, r4, #20
 8013f38:	46a9      	mov	r9, r5
 8013f3a:	f04f 0c00 	mov.w	ip, #0
 8013f3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013f42:	f8d9 3000 	ldr.w	r3, [r9]
 8013f46:	fa1f fb87 	uxth.w	fp, r7
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013f50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013f54:	f8d9 7000 	ldr.w	r7, [r9]
 8013f58:	4463      	add	r3, ip
 8013f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013f62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013f6c:	4572      	cmp	r2, lr
 8013f6e:	f849 3b04 	str.w	r3, [r9], #4
 8013f72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013f76:	d8e2      	bhi.n	8013f3e <__multiply+0xb2>
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	f845 c003 	str.w	ip, [r5, r3]
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013f84:	3104      	adds	r1, #4
 8013f86:	f1b9 0f00 	cmp.w	r9, #0
 8013f8a:	d021      	beq.n	8013fd0 <__multiply+0x144>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	f104 0c14 	add.w	ip, r4, #20
 8013f92:	46ae      	mov	lr, r5
 8013f94:	f04f 0a00 	mov.w	sl, #0
 8013f98:	f8bc b000 	ldrh.w	fp, [ip]
 8013f9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013fa0:	fb09 770b 	mla	r7, r9, fp, r7
 8013fa4:	4457      	add	r7, sl
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013fac:	f84e 3b04 	str.w	r3, [lr], #4
 8013fb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013fb8:	f8be 3000 	ldrh.w	r3, [lr]
 8013fbc:	fb09 330a 	mla	r3, r9, sl, r3
 8013fc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013fc4:	4562      	cmp	r2, ip
 8013fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013fca:	d8e5      	bhi.n	8013f98 <__multiply+0x10c>
 8013fcc:	9f01      	ldr	r7, [sp, #4]
 8013fce:	51eb      	str	r3, [r5, r7]
 8013fd0:	3504      	adds	r5, #4
 8013fd2:	e799      	b.n	8013f08 <__multiply+0x7c>
 8013fd4:	3e01      	subs	r6, #1
 8013fd6:	e79b      	b.n	8013f10 <__multiply+0x84>
 8013fd8:	08017740 	.word	0x08017740
 8013fdc:	08017751 	.word	0x08017751

08013fe0 <__pow5mult>:
 8013fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fe4:	4615      	mov	r5, r2
 8013fe6:	f012 0203 	ands.w	r2, r2, #3
 8013fea:	4607      	mov	r7, r0
 8013fec:	460e      	mov	r6, r1
 8013fee:	d007      	beq.n	8014000 <__pow5mult+0x20>
 8013ff0:	4c25      	ldr	r4, [pc, #148]	@ (8014088 <__pow5mult+0xa8>)
 8013ff2:	3a01      	subs	r2, #1
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ffa:	f7ff fe9f 	bl	8013d3c <__multadd>
 8013ffe:	4606      	mov	r6, r0
 8014000:	10ad      	asrs	r5, r5, #2
 8014002:	d03d      	beq.n	8014080 <__pow5mult+0xa0>
 8014004:	69fc      	ldr	r4, [r7, #28]
 8014006:	b97c      	cbnz	r4, 8014028 <__pow5mult+0x48>
 8014008:	2010      	movs	r0, #16
 801400a:	f7fe f95b 	bl	80122c4 <malloc>
 801400e:	4602      	mov	r2, r0
 8014010:	61f8      	str	r0, [r7, #28]
 8014012:	b928      	cbnz	r0, 8014020 <__pow5mult+0x40>
 8014014:	4b1d      	ldr	r3, [pc, #116]	@ (801408c <__pow5mult+0xac>)
 8014016:	481e      	ldr	r0, [pc, #120]	@ (8014090 <__pow5mult+0xb0>)
 8014018:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801401c:	f000 fbcc 	bl	80147b8 <__assert_func>
 8014020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014024:	6004      	str	r4, [r0, #0]
 8014026:	60c4      	str	r4, [r0, #12]
 8014028:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801402c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014030:	b94c      	cbnz	r4, 8014046 <__pow5mult+0x66>
 8014032:	f240 2171 	movw	r1, #625	@ 0x271
 8014036:	4638      	mov	r0, r7
 8014038:	f7ff ff12 	bl	8013e60 <__i2b>
 801403c:	2300      	movs	r3, #0
 801403e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014042:	4604      	mov	r4, r0
 8014044:	6003      	str	r3, [r0, #0]
 8014046:	f04f 0900 	mov.w	r9, #0
 801404a:	07eb      	lsls	r3, r5, #31
 801404c:	d50a      	bpl.n	8014064 <__pow5mult+0x84>
 801404e:	4631      	mov	r1, r6
 8014050:	4622      	mov	r2, r4
 8014052:	4638      	mov	r0, r7
 8014054:	f7ff ff1a 	bl	8013e8c <__multiply>
 8014058:	4631      	mov	r1, r6
 801405a:	4680      	mov	r8, r0
 801405c:	4638      	mov	r0, r7
 801405e:	f7ff fe4b 	bl	8013cf8 <_Bfree>
 8014062:	4646      	mov	r6, r8
 8014064:	106d      	asrs	r5, r5, #1
 8014066:	d00b      	beq.n	8014080 <__pow5mult+0xa0>
 8014068:	6820      	ldr	r0, [r4, #0]
 801406a:	b938      	cbnz	r0, 801407c <__pow5mult+0x9c>
 801406c:	4622      	mov	r2, r4
 801406e:	4621      	mov	r1, r4
 8014070:	4638      	mov	r0, r7
 8014072:	f7ff ff0b 	bl	8013e8c <__multiply>
 8014076:	6020      	str	r0, [r4, #0]
 8014078:	f8c0 9000 	str.w	r9, [r0]
 801407c:	4604      	mov	r4, r0
 801407e:	e7e4      	b.n	801404a <__pow5mult+0x6a>
 8014080:	4630      	mov	r0, r6
 8014082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014086:	bf00      	nop
 8014088:	080177ac 	.word	0x080177ac
 801408c:	080176d1 	.word	0x080176d1
 8014090:	08017751 	.word	0x08017751

08014094 <__lshift>:
 8014094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014098:	460c      	mov	r4, r1
 801409a:	6849      	ldr	r1, [r1, #4]
 801409c:	6923      	ldr	r3, [r4, #16]
 801409e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140a2:	68a3      	ldr	r3, [r4, #8]
 80140a4:	4607      	mov	r7, r0
 80140a6:	4691      	mov	r9, r2
 80140a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140ac:	f108 0601 	add.w	r6, r8, #1
 80140b0:	42b3      	cmp	r3, r6
 80140b2:	db0b      	blt.n	80140cc <__lshift+0x38>
 80140b4:	4638      	mov	r0, r7
 80140b6:	f7ff fddf 	bl	8013c78 <_Balloc>
 80140ba:	4605      	mov	r5, r0
 80140bc:	b948      	cbnz	r0, 80140d2 <__lshift+0x3e>
 80140be:	4602      	mov	r2, r0
 80140c0:	4b28      	ldr	r3, [pc, #160]	@ (8014164 <__lshift+0xd0>)
 80140c2:	4829      	ldr	r0, [pc, #164]	@ (8014168 <__lshift+0xd4>)
 80140c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80140c8:	f000 fb76 	bl	80147b8 <__assert_func>
 80140cc:	3101      	adds	r1, #1
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	e7ee      	b.n	80140b0 <__lshift+0x1c>
 80140d2:	2300      	movs	r3, #0
 80140d4:	f100 0114 	add.w	r1, r0, #20
 80140d8:	f100 0210 	add.w	r2, r0, #16
 80140dc:	4618      	mov	r0, r3
 80140de:	4553      	cmp	r3, sl
 80140e0:	db33      	blt.n	801414a <__lshift+0xb6>
 80140e2:	6920      	ldr	r0, [r4, #16]
 80140e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80140e8:	f104 0314 	add.w	r3, r4, #20
 80140ec:	f019 091f 	ands.w	r9, r9, #31
 80140f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140f8:	d02b      	beq.n	8014152 <__lshift+0xbe>
 80140fa:	f1c9 0e20 	rsb	lr, r9, #32
 80140fe:	468a      	mov	sl, r1
 8014100:	2200      	movs	r2, #0
 8014102:	6818      	ldr	r0, [r3, #0]
 8014104:	fa00 f009 	lsl.w	r0, r0, r9
 8014108:	4310      	orrs	r0, r2
 801410a:	f84a 0b04 	str.w	r0, [sl], #4
 801410e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014112:	459c      	cmp	ip, r3
 8014114:	fa22 f20e 	lsr.w	r2, r2, lr
 8014118:	d8f3      	bhi.n	8014102 <__lshift+0x6e>
 801411a:	ebac 0304 	sub.w	r3, ip, r4
 801411e:	3b15      	subs	r3, #21
 8014120:	f023 0303 	bic.w	r3, r3, #3
 8014124:	3304      	adds	r3, #4
 8014126:	f104 0015 	add.w	r0, r4, #21
 801412a:	4584      	cmp	ip, r0
 801412c:	bf38      	it	cc
 801412e:	2304      	movcc	r3, #4
 8014130:	50ca      	str	r2, [r1, r3]
 8014132:	b10a      	cbz	r2, 8014138 <__lshift+0xa4>
 8014134:	f108 0602 	add.w	r6, r8, #2
 8014138:	3e01      	subs	r6, #1
 801413a:	4638      	mov	r0, r7
 801413c:	612e      	str	r6, [r5, #16]
 801413e:	4621      	mov	r1, r4
 8014140:	f7ff fdda 	bl	8013cf8 <_Bfree>
 8014144:	4628      	mov	r0, r5
 8014146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414a:	f842 0f04 	str.w	r0, [r2, #4]!
 801414e:	3301      	adds	r3, #1
 8014150:	e7c5      	b.n	80140de <__lshift+0x4a>
 8014152:	3904      	subs	r1, #4
 8014154:	f853 2b04 	ldr.w	r2, [r3], #4
 8014158:	f841 2f04 	str.w	r2, [r1, #4]!
 801415c:	459c      	cmp	ip, r3
 801415e:	d8f9      	bhi.n	8014154 <__lshift+0xc0>
 8014160:	e7ea      	b.n	8014138 <__lshift+0xa4>
 8014162:	bf00      	nop
 8014164:	08017740 	.word	0x08017740
 8014168:	08017751 	.word	0x08017751

0801416c <__mcmp>:
 801416c:	690a      	ldr	r2, [r1, #16]
 801416e:	4603      	mov	r3, r0
 8014170:	6900      	ldr	r0, [r0, #16]
 8014172:	1a80      	subs	r0, r0, r2
 8014174:	b530      	push	{r4, r5, lr}
 8014176:	d10e      	bne.n	8014196 <__mcmp+0x2a>
 8014178:	3314      	adds	r3, #20
 801417a:	3114      	adds	r1, #20
 801417c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801418c:	4295      	cmp	r5, r2
 801418e:	d003      	beq.n	8014198 <__mcmp+0x2c>
 8014190:	d205      	bcs.n	801419e <__mcmp+0x32>
 8014192:	f04f 30ff 	mov.w	r0, #4294967295
 8014196:	bd30      	pop	{r4, r5, pc}
 8014198:	42a3      	cmp	r3, r4
 801419a:	d3f3      	bcc.n	8014184 <__mcmp+0x18>
 801419c:	e7fb      	b.n	8014196 <__mcmp+0x2a>
 801419e:	2001      	movs	r0, #1
 80141a0:	e7f9      	b.n	8014196 <__mcmp+0x2a>
	...

080141a4 <__mdiff>:
 80141a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a8:	4689      	mov	r9, r1
 80141aa:	4606      	mov	r6, r0
 80141ac:	4611      	mov	r1, r2
 80141ae:	4648      	mov	r0, r9
 80141b0:	4614      	mov	r4, r2
 80141b2:	f7ff ffdb 	bl	801416c <__mcmp>
 80141b6:	1e05      	subs	r5, r0, #0
 80141b8:	d112      	bne.n	80141e0 <__mdiff+0x3c>
 80141ba:	4629      	mov	r1, r5
 80141bc:	4630      	mov	r0, r6
 80141be:	f7ff fd5b 	bl	8013c78 <_Balloc>
 80141c2:	4602      	mov	r2, r0
 80141c4:	b928      	cbnz	r0, 80141d2 <__mdiff+0x2e>
 80141c6:	4b3f      	ldr	r3, [pc, #252]	@ (80142c4 <__mdiff+0x120>)
 80141c8:	f240 2137 	movw	r1, #567	@ 0x237
 80141cc:	483e      	ldr	r0, [pc, #248]	@ (80142c8 <__mdiff+0x124>)
 80141ce:	f000 faf3 	bl	80147b8 <__assert_func>
 80141d2:	2301      	movs	r3, #1
 80141d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141d8:	4610      	mov	r0, r2
 80141da:	b003      	add	sp, #12
 80141dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e0:	bfbc      	itt	lt
 80141e2:	464b      	movlt	r3, r9
 80141e4:	46a1      	movlt	r9, r4
 80141e6:	4630      	mov	r0, r6
 80141e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80141ec:	bfba      	itte	lt
 80141ee:	461c      	movlt	r4, r3
 80141f0:	2501      	movlt	r5, #1
 80141f2:	2500      	movge	r5, #0
 80141f4:	f7ff fd40 	bl	8013c78 <_Balloc>
 80141f8:	4602      	mov	r2, r0
 80141fa:	b918      	cbnz	r0, 8014204 <__mdiff+0x60>
 80141fc:	4b31      	ldr	r3, [pc, #196]	@ (80142c4 <__mdiff+0x120>)
 80141fe:	f240 2145 	movw	r1, #581	@ 0x245
 8014202:	e7e3      	b.n	80141cc <__mdiff+0x28>
 8014204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014208:	6926      	ldr	r6, [r4, #16]
 801420a:	60c5      	str	r5, [r0, #12]
 801420c:	f109 0310 	add.w	r3, r9, #16
 8014210:	f109 0514 	add.w	r5, r9, #20
 8014214:	f104 0e14 	add.w	lr, r4, #20
 8014218:	f100 0b14 	add.w	fp, r0, #20
 801421c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014220:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014224:	9301      	str	r3, [sp, #4]
 8014226:	46d9      	mov	r9, fp
 8014228:	f04f 0c00 	mov.w	ip, #0
 801422c:	9b01      	ldr	r3, [sp, #4]
 801422e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014232:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	fa1f f38a 	uxth.w	r3, sl
 801423c:	4619      	mov	r1, r3
 801423e:	b283      	uxth	r3, r0
 8014240:	1acb      	subs	r3, r1, r3
 8014242:	0c00      	lsrs	r0, r0, #16
 8014244:	4463      	add	r3, ip
 8014246:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801424a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801424e:	b29b      	uxth	r3, r3
 8014250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014254:	4576      	cmp	r6, lr
 8014256:	f849 3b04 	str.w	r3, [r9], #4
 801425a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801425e:	d8e5      	bhi.n	801422c <__mdiff+0x88>
 8014260:	1b33      	subs	r3, r6, r4
 8014262:	3b15      	subs	r3, #21
 8014264:	f023 0303 	bic.w	r3, r3, #3
 8014268:	3415      	adds	r4, #21
 801426a:	3304      	adds	r3, #4
 801426c:	42a6      	cmp	r6, r4
 801426e:	bf38      	it	cc
 8014270:	2304      	movcc	r3, #4
 8014272:	441d      	add	r5, r3
 8014274:	445b      	add	r3, fp
 8014276:	461e      	mov	r6, r3
 8014278:	462c      	mov	r4, r5
 801427a:	4544      	cmp	r4, r8
 801427c:	d30e      	bcc.n	801429c <__mdiff+0xf8>
 801427e:	f108 0103 	add.w	r1, r8, #3
 8014282:	1b49      	subs	r1, r1, r5
 8014284:	f021 0103 	bic.w	r1, r1, #3
 8014288:	3d03      	subs	r5, #3
 801428a:	45a8      	cmp	r8, r5
 801428c:	bf38      	it	cc
 801428e:	2100      	movcc	r1, #0
 8014290:	440b      	add	r3, r1
 8014292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014296:	b191      	cbz	r1, 80142be <__mdiff+0x11a>
 8014298:	6117      	str	r7, [r2, #16]
 801429a:	e79d      	b.n	80141d8 <__mdiff+0x34>
 801429c:	f854 1b04 	ldr.w	r1, [r4], #4
 80142a0:	46e6      	mov	lr, ip
 80142a2:	0c08      	lsrs	r0, r1, #16
 80142a4:	fa1c fc81 	uxtah	ip, ip, r1
 80142a8:	4471      	add	r1, lr
 80142aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80142ae:	b289      	uxth	r1, r1
 80142b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80142b4:	f846 1b04 	str.w	r1, [r6], #4
 80142b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80142bc:	e7dd      	b.n	801427a <__mdiff+0xd6>
 80142be:	3f01      	subs	r7, #1
 80142c0:	e7e7      	b.n	8014292 <__mdiff+0xee>
 80142c2:	bf00      	nop
 80142c4:	08017740 	.word	0x08017740
 80142c8:	08017751 	.word	0x08017751

080142cc <__d2b>:
 80142cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142d0:	460f      	mov	r7, r1
 80142d2:	2101      	movs	r1, #1
 80142d4:	ec59 8b10 	vmov	r8, r9, d0
 80142d8:	4616      	mov	r6, r2
 80142da:	f7ff fccd 	bl	8013c78 <_Balloc>
 80142de:	4604      	mov	r4, r0
 80142e0:	b930      	cbnz	r0, 80142f0 <__d2b+0x24>
 80142e2:	4602      	mov	r2, r0
 80142e4:	4b23      	ldr	r3, [pc, #140]	@ (8014374 <__d2b+0xa8>)
 80142e6:	4824      	ldr	r0, [pc, #144]	@ (8014378 <__d2b+0xac>)
 80142e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80142ec:	f000 fa64 	bl	80147b8 <__assert_func>
 80142f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80142f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142f8:	b10d      	cbz	r5, 80142fe <__d2b+0x32>
 80142fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	f1b8 0300 	subs.w	r3, r8, #0
 8014304:	d023      	beq.n	801434e <__d2b+0x82>
 8014306:	4668      	mov	r0, sp
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	f7ff fd7c 	bl	8013e06 <__lo0bits>
 801430e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014312:	b1d0      	cbz	r0, 801434a <__d2b+0x7e>
 8014314:	f1c0 0320 	rsb	r3, r0, #32
 8014318:	fa02 f303 	lsl.w	r3, r2, r3
 801431c:	430b      	orrs	r3, r1
 801431e:	40c2      	lsrs	r2, r0
 8014320:	6163      	str	r3, [r4, #20]
 8014322:	9201      	str	r2, [sp, #4]
 8014324:	9b01      	ldr	r3, [sp, #4]
 8014326:	61a3      	str	r3, [r4, #24]
 8014328:	2b00      	cmp	r3, #0
 801432a:	bf0c      	ite	eq
 801432c:	2201      	moveq	r2, #1
 801432e:	2202      	movne	r2, #2
 8014330:	6122      	str	r2, [r4, #16]
 8014332:	b1a5      	cbz	r5, 801435e <__d2b+0x92>
 8014334:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014338:	4405      	add	r5, r0
 801433a:	603d      	str	r5, [r7, #0]
 801433c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014340:	6030      	str	r0, [r6, #0]
 8014342:	4620      	mov	r0, r4
 8014344:	b003      	add	sp, #12
 8014346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801434a:	6161      	str	r1, [r4, #20]
 801434c:	e7ea      	b.n	8014324 <__d2b+0x58>
 801434e:	a801      	add	r0, sp, #4
 8014350:	f7ff fd59 	bl	8013e06 <__lo0bits>
 8014354:	9b01      	ldr	r3, [sp, #4]
 8014356:	6163      	str	r3, [r4, #20]
 8014358:	3020      	adds	r0, #32
 801435a:	2201      	movs	r2, #1
 801435c:	e7e8      	b.n	8014330 <__d2b+0x64>
 801435e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014362:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014366:	6038      	str	r0, [r7, #0]
 8014368:	6918      	ldr	r0, [r3, #16]
 801436a:	f7ff fd2d 	bl	8013dc8 <__hi0bits>
 801436e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014372:	e7e5      	b.n	8014340 <__d2b+0x74>
 8014374:	08017740 	.word	0x08017740
 8014378:	08017751 	.word	0x08017751

0801437c <__ssputs_r>:
 801437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014380:	688e      	ldr	r6, [r1, #8]
 8014382:	461f      	mov	r7, r3
 8014384:	42be      	cmp	r6, r7
 8014386:	680b      	ldr	r3, [r1, #0]
 8014388:	4682      	mov	sl, r0
 801438a:	460c      	mov	r4, r1
 801438c:	4690      	mov	r8, r2
 801438e:	d82d      	bhi.n	80143ec <__ssputs_r+0x70>
 8014390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014398:	d026      	beq.n	80143e8 <__ssputs_r+0x6c>
 801439a:	6965      	ldr	r5, [r4, #20]
 801439c:	6909      	ldr	r1, [r1, #16]
 801439e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143a2:	eba3 0901 	sub.w	r9, r3, r1
 80143a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80143aa:	1c7b      	adds	r3, r7, #1
 80143ac:	444b      	add	r3, r9
 80143ae:	106d      	asrs	r5, r5, #1
 80143b0:	429d      	cmp	r5, r3
 80143b2:	bf38      	it	cc
 80143b4:	461d      	movcc	r5, r3
 80143b6:	0553      	lsls	r3, r2, #21
 80143b8:	d527      	bpl.n	801440a <__ssputs_r+0x8e>
 80143ba:	4629      	mov	r1, r5
 80143bc:	f7fd ffac 	bl	8012318 <_malloc_r>
 80143c0:	4606      	mov	r6, r0
 80143c2:	b360      	cbz	r0, 801441e <__ssputs_r+0xa2>
 80143c4:	6921      	ldr	r1, [r4, #16]
 80143c6:	464a      	mov	r2, r9
 80143c8:	f7fe fe1f 	bl	801300a <memcpy>
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80143d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80143d6:	81a3      	strh	r3, [r4, #12]
 80143d8:	6126      	str	r6, [r4, #16]
 80143da:	6165      	str	r5, [r4, #20]
 80143dc:	444e      	add	r6, r9
 80143de:	eba5 0509 	sub.w	r5, r5, r9
 80143e2:	6026      	str	r6, [r4, #0]
 80143e4:	60a5      	str	r5, [r4, #8]
 80143e6:	463e      	mov	r6, r7
 80143e8:	42be      	cmp	r6, r7
 80143ea:	d900      	bls.n	80143ee <__ssputs_r+0x72>
 80143ec:	463e      	mov	r6, r7
 80143ee:	6820      	ldr	r0, [r4, #0]
 80143f0:	4632      	mov	r2, r6
 80143f2:	4641      	mov	r1, r8
 80143f4:	f000 f9c6 	bl	8014784 <memmove>
 80143f8:	68a3      	ldr	r3, [r4, #8]
 80143fa:	1b9b      	subs	r3, r3, r6
 80143fc:	60a3      	str	r3, [r4, #8]
 80143fe:	6823      	ldr	r3, [r4, #0]
 8014400:	4433      	add	r3, r6
 8014402:	6023      	str	r3, [r4, #0]
 8014404:	2000      	movs	r0, #0
 8014406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801440a:	462a      	mov	r2, r5
 801440c:	f000 fa18 	bl	8014840 <_realloc_r>
 8014410:	4606      	mov	r6, r0
 8014412:	2800      	cmp	r0, #0
 8014414:	d1e0      	bne.n	80143d8 <__ssputs_r+0x5c>
 8014416:	6921      	ldr	r1, [r4, #16]
 8014418:	4650      	mov	r0, sl
 801441a:	f7ff fbe3 	bl	8013be4 <_free_r>
 801441e:	230c      	movs	r3, #12
 8014420:	f8ca 3000 	str.w	r3, [sl]
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801442a:	81a3      	strh	r3, [r4, #12]
 801442c:	f04f 30ff 	mov.w	r0, #4294967295
 8014430:	e7e9      	b.n	8014406 <__ssputs_r+0x8a>
	...

08014434 <_svfiprintf_r>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	4698      	mov	r8, r3
 801443a:	898b      	ldrh	r3, [r1, #12]
 801443c:	061b      	lsls	r3, r3, #24
 801443e:	b09d      	sub	sp, #116	@ 0x74
 8014440:	4607      	mov	r7, r0
 8014442:	460d      	mov	r5, r1
 8014444:	4614      	mov	r4, r2
 8014446:	d510      	bpl.n	801446a <_svfiprintf_r+0x36>
 8014448:	690b      	ldr	r3, [r1, #16]
 801444a:	b973      	cbnz	r3, 801446a <_svfiprintf_r+0x36>
 801444c:	2140      	movs	r1, #64	@ 0x40
 801444e:	f7fd ff63 	bl	8012318 <_malloc_r>
 8014452:	6028      	str	r0, [r5, #0]
 8014454:	6128      	str	r0, [r5, #16]
 8014456:	b930      	cbnz	r0, 8014466 <_svfiprintf_r+0x32>
 8014458:	230c      	movs	r3, #12
 801445a:	603b      	str	r3, [r7, #0]
 801445c:	f04f 30ff 	mov.w	r0, #4294967295
 8014460:	b01d      	add	sp, #116	@ 0x74
 8014462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014466:	2340      	movs	r3, #64	@ 0x40
 8014468:	616b      	str	r3, [r5, #20]
 801446a:	2300      	movs	r3, #0
 801446c:	9309      	str	r3, [sp, #36]	@ 0x24
 801446e:	2320      	movs	r3, #32
 8014470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014474:	f8cd 800c 	str.w	r8, [sp, #12]
 8014478:	2330      	movs	r3, #48	@ 0x30
 801447a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014618 <_svfiprintf_r+0x1e4>
 801447e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014482:	f04f 0901 	mov.w	r9, #1
 8014486:	4623      	mov	r3, r4
 8014488:	469a      	mov	sl, r3
 801448a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801448e:	b10a      	cbz	r2, 8014494 <_svfiprintf_r+0x60>
 8014490:	2a25      	cmp	r2, #37	@ 0x25
 8014492:	d1f9      	bne.n	8014488 <_svfiprintf_r+0x54>
 8014494:	ebba 0b04 	subs.w	fp, sl, r4
 8014498:	d00b      	beq.n	80144b2 <_svfiprintf_r+0x7e>
 801449a:	465b      	mov	r3, fp
 801449c:	4622      	mov	r2, r4
 801449e:	4629      	mov	r1, r5
 80144a0:	4638      	mov	r0, r7
 80144a2:	f7ff ff6b 	bl	801437c <__ssputs_r>
 80144a6:	3001      	adds	r0, #1
 80144a8:	f000 80a7 	beq.w	80145fa <_svfiprintf_r+0x1c6>
 80144ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144ae:	445a      	add	r2, fp
 80144b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80144b2:	f89a 3000 	ldrb.w	r3, [sl]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	f000 809f 	beq.w	80145fa <_svfiprintf_r+0x1c6>
 80144bc:	2300      	movs	r3, #0
 80144be:	f04f 32ff 	mov.w	r2, #4294967295
 80144c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144c6:	f10a 0a01 	add.w	sl, sl, #1
 80144ca:	9304      	str	r3, [sp, #16]
 80144cc:	9307      	str	r3, [sp, #28]
 80144ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80144d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80144d4:	4654      	mov	r4, sl
 80144d6:	2205      	movs	r2, #5
 80144d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144dc:	484e      	ldr	r0, [pc, #312]	@ (8014618 <_svfiprintf_r+0x1e4>)
 80144de:	f7eb feff 	bl	80002e0 <memchr>
 80144e2:	9a04      	ldr	r2, [sp, #16]
 80144e4:	b9d8      	cbnz	r0, 801451e <_svfiprintf_r+0xea>
 80144e6:	06d0      	lsls	r0, r2, #27
 80144e8:	bf44      	itt	mi
 80144ea:	2320      	movmi	r3, #32
 80144ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144f0:	0711      	lsls	r1, r2, #28
 80144f2:	bf44      	itt	mi
 80144f4:	232b      	movmi	r3, #43	@ 0x2b
 80144f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144fa:	f89a 3000 	ldrb.w	r3, [sl]
 80144fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8014500:	d015      	beq.n	801452e <_svfiprintf_r+0xfa>
 8014502:	9a07      	ldr	r2, [sp, #28]
 8014504:	4654      	mov	r4, sl
 8014506:	2000      	movs	r0, #0
 8014508:	f04f 0c0a 	mov.w	ip, #10
 801450c:	4621      	mov	r1, r4
 801450e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014512:	3b30      	subs	r3, #48	@ 0x30
 8014514:	2b09      	cmp	r3, #9
 8014516:	d94b      	bls.n	80145b0 <_svfiprintf_r+0x17c>
 8014518:	b1b0      	cbz	r0, 8014548 <_svfiprintf_r+0x114>
 801451a:	9207      	str	r2, [sp, #28]
 801451c:	e014      	b.n	8014548 <_svfiprintf_r+0x114>
 801451e:	eba0 0308 	sub.w	r3, r0, r8
 8014522:	fa09 f303 	lsl.w	r3, r9, r3
 8014526:	4313      	orrs	r3, r2
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	46a2      	mov	sl, r4
 801452c:	e7d2      	b.n	80144d4 <_svfiprintf_r+0xa0>
 801452e:	9b03      	ldr	r3, [sp, #12]
 8014530:	1d19      	adds	r1, r3, #4
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	9103      	str	r1, [sp, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	bfbb      	ittet	lt
 801453a:	425b      	neglt	r3, r3
 801453c:	f042 0202 	orrlt.w	r2, r2, #2
 8014540:	9307      	strge	r3, [sp, #28]
 8014542:	9307      	strlt	r3, [sp, #28]
 8014544:	bfb8      	it	lt
 8014546:	9204      	strlt	r2, [sp, #16]
 8014548:	7823      	ldrb	r3, [r4, #0]
 801454a:	2b2e      	cmp	r3, #46	@ 0x2e
 801454c:	d10a      	bne.n	8014564 <_svfiprintf_r+0x130>
 801454e:	7863      	ldrb	r3, [r4, #1]
 8014550:	2b2a      	cmp	r3, #42	@ 0x2a
 8014552:	d132      	bne.n	80145ba <_svfiprintf_r+0x186>
 8014554:	9b03      	ldr	r3, [sp, #12]
 8014556:	1d1a      	adds	r2, r3, #4
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	9203      	str	r2, [sp, #12]
 801455c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014560:	3402      	adds	r4, #2
 8014562:	9305      	str	r3, [sp, #20]
 8014564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014628 <_svfiprintf_r+0x1f4>
 8014568:	7821      	ldrb	r1, [r4, #0]
 801456a:	2203      	movs	r2, #3
 801456c:	4650      	mov	r0, sl
 801456e:	f7eb feb7 	bl	80002e0 <memchr>
 8014572:	b138      	cbz	r0, 8014584 <_svfiprintf_r+0x150>
 8014574:	9b04      	ldr	r3, [sp, #16]
 8014576:	eba0 000a 	sub.w	r0, r0, sl
 801457a:	2240      	movs	r2, #64	@ 0x40
 801457c:	4082      	lsls	r2, r0
 801457e:	4313      	orrs	r3, r2
 8014580:	3401      	adds	r4, #1
 8014582:	9304      	str	r3, [sp, #16]
 8014584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014588:	4824      	ldr	r0, [pc, #144]	@ (801461c <_svfiprintf_r+0x1e8>)
 801458a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801458e:	2206      	movs	r2, #6
 8014590:	f7eb fea6 	bl	80002e0 <memchr>
 8014594:	2800      	cmp	r0, #0
 8014596:	d036      	beq.n	8014606 <_svfiprintf_r+0x1d2>
 8014598:	4b21      	ldr	r3, [pc, #132]	@ (8014620 <_svfiprintf_r+0x1ec>)
 801459a:	bb1b      	cbnz	r3, 80145e4 <_svfiprintf_r+0x1b0>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	3307      	adds	r3, #7
 80145a0:	f023 0307 	bic.w	r3, r3, #7
 80145a4:	3308      	adds	r3, #8
 80145a6:	9303      	str	r3, [sp, #12]
 80145a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145aa:	4433      	add	r3, r6
 80145ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80145ae:	e76a      	b.n	8014486 <_svfiprintf_r+0x52>
 80145b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80145b4:	460c      	mov	r4, r1
 80145b6:	2001      	movs	r0, #1
 80145b8:	e7a8      	b.n	801450c <_svfiprintf_r+0xd8>
 80145ba:	2300      	movs	r3, #0
 80145bc:	3401      	adds	r4, #1
 80145be:	9305      	str	r3, [sp, #20]
 80145c0:	4619      	mov	r1, r3
 80145c2:	f04f 0c0a 	mov.w	ip, #10
 80145c6:	4620      	mov	r0, r4
 80145c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145cc:	3a30      	subs	r2, #48	@ 0x30
 80145ce:	2a09      	cmp	r2, #9
 80145d0:	d903      	bls.n	80145da <_svfiprintf_r+0x1a6>
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d0c6      	beq.n	8014564 <_svfiprintf_r+0x130>
 80145d6:	9105      	str	r1, [sp, #20]
 80145d8:	e7c4      	b.n	8014564 <_svfiprintf_r+0x130>
 80145da:	fb0c 2101 	mla	r1, ip, r1, r2
 80145de:	4604      	mov	r4, r0
 80145e0:	2301      	movs	r3, #1
 80145e2:	e7f0      	b.n	80145c6 <_svfiprintf_r+0x192>
 80145e4:	ab03      	add	r3, sp, #12
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	462a      	mov	r2, r5
 80145ea:	4b0e      	ldr	r3, [pc, #56]	@ (8014624 <_svfiprintf_r+0x1f0>)
 80145ec:	a904      	add	r1, sp, #16
 80145ee:	4638      	mov	r0, r7
 80145f0:	f7fd ffae 	bl	8012550 <_printf_float>
 80145f4:	1c42      	adds	r2, r0, #1
 80145f6:	4606      	mov	r6, r0
 80145f8:	d1d6      	bne.n	80145a8 <_svfiprintf_r+0x174>
 80145fa:	89ab      	ldrh	r3, [r5, #12]
 80145fc:	065b      	lsls	r3, r3, #25
 80145fe:	f53f af2d 	bmi.w	801445c <_svfiprintf_r+0x28>
 8014602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014604:	e72c      	b.n	8014460 <_svfiprintf_r+0x2c>
 8014606:	ab03      	add	r3, sp, #12
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	462a      	mov	r2, r5
 801460c:	4b05      	ldr	r3, [pc, #20]	@ (8014624 <_svfiprintf_r+0x1f0>)
 801460e:	a904      	add	r1, sp, #16
 8014610:	4638      	mov	r0, r7
 8014612:	f7fe fa25 	bl	8012a60 <_printf_i>
 8014616:	e7ed      	b.n	80145f4 <_svfiprintf_r+0x1c0>
 8014618:	080178a8 	.word	0x080178a8
 801461c:	080178b2 	.word	0x080178b2
 8014620:	08012551 	.word	0x08012551
 8014624:	0801437d 	.word	0x0801437d
 8014628:	080178ae 	.word	0x080178ae

0801462c <__sflush_r>:
 801462c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014634:	0716      	lsls	r6, r2, #28
 8014636:	4605      	mov	r5, r0
 8014638:	460c      	mov	r4, r1
 801463a:	d454      	bmi.n	80146e6 <__sflush_r+0xba>
 801463c:	684b      	ldr	r3, [r1, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	dc02      	bgt.n	8014648 <__sflush_r+0x1c>
 8014642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014644:	2b00      	cmp	r3, #0
 8014646:	dd48      	ble.n	80146da <__sflush_r+0xae>
 8014648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801464a:	2e00      	cmp	r6, #0
 801464c:	d045      	beq.n	80146da <__sflush_r+0xae>
 801464e:	2300      	movs	r3, #0
 8014650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014654:	682f      	ldr	r7, [r5, #0]
 8014656:	6a21      	ldr	r1, [r4, #32]
 8014658:	602b      	str	r3, [r5, #0]
 801465a:	d030      	beq.n	80146be <__sflush_r+0x92>
 801465c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	0759      	lsls	r1, r3, #29
 8014662:	d505      	bpl.n	8014670 <__sflush_r+0x44>
 8014664:	6863      	ldr	r3, [r4, #4]
 8014666:	1ad2      	subs	r2, r2, r3
 8014668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801466a:	b10b      	cbz	r3, 8014670 <__sflush_r+0x44>
 801466c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801466e:	1ad2      	subs	r2, r2, r3
 8014670:	2300      	movs	r3, #0
 8014672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014674:	6a21      	ldr	r1, [r4, #32]
 8014676:	4628      	mov	r0, r5
 8014678:	47b0      	blx	r6
 801467a:	1c43      	adds	r3, r0, #1
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	d106      	bne.n	801468e <__sflush_r+0x62>
 8014680:	6829      	ldr	r1, [r5, #0]
 8014682:	291d      	cmp	r1, #29
 8014684:	d82b      	bhi.n	80146de <__sflush_r+0xb2>
 8014686:	4a2a      	ldr	r2, [pc, #168]	@ (8014730 <__sflush_r+0x104>)
 8014688:	410a      	asrs	r2, r1
 801468a:	07d6      	lsls	r6, r2, #31
 801468c:	d427      	bmi.n	80146de <__sflush_r+0xb2>
 801468e:	2200      	movs	r2, #0
 8014690:	6062      	str	r2, [r4, #4]
 8014692:	04d9      	lsls	r1, r3, #19
 8014694:	6922      	ldr	r2, [r4, #16]
 8014696:	6022      	str	r2, [r4, #0]
 8014698:	d504      	bpl.n	80146a4 <__sflush_r+0x78>
 801469a:	1c42      	adds	r2, r0, #1
 801469c:	d101      	bne.n	80146a2 <__sflush_r+0x76>
 801469e:	682b      	ldr	r3, [r5, #0]
 80146a0:	b903      	cbnz	r3, 80146a4 <__sflush_r+0x78>
 80146a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80146a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146a6:	602f      	str	r7, [r5, #0]
 80146a8:	b1b9      	cbz	r1, 80146da <__sflush_r+0xae>
 80146aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146ae:	4299      	cmp	r1, r3
 80146b0:	d002      	beq.n	80146b8 <__sflush_r+0x8c>
 80146b2:	4628      	mov	r0, r5
 80146b4:	f7ff fa96 	bl	8013be4 <_free_r>
 80146b8:	2300      	movs	r3, #0
 80146ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80146bc:	e00d      	b.n	80146da <__sflush_r+0xae>
 80146be:	2301      	movs	r3, #1
 80146c0:	4628      	mov	r0, r5
 80146c2:	47b0      	blx	r6
 80146c4:	4602      	mov	r2, r0
 80146c6:	1c50      	adds	r0, r2, #1
 80146c8:	d1c9      	bne.n	801465e <__sflush_r+0x32>
 80146ca:	682b      	ldr	r3, [r5, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d0c6      	beq.n	801465e <__sflush_r+0x32>
 80146d0:	2b1d      	cmp	r3, #29
 80146d2:	d001      	beq.n	80146d8 <__sflush_r+0xac>
 80146d4:	2b16      	cmp	r3, #22
 80146d6:	d11e      	bne.n	8014716 <__sflush_r+0xea>
 80146d8:	602f      	str	r7, [r5, #0]
 80146da:	2000      	movs	r0, #0
 80146dc:	e022      	b.n	8014724 <__sflush_r+0xf8>
 80146de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146e2:	b21b      	sxth	r3, r3
 80146e4:	e01b      	b.n	801471e <__sflush_r+0xf2>
 80146e6:	690f      	ldr	r7, [r1, #16]
 80146e8:	2f00      	cmp	r7, #0
 80146ea:	d0f6      	beq.n	80146da <__sflush_r+0xae>
 80146ec:	0793      	lsls	r3, r2, #30
 80146ee:	680e      	ldr	r6, [r1, #0]
 80146f0:	bf08      	it	eq
 80146f2:	694b      	ldreq	r3, [r1, #20]
 80146f4:	600f      	str	r7, [r1, #0]
 80146f6:	bf18      	it	ne
 80146f8:	2300      	movne	r3, #0
 80146fa:	eba6 0807 	sub.w	r8, r6, r7
 80146fe:	608b      	str	r3, [r1, #8]
 8014700:	f1b8 0f00 	cmp.w	r8, #0
 8014704:	dde9      	ble.n	80146da <__sflush_r+0xae>
 8014706:	6a21      	ldr	r1, [r4, #32]
 8014708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801470a:	4643      	mov	r3, r8
 801470c:	463a      	mov	r2, r7
 801470e:	4628      	mov	r0, r5
 8014710:	47b0      	blx	r6
 8014712:	2800      	cmp	r0, #0
 8014714:	dc08      	bgt.n	8014728 <__sflush_r+0xfc>
 8014716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801471a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801471e:	81a3      	strh	r3, [r4, #12]
 8014720:	f04f 30ff 	mov.w	r0, #4294967295
 8014724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014728:	4407      	add	r7, r0
 801472a:	eba8 0800 	sub.w	r8, r8, r0
 801472e:	e7e7      	b.n	8014700 <__sflush_r+0xd4>
 8014730:	dfbffffe 	.word	0xdfbffffe

08014734 <_fflush_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	690b      	ldr	r3, [r1, #16]
 8014738:	4605      	mov	r5, r0
 801473a:	460c      	mov	r4, r1
 801473c:	b913      	cbnz	r3, 8014744 <_fflush_r+0x10>
 801473e:	2500      	movs	r5, #0
 8014740:	4628      	mov	r0, r5
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	b118      	cbz	r0, 801474e <_fflush_r+0x1a>
 8014746:	6a03      	ldr	r3, [r0, #32]
 8014748:	b90b      	cbnz	r3, 801474e <_fflush_r+0x1a>
 801474a:	f7fe fb35 	bl	8012db8 <__sinit>
 801474e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d0f3      	beq.n	801473e <_fflush_r+0xa>
 8014756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014758:	07d0      	lsls	r0, r2, #31
 801475a:	d404      	bmi.n	8014766 <_fflush_r+0x32>
 801475c:	0599      	lsls	r1, r3, #22
 801475e:	d402      	bmi.n	8014766 <_fflush_r+0x32>
 8014760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014762:	f7fe fc50 	bl	8013006 <__retarget_lock_acquire_recursive>
 8014766:	4628      	mov	r0, r5
 8014768:	4621      	mov	r1, r4
 801476a:	f7ff ff5f 	bl	801462c <__sflush_r>
 801476e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014770:	07da      	lsls	r2, r3, #31
 8014772:	4605      	mov	r5, r0
 8014774:	d4e4      	bmi.n	8014740 <_fflush_r+0xc>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	059b      	lsls	r3, r3, #22
 801477a:	d4e1      	bmi.n	8014740 <_fflush_r+0xc>
 801477c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801477e:	f7fe fc43 	bl	8013008 <__retarget_lock_release_recursive>
 8014782:	e7dd      	b.n	8014740 <_fflush_r+0xc>

08014784 <memmove>:
 8014784:	4288      	cmp	r0, r1
 8014786:	b510      	push	{r4, lr}
 8014788:	eb01 0402 	add.w	r4, r1, r2
 801478c:	d902      	bls.n	8014794 <memmove+0x10>
 801478e:	4284      	cmp	r4, r0
 8014790:	4623      	mov	r3, r4
 8014792:	d807      	bhi.n	80147a4 <memmove+0x20>
 8014794:	1e43      	subs	r3, r0, #1
 8014796:	42a1      	cmp	r1, r4
 8014798:	d008      	beq.n	80147ac <memmove+0x28>
 801479a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801479e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147a2:	e7f8      	b.n	8014796 <memmove+0x12>
 80147a4:	4402      	add	r2, r0
 80147a6:	4601      	mov	r1, r0
 80147a8:	428a      	cmp	r2, r1
 80147aa:	d100      	bne.n	80147ae <memmove+0x2a>
 80147ac:	bd10      	pop	{r4, pc}
 80147ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147b6:	e7f7      	b.n	80147a8 <memmove+0x24>

080147b8 <__assert_func>:
 80147b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147ba:	4614      	mov	r4, r2
 80147bc:	461a      	mov	r2, r3
 80147be:	4b09      	ldr	r3, [pc, #36]	@ (80147e4 <__assert_func+0x2c>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	4605      	mov	r5, r0
 80147c4:	68d8      	ldr	r0, [r3, #12]
 80147c6:	b954      	cbnz	r4, 80147de <__assert_func+0x26>
 80147c8:	4b07      	ldr	r3, [pc, #28]	@ (80147e8 <__assert_func+0x30>)
 80147ca:	461c      	mov	r4, r3
 80147cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147d0:	9100      	str	r1, [sp, #0]
 80147d2:	462b      	mov	r3, r5
 80147d4:	4905      	ldr	r1, [pc, #20]	@ (80147ec <__assert_func+0x34>)
 80147d6:	f000 f86f 	bl	80148b8 <fiprintf>
 80147da:	f000 f87f 	bl	80148dc <abort>
 80147de:	4b04      	ldr	r3, [pc, #16]	@ (80147f0 <__assert_func+0x38>)
 80147e0:	e7f4      	b.n	80147cc <__assert_func+0x14>
 80147e2:	bf00      	nop
 80147e4:	24000138 	.word	0x24000138
 80147e8:	080178fe 	.word	0x080178fe
 80147ec:	080178d0 	.word	0x080178d0
 80147f0:	080178c3 	.word	0x080178c3

080147f4 <_calloc_r>:
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	fba1 5402 	umull	r5, r4, r1, r2
 80147fa:	b93c      	cbnz	r4, 801480c <_calloc_r+0x18>
 80147fc:	4629      	mov	r1, r5
 80147fe:	f7fd fd8b 	bl	8012318 <_malloc_r>
 8014802:	4606      	mov	r6, r0
 8014804:	b928      	cbnz	r0, 8014812 <_calloc_r+0x1e>
 8014806:	2600      	movs	r6, #0
 8014808:	4630      	mov	r0, r6
 801480a:	bd70      	pop	{r4, r5, r6, pc}
 801480c:	220c      	movs	r2, #12
 801480e:	6002      	str	r2, [r0, #0]
 8014810:	e7f9      	b.n	8014806 <_calloc_r+0x12>
 8014812:	462a      	mov	r2, r5
 8014814:	4621      	mov	r1, r4
 8014816:	f7fe fb68 	bl	8012eea <memset>
 801481a:	e7f5      	b.n	8014808 <_calloc_r+0x14>

0801481c <__ascii_mbtowc>:
 801481c:	b082      	sub	sp, #8
 801481e:	b901      	cbnz	r1, 8014822 <__ascii_mbtowc+0x6>
 8014820:	a901      	add	r1, sp, #4
 8014822:	b142      	cbz	r2, 8014836 <__ascii_mbtowc+0x1a>
 8014824:	b14b      	cbz	r3, 801483a <__ascii_mbtowc+0x1e>
 8014826:	7813      	ldrb	r3, [r2, #0]
 8014828:	600b      	str	r3, [r1, #0]
 801482a:	7812      	ldrb	r2, [r2, #0]
 801482c:	1e10      	subs	r0, r2, #0
 801482e:	bf18      	it	ne
 8014830:	2001      	movne	r0, #1
 8014832:	b002      	add	sp, #8
 8014834:	4770      	bx	lr
 8014836:	4610      	mov	r0, r2
 8014838:	e7fb      	b.n	8014832 <__ascii_mbtowc+0x16>
 801483a:	f06f 0001 	mvn.w	r0, #1
 801483e:	e7f8      	b.n	8014832 <__ascii_mbtowc+0x16>

08014840 <_realloc_r>:
 8014840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014844:	4680      	mov	r8, r0
 8014846:	4615      	mov	r5, r2
 8014848:	460c      	mov	r4, r1
 801484a:	b921      	cbnz	r1, 8014856 <_realloc_r+0x16>
 801484c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014850:	4611      	mov	r1, r2
 8014852:	f7fd bd61 	b.w	8012318 <_malloc_r>
 8014856:	b92a      	cbnz	r2, 8014864 <_realloc_r+0x24>
 8014858:	f7ff f9c4 	bl	8013be4 <_free_r>
 801485c:	2400      	movs	r4, #0
 801485e:	4620      	mov	r0, r4
 8014860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014864:	f000 f841 	bl	80148ea <_malloc_usable_size_r>
 8014868:	4285      	cmp	r5, r0
 801486a:	4606      	mov	r6, r0
 801486c:	d802      	bhi.n	8014874 <_realloc_r+0x34>
 801486e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014872:	d8f4      	bhi.n	801485e <_realloc_r+0x1e>
 8014874:	4629      	mov	r1, r5
 8014876:	4640      	mov	r0, r8
 8014878:	f7fd fd4e 	bl	8012318 <_malloc_r>
 801487c:	4607      	mov	r7, r0
 801487e:	2800      	cmp	r0, #0
 8014880:	d0ec      	beq.n	801485c <_realloc_r+0x1c>
 8014882:	42b5      	cmp	r5, r6
 8014884:	462a      	mov	r2, r5
 8014886:	4621      	mov	r1, r4
 8014888:	bf28      	it	cs
 801488a:	4632      	movcs	r2, r6
 801488c:	f7fe fbbd 	bl	801300a <memcpy>
 8014890:	4621      	mov	r1, r4
 8014892:	4640      	mov	r0, r8
 8014894:	f7ff f9a6 	bl	8013be4 <_free_r>
 8014898:	463c      	mov	r4, r7
 801489a:	e7e0      	b.n	801485e <_realloc_r+0x1e>

0801489c <__ascii_wctomb>:
 801489c:	4603      	mov	r3, r0
 801489e:	4608      	mov	r0, r1
 80148a0:	b141      	cbz	r1, 80148b4 <__ascii_wctomb+0x18>
 80148a2:	2aff      	cmp	r2, #255	@ 0xff
 80148a4:	d904      	bls.n	80148b0 <__ascii_wctomb+0x14>
 80148a6:	228a      	movs	r2, #138	@ 0x8a
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	f04f 30ff 	mov.w	r0, #4294967295
 80148ae:	4770      	bx	lr
 80148b0:	700a      	strb	r2, [r1, #0]
 80148b2:	2001      	movs	r0, #1
 80148b4:	4770      	bx	lr
	...

080148b8 <fiprintf>:
 80148b8:	b40e      	push	{r1, r2, r3}
 80148ba:	b503      	push	{r0, r1, lr}
 80148bc:	4601      	mov	r1, r0
 80148be:	ab03      	add	r3, sp, #12
 80148c0:	4805      	ldr	r0, [pc, #20]	@ (80148d8 <fiprintf+0x20>)
 80148c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80148c6:	6800      	ldr	r0, [r0, #0]
 80148c8:	9301      	str	r3, [sp, #4]
 80148ca:	f000 f83f 	bl	801494c <_vfiprintf_r>
 80148ce:	b002      	add	sp, #8
 80148d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148d4:	b003      	add	sp, #12
 80148d6:	4770      	bx	lr
 80148d8:	24000138 	.word	0x24000138

080148dc <abort>:
 80148dc:	b508      	push	{r3, lr}
 80148de:	2006      	movs	r0, #6
 80148e0:	f000 fa08 	bl	8014cf4 <raise>
 80148e4:	2001      	movs	r0, #1
 80148e6:	f7ec ffc9 	bl	800187c <_exit>

080148ea <_malloc_usable_size_r>:
 80148ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148ee:	1f18      	subs	r0, r3, #4
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	bfbc      	itt	lt
 80148f4:	580b      	ldrlt	r3, [r1, r0]
 80148f6:	18c0      	addlt	r0, r0, r3
 80148f8:	4770      	bx	lr

080148fa <__sfputc_r>:
 80148fa:	6893      	ldr	r3, [r2, #8]
 80148fc:	3b01      	subs	r3, #1
 80148fe:	2b00      	cmp	r3, #0
 8014900:	b410      	push	{r4}
 8014902:	6093      	str	r3, [r2, #8]
 8014904:	da08      	bge.n	8014918 <__sfputc_r+0x1e>
 8014906:	6994      	ldr	r4, [r2, #24]
 8014908:	42a3      	cmp	r3, r4
 801490a:	db01      	blt.n	8014910 <__sfputc_r+0x16>
 801490c:	290a      	cmp	r1, #10
 801490e:	d103      	bne.n	8014918 <__sfputc_r+0x1e>
 8014910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014914:	f000 b932 	b.w	8014b7c <__swbuf_r>
 8014918:	6813      	ldr	r3, [r2, #0]
 801491a:	1c58      	adds	r0, r3, #1
 801491c:	6010      	str	r0, [r2, #0]
 801491e:	7019      	strb	r1, [r3, #0]
 8014920:	4608      	mov	r0, r1
 8014922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014926:	4770      	bx	lr

08014928 <__sfputs_r>:
 8014928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801492a:	4606      	mov	r6, r0
 801492c:	460f      	mov	r7, r1
 801492e:	4614      	mov	r4, r2
 8014930:	18d5      	adds	r5, r2, r3
 8014932:	42ac      	cmp	r4, r5
 8014934:	d101      	bne.n	801493a <__sfputs_r+0x12>
 8014936:	2000      	movs	r0, #0
 8014938:	e007      	b.n	801494a <__sfputs_r+0x22>
 801493a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801493e:	463a      	mov	r2, r7
 8014940:	4630      	mov	r0, r6
 8014942:	f7ff ffda 	bl	80148fa <__sfputc_r>
 8014946:	1c43      	adds	r3, r0, #1
 8014948:	d1f3      	bne.n	8014932 <__sfputs_r+0xa>
 801494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801494c <_vfiprintf_r>:
 801494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014950:	460d      	mov	r5, r1
 8014952:	b09d      	sub	sp, #116	@ 0x74
 8014954:	4614      	mov	r4, r2
 8014956:	4698      	mov	r8, r3
 8014958:	4606      	mov	r6, r0
 801495a:	b118      	cbz	r0, 8014964 <_vfiprintf_r+0x18>
 801495c:	6a03      	ldr	r3, [r0, #32]
 801495e:	b90b      	cbnz	r3, 8014964 <_vfiprintf_r+0x18>
 8014960:	f7fe fa2a 	bl	8012db8 <__sinit>
 8014964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014966:	07d9      	lsls	r1, r3, #31
 8014968:	d405      	bmi.n	8014976 <_vfiprintf_r+0x2a>
 801496a:	89ab      	ldrh	r3, [r5, #12]
 801496c:	059a      	lsls	r2, r3, #22
 801496e:	d402      	bmi.n	8014976 <_vfiprintf_r+0x2a>
 8014970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014972:	f7fe fb48 	bl	8013006 <__retarget_lock_acquire_recursive>
 8014976:	89ab      	ldrh	r3, [r5, #12]
 8014978:	071b      	lsls	r3, r3, #28
 801497a:	d501      	bpl.n	8014980 <_vfiprintf_r+0x34>
 801497c:	692b      	ldr	r3, [r5, #16]
 801497e:	b99b      	cbnz	r3, 80149a8 <_vfiprintf_r+0x5c>
 8014980:	4629      	mov	r1, r5
 8014982:	4630      	mov	r0, r6
 8014984:	f000 f938 	bl	8014bf8 <__swsetup_r>
 8014988:	b170      	cbz	r0, 80149a8 <_vfiprintf_r+0x5c>
 801498a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801498c:	07dc      	lsls	r4, r3, #31
 801498e:	d504      	bpl.n	801499a <_vfiprintf_r+0x4e>
 8014990:	f04f 30ff 	mov.w	r0, #4294967295
 8014994:	b01d      	add	sp, #116	@ 0x74
 8014996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499a:	89ab      	ldrh	r3, [r5, #12]
 801499c:	0598      	lsls	r0, r3, #22
 801499e:	d4f7      	bmi.n	8014990 <_vfiprintf_r+0x44>
 80149a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80149a2:	f7fe fb31 	bl	8013008 <__retarget_lock_release_recursive>
 80149a6:	e7f3      	b.n	8014990 <_vfiprintf_r+0x44>
 80149a8:	2300      	movs	r3, #0
 80149aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80149ac:	2320      	movs	r3, #32
 80149ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80149b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80149b6:	2330      	movs	r3, #48	@ 0x30
 80149b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014b68 <_vfiprintf_r+0x21c>
 80149bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80149c0:	f04f 0901 	mov.w	r9, #1
 80149c4:	4623      	mov	r3, r4
 80149c6:	469a      	mov	sl, r3
 80149c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80149cc:	b10a      	cbz	r2, 80149d2 <_vfiprintf_r+0x86>
 80149ce:	2a25      	cmp	r2, #37	@ 0x25
 80149d0:	d1f9      	bne.n	80149c6 <_vfiprintf_r+0x7a>
 80149d2:	ebba 0b04 	subs.w	fp, sl, r4
 80149d6:	d00b      	beq.n	80149f0 <_vfiprintf_r+0xa4>
 80149d8:	465b      	mov	r3, fp
 80149da:	4622      	mov	r2, r4
 80149dc:	4629      	mov	r1, r5
 80149de:	4630      	mov	r0, r6
 80149e0:	f7ff ffa2 	bl	8014928 <__sfputs_r>
 80149e4:	3001      	adds	r0, #1
 80149e6:	f000 80a7 	beq.w	8014b38 <_vfiprintf_r+0x1ec>
 80149ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80149ec:	445a      	add	r2, fp
 80149ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80149f0:	f89a 3000 	ldrb.w	r3, [sl]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	f000 809f 	beq.w	8014b38 <_vfiprintf_r+0x1ec>
 80149fa:	2300      	movs	r3, #0
 80149fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a04:	f10a 0a01 	add.w	sl, sl, #1
 8014a08:	9304      	str	r3, [sp, #16]
 8014a0a:	9307      	str	r3, [sp, #28]
 8014a0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014a10:	931a      	str	r3, [sp, #104]	@ 0x68
 8014a12:	4654      	mov	r4, sl
 8014a14:	2205      	movs	r2, #5
 8014a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a1a:	4853      	ldr	r0, [pc, #332]	@ (8014b68 <_vfiprintf_r+0x21c>)
 8014a1c:	f7eb fc60 	bl	80002e0 <memchr>
 8014a20:	9a04      	ldr	r2, [sp, #16]
 8014a22:	b9d8      	cbnz	r0, 8014a5c <_vfiprintf_r+0x110>
 8014a24:	06d1      	lsls	r1, r2, #27
 8014a26:	bf44      	itt	mi
 8014a28:	2320      	movmi	r3, #32
 8014a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a2e:	0713      	lsls	r3, r2, #28
 8014a30:	bf44      	itt	mi
 8014a32:	232b      	movmi	r3, #43	@ 0x2b
 8014a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014a38:	f89a 3000 	ldrb.w	r3, [sl]
 8014a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a3e:	d015      	beq.n	8014a6c <_vfiprintf_r+0x120>
 8014a40:	9a07      	ldr	r2, [sp, #28]
 8014a42:	4654      	mov	r4, sl
 8014a44:	2000      	movs	r0, #0
 8014a46:	f04f 0c0a 	mov.w	ip, #10
 8014a4a:	4621      	mov	r1, r4
 8014a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a50:	3b30      	subs	r3, #48	@ 0x30
 8014a52:	2b09      	cmp	r3, #9
 8014a54:	d94b      	bls.n	8014aee <_vfiprintf_r+0x1a2>
 8014a56:	b1b0      	cbz	r0, 8014a86 <_vfiprintf_r+0x13a>
 8014a58:	9207      	str	r2, [sp, #28]
 8014a5a:	e014      	b.n	8014a86 <_vfiprintf_r+0x13a>
 8014a5c:	eba0 0308 	sub.w	r3, r0, r8
 8014a60:	fa09 f303 	lsl.w	r3, r9, r3
 8014a64:	4313      	orrs	r3, r2
 8014a66:	9304      	str	r3, [sp, #16]
 8014a68:	46a2      	mov	sl, r4
 8014a6a:	e7d2      	b.n	8014a12 <_vfiprintf_r+0xc6>
 8014a6c:	9b03      	ldr	r3, [sp, #12]
 8014a6e:	1d19      	adds	r1, r3, #4
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	9103      	str	r1, [sp, #12]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	bfbb      	ittet	lt
 8014a78:	425b      	neglt	r3, r3
 8014a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8014a7e:	9307      	strge	r3, [sp, #28]
 8014a80:	9307      	strlt	r3, [sp, #28]
 8014a82:	bfb8      	it	lt
 8014a84:	9204      	strlt	r2, [sp, #16]
 8014a86:	7823      	ldrb	r3, [r4, #0]
 8014a88:	2b2e      	cmp	r3, #46	@ 0x2e
 8014a8a:	d10a      	bne.n	8014aa2 <_vfiprintf_r+0x156>
 8014a8c:	7863      	ldrb	r3, [r4, #1]
 8014a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014a90:	d132      	bne.n	8014af8 <_vfiprintf_r+0x1ac>
 8014a92:	9b03      	ldr	r3, [sp, #12]
 8014a94:	1d1a      	adds	r2, r3, #4
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	9203      	str	r2, [sp, #12]
 8014a9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014a9e:	3402      	adds	r4, #2
 8014aa0:	9305      	str	r3, [sp, #20]
 8014aa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014b78 <_vfiprintf_r+0x22c>
 8014aa6:	7821      	ldrb	r1, [r4, #0]
 8014aa8:	2203      	movs	r2, #3
 8014aaa:	4650      	mov	r0, sl
 8014aac:	f7eb fc18 	bl	80002e0 <memchr>
 8014ab0:	b138      	cbz	r0, 8014ac2 <_vfiprintf_r+0x176>
 8014ab2:	9b04      	ldr	r3, [sp, #16]
 8014ab4:	eba0 000a 	sub.w	r0, r0, sl
 8014ab8:	2240      	movs	r2, #64	@ 0x40
 8014aba:	4082      	lsls	r2, r0
 8014abc:	4313      	orrs	r3, r2
 8014abe:	3401      	adds	r4, #1
 8014ac0:	9304      	str	r3, [sp, #16]
 8014ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ac6:	4829      	ldr	r0, [pc, #164]	@ (8014b6c <_vfiprintf_r+0x220>)
 8014ac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014acc:	2206      	movs	r2, #6
 8014ace:	f7eb fc07 	bl	80002e0 <memchr>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d03f      	beq.n	8014b56 <_vfiprintf_r+0x20a>
 8014ad6:	4b26      	ldr	r3, [pc, #152]	@ (8014b70 <_vfiprintf_r+0x224>)
 8014ad8:	bb1b      	cbnz	r3, 8014b22 <_vfiprintf_r+0x1d6>
 8014ada:	9b03      	ldr	r3, [sp, #12]
 8014adc:	3307      	adds	r3, #7
 8014ade:	f023 0307 	bic.w	r3, r3, #7
 8014ae2:	3308      	adds	r3, #8
 8014ae4:	9303      	str	r3, [sp, #12]
 8014ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ae8:	443b      	add	r3, r7
 8014aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8014aec:	e76a      	b.n	80149c4 <_vfiprintf_r+0x78>
 8014aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8014af2:	460c      	mov	r4, r1
 8014af4:	2001      	movs	r0, #1
 8014af6:	e7a8      	b.n	8014a4a <_vfiprintf_r+0xfe>
 8014af8:	2300      	movs	r3, #0
 8014afa:	3401      	adds	r4, #1
 8014afc:	9305      	str	r3, [sp, #20]
 8014afe:	4619      	mov	r1, r3
 8014b00:	f04f 0c0a 	mov.w	ip, #10
 8014b04:	4620      	mov	r0, r4
 8014b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b0a:	3a30      	subs	r2, #48	@ 0x30
 8014b0c:	2a09      	cmp	r2, #9
 8014b0e:	d903      	bls.n	8014b18 <_vfiprintf_r+0x1cc>
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d0c6      	beq.n	8014aa2 <_vfiprintf_r+0x156>
 8014b14:	9105      	str	r1, [sp, #20]
 8014b16:	e7c4      	b.n	8014aa2 <_vfiprintf_r+0x156>
 8014b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	2301      	movs	r3, #1
 8014b20:	e7f0      	b.n	8014b04 <_vfiprintf_r+0x1b8>
 8014b22:	ab03      	add	r3, sp, #12
 8014b24:	9300      	str	r3, [sp, #0]
 8014b26:	462a      	mov	r2, r5
 8014b28:	4b12      	ldr	r3, [pc, #72]	@ (8014b74 <_vfiprintf_r+0x228>)
 8014b2a:	a904      	add	r1, sp, #16
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	f7fd fd0f 	bl	8012550 <_printf_float>
 8014b32:	4607      	mov	r7, r0
 8014b34:	1c78      	adds	r0, r7, #1
 8014b36:	d1d6      	bne.n	8014ae6 <_vfiprintf_r+0x19a>
 8014b38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b3a:	07d9      	lsls	r1, r3, #31
 8014b3c:	d405      	bmi.n	8014b4a <_vfiprintf_r+0x1fe>
 8014b3e:	89ab      	ldrh	r3, [r5, #12]
 8014b40:	059a      	lsls	r2, r3, #22
 8014b42:	d402      	bmi.n	8014b4a <_vfiprintf_r+0x1fe>
 8014b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b46:	f7fe fa5f 	bl	8013008 <__retarget_lock_release_recursive>
 8014b4a:	89ab      	ldrh	r3, [r5, #12]
 8014b4c:	065b      	lsls	r3, r3, #25
 8014b4e:	f53f af1f 	bmi.w	8014990 <_vfiprintf_r+0x44>
 8014b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b54:	e71e      	b.n	8014994 <_vfiprintf_r+0x48>
 8014b56:	ab03      	add	r3, sp, #12
 8014b58:	9300      	str	r3, [sp, #0]
 8014b5a:	462a      	mov	r2, r5
 8014b5c:	4b05      	ldr	r3, [pc, #20]	@ (8014b74 <_vfiprintf_r+0x228>)
 8014b5e:	a904      	add	r1, sp, #16
 8014b60:	4630      	mov	r0, r6
 8014b62:	f7fd ff7d 	bl	8012a60 <_printf_i>
 8014b66:	e7e4      	b.n	8014b32 <_vfiprintf_r+0x1e6>
 8014b68:	080178a8 	.word	0x080178a8
 8014b6c:	080178b2 	.word	0x080178b2
 8014b70:	08012551 	.word	0x08012551
 8014b74:	08014929 	.word	0x08014929
 8014b78:	080178ae 	.word	0x080178ae

08014b7c <__swbuf_r>:
 8014b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b7e:	460e      	mov	r6, r1
 8014b80:	4614      	mov	r4, r2
 8014b82:	4605      	mov	r5, r0
 8014b84:	b118      	cbz	r0, 8014b8e <__swbuf_r+0x12>
 8014b86:	6a03      	ldr	r3, [r0, #32]
 8014b88:	b90b      	cbnz	r3, 8014b8e <__swbuf_r+0x12>
 8014b8a:	f7fe f915 	bl	8012db8 <__sinit>
 8014b8e:	69a3      	ldr	r3, [r4, #24]
 8014b90:	60a3      	str	r3, [r4, #8]
 8014b92:	89a3      	ldrh	r3, [r4, #12]
 8014b94:	071a      	lsls	r2, r3, #28
 8014b96:	d501      	bpl.n	8014b9c <__swbuf_r+0x20>
 8014b98:	6923      	ldr	r3, [r4, #16]
 8014b9a:	b943      	cbnz	r3, 8014bae <__swbuf_r+0x32>
 8014b9c:	4621      	mov	r1, r4
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f000 f82a 	bl	8014bf8 <__swsetup_r>
 8014ba4:	b118      	cbz	r0, 8014bae <__swbuf_r+0x32>
 8014ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8014baa:	4638      	mov	r0, r7
 8014bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bae:	6823      	ldr	r3, [r4, #0]
 8014bb0:	6922      	ldr	r2, [r4, #16]
 8014bb2:	1a98      	subs	r0, r3, r2
 8014bb4:	6963      	ldr	r3, [r4, #20]
 8014bb6:	b2f6      	uxtb	r6, r6
 8014bb8:	4283      	cmp	r3, r0
 8014bba:	4637      	mov	r7, r6
 8014bbc:	dc05      	bgt.n	8014bca <__swbuf_r+0x4e>
 8014bbe:	4621      	mov	r1, r4
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	f7ff fdb7 	bl	8014734 <_fflush_r>
 8014bc6:	2800      	cmp	r0, #0
 8014bc8:	d1ed      	bne.n	8014ba6 <__swbuf_r+0x2a>
 8014bca:	68a3      	ldr	r3, [r4, #8]
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	60a3      	str	r3, [r4, #8]
 8014bd0:	6823      	ldr	r3, [r4, #0]
 8014bd2:	1c5a      	adds	r2, r3, #1
 8014bd4:	6022      	str	r2, [r4, #0]
 8014bd6:	701e      	strb	r6, [r3, #0]
 8014bd8:	6962      	ldr	r2, [r4, #20]
 8014bda:	1c43      	adds	r3, r0, #1
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d004      	beq.n	8014bea <__swbuf_r+0x6e>
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	07db      	lsls	r3, r3, #31
 8014be4:	d5e1      	bpl.n	8014baa <__swbuf_r+0x2e>
 8014be6:	2e0a      	cmp	r6, #10
 8014be8:	d1df      	bne.n	8014baa <__swbuf_r+0x2e>
 8014bea:	4621      	mov	r1, r4
 8014bec:	4628      	mov	r0, r5
 8014bee:	f7ff fda1 	bl	8014734 <_fflush_r>
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	d0d9      	beq.n	8014baa <__swbuf_r+0x2e>
 8014bf6:	e7d6      	b.n	8014ba6 <__swbuf_r+0x2a>

08014bf8 <__swsetup_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4b29      	ldr	r3, [pc, #164]	@ (8014ca0 <__swsetup_r+0xa8>)
 8014bfc:	4605      	mov	r5, r0
 8014bfe:	6818      	ldr	r0, [r3, #0]
 8014c00:	460c      	mov	r4, r1
 8014c02:	b118      	cbz	r0, 8014c0c <__swsetup_r+0x14>
 8014c04:	6a03      	ldr	r3, [r0, #32]
 8014c06:	b90b      	cbnz	r3, 8014c0c <__swsetup_r+0x14>
 8014c08:	f7fe f8d6 	bl	8012db8 <__sinit>
 8014c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c10:	0719      	lsls	r1, r3, #28
 8014c12:	d422      	bmi.n	8014c5a <__swsetup_r+0x62>
 8014c14:	06da      	lsls	r2, r3, #27
 8014c16:	d407      	bmi.n	8014c28 <__swsetup_r+0x30>
 8014c18:	2209      	movs	r2, #9
 8014c1a:	602a      	str	r2, [r5, #0]
 8014c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c20:	81a3      	strh	r3, [r4, #12]
 8014c22:	f04f 30ff 	mov.w	r0, #4294967295
 8014c26:	e033      	b.n	8014c90 <__swsetup_r+0x98>
 8014c28:	0758      	lsls	r0, r3, #29
 8014c2a:	d512      	bpl.n	8014c52 <__swsetup_r+0x5a>
 8014c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c2e:	b141      	cbz	r1, 8014c42 <__swsetup_r+0x4a>
 8014c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c34:	4299      	cmp	r1, r3
 8014c36:	d002      	beq.n	8014c3e <__swsetup_r+0x46>
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f7fe ffd3 	bl	8013be4 <_free_r>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c42:	89a3      	ldrh	r3, [r4, #12]
 8014c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c48:	81a3      	strh	r3, [r4, #12]
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	6063      	str	r3, [r4, #4]
 8014c4e:	6923      	ldr	r3, [r4, #16]
 8014c50:	6023      	str	r3, [r4, #0]
 8014c52:	89a3      	ldrh	r3, [r4, #12]
 8014c54:	f043 0308 	orr.w	r3, r3, #8
 8014c58:	81a3      	strh	r3, [r4, #12]
 8014c5a:	6923      	ldr	r3, [r4, #16]
 8014c5c:	b94b      	cbnz	r3, 8014c72 <__swsetup_r+0x7a>
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c68:	d003      	beq.n	8014c72 <__swsetup_r+0x7a>
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f000 f883 	bl	8014d78 <__smakebuf_r>
 8014c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c76:	f013 0201 	ands.w	r2, r3, #1
 8014c7a:	d00a      	beq.n	8014c92 <__swsetup_r+0x9a>
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	60a2      	str	r2, [r4, #8]
 8014c80:	6962      	ldr	r2, [r4, #20]
 8014c82:	4252      	negs	r2, r2
 8014c84:	61a2      	str	r2, [r4, #24]
 8014c86:	6922      	ldr	r2, [r4, #16]
 8014c88:	b942      	cbnz	r2, 8014c9c <__swsetup_r+0xa4>
 8014c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014c8e:	d1c5      	bne.n	8014c1c <__swsetup_r+0x24>
 8014c90:	bd38      	pop	{r3, r4, r5, pc}
 8014c92:	0799      	lsls	r1, r3, #30
 8014c94:	bf58      	it	pl
 8014c96:	6962      	ldrpl	r2, [r4, #20]
 8014c98:	60a2      	str	r2, [r4, #8]
 8014c9a:	e7f4      	b.n	8014c86 <__swsetup_r+0x8e>
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	e7f7      	b.n	8014c90 <__swsetup_r+0x98>
 8014ca0:	24000138 	.word	0x24000138

08014ca4 <_raise_r>:
 8014ca4:	291f      	cmp	r1, #31
 8014ca6:	b538      	push	{r3, r4, r5, lr}
 8014ca8:	4605      	mov	r5, r0
 8014caa:	460c      	mov	r4, r1
 8014cac:	d904      	bls.n	8014cb8 <_raise_r+0x14>
 8014cae:	2316      	movs	r3, #22
 8014cb0:	6003      	str	r3, [r0, #0]
 8014cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014cba:	b112      	cbz	r2, 8014cc2 <_raise_r+0x1e>
 8014cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cc0:	b94b      	cbnz	r3, 8014cd6 <_raise_r+0x32>
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f000 f830 	bl	8014d28 <_getpid_r>
 8014cc8:	4622      	mov	r2, r4
 8014cca:	4601      	mov	r1, r0
 8014ccc:	4628      	mov	r0, r5
 8014cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cd2:	f000 b817 	b.w	8014d04 <_kill_r>
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d00a      	beq.n	8014cf0 <_raise_r+0x4c>
 8014cda:	1c59      	adds	r1, r3, #1
 8014cdc:	d103      	bne.n	8014ce6 <_raise_r+0x42>
 8014cde:	2316      	movs	r3, #22
 8014ce0:	6003      	str	r3, [r0, #0]
 8014ce2:	2001      	movs	r0, #1
 8014ce4:	e7e7      	b.n	8014cb6 <_raise_r+0x12>
 8014ce6:	2100      	movs	r1, #0
 8014ce8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014cec:	4620      	mov	r0, r4
 8014cee:	4798      	blx	r3
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	e7e0      	b.n	8014cb6 <_raise_r+0x12>

08014cf4 <raise>:
 8014cf4:	4b02      	ldr	r3, [pc, #8]	@ (8014d00 <raise+0xc>)
 8014cf6:	4601      	mov	r1, r0
 8014cf8:	6818      	ldr	r0, [r3, #0]
 8014cfa:	f7ff bfd3 	b.w	8014ca4 <_raise_r>
 8014cfe:	bf00      	nop
 8014d00:	24000138 	.word	0x24000138

08014d04 <_kill_r>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	4d07      	ldr	r5, [pc, #28]	@ (8014d24 <_kill_r+0x20>)
 8014d08:	2300      	movs	r3, #0
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	4611      	mov	r1, r2
 8014d10:	602b      	str	r3, [r5, #0]
 8014d12:	f7ec fda3 	bl	800185c <_kill>
 8014d16:	1c43      	adds	r3, r0, #1
 8014d18:	d102      	bne.n	8014d20 <_kill_r+0x1c>
 8014d1a:	682b      	ldr	r3, [r5, #0]
 8014d1c:	b103      	cbz	r3, 8014d20 <_kill_r+0x1c>
 8014d1e:	6023      	str	r3, [r4, #0]
 8014d20:	bd38      	pop	{r3, r4, r5, pc}
 8014d22:	bf00      	nop
 8014d24:	2400984c 	.word	0x2400984c

08014d28 <_getpid_r>:
 8014d28:	f7ec bd90 	b.w	800184c <_getpid>

08014d2c <__swhatbuf_r>:
 8014d2c:	b570      	push	{r4, r5, r6, lr}
 8014d2e:	460c      	mov	r4, r1
 8014d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d34:	2900      	cmp	r1, #0
 8014d36:	b096      	sub	sp, #88	@ 0x58
 8014d38:	4615      	mov	r5, r2
 8014d3a:	461e      	mov	r6, r3
 8014d3c:	da0d      	bge.n	8014d5a <__swhatbuf_r+0x2e>
 8014d3e:	89a3      	ldrh	r3, [r4, #12]
 8014d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014d44:	f04f 0100 	mov.w	r1, #0
 8014d48:	bf14      	ite	ne
 8014d4a:	2340      	movne	r3, #64	@ 0x40
 8014d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014d50:	2000      	movs	r0, #0
 8014d52:	6031      	str	r1, [r6, #0]
 8014d54:	602b      	str	r3, [r5, #0]
 8014d56:	b016      	add	sp, #88	@ 0x58
 8014d58:	bd70      	pop	{r4, r5, r6, pc}
 8014d5a:	466a      	mov	r2, sp
 8014d5c:	f000 f848 	bl	8014df0 <_fstat_r>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	dbec      	blt.n	8014d3e <__swhatbuf_r+0x12>
 8014d64:	9901      	ldr	r1, [sp, #4]
 8014d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014d6e:	4259      	negs	r1, r3
 8014d70:	4159      	adcs	r1, r3
 8014d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014d76:	e7eb      	b.n	8014d50 <__swhatbuf_r+0x24>

08014d78 <__smakebuf_r>:
 8014d78:	898b      	ldrh	r3, [r1, #12]
 8014d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d7c:	079d      	lsls	r5, r3, #30
 8014d7e:	4606      	mov	r6, r0
 8014d80:	460c      	mov	r4, r1
 8014d82:	d507      	bpl.n	8014d94 <__smakebuf_r+0x1c>
 8014d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	6123      	str	r3, [r4, #16]
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	6163      	str	r3, [r4, #20]
 8014d90:	b003      	add	sp, #12
 8014d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d94:	ab01      	add	r3, sp, #4
 8014d96:	466a      	mov	r2, sp
 8014d98:	f7ff ffc8 	bl	8014d2c <__swhatbuf_r>
 8014d9c:	9f00      	ldr	r7, [sp, #0]
 8014d9e:	4605      	mov	r5, r0
 8014da0:	4639      	mov	r1, r7
 8014da2:	4630      	mov	r0, r6
 8014da4:	f7fd fab8 	bl	8012318 <_malloc_r>
 8014da8:	b948      	cbnz	r0, 8014dbe <__smakebuf_r+0x46>
 8014daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dae:	059a      	lsls	r2, r3, #22
 8014db0:	d4ee      	bmi.n	8014d90 <__smakebuf_r+0x18>
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	f043 0302 	orr.w	r3, r3, #2
 8014dba:	81a3      	strh	r3, [r4, #12]
 8014dbc:	e7e2      	b.n	8014d84 <__smakebuf_r+0xc>
 8014dbe:	89a3      	ldrh	r3, [r4, #12]
 8014dc0:	6020      	str	r0, [r4, #0]
 8014dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014dc6:	81a3      	strh	r3, [r4, #12]
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014dce:	b15b      	cbz	r3, 8014de8 <__smakebuf_r+0x70>
 8014dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	f000 f81d 	bl	8014e14 <_isatty_r>
 8014dda:	b128      	cbz	r0, 8014de8 <__smakebuf_r+0x70>
 8014ddc:	89a3      	ldrh	r3, [r4, #12]
 8014dde:	f023 0303 	bic.w	r3, r3, #3
 8014de2:	f043 0301 	orr.w	r3, r3, #1
 8014de6:	81a3      	strh	r3, [r4, #12]
 8014de8:	89a3      	ldrh	r3, [r4, #12]
 8014dea:	431d      	orrs	r5, r3
 8014dec:	81a5      	strh	r5, [r4, #12]
 8014dee:	e7cf      	b.n	8014d90 <__smakebuf_r+0x18>

08014df0 <_fstat_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	4d07      	ldr	r5, [pc, #28]	@ (8014e10 <_fstat_r+0x20>)
 8014df4:	2300      	movs	r3, #0
 8014df6:	4604      	mov	r4, r0
 8014df8:	4608      	mov	r0, r1
 8014dfa:	4611      	mov	r1, r2
 8014dfc:	602b      	str	r3, [r5, #0]
 8014dfe:	f7ec fd8d 	bl	800191c <_fstat>
 8014e02:	1c43      	adds	r3, r0, #1
 8014e04:	d102      	bne.n	8014e0c <_fstat_r+0x1c>
 8014e06:	682b      	ldr	r3, [r5, #0]
 8014e08:	b103      	cbz	r3, 8014e0c <_fstat_r+0x1c>
 8014e0a:	6023      	str	r3, [r4, #0]
 8014e0c:	bd38      	pop	{r3, r4, r5, pc}
 8014e0e:	bf00      	nop
 8014e10:	2400984c 	.word	0x2400984c

08014e14 <_isatty_r>:
 8014e14:	b538      	push	{r3, r4, r5, lr}
 8014e16:	4d06      	ldr	r5, [pc, #24]	@ (8014e30 <_isatty_r+0x1c>)
 8014e18:	2300      	movs	r3, #0
 8014e1a:	4604      	mov	r4, r0
 8014e1c:	4608      	mov	r0, r1
 8014e1e:	602b      	str	r3, [r5, #0]
 8014e20:	f7ec fd8c 	bl	800193c <_isatty>
 8014e24:	1c43      	adds	r3, r0, #1
 8014e26:	d102      	bne.n	8014e2e <_isatty_r+0x1a>
 8014e28:	682b      	ldr	r3, [r5, #0]
 8014e2a:	b103      	cbz	r3, 8014e2e <_isatty_r+0x1a>
 8014e2c:	6023      	str	r3, [r4, #0]
 8014e2e:	bd38      	pop	{r3, r4, r5, pc}
 8014e30:	2400984c 	.word	0x2400984c
 8014e34:	00000000 	.word	0x00000000

08014e38 <fmod>:
 8014e38:	b508      	push	{r3, lr}
 8014e3a:	ed2d 8b04 	vpush	{d8-d9}
 8014e3e:	eeb0 9b40 	vmov.f64	d9, d0
 8014e42:	eeb0 8b41 	vmov.f64	d8, d1
 8014e46:	f000 f8ef 	bl	8015028 <__ieee754_fmod>
 8014e4a:	eeb4 9b48 	vcmp.f64	d9, d8
 8014e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e52:	d60c      	bvs.n	8014e6e <fmod+0x36>
 8014e54:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 8014e78 <fmod+0x40>
 8014e58:	eeb4 8b49 	vcmp.f64	d8, d9
 8014e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e60:	d105      	bne.n	8014e6e <fmod+0x36>
 8014e62:	f7fe f8a5 	bl	8012fb0 <__errno>
 8014e66:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014e6a:	2321      	movs	r3, #33	@ 0x21
 8014e6c:	6003      	str	r3, [r0, #0]
 8014e6e:	ecbd 8b04 	vpop	{d8-d9}
 8014e72:	bd08      	pop	{r3, pc}
 8014e74:	f3af 8000 	nop.w
	...

08014e80 <sqrt>:
 8014e80:	b508      	push	{r3, lr}
 8014e82:	ed2d 8b04 	vpush	{d8-d9}
 8014e86:	eeb0 8b40 	vmov.f64	d8, d0
 8014e8a:	f000 f8c7 	bl	801501c <__ieee754_sqrt>
 8014e8e:	eeb4 8b48 	vcmp.f64	d8, d8
 8014e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e96:	d60c      	bvs.n	8014eb2 <sqrt+0x32>
 8014e98:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8014eb8 <sqrt+0x38>
 8014e9c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea4:	d505      	bpl.n	8014eb2 <sqrt+0x32>
 8014ea6:	f7fe f883 	bl	8012fb0 <__errno>
 8014eaa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014eae:	2321      	movs	r3, #33	@ 0x21
 8014eb0:	6003      	str	r3, [r0, #0]
 8014eb2:	ecbd 8b04 	vpop	{d8-d9}
 8014eb6:	bd08      	pop	{r3, pc}
	...

08014ec0 <asinf>:
 8014ec0:	b508      	push	{r3, lr}
 8014ec2:	ed2d 8b02 	vpush	{d8}
 8014ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8014eca:	f000 f9b9 	bl	8015240 <__ieee754_asinf>
 8014ece:	eeb4 8a48 	vcmp.f32	s16, s16
 8014ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed6:	eef0 8a40 	vmov.f32	s17, s0
 8014eda:	d615      	bvs.n	8014f08 <asinf+0x48>
 8014edc:	eeb0 0a48 	vmov.f32	s0, s16
 8014ee0:	f000 f838 	bl	8014f54 <fabsf>
 8014ee4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014ee8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef0:	dd0a      	ble.n	8014f08 <asinf+0x48>
 8014ef2:	f7fe f85d 	bl	8012fb0 <__errno>
 8014ef6:	ecbd 8b02 	vpop	{d8}
 8014efa:	2321      	movs	r3, #33	@ 0x21
 8014efc:	6003      	str	r3, [r0, #0]
 8014efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f02:	4804      	ldr	r0, [pc, #16]	@ (8014f14 <asinf+0x54>)
 8014f04:	f000 b82e 	b.w	8014f64 <nanf>
 8014f08:	eeb0 0a68 	vmov.f32	s0, s17
 8014f0c:	ecbd 8b02 	vpop	{d8}
 8014f10:	bd08      	pop	{r3, pc}
 8014f12:	bf00      	nop
 8014f14:	080178fe 	.word	0x080178fe

08014f18 <sqrtf>:
 8014f18:	b508      	push	{r3, lr}
 8014f1a:	ed2d 8b02 	vpush	{d8}
 8014f1e:	eeb0 8a40 	vmov.f32	s16, s0
 8014f22:	f000 f87e 	bl	8015022 <__ieee754_sqrtf>
 8014f26:	eeb4 8a48 	vcmp.f32	s16, s16
 8014f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f2e:	d60c      	bvs.n	8014f4a <sqrtf+0x32>
 8014f30:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014f50 <sqrtf+0x38>
 8014f34:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f3c:	d505      	bpl.n	8014f4a <sqrtf+0x32>
 8014f3e:	f7fe f837 	bl	8012fb0 <__errno>
 8014f42:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014f46:	2321      	movs	r3, #33	@ 0x21
 8014f48:	6003      	str	r3, [r0, #0]
 8014f4a:	ecbd 8b02 	vpop	{d8}
 8014f4e:	bd08      	pop	{r3, pc}
 8014f50:	00000000 	.word	0x00000000

08014f54 <fabsf>:
 8014f54:	ee10 3a10 	vmov	r3, s0
 8014f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014f5c:	ee00 3a10 	vmov	s0, r3
 8014f60:	4770      	bx	lr
	...

08014f64 <nanf>:
 8014f64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014f6c <nanf+0x8>
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	7fc00000 	.word	0x7fc00000

08014f70 <fmaxf>:
 8014f70:	b508      	push	{r3, lr}
 8014f72:	ed2d 8b02 	vpush	{d8}
 8014f76:	eeb0 8a40 	vmov.f32	s16, s0
 8014f7a:	eef0 8a60 	vmov.f32	s17, s1
 8014f7e:	f000 f831 	bl	8014fe4 <__fpclassifyf>
 8014f82:	b930      	cbnz	r0, 8014f92 <fmaxf+0x22>
 8014f84:	eeb0 8a68 	vmov.f32	s16, s17
 8014f88:	eeb0 0a48 	vmov.f32	s0, s16
 8014f8c:	ecbd 8b02 	vpop	{d8}
 8014f90:	bd08      	pop	{r3, pc}
 8014f92:	eeb0 0a68 	vmov.f32	s0, s17
 8014f96:	f000 f825 	bl	8014fe4 <__fpclassifyf>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d0f4      	beq.n	8014f88 <fmaxf+0x18>
 8014f9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa6:	dded      	ble.n	8014f84 <fmaxf+0x14>
 8014fa8:	e7ee      	b.n	8014f88 <fmaxf+0x18>

08014faa <fminf>:
 8014faa:	b508      	push	{r3, lr}
 8014fac:	ed2d 8b02 	vpush	{d8}
 8014fb0:	eeb0 8a40 	vmov.f32	s16, s0
 8014fb4:	eef0 8a60 	vmov.f32	s17, s1
 8014fb8:	f000 f814 	bl	8014fe4 <__fpclassifyf>
 8014fbc:	b930      	cbnz	r0, 8014fcc <fminf+0x22>
 8014fbe:	eeb0 8a68 	vmov.f32	s16, s17
 8014fc2:	eeb0 0a48 	vmov.f32	s0, s16
 8014fc6:	ecbd 8b02 	vpop	{d8}
 8014fca:	bd08      	pop	{r3, pc}
 8014fcc:	eeb0 0a68 	vmov.f32	s0, s17
 8014fd0:	f000 f808 	bl	8014fe4 <__fpclassifyf>
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	d0f4      	beq.n	8014fc2 <fminf+0x18>
 8014fd8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe0:	d5ed      	bpl.n	8014fbe <fminf+0x14>
 8014fe2:	e7ee      	b.n	8014fc2 <fminf+0x18>

08014fe4 <__fpclassifyf>:
 8014fe4:	ee10 3a10 	vmov	r3, s0
 8014fe8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014fec:	d00d      	beq.n	801500a <__fpclassifyf+0x26>
 8014fee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014ff2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014ff6:	d30a      	bcc.n	801500e <__fpclassifyf+0x2a>
 8014ff8:	4b07      	ldr	r3, [pc, #28]	@ (8015018 <__fpclassifyf+0x34>)
 8014ffa:	1e42      	subs	r2, r0, #1
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d908      	bls.n	8015012 <__fpclassifyf+0x2e>
 8015000:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8015004:	4258      	negs	r0, r3
 8015006:	4158      	adcs	r0, r3
 8015008:	4770      	bx	lr
 801500a:	2002      	movs	r0, #2
 801500c:	4770      	bx	lr
 801500e:	2004      	movs	r0, #4
 8015010:	4770      	bx	lr
 8015012:	2003      	movs	r0, #3
 8015014:	4770      	bx	lr
 8015016:	bf00      	nop
 8015018:	007ffffe 	.word	0x007ffffe

0801501c <__ieee754_sqrt>:
 801501c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015020:	4770      	bx	lr

08015022 <__ieee754_sqrtf>:
 8015022:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015026:	4770      	bx	lr

08015028 <__ieee754_fmod>:
 8015028:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801502c:	ed8d 1b00 	vstr	d1, [sp]
 8015030:	e9dd 6500 	ldrd	r6, r5, [sp]
 8015034:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8015038:	ea56 0307 	orrs.w	r3, r6, r7
 801503c:	46b6      	mov	lr, r6
 801503e:	d00d      	beq.n	801505c <__ieee754_fmod+0x34>
 8015040:	ee10 ca90 	vmov	ip, s1
 8015044:	4b78      	ldr	r3, [pc, #480]	@ (8015228 <__ieee754_fmod+0x200>)
 8015046:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 801504a:	4598      	cmp	r8, r3
 801504c:	d806      	bhi.n	801505c <__ieee754_fmod+0x34>
 801504e:	4273      	negs	r3, r6
 8015050:	4a76      	ldr	r2, [pc, #472]	@ (801522c <__ieee754_fmod+0x204>)
 8015052:	4333      	orrs	r3, r6
 8015054:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 8015058:	4293      	cmp	r3, r2
 801505a:	d908      	bls.n	801506e <__ieee754_fmod+0x46>
 801505c:	ed9d 7b00 	vldr	d7, [sp]
 8015060:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015064:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8015068:	b003      	add	sp, #12
 801506a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801506e:	ee10 9a10 	vmov	r9, s0
 8015072:	45b8      	cmp	r8, r7
 8015074:	4649      	mov	r1, r9
 8015076:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 801507a:	dc09      	bgt.n	8015090 <__ieee754_fmod+0x68>
 801507c:	dbf4      	blt.n	8015068 <__ieee754_fmod+0x40>
 801507e:	454e      	cmp	r6, r9
 8015080:	d8f2      	bhi.n	8015068 <__ieee754_fmod+0x40>
 8015082:	d105      	bne.n	8015090 <__ieee754_fmod+0x68>
 8015084:	4b6a      	ldr	r3, [pc, #424]	@ (8015230 <__ieee754_fmod+0x208>)
 8015086:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 801508a:	ed93 0b00 	vldr	d0, [r3]
 801508e:	e7eb      	b.n	8015068 <__ieee754_fmod+0x40>
 8015090:	4a66      	ldr	r2, [pc, #408]	@ (801522c <__ieee754_fmod+0x204>)
 8015092:	ea1c 0f02 	tst.w	ip, r2
 8015096:	d14a      	bne.n	801512e <__ieee754_fmod+0x106>
 8015098:	f1b8 0f00 	cmp.w	r8, #0
 801509c:	d13f      	bne.n	801511e <__ieee754_fmod+0xf6>
 801509e:	4865      	ldr	r0, [pc, #404]	@ (8015234 <__ieee754_fmod+0x20c>)
 80150a0:	464b      	mov	r3, r9
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	dc38      	bgt.n	8015118 <__ieee754_fmod+0xf0>
 80150a6:	4215      	tst	r5, r2
 80150a8:	d150      	bne.n	801514c <__ieee754_fmod+0x124>
 80150aa:	2f00      	cmp	r7, #0
 80150ac:	d147      	bne.n	801513e <__ieee754_fmod+0x116>
 80150ae:	4a61      	ldr	r2, [pc, #388]	@ (8015234 <__ieee754_fmod+0x20c>)
 80150b0:	4633      	mov	r3, r6
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	dc40      	bgt.n	8015138 <__ieee754_fmod+0x110>
 80150b6:	4b60      	ldr	r3, [pc, #384]	@ (8015238 <__ieee754_fmod+0x210>)
 80150b8:	4298      	cmp	r0, r3
 80150ba:	db4b      	blt.n	8015154 <__ieee754_fmod+0x12c>
 80150bc:	f3cc 0313 	ubfx	r3, ip, #0, #20
 80150c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80150c4:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8015238 <__ieee754_fmod+0x210>
 80150c8:	4562      	cmp	r2, ip
 80150ca:	db58      	blt.n	801517e <__ieee754_fmod+0x156>
 80150cc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80150d0:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 80150d4:	1a80      	subs	r0, r0, r2
 80150d6:	1b5e      	subs	r6, r3, r5
 80150d8:	eba1 070e 	sub.w	r7, r1, lr
 80150dc:	2800      	cmp	r0, #0
 80150de:	d164      	bne.n	80151aa <__ieee754_fmod+0x182>
 80150e0:	4571      	cmp	r1, lr
 80150e2:	bf38      	it	cc
 80150e4:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80150e8:	2e00      	cmp	r6, #0
 80150ea:	bfa4      	itt	ge
 80150ec:	4639      	movge	r1, r7
 80150ee:	4633      	movge	r3, r6
 80150f0:	ea53 0001 	orrs.w	r0, r3, r1
 80150f4:	d0c6      	beq.n	8015084 <__ieee754_fmod+0x5c>
 80150f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80150fa:	db6b      	blt.n	80151d4 <__ieee754_fmod+0x1ac>
 80150fc:	484e      	ldr	r0, [pc, #312]	@ (8015238 <__ieee754_fmod+0x210>)
 80150fe:	4282      	cmp	r2, r0
 8015100:	db6e      	blt.n	80151e0 <__ieee754_fmod+0x1b8>
 8015102:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015106:	4323      	orrs	r3, r4
 8015108:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 801510c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015110:	460c      	mov	r4, r1
 8015112:	ec45 4b10 	vmov	d0, r4, r5
 8015116:	e7a7      	b.n	8015068 <__ieee754_fmod+0x40>
 8015118:	3801      	subs	r0, #1
 801511a:	005b      	lsls	r3, r3, #1
 801511c:	e7c1      	b.n	80150a2 <__ieee754_fmod+0x7a>
 801511e:	4846      	ldr	r0, [pc, #280]	@ (8015238 <__ieee754_fmod+0x210>)
 8015120:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015124:	2b00      	cmp	r3, #0
 8015126:	ddbe      	ble.n	80150a6 <__ieee754_fmod+0x7e>
 8015128:	3801      	subs	r0, #1
 801512a:	005b      	lsls	r3, r3, #1
 801512c:	e7fa      	b.n	8015124 <__ieee754_fmod+0xfc>
 801512e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8015132:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8015136:	e7b6      	b.n	80150a6 <__ieee754_fmod+0x7e>
 8015138:	3a01      	subs	r2, #1
 801513a:	005b      	lsls	r3, r3, #1
 801513c:	e7b9      	b.n	80150b2 <__ieee754_fmod+0x8a>
 801513e:	4a3e      	ldr	r2, [pc, #248]	@ (8015238 <__ieee754_fmod+0x210>)
 8015140:	02fb      	lsls	r3, r7, #11
 8015142:	2b00      	cmp	r3, #0
 8015144:	ddb7      	ble.n	80150b6 <__ieee754_fmod+0x8e>
 8015146:	3a01      	subs	r2, #1
 8015148:	005b      	lsls	r3, r3, #1
 801514a:	e7fa      	b.n	8015142 <__ieee754_fmod+0x11a>
 801514c:	153a      	asrs	r2, r7, #20
 801514e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015152:	e7b0      	b.n	80150b6 <__ieee754_fmod+0x8e>
 8015154:	eba3 0c00 	sub.w	ip, r3, r0
 8015158:	f1bc 0f1f 	cmp.w	ip, #31
 801515c:	dc09      	bgt.n	8015172 <__ieee754_fmod+0x14a>
 801515e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 8015162:	fa08 f10c 	lsl.w	r1, r8, ip
 8015166:	fa29 f303 	lsr.w	r3, r9, r3
 801516a:	430b      	orrs	r3, r1
 801516c:	fa09 f10c 	lsl.w	r1, r9, ip
 8015170:	e7a8      	b.n	80150c4 <__ieee754_fmod+0x9c>
 8015172:	4b32      	ldr	r3, [pc, #200]	@ (801523c <__ieee754_fmod+0x214>)
 8015174:	1a1b      	subs	r3, r3, r0
 8015176:	fa09 f303 	lsl.w	r3, r9, r3
 801517a:	2100      	movs	r1, #0
 801517c:	e7a2      	b.n	80150c4 <__ieee754_fmod+0x9c>
 801517e:	ebac 0c02 	sub.w	ip, ip, r2
 8015182:	f1bc 0f1f 	cmp.w	ip, #31
 8015186:	dc09      	bgt.n	801519c <__ieee754_fmod+0x174>
 8015188:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 801518c:	fa07 f70c 	lsl.w	r7, r7, ip
 8015190:	fa26 f505 	lsr.w	r5, r6, r5
 8015194:	433d      	orrs	r5, r7
 8015196:	fa06 fe0c 	lsl.w	lr, r6, ip
 801519a:	e79b      	b.n	80150d4 <__ieee754_fmod+0xac>
 801519c:	4d27      	ldr	r5, [pc, #156]	@ (801523c <__ieee754_fmod+0x214>)
 801519e:	1aad      	subs	r5, r5, r2
 80151a0:	fa06 f505 	lsl.w	r5, r6, r5
 80151a4:	f04f 0e00 	mov.w	lr, #0
 80151a8:	e794      	b.n	80150d4 <__ieee754_fmod+0xac>
 80151aa:	4571      	cmp	r1, lr
 80151ac:	bf38      	it	cc
 80151ae:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80151b2:	2e00      	cmp	r6, #0
 80151b4:	da05      	bge.n	80151c2 <__ieee754_fmod+0x19a>
 80151b6:	0fce      	lsrs	r6, r1, #31
 80151b8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80151bc:	0049      	lsls	r1, r1, #1
 80151be:	3801      	subs	r0, #1
 80151c0:	e789      	b.n	80150d6 <__ieee754_fmod+0xae>
 80151c2:	ea56 0307 	orrs.w	r3, r6, r7
 80151c6:	f43f af5d 	beq.w	8015084 <__ieee754_fmod+0x5c>
 80151ca:	0ffb      	lsrs	r3, r7, #31
 80151cc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80151d0:	0079      	lsls	r1, r7, #1
 80151d2:	e7f4      	b.n	80151be <__ieee754_fmod+0x196>
 80151d4:	0fc8      	lsrs	r0, r1, #31
 80151d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80151da:	0049      	lsls	r1, r1, #1
 80151dc:	3a01      	subs	r2, #1
 80151de:	e78a      	b.n	80150f6 <__ieee754_fmod+0xce>
 80151e0:	1a80      	subs	r0, r0, r2
 80151e2:	2814      	cmp	r0, #20
 80151e4:	dc0c      	bgt.n	8015200 <__ieee754_fmod+0x1d8>
 80151e6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80151ea:	fa03 f202 	lsl.w	r2, r3, r2
 80151ee:	40c1      	lsrs	r1, r0
 80151f0:	430a      	orrs	r2, r1
 80151f2:	4103      	asrs	r3, r0
 80151f4:	ea43 0104 	orr.w	r1, r3, r4
 80151f8:	4610      	mov	r0, r2
 80151fa:	ec41 0b10 	vmov	d0, r0, r1
 80151fe:	e733      	b.n	8015068 <__ieee754_fmod+0x40>
 8015200:	281f      	cmp	r0, #31
 8015202:	dc07      	bgt.n	8015214 <__ieee754_fmod+0x1ec>
 8015204:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8015208:	40c1      	lsrs	r1, r0
 801520a:	fa03 f202 	lsl.w	r2, r3, r2
 801520e:	430a      	orrs	r2, r1
 8015210:	4623      	mov	r3, r4
 8015212:	e7ef      	b.n	80151f4 <__ieee754_fmod+0x1cc>
 8015214:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8015218:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 801521c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8015220:	32e2      	adds	r2, #226	@ 0xe2
 8015222:	fa43 f202 	asr.w	r2, r3, r2
 8015226:	e7f3      	b.n	8015210 <__ieee754_fmod+0x1e8>
 8015228:	7fefffff 	.word	0x7fefffff
 801522c:	7ff00000 	.word	0x7ff00000
 8015230:	08017a00 	.word	0x08017a00
 8015234:	fffffbed 	.word	0xfffffbed
 8015238:	fffffc02 	.word	0xfffffc02
 801523c:	fffffbe2 	.word	0xfffffbe2

08015240 <__ieee754_asinf>:
 8015240:	b538      	push	{r3, r4, r5, lr}
 8015242:	ee10 5a10 	vmov	r5, s0
 8015246:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801524a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801524e:	ed2d 8b04 	vpush	{d8-d9}
 8015252:	d10c      	bne.n	801526e <__ieee754_asinf+0x2e>
 8015254:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80153cc <__ieee754_asinf+0x18c>
 8015258:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80153d0 <__ieee754_asinf+0x190>
 801525c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015260:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015264:	eeb0 0a67 	vmov.f32	s0, s15
 8015268:	ecbd 8b04 	vpop	{d8-d9}
 801526c:	bd38      	pop	{r3, r4, r5, pc}
 801526e:	d904      	bls.n	801527a <__ieee754_asinf+0x3a>
 8015270:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015274:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015278:	e7f6      	b.n	8015268 <__ieee754_asinf+0x28>
 801527a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801527e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8015282:	d20b      	bcs.n	801529c <__ieee754_asinf+0x5c>
 8015284:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8015288:	d252      	bcs.n	8015330 <__ieee754_asinf+0xf0>
 801528a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80153d4 <__ieee754_asinf+0x194>
 801528e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015292:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801529a:	dce5      	bgt.n	8015268 <__ieee754_asinf+0x28>
 801529c:	f7ff fe5a 	bl	8014f54 <fabsf>
 80152a0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80152a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80152a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80152ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80153d8 <__ieee754_asinf+0x198>
 80152b0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80153dc <__ieee754_asinf+0x19c>
 80152b4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80153e0 <__ieee754_asinf+0x1a0>
 80152b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80152bc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80153e4 <__ieee754_asinf+0x1a4>
 80152c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80152c4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80153e8 <__ieee754_asinf+0x1a8>
 80152c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80152cc:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80153ec <__ieee754_asinf+0x1ac>
 80152d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80152d4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80153f0 <__ieee754_asinf+0x1b0>
 80152d8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80152dc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80153f4 <__ieee754_asinf+0x1b4>
 80152e0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80152e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80153f8 <__ieee754_asinf+0x1b8>
 80152e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80152ec:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80153fc <__ieee754_asinf+0x1bc>
 80152f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80152f4:	eeb0 0a48 	vmov.f32	s0, s16
 80152f8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80152fc:	f7ff fe91 	bl	8015022 <__ieee754_sqrtf>
 8015300:	4b3f      	ldr	r3, [pc, #252]	@ (8015400 <__ieee754_asinf+0x1c0>)
 8015302:	ee29 9a08 	vmul.f32	s18, s18, s16
 8015306:	429c      	cmp	r4, r3
 8015308:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801530c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8015310:	d93d      	bls.n	801538e <__ieee754_asinf+0x14e>
 8015312:	eea0 0a06 	vfma.f32	s0, s0, s12
 8015316:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8015404 <__ieee754_asinf+0x1c4>
 801531a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801531e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80153d0 <__ieee754_asinf+0x190>
 8015322:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015326:	2d00      	cmp	r5, #0
 8015328:	bfd8      	it	le
 801532a:	eeb1 0a40 	vnegle.f32	s0, s0
 801532e:	e79b      	b.n	8015268 <__ieee754_asinf+0x28>
 8015330:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015334:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80153dc <__ieee754_asinf+0x19c>
 8015338:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80153d8 <__ieee754_asinf+0x198>
 801533c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80153f0 <__ieee754_asinf+0x1b0>
 8015340:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015344:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80153e4 <__ieee754_asinf+0x1a4>
 8015348:	eee7 6a27 	vfma.f32	s13, s14, s15
 801534c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80153e8 <__ieee754_asinf+0x1a8>
 8015350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015354:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80153ec <__ieee754_asinf+0x1ac>
 8015358:	eee7 6a27 	vfma.f32	s13, s14, s15
 801535c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80153e0 <__ieee754_asinf+0x1a0>
 8015360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015364:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80153f4 <__ieee754_asinf+0x1b4>
 8015368:	eee7 6a86 	vfma.f32	s13, s15, s12
 801536c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80153f8 <__ieee754_asinf+0x1b8>
 8015370:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015374:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80153fc <__ieee754_asinf+0x1bc>
 8015378:	eee6 6a27 	vfma.f32	s13, s12, s15
 801537c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015380:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015384:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015388:	eea0 0a27 	vfma.f32	s0, s0, s15
 801538c:	e76c      	b.n	8015268 <__ieee754_asinf+0x28>
 801538e:	ee10 3a10 	vmov	r3, s0
 8015392:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015396:	f023 030f 	bic.w	r3, r3, #15
 801539a:	ee07 3a10 	vmov	s14, r3
 801539e:	eea7 8a47 	vfms.f32	s16, s14, s14
 80153a2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80153a6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80153aa:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80153cc <__ieee754_asinf+0x18c>
 80153ae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80153b2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8015408 <__ieee754_asinf+0x1c8>
 80153b6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80153ba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80153be:	eeb0 6a40 	vmov.f32	s12, s0
 80153c2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80153c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80153ca:	e7aa      	b.n	8015322 <__ieee754_asinf+0xe2>
 80153cc:	b33bbd2e 	.word	0xb33bbd2e
 80153d0:	3fc90fdb 	.word	0x3fc90fdb
 80153d4:	7149f2ca 	.word	0x7149f2ca
 80153d8:	3a4f7f04 	.word	0x3a4f7f04
 80153dc:	3811ef08 	.word	0x3811ef08
 80153e0:	3e2aaaab 	.word	0x3e2aaaab
 80153e4:	bd241146 	.word	0xbd241146
 80153e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80153ec:	bea6b090 	.word	0xbea6b090
 80153f0:	3d9dc62e 	.word	0x3d9dc62e
 80153f4:	bf303361 	.word	0xbf303361
 80153f8:	4001572d 	.word	0x4001572d
 80153fc:	c019d139 	.word	0xc019d139
 8015400:	3f799999 	.word	0x3f799999
 8015404:	333bbd2e 	.word	0x333bbd2e
 8015408:	3f490fdb 	.word	0x3f490fdb

0801540c <_init>:
 801540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540e:	bf00      	nop
 8015410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015412:	bc08      	pop	{r3}
 8015414:	469e      	mov	lr, r3
 8015416:	4770      	bx	lr

08015418 <_fini>:
 8015418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801541a:	bf00      	nop
 801541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801541e:	bc08      	pop	{r3}
 8015420:	469e      	mov	lr, r3
 8015422:	4770      	bx	lr
